/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API2ControllersWebAPINoteControllerNoteRequest;
import org.openapitools.client.model.BigOvenModelAPI2RecipeNote;
import org.openapitools.client.model.BigOvenModelAPIRecipeNote;
import org.openapitools.client.model.BigOvenModelAPIRecipeNoteList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for noteDelete
     * @param recipeId recipeId (int) (required)
     * @param noteId noteId (int) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteDeleteCall(Integer recipeId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/note/{noteId}"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()))
            .replace("{" + "noteId" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noteDeleteValidateBeforeCall(Integer recipeId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling noteDelete(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling noteDelete(Async)");
        }

        return noteDeleteCall(recipeId, noteId, _callback);

    }

    /**
     * Delete a review                  do a DELETE Http request of /note/{ID}
     * 
     * @param recipeId recipeId (int) (required)
     * @param noteId noteId (int) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object noteDelete(Integer recipeId, Integer noteId) throws ApiException {
        ApiResponse<Object> localVarResp = noteDeleteWithHttpInfo(recipeId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a review                  do a DELETE Http request of /note/{ID}
     * 
     * @param recipeId recipeId (int) (required)
     * @param noteId noteId (int) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> noteDeleteWithHttpInfo(Integer recipeId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = noteDeleteValidateBeforeCall(recipeId, noteId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a review                  do a DELETE Http request of /note/{ID} (asynchronously)
     * 
     * @param recipeId recipeId (int) (required)
     * @param noteId noteId (int) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteDeleteAsync(Integer recipeId, Integer noteId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = noteDeleteValidateBeforeCall(recipeId, noteId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noteGet
     * @param recipeId recipe identifier (integer) (required)
     * @param noteId The note ID (note -- it&#39;s not the RecipeID) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteGetCall(Integer recipeId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/note/{noteId}"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()))
            .replace("{" + "noteId" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noteGetValidateBeforeCall(Integer recipeId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling noteGet(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling noteGet(Async)");
        }

        return noteGetCall(recipeId, noteId, _callback);

    }

    /**
     * Get a given note. Make sure you&#39;re passing authentication information in the header for the user who owns the note.
     * 
     * @param recipeId recipe identifier (integer) (required)
     * @param noteId The note ID (note -- it&#39;s not the RecipeID) (required)
     * @return BigOvenModelAPIRecipeNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipeNote noteGet(Integer recipeId, Integer noteId) throws ApiException {
        ApiResponse<BigOvenModelAPIRecipeNote> localVarResp = noteGetWithHttpInfo(recipeId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get a given note. Make sure you&#39;re passing authentication information in the header for the user who owns the note.
     * 
     * @param recipeId recipe identifier (integer) (required)
     * @param noteId The note ID (note -- it&#39;s not the RecipeID) (required)
     * @return ApiResponse&lt;BigOvenModelAPIRecipeNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipeNote> noteGetWithHttpInfo(Integer recipeId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = noteGetValidateBeforeCall(recipeId, noteId, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given note. Make sure you&#39;re passing authentication information in the header for the user who owns the note. (asynchronously)
     * 
     * @param recipeId recipe identifier (integer) (required)
     * @param noteId The note ID (note -- it&#39;s not the RecipeID) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteGetAsync(Integer recipeId, Integer noteId, final ApiCallback<BigOvenModelAPIRecipeNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = noteGetValidateBeforeCall(recipeId, noteId, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noteGetNotes
     * @param recipeId recipeId (int) (required)
     * @param pg page (int, starting from 1) (optional)
     * @param rpp recipeId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteGetNotesCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/notes"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noteGetNotesValidateBeforeCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling noteGetNotes(Async)");
        }

        return noteGetNotesCall(recipeId, pg, rpp, _callback);

    }

    /**
     * recipe/100/notes
     * 
     * @param recipeId recipeId (int) (required)
     * @param pg page (int, starting from 1) (optional)
     * @param rpp recipeId (optional)
     * @return BigOvenModelAPIRecipeNoteList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipeNoteList noteGetNotes(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        ApiResponse<BigOvenModelAPIRecipeNoteList> localVarResp = noteGetNotesWithHttpInfo(recipeId, pg, rpp);
        return localVarResp.getData();
    }

    /**
     * recipe/100/notes
     * 
     * @param recipeId recipeId (int) (required)
     * @param pg page (int, starting from 1) (optional)
     * @param rpp recipeId (optional)
     * @return ApiResponse&lt;BigOvenModelAPIRecipeNoteList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipeNoteList> noteGetNotesWithHttpInfo(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = noteGetNotesValidateBeforeCall(recipeId, pg, rpp, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNoteList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * recipe/100/notes (asynchronously)
     * 
     * @param recipeId recipeId (int) (required)
     * @param pg page (int, starting from 1) (optional)
     * @param rpp recipeId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noteGetNotesAsync(Integer recipeId, Integer pg, Integer rpp, final ApiCallback<BigOvenModelAPIRecipeNoteList> _callback) throws ApiException {

        okhttp3.Call localVarCall = noteGetNotesValidateBeforeCall(recipeId, pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNoteList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notePost
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notePostCall(Integer recipeId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPINoteControllerNoteRequest;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/note"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notePostValidateBeforeCall(Integer recipeId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling notePost(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPINoteControllerNoteRequest' is set
        if (apI2ControllersWebAPINoteControllerNoteRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPINoteControllerNoteRequest' when calling notePost(Async)");
        }

        return notePostCall(recipeId, apI2ControllersWebAPINoteControllerNoteRequest, _callback);

    }

    /**
     * HTTP POST a new note into the system.
     * 
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?) (required)
     * @return BigOvenModelAPI2RecipeNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2RecipeNote notePost(Integer recipeId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest) throws ApiException {
        ApiResponse<BigOvenModelAPI2RecipeNote> localVarResp = notePostWithHttpInfo(recipeId, apI2ControllersWebAPINoteControllerNoteRequest);
        return localVarResp.getData();
    }

    /**
     * HTTP POST a new note into the system.
     * 
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?) (required)
     * @return ApiResponse&lt;BigOvenModelAPI2RecipeNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2RecipeNote> notePostWithHttpInfo(Integer recipeId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest) throws ApiException {
        okhttp3.Call localVarCall = notePostValidateBeforeCall(recipeId, apI2ControllersWebAPINoteControllerNoteRequest, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HTTP POST a new note into the system. (asynchronously)
     * 
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notePostAsync(Integer recipeId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback<BigOvenModelAPI2RecipeNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = notePostValidateBeforeCall(recipeId, apI2ControllersWebAPINoteControllerNoteRequest, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notePut
     * @param recipeId  (required)
     * @param noteId  (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notePutCall(Integer recipeId, Integer noteId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPINoteControllerNoteRequest;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/note/{noteId}"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()))
            .replace("{" + "noteId" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notePutValidateBeforeCall(Integer recipeId, Integer noteId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling notePut(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling notePut(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPINoteControllerNoteRequest' is set
        if (apI2ControllersWebAPINoteControllerNoteRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPINoteControllerNoteRequest' when calling notePut(Async)");
        }

        return notePutCall(recipeId, noteId, apI2ControllersWebAPINoteControllerNoteRequest, _callback);

    }

    /**
     * HTTP PUT (update) a Recipe note (RecipeNote).
     * 
     * @param recipeId  (required)
     * @param noteId  (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest  (required)
     * @return BigOvenModelAPIRecipeNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipeNote notePut(Integer recipeId, Integer noteId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest) throws ApiException {
        ApiResponse<BigOvenModelAPIRecipeNote> localVarResp = notePutWithHttpInfo(recipeId, noteId, apI2ControllersWebAPINoteControllerNoteRequest);
        return localVarResp.getData();
    }

    /**
     * HTTP PUT (update) a Recipe note (RecipeNote).
     * 
     * @param recipeId  (required)
     * @param noteId  (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest  (required)
     * @return ApiResponse&lt;BigOvenModelAPIRecipeNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipeNote> notePutWithHttpInfo(Integer recipeId, Integer noteId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest) throws ApiException {
        okhttp3.Call localVarCall = notePutValidateBeforeCall(recipeId, noteId, apI2ControllersWebAPINoteControllerNoteRequest, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HTTP PUT (update) a Recipe note (RecipeNote). (asynchronously)
     * 
     * @param recipeId  (required)
     * @param noteId  (required)
     * @param apI2ControllersWebAPINoteControllerNoteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notePutAsync(Integer recipeId, Integer noteId, API2ControllersWebAPINoteControllerNoteRequest apI2ControllersWebAPINoteControllerNoteRequest, final ApiCallback<BigOvenModelAPIRecipeNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = notePutValidateBeforeCall(recipeId, noteId, apI2ControllersWebAPINoteControllerNoteRequest, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipeNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
