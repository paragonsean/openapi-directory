/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BigOvenModelAPI2UserInfoTinyx;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPI2Photo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPI2Photo {
  public static final String SERIALIZED_NAME_CAPTION = "Caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_IMAGE_I_D = "ImageID";
  @SerializedName(SERIALIZED_NAME_IMAGE_I_D)
  private Long imageID;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "IsPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary;

  public static final String SERIALIZED_NAME_MAX_IMAGE_SQUARE = "MaxImageSquare";
  @SerializedName(SERIALIZED_NAME_MAX_IMAGE_SQUARE)
  private Integer maxImageSquare;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private BigOvenModelAPI2UserInfoTinyx poster;

  public BigOvenModelAPI2Photo() {
  }

  public BigOvenModelAPI2Photo caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public BigOvenModelAPI2Photo creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public BigOvenModelAPI2Photo imageID(Long imageID) {
    this.imageID = imageID;
    return this;
  }

  /**
   * Get imageID
   * @return imageID
   */
  @javax.annotation.Nullable
  public Long getImageID() {
    return imageID;
  }

  public void setImageID(Long imageID) {
    this.imageID = imageID;
  }


  public BigOvenModelAPI2Photo isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * Get isPrimary
   * @return isPrimary
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public BigOvenModelAPI2Photo maxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
    return this;
  }

  /**
   * Get maxImageSquare
   * @return maxImageSquare
   */
  @javax.annotation.Nullable
  public Integer getMaxImageSquare() {
    return maxImageSquare;
  }

  public void setMaxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
  }


  public BigOvenModelAPI2Photo photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public BigOvenModelAPI2Photo poster(BigOvenModelAPI2UserInfoTinyx poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public BigOvenModelAPI2UserInfoTinyx getPoster() {
    return poster;
  }

  public void setPoster(BigOvenModelAPI2UserInfoTinyx poster) {
    this.poster = poster;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPI2Photo bigOvenModelAPI2Photo = (BigOvenModelAPI2Photo) o;
    return Objects.equals(this.caption, bigOvenModelAPI2Photo.caption) &&
        Objects.equals(this.creationDate, bigOvenModelAPI2Photo.creationDate) &&
        Objects.equals(this.imageID, bigOvenModelAPI2Photo.imageID) &&
        Objects.equals(this.isPrimary, bigOvenModelAPI2Photo.isPrimary) &&
        Objects.equals(this.maxImageSquare, bigOvenModelAPI2Photo.maxImageSquare) &&
        Objects.equals(this.photoUrl, bigOvenModelAPI2Photo.photoUrl) &&
        Objects.equals(this.poster, bigOvenModelAPI2Photo.poster);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, creationDate, imageID, isPrimary, maxImageSquare, photoUrl, poster);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPI2Photo {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    maxImageSquare: ").append(toIndentedString(maxImageSquare)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Caption");
    openapiFields.add("CreationDate");
    openapiFields.add("ImageID");
    openapiFields.add("IsPrimary");
    openapiFields.add("MaxImageSquare");
    openapiFields.add("PhotoUrl");
    openapiFields.add("Poster");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPI2Photo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPI2Photo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPI2Photo is not found in the empty JSON string", BigOvenModelAPI2Photo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPI2Photo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPI2Photo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Caption") != null && !jsonObj.get("Caption").isJsonNull()) && !jsonObj.get("Caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Caption").toString()));
      }
      if ((jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) && !jsonObj.get("CreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreationDate").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      // validate the optional field `Poster`
      if (jsonObj.get("Poster") != null && !jsonObj.get("Poster").isJsonNull()) {
        BigOvenModelAPI2UserInfoTinyx.validateJsonElement(jsonObj.get("Poster"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPI2Photo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPI2Photo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPI2Photo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPI2Photo.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPI2Photo>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPI2Photo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPI2Photo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPI2Photo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPI2Photo
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPI2Photo
   */
  public static BigOvenModelAPI2Photo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPI2Photo.class);
  }

  /**
   * Convert an instance of BigOvenModelAPI2Photo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

