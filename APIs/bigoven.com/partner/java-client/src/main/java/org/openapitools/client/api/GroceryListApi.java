/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerDepartmentModel;
import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest;
import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest;
import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest;
import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest;
import org.openapitools.client.model.API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest;
import org.openapitools.client.model.API2GroceryListDepartmentResult;
import org.openapitools.client.model.BigOvenModelAPI2GroceryList;
import org.openapitools.client.model.BigOvenModelShoppingListLine;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroceryListApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroceryListApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroceryListApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groceryListAddRecipe
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListAddRecipeCall(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest;

        // create path and map variables
        String localVarPath = "/grocerylist/recipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListAddRecipeValidateBeforeCall(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest' is set
        if (apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest' when calling groceryListAddRecipe(Async)");
        }

        return groceryListAddRecipeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, _callback);

    }

    /**
     * Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale&#x3D;1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that              the lines in the recipe should be marked in a \&quot;pending\&quot; (unconfirmed by user) state.
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object groceryListAddRecipe(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest) throws ApiException {
        ApiResponse<Object> localVarResp = groceryListAddRecipeWithHttpInfo(apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest);
        return localVarResp.getData();
    }

    /**
     * Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale&#x3D;1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that              the lines in the recipe should be marked in a \&quot;pending\&quot; (unconfirmed by user) state.
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groceryListAddRecipeWithHttpInfo(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest) throws ApiException {
        okhttp3.Call localVarCall = groceryListAddRecipeValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale&#x3D;1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that              the lines in the recipe should be marked in a \&quot;pending\&quot; (unconfirmed by user) state. (asynchronously)
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListAddRecipeAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListAddRecipeValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grocerylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groceryListDeleteCall(_callback);

    }

    /**
     * Delete all the items on a grocery list; faster operation than a sync with deleted items.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object groceryListDelete() throws ApiException {
        ApiResponse<Object> localVarResp = groceryListDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Delete all the items on a grocery list; faster operation than a sync with deleted items.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groceryListDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groceryListDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all the items on a grocery list; faster operation than a sync with deleted items. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDeleteAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListDeleteItemByGuid
     * @param guid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDeleteItemByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grocerylist/item/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListDeleteItemByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling groceryListDeleteItemByGuid(Async)");
        }

        return groceryListDeleteItemByGuidCall(guid, _callback);

    }

    /**
     * /grocerylist/item/{guid}  DELETE will delete this item assuming you own it.
     * 
     * @param guid  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object groceryListDeleteItemByGuid(String guid) throws ApiException {
        ApiResponse<Object> localVarResp = groceryListDeleteItemByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * /grocerylist/item/{guid}  DELETE will delete this item assuming you own it.
     * 
     * @param guid  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groceryListDeleteItemByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = groceryListDeleteItemByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /grocerylist/item/{guid}  DELETE will delete this item assuming you own it. (asynchronously)
     * 
     * @param guid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDeleteItemByGuidAsync(String guid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListDeleteItemByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListDepartment
     * @param apI2ControllersWebAPIGroceryListControllerDepartmentModel see DepartmentModel for the request payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDepartmentCall(API2ControllersWebAPIGroceryListControllerDepartmentModel apI2ControllersWebAPIGroceryListControllerDepartmentModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerDepartmentModel;

        // create path and map variables
        String localVarPath = "/grocerylist/department";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListDepartmentValidateBeforeCall(API2ControllersWebAPIGroceryListControllerDepartmentModel apI2ControllersWebAPIGroceryListControllerDepartmentModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerDepartmentModel' is set
        if (apI2ControllersWebAPIGroceryListControllerDepartmentModel == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerDepartmentModel' when calling groceryListDepartment(Async)");
        }

        return groceryListDepartmentCall(apI2ControllersWebAPIGroceryListControllerDepartmentModel, _callback);

    }

    /**
     * Departmentalize a list of strings -- used for ad-hoc grocery list item addition
     * 
     * @param apI2ControllersWebAPIGroceryListControllerDepartmentModel see DepartmentModel for the request payload (required)
     * @return List&lt;API2GroceryListDepartmentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<API2GroceryListDepartmentResult> groceryListDepartment(API2ControllersWebAPIGroceryListControllerDepartmentModel apI2ControllersWebAPIGroceryListControllerDepartmentModel) throws ApiException {
        ApiResponse<List<API2GroceryListDepartmentResult>> localVarResp = groceryListDepartmentWithHttpInfo(apI2ControllersWebAPIGroceryListControllerDepartmentModel);
        return localVarResp.getData();
    }

    /**
     * Departmentalize a list of strings -- used for ad-hoc grocery list item addition
     * 
     * @param apI2ControllersWebAPIGroceryListControllerDepartmentModel see DepartmentModel for the request payload (required)
     * @return ApiResponse&lt;List&lt;API2GroceryListDepartmentResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<API2GroceryListDepartmentResult>> groceryListDepartmentWithHttpInfo(API2ControllersWebAPIGroceryListControllerDepartmentModel apI2ControllersWebAPIGroceryListControllerDepartmentModel) throws ApiException {
        okhttp3.Call localVarCall = groceryListDepartmentValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerDepartmentModel, null);
        Type localVarReturnType = new TypeToken<List<API2GroceryListDepartmentResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Departmentalize a list of strings -- used for ad-hoc grocery list item addition (asynchronously)
     * 
     * @param apI2ControllersWebAPIGroceryListControllerDepartmentModel see DepartmentModel for the request payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListDepartmentAsync(API2ControllersWebAPIGroceryListControllerDepartmentModel apI2ControllersWebAPIGroceryListControllerDepartmentModel, final ApiCallback<List<API2GroceryListDepartmentResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListDepartmentValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerDepartmentModel, _callback);
        Type localVarReturnType = new TypeToken<List<API2GroceryListDepartmentResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grocerylist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groceryListGetCall(_callback);

    }

    /**
     * Get the user&#39;s grocery list.  User is determined by Basic Authentication.
     * 
     * @return BigOvenModelAPI2GroceryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2GroceryList groceryListGet() throws ApiException {
        ApiResponse<BigOvenModelAPI2GroceryList> localVarResp = groceryListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s grocery list.  User is determined by Basic Authentication.
     * 
     * @return ApiResponse&lt;BigOvenModelAPI2GroceryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2GroceryList> groceryListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groceryListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2GroceryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s grocery list.  User is determined by Basic Authentication. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGetAsync(final ApiCallback<BigOvenModelAPI2GroceryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2GroceryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListGroceryListItemGuid
     * @param guid  (required)
     * @param apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGroceryListItemGuidCall(String guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest;

        // create path and map variables
        String localVarPath = "/grocerylist/item/{guid}"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListGroceryListItemGuidValidateBeforeCall(String guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling groceryListGroceryListItemGuid(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest' is set
        if (apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest' when calling groceryListGroceryListItemGuid(Async)");
        }

        return groceryListGroceryListItemGuidCall(guid, apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, _callback);

    }

    /**
     * Update a grocery item by GUID
     * 
     * @param guid  (required)
     * @param apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object groceryListGroceryListItemGuid(String guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest) throws ApiException {
        ApiResponse<Object> localVarResp = groceryListGroceryListItemGuidWithHttpInfo(guid, apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest);
        return localVarResp.getData();
    }

    /**
     * Update a grocery item by GUID
     * 
     * @param guid  (required)
     * @param apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groceryListGroceryListItemGuidWithHttpInfo(String guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest) throws ApiException {
        okhttp3.Call localVarCall = groceryListGroceryListItemGuidValidateBeforeCall(guid, apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a grocery item by GUID (asynchronously)
     * 
     * @param guid  (required)
     * @param apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGroceryListItemGuidAsync(String guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListGroceryListItemGuidValidateBeforeCall(guid, apI2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListGroceryListRemoveMarkedItems
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGroceryListRemoveMarkedItemsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grocerylist/clearcheckedlines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListGroceryListRemoveMarkedItemsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groceryListGroceryListRemoveMarkedItemsCall(_callback);

    }

    /**
     * Clears the checked lines.
     * 
     * @return BigOvenModelAPI2GroceryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2GroceryList groceryListGroceryListRemoveMarkedItems() throws ApiException {
        ApiResponse<BigOvenModelAPI2GroceryList> localVarResp = groceryListGroceryListRemoveMarkedItemsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Clears the checked lines.
     * 
     * @return ApiResponse&lt;BigOvenModelAPI2GroceryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2GroceryList> groceryListGroceryListRemoveMarkedItemsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groceryListGroceryListRemoveMarkedItemsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2GroceryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears the checked lines. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListGroceryListRemoveMarkedItemsAsync(final ApiCallback<BigOvenModelAPI2GroceryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListGroceryListRemoveMarkedItemsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2GroceryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListPost
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest name, quantity, unit, notes, department (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListPostCall(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest;

        // create path and map variables
        String localVarPath = "/grocerylist/line";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListPostValidateBeforeCall(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest' is set
        if (apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest' when calling groceryListPost(Async)");
        }

        return groceryListPostCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, _callback);

    }

    /**
     * Add a single line item to the grocery list
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest name, quantity, unit, notes, department (required)
     * @return BigOvenModelShoppingListLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelShoppingListLine groceryListPost(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest) throws ApiException {
        ApiResponse<BigOvenModelShoppingListLine> localVarResp = groceryListPostWithHttpInfo(apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest);
        return localVarResp.getData();
    }

    /**
     * Add a single line item to the grocery list
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest name, quantity, unit, notes, department (required)
     * @return ApiResponse&lt;BigOvenModelShoppingListLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelShoppingListLine> groceryListPostWithHttpInfo(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest) throws ApiException {
        okhttp3.Call localVarCall = groceryListPostValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, null);
        Type localVarReturnType = new TypeToken<BigOvenModelShoppingListLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a single line item to the grocery list (asynchronously)
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest name, quantity, unit, notes, department (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListPostAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, final ApiCallback<BigOvenModelShoppingListLine> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListPostValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelShoppingListLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groceryListPostGroceryListSync
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListPostGroceryListSyncCall(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest;

        // create path and map variables
        String localVarPath = "/grocerylist/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groceryListPostGroceryListSyncValidateBeforeCall(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest' is set
        if (apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest' when calling groceryListPostGroceryListSync(Async)");
        }

        return groceryListPostGroceryListSyncCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, _callback);

    }

    /**
     * Synchronize the grocery list.  Call this with a POST to /grocerylist/sync
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object groceryListPostGroceryListSync(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest) throws ApiException {
        ApiResponse<Object> localVarResp = groceryListPostGroceryListSyncWithHttpInfo(apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Synchronize the grocery list.  Call this with a POST to /grocerylist/sync
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groceryListPostGroceryListSyncWithHttpInfo(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = groceryListPostGroceryListSyncValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Synchronize the grocery list.  Call this with a POST to /grocerylist/sync (asynchronously)
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groceryListPostGroceryListSyncAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groceryListPostGroceryListSyncValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grocerylistItemPost
     * @param apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest name, quantity, unit, notes, department (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grocerylistItemPostCall(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest;

        // create path and map variables
        String localVarPath = "/grocerylist/item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grocerylistItemPostValidateBeforeCall(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest' is set
        if (apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest' when calling grocerylistItemPost(Async)");
        }

        return grocerylistItemPostCall(apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, _callback);

    }

    /**
     * Add a single line item to the grocery list
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest name, quantity, unit, notes, department (required)
     * @return BigOvenModelShoppingListLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelShoppingListLine grocerylistItemPost(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest) throws ApiException {
        ApiResponse<BigOvenModelShoppingListLine> localVarResp = grocerylistItemPostWithHttpInfo(apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest);
        return localVarResp.getData();
    }

    /**
     * Add a single line item to the grocery list
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest name, quantity, unit, notes, department (required)
     * @return ApiResponse&lt;BigOvenModelShoppingListLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelShoppingListLine> grocerylistItemPostWithHttpInfo(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest) throws ApiException {
        okhttp3.Call localVarCall = grocerylistItemPostValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, null);
        Type localVarReturnType = new TypeToken<BigOvenModelShoppingListLine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a single line item to the grocery list (asynchronously)
     * 
     * @param apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest name, quantity, unit, notes, department (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grocerylistItemPostAsync(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, final ApiCallback<BigOvenModelShoppingListLine> _callback) throws ApiException {

        okhttp3.Call localVarCall = grocerylistItemPostValidateBeforeCall(apI2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelShoppingListLine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
