/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BigOvenModelAPIUserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPIImage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPIImage {
  public static final String SERIALIZED_NAME_CAPTION = "Caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_IMAGE_I_D = "ImageID";
  @SerializedName(SERIALIZED_NAME_IMAGE_I_D)
  private Long imageID;

  public static final String SERIALIZED_NAME_IMAGE_SQUARES = "ImageSquares";
  @SerializedName(SERIALIZED_NAME_IMAGE_SQUARES)
  private List<Integer> imageSquares = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_U_R_L = "ImageURL";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L)
  private String imageURL;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L120 = "ImageURL120";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L120)
  private String imageURL120;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L128 = "ImageURL128";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L128)
  private String imageURL128;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L200 = "ImageURL200";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L200)
  private String imageURL200;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L256 = "ImageURL256";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L256)
  private String imageURL256;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L48 = "ImageURL48";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L48)
  private String imageURL48;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L64 = "ImageURL64";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L64)
  private String imageURL64;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "IsPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary;

  public static final String SERIALIZED_NAME_MAX_IMAGE_SQUARE = "MaxImageSquare";
  @SerializedName(SERIALIZED_NAME_MAX_IMAGE_SQUARE)
  private Integer maxImageSquare;

  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private BigOvenModelAPIUserInfo poster;

  public BigOvenModelAPIImage() {
  }

  public BigOvenModelAPIImage caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public BigOvenModelAPIImage creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public BigOvenModelAPIImage imageID(Long imageID) {
    this.imageID = imageID;
    return this;
  }

  /**
   * Get imageID
   * @return imageID
   */
  @javax.annotation.Nullable
  public Long getImageID() {
    return imageID;
  }

  public void setImageID(Long imageID) {
    this.imageID = imageID;
  }


  public BigOvenModelAPIImage imageSquares(List<Integer> imageSquares) {
    this.imageSquares = imageSquares;
    return this;
  }

  public BigOvenModelAPIImage addImageSquaresItem(Integer imageSquaresItem) {
    if (this.imageSquares == null) {
      this.imageSquares = new ArrayList<>();
    }
    this.imageSquares.add(imageSquaresItem);
    return this;
  }

  /**
   * Get imageSquares
   * @return imageSquares
   */
  @javax.annotation.Nullable
  public List<Integer> getImageSquares() {
    return imageSquares;
  }

  public void setImageSquares(List<Integer> imageSquares) {
    this.imageSquares = imageSquares;
  }


  public BigOvenModelAPIImage imageURL(String imageURL) {
    this.imageURL = imageURL;
    return this;
  }

  /**
   * Get imageURL
   * @return imageURL
   */
  @javax.annotation.Nullable
  public String getImageURL() {
    return imageURL;
  }

  public void setImageURL(String imageURL) {
    this.imageURL = imageURL;
  }


  public BigOvenModelAPIImage imageURL120(String imageURL120) {
    this.imageURL120 = imageURL120;
    return this;
  }

  /**
   * Get imageURL120
   * @return imageURL120
   */
  @javax.annotation.Nullable
  public String getImageURL120() {
    return imageURL120;
  }

  public void setImageURL120(String imageURL120) {
    this.imageURL120 = imageURL120;
  }


  public BigOvenModelAPIImage imageURL128(String imageURL128) {
    this.imageURL128 = imageURL128;
    return this;
  }

  /**
   * Get imageURL128
   * @return imageURL128
   */
  @javax.annotation.Nullable
  public String getImageURL128() {
    return imageURL128;
  }

  public void setImageURL128(String imageURL128) {
    this.imageURL128 = imageURL128;
  }


  public BigOvenModelAPIImage imageURL200(String imageURL200) {
    this.imageURL200 = imageURL200;
    return this;
  }

  /**
   * Get imageURL200
   * @return imageURL200
   */
  @javax.annotation.Nullable
  public String getImageURL200() {
    return imageURL200;
  }

  public void setImageURL200(String imageURL200) {
    this.imageURL200 = imageURL200;
  }


  public BigOvenModelAPIImage imageURL256(String imageURL256) {
    this.imageURL256 = imageURL256;
    return this;
  }

  /**
   * Get imageURL256
   * @return imageURL256
   */
  @javax.annotation.Nullable
  public String getImageURL256() {
    return imageURL256;
  }

  public void setImageURL256(String imageURL256) {
    this.imageURL256 = imageURL256;
  }


  public BigOvenModelAPIImage imageURL48(String imageURL48) {
    this.imageURL48 = imageURL48;
    return this;
  }

  /**
   * Get imageURL48
   * @return imageURL48
   */
  @javax.annotation.Nullable
  public String getImageURL48() {
    return imageURL48;
  }

  public void setImageURL48(String imageURL48) {
    this.imageURL48 = imageURL48;
  }


  public BigOvenModelAPIImage imageURL64(String imageURL64) {
    this.imageURL64 = imageURL64;
    return this;
  }

  /**
   * Get imageURL64
   * @return imageURL64
   */
  @javax.annotation.Nullable
  public String getImageURL64() {
    return imageURL64;
  }

  public void setImageURL64(String imageURL64) {
    this.imageURL64 = imageURL64;
  }


  public BigOvenModelAPIImage isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * Get isPrimary
   * @return isPrimary
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public BigOvenModelAPIImage maxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
    return this;
  }

  /**
   * Get maxImageSquare
   * @return maxImageSquare
   */
  @javax.annotation.Nullable
  public Integer getMaxImageSquare() {
    return maxImageSquare;
  }

  public void setMaxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
  }


  public BigOvenModelAPIImage poster(BigOvenModelAPIUserInfo poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public BigOvenModelAPIUserInfo getPoster() {
    return poster;
  }

  public void setPoster(BigOvenModelAPIUserInfo poster) {
    this.poster = poster;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPIImage bigOvenModelAPIImage = (BigOvenModelAPIImage) o;
    return Objects.equals(this.caption, bigOvenModelAPIImage.caption) &&
        Objects.equals(this.creationDate, bigOvenModelAPIImage.creationDate) &&
        Objects.equals(this.imageID, bigOvenModelAPIImage.imageID) &&
        Objects.equals(this.imageSquares, bigOvenModelAPIImage.imageSquares) &&
        Objects.equals(this.imageURL, bigOvenModelAPIImage.imageURL) &&
        Objects.equals(this.imageURL120, bigOvenModelAPIImage.imageURL120) &&
        Objects.equals(this.imageURL128, bigOvenModelAPIImage.imageURL128) &&
        Objects.equals(this.imageURL200, bigOvenModelAPIImage.imageURL200) &&
        Objects.equals(this.imageURL256, bigOvenModelAPIImage.imageURL256) &&
        Objects.equals(this.imageURL48, bigOvenModelAPIImage.imageURL48) &&
        Objects.equals(this.imageURL64, bigOvenModelAPIImage.imageURL64) &&
        Objects.equals(this.isPrimary, bigOvenModelAPIImage.isPrimary) &&
        Objects.equals(this.maxImageSquare, bigOvenModelAPIImage.maxImageSquare) &&
        Objects.equals(this.poster, bigOvenModelAPIImage.poster);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, creationDate, imageID, imageSquares, imageURL, imageURL120, imageURL128, imageURL200, imageURL256, imageURL48, imageURL64, isPrimary, maxImageSquare, poster);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPIImage {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    imageSquares: ").append(toIndentedString(imageSquares)).append("\n");
    sb.append("    imageURL: ").append(toIndentedString(imageURL)).append("\n");
    sb.append("    imageURL120: ").append(toIndentedString(imageURL120)).append("\n");
    sb.append("    imageURL128: ").append(toIndentedString(imageURL128)).append("\n");
    sb.append("    imageURL200: ").append(toIndentedString(imageURL200)).append("\n");
    sb.append("    imageURL256: ").append(toIndentedString(imageURL256)).append("\n");
    sb.append("    imageURL48: ").append(toIndentedString(imageURL48)).append("\n");
    sb.append("    imageURL64: ").append(toIndentedString(imageURL64)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    maxImageSquare: ").append(toIndentedString(maxImageSquare)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Caption");
    openapiFields.add("CreationDate");
    openapiFields.add("ImageID");
    openapiFields.add("ImageSquares");
    openapiFields.add("ImageURL");
    openapiFields.add("ImageURL120");
    openapiFields.add("ImageURL128");
    openapiFields.add("ImageURL200");
    openapiFields.add("ImageURL256");
    openapiFields.add("ImageURL48");
    openapiFields.add("ImageURL64");
    openapiFields.add("IsPrimary");
    openapiFields.add("MaxImageSquare");
    openapiFields.add("Poster");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPIImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPIImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPIImage is not found in the empty JSON string", BigOvenModelAPIImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPIImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPIImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Caption") != null && !jsonObj.get("Caption").isJsonNull()) && !jsonObj.get("Caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Caption").toString()));
      }
      if ((jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) && !jsonObj.get("CreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreationDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ImageSquares") != null && !jsonObj.get("ImageSquares").isJsonNull() && !jsonObj.get("ImageSquares").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageSquares` to be an array in the JSON string but got `%s`", jsonObj.get("ImageSquares").toString()));
      }
      if ((jsonObj.get("ImageURL") != null && !jsonObj.get("ImageURL").isJsonNull()) && !jsonObj.get("ImageURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL").toString()));
      }
      if ((jsonObj.get("ImageURL120") != null && !jsonObj.get("ImageURL120").isJsonNull()) && !jsonObj.get("ImageURL120").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL120` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL120").toString()));
      }
      if ((jsonObj.get("ImageURL128") != null && !jsonObj.get("ImageURL128").isJsonNull()) && !jsonObj.get("ImageURL128").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL128` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL128").toString()));
      }
      if ((jsonObj.get("ImageURL200") != null && !jsonObj.get("ImageURL200").isJsonNull()) && !jsonObj.get("ImageURL200").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL200` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL200").toString()));
      }
      if ((jsonObj.get("ImageURL256") != null && !jsonObj.get("ImageURL256").isJsonNull()) && !jsonObj.get("ImageURL256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL256").toString()));
      }
      if ((jsonObj.get("ImageURL48") != null && !jsonObj.get("ImageURL48").isJsonNull()) && !jsonObj.get("ImageURL48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL48").toString()));
      }
      if ((jsonObj.get("ImageURL64") != null && !jsonObj.get("ImageURL64").isJsonNull()) && !jsonObj.get("ImageURL64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL64").toString()));
      }
      // validate the optional field `Poster`
      if (jsonObj.get("Poster") != null && !jsonObj.get("Poster").isJsonNull()) {
        BigOvenModelAPIUserInfo.validateJsonElement(jsonObj.get("Poster"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPIImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPIImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPIImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPIImage.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPIImage>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPIImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPIImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPIImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPIImage
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPIImage
   */
  public static BigOvenModelAPIImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPIImage.class);
  }

  /**
   * Convert an instance of BigOvenModelAPIImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

