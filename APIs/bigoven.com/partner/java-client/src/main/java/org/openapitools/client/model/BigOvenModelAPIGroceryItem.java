/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPIGroceryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPIGroceryItem {
  public static final String SERIALIZED_NAME_BIG_OVEN_OBJECT = "BigOvenObject";
  @SerializedName(SERIALIZED_NAME_BIG_OVEN_OBJECT)
  private String bigOvenObject;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DEPARTMENT = "Department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DISPLAY_QUANTITY = "DisplayQuantity";
  @SerializedName(SERIALIZED_NAME_DISPLAY_QUANTITY)
  private String displayQuantity;

  public static final String SERIALIZED_NAME_G_U_I_D = "GUID";
  @SerializedName(SERIALIZED_NAME_G_U_I_D)
  private String GUID;

  public static final String SERIALIZED_NAME_IS_CHECKED = "IsChecked";
  @SerializedName(SERIALIZED_NAME_IS_CHECKED)
  private Boolean isChecked;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private Long itemID;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "LastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_LOCAL_STATUS = "LocalStatus";
  @SerializedName(SERIALIZED_NAME_LOCAL_STATUS)
  private String localStatus;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_RECIPE_I_D = "RecipeID";
  @SerializedName(SERIALIZED_NAME_RECIPE_I_D)
  private Integer recipeID;

  public static final String SERIALIZED_NAME_THIRD_PARTY_U_R_L = "ThirdPartyURL";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_U_R_L)
  private String thirdPartyURL;

  public BigOvenModelAPIGroceryItem() {
  }

  public BigOvenModelAPIGroceryItem bigOvenObject(String bigOvenObject) {
    this.bigOvenObject = bigOvenObject;
    return this;
  }

  /**
   * Get bigOvenObject
   * @return bigOvenObject
   */
  @javax.annotation.Nullable
  public String getBigOvenObject() {
    return bigOvenObject;
  }

  public void setBigOvenObject(String bigOvenObject) {
    this.bigOvenObject = bigOvenObject;
  }


  public BigOvenModelAPIGroceryItem creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public BigOvenModelAPIGroceryItem department(String department) {
    this.department = department;
    return this;
  }

  /**
   * Get department
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public BigOvenModelAPIGroceryItem displayQuantity(String displayQuantity) {
    this.displayQuantity = displayQuantity;
    return this;
  }

  /**
   * Get displayQuantity
   * @return displayQuantity
   */
  @javax.annotation.Nullable
  public String getDisplayQuantity() {
    return displayQuantity;
  }

  public void setDisplayQuantity(String displayQuantity) {
    this.displayQuantity = displayQuantity;
  }


  public BigOvenModelAPIGroceryItem GUID(String GUID) {
    this.GUID = GUID;
    return this;
  }

  /**
   * Get GUID
   * @return GUID
   */
  @javax.annotation.Nullable
  public String getGUID() {
    return GUID;
  }

  public void setGUID(String GUID) {
    this.GUID = GUID;
  }


  public BigOvenModelAPIGroceryItem isChecked(Boolean isChecked) {
    this.isChecked = isChecked;
    return this;
  }

  /**
   * Get isChecked
   * @return isChecked
   */
  @javax.annotation.Nullable
  public Boolean getIsChecked() {
    return isChecked;
  }

  public void setIsChecked(Boolean isChecked) {
    this.isChecked = isChecked;
  }


  public BigOvenModelAPIGroceryItem itemID(Long itemID) {
    this.itemID = itemID;
    return this;
  }

  /**
   * Get itemID
   * @return itemID
   */
  @javax.annotation.Nullable
  public Long getItemID() {
    return itemID;
  }

  public void setItemID(Long itemID) {
    this.itemID = itemID;
  }


  public BigOvenModelAPIGroceryItem lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public BigOvenModelAPIGroceryItem localStatus(String localStatus) {
    this.localStatus = localStatus;
    return this;
  }

  /**
   * Get localStatus
   * @return localStatus
   */
  @javax.annotation.Nullable
  public String getLocalStatus() {
    return localStatus;
  }

  public void setLocalStatus(String localStatus) {
    this.localStatus = localStatus;
  }


  public BigOvenModelAPIGroceryItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BigOvenModelAPIGroceryItem notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public BigOvenModelAPIGroceryItem recipeID(Integer recipeID) {
    this.recipeID = recipeID;
    return this;
  }

  /**
   * Get recipeID
   * @return recipeID
   */
  @javax.annotation.Nullable
  public Integer getRecipeID() {
    return recipeID;
  }

  public void setRecipeID(Integer recipeID) {
    this.recipeID = recipeID;
  }


  public BigOvenModelAPIGroceryItem thirdPartyURL(String thirdPartyURL) {
    this.thirdPartyURL = thirdPartyURL;
    return this;
  }

  /**
   * Get thirdPartyURL
   * @return thirdPartyURL
   */
  @javax.annotation.Nullable
  public String getThirdPartyURL() {
    return thirdPartyURL;
  }

  public void setThirdPartyURL(String thirdPartyURL) {
    this.thirdPartyURL = thirdPartyURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPIGroceryItem bigOvenModelAPIGroceryItem = (BigOvenModelAPIGroceryItem) o;
    return Objects.equals(this.bigOvenObject, bigOvenModelAPIGroceryItem.bigOvenObject) &&
        Objects.equals(this.creationDate, bigOvenModelAPIGroceryItem.creationDate) &&
        Objects.equals(this.department, bigOvenModelAPIGroceryItem.department) &&
        Objects.equals(this.displayQuantity, bigOvenModelAPIGroceryItem.displayQuantity) &&
        Objects.equals(this.GUID, bigOvenModelAPIGroceryItem.GUID) &&
        Objects.equals(this.isChecked, bigOvenModelAPIGroceryItem.isChecked) &&
        Objects.equals(this.itemID, bigOvenModelAPIGroceryItem.itemID) &&
        Objects.equals(this.lastModified, bigOvenModelAPIGroceryItem.lastModified) &&
        Objects.equals(this.localStatus, bigOvenModelAPIGroceryItem.localStatus) &&
        Objects.equals(this.name, bigOvenModelAPIGroceryItem.name) &&
        Objects.equals(this.notes, bigOvenModelAPIGroceryItem.notes) &&
        Objects.equals(this.recipeID, bigOvenModelAPIGroceryItem.recipeID) &&
        Objects.equals(this.thirdPartyURL, bigOvenModelAPIGroceryItem.thirdPartyURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigOvenObject, creationDate, department, displayQuantity, GUID, isChecked, itemID, lastModified, localStatus, name, notes, recipeID, thirdPartyURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPIGroceryItem {\n");
    sb.append("    bigOvenObject: ").append(toIndentedString(bigOvenObject)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    displayQuantity: ").append(toIndentedString(displayQuantity)).append("\n");
    sb.append("    GUID: ").append(toIndentedString(GUID)).append("\n");
    sb.append("    isChecked: ").append(toIndentedString(isChecked)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    localStatus: ").append(toIndentedString(localStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    recipeID: ").append(toIndentedString(recipeID)).append("\n");
    sb.append("    thirdPartyURL: ").append(toIndentedString(thirdPartyURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BigOvenObject");
    openapiFields.add("CreationDate");
    openapiFields.add("Department");
    openapiFields.add("DisplayQuantity");
    openapiFields.add("GUID");
    openapiFields.add("IsChecked");
    openapiFields.add("ItemID");
    openapiFields.add("LastModified");
    openapiFields.add("LocalStatus");
    openapiFields.add("Name");
    openapiFields.add("Notes");
    openapiFields.add("RecipeID");
    openapiFields.add("ThirdPartyURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPIGroceryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPIGroceryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPIGroceryItem is not found in the empty JSON string", BigOvenModelAPIGroceryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPIGroceryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPIGroceryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BigOvenObject") != null && !jsonObj.get("BigOvenObject").isJsonNull()) && !jsonObj.get("BigOvenObject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BigOvenObject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BigOvenObject").toString()));
      }
      if ((jsonObj.get("Department") != null && !jsonObj.get("Department").isJsonNull()) && !jsonObj.get("Department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Department").toString()));
      }
      if ((jsonObj.get("DisplayQuantity") != null && !jsonObj.get("DisplayQuantity").isJsonNull()) && !jsonObj.get("DisplayQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayQuantity").toString()));
      }
      if ((jsonObj.get("GUID") != null && !jsonObj.get("GUID").isJsonNull()) && !jsonObj.get("GUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GUID").toString()));
      }
      if ((jsonObj.get("LocalStatus") != null && !jsonObj.get("LocalStatus").isJsonNull()) && !jsonObj.get("LocalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalStatus").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if ((jsonObj.get("ThirdPartyURL") != null && !jsonObj.get("ThirdPartyURL").isJsonNull()) && !jsonObj.get("ThirdPartyURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThirdPartyURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThirdPartyURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPIGroceryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPIGroceryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPIGroceryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPIGroceryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPIGroceryItem>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPIGroceryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPIGroceryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPIGroceryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPIGroceryItem
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPIGroceryItem
   */
  public static BigOvenModelAPIGroceryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPIGroceryItem.class);
  }

  /**
   * Convert an instance of BigOvenModelAPIGroceryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

