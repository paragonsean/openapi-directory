/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BigOvenModelAPIUserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPIRecipeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPIRecipeInfo {
  public static final String SERIALIZED_NAME_BOOKMARK_U_R_L = "BookmarkURL";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_U_R_L)
  private String bookmarkURL;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CUISINE = "Cuisine";
  @SerializedName(SERIALIZED_NAME_CUISINE)
  private String cuisine;

  public static final String SERIALIZED_NAME_HAS_VIDEOS = "HasVideos";
  @SerializedName(SERIALIZED_NAME_HAS_VIDEOS)
  private Boolean hasVideos;

  public static final String SERIALIZED_NAME_HERO_PHOTO_URL = "HeroPhotoUrl";
  @SerializedName(SERIALIZED_NAME_HERO_PHOTO_URL)
  private String heroPhotoUrl;

  public static final String SERIALIZED_NAME_HIDE_FROM_PUBLIC_SEARCH = "HideFromPublicSearch";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_PUBLIC_SEARCH)
  private Boolean hideFromPublicSearch;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L = "ImageURL";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L)
  private String imageURL;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L120 = "ImageURL120";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L120)
  private String imageURL120;

  public static final String SERIALIZED_NAME_IS_BOOKMARK = "IsBookmark";
  @SerializedName(SERIALIZED_NAME_IS_BOOKMARK)
  private Boolean isBookmark;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "IsPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_MAX_IMAGE_SQUARE = "MaxImageSquare";
  @SerializedName(SERIALIZED_NAME_MAX_IMAGE_SQUARE)
  private Integer maxImageSquare;

  public static final String SERIALIZED_NAME_MICROCATEGORY = "Microcategory";
  @SerializedName(SERIALIZED_NAME_MICROCATEGORY)
  private String microcategory;

  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private BigOvenModelAPIUserInfo poster;

  public static final String SERIALIZED_NAME_QUALITY_SCORE = "QualityScore";
  @SerializedName(SERIALIZED_NAME_QUALITY_SCORE)
  private Double qualityScore;

  public static final String SERIALIZED_NAME_RECIPE_I_D = "RecipeID";
  @SerializedName(SERIALIZED_NAME_RECIPE_I_D)
  private Integer recipeID;

  public static final String SERIALIZED_NAME_REVIEW_COUNT = "ReviewCount";
  @SerializedName(SERIALIZED_NAME_REVIEW_COUNT)
  private Integer reviewCount;

  public static final String SERIALIZED_NAME_STAR_RATING = "StarRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Double starRating;

  public static final String SERIALIZED_NAME_STAR_RATING_I_M_G = "StarRatingIMG";
  @SerializedName(SERIALIZED_NAME_STAR_RATING_I_M_G)
  private String starRatingIMG;

  public static final String SERIALIZED_NAME_SUBCATEGORY = "Subcategory";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORY)
  private String subcategory;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_TRIES = "TotalTries";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRIES)
  private Integer totalTries;

  public static final String SERIALIZED_NAME_WEB_U_R_L = "WebURL";
  @SerializedName(SERIALIZED_NAME_WEB_U_R_L)
  private String webURL;

  public static final String SERIALIZED_NAME_YIELD_NUMBER = "YieldNumber";
  @SerializedName(SERIALIZED_NAME_YIELD_NUMBER)
  private Double yieldNumber;

  public BigOvenModelAPIRecipeInfo() {
  }

  public BigOvenModelAPIRecipeInfo bookmarkURL(String bookmarkURL) {
    this.bookmarkURL = bookmarkURL;
    return this;
  }

  /**
   * Get bookmarkURL
   * @return bookmarkURL
   */
  @javax.annotation.Nullable
  public String getBookmarkURL() {
    return bookmarkURL;
  }

  public void setBookmarkURL(String bookmarkURL) {
    this.bookmarkURL = bookmarkURL;
  }


  public BigOvenModelAPIRecipeInfo category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public BigOvenModelAPIRecipeInfo creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public BigOvenModelAPIRecipeInfo cuisine(String cuisine) {
    this.cuisine = cuisine;
    return this;
  }

  /**
   * Get cuisine
   * @return cuisine
   */
  @javax.annotation.Nullable
  public String getCuisine() {
    return cuisine;
  }

  public void setCuisine(String cuisine) {
    this.cuisine = cuisine;
  }


  public BigOvenModelAPIRecipeInfo hasVideos(Boolean hasVideos) {
    this.hasVideos = hasVideos;
    return this;
  }

  /**
   * Get hasVideos
   * @return hasVideos
   */
  @javax.annotation.Nullable
  public Boolean getHasVideos() {
    return hasVideos;
  }

  public void setHasVideos(Boolean hasVideos) {
    this.hasVideos = hasVideos;
  }


  public BigOvenModelAPIRecipeInfo heroPhotoUrl(String heroPhotoUrl) {
    this.heroPhotoUrl = heroPhotoUrl;
    return this;
  }

  /**
   * Get heroPhotoUrl
   * @return heroPhotoUrl
   */
  @javax.annotation.Nullable
  public String getHeroPhotoUrl() {
    return heroPhotoUrl;
  }

  public void setHeroPhotoUrl(String heroPhotoUrl) {
    this.heroPhotoUrl = heroPhotoUrl;
  }


  public BigOvenModelAPIRecipeInfo hideFromPublicSearch(Boolean hideFromPublicSearch) {
    this.hideFromPublicSearch = hideFromPublicSearch;
    return this;
  }

  /**
   * Get hideFromPublicSearch
   * @return hideFromPublicSearch
   */
  @javax.annotation.Nullable
  public Boolean getHideFromPublicSearch() {
    return hideFromPublicSearch;
  }

  public void setHideFromPublicSearch(Boolean hideFromPublicSearch) {
    this.hideFromPublicSearch = hideFromPublicSearch;
  }


  public BigOvenModelAPIRecipeInfo imageURL(String imageURL) {
    this.imageURL = imageURL;
    return this;
  }

  /**
   * Get imageURL
   * @return imageURL
   */
  @javax.annotation.Nullable
  public String getImageURL() {
    return imageURL;
  }

  public void setImageURL(String imageURL) {
    this.imageURL = imageURL;
  }


  public BigOvenModelAPIRecipeInfo imageURL120(String imageURL120) {
    this.imageURL120 = imageURL120;
    return this;
  }

  /**
   * Get imageURL120
   * @return imageURL120
   */
  @javax.annotation.Nullable
  public String getImageURL120() {
    return imageURL120;
  }

  public void setImageURL120(String imageURL120) {
    this.imageURL120 = imageURL120;
  }


  public BigOvenModelAPIRecipeInfo isBookmark(Boolean isBookmark) {
    this.isBookmark = isBookmark;
    return this;
  }

  /**
   * Get isBookmark
   * @return isBookmark
   */
  @javax.annotation.Nullable
  public Boolean getIsBookmark() {
    return isBookmark;
  }

  public void setIsBookmark(Boolean isBookmark) {
    this.isBookmark = isBookmark;
  }


  public BigOvenModelAPIRecipeInfo isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Get isPrivate
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public BigOvenModelAPIRecipeInfo maxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
    return this;
  }

  /**
   * Get maxImageSquare
   * @return maxImageSquare
   */
  @javax.annotation.Nullable
  public Integer getMaxImageSquare() {
    return maxImageSquare;
  }

  public void setMaxImageSquare(Integer maxImageSquare) {
    this.maxImageSquare = maxImageSquare;
  }


  public BigOvenModelAPIRecipeInfo microcategory(String microcategory) {
    this.microcategory = microcategory;
    return this;
  }

  /**
   * Get microcategory
   * @return microcategory
   */
  @javax.annotation.Nullable
  public String getMicrocategory() {
    return microcategory;
  }

  public void setMicrocategory(String microcategory) {
    this.microcategory = microcategory;
  }


  public BigOvenModelAPIRecipeInfo poster(BigOvenModelAPIUserInfo poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public BigOvenModelAPIUserInfo getPoster() {
    return poster;
  }

  public void setPoster(BigOvenModelAPIUserInfo poster) {
    this.poster = poster;
  }


  public BigOvenModelAPIRecipeInfo qualityScore(Double qualityScore) {
    this.qualityScore = qualityScore;
    return this;
  }

  /**
   * Get qualityScore
   * @return qualityScore
   */
  @javax.annotation.Nullable
  public Double getQualityScore() {
    return qualityScore;
  }

  public void setQualityScore(Double qualityScore) {
    this.qualityScore = qualityScore;
  }


  public BigOvenModelAPIRecipeInfo recipeID(Integer recipeID) {
    this.recipeID = recipeID;
    return this;
  }

  /**
   * Get recipeID
   * @return recipeID
   */
  @javax.annotation.Nullable
  public Integer getRecipeID() {
    return recipeID;
  }

  public void setRecipeID(Integer recipeID) {
    this.recipeID = recipeID;
  }


  public BigOvenModelAPIRecipeInfo reviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
    return this;
  }

  /**
   * Get reviewCount
   * @return reviewCount
   */
  @javax.annotation.Nullable
  public Integer getReviewCount() {
    return reviewCount;
  }

  public void setReviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
  }


  public BigOvenModelAPIRecipeInfo starRating(Double starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * Get starRating
   * @return starRating
   */
  @javax.annotation.Nullable
  public Double getStarRating() {
    return starRating;
  }

  public void setStarRating(Double starRating) {
    this.starRating = starRating;
  }


  public BigOvenModelAPIRecipeInfo starRatingIMG(String starRatingIMG) {
    this.starRatingIMG = starRatingIMG;
    return this;
  }

  /**
   * Get starRatingIMG
   * @return starRatingIMG
   */
  @javax.annotation.Nullable
  public String getStarRatingIMG() {
    return starRatingIMG;
  }

  public void setStarRatingIMG(String starRatingIMG) {
    this.starRatingIMG = starRatingIMG;
  }


  public BigOvenModelAPIRecipeInfo subcategory(String subcategory) {
    this.subcategory = subcategory;
    return this;
  }

  /**
   * Get subcategory
   * @return subcategory
   */
  @javax.annotation.Nullable
  public String getSubcategory() {
    return subcategory;
  }

  public void setSubcategory(String subcategory) {
    this.subcategory = subcategory;
  }


  public BigOvenModelAPIRecipeInfo title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BigOvenModelAPIRecipeInfo totalTries(Integer totalTries) {
    this.totalTries = totalTries;
    return this;
  }

  /**
   * Get totalTries
   * @return totalTries
   */
  @javax.annotation.Nullable
  public Integer getTotalTries() {
    return totalTries;
  }

  public void setTotalTries(Integer totalTries) {
    this.totalTries = totalTries;
  }


  public BigOvenModelAPIRecipeInfo webURL(String webURL) {
    this.webURL = webURL;
    return this;
  }

  /**
   * Get webURL
   * @return webURL
   */
  @javax.annotation.Nullable
  public String getWebURL() {
    return webURL;
  }

  public void setWebURL(String webURL) {
    this.webURL = webURL;
  }


  public BigOvenModelAPIRecipeInfo yieldNumber(Double yieldNumber) {
    this.yieldNumber = yieldNumber;
    return this;
  }

  /**
   * Get yieldNumber
   * @return yieldNumber
   */
  @javax.annotation.Nullable
  public Double getYieldNumber() {
    return yieldNumber;
  }

  public void setYieldNumber(Double yieldNumber) {
    this.yieldNumber = yieldNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPIRecipeInfo bigOvenModelAPIRecipeInfo = (BigOvenModelAPIRecipeInfo) o;
    return Objects.equals(this.bookmarkURL, bigOvenModelAPIRecipeInfo.bookmarkURL) &&
        Objects.equals(this.category, bigOvenModelAPIRecipeInfo.category) &&
        Objects.equals(this.creationDate, bigOvenModelAPIRecipeInfo.creationDate) &&
        Objects.equals(this.cuisine, bigOvenModelAPIRecipeInfo.cuisine) &&
        Objects.equals(this.hasVideos, bigOvenModelAPIRecipeInfo.hasVideos) &&
        Objects.equals(this.heroPhotoUrl, bigOvenModelAPIRecipeInfo.heroPhotoUrl) &&
        Objects.equals(this.hideFromPublicSearch, bigOvenModelAPIRecipeInfo.hideFromPublicSearch) &&
        Objects.equals(this.imageURL, bigOvenModelAPIRecipeInfo.imageURL) &&
        Objects.equals(this.imageURL120, bigOvenModelAPIRecipeInfo.imageURL120) &&
        Objects.equals(this.isBookmark, bigOvenModelAPIRecipeInfo.isBookmark) &&
        Objects.equals(this.isPrivate, bigOvenModelAPIRecipeInfo.isPrivate) &&
        Objects.equals(this.maxImageSquare, bigOvenModelAPIRecipeInfo.maxImageSquare) &&
        Objects.equals(this.microcategory, bigOvenModelAPIRecipeInfo.microcategory) &&
        Objects.equals(this.poster, bigOvenModelAPIRecipeInfo.poster) &&
        Objects.equals(this.qualityScore, bigOvenModelAPIRecipeInfo.qualityScore) &&
        Objects.equals(this.recipeID, bigOvenModelAPIRecipeInfo.recipeID) &&
        Objects.equals(this.reviewCount, bigOvenModelAPIRecipeInfo.reviewCount) &&
        Objects.equals(this.starRating, bigOvenModelAPIRecipeInfo.starRating) &&
        Objects.equals(this.starRatingIMG, bigOvenModelAPIRecipeInfo.starRatingIMG) &&
        Objects.equals(this.subcategory, bigOvenModelAPIRecipeInfo.subcategory) &&
        Objects.equals(this.title, bigOvenModelAPIRecipeInfo.title) &&
        Objects.equals(this.totalTries, bigOvenModelAPIRecipeInfo.totalTries) &&
        Objects.equals(this.webURL, bigOvenModelAPIRecipeInfo.webURL) &&
        Objects.equals(this.yieldNumber, bigOvenModelAPIRecipeInfo.yieldNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookmarkURL, category, creationDate, cuisine, hasVideos, heroPhotoUrl, hideFromPublicSearch, imageURL, imageURL120, isBookmark, isPrivate, maxImageSquare, microcategory, poster, qualityScore, recipeID, reviewCount, starRating, starRatingIMG, subcategory, title, totalTries, webURL, yieldNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPIRecipeInfo {\n");
    sb.append("    bookmarkURL: ").append(toIndentedString(bookmarkURL)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    cuisine: ").append(toIndentedString(cuisine)).append("\n");
    sb.append("    hasVideos: ").append(toIndentedString(hasVideos)).append("\n");
    sb.append("    heroPhotoUrl: ").append(toIndentedString(heroPhotoUrl)).append("\n");
    sb.append("    hideFromPublicSearch: ").append(toIndentedString(hideFromPublicSearch)).append("\n");
    sb.append("    imageURL: ").append(toIndentedString(imageURL)).append("\n");
    sb.append("    imageURL120: ").append(toIndentedString(imageURL120)).append("\n");
    sb.append("    isBookmark: ").append(toIndentedString(isBookmark)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    maxImageSquare: ").append(toIndentedString(maxImageSquare)).append("\n");
    sb.append("    microcategory: ").append(toIndentedString(microcategory)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    qualityScore: ").append(toIndentedString(qualityScore)).append("\n");
    sb.append("    recipeID: ").append(toIndentedString(recipeID)).append("\n");
    sb.append("    reviewCount: ").append(toIndentedString(reviewCount)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("    starRatingIMG: ").append(toIndentedString(starRatingIMG)).append("\n");
    sb.append("    subcategory: ").append(toIndentedString(subcategory)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalTries: ").append(toIndentedString(totalTries)).append("\n");
    sb.append("    webURL: ").append(toIndentedString(webURL)).append("\n");
    sb.append("    yieldNumber: ").append(toIndentedString(yieldNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BookmarkURL");
    openapiFields.add("Category");
    openapiFields.add("CreationDate");
    openapiFields.add("Cuisine");
    openapiFields.add("HasVideos");
    openapiFields.add("HeroPhotoUrl");
    openapiFields.add("HideFromPublicSearch");
    openapiFields.add("ImageURL");
    openapiFields.add("ImageURL120");
    openapiFields.add("IsBookmark");
    openapiFields.add("IsPrivate");
    openapiFields.add("MaxImageSquare");
    openapiFields.add("Microcategory");
    openapiFields.add("Poster");
    openapiFields.add("QualityScore");
    openapiFields.add("RecipeID");
    openapiFields.add("ReviewCount");
    openapiFields.add("StarRating");
    openapiFields.add("StarRatingIMG");
    openapiFields.add("Subcategory");
    openapiFields.add("Title");
    openapiFields.add("TotalTries");
    openapiFields.add("WebURL");
    openapiFields.add("YieldNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPIRecipeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPIRecipeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPIRecipeInfo is not found in the empty JSON string", BigOvenModelAPIRecipeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPIRecipeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPIRecipeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BookmarkURL") != null && !jsonObj.get("BookmarkURL").isJsonNull()) && !jsonObj.get("BookmarkURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BookmarkURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BookmarkURL").toString()));
      }
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Cuisine") != null && !jsonObj.get("Cuisine").isJsonNull()) && !jsonObj.get("Cuisine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cuisine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cuisine").toString()));
      }
      if ((jsonObj.get("HeroPhotoUrl") != null && !jsonObj.get("HeroPhotoUrl").isJsonNull()) && !jsonObj.get("HeroPhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HeroPhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HeroPhotoUrl").toString()));
      }
      if ((jsonObj.get("ImageURL") != null && !jsonObj.get("ImageURL").isJsonNull()) && !jsonObj.get("ImageURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL").toString()));
      }
      if ((jsonObj.get("ImageURL120") != null && !jsonObj.get("ImageURL120").isJsonNull()) && !jsonObj.get("ImageURL120").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageURL120` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageURL120").toString()));
      }
      if ((jsonObj.get("Microcategory") != null && !jsonObj.get("Microcategory").isJsonNull()) && !jsonObj.get("Microcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Microcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Microcategory").toString()));
      }
      // validate the optional field `Poster`
      if (jsonObj.get("Poster") != null && !jsonObj.get("Poster").isJsonNull()) {
        BigOvenModelAPIUserInfo.validateJsonElement(jsonObj.get("Poster"));
      }
      if ((jsonObj.get("StarRatingIMG") != null && !jsonObj.get("StarRatingIMG").isJsonNull()) && !jsonObj.get("StarRatingIMG").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StarRatingIMG` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StarRatingIMG").toString()));
      }
      if ((jsonObj.get("Subcategory") != null && !jsonObj.get("Subcategory").isJsonNull()) && !jsonObj.get("Subcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subcategory").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("WebURL") != null && !jsonObj.get("WebURL").isJsonNull()) && !jsonObj.get("WebURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPIRecipeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPIRecipeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPIRecipeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPIRecipeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPIRecipeInfo>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPIRecipeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPIRecipeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPIRecipeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPIRecipeInfo
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPIRecipeInfo
   */
  public static BigOvenModelAPIRecipeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPIRecipeInfo.class);
  }

  /**
   * Convert an instance of BigOvenModelAPIRecipeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

