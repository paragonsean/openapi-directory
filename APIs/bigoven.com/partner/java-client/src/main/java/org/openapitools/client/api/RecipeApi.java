/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API2ModelsRecipesFeedbackDTO;
import org.openapitools.client.model.API2ModelsRecipesRecipeResponse;
import org.openapitools.client.model.API2Result;
import org.openapitools.client.model.BigOvenModelAPI2Recipe;
import org.openapitools.client.model.BigOvenModelAPI2RecipeSearchResult;
import org.openapitools.client.model.BigOvenModelAPIRecipe;
import org.openapitools.client.model.BigOvenModelRecipeCategory;
import org.openapitools.client.model.BigOvenModelRecipeInfoDateTuple2;
import org.openapitools.client.model.BigOvenModelRecipeInfoReviewTuple2;
import org.openapitools.client.model.BigOvenModelRecipeInfoTiny;
import org.openapitools.client.model.BigOvenResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecipeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecipeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecipeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recipeAutoComplete
     * @param query  (required)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeAutoCompleteValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling recipeAutoComplete(Async)");
        }

        return recipeAutoCompleteCall(query, limit, _callback);

    }

    /**
     * Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
     * 
     * @param query  (required)
     * @param limit  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> recipeAutoComplete(String query, Integer limit) throws ApiException {
        ApiResponse<List<String>> localVarResp = recipeAutoCompleteWithHttpInfo(query, limit);
        return localVarResp.getData();
    }

    /**
     * Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
     * 
     * @param query  (required)
     * @param limit  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> recipeAutoCompleteWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = recipeAutoCompleteValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a query, return recipe titles starting with query. Query must be at least 3 chars in length. (asynchronously)
     * 
     * @param query  (required)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteAsync(String query, Integer limit, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeAutoCompleteValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeAutoCompleteAllRecipes
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteAllRecipesCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/autocomplete/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeAutoCompleteAllRecipesValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling recipeAutoCompleteAllRecipes(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling recipeAutoCompleteAllRecipes(Async)");
        }

        return recipeAutoCompleteAllRecipesCall(query, limit, _callback);

    }

    /**
     * Automatics the complete all recipes.
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @return List&lt;BigOvenModelRecipeInfoTiny&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelRecipeInfoTiny> recipeAutoCompleteAllRecipes(String query, Integer limit) throws ApiException {
        ApiResponse<List<BigOvenModelRecipeInfoTiny>> localVarResp = recipeAutoCompleteAllRecipesWithHttpInfo(query, limit);
        return localVarResp.getData();
    }

    /**
     * Automatics the complete all recipes.
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @return ApiResponse&lt;List&lt;BigOvenModelRecipeInfoTiny&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelRecipeInfoTiny>> recipeAutoCompleteAllRecipesWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = recipeAutoCompleteAllRecipesValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoTiny>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automatics the complete all recipes. (asynchronously)
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteAllRecipesAsync(String query, Integer limit, final ApiCallback<List<BigOvenModelRecipeInfoTiny>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeAutoCompleteAllRecipesValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoTiny>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeAutoCompleteMyRecipes
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteMyRecipesCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/autocomplete/mine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeAutoCompleteMyRecipesValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling recipeAutoCompleteMyRecipes(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling recipeAutoCompleteMyRecipes(Async)");
        }

        return recipeAutoCompleteMyRecipesCall(query, limit, _callback);

    }

    /**
     * Automatics the complete my recipes.
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @return List&lt;BigOvenModelRecipeInfoTiny&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelRecipeInfoTiny> recipeAutoCompleteMyRecipes(String query, Integer limit) throws ApiException {
        ApiResponse<List<BigOvenModelRecipeInfoTiny>> localVarResp = recipeAutoCompleteMyRecipesWithHttpInfo(query, limit);
        return localVarResp.getData();
    }

    /**
     * Automatics the complete my recipes.
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @return ApiResponse&lt;List&lt;BigOvenModelRecipeInfoTiny&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelRecipeInfoTiny>> recipeAutoCompleteMyRecipesWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = recipeAutoCompleteMyRecipesValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoTiny>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automatics the complete my recipes. (asynchronously)
     * 
     * @param query The query. (required)
     * @param limit The limit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeAutoCompleteMyRecipesAsync(String query, Integer limit, final ApiCallback<List<BigOvenModelRecipeInfoTiny>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeAutoCompleteMyRecipesValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoTiny>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return recipeCategoriesCall(_callback);

    }

    /**
     * Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
     * 
     * @return List&lt;BigOvenModelRecipeCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelRecipeCategory> recipeCategories() throws ApiException {
        ApiResponse<List<BigOvenModelRecipeCategory>> localVarResp = recipeCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
     * 
     * @return ApiResponse&lt;List&lt;BigOvenModelRecipeCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelRecipeCategory>> recipeCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = recipeCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of recipe categories (the ID field can be used for include_cat in search parameters) (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeCategoriesAsync(final ApiCallback<List<BigOvenModelRecipeCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeDelete(Async)");
        }

        return recipeDeleteCall(id, _callback);

    }

    /**
     * Delete a Recipe (you must be authenticated as an owner of the recipe)
     * 
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object recipeDelete(Integer id) throws ApiException {
        ApiResponse<Object> localVarResp = recipeDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a Recipe (you must be authenticated as an owner of the recipe)
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> recipeDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = recipeDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Recipe (you must be authenticated as an owner of the recipe) (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeDeleteAsync(Integer id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeFeedback
     * @param recipeId  (required)
     * @param apI2ModelsRecipesFeedbackDTO The payload for feedback, which includes the field \&quot;feedback\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeFeedbackCall(Integer recipeId, API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ModelsRecipesFeedbackDTO;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/feedback"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeFeedbackValidateBeforeCall(Integer recipeId, API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeFeedback(Async)");
        }

        // verify the required parameter 'apI2ModelsRecipesFeedbackDTO' is set
        if (apI2ModelsRecipesFeedbackDTO == null) {
            throw new ApiException("Missing the required parameter 'apI2ModelsRecipesFeedbackDTO' when calling recipeFeedback(Async)");
        }

        return recipeFeedbackCall(recipeId, apI2ModelsRecipesFeedbackDTO, _callback);

    }

    /**
     * Feedback on a Recipe -- for internal BigOven editors
     * 
     * @param recipeId  (required)
     * @param apI2ModelsRecipesFeedbackDTO The payload for feedback, which includes the field \&quot;feedback\&quot; (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object recipeFeedback(Integer recipeId, API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO) throws ApiException {
        ApiResponse<Object> localVarResp = recipeFeedbackWithHttpInfo(recipeId, apI2ModelsRecipesFeedbackDTO);
        return localVarResp.getData();
    }

    /**
     * Feedback on a Recipe -- for internal BigOven editors
     * 
     * @param recipeId  (required)
     * @param apI2ModelsRecipesFeedbackDTO The payload for feedback, which includes the field \&quot;feedback\&quot; (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> recipeFeedbackWithHttpInfo(Integer recipeId, API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO) throws ApiException {
        okhttp3.Call localVarCall = recipeFeedbackValidateBeforeCall(recipeId, apI2ModelsRecipesFeedbackDTO, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Feedback on a Recipe -- for internal BigOven editors (asynchronously)
     * 
     * @param recipeId  (required)
     * @param apI2ModelsRecipesFeedbackDTO The payload for feedback, which includes the field \&quot;feedback\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeFeedbackAsync(Integer recipeId, API2ModelsRecipesFeedbackDTO apI2ModelsRecipesFeedbackDTO, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeFeedbackValidateBeforeCall(recipeId, apI2ModelsRecipesFeedbackDTO, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGet
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetCall(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefetch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefetch", prefetch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetValidateBeforeCall(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeGet(Async)");
        }

        return recipeGetCall(id, prefetch, _callback);

    }

    /**
     * Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @return BigOvenModelAPI2Recipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2Recipe recipeGet(Integer id, Boolean prefetch) throws ApiException {
        ApiResponse<BigOvenModelAPI2Recipe> localVarResp = recipeGetWithHttpInfo(id, prefetch);
        return localVarResp.getData();
    }

    /**
     * Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @return ApiResponse&lt;BigOvenModelAPI2Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2Recipe> recipeGetWithHttpInfo(Integer id, Boolean prefetch) throws ApiException {
        okhttp3.Call localVarCall = recipeGetValidateBeforeCall(id, prefetch, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2Recipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return full Recipe detail. Returns 403 if the recipe is owned by someone else. (asynchronously)
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetAsync(Integer id, Boolean prefetch, final ApiCallback<BigOvenModelAPI2Recipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetValidateBeforeCall(id, prefetch, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2Recipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetActiveRecipe
     * @param userName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetActiveRecipeCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/get/active/recipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetActiveRecipeValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recipeGetActiveRecipe(Async)");
        }

        return recipeGetActiveRecipeCall(userName, _callback);

    }

    /**
     * Returns last active recipe for the user
     * 
     * @param userName  (required)
     * @return BigOvenResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenResult recipeGetActiveRecipe(String userName) throws ApiException {
        ApiResponse<BigOvenResult> localVarResp = recipeGetActiveRecipeWithHttpInfo(userName);
        return localVarResp.getData();
    }

    /**
     * Returns last active recipe for the user
     * 
     * @param userName  (required)
     * @return ApiResponse&lt;BigOvenResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenResult> recipeGetActiveRecipeWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = recipeGetActiveRecipeValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<BigOvenResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns last active recipe for the user (asynchronously)
     * 
     * @param userName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetActiveRecipeAsync(String userName, final ApiCallback<BigOvenResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetActiveRecipeValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<BigOvenResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetRandomRecipe
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetRandomRecipeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetRandomRecipeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return recipeGetRandomRecipeCall(_callback);

    }

    /**
     * Get a random, home-page-quality Recipe.
     * 
     * @return BigOvenModelAPIRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipe recipeGetRandomRecipe() throws ApiException {
        ApiResponse<BigOvenModelAPIRecipe> localVarResp = recipeGetRandomRecipeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a random, home-page-quality Recipe.
     * 
     * @return ApiResponse&lt;BigOvenModelAPIRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipe> recipeGetRandomRecipeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = recipeGetRandomRecipeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a random, home-page-quality Recipe. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetRandomRecipeAsync(final ApiCallback<BigOvenModelAPIRecipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetRandomRecipeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetRecipeWithSteps
     * @param id the Recipe ID to retrieve (required)
     * @param prefetch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetRecipeWithStepsCall(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/steps/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefetch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefetch", prefetch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetRecipeWithStepsValidateBeforeCall(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeGetRecipeWithSteps(Async)");
        }

        return recipeGetRecipeWithStepsCall(id, prefetch, _callback);

    }

    /**
     * Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
     * 
     * @param id the Recipe ID to retrieve (required)
     * @param prefetch  (optional)
     * @return BigOvenModelAPI2Recipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2Recipe recipeGetRecipeWithSteps(Integer id, Boolean prefetch) throws ApiException {
        ApiResponse<BigOvenModelAPI2Recipe> localVarResp = recipeGetRecipeWithStepsWithHttpInfo(id, prefetch);
        return localVarResp.getData();
    }

    /**
     * Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
     * 
     * @param id the Recipe ID to retrieve (required)
     * @param prefetch  (optional)
     * @return ApiResponse&lt;BigOvenModelAPI2Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2Recipe> recipeGetRecipeWithStepsWithHttpInfo(Integer id, Boolean prefetch) throws ApiException {
        okhttp3.Call localVarCall = recipeGetRecipeWithStepsValidateBeforeCall(id, prefetch, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2Recipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else. (asynchronously)
     * 
     * @param id the Recipe ID to retrieve (required)
     * @param prefetch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetRecipeWithStepsAsync(Integer id, Boolean prefetch, final ApiCallback<BigOvenModelAPI2Recipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetRecipeWithStepsValidateBeforeCall(id, prefetch, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2Recipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetStep
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepCall(String userName, Integer recipeId, Integer stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/get/saved/step";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (recipeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeId", recipeId));
        }

        if (stepId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stepId", stepId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetStepValidateBeforeCall(String userName, Integer recipeId, Integer stepId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recipeGetStep(Async)");
        }

        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeGetStep(Async)");
        }

        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling recipeGetStep(Async)");
        }

        return recipeGetStepCall(userName, recipeId, stepId, _callback);

    }

    /**
     * Gets recipe single step as text
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String recipeGetStep(String userName, Integer recipeId, Integer stepId) throws ApiException {
        ApiResponse<String> localVarResp = recipeGetStepWithHttpInfo(userName, recipeId, stepId);
        return localVarResp.getData();
    }

    /**
     * Gets recipe single step as text
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> recipeGetStepWithHttpInfo(String userName, Integer recipeId, Integer stepId) throws ApiException {
        okhttp3.Call localVarCall = recipeGetStepValidateBeforeCall(userName, recipeId, stepId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets recipe single step as text (asynchronously)
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepAsync(String userName, Integer recipeId, Integer stepId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetStepValidateBeforeCall(userName, recipeId, stepId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetStepNumber
     * @param userName  (required)
     * @param recipeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepNumberCall(String userName, Integer recipeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/get/step/number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (recipeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeId", recipeId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetStepNumberValidateBeforeCall(String userName, Integer recipeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recipeGetStepNumber(Async)");
        }

        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeGetStepNumber(Async)");
        }

        return recipeGetStepNumberCall(userName, recipeId, _callback);

    }

    /**
     * Returns stored step number and number of steps in recipe
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @return API2Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public API2Result recipeGetStepNumber(String userName, Integer recipeId) throws ApiException {
        ApiResponse<API2Result> localVarResp = recipeGetStepNumberWithHttpInfo(userName, recipeId);
        return localVarResp.getData();
    }

    /**
     * Returns stored step number and number of steps in recipe
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @return ApiResponse&lt;API2Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<API2Result> recipeGetStepNumberWithHttpInfo(String userName, Integer recipeId) throws ApiException {
        okhttp3.Call localVarCall = recipeGetStepNumberValidateBeforeCall(userName, recipeId, null);
        Type localVarReturnType = new TypeToken<API2Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns stored step number and number of steps in recipe (asynchronously)
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepNumberAsync(String userName, Integer recipeId, final ApiCallback<API2Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetStepNumberValidateBeforeCall(userName, recipeId, _callback);
        Type localVarReturnType = new TypeToken<API2Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetSteps
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepsCall(String userName, Integer recipeId, Integer stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/post/step";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (recipeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeId", recipeId));
        }

        if (stepId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stepId", stepId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetStepsValidateBeforeCall(String userName, Integer recipeId, Integer stepId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recipeGetSteps(Async)");
        }

        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeGetSteps(Async)");
        }

        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling recipeGetSteps(Async)");
        }

        return recipeGetStepsCall(userName, recipeId, stepId, _callback);

    }

    /**
     * Stores recipe step number and returns saved step data
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @return BigOvenResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenResult recipeGetSteps(String userName, Integer recipeId, Integer stepId) throws ApiException {
        ApiResponse<BigOvenResult> localVarResp = recipeGetStepsWithHttpInfo(userName, recipeId, stepId);
        return localVarResp.getData();
    }

    /**
     * Stores recipe step number and returns saved step data
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @return ApiResponse&lt;BigOvenResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenResult> recipeGetStepsWithHttpInfo(String userName, Integer recipeId, Integer stepId) throws ApiException {
        okhttp3.Call localVarCall = recipeGetStepsValidateBeforeCall(userName, recipeId, stepId, null);
        Type localVarReturnType = new TypeToken<BigOvenResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stores recipe step number and returns saved step data (asynchronously)
     * 
     * @param userName  (required)
     * @param recipeId  (required)
     * @param stepId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetStepsAsync(String userName, Integer recipeId, Integer stepId, final ApiCallback<BigOvenResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetStepsValidateBeforeCall(userName, recipeId, stepId, _callback);
        Type localVarReturnType = new TypeToken<BigOvenResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeGetV2
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetV2Call(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefetch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefetch", prefetch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeGetV2ValidateBeforeCall(Integer id, Boolean prefetch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeGetV2(Async)");
        }

        return recipeGetV2Call(id, prefetch, _callback);

    }

    /**
     * Same as GET recipe but also includes the recipe videos (if any)
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @return API2ModelsRecipesRecipeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public API2ModelsRecipesRecipeResponse recipeGetV2(Integer id, Boolean prefetch) throws ApiException {
        ApiResponse<API2ModelsRecipesRecipeResponse> localVarResp = recipeGetV2WithHttpInfo(id, prefetch);
        return localVarResp.getData();
    }

    /**
     * Same as GET recipe but also includes the recipe videos (if any)
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @return ApiResponse&lt;API2ModelsRecipesRecipeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<API2ModelsRecipesRecipeResponse> recipeGetV2WithHttpInfo(Integer id, Boolean prefetch) throws ApiException {
        okhttp3.Call localVarCall = recipeGetV2ValidateBeforeCall(id, prefetch, null);
        Type localVarReturnType = new TypeToken<API2ModelsRecipesRecipeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Same as GET recipe but also includes the recipe videos (if any) (asynchronously)
     * 
     * @param id The Recipe ID to retrieve (required)
     * @param prefetch The prefetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeGetV2Async(Integer id, Boolean prefetch, final ApiCallback<API2ModelsRecipesRecipeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeGetV2ValidateBeforeCall(id, prefetch, _callback);
        Type localVarReturnType = new TypeToken<API2ModelsRecipesRecipeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipePost
     * @param bigOvenModelAPIRecipe  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipePostCall(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bigOvenModelAPIRecipe;

        // create path and map variables
        String localVarPath = "/recipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipePostValidateBeforeCall(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bigOvenModelAPIRecipe' is set
        if (bigOvenModelAPIRecipe == null) {
            throw new ApiException("Missing the required parameter 'bigOvenModelAPIRecipe' when calling recipePost(Async)");
        }

        return recipePostCall(bigOvenModelAPIRecipe, _callback);

    }

    /**
     * Add a new recipe
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @return BigOvenModelAPIRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipe recipePost(BigOvenModelAPIRecipe bigOvenModelAPIRecipe) throws ApiException {
        ApiResponse<BigOvenModelAPIRecipe> localVarResp = recipePostWithHttpInfo(bigOvenModelAPIRecipe);
        return localVarResp.getData();
    }

    /**
     * Add a new recipe
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @return ApiResponse&lt;BigOvenModelAPIRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipe> recipePostWithHttpInfo(BigOvenModelAPIRecipe bigOvenModelAPIRecipe) throws ApiException {
        okhttp3.Call localVarCall = recipePostValidateBeforeCall(bigOvenModelAPIRecipe, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new recipe (asynchronously)
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipePostAsync(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback<BigOvenModelAPIRecipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipePostValidateBeforeCall(bigOvenModelAPIRecipe, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipePut
     * @param bigOvenModelAPIRecipe  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipePutCall(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bigOvenModelAPIRecipe;

        // create path and map variables
        String localVarPath = "/recipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipePutValidateBeforeCall(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bigOvenModelAPIRecipe' is set
        if (bigOvenModelAPIRecipe == null) {
            throw new ApiException("Missing the required parameter 'bigOvenModelAPIRecipe' when calling recipePut(Async)");
        }

        return recipePutCall(bigOvenModelAPIRecipe, _callback);

    }

    /**
     * Update a recipe
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @return BigOvenModelAPIRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIRecipe recipePut(BigOvenModelAPIRecipe bigOvenModelAPIRecipe) throws ApiException {
        ApiResponse<BigOvenModelAPIRecipe> localVarResp = recipePutWithHttpInfo(bigOvenModelAPIRecipe);
        return localVarResp.getData();
    }

    /**
     * Update a recipe
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @return ApiResponse&lt;BigOvenModelAPIRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIRecipe> recipePutWithHttpInfo(BigOvenModelAPIRecipe bigOvenModelAPIRecipe) throws ApiException {
        okhttp3.Call localVarCall = recipePutValidateBeforeCall(bigOvenModelAPIRecipe, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a recipe (asynchronously)
     * 
     * @param bigOvenModelAPIRecipe  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipePutAsync(BigOvenModelAPIRecipe bigOvenModelAPIRecipe, final ApiCallback<BigOvenModelAPIRecipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipePutValidateBeforeCall(bigOvenModelAPIRecipe, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIRecipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeRaves
     * @param pg page, starting with 1 (optional)
     * @param rpp results per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRavesCall(Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/raves";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRavesValidateBeforeCall(Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        return recipeRavesCall(pg, rpp, _callback);

    }

    /**
     * Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
     * 
     * @param pg page, starting with 1 (optional)
     * @param rpp results per page (optional)
     * @return List&lt;BigOvenModelRecipeInfoReviewTuple2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelRecipeInfoReviewTuple2> recipeRaves(Integer pg, Integer rpp) throws ApiException {
        ApiResponse<List<BigOvenModelRecipeInfoReviewTuple2>> localVarResp = recipeRavesWithHttpInfo(pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
     * 
     * @param pg page, starting with 1 (optional)
     * @param rpp results per page (optional)
     * @return ApiResponse&lt;List&lt;BigOvenModelRecipeInfoReviewTuple2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelRecipeInfoReviewTuple2>> recipeRavesWithHttpInfo(Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = recipeRavesValidateBeforeCall(pg, rpp, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoReviewTuple2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the recipe/comment tuples for those recipes with 4 or 5 star ratings (asynchronously)
     * 
     * @param pg page, starting with 1 (optional)
     * @param rpp results per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRavesAsync(Integer pg, Integer rpp, final ApiCallback<List<BigOvenModelRecipeInfoReviewTuple2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRavesValidateBeforeCall(pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoReviewTuple2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeRecentViews
     * @param pg Page number starting with 1 (optional)
     * @param rpp results per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecentViewsCall(Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/recentviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRecentViewsValidateBeforeCall(Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        return recipeRecentViewsCall(pg, rpp, _callback);

    }

    /**
     * Get a list of recipes that the authenticated user has most recently viewed
     * 
     * @param pg Page number starting with 1 (optional)
     * @param rpp results per page (optional)
     * @return List&lt;BigOvenModelRecipeInfoDateTuple2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelRecipeInfoDateTuple2> recipeRecentViews(Integer pg, Integer rpp) throws ApiException {
        ApiResponse<List<BigOvenModelRecipeInfoDateTuple2>> localVarResp = recipeRecentViewsWithHttpInfo(pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get a list of recipes that the authenticated user has most recently viewed
     * 
     * @param pg Page number starting with 1 (optional)
     * @param rpp results per page (optional)
     * @return ApiResponse&lt;List&lt;BigOvenModelRecipeInfoDateTuple2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelRecipeInfoDateTuple2>> recipeRecentViewsWithHttpInfo(Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = recipeRecentViewsValidateBeforeCall(pg, rpp, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoDateTuple2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of recipes that the authenticated user has most recently viewed (asynchronously)
     * 
     * @param pg Page number starting with 1 (optional)
     * @param rpp results per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecentViewsAsync(Integer pg, Integer rpp, final ApiCallback<List<BigOvenModelRecipeInfoDateTuple2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRecentViewsValidateBeforeCall(pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelRecipeInfoDateTuple2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeRecipeSearch
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param rpp integer; results per page (optional)
     * @param pg integer: the page number (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeSearchCall(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer rpp, Integer pg, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anyKw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("any_kw", anyKw));
        }

        if (folder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder", folder));
        }

        if (coll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coll", coll));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (titleKw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_kw", titleKw));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (photos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photos", photos));
        }

        if (boostmine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boostmine", boostmine));
        }

        if (includeCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cat", includeCat));
        }

        if (excludeCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_cat", excludeCat));
        }

        if (includePrimarycat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_primarycat", includePrimarycat));
        }

        if (excludePrimarycat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_primarycat", excludePrimarycat));
        }

        if (includeIng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_ing", includeIng));
        }

        if (excludeIng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_ing", excludeIng));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (db != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db", db));
        }

        if (userset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userset", userset));
        }

        if (servingsMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("servingsMin", servingsMin));
        }

        if (totalMins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totalMins", totalMins));
        }

        if (maxIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIngredients", maxIngredients));
        }

        if (minIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIngredients", minIngredients));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (vtn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vtn", vtn));
        }

        if (vgn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vgn", vgn));
        }

        if (chs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chs", chs));
        }

        if (glf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("glf", glf));
        }

        if (ntf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ntf", ntf));
        }

        if (dyf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dyf", dyf));
        }

        if (sff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sff", sff));
        }

        if (slf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slf", slf));
        }

        if (tnf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tnf", tnf));
        }

        if (wmf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wmf", wmf));
        }

        if (rmf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rmf", rmf));
        }

        if (cps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cps", cps));
        }

        if (champion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("champion", champion));
        }

        if (synonyms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synonyms", synonyms));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRecipeSearchValidateBeforeCall(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer rpp, Integer pg, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback _callback) throws ApiException {
        return recipeRecipeSearchCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, rpp, pg, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, _callback);

    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param rpp integer; results per page (optional)
     * @param pg integer: the page number (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @return BigOvenModelAPI2RecipeSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2RecipeSearchResult recipeRecipeSearch(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer rpp, Integer pg, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms) throws ApiException {
        ApiResponse<BigOvenModelAPI2RecipeSearchResult> localVarResp = recipeRecipeSearchWithHttpInfo(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, rpp, pg, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms);
        return localVarResp.getData();
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param rpp integer; results per page (optional)
     * @param pg integer: the page number (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @return ApiResponse&lt;BigOvenModelAPI2RecipeSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2RecipeSearchResult> recipeRecipeSearchWithHttpInfo(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer rpp, Integer pg, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms) throws ApiException {
        okhttp3.Call localVarCall = recipeRecipeSearchValidateBeforeCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, rpp, pg, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection (asynchronously)
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param rpp integer; results per page (optional)
     * @param pg integer: the page number (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeSearchAsync(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer rpp, Integer pg, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback<BigOvenModelAPI2RecipeSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRecipeSearchValidateBeforeCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, rpp, pg, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeRecipeSearchRandom
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeSearchRandomCall(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/top25random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anyKw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("any_kw", anyKw));
        }

        if (folder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder", folder));
        }

        if (coll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coll", coll));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (titleKw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_kw", titleKw));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (photos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photos", photos));
        }

        if (boostmine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boostmine", boostmine));
        }

        if (includeCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cat", includeCat));
        }

        if (excludeCat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_cat", excludeCat));
        }

        if (includePrimarycat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_primarycat", includePrimarycat));
        }

        if (excludePrimarycat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_primarycat", excludePrimarycat));
        }

        if (includeIng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_ing", includeIng));
        }

        if (excludeIng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_ing", excludeIng));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (db != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db", db));
        }

        if (userset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userset", userset));
        }

        if (servingsMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("servingsMin", servingsMin));
        }

        if (totalMins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totalMins", totalMins));
        }

        if (maxIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIngredients", maxIngredients));
        }

        if (minIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIngredients", minIngredients));
        }

        if (vtn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vtn", vtn));
        }

        if (vgn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vgn", vgn));
        }

        if (chs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chs", chs));
        }

        if (glf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("glf", glf));
        }

        if (ntf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ntf", ntf));
        }

        if (dyf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dyf", dyf));
        }

        if (sff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sff", sff));
        }

        if (slf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slf", slf));
        }

        if (tnf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tnf", tnf));
        }

        if (wmf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wmf", wmf));
        }

        if (rmf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rmf", rmf));
        }

        if (cps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cps", cps));
        }

        if (champion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("champion", champion));
        }

        if (synonyms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synonyms", synonyms));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRecipeSearchRandomValidateBeforeCall(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback _callback) throws ApiException {
        return recipeRecipeSearchRandomCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, _callback);

    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @return BigOvenModelAPI2RecipeSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2RecipeSearchResult recipeRecipeSearchRandom(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms) throws ApiException {
        ApiResponse<BigOvenModelAPI2RecipeSearchResult> localVarResp = recipeRecipeSearchRandomWithHttpInfo(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms);
        return localVarResp.getData();
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @return ApiResponse&lt;BigOvenModelAPI2RecipeSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2RecipeSearchResult> recipeRecipeSearchRandomWithHttpInfo(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms) throws ApiException {
        okhttp3.Call localVarCall = recipeRecipeSearchRandomValidateBeforeCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you&#39;d like to limit by course, set the parameter \&quot;include_primarycat\&quot; to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you&#39;d like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you&#39;d like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \&quot;include_ing\&quot; to a CSV of up to three ingredients, e.g.:include_ing&#x3D;mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \&quot;exclude_ing\&quot; to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you&#39;d pass pg&#x3D;3&amp;amp;rpp&#x3D;25              If you&#39;d like to target searches to just a single target user&#39;s recipes, set userId&#x3D;the target userId (number).              Or, you can set username&#x3D;theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter&#x3D;added,try,favorites,myrecipes\\r\\n\\r\\n              folder&#x3D;FolderNameCaseSensitive              coll&#x3D;ID of Collection (asynchronously)
     * 
     * @param anyKw Search anywhere in the recipe for the keyword (optional)
     * @param folder Search in a specific folder name for the authenticated user (optional)
     * @param coll Limit to a collection ID number (optional)
     * @param filter optionally set to either \&quot;myrecipes\&quot;, \&quot;try\&quot;, \&quot;favorites\&quot;,\&quot;added\&quot; to filter to just the authenticated user&#39;s recipe set (optional)
     * @param titleKw Search just in the recipe title for the keyword (optional)
     * @param userId Set the target userid to search their public recipes (optional)
     * @param username Set the target username to search their public recipes (optional)
     * @param token  (optional)
     * @param photos if set to true, limit search results to photos only (optional)
     * @param boostmine if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders) (optional)
     * @param includeCat integer of the subcategory you&#39;d like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \&quot;Main Dish &amp;gt; Casseroles\&quot;. (optional)
     * @param excludeCat like include_cat, set this to an integer to exclude a specific category (optional)
     * @param includePrimarycat csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param excludePrimarycat csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other] (optional)
     * @param includeIng A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken (optional)
     * @param excludeIng A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required) (optional)
     * @param cuisine Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese (optional)
     * @param db  (optional)
     * @param userset If set to a given username, it&#39;ll force the search to filter to just that username (optional)
     * @param servingsMin Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \&quot;dozen\&quot;, etc. This parameter simply specifies the minimum number for that value entered in \&quot;yield.\&quot; (optional)
     * @param totalMins Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \&quot;1 hour, 15 minutes\&quot; to 75 before passing in.) (optional)
     * @param maxIngredients Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less (optional)
     * @param minIngredients Optional. If supplied, will restrict results to recipes that have at least {minIngredients} (optional)
     * @param vtn when set to 1, limit to vegetarian (Powersearch-capable plan required) (optional)
     * @param vgn when set to 1, limit to vegan (Powersearch-capable plan required) (optional)
     * @param chs when set to 1, limit to contains-cheese (Powersearch-capable plan required) (optional)
     * @param glf when set to 1, limit to gluten-free (Powersearch-capable plan required) (optional)
     * @param ntf when set to 1, limit to nut-free (Powersearch-capable plan required) (optional)
     * @param dyf when set to 1, limit to dairy-free (Powersearch-capable plan required) (optional)
     * @param sff when set to 1, limit to seafood-free (Powersearch-capable plan required) (optional)
     * @param slf when set to 1, limit to shellfish-free (Powersearch-capable plan required) (optional)
     * @param tnf when set to 1, limit to tree-nut free (Powersearch-capable plan required) (optional)
     * @param wmf when set to 1, limit to white-meat free (Powersearch-capable plan required) (optional)
     * @param rmf when set to 1, limit to red-meat free (Powersearch-capable plan required) (optional)
     * @param cps when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required) (optional)
     * @param champion optional. When set to 1, this will limit search results to \&quot;best of\&quot; recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don&#39;t include this parameter. (optional)
     * @param synonyms optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeSearchRandomAsync(String anyKw, String folder, Integer coll, String filter, String titleKw, Integer userId, String username, String token, Boolean photos, Boolean boostmine, String includeCat, String excludeCat, String includePrimarycat, String excludePrimarycat, String includeIng, String excludeIng, String cuisine, String db, String userset, Double servingsMin, Integer totalMins, Integer maxIngredients, Integer minIngredients, Integer vtn, Integer vgn, Integer chs, Integer glf, Integer ntf, Integer dyf, Integer sff, Integer slf, Integer tnf, Integer wmf, Integer rmf, Integer cps, Integer champion, Boolean synonyms, final ApiCallback<BigOvenModelAPI2RecipeSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRecipeSearchRandomValidateBeforeCall(anyKw, folder, coll, filter, titleKw, userId, username, token, photos, boostmine, includeCat, excludeCat, includePrimarycat, excludePrimarycat, includeIng, excludeIng, cuisine, db, userset, servingsMin, totalMins, maxIngredients, minIngredients, vtn, vgn, chs, glf, ntf, dyf, sff, slf, tnf, wmf, rmf, cps, champion, synonyms, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeRelated
     * @param recipeId The recipe id (required)
     * @param pg The page (optional)
     * @param rpp The results per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRelatedCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/related"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRelatedValidateBeforeCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeRelated(Async)");
        }

        return recipeRelatedCall(recipeId, pg, rpp, _callback);

    }

    /**
     * Get recipes related to the given recipeId
     * 
     * @param recipeId The recipe id (required)
     * @param pg The page (optional)
     * @param rpp The results per page (optional)
     * @return BigOvenModelAPI2RecipeSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPI2RecipeSearchResult recipeRelated(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        ApiResponse<BigOvenModelAPI2RecipeSearchResult> localVarResp = recipeRelatedWithHttpInfo(recipeId, pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get recipes related to the given recipeId
     * 
     * @param recipeId The recipe id (required)
     * @param pg The page (optional)
     * @param rpp The results per page (optional)
     * @return ApiResponse&lt;BigOvenModelAPI2RecipeSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPI2RecipeSearchResult> recipeRelatedWithHttpInfo(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = recipeRelatedValidateBeforeCall(recipeId, pg, rpp, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recipes related to the given recipeId (asynchronously)
     * 
     * @param recipeId The recipe id (required)
     * @param pg The page (optional)
     * @param rpp The results per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRelatedAsync(Integer recipeId, Integer pg, Integer rpp, final ApiCallback<BigOvenModelAPI2RecipeSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRelatedValidateBeforeCall(recipeId, pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPI2RecipeSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeScan
     * @param test  (optional)
     * @param devicetype  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required (not enough credits) </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Bad media type (bad JPG) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> General error on initiating RecipeScan task; please try again or contact us at support[at]bigoven.com </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeScanCall(Boolean test, String devicetype, Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (test != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test", test));
        }

        if (devicetype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype", devicetype));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeScanValidateBeforeCall(Boolean test, String devicetype, Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        return recipeScanCall(test, devicetype, lat, lng, _callback);

    }

    /**
     * POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
     * 
     * @param test  (optional)
     * @param devicetype  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required (not enough credits) </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Bad media type (bad JPG) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> General error on initiating RecipeScan task; please try again or contact us at support[at]bigoven.com </td><td>  -  </td></tr>
     </table>
     */
    public void recipeScan(Boolean test, String devicetype, Double lat, Double lng) throws ApiException {
        recipeScanWithHttpInfo(test, devicetype, lat, lng);
    }

    /**
     * POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
     * 
     * @param test  (optional)
     * @param devicetype  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required (not enough credits) </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Bad media type (bad JPG) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> General error on initiating RecipeScan task; please try again or contact us at support[at]bigoven.com </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recipeScanWithHttpInfo(Boolean test, String devicetype, Double lat, Double lng) throws ApiException {
        okhttp3.Call localVarCall = recipeScanValidateBeforeCall(test, devicetype, lat, lng, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail (asynchronously)
     * 
     * @param test  (optional)
     * @param devicetype  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required (not enough credits) </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Bad media type (bad JPG) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> General error on initiating RecipeScan task; please try again or contact us at support[at]bigoven.com </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeScanAsync(Boolean test, String devicetype, Double lat, Double lng, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeScanValidateBeforeCall(test, devicetype, lat, lng, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeZapRecipe
     * @param id The identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeZapRecipeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{id}/zap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeZapRecipeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeZapRecipe(Async)");
        }

        return recipeZapRecipeCall(id, _callback);

    }

    /**
     * Zaps the recipe.
     * 
     * @param id The identifier. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object recipeZapRecipe(Integer id) throws ApiException {
        ApiResponse<Object> localVarResp = recipeZapRecipeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Zaps the recipe.
     * 
     * @param id The identifier. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> recipeZapRecipeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = recipeZapRecipeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Zaps the recipe. (asynchronously)
     * 
     * @param id The identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeZapRecipeAsync(Integer id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeZapRecipeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
