/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.API2ModelsAccounting;
import org.openapitools.client.model.API2ModelsPersonal;
import org.openapitools.client.model.API2ModelsPreference;
import org.openapitools.client.model.API2ModelsProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An API2 wrapper object for a user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class API2ModelsBigOvenUser {
  public static final String SERIALIZED_NAME_ACCOUNTING = "Accounting";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING)
  private API2ModelsAccounting accounting;

  public static final String SERIALIZED_NAME_BO_AUTH_TOKEN = "BOAuthToken";
  @SerializedName(SERIALIZED_NAME_BO_AUTH_TOKEN)
  private String boAuthToken;

  public static final String SERIALIZED_NAME_LAST_CHANGE_LOG_I_D = "LastChangeLogID";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGE_LOG_I_D)
  private String lastChangeLogID;

  public static final String SERIALIZED_NAME_PERSONAL = "Personal";
  @SerializedName(SERIALIZED_NAME_PERSONAL)
  private API2ModelsPersonal personal;

  public static final String SERIALIZED_NAME_PREFERENCES = "Preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private API2ModelsPreference preferences;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private API2ModelsProfile profile;

  public API2ModelsBigOvenUser() {
  }

  public API2ModelsBigOvenUser accounting(API2ModelsAccounting accounting) {
    this.accounting = accounting;
    return this;
  }

  /**
   * Get accounting
   * @return accounting
   */
  @javax.annotation.Nullable
  public API2ModelsAccounting getAccounting() {
    return accounting;
  }

  public void setAccounting(API2ModelsAccounting accounting) {
    this.accounting = accounting;
  }


  public API2ModelsBigOvenUser boAuthToken(String boAuthToken) {
    this.boAuthToken = boAuthToken;
    return this;
  }

  /**
   * The user-specific authentication token
   * @return boAuthToken
   */
  @javax.annotation.Nullable
  public String getBoAuthToken() {
    return boAuthToken;
  }

  public void setBoAuthToken(String boAuthToken) {
    this.boAuthToken = boAuthToken;
  }


  public API2ModelsBigOvenUser lastChangeLogID(String lastChangeLogID) {
    this.lastChangeLogID = lastChangeLogID;
    return this;
  }

  /**
   * Last change log
   * @return lastChangeLogID
   */
  @javax.annotation.Nullable
  public String getLastChangeLogID() {
    return lastChangeLogID;
  }

  public void setLastChangeLogID(String lastChangeLogID) {
    this.lastChangeLogID = lastChangeLogID;
  }


  public API2ModelsBigOvenUser personal(API2ModelsPersonal personal) {
    this.personal = personal;
    return this;
  }

  /**
   * Get personal
   * @return personal
   */
  @javax.annotation.Nullable
  public API2ModelsPersonal getPersonal() {
    return personal;
  }

  public void setPersonal(API2ModelsPersonal personal) {
    this.personal = personal;
  }


  public API2ModelsBigOvenUser preferences(API2ModelsPreference preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  public API2ModelsPreference getPreferences() {
    return preferences;
  }

  public void setPreferences(API2ModelsPreference preferences) {
    this.preferences = preferences;
  }


  public API2ModelsBigOvenUser profile(API2ModelsProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public API2ModelsProfile getProfile() {
    return profile;
  }

  public void setProfile(API2ModelsProfile profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    API2ModelsBigOvenUser apI2ModelsBigOvenUser = (API2ModelsBigOvenUser) o;
    return Objects.equals(this.accounting, apI2ModelsBigOvenUser.accounting) &&
        Objects.equals(this.boAuthToken, apI2ModelsBigOvenUser.boAuthToken) &&
        Objects.equals(this.lastChangeLogID, apI2ModelsBigOvenUser.lastChangeLogID) &&
        Objects.equals(this.personal, apI2ModelsBigOvenUser.personal) &&
        Objects.equals(this.preferences, apI2ModelsBigOvenUser.preferences) &&
        Objects.equals(this.profile, apI2ModelsBigOvenUser.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounting, boAuthToken, lastChangeLogID, personal, preferences, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class API2ModelsBigOvenUser {\n");
    sb.append("    accounting: ").append(toIndentedString(accounting)).append("\n");
    sb.append("    boAuthToken: ").append(toIndentedString(boAuthToken)).append("\n");
    sb.append("    lastChangeLogID: ").append(toIndentedString(lastChangeLogID)).append("\n");
    sb.append("    personal: ").append(toIndentedString(personal)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Accounting");
    openapiFields.add("BOAuthToken");
    openapiFields.add("LastChangeLogID");
    openapiFields.add("Personal");
    openapiFields.add("Preferences");
    openapiFields.add("Profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to API2ModelsBigOvenUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!API2ModelsBigOvenUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in API2ModelsBigOvenUser is not found in the empty JSON string", API2ModelsBigOvenUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!API2ModelsBigOvenUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `API2ModelsBigOvenUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Accounting`
      if (jsonObj.get("Accounting") != null && !jsonObj.get("Accounting").isJsonNull()) {
        API2ModelsAccounting.validateJsonElement(jsonObj.get("Accounting"));
      }
      if ((jsonObj.get("BOAuthToken") != null && !jsonObj.get("BOAuthToken").isJsonNull()) && !jsonObj.get("BOAuthToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BOAuthToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BOAuthToken").toString()));
      }
      if ((jsonObj.get("LastChangeLogID") != null && !jsonObj.get("LastChangeLogID").isJsonNull()) && !jsonObj.get("LastChangeLogID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastChangeLogID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastChangeLogID").toString()));
      }
      // validate the optional field `Personal`
      if (jsonObj.get("Personal") != null && !jsonObj.get("Personal").isJsonNull()) {
        API2ModelsPersonal.validateJsonElement(jsonObj.get("Personal"));
      }
      // validate the optional field `Preferences`
      if (jsonObj.get("Preferences") != null && !jsonObj.get("Preferences").isJsonNull()) {
        API2ModelsPreference.validateJsonElement(jsonObj.get("Preferences"));
      }
      // validate the optional field `Profile`
      if (jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) {
        API2ModelsProfile.validateJsonElement(jsonObj.get("Profile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!API2ModelsBigOvenUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'API2ModelsBigOvenUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<API2ModelsBigOvenUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(API2ModelsBigOvenUser.class));

       return (TypeAdapter<T>) new TypeAdapter<API2ModelsBigOvenUser>() {
           @Override
           public void write(JsonWriter out, API2ModelsBigOvenUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public API2ModelsBigOvenUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of API2ModelsBigOvenUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of API2ModelsBigOvenUser
   * @throws IOException if the JSON string is invalid with respect to API2ModelsBigOvenUser
   */
  public static API2ModelsBigOvenUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, API2ModelsBigOvenUser.class);
  }

  /**
   * Convert an instance of API2ModelsBigOvenUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

