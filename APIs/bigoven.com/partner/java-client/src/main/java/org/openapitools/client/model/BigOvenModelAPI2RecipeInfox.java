/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BigOvenModelAPI2UserInfoTinyx;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigOvenModelAPI2RecipeInfox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:31.647548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigOvenModelAPI2RecipeInfox {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CUISINE = "Cuisine";
  @SerializedName(SERIALIZED_NAME_CUISINE)
  private String cuisine;

  public static final String SERIALIZED_NAME_HAS_VIDEOS = "HasVideos";
  @SerializedName(SERIALIZED_NAME_HAS_VIDEOS)
  private Boolean hasVideos;

  public static final String SERIALIZED_NAME_IS_BOOKMARK = "IsBookmark";
  @SerializedName(SERIALIZED_NAME_IS_BOOKMARK)
  private Boolean isBookmark;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "IsPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_IS_RECIPE_SCAN = "IsRecipeScan";
  @SerializedName(SERIALIZED_NAME_IS_RECIPE_SCAN)
  private Boolean isRecipeScan;

  public static final String SERIALIZED_NAME_MICROCATEGORY = "Microcategory";
  @SerializedName(SERIALIZED_NAME_MICROCATEGORY)
  private String microcategory;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_POSTER = "Poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private BigOvenModelAPI2UserInfoTinyx poster;

  public static final String SERIALIZED_NAME_RECIPE_I_D = "RecipeID";
  @SerializedName(SERIALIZED_NAME_RECIPE_I_D)
  private Integer recipeID;

  public static final String SERIALIZED_NAME_REVIEW_COUNT = "ReviewCount";
  @SerializedName(SERIALIZED_NAME_REVIEW_COUNT)
  private Integer reviewCount;

  public static final String SERIALIZED_NAME_SERVINGS = "Servings";
  @SerializedName(SERIALIZED_NAME_SERVINGS)
  private Double servings;

  public static final String SERIALIZED_NAME_STAR_RATING = "StarRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Double starRating;

  public static final String SERIALIZED_NAME_SUBCATEGORY = "Subcategory";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORY)
  private String subcategory;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_TRIES = "TotalTries";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRIES)
  private Integer totalTries;

  public static final String SERIALIZED_NAME_WEB_U_R_L = "WebURL";
  @SerializedName(SERIALIZED_NAME_WEB_U_R_L)
  private String webURL;

  public BigOvenModelAPI2RecipeInfox() {
  }

  public BigOvenModelAPI2RecipeInfox category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public BigOvenModelAPI2RecipeInfox creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public BigOvenModelAPI2RecipeInfox cuisine(String cuisine) {
    this.cuisine = cuisine;
    return this;
  }

  /**
   * Get cuisine
   * @return cuisine
   */
  @javax.annotation.Nullable
  public String getCuisine() {
    return cuisine;
  }

  public void setCuisine(String cuisine) {
    this.cuisine = cuisine;
  }


  public BigOvenModelAPI2RecipeInfox hasVideos(Boolean hasVideos) {
    this.hasVideos = hasVideos;
    return this;
  }

  /**
   * Get hasVideos
   * @return hasVideos
   */
  @javax.annotation.Nullable
  public Boolean getHasVideos() {
    return hasVideos;
  }

  public void setHasVideos(Boolean hasVideos) {
    this.hasVideos = hasVideos;
  }


  public BigOvenModelAPI2RecipeInfox isBookmark(Boolean isBookmark) {
    this.isBookmark = isBookmark;
    return this;
  }

  /**
   * Get isBookmark
   * @return isBookmark
   */
  @javax.annotation.Nullable
  public Boolean getIsBookmark() {
    return isBookmark;
  }

  public void setIsBookmark(Boolean isBookmark) {
    this.isBookmark = isBookmark;
  }


  public BigOvenModelAPI2RecipeInfox isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Get isPrivate
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public BigOvenModelAPI2RecipeInfox isRecipeScan(Boolean isRecipeScan) {
    this.isRecipeScan = isRecipeScan;
    return this;
  }

  /**
   * Get isRecipeScan
   * @return isRecipeScan
   */
  @javax.annotation.Nullable
  public Boolean getIsRecipeScan() {
    return isRecipeScan;
  }

  public void setIsRecipeScan(Boolean isRecipeScan) {
    this.isRecipeScan = isRecipeScan;
  }


  public BigOvenModelAPI2RecipeInfox microcategory(String microcategory) {
    this.microcategory = microcategory;
    return this;
  }

  /**
   * Get microcategory
   * @return microcategory
   */
  @javax.annotation.Nullable
  public String getMicrocategory() {
    return microcategory;
  }

  public void setMicrocategory(String microcategory) {
    this.microcategory = microcategory;
  }


  public BigOvenModelAPI2RecipeInfox photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public BigOvenModelAPI2RecipeInfox poster(BigOvenModelAPI2UserInfoTinyx poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public BigOvenModelAPI2UserInfoTinyx getPoster() {
    return poster;
  }

  public void setPoster(BigOvenModelAPI2UserInfoTinyx poster) {
    this.poster = poster;
  }


  public BigOvenModelAPI2RecipeInfox recipeID(Integer recipeID) {
    this.recipeID = recipeID;
    return this;
  }

  /**
   * Get recipeID
   * @return recipeID
   */
  @javax.annotation.Nullable
  public Integer getRecipeID() {
    return recipeID;
  }

  public void setRecipeID(Integer recipeID) {
    this.recipeID = recipeID;
  }


  public BigOvenModelAPI2RecipeInfox reviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
    return this;
  }

  /**
   * Get reviewCount
   * @return reviewCount
   */
  @javax.annotation.Nullable
  public Integer getReviewCount() {
    return reviewCount;
  }

  public void setReviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
  }


  public BigOvenModelAPI2RecipeInfox servings(Double servings) {
    this.servings = servings;
    return this;
  }

  /**
   * Get servings
   * @return servings
   */
  @javax.annotation.Nullable
  public Double getServings() {
    return servings;
  }

  public void setServings(Double servings) {
    this.servings = servings;
  }


  public BigOvenModelAPI2RecipeInfox starRating(Double starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * Get starRating
   * @return starRating
   */
  @javax.annotation.Nullable
  public Double getStarRating() {
    return starRating;
  }

  public void setStarRating(Double starRating) {
    this.starRating = starRating;
  }


  public BigOvenModelAPI2RecipeInfox subcategory(String subcategory) {
    this.subcategory = subcategory;
    return this;
  }

  /**
   * Get subcategory
   * @return subcategory
   */
  @javax.annotation.Nullable
  public String getSubcategory() {
    return subcategory;
  }

  public void setSubcategory(String subcategory) {
    this.subcategory = subcategory;
  }


  public BigOvenModelAPI2RecipeInfox title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BigOvenModelAPI2RecipeInfox totalTries(Integer totalTries) {
    this.totalTries = totalTries;
    return this;
  }

  /**
   * Get totalTries
   * @return totalTries
   */
  @javax.annotation.Nullable
  public Integer getTotalTries() {
    return totalTries;
  }

  public void setTotalTries(Integer totalTries) {
    this.totalTries = totalTries;
  }


  public BigOvenModelAPI2RecipeInfox webURL(String webURL) {
    this.webURL = webURL;
    return this;
  }

  /**
   * Get webURL
   * @return webURL
   */
  @javax.annotation.Nullable
  public String getWebURL() {
    return webURL;
  }

  public void setWebURL(String webURL) {
    this.webURL = webURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigOvenModelAPI2RecipeInfox bigOvenModelAPI2RecipeInfox = (BigOvenModelAPI2RecipeInfox) o;
    return Objects.equals(this.category, bigOvenModelAPI2RecipeInfox.category) &&
        Objects.equals(this.creationDate, bigOvenModelAPI2RecipeInfox.creationDate) &&
        Objects.equals(this.cuisine, bigOvenModelAPI2RecipeInfox.cuisine) &&
        Objects.equals(this.hasVideos, bigOvenModelAPI2RecipeInfox.hasVideos) &&
        Objects.equals(this.isBookmark, bigOvenModelAPI2RecipeInfox.isBookmark) &&
        Objects.equals(this.isPrivate, bigOvenModelAPI2RecipeInfox.isPrivate) &&
        Objects.equals(this.isRecipeScan, bigOvenModelAPI2RecipeInfox.isRecipeScan) &&
        Objects.equals(this.microcategory, bigOvenModelAPI2RecipeInfox.microcategory) &&
        Objects.equals(this.photoUrl, bigOvenModelAPI2RecipeInfox.photoUrl) &&
        Objects.equals(this.poster, bigOvenModelAPI2RecipeInfox.poster) &&
        Objects.equals(this.recipeID, bigOvenModelAPI2RecipeInfox.recipeID) &&
        Objects.equals(this.reviewCount, bigOvenModelAPI2RecipeInfox.reviewCount) &&
        Objects.equals(this.servings, bigOvenModelAPI2RecipeInfox.servings) &&
        Objects.equals(this.starRating, bigOvenModelAPI2RecipeInfox.starRating) &&
        Objects.equals(this.subcategory, bigOvenModelAPI2RecipeInfox.subcategory) &&
        Objects.equals(this.title, bigOvenModelAPI2RecipeInfox.title) &&
        Objects.equals(this.totalTries, bigOvenModelAPI2RecipeInfox.totalTries) &&
        Objects.equals(this.webURL, bigOvenModelAPI2RecipeInfox.webURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, creationDate, cuisine, hasVideos, isBookmark, isPrivate, isRecipeScan, microcategory, photoUrl, poster, recipeID, reviewCount, servings, starRating, subcategory, title, totalTries, webURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigOvenModelAPI2RecipeInfox {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    cuisine: ").append(toIndentedString(cuisine)).append("\n");
    sb.append("    hasVideos: ").append(toIndentedString(hasVideos)).append("\n");
    sb.append("    isBookmark: ").append(toIndentedString(isBookmark)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isRecipeScan: ").append(toIndentedString(isRecipeScan)).append("\n");
    sb.append("    microcategory: ").append(toIndentedString(microcategory)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    recipeID: ").append(toIndentedString(recipeID)).append("\n");
    sb.append("    reviewCount: ").append(toIndentedString(reviewCount)).append("\n");
    sb.append("    servings: ").append(toIndentedString(servings)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("    subcategory: ").append(toIndentedString(subcategory)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalTries: ").append(toIndentedString(totalTries)).append("\n");
    sb.append("    webURL: ").append(toIndentedString(webURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("CreationDate");
    openapiFields.add("Cuisine");
    openapiFields.add("HasVideos");
    openapiFields.add("IsBookmark");
    openapiFields.add("IsPrivate");
    openapiFields.add("IsRecipeScan");
    openapiFields.add("Microcategory");
    openapiFields.add("PhotoUrl");
    openapiFields.add("Poster");
    openapiFields.add("RecipeID");
    openapiFields.add("ReviewCount");
    openapiFields.add("Servings");
    openapiFields.add("StarRating");
    openapiFields.add("Subcategory");
    openapiFields.add("Title");
    openapiFields.add("TotalTries");
    openapiFields.add("WebURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigOvenModelAPI2RecipeInfox
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigOvenModelAPI2RecipeInfox.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigOvenModelAPI2RecipeInfox is not found in the empty JSON string", BigOvenModelAPI2RecipeInfox.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigOvenModelAPI2RecipeInfox.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigOvenModelAPI2RecipeInfox` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Cuisine") != null && !jsonObj.get("Cuisine").isJsonNull()) && !jsonObj.get("Cuisine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cuisine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cuisine").toString()));
      }
      if ((jsonObj.get("Microcategory") != null && !jsonObj.get("Microcategory").isJsonNull()) && !jsonObj.get("Microcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Microcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Microcategory").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      // validate the optional field `Poster`
      if (jsonObj.get("Poster") != null && !jsonObj.get("Poster").isJsonNull()) {
        BigOvenModelAPI2UserInfoTinyx.validateJsonElement(jsonObj.get("Poster"));
      }
      if ((jsonObj.get("Subcategory") != null && !jsonObj.get("Subcategory").isJsonNull()) && !jsonObj.get("Subcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subcategory").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("WebURL") != null && !jsonObj.get("WebURL").isJsonNull()) && !jsonObj.get("WebURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigOvenModelAPI2RecipeInfox.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigOvenModelAPI2RecipeInfox' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigOvenModelAPI2RecipeInfox> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigOvenModelAPI2RecipeInfox.class));

       return (TypeAdapter<T>) new TypeAdapter<BigOvenModelAPI2RecipeInfox>() {
           @Override
           public void write(JsonWriter out, BigOvenModelAPI2RecipeInfox value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigOvenModelAPI2RecipeInfox read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigOvenModelAPI2RecipeInfox given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigOvenModelAPI2RecipeInfox
   * @throws IOException if the JSON string is invalid with respect to BigOvenModelAPI2RecipeInfox
   */
  public static BigOvenModelAPI2RecipeInfox fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigOvenModelAPI2RecipeInfox.class);
  }

  /**
   * Convert an instance of BigOvenModelAPI2RecipeInfox to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

