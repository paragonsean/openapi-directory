/*
 * 1,000,000+ Recipe and Grocery List API (v2)
 * #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).
 *
 * The version of the OpenAPI document: partner
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API2ControllersWebAPIReviewControllerPostReplyReq;
import org.openapitools.client.model.API2ControllersWebAPIReviewControllerReviewRequest;
import org.openapitools.client.model.API2ControllersWebAPIReviewControllerReviewRequestLegacy;
import org.openapitools.client.model.BigOvenModelAPIReply;
import org.openapitools.client.model.BigOvenModelAPIReview;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReviewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReviewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recipeRecipeIdReviewGet
     * @param recipeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeIdReviewGetCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/review"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeRecipeIdReviewGetValidateBeforeCall(Integer recipeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling recipeRecipeIdReviewGet(Async)");
        }

        return recipeRecipeIdReviewGetCall(recipeId, _callback);

    }

    /**
     * Get *my* review for the recipe {recipeId}, where \&quot;me\&quot; is determined by standard authentication headers
     * 
     * @param recipeId  (required)
     * @return BigOvenModelAPIReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReview recipeRecipeIdReviewGet(Integer recipeId) throws ApiException {
        ApiResponse<BigOvenModelAPIReview> localVarResp = recipeRecipeIdReviewGetWithHttpInfo(recipeId);
        return localVarResp.getData();
    }

    /**
     * Get *my* review for the recipe {recipeId}, where \&quot;me\&quot; is determined by standard authentication headers
     * 
     * @param recipeId  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReview> recipeRecipeIdReviewGetWithHttpInfo(Integer recipeId) throws ApiException {
        okhttp3.Call localVarCall = recipeRecipeIdReviewGetValidateBeforeCall(recipeId, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get *my* review for the recipe {recipeId}, where \&quot;me\&quot; is determined by standard authentication headers (asynchronously)
     * 
     * @param recipeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeRecipeIdReviewGetAsync(Integer recipeId, final ApiCallback<BigOvenModelAPIReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeRecipeIdReviewGetValidateBeforeCall(recipeId, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeReviewReviewIdGet
     * @param reviewId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeReviewReviewIdGetCall(String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/review/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeReviewReviewIdGetValidateBeforeCall(String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling recipeReviewReviewIdGet(Async)");
        }

        return recipeReviewReviewIdGetCall(reviewId, _callback);

    }

    /**
     * Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.              Recommended display is to list top-level reviews with one featured reply underneath.               Currently, the FeaturedReply is the most recent one for that rating.
     * 
     * @param reviewId  (required)
     * @return BigOvenModelAPIReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReview recipeReviewReviewIdGet(String reviewId) throws ApiException {
        ApiResponse<BigOvenModelAPIReview> localVarResp = recipeReviewReviewIdGetWithHttpInfo(reviewId);
        return localVarResp.getData();
    }

    /**
     * Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.              Recommended display is to list top-level reviews with one featured reply underneath.               Currently, the FeaturedReply is the most recent one for that rating.
     * 
     * @param reviewId  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReview> recipeReviewReviewIdGetWithHttpInfo(String reviewId) throws ApiException {
        okhttp3.Call localVarCall = recipeReviewReviewIdGetValidateBeforeCall(reviewId, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.              Recommended display is to list top-level reviews with one featured reply underneath.               Currently, the FeaturedReply is the most recent one for that rating. (asynchronously)
     * 
     * @param reviewId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipeReviewReviewIdGetAsync(String reviewId, final ApiCallback<BigOvenModelAPIReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeReviewReviewIdGetValidateBeforeCall(reviewId, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewDelete
     * @param recipeId  (required)
     * @param reviewId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewDeleteCall(Integer recipeId, Long reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/review/{reviewId}"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewDeleteValidateBeforeCall(Integer recipeId, Long reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling reviewDelete(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewDelete(Async)");
        }

        return reviewDeleteCall(recipeId, reviewId, _callback);

    }

    /**
     * DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead.
     * 
     * @param recipeId  (required)
     * @param reviewId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object reviewDelete(Integer recipeId, Long reviewId) throws ApiException {
        ApiResponse<Object> localVarResp = reviewDeleteWithHttpInfo(recipeId, reviewId);
        return localVarResp.getData();
    }

    /**
     * DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead.
     * 
     * @param recipeId  (required)
     * @param reviewId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reviewDeleteWithHttpInfo(Integer recipeId, Long reviewId) throws ApiException {
        okhttp3.Call localVarCall = reviewDeleteValidateBeforeCall(recipeId, reviewId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead. (asynchronously)
     * 
     * @param recipeId  (required)
     * @param reviewId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewDeleteAsync(Integer recipeId, Long reviewId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewDeleteValidateBeforeCall(recipeId, reviewId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewDeleteReply
     * @param replyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewDeleteReplyCall(String replyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/review/replies/{replyId}"
            .replace("{" + "replyId" + "}", localVarApiClient.escapeString(replyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewDeleteReplyValidateBeforeCall(String replyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replyId' is set
        if (replyId == null) {
            throw new ApiException("Missing the required parameter 'replyId' when calling reviewDeleteReply(Async)");
        }

        return reviewDeleteReplyCall(replyId, _callback);

    }

    /**
     * DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply.
     * 
     * @param replyId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object reviewDeleteReply(String replyId) throws ApiException {
        ApiResponse<Object> localVarResp = reviewDeleteReplyWithHttpInfo(replyId);
        return localVarResp.getData();
    }

    /**
     * DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply.
     * 
     * @param replyId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reviewDeleteReplyWithHttpInfo(String replyId) throws ApiException {
        okhttp3.Call localVarCall = reviewDeleteReplyValidateBeforeCall(replyId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply. (asynchronously)
     * 
     * @param replyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewDeleteReplyAsync(String replyId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewDeleteReplyValidateBeforeCall(replyId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewGet
     * @param reviewId int (required)
     * @param recipeId int (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetCall(Integer reviewId, Integer recipeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/review/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()))
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewGetValidateBeforeCall(Integer reviewId, Integer recipeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewGet(Async)");
        }

        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling reviewGet(Async)");
        }

        return reviewGetCall(reviewId, recipeId, _callback);

    }

    /**
     * Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.              Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.              We are also supporting more of a \&quot;Google Play\&quot; style model for Reviews and Replies. That is, there are top-level Reviews and then              an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review               per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed              which do NOT carry the \&quot;DEPRECATED\&quot; flag.
     * 
     * @param reviewId int (required)
     * @param recipeId int (required)
     * @return BigOvenModelAPIReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReview reviewGet(Integer reviewId, Integer recipeId) throws ApiException {
        ApiResponse<BigOvenModelAPIReview> localVarResp = reviewGetWithHttpInfo(reviewId, recipeId);
        return localVarResp.getData();
    }

    /**
     * Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.              Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.              We are also supporting more of a \&quot;Google Play\&quot; style model for Reviews and Replies. That is, there are top-level Reviews and then              an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review               per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed              which do NOT carry the \&quot;DEPRECATED\&quot; flag.
     * 
     * @param reviewId int (required)
     * @param recipeId int (required)
     * @return ApiResponse&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReview> reviewGetWithHttpInfo(Integer reviewId, Integer recipeId) throws ApiException {
        okhttp3.Call localVarCall = reviewGetValidateBeforeCall(reviewId, recipeId, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.              Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.              We are also supporting more of a \&quot;Google Play\&quot; style model for Reviews and Replies. That is, there are top-level Reviews and then              an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review               per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed              which do NOT carry the \&quot;DEPRECATED\&quot; flag. (asynchronously)
     * 
     * @param reviewId int (required)
     * @param recipeId int (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetAsync(Integer reviewId, Integer recipeId, final ApiCallback<BigOvenModelAPIReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewGetValidateBeforeCall(reviewId, recipeId, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewGetReplies
     * @param reviewId  (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetRepliesCall(String reviewId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/review/{reviewId}/replies"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewGetRepliesValidateBeforeCall(String reviewId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewGetReplies(Async)");
        }

        return reviewGetRepliesCall(reviewId, pg, rpp, _callback);

    }

    /**
     * Get a paged list of replies for a given review.
     * 
     * @param reviewId  (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @return List&lt;BigOvenModelAPIReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelAPIReply> reviewGetReplies(String reviewId, Integer pg, Integer rpp) throws ApiException {
        ApiResponse<List<BigOvenModelAPIReply>> localVarResp = reviewGetRepliesWithHttpInfo(reviewId, pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get a paged list of replies for a given review.
     * 
     * @param reviewId  (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @return ApiResponse&lt;List&lt;BigOvenModelAPIReply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelAPIReply>> reviewGetRepliesWithHttpInfo(String reviewId, Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = reviewGetRepliesValidateBeforeCall(reviewId, pg, rpp, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIReply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a paged list of replies for a given review. (asynchronously)
     * 
     * @param reviewId  (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetRepliesAsync(String reviewId, Integer pg, Integer rpp, final ApiCallback<List<BigOvenModelAPIReply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewGetRepliesValidateBeforeCall(reviewId, pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIReply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewGetReviews
     * @param recipeId recipe id (int) (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetReviewsCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/reviews"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pg", pg));
        }

        if (rpp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rpp", rpp));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewGetReviewsValidateBeforeCall(Integer recipeId, Integer pg, Integer rpp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling reviewGetReviews(Async)");
        }

        return reviewGetReviewsCall(recipeId, pg, rpp, _callback);

    }

    /**
     * Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount.
     * 
     * @param recipeId recipe id (int) (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @return List&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BigOvenModelAPIReview> reviewGetReviews(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        ApiResponse<List<BigOvenModelAPIReview>> localVarResp = reviewGetReviewsWithHttpInfo(recipeId, pg, rpp);
        return localVarResp.getData();
    }

    /**
     * Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount.
     * 
     * @param recipeId recipe id (int) (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @return ApiResponse&lt;List&lt;BigOvenModelAPIReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigOvenModelAPIReview>> reviewGetReviewsWithHttpInfo(Integer recipeId, Integer pg, Integer rpp) throws ApiException {
        okhttp3.Call localVarCall = reviewGetReviewsValidateBeforeCall(recipeId, pg, rpp, null);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount. (asynchronously)
     * 
     * @param recipeId recipe id (int) (required)
     * @param pg the page (int), starting with 1 (optional)
     * @param rpp results per page (int) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewGetReviewsAsync(Integer recipeId, Integer pg, Integer rpp, final ApiCallback<List<BigOvenModelAPIReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewGetReviewsValidateBeforeCall(recipeId, pg, rpp, _callback);
        Type localVarReturnType = new TypeToken<List<BigOvenModelAPIReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewPost
     * @param recipeId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPostCall(Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIReviewControllerReviewRequest;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/review"
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewPostValidateBeforeCall(Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling reviewPost(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequest' is set
        if (apI2ControllersWebAPIReviewControllerReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequest' when calling reviewPost(Async)");
        }

        return reviewPostCall(recipeId, apI2ControllersWebAPIReviewControllerReviewRequest, _callback);

    }

    /**
     * Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated.
     * 
     * @param recipeId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object reviewPost(Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest) throws ApiException {
        ApiResponse<Object> localVarResp = reviewPostWithHttpInfo(recipeId, apI2ControllersWebAPIReviewControllerReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated.
     * 
     * @param recipeId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reviewPostWithHttpInfo(Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = reviewPostValidateBeforeCall(recipeId, apI2ControllersWebAPIReviewControllerReviewRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated. (asynchronously)
     * 
     * @param recipeId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPostAsync(Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewPostValidateBeforeCall(recipeId, apI2ControllersWebAPIReviewControllerReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewPostReply
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPostReplyCall(String reviewId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIReviewControllerPostReplyReq;

        // create path and map variables
        String localVarPath = "/recipe/review/{reviewId}/replies"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewPostReplyValidateBeforeCall(String reviewId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewPostReply(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIReviewControllerPostReplyReq' is set
        if (apI2ControllersWebAPIReviewControllerPostReplyReq == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIReviewControllerPostReplyReq' when calling reviewPostReply(Async)");
        }

        return reviewPostReplyCall(reviewId, apI2ControllersWebAPIReviewControllerPostReplyReq, _callback);

    }

    /**
     * POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do.
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @return BigOvenModelAPIReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReply reviewPostReply(String reviewId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq) throws ApiException {
        ApiResponse<BigOvenModelAPIReply> localVarResp = reviewPostReplyWithHttpInfo(reviewId, apI2ControllersWebAPIReviewControllerPostReplyReq);
        return localVarResp.getData();
    }

    /**
     * POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do.
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReply> reviewPostReplyWithHttpInfo(String reviewId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq) throws ApiException {
        okhttp3.Call localVarCall = reviewPostReplyValidateBeforeCall(reviewId, apI2ControllersWebAPIReviewControllerPostReplyReq, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do. (asynchronously)
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPostReplyAsync(String reviewId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback<BigOvenModelAPIReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewPostReplyValidateBeforeCall(reviewId, apI2ControllersWebAPIReviewControllerPostReplyReq, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewPut
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutCall(String reviewId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIReviewControllerReviewRequest;

        // create path and map variables
        String localVarPath = "/recipe/review/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewPutValidateBeforeCall(String reviewId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewPut(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequest' is set
        if (apI2ControllersWebAPIReviewControllerReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequest' when calling reviewPut(Async)");
        }

        return reviewPutCall(reviewId, apI2ControllersWebAPIReviewControllerReviewRequest, _callback);

    }

    /**
     * Update a given top-level review.
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @return BigOvenModelAPIReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReview reviewPut(String reviewId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest) throws ApiException {
        ApiResponse<BigOvenModelAPIReview> localVarResp = reviewPutWithHttpInfo(reviewId, apI2ControllersWebAPIReviewControllerReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Update a given top-level review.
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReview> reviewPutWithHttpInfo(String reviewId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = reviewPutValidateBeforeCall(reviewId, apI2ControllersWebAPIReviewControllerReviewRequest, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a given top-level review. (asynchronously)
     * 
     * @param reviewId  (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutAsync(String reviewId, API2ControllersWebAPIReviewControllerReviewRequest apI2ControllersWebAPIReviewControllerReviewRequest, final ApiCallback<BigOvenModelAPIReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewPutValidateBeforeCall(reviewId, apI2ControllersWebAPIReviewControllerReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewPutLegacy
     * @param reviewId reviewId (int) (required)
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequestLegacy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutLegacyCall(Integer reviewId, Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIReviewControllerReviewRequestLegacy;

        // create path and map variables
        String localVarPath = "/recipe/{recipeId}/review/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()))
            .replace("{" + "recipeId" + "}", localVarApiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewPutLegacyValidateBeforeCall(Integer reviewId, Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewPutLegacy(Async)");
        }

        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling reviewPutLegacy(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequestLegacy' is set
        if (apI2ControllersWebAPIReviewControllerReviewRequestLegacy == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIReviewControllerReviewRequestLegacy' when calling reviewPutLegacy(Async)");
        }

        return reviewPutLegacyCall(reviewId, recipeId, apI2ControllersWebAPIReviewControllerReviewRequestLegacy, _callback);

    }

    /**
     * HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.              We are moving to a string-based primary key system, no longer integers, for reviews and replies.
     * 
     * @param reviewId reviewId (int) (required)
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequestLegacy  (required)
     * @return BigOvenModelAPIReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReview reviewPutLegacy(Integer reviewId, Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy) throws ApiException {
        ApiResponse<BigOvenModelAPIReview> localVarResp = reviewPutLegacyWithHttpInfo(reviewId, recipeId, apI2ControllersWebAPIReviewControllerReviewRequestLegacy);
        return localVarResp.getData();
    }

    /**
     * HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.              We are moving to a string-based primary key system, no longer integers, for reviews and replies.
     * 
     * @param reviewId reviewId (int) (required)
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequestLegacy  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReview> reviewPutLegacyWithHttpInfo(Integer reviewId, Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy) throws ApiException {
        okhttp3.Call localVarCall = reviewPutLegacyValidateBeforeCall(reviewId, recipeId, apI2ControllersWebAPIReviewControllerReviewRequestLegacy, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.              We are moving to a string-based primary key system, no longer integers, for reviews and replies. (asynchronously)
     * 
     * @param reviewId reviewId (int) (required)
     * @param recipeId recipeId (int) (required)
     * @param apI2ControllersWebAPIReviewControllerReviewRequestLegacy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutLegacyAsync(Integer reviewId, Integer recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy apI2ControllersWebAPIReviewControllerReviewRequestLegacy, final ApiCallback<BigOvenModelAPIReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewPutLegacyValidateBeforeCall(reviewId, recipeId, apI2ControllersWebAPIReviewControllerReviewRequestLegacy, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewPutReply
     * @param replyId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutReplyCall(String replyId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apI2ControllersWebAPIReviewControllerPostReplyReq;

        // create path and map variables
        String localVarPath = "/recipe/review/replies/{replyId}"
            .replace("{" + "replyId" + "}", localVarApiClient.escapeString(replyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewPutReplyValidateBeforeCall(String replyId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replyId' is set
        if (replyId == null) {
            throw new ApiException("Missing the required parameter 'replyId' when calling reviewPutReply(Async)");
        }

        // verify the required parameter 'apI2ControllersWebAPIReviewControllerPostReplyReq' is set
        if (apI2ControllersWebAPIReviewControllerPostReplyReq == null) {
            throw new ApiException("Missing the required parameter 'apI2ControllersWebAPIReviewControllerPostReplyReq' when calling reviewPutReply(Async)");
        }

        return reviewPutReplyCall(replyId, apI2ControllersWebAPIReviewControllerPostReplyReq, _callback);

    }

    /**
     * Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply.
     * 
     * @param replyId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @return BigOvenModelAPIReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BigOvenModelAPIReply reviewPutReply(String replyId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq) throws ApiException {
        ApiResponse<BigOvenModelAPIReply> localVarResp = reviewPutReplyWithHttpInfo(replyId, apI2ControllersWebAPIReviewControllerPostReplyReq);
        return localVarResp.getData();
    }

    /**
     * Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply.
     * 
     * @param replyId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @return ApiResponse&lt;BigOvenModelAPIReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigOvenModelAPIReply> reviewPutReplyWithHttpInfo(String replyId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq) throws ApiException {
        okhttp3.Call localVarCall = reviewPutReplyValidateBeforeCall(replyId, apI2ControllersWebAPIReviewControllerPostReplyReq, null);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply. (asynchronously)
     * 
     * @param replyId  (required)
     * @param apI2ControllersWebAPIReviewControllerPostReplyReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewPutReplyAsync(String replyId, API2ControllersWebAPIReviewControllerPostReplyReq apI2ControllersWebAPIReviewControllerPostReplyReq, final ApiCallback<BigOvenModelAPIReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewPutReplyValidateBeforeCall(replyId, apI2ControllersWebAPIReviewControllerPostReplyReq, _callback);
        Type localVarReturnType = new TypeToken<BigOvenModelAPIReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
