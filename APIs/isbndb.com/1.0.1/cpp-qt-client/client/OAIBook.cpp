/**
 * ISBNdb API
 * Definition of ISBNdb.com API
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBook::OAIBook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBook::OAIBook() {
    this->initializeModel();
}

OAIBook::~OAIBook() {}

void OAIBook::initializeModel() {

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_dewey_decimal_isSet = false;
    m_dewey_decimal_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_isbn_isSet = false;
    m_isbn_isValid = false;

    m_isbn13_isSet = false;
    m_isbn13_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_reviews_isSet = false;
    m_reviews_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_synopsys_isSet = false;
    m_synopsys_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_long_isSet = false;
    m_title_long_isValid = false;
}

void OAIBook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBook::fromJsonObject(QJsonObject json) {

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("date_published")]);
    m_date_published_isSet = !json[QString("date_published")].isNull() && m_date_published_isValid;

    m_dewey_decimal_isValid = ::OpenAPI::fromJsonValue(m_dewey_decimal, json[QString("dewey_decimal")]);
    m_dewey_decimal_isSet = !json[QString("dewey_decimal")].isNull() && m_dewey_decimal_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_isbn_isValid = ::OpenAPI::fromJsonValue(m_isbn, json[QString("isbn")]);
    m_isbn_isSet = !json[QString("isbn")].isNull() && m_isbn_isValid;

    m_isbn13_isValid = ::OpenAPI::fromJsonValue(m_isbn13, json[QString("isbn13")]);
    m_isbn13_isSet = !json[QString("isbn13")].isNull() && m_isbn13_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_reviews_isValid = ::OpenAPI::fromJsonValue(m_reviews, json[QString("reviews")]);
    m_reviews_isSet = !json[QString("reviews")].isNull() && m_reviews_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_synopsys_isValid = ::OpenAPI::fromJsonValue(m_synopsys, json[QString("synopsys")]);
    m_synopsys_isSet = !json[QString("synopsys")].isNull() && m_synopsys_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_long_isValid = ::OpenAPI::fromJsonValue(m_title_long, json[QString("title_long")]);
    m_title_long_isSet = !json[QString("title_long")].isNull() && m_title_long_isValid;
}

QString OAIBook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBook::asJsonObject() const {
    QJsonObject obj;
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("date_published"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_dewey_decimal_isSet) {
        obj.insert(QString("dewey_decimal"), ::OpenAPI::toJsonValue(m_dewey_decimal));
    }
    if (m_dimensions_isSet) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_isbn_isSet) {
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(m_isbn));
    }
    if (m_isbn13_isSet) {
        obj.insert(QString("isbn13"), ::OpenAPI::toJsonValue(m_isbn13));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_reviews.size() > 0) {
        obj.insert(QString("reviews"), ::OpenAPI::toJsonValue(m_reviews));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_synopsys_isSet) {
        obj.insert(QString("synopsys"), ::OpenAPI::toJsonValue(m_synopsys));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_long_isSet) {
        obj.insert(QString("title_long"), ::OpenAPI::toJsonValue(m_title_long));
    }
    return obj;
}

QList<QString> OAIBook::getAuthors() const {
    return m_authors;
}
void OAIBook::setAuthors(const QList<QString> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIBook::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIBook::is_authors_Valid() const{
    return m_authors_isValid;
}

QDateTime OAIBook::getDatePublished() const {
    return m_date_published;
}
void OAIBook::setDatePublished(const QDateTime &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIBook::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIBook::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QString OAIBook::getDeweyDecimal() const {
    return m_dewey_decimal;
}
void OAIBook::setDeweyDecimal(const QString &dewey_decimal) {
    m_dewey_decimal = dewey_decimal;
    m_dewey_decimal_isSet = true;
}

bool OAIBook::is_dewey_decimal_Set() const{
    return m_dewey_decimal_isSet;
}

bool OAIBook::is_dewey_decimal_Valid() const{
    return m_dewey_decimal_isValid;
}

QString OAIBook::getDimensions() const {
    return m_dimensions;
}
void OAIBook::setDimensions(const QString &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIBook::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIBook::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIBook::getEdition() const {
    return m_edition;
}
void OAIBook::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIBook::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIBook::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIBook::getExcerpt() const {
    return m_excerpt;
}
void OAIBook::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIBook::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIBook::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

QString OAIBook::getFormat() const {
    return m_format;
}
void OAIBook::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIBook::is_format_Set() const{
    return m_format_isSet;
}

bool OAIBook::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIBook::getIsbn() const {
    return m_isbn;
}
void OAIBook::setIsbn(const QString &isbn) {
    m_isbn = isbn;
    m_isbn_isSet = true;
}

bool OAIBook::is_isbn_Set() const{
    return m_isbn_isSet;
}

bool OAIBook::is_isbn_Valid() const{
    return m_isbn_isValid;
}

QString OAIBook::getIsbn13() const {
    return m_isbn13;
}
void OAIBook::setIsbn13(const QString &isbn13) {
    m_isbn13 = isbn13;
    m_isbn13_isSet = true;
}

bool OAIBook::is_isbn13_Set() const{
    return m_isbn13_isSet;
}

bool OAIBook::is_isbn13_Valid() const{
    return m_isbn13_isValid;
}

QString OAIBook::getLanguage() const {
    return m_language;
}
void OAIBook::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIBook::is_language_Set() const{
    return m_language_isSet;
}

bool OAIBook::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIBook::getOverview() const {
    return m_overview;
}
void OAIBook::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIBook::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIBook::is_overview_Valid() const{
    return m_overview_isValid;
}

qint32 OAIBook::getPages() const {
    return m_pages;
}
void OAIBook::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIBook::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIBook::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIBook::getPublisher() const {
    return m_publisher;
}
void OAIBook::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIBook::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIBook::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QList<QString> OAIBook::getReviews() const {
    return m_reviews;
}
void OAIBook::setReviews(const QList<QString> &reviews) {
    m_reviews = reviews;
    m_reviews_isSet = true;
}

bool OAIBook::is_reviews_Set() const{
    return m_reviews_isSet;
}

bool OAIBook::is_reviews_Valid() const{
    return m_reviews_isValid;
}

QList<QString> OAIBook::getSubjects() const {
    return m_subjects;
}
void OAIBook::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIBook::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIBook::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QString OAIBook::getSynopsys() const {
    return m_synopsys;
}
void OAIBook::setSynopsys(const QString &synopsys) {
    m_synopsys = synopsys;
    m_synopsys_isSet = true;
}

bool OAIBook::is_synopsys_Set() const{
    return m_synopsys_isSet;
}

bool OAIBook::is_synopsys_Valid() const{
    return m_synopsys_isValid;
}

QString OAIBook::getTitle() const {
    return m_title;
}
void OAIBook::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBook::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBook::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBook::getTitleLong() const {
    return m_title_long;
}
void OAIBook::setTitleLong(const QString &title_long) {
    m_title_long = title_long;
    m_title_long_isSet = true;
}

bool OAIBook::is_title_long_Set() const{
    return m_title_long_isSet;
}

bool OAIBook::is_title_long_Valid() const{
    return m_title_long_isValid;
}

bool OAIBook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dewey_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn13_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_long_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
