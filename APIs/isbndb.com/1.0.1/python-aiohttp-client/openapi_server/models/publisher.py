# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.publisher_books_inner import PublisherBooksInner
from openapi_server import util


class Publisher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, books: List[PublisherBooksInner]=None, name: str=None):
        """Publisher - a model defined in OpenAPI

        :param books: The books of this Publisher.
        :param name: The name of this Publisher.
        """
        self.openapi_types = {
            'books': List[PublisherBooksInner],
            'name': str
        }

        self.attribute_map = {
            'books': 'books',
            'name': 'name'
        }

        self._books = books
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Publisher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Publisher of this Publisher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def books(self):
        """Gets the books of this Publisher.


        :return: The books of this Publisher.
        :rtype: List[PublisherBooksInner]
        """
        return self._books

    @books.setter
    def books(self, books):
        """Sets the books of this Publisher.


        :param books: The books of this Publisher.
        :type books: List[PublisherBooksInner]
        """

        self._books = books

    @property
    def name(self):
        """Gets the name of this Publisher.


        :return: The name of this Publisher.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Publisher.


        :param name: The name of this Publisher.
        :type name: str
        """

        self._name = name
