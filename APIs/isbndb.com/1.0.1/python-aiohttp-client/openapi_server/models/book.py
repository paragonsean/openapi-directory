# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Book(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: List[str]=None, date_published: datetime=None, dewey_decimal: str=None, dimensions: str=None, edition: str=None, excerpt: str=None, format: str=None, isbn: str=None, isbn13: str=None, language: str=None, overview: str=None, pages: int=None, publisher: str=None, reviews: List[str]=None, subjects: List[str]=None, synopsys: str=None, title: str=None, title_long: str=None):
        """Book - a model defined in OpenAPI

        :param authors: The authors of this Book.
        :param date_published: The date_published of this Book.
        :param dewey_decimal: The dewey_decimal of this Book.
        :param dimensions: The dimensions of this Book.
        :param edition: The edition of this Book.
        :param excerpt: The excerpt of this Book.
        :param format: The format of this Book.
        :param isbn: The isbn of this Book.
        :param isbn13: The isbn13 of this Book.
        :param language: The language of this Book.
        :param overview: The overview of this Book.
        :param pages: The pages of this Book.
        :param publisher: The publisher of this Book.
        :param reviews: The reviews of this Book.
        :param subjects: The subjects of this Book.
        :param synopsys: The synopsys of this Book.
        :param title: The title of this Book.
        :param title_long: The title_long of this Book.
        """
        self.openapi_types = {
            'authors': List[str],
            'date_published': datetime,
            'dewey_decimal': str,
            'dimensions': str,
            'edition': str,
            'excerpt': str,
            'format': str,
            'isbn': str,
            'isbn13': str,
            'language': str,
            'overview': str,
            'pages': int,
            'publisher': str,
            'reviews': List[str],
            'subjects': List[str],
            'synopsys': str,
            'title': str,
            'title_long': str
        }

        self.attribute_map = {
            'authors': 'authors',
            'date_published': 'date_published',
            'dewey_decimal': 'dewey_decimal',
            'dimensions': 'dimensions',
            'edition': 'edition',
            'excerpt': 'excerpt',
            'format': 'format',
            'isbn': 'isbn',
            'isbn13': 'isbn13',
            'language': 'language',
            'overview': 'overview',
            'pages': 'pages',
            'publisher': 'publisher',
            'reviews': 'reviews',
            'subjects': 'subjects',
            'synopsys': 'synopsys',
            'title': 'title',
            'title_long': 'title_long'
        }

        self._authors = authors
        self._date_published = date_published
        self._dewey_decimal = dewey_decimal
        self._dimensions = dimensions
        self._edition = edition
        self._excerpt = excerpt
        self._format = format
        self._isbn = isbn
        self._isbn13 = isbn13
        self._language = language
        self._overview = overview
        self._pages = pages
        self._publisher = publisher
        self._reviews = reviews
        self._subjects = subjects
        self._synopsys = synopsys
        self._title = title
        self._title_long = title_long

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Book of this Book.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self):
        """Gets the authors of this Book.


        :return: The authors of this Book.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Book.


        :param authors: The authors of this Book.
        :type authors: List[str]
        """

        self._authors = authors

    @property
    def date_published(self):
        """Gets the date_published of this Book.


        :return: The date_published of this Book.
        :rtype: datetime
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this Book.


        :param date_published: The date_published of this Book.
        :type date_published: datetime
        """

        self._date_published = date_published

    @property
    def dewey_decimal(self):
        """Gets the dewey_decimal of this Book.


        :return: The dewey_decimal of this Book.
        :rtype: str
        """
        return self._dewey_decimal

    @dewey_decimal.setter
    def dewey_decimal(self, dewey_decimal):
        """Sets the dewey_decimal of this Book.


        :param dewey_decimal: The dewey_decimal of this Book.
        :type dewey_decimal: str
        """

        self._dewey_decimal = dewey_decimal

    @property
    def dimensions(self):
        """Gets the dimensions of this Book.


        :return: The dimensions of this Book.
        :rtype: str
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Book.


        :param dimensions: The dimensions of this Book.
        :type dimensions: str
        """

        self._dimensions = dimensions

    @property
    def edition(self):
        """Gets the edition of this Book.


        :return: The edition of this Book.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Book.


        :param edition: The edition of this Book.
        :type edition: str
        """

        self._edition = edition

    @property
    def excerpt(self):
        """Gets the excerpt of this Book.


        :return: The excerpt of this Book.
        :rtype: str
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this Book.


        :param excerpt: The excerpt of this Book.
        :type excerpt: str
        """

        self._excerpt = excerpt

    @property
    def format(self):
        """Gets the format of this Book.


        :return: The format of this Book.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Book.


        :param format: The format of this Book.
        :type format: str
        """

        self._format = format

    @property
    def isbn(self):
        """Gets the isbn of this Book.


        :return: The isbn of this Book.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this Book.


        :param isbn: The isbn of this Book.
        :type isbn: str
        """

        self._isbn = isbn

    @property
    def isbn13(self):
        """Gets the isbn13 of this Book.


        :return: The isbn13 of this Book.
        :rtype: str
        """
        return self._isbn13

    @isbn13.setter
    def isbn13(self, isbn13):
        """Sets the isbn13 of this Book.


        :param isbn13: The isbn13 of this Book.
        :type isbn13: str
        """

        self._isbn13 = isbn13

    @property
    def language(self):
        """Gets the language of this Book.


        :return: The language of this Book.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Book.


        :param language: The language of this Book.
        :type language: str
        """

        self._language = language

    @property
    def overview(self):
        """Gets the overview of this Book.


        :return: The overview of this Book.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Book.


        :param overview: The overview of this Book.
        :type overview: str
        """

        self._overview = overview

    @property
    def pages(self):
        """Gets the pages of this Book.


        :return: The pages of this Book.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Book.


        :param pages: The pages of this Book.
        :type pages: int
        """

        self._pages = pages

    @property
    def publisher(self):
        """Gets the publisher of this Book.


        :return: The publisher of this Book.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Book.


        :param publisher: The publisher of this Book.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def reviews(self):
        """Gets the reviews of this Book.


        :return: The reviews of this Book.
        :rtype: List[str]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this Book.


        :param reviews: The reviews of this Book.
        :type reviews: List[str]
        """

        self._reviews = reviews

    @property
    def subjects(self):
        """Gets the subjects of this Book.


        :return: The subjects of this Book.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Book.


        :param subjects: The subjects of this Book.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def synopsys(self):
        """Gets the synopsys of this Book.


        :return: The synopsys of this Book.
        :rtype: str
        """
        return self._synopsys

    @synopsys.setter
    def synopsys(self, synopsys):
        """Sets the synopsys of this Book.


        :param synopsys: The synopsys of this Book.
        :type synopsys: str
        """

        self._synopsys = synopsys

    @property
    def title(self):
        """Gets the title of this Book.


        :return: The title of this Book.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Book.


        :param title: The title of this Book.
        :type title: str
        """

        self._title = title

    @property
    def title_long(self):
        """Gets the title_long of this Book.


        :return: The title_long of this Book.
        :rtype: str
        """
        return self._title_long

    @title_long.setter
    def title_long(self, title_long):
        """Sets the title_long of this Book.


        :param title_long: The title_long of this Book.
        :type title_long: str
        """

        self._title_long = title_long
