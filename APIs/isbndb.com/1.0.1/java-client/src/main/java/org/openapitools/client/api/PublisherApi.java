/*
 * ISBNdb API
 * Definition of ISBNdb.com API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Publisher;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublisherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublisherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublisherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for publisherNameGet
     * @param name The name of a publisher in the Publisher&#39;s database (required)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The publisher name was found in the database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> Publisher not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherNameGetCall(String name, String page, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publisher/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publisherNameGetValidateBeforeCall(String name, String page, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling publisherNameGet(Async)");
        }

        return publisherNameGetCall(name, page, pageSize, _callback);

    }

    /**
     * Gets publisher details
     * Returns details and a list of books by the publisher.
     * @param name The name of a publisher in the Publisher&#39;s database (required)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @return Publisher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The publisher name was found in the database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> Publisher not found </td><td>  -  </td></tr>
     </table>
     */
    public Publisher publisherNameGet(String name, String page, String pageSize) throws ApiException {
        ApiResponse<Publisher> localVarResp = publisherNameGetWithHttpInfo(name, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Gets publisher details
     * Returns details and a list of books by the publisher.
     * @param name The name of a publisher in the Publisher&#39;s database (required)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @return ApiResponse&lt;Publisher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The publisher name was found in the database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> Publisher not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Publisher> publisherNameGetWithHttpInfo(String name, String page, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = publisherNameGetValidateBeforeCall(name, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Publisher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets publisher details (asynchronously)
     * Returns details and a list of books by the publisher.
     * @param name The name of a publisher in the Publisher&#39;s database (required)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The publisher name was found in the database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> Publisher not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherNameGetAsync(String name, String page, String pageSize, final ApiCallback<Publisher> _callback) throws ApiException {

        okhttp3.Call localVarCall = publisherNameGetValidateBeforeCall(name, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Publisher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishersQueryGet
     * @param query A string to search for in the Publisherâ€™s database (required)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query string found results in the publisher&#39;s database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> There are no results in the publisher&#39;s database for the given query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishersQueryGetCall(String query, String pageSize, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publishers/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishersQueryGetValidateBeforeCall(String query, String pageSize, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling publishersQueryGet(Async)");
        }

        return publishersQueryGetCall(query, pageSize, page, _callback);

    }

    /**
     * Search publishers
     * This returns a list of publishers that match the given query
     * @param query A string to search for in the Publisherâ€™s database (required)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query string found results in the publisher&#39;s database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> There are no results in the publisher&#39;s database for the given query </td><td>  -  </td></tr>
     </table>
     */
    public void publishersQueryGet(String query, String pageSize, String page) throws ApiException {
        publishersQueryGetWithHttpInfo(query, pageSize, page);
    }

    /**
     * Search publishers
     * This returns a list of publishers that match the given query
     * @param query A string to search for in the Publisherâ€™s database (required)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query string found results in the publisher&#39;s database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> There are no results in the publisher&#39;s database for the given query </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishersQueryGetWithHttpInfo(String query, String pageSize, String page) throws ApiException {
        okhttp3.Call localVarCall = publishersQueryGetValidateBeforeCall(query, pageSize, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search publishers (asynchronously)
     * This returns a list of publishers that match the given query
     * @param query A string to search for in the Publisherâ€™s database (required)
     * @param pageSize How many items should be returned per page, maximum of 1,000 (optional)
     * @param page The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query string found results in the publisher&#39;s database </td><td>  * Access-Control-Allow-Origin - CORS Header to allow different origin responses <br>  </td></tr>
        <tr><td> 404 </td><td> There are no results in the publisher&#39;s database for the given query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishersQueryGetAsync(String query, String pageSize, String page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishersQueryGetValidateBeforeCall(query, pageSize, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
