/*
 * ISBNdb API
 * Definition of ISBNdb.com API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a book in the book&#39;s database
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:37.233995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Book {
  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<String> authors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_PUBLISHED = "date_published";
  @SerializedName(SERIALIZED_NAME_DATE_PUBLISHED)
  private OffsetDateTime datePublished;

  public static final String SERIALIZED_NAME_DEWEY_DECIMAL = "dewey_decimal";
  @SerializedName(SERIALIZED_NAME_DEWEY_DECIMAL)
  private String deweyDecimal;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private String dimensions;

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_EXCERPT = "excerpt";
  @SerializedName(SERIALIZED_NAME_EXCERPT)
  private String excerpt;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_ISBN = "isbn";
  @SerializedName(SERIALIZED_NAME_ISBN)
  private String isbn;

  public static final String SERIALIZED_NAME_ISBN13 = "isbn13";
  @SerializedName(SERIALIZED_NAME_ISBN13)
  private String isbn13;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_REVIEWS = "reviews";
  @SerializedName(SERIALIZED_NAME_REVIEWS)
  private List<String> reviews = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNOPSYS = "synopsys";
  @SerializedName(SERIALIZED_NAME_SYNOPSYS)
  private String synopsys;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_LONG = "title_long";
  @SerializedName(SERIALIZED_NAME_TITLE_LONG)
  private String titleLong;

  public Book() {
  }

  public Book authors(List<String> authors) {
    this.authors = authors;
    return this;
  }

  public Book addAuthorsItem(String authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

  /**
   * Get authors
   * @return authors
   */
  @javax.annotation.Nullable
  public List<String> getAuthors() {
    return authors;
  }

  public void setAuthors(List<String> authors) {
    this.authors = authors;
  }


  public Book datePublished(OffsetDateTime datePublished) {
    this.datePublished = datePublished;
    return this;
  }

  /**
   * Get datePublished
   * @return datePublished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatePublished() {
    return datePublished;
  }

  public void setDatePublished(OffsetDateTime datePublished) {
    this.datePublished = datePublished;
  }


  public Book deweyDecimal(String deweyDecimal) {
    this.deweyDecimal = deweyDecimal;
    return this;
  }

  /**
   * Get deweyDecimal
   * @return deweyDecimal
   */
  @javax.annotation.Nullable
  public String getDeweyDecimal() {
    return deweyDecimal;
  }

  public void setDeweyDecimal(String deweyDecimal) {
    this.deweyDecimal = deweyDecimal;
  }


  public Book dimensions(String dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public String getDimensions() {
    return dimensions;
  }

  public void setDimensions(String dimensions) {
    this.dimensions = dimensions;
  }


  public Book edition(String edition) {
    this.edition = edition;
    return this;
  }

  /**
   * Get edition
   * @return edition
   */
  @javax.annotation.Nullable
  public String getEdition() {
    return edition;
  }

  public void setEdition(String edition) {
    this.edition = edition;
  }


  public Book excerpt(String excerpt) {
    this.excerpt = excerpt;
    return this;
  }

  /**
   * Get excerpt
   * @return excerpt
   */
  @javax.annotation.Nullable
  public String getExcerpt() {
    return excerpt;
  }

  public void setExcerpt(String excerpt) {
    this.excerpt = excerpt;
  }


  public Book format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public Book isbn(String isbn) {
    this.isbn = isbn;
    return this;
  }

  /**
   * Get isbn
   * @return isbn
   */
  @javax.annotation.Nullable
  public String getIsbn() {
    return isbn;
  }

  public void setIsbn(String isbn) {
    this.isbn = isbn;
  }


  public Book isbn13(String isbn13) {
    this.isbn13 = isbn13;
    return this;
  }

  /**
   * Get isbn13
   * @return isbn13
   */
  @javax.annotation.Nullable
  public String getIsbn13() {
    return isbn13;
  }

  public void setIsbn13(String isbn13) {
    this.isbn13 = isbn13;
  }


  public Book language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Book overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Get overview
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public Book pages(Integer pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public Integer getPages() {
    return pages;
  }

  public void setPages(Integer pages) {
    this.pages = pages;
  }


  public Book publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public Book reviews(List<String> reviews) {
    this.reviews = reviews;
    return this;
  }

  public Book addReviewsItem(String reviewsItem) {
    if (this.reviews == null) {
      this.reviews = new ArrayList<>();
    }
    this.reviews.add(reviewsItem);
    return this;
  }

  /**
   * Get reviews
   * @return reviews
   */
  @javax.annotation.Nullable
  public List<String> getReviews() {
    return reviews;
  }

  public void setReviews(List<String> reviews) {
    this.reviews = reviews;
  }


  public Book subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public Book addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public Book synopsys(String synopsys) {
    this.synopsys = synopsys;
    return this;
  }

  /**
   * Get synopsys
   * @return synopsys
   */
  @javax.annotation.Nullable
  public String getSynopsys() {
    return synopsys;
  }

  public void setSynopsys(String synopsys) {
    this.synopsys = synopsys;
  }


  public Book title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Book titleLong(String titleLong) {
    this.titleLong = titleLong;
    return this;
  }

  /**
   * Get titleLong
   * @return titleLong
   */
  @javax.annotation.Nullable
  public String getTitleLong() {
    return titleLong;
  }

  public void setTitleLong(String titleLong) {
    this.titleLong = titleLong;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Book book = (Book) o;
    return Objects.equals(this.authors, book.authors) &&
        Objects.equals(this.datePublished, book.datePublished) &&
        Objects.equals(this.deweyDecimal, book.deweyDecimal) &&
        Objects.equals(this.dimensions, book.dimensions) &&
        Objects.equals(this.edition, book.edition) &&
        Objects.equals(this.excerpt, book.excerpt) &&
        Objects.equals(this.format, book.format) &&
        Objects.equals(this.isbn, book.isbn) &&
        Objects.equals(this.isbn13, book.isbn13) &&
        Objects.equals(this.language, book.language) &&
        Objects.equals(this.overview, book.overview) &&
        Objects.equals(this.pages, book.pages) &&
        Objects.equals(this.publisher, book.publisher) &&
        Objects.equals(this.reviews, book.reviews) &&
        Objects.equals(this.subjects, book.subjects) &&
        Objects.equals(this.synopsys, book.synopsys) &&
        Objects.equals(this.title, book.title) &&
        Objects.equals(this.titleLong, book.titleLong);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authors, datePublished, deweyDecimal, dimensions, edition, excerpt, format, isbn, isbn13, language, overview, pages, publisher, reviews, subjects, synopsys, title, titleLong);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Book {\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    datePublished: ").append(toIndentedString(datePublished)).append("\n");
    sb.append("    deweyDecimal: ").append(toIndentedString(deweyDecimal)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    excerpt: ").append(toIndentedString(excerpt)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    isbn: ").append(toIndentedString(isbn)).append("\n");
    sb.append("    isbn13: ").append(toIndentedString(isbn13)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    synopsys: ").append(toIndentedString(synopsys)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleLong: ").append(toIndentedString(titleLong)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authors");
    openapiFields.add("date_published");
    openapiFields.add("dewey_decimal");
    openapiFields.add("dimensions");
    openapiFields.add("edition");
    openapiFields.add("excerpt");
    openapiFields.add("format");
    openapiFields.add("isbn");
    openapiFields.add("isbn13");
    openapiFields.add("language");
    openapiFields.add("overview");
    openapiFields.add("pages");
    openapiFields.add("publisher");
    openapiFields.add("reviews");
    openapiFields.add("subjects");
    openapiFields.add("synopsys");
    openapiFields.add("title");
    openapiFields.add("title_long");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Book
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Book.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Book is not found in the empty JSON string", Book.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Book.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Book` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("authors") != null && !jsonObj.get("authors").isJsonNull() && !jsonObj.get("authors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }
      if ((jsonObj.get("dewey_decimal") != null && !jsonObj.get("dewey_decimal").isJsonNull()) && !jsonObj.get("dewey_decimal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dewey_decimal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dewey_decimal").toString()));
      }
      if ((jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) && !jsonObj.get("dimensions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      if ((jsonObj.get("excerpt") != null && !jsonObj.get("excerpt").isJsonNull()) && !jsonObj.get("excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excerpt").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("isbn") != null && !jsonObj.get("isbn").isJsonNull()) && !jsonObj.get("isbn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isbn").toString()));
      }
      if ((jsonObj.get("isbn13") != null && !jsonObj.get("isbn13").isJsonNull()) && !jsonObj.get("isbn13").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbn13` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isbn13").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("overview") != null && !jsonObj.get("overview").isJsonNull()) && !jsonObj.get("overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overview").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reviews") != null && !jsonObj.get("reviews").isJsonNull() && !jsonObj.get("reviews").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviews` to be an array in the JSON string but got `%s`", jsonObj.get("reviews").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      if ((jsonObj.get("synopsys") != null && !jsonObj.get("synopsys").isJsonNull()) && !jsonObj.get("synopsys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synopsys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synopsys").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_long") != null && !jsonObj.get("title_long").isJsonNull()) && !jsonObj.get("title_long").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_long` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_long").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Book.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Book' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Book> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Book.class));

       return (TypeAdapter<T>) new TypeAdapter<Book>() {
           @Override
           public void write(JsonWriter out, Book value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Book read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Book given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Book
   * @throws IOException if the JSON string is invalid with respect to Book
   */
  public static Book fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Book.class);
  }

  /**
   * Convert an instance of Book to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

