/**
 * ISBNdb API
 * Definition of ISBNdb.com API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subject from '../model/Subject';

/**
* Subject service.
* @module api/SubjectApi
* @version 1.0.1
*/
export default class SubjectApi {

    /**
    * Constructs a new SubjectApi. 
    * @alias module:api/SubjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subjectNameGet operation.
     * @callback module:api/SubjectApi~subjectNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets subject details
     * Returns details and a list of books with subject.
     * @param {String} name A subject in the Subject's database
     * @param {module:api/SubjectApi~subjectNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subject}
     */
    subjectNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling subjectNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subject;
      return this.apiClient.callApi(
        '/subject/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsQueryGet operation.
     * @callback module:api/SubjectApi~subjectsQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search subjects
     * This returns a list of subjects that match the given query
     * @param {String} query A string to search for in the Subjectâ€™s database
     * @param {Object} opts Optional parameters
     * @param {String} [pageSize] How many items should be returned per page, maximum of 1,000
     * @param {String} [page] The number of page to retrieve, please note the API will not return more than 10,000 results no matter how you paginate them
     * @param {module:api/SubjectApi~subjectsQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subjectsQueryGet(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling subjectsQueryGet");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subjects/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
