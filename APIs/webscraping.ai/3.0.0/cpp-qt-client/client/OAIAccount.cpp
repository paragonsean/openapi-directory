/**
 * WebScraping.AI
 * A client for https://webscraping.ai API. It provides a web scraping automation API with Chrome JavaScript rendering, rotating proxies, and built-in HTML parsing.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@webscraping.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_remaining_api_calls_isSet = false;
    m_remaining_api_calls_isValid = false;

    m_remaining_concurrency_isSet = false;
    m_remaining_concurrency_isValid = false;

    m_resets_at_isSet = false;
    m_resets_at_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_remaining_api_calls_isValid = ::OpenAPI::fromJsonValue(m_remaining_api_calls, json[QString("remaining_api_calls")]);
    m_remaining_api_calls_isSet = !json[QString("remaining_api_calls")].isNull() && m_remaining_api_calls_isValid;

    m_remaining_concurrency_isValid = ::OpenAPI::fromJsonValue(m_remaining_concurrency, json[QString("remaining_concurrency")]);
    m_remaining_concurrency_isSet = !json[QString("remaining_concurrency")].isNull() && m_remaining_concurrency_isValid;

    m_resets_at_isValid = ::OpenAPI::fromJsonValue(m_resets_at, json[QString("resets_at")]);
    m_resets_at_isSet = !json[QString("resets_at")].isNull() && m_resets_at_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_remaining_api_calls_isSet) {
        obj.insert(QString("remaining_api_calls"), ::OpenAPI::toJsonValue(m_remaining_api_calls));
    }
    if (m_remaining_concurrency_isSet) {
        obj.insert(QString("remaining_concurrency"), ::OpenAPI::toJsonValue(m_remaining_concurrency));
    }
    if (m_resets_at_isSet) {
        obj.insert(QString("resets_at"), ::OpenAPI::toJsonValue(m_resets_at));
    }
    return obj;
}

qint32 OAIAccount::getRemainingApiCalls() const {
    return m_remaining_api_calls;
}
void OAIAccount::setRemainingApiCalls(const qint32 &remaining_api_calls) {
    m_remaining_api_calls = remaining_api_calls;
    m_remaining_api_calls_isSet = true;
}

bool OAIAccount::is_remaining_api_calls_Set() const{
    return m_remaining_api_calls_isSet;
}

bool OAIAccount::is_remaining_api_calls_Valid() const{
    return m_remaining_api_calls_isValid;
}

qint32 OAIAccount::getRemainingConcurrency() const {
    return m_remaining_concurrency;
}
void OAIAccount::setRemainingConcurrency(const qint32 &remaining_concurrency) {
    m_remaining_concurrency = remaining_concurrency;
    m_remaining_concurrency_isSet = true;
}

bool OAIAccount::is_remaining_concurrency_Set() const{
    return m_remaining_concurrency_isSet;
}

bool OAIAccount::is_remaining_concurrency_Valid() const{
    return m_remaining_concurrency_isValid;
}

qint32 OAIAccount::getResetsAt() const {
    return m_resets_at;
}
void OAIAccount::setResetsAt(const qint32 &resets_at) {
    m_resets_at = resets_at;
    m_resets_at_isSet = true;
}

bool OAIAccount::is_resets_at_Set() const{
    return m_resets_at_isSet;
}

bool OAIAccount::is_resets_at_Valid() const{
    return m_resets_at_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_remaining_api_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resets_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
