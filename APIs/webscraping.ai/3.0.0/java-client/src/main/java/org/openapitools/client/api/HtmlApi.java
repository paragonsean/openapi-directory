/*
 * WebScraping.AI
 * A client for https://webscraping.ai API. It provides a web scraping automation API with Chrome JavaScript rendering, rotating proxies, and built-in HTML parsing.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@webscraping.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.PageError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HtmlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HtmlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HtmlApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHTML
     * @param url URL of the target page (required)
     * @param headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;}) (optional)
     * @param timeout Maximum processing time in ms. Increase it in case of timeout errors (10000 by default, maximum is 30000) (optional, default to 10000)
     * @param js Execute on-page JavaScript using a headless browser (true by default) (optional, default to true)
     * @param jsTimeout Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page. (optional, default to 2000)
     * @param proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details. (optional, default to datacenter)
     * @param country Country of the proxy to use (US by default). Only available on Startup and Custom plans. (optional, default to us)
     * @param device Type of device emulation. (optional, default to desktop)
     * @param errorOn404 Return error on 404 HTTP status on the target page (false by default). (optional, default to false)
     * @param errorOnRedirect Return error on redirect on the target page (false by default). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 504 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLCall(String url, Map<String, String> headers, Integer timeout, Boolean js, Integer jsTimeout, String proxy, String country, String device, Boolean errorOn404, Boolean errorOnRedirect, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (headers != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(headers));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (js != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("js", js));
        }

        if (jsTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("js_timeout", jsTimeout));
        }

        if (proxy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxy", proxy));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (errorOn404 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_on_404", errorOn404));
        }

        if (errorOnRedirect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_on_redirect", errorOnRedirect));
        }

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHTMLValidateBeforeCall(String url, Map<String, String> headers, Integer timeout, Boolean js, Integer jsTimeout, String proxy, String country, String device, Boolean errorOn404, Boolean errorOnRedirect, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getHTML(Async)");
        }

        return getHTMLCall(url, headers, timeout, js, jsTimeout, proxy, country, device, errorOn404, errorOnRedirect, _callback);

    }

    /**
     * Page HTML by URL
     * Returns just HTML on success, JSON on error
     * @param url URL of the target page (required)
     * @param headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;}) (optional)
     * @param timeout Maximum processing time in ms. Increase it in case of timeout errors (10000 by default, maximum is 30000) (optional, default to 10000)
     * @param js Execute on-page JavaScript using a headless browser (true by default) (optional, default to true)
     * @param jsTimeout Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page. (optional, default to 2000)
     * @param proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details. (optional, default to datacenter)
     * @param country Country of the proxy to use (US by default). Only available on Startup and Custom plans. (optional, default to us)
     * @param device Type of device emulation. (optional, default to desktop)
     * @param errorOn404 Return error on 404 HTTP status on the target page (false by default). (optional, default to false)
     * @param errorOnRedirect Return error on redirect on the target page (false by default). (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 504 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String getHTML(String url, Map<String, String> headers, Integer timeout, Boolean js, Integer jsTimeout, String proxy, String country, String device, Boolean errorOn404, Boolean errorOnRedirect) throws ApiException {
        ApiResponse<String> localVarResp = getHTMLWithHttpInfo(url, headers, timeout, js, jsTimeout, proxy, country, device, errorOn404, errorOnRedirect);
        return localVarResp.getData();
    }

    /**
     * Page HTML by URL
     * Returns just HTML on success, JSON on error
     * @param url URL of the target page (required)
     * @param headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;}) (optional)
     * @param timeout Maximum processing time in ms. Increase it in case of timeout errors (10000 by default, maximum is 30000) (optional, default to 10000)
     * @param js Execute on-page JavaScript using a headless browser (true by default) (optional, default to true)
     * @param jsTimeout Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page. (optional, default to 2000)
     * @param proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details. (optional, default to datacenter)
     * @param country Country of the proxy to use (US by default). Only available on Startup and Custom plans. (optional, default to us)
     * @param device Type of device emulation. (optional, default to desktop)
     * @param errorOn404 Return error on 404 HTTP status on the target page (false by default). (optional, default to false)
     * @param errorOnRedirect Return error on redirect on the target page (false by default). (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 504 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getHTMLWithHttpInfo(String url, Map<String, String> headers, Integer timeout, Boolean js, Integer jsTimeout, String proxy, String country, String device, Boolean errorOn404, Boolean errorOnRedirect) throws ApiException {
        okhttp3.Call localVarCall = getHTMLValidateBeforeCall(url, headers, timeout, js, jsTimeout, proxy, country, device, errorOn404, errorOnRedirect, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Page HTML by URL (asynchronously)
     * Returns just HTML on success, JSON on error
     * @param url URL of the target page (required)
     * @param headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;}) (optional)
     * @param timeout Maximum processing time in ms. Increase it in case of timeout errors (10000 by default, maximum is 30000) (optional, default to 10000)
     * @param js Execute on-page JavaScript using a headless browser (true by default) (optional, default to true)
     * @param jsTimeout Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page. (optional, default to 2000)
     * @param proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details. (optional, default to datacenter)
     * @param country Country of the proxy to use (US by default). Only available on Startup and Custom plans. (optional, default to us)
     * @param device Type of device emulation. (optional, default to desktop)
     * @param errorOn404 Return error on 404 HTTP status on the target page (false by default). (optional, default to false)
     * @param errorOnRedirect Return error on redirect on the target page (false by default). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 504 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLAsync(String url, Map<String, String> headers, Integer timeout, Boolean js, Integer jsTimeout, String proxy, String country, String device, Boolean errorOn404, Boolean errorOnRedirect, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHTMLValidateBeforeCall(url, headers, timeout, js, jsTimeout, proxy, country, device, errorOn404, errorOnRedirect, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
