/**
 * WebScraping.AI
 * A client for https://webscraping.ai API. It provides a web scraping automation API with Chrome JavaScript rendering, rotating proxies, and built-in HTML parsing.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@webscraping.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import PageError from '../model/PageError';

/**
* HTML service.
* @module api/HTMLApi
* @version 3.0.0
*/
export default class HTMLApi {

    /**
    * Constructs a new HTMLApi. 
    * @alias module:api/HTMLApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHTML operation.
     * @callback module:api/HTMLApi~getHTMLCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Page HTML by URL
     * Returns just HTML on success, JSON on error
     * @param {String} url URL of the target page
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [headers] HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&headers[One]=value1&headers=[Another]=value2) or as a JSON encoded object (...&headers={\"One\": \"value1\", \"Another\": \"value2\"})
     * @param {Number} [timeout = 10000)] Maximum processing time in ms. Increase it in case of timeout errors (10000 by default, maximum is 30000)
     * @param {Boolean} [js = true)] Execute on-page JavaScript using a headless browser (true by default)
     * @param {Number} [jsTimeout = 2000)] Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page.
     * @param {module:model/String} [proxy = 'datacenter')] Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details.
     * @param {module:model/String} [country = 'us')] Country of the proxy to use (US by default). Only available on Startup and Custom plans.
     * @param {module:model/String} [device = 'desktop')] Type of device emulation.
     * @param {Boolean} [errorOn404 = false)] Return error on 404 HTTP status on the target page (false by default).
     * @param {Boolean} [errorOnRedirect = false)] Return error on redirect on the target page (false by default).
     * @param {module:api/HTMLApi~getHTMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getHTML(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getHTML");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'headers': opts['headers'],
        'timeout': opts['timeout'],
        'js': opts['js'],
        'js_timeout': opts['jsTimeout'],
        'proxy': opts['proxy'],
        'country': opts['country'],
        'device': opts['device'],
        'error_on_404': opts['errorOn404'],
        'error_on_redirect': opts['errorOnRedirect']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
