# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.appointment_status_transition import AppointmentStatusTransition
from openapi_server.models.claim_billing_notes1 import ClaimBillingNotes1
from openapi_server.models.clinical_note1 import ClinicalNote1
from openapi_server.models.custom_appointment_field_value import CustomAppointmentFieldValue
from openapi_server.models.custom_vital_value import CustomVitalValue
from openapi_server.models.simple_reminder import SimpleReminder
from openapi_server.models.system_vitals import SystemVitals
from openapi_server import util


class Appointment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_overlapping: bool=None, appt_is_break: bool=None, base_recurring_appointment: str=None, billing_notes: List[ClaimBillingNotes1]=None, billing_provider: str=None, billing_status: str=None, clinical_note: ClinicalNote1=None, cloned_from: int=None, color: str=None, created_at: str=None, custom_fields: List[CustomAppointmentFieldValue]=None, custom_vitals: List[CustomVitalValue]=None, deleted_flag: bool=None, doctor: int=None, duration: int=None, exam_room: int=None, extended_updated_at: str=None, first_billed_date: str=None, icd10_codes: List[str]=None, icd9_codes: List[str]=None, id: str=None, ins1_status: str=None, ins2_status: str=None, is_virtual_base: bool=None, is_walk_in: bool=None, last_billed_date: str=None, notes: str=None, office: int=None, patient: int=None, primary_insurance_id_number: str=None, primary_insurer_name: str=None, primary_insurer_payer_id: str=None, profile: int=None, reason: str=None, recurring_appointment: bool=None, reminder_profile: str=None, reminders: List[SimpleReminder]=None, scheduled_time: str=None, secondary_insurance_id_number: str=None, secondary_insurer_name: str=None, secondary_insurer_payer_id: str=None, status: str=None, status_transitions: List[AppointmentStatusTransition]=None, supervising_provider: str=None, updated_at: str=None, vitals: SystemVitals=None):
        """Appointment - a model defined in OpenAPI

        :param allow_overlapping: The allow_overlapping of this Appointment.
        :param appt_is_break: The appt_is_break of this Appointment.
        :param base_recurring_appointment: The base_recurring_appointment of this Appointment.
        :param billing_notes: The billing_notes of this Appointment.
        :param billing_provider: The billing_provider of this Appointment.
        :param billing_status: The billing_status of this Appointment.
        :param clinical_note: The clinical_note of this Appointment.
        :param cloned_from: The cloned_from of this Appointment.
        :param color: The color of this Appointment.
        :param created_at: The created_at of this Appointment.
        :param custom_fields: The custom_fields of this Appointment.
        :param custom_vitals: The custom_vitals of this Appointment.
        :param deleted_flag: The deleted_flag of this Appointment.
        :param doctor: The doctor of this Appointment.
        :param duration: The duration of this Appointment.
        :param exam_room: The exam_room of this Appointment.
        :param extended_updated_at: The extended_updated_at of this Appointment.
        :param first_billed_date: The first_billed_date of this Appointment.
        :param icd10_codes: The icd10_codes of this Appointment.
        :param icd9_codes: The icd9_codes of this Appointment.
        :param id: The id of this Appointment.
        :param ins1_status: The ins1_status of this Appointment.
        :param ins2_status: The ins2_status of this Appointment.
        :param is_virtual_base: The is_virtual_base of this Appointment.
        :param is_walk_in: The is_walk_in of this Appointment.
        :param last_billed_date: The last_billed_date of this Appointment.
        :param notes: The notes of this Appointment.
        :param office: The office of this Appointment.
        :param patient: The patient of this Appointment.
        :param primary_insurance_id_number: The primary_insurance_id_number of this Appointment.
        :param primary_insurer_name: The primary_insurer_name of this Appointment.
        :param primary_insurer_payer_id: The primary_insurer_payer_id of this Appointment.
        :param profile: The profile of this Appointment.
        :param reason: The reason of this Appointment.
        :param recurring_appointment: The recurring_appointment of this Appointment.
        :param reminder_profile: The reminder_profile of this Appointment.
        :param reminders: The reminders of this Appointment.
        :param scheduled_time: The scheduled_time of this Appointment.
        :param secondary_insurance_id_number: The secondary_insurance_id_number of this Appointment.
        :param secondary_insurer_name: The secondary_insurer_name of this Appointment.
        :param secondary_insurer_payer_id: The secondary_insurer_payer_id of this Appointment.
        :param status: The status of this Appointment.
        :param status_transitions: The status_transitions of this Appointment.
        :param supervising_provider: The supervising_provider of this Appointment.
        :param updated_at: The updated_at of this Appointment.
        :param vitals: The vitals of this Appointment.
        """
        self.openapi_types = {
            'allow_overlapping': bool,
            'appt_is_break': bool,
            'base_recurring_appointment': str,
            'billing_notes': List[ClaimBillingNotes1],
            'billing_provider': str,
            'billing_status': str,
            'clinical_note': ClinicalNote1,
            'cloned_from': int,
            'color': str,
            'created_at': str,
            'custom_fields': List[CustomAppointmentFieldValue],
            'custom_vitals': List[CustomVitalValue],
            'deleted_flag': bool,
            'doctor': int,
            'duration': int,
            'exam_room': int,
            'extended_updated_at': str,
            'first_billed_date': str,
            'icd10_codes': List[str],
            'icd9_codes': List[str],
            'id': str,
            'ins1_status': str,
            'ins2_status': str,
            'is_virtual_base': bool,
            'is_walk_in': bool,
            'last_billed_date': str,
            'notes': str,
            'office': int,
            'patient': int,
            'primary_insurance_id_number': str,
            'primary_insurer_name': str,
            'primary_insurer_payer_id': str,
            'profile': int,
            'reason': str,
            'recurring_appointment': bool,
            'reminder_profile': str,
            'reminders': List[SimpleReminder],
            'scheduled_time': str,
            'secondary_insurance_id_number': str,
            'secondary_insurer_name': str,
            'secondary_insurer_payer_id': str,
            'status': str,
            'status_transitions': List[AppointmentStatusTransition],
            'supervising_provider': str,
            'updated_at': str,
            'vitals': SystemVitals
        }

        self.attribute_map = {
            'allow_overlapping': 'allow_overlapping',
            'appt_is_break': 'appt_is_break',
            'base_recurring_appointment': 'base_recurring_appointment',
            'billing_notes': 'billing_notes',
            'billing_provider': 'billing_provider',
            'billing_status': 'billing_status',
            'clinical_note': 'clinical_note',
            'cloned_from': 'cloned_from',
            'color': 'color',
            'created_at': 'created_at',
            'custom_fields': 'custom_fields',
            'custom_vitals': 'custom_vitals',
            'deleted_flag': 'deleted_flag',
            'doctor': 'doctor',
            'duration': 'duration',
            'exam_room': 'exam_room',
            'extended_updated_at': 'extended_updated_at',
            'first_billed_date': 'first_billed_date',
            'icd10_codes': 'icd10_codes',
            'icd9_codes': 'icd9_codes',
            'id': 'id',
            'ins1_status': 'ins1_status',
            'ins2_status': 'ins2_status',
            'is_virtual_base': 'is_virtual_base',
            'is_walk_in': 'is_walk_in',
            'last_billed_date': 'last_billed_date',
            'notes': 'notes',
            'office': 'office',
            'patient': 'patient',
            'primary_insurance_id_number': 'primary_insurance_id_number',
            'primary_insurer_name': 'primary_insurer_name',
            'primary_insurer_payer_id': 'primary_insurer_payer_id',
            'profile': 'profile',
            'reason': 'reason',
            'recurring_appointment': 'recurring_appointment',
            'reminder_profile': 'reminder_profile',
            'reminders': 'reminders',
            'scheduled_time': 'scheduled_time',
            'secondary_insurance_id_number': 'secondary_insurance_id_number',
            'secondary_insurer_name': 'secondary_insurer_name',
            'secondary_insurer_payer_id': 'secondary_insurer_payer_id',
            'status': 'status',
            'status_transitions': 'status_transitions',
            'supervising_provider': 'supervising_provider',
            'updated_at': 'updated_at',
            'vitals': 'vitals'
        }

        self._allow_overlapping = allow_overlapping
        self._appt_is_break = appt_is_break
        self._base_recurring_appointment = base_recurring_appointment
        self._billing_notes = billing_notes
        self._billing_provider = billing_provider
        self._billing_status = billing_status
        self._clinical_note = clinical_note
        self._cloned_from = cloned_from
        self._color = color
        self._created_at = created_at
        self._custom_fields = custom_fields
        self._custom_vitals = custom_vitals
        self._deleted_flag = deleted_flag
        self._doctor = doctor
        self._duration = duration
        self._exam_room = exam_room
        self._extended_updated_at = extended_updated_at
        self._first_billed_date = first_billed_date
        self._icd10_codes = icd10_codes
        self._icd9_codes = icd9_codes
        self._id = id
        self._ins1_status = ins1_status
        self._ins2_status = ins2_status
        self._is_virtual_base = is_virtual_base
        self._is_walk_in = is_walk_in
        self._last_billed_date = last_billed_date
        self._notes = notes
        self._office = office
        self._patient = patient
        self._primary_insurance_id_number = primary_insurance_id_number
        self._primary_insurer_name = primary_insurer_name
        self._primary_insurer_payer_id = primary_insurer_payer_id
        self._profile = profile
        self._reason = reason
        self._recurring_appointment = recurring_appointment
        self._reminder_profile = reminder_profile
        self._reminders = reminders
        self._scheduled_time = scheduled_time
        self._secondary_insurance_id_number = secondary_insurance_id_number
        self._secondary_insurer_name = secondary_insurer_name
        self._secondary_insurer_payer_id = secondary_insurer_payer_id
        self._status = status
        self._status_transitions = status_transitions
        self._supervising_provider = supervising_provider
        self._updated_at = updated_at
        self._vitals = vitals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Appointment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Appointment of this Appointment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_overlapping(self):
        """Gets the allow_overlapping of this Appointment.

        Bypass overlap check.

        :return: The allow_overlapping of this Appointment.
        :rtype: bool
        """
        return self._allow_overlapping

    @allow_overlapping.setter
    def allow_overlapping(self, allow_overlapping):
        """Sets the allow_overlapping of this Appointment.

        Bypass overlap check.

        :param allow_overlapping: The allow_overlapping of this Appointment.
        :type allow_overlapping: bool
        """

        self._allow_overlapping = allow_overlapping

    @property
    def appt_is_break(self):
        """Gets the appt_is_break of this Appointment.

        

        :return: The appt_is_break of this Appointment.
        :rtype: bool
        """
        return self._appt_is_break

    @appt_is_break.setter
    def appt_is_break(self, appt_is_break):
        """Sets the appt_is_break of this Appointment.

        

        :param appt_is_break: The appt_is_break of this Appointment.
        :type appt_is_break: bool
        """

        self._appt_is_break = appt_is_break

    @property
    def base_recurring_appointment(self):
        """Gets the base_recurring_appointment of this Appointment.

        ID of base appointment of a recurrign series

        :return: The base_recurring_appointment of this Appointment.
        :rtype: str
        """
        return self._base_recurring_appointment

    @base_recurring_appointment.setter
    def base_recurring_appointment(self, base_recurring_appointment):
        """Sets the base_recurring_appointment of this Appointment.

        ID of base appointment of a recurrign series

        :param base_recurring_appointment: The base_recurring_appointment of this Appointment.
        :type base_recurring_appointment: str
        """

        self._base_recurring_appointment = base_recurring_appointment

    @property
    def billing_notes(self):
        """Gets the billing_notes of this Appointment.

        Billing notes of the appointment. For writing, check `/api/claim_billing_notes`

        :return: The billing_notes of this Appointment.
        :rtype: List[ClaimBillingNotes1]
        """
        return self._billing_notes

    @billing_notes.setter
    def billing_notes(self, billing_notes):
        """Sets the billing_notes of this Appointment.

        Billing notes of the appointment. For writing, check `/api/claim_billing_notes`

        :param billing_notes: The billing_notes of this Appointment.
        :type billing_notes: List[ClaimBillingNotes1]
        """

        self._billing_notes = billing_notes

    @property
    def billing_provider(self):
        """Gets the billing_provider of this Appointment.

        

        :return: The billing_provider of this Appointment.
        :rtype: str
        """
        return self._billing_provider

    @billing_provider.setter
    def billing_provider(self, billing_provider):
        """Sets the billing_provider of this Appointment.

        

        :param billing_provider: The billing_provider of this Appointment.
        :type billing_provider: str
        """

        self._billing_provider = billing_provider

    @property
    def billing_status(self):
        """Gets the billing_status of this Appointment.

        Should be one of `Auto Accident Claim`, `Balance Due`, `Bill Insurance`, `Bill Secondary Insurance`, `Durable Medical Equipment Claim`, `Internal Review`, `Paid In Full`, `Settled`, `Worker's Comp Claim` or one of the custom billing status

        :return: The billing_status of this Appointment.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this Appointment.

        Should be one of `Auto Accident Claim`, `Balance Due`, `Bill Insurance`, `Bill Secondary Insurance`, `Durable Medical Equipment Claim`, `Internal Review`, `Paid In Full`, `Settled`, `Worker's Comp Claim` or one of the custom billing status

        :param billing_status: The billing_status of this Appointment.
        :type billing_status: str
        """

        self._billing_status = billing_status

    @property
    def clinical_note(self):
        """Gets the clinical_note of this Appointment.


        :return: The clinical_note of this Appointment.
        :rtype: ClinicalNote1
        """
        return self._clinical_note

    @clinical_note.setter
    def clinical_note(self, clinical_note):
        """Sets the clinical_note of this Appointment.


        :param clinical_note: The clinical_note of this Appointment.
        :type clinical_note: ClinicalNote1
        """

        self._clinical_note = clinical_note

    @property
    def cloned_from(self):
        """Gets the cloned_from of this Appointment.

        ID of the original appointment which this appointment cloned from. Will be null if the appointment is not cloned.

        :return: The cloned_from of this Appointment.
        :rtype: int
        """
        return self._cloned_from

    @cloned_from.setter
    def cloned_from(self, cloned_from):
        """Sets the cloned_from of this Appointment.

        ID of the original appointment which this appointment cloned from. Will be null if the appointment is not cloned.

        :param cloned_from: The cloned_from of this Appointment.
        :type cloned_from: int
        """

        self._cloned_from = cloned_from

    @property
    def color(self):
        """Gets the color of this Appointment.

        

        :return: The color of this Appointment.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Appointment.

        

        :param color: The color of this Appointment.
        :type color: str
        """

        self._color = color

    @property
    def created_at(self):
        """Gets the created_at of this Appointment.

        

        :return: The created_at of this Appointment.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Appointment.

        

        :param created_at: The created_at of this Appointment.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Appointment.

        Custom appointment fields

        :return: The custom_fields of this Appointment.
        :rtype: List[CustomAppointmentFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Appointment.

        Custom appointment fields

        :param custom_fields: The custom_fields of this Appointment.
        :type custom_fields: List[CustomAppointmentFieldValue]
        """

        self._custom_fields = custom_fields

    @property
    def custom_vitals(self):
        """Gets the custom_vitals of this Appointment.

        Custom vitals associated with this appointment.

        :return: The custom_vitals of this Appointment.
        :rtype: List[CustomVitalValue]
        """
        return self._custom_vitals

    @custom_vitals.setter
    def custom_vitals(self, custom_vitals):
        """Sets the custom_vitals of this Appointment.

        Custom vitals associated with this appointment.

        :param custom_vitals: The custom_vitals of this Appointment.
        :type custom_vitals: List[CustomVitalValue]
        """

        self._custom_vitals = custom_vitals

    @property
    def deleted_flag(self):
        """Gets the deleted_flag of this Appointment.

        Whether the appointmetn is deleted.

        :return: The deleted_flag of this Appointment.
        :rtype: bool
        """
        return self._deleted_flag

    @deleted_flag.setter
    def deleted_flag(self, deleted_flag):
        """Sets the deleted_flag of this Appointment.

        Whether the appointmetn is deleted.

        :param deleted_flag: The deleted_flag of this Appointment.
        :type deleted_flag: bool
        """

        self._deleted_flag = deleted_flag

    @property
    def doctor(self):
        """Gets the doctor of this Appointment.

        Doctor ID

        :return: The doctor of this Appointment.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this Appointment.

        Doctor ID

        :param doctor: The doctor of this Appointment.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def duration(self):
        """Gets the duration of this Appointment.

        Length of the appointment in minutes. Optional if `profile` is provided.

        :return: The duration of this Appointment.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Appointment.

        Length of the appointment in minutes. Optional if `profile` is provided.

        :param duration: The duration of this Appointment.
        :type duration: int
        """

        self._duration = duration

    @property
    def exam_room(self):
        """Gets the exam_room of this Appointment.

        Index of the exam room that this appointment occurs in. See `/api/offices`

        :return: The exam_room of this Appointment.
        :rtype: int
        """
        return self._exam_room

    @exam_room.setter
    def exam_room(self, exam_room):
        """Sets the exam_room of this Appointment.

        Index of the exam room that this appointment occurs in. See `/api/offices`

        :param exam_room: The exam_room of this Appointment.
        :type exam_room: int
        """
        if exam_room is None:
            raise ValueError("Invalid value for `exam_room`, must not be `None`")

        self._exam_room = exam_room

    @property
    def extended_updated_at(self):
        """Gets the extended_updated_at of this Appointment.

        The most recent update time among appointment itself, its vitals and its custom vitals

        :return: The extended_updated_at of this Appointment.
        :rtype: str
        """
        return self._extended_updated_at

    @extended_updated_at.setter
    def extended_updated_at(self, extended_updated_at):
        """Sets the extended_updated_at of this Appointment.

        The most recent update time among appointment itself, its vitals and its custom vitals

        :param extended_updated_at: The extended_updated_at of this Appointment.
        :type extended_updated_at: str
        """

        self._extended_updated_at = extended_updated_at

    @property
    def first_billed_date(self):
        """Gets the first_billed_date of this Appointment.

        

        :return: The first_billed_date of this Appointment.
        :rtype: str
        """
        return self._first_billed_date

    @first_billed_date.setter
    def first_billed_date(self, first_billed_date):
        """Sets the first_billed_date of this Appointment.

        

        :param first_billed_date: The first_billed_date of this Appointment.
        :type first_billed_date: str
        """

        self._first_billed_date = first_billed_date

    @property
    def icd10_codes(self):
        """Gets the icd10_codes of this Appointment.

        

        :return: The icd10_codes of this Appointment.
        :rtype: List[str]
        """
        return self._icd10_codes

    @icd10_codes.setter
    def icd10_codes(self, icd10_codes):
        """Sets the icd10_codes of this Appointment.

        

        :param icd10_codes: The icd10_codes of this Appointment.
        :type icd10_codes: List[str]
        """

        self._icd10_codes = icd10_codes

    @property
    def icd9_codes(self):
        """Gets the icd9_codes of this Appointment.

        

        :return: The icd9_codes of this Appointment.
        :rtype: List[str]
        """
        return self._icd9_codes

    @icd9_codes.setter
    def icd9_codes(self, icd9_codes):
        """Sets the icd9_codes of this Appointment.

        

        :param icd9_codes: The icd9_codes of this Appointment.
        :type icd9_codes: List[str]
        """

        self._icd9_codes = icd9_codes

    @property
    def id(self):
        """Gets the id of this Appointment.

        Unique identifier. Usually numeric, but not always

        :return: The id of this Appointment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Appointment.

        Unique identifier. Usually numeric, but not always

        :param id: The id of this Appointment.
        :type id: str
        """

        self._id = id

    @property
    def ins1_status(self):
        """Gets the ins1_status of this Appointment.

        Billing status of primary insurer

        :return: The ins1_status of this Appointment.
        :rtype: str
        """
        return self._ins1_status

    @ins1_status.setter
    def ins1_status(self, ins1_status):
        """Sets the ins1_status of this Appointment.

        Billing status of primary insurer

        :param ins1_status: The ins1_status of this Appointment.
        :type ins1_status: str
        """
        allowed_values = ["", "Incomplete Information", "In Process Emdeon", "Rejected Emdeon", "Rejected Jopari", "In Process Payor", "Rejected Waystar Professional", "Rejected Waystar Institutional", "In Process Payer", "Payer Acknowledged", "Rejected Payor", "Rejected Payer", "Paid in Full", "Partially Paid", "Coordination of Benefits", "ERA Received", "ERA Denied", "HCFA Form Faxed"]  # noqa: E501
        if ins1_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ins1_status` ({0}), must be one of {1}"
                .format(ins1_status, allowed_values)
            )

        self._ins1_status = ins1_status

    @property
    def ins2_status(self):
        """Gets the ins2_status of this Appointment.

        Billing status of secondary insurer

        :return: The ins2_status of this Appointment.
        :rtype: str
        """
        return self._ins2_status

    @ins2_status.setter
    def ins2_status(self, ins2_status):
        """Sets the ins2_status of this Appointment.

        Billing status of secondary insurer

        :param ins2_status: The ins2_status of this Appointment.
        :type ins2_status: str
        """
        allowed_values = ["", "Incomplete Information", "In Process Emdeon", "Rejected Emdeon", "Rejected Jopari", "In Process Payor", "Rejected Waystar Professional", "Rejected Waystar Institutional", "In Process Payer", "Payer Acknowledged", "Rejected Payor", "Rejected Payer", "Paid in Full", "Partially Paid", "Coordination of Benefits", "ERA Received", "ERA Denied", "HCFA Form Faxed"]  # noqa: E501
        if ins2_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ins2_status` ({0}), must be one of {1}"
                .format(ins2_status, allowed_values)
            )

        self._ins2_status = ins2_status

    @property
    def is_virtual_base(self):
        """Gets the is_virtual_base of this Appointment.

        

        :return: The is_virtual_base of this Appointment.
        :rtype: bool
        """
        return self._is_virtual_base

    @is_virtual_base.setter
    def is_virtual_base(self, is_virtual_base):
        """Sets the is_virtual_base of this Appointment.

        

        :param is_virtual_base: The is_virtual_base of this Appointment.
        :type is_virtual_base: bool
        """

        self._is_virtual_base = is_virtual_base

    @property
    def is_walk_in(self):
        """Gets the is_walk_in of this Appointment.

        Whether the appointment is a walk-in appointment

        :return: The is_walk_in of this Appointment.
        :rtype: bool
        """
        return self._is_walk_in

    @is_walk_in.setter
    def is_walk_in(self, is_walk_in):
        """Sets the is_walk_in of this Appointment.

        Whether the appointment is a walk-in appointment

        :param is_walk_in: The is_walk_in of this Appointment.
        :type is_walk_in: bool
        """

        self._is_walk_in = is_walk_in

    @property
    def last_billed_date(self):
        """Gets the last_billed_date of this Appointment.

        

        :return: The last_billed_date of this Appointment.
        :rtype: str
        """
        return self._last_billed_date

    @last_billed_date.setter
    def last_billed_date(self, last_billed_date):
        """Sets the last_billed_date of this Appointment.

        

        :param last_billed_date: The last_billed_date of this Appointment.
        :type last_billed_date: str
        """

        self._last_billed_date = last_billed_date

    @property
    def notes(self):
        """Gets the notes of this Appointment.

        

        :return: The notes of this Appointment.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Appointment.

        

        :param notes: The notes of this Appointment.
        :type notes: str
        """

        self._notes = notes

    @property
    def office(self):
        """Gets the office of this Appointment.

        Office ID

        :return: The office of this Appointment.
        :rtype: int
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Appointment.

        Office ID

        :param office: The office of this Appointment.
        :type office: int
        """
        if office is None:
            raise ValueError("Invalid value for `office`, must not be `None`")

        self._office = office

    @property
    def patient(self):
        """Gets the patient of this Appointment.

        ID of this appointment's patient. Breaks have a null patient field.

        :return: The patient of this Appointment.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this Appointment.

        ID of this appointment's patient. Breaks have a null patient field.

        :param patient: The patient of this Appointment.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def primary_insurance_id_number(self):
        """Gets the primary_insurance_id_number of this Appointment.

        

        :return: The primary_insurance_id_number of this Appointment.
        :rtype: str
        """
        return self._primary_insurance_id_number

    @primary_insurance_id_number.setter
    def primary_insurance_id_number(self, primary_insurance_id_number):
        """Sets the primary_insurance_id_number of this Appointment.

        

        :param primary_insurance_id_number: The primary_insurance_id_number of this Appointment.
        :type primary_insurance_id_number: str
        """

        self._primary_insurance_id_number = primary_insurance_id_number

    @property
    def primary_insurer_name(self):
        """Gets the primary_insurer_name of this Appointment.

        

        :return: The primary_insurer_name of this Appointment.
        :rtype: str
        """
        return self._primary_insurer_name

    @primary_insurer_name.setter
    def primary_insurer_name(self, primary_insurer_name):
        """Sets the primary_insurer_name of this Appointment.

        

        :param primary_insurer_name: The primary_insurer_name of this Appointment.
        :type primary_insurer_name: str
        """

        self._primary_insurer_name = primary_insurer_name

    @property
    def primary_insurer_payer_id(self):
        """Gets the primary_insurer_payer_id of this Appointment.

        

        :return: The primary_insurer_payer_id of this Appointment.
        :rtype: str
        """
        return self._primary_insurer_payer_id

    @primary_insurer_payer_id.setter
    def primary_insurer_payer_id(self, primary_insurer_payer_id):
        """Sets the primary_insurer_payer_id of this Appointment.

        

        :param primary_insurer_payer_id: The primary_insurer_payer_id of this Appointment.
        :type primary_insurer_payer_id: str
        """

        self._primary_insurer_payer_id = primary_insurer_payer_id

    @property
    def profile(self):
        """Gets the profile of this Appointment.

        ID of an `/api/appointment_profiles` instance. The profile sets default values for `color`, `duration`, and `reason` on creation, which can be overriden by setting these values explicitly.

        :return: The profile of this Appointment.
        :rtype: int
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Appointment.

        ID of an `/api/appointment_profiles` instance. The profile sets default values for `color`, `duration`, and `reason` on creation, which can be overriden by setting these values explicitly.

        :param profile: The profile of this Appointment.
        :type profile: int
        """

        self._profile = profile

    @property
    def reason(self):
        """Gets the reason of this Appointment.

        Default to `\"\"`

        :return: The reason of this Appointment.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Appointment.

        Default to `\"\"`

        :param reason: The reason of this Appointment.
        :type reason: str
        """

        self._reason = reason

    @property
    def recurring_appointment(self):
        """Gets the recurring_appointment of this Appointment.

        Whether the appointment is a recurring appointment or not

        :return: The recurring_appointment of this Appointment.
        :rtype: bool
        """
        return self._recurring_appointment

    @recurring_appointment.setter
    def recurring_appointment(self, recurring_appointment):
        """Sets the recurring_appointment of this Appointment.

        Whether the appointment is a recurring appointment or not

        :param recurring_appointment: The recurring_appointment of this Appointment.
        :type recurring_appointment: bool
        """

        self._recurring_appointment = recurring_appointment

    @property
    def reminder_profile(self):
        """Gets the reminder_profile of this Appointment.

        Write-only. ID of an `/api/reminder_profiles` instance. Set this to apply a reminder profile to the appointment. Cannot be applied to an appointment with reminders.

        :return: The reminder_profile of this Appointment.
        :rtype: str
        """
        return self._reminder_profile

    @reminder_profile.setter
    def reminder_profile(self, reminder_profile):
        """Sets the reminder_profile of this Appointment.

        Write-only. ID of an `/api/reminder_profiles` instance. Set this to apply a reminder profile to the appointment. Cannot be applied to an appointment with reminders.

        :param reminder_profile: The reminder_profile of this Appointment.
        :type reminder_profile: str
        """

        self._reminder_profile = reminder_profile

    @property
    def reminders(self):
        """Gets the reminders of this Appointment.

        Scheduled reminders of the appointment

        :return: The reminders of this Appointment.
        :rtype: List[SimpleReminder]
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this Appointment.

        Scheduled reminders of the appointment

        :param reminders: The reminders of this Appointment.
        :type reminders: List[SimpleReminder]
        """

        self._reminders = reminders

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Appointment.

        The starting time of the appointment

        :return: The scheduled_time of this Appointment.
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Appointment.

        The starting time of the appointment

        :param scheduled_time: The scheduled_time of this Appointment.
        :type scheduled_time: str
        """
        if scheduled_time is None:
            raise ValueError("Invalid value for `scheduled_time`, must not be `None`")

        self._scheduled_time = scheduled_time

    @property
    def secondary_insurance_id_number(self):
        """Gets the secondary_insurance_id_number of this Appointment.

        

        :return: The secondary_insurance_id_number of this Appointment.
        :rtype: str
        """
        return self._secondary_insurance_id_number

    @secondary_insurance_id_number.setter
    def secondary_insurance_id_number(self, secondary_insurance_id_number):
        """Sets the secondary_insurance_id_number of this Appointment.

        

        :param secondary_insurance_id_number: The secondary_insurance_id_number of this Appointment.
        :type secondary_insurance_id_number: str
        """

        self._secondary_insurance_id_number = secondary_insurance_id_number

    @property
    def secondary_insurer_name(self):
        """Gets the secondary_insurer_name of this Appointment.

        

        :return: The secondary_insurer_name of this Appointment.
        :rtype: str
        """
        return self._secondary_insurer_name

    @secondary_insurer_name.setter
    def secondary_insurer_name(self, secondary_insurer_name):
        """Sets the secondary_insurer_name of this Appointment.

        

        :param secondary_insurer_name: The secondary_insurer_name of this Appointment.
        :type secondary_insurer_name: str
        """

        self._secondary_insurer_name = secondary_insurer_name

    @property
    def secondary_insurer_payer_id(self):
        """Gets the secondary_insurer_payer_id of this Appointment.

        

        :return: The secondary_insurer_payer_id of this Appointment.
        :rtype: str
        """
        return self._secondary_insurer_payer_id

    @secondary_insurer_payer_id.setter
    def secondary_insurer_payer_id(self, secondary_insurer_payer_id):
        """Sets the secondary_insurer_payer_id of this Appointment.

        

        :param secondary_insurer_payer_id: The secondary_insurer_payer_id of this Appointment.
        :type secondary_insurer_payer_id: str
        """

        self._secondary_insurer_payer_id = secondary_insurer_payer_id

    @property
    def status(self):
        """Gets the status of this Appointment.

        One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses.

        :return: The status of this Appointment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Appointment.

        One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses.

        :param status: The status of this Appointment.
        :type status: str
        """
        allowed_values = ["", "Arrived", "Checked In", "Checked In Online", "In Room", "In Session", "Complete", "Confirmed", "Not Confirmed", "Rescheduled", "Cancelled", "No Show"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_transitions(self):
        """Gets the status_transitions of this Appointment.

        

        :return: The status_transitions of this Appointment.
        :rtype: List[AppointmentStatusTransition]
        """
        return self._status_transitions

    @status_transitions.setter
    def status_transitions(self, status_transitions):
        """Sets the status_transitions of this Appointment.

        

        :param status_transitions: The status_transitions of this Appointment.
        :type status_transitions: List[AppointmentStatusTransition]
        """

        self._status_transitions = status_transitions

    @property
    def supervising_provider(self):
        """Gets the supervising_provider of this Appointment.

        Supervising provider of appointment if set.

        :return: The supervising_provider of this Appointment.
        :rtype: str
        """
        return self._supervising_provider

    @supervising_provider.setter
    def supervising_provider(self, supervising_provider):
        """Sets the supervising_provider of this Appointment.

        Supervising provider of appointment if set.

        :param supervising_provider: The supervising_provider of this Appointment.
        :type supervising_provider: str
        """

        self._supervising_provider = supervising_provider

    @property
    def updated_at(self):
        """Gets the updated_at of this Appointment.

        

        :return: The updated_at of this Appointment.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Appointment.

        

        :param updated_at: The updated_at of this Appointment.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def vitals(self):
        """Gets the vitals of this Appointment.


        :return: The vitals of this Appointment.
        :rtype: SystemVitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals):
        """Sets the vitals of this Appointment.


        :param vitals: The vitals of this Appointment.
        :type vitals: SystemVitals
        """

        self._vitals = vitals
