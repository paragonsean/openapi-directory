# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reminder_template import ReminderTemplate
from openapi_server import util


class ReminderProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doctor: int=None, id: int=None, name: str=None, reminders: List[ReminderTemplate]=None):
        """ReminderProfile - a model defined in OpenAPI

        :param doctor: The doctor of this ReminderProfile.
        :param id: The id of this ReminderProfile.
        :param name: The name of this ReminderProfile.
        :param reminders: The reminders of this ReminderProfile.
        """
        self.openapi_types = {
            'doctor': int,
            'id': int,
            'name': str,
            'reminders': List[ReminderTemplate]
        }

        self.attribute_map = {
            'doctor': 'doctor',
            'id': 'id',
            'name': 'name',
            'reminders': 'reminders'
        }

        self._doctor = doctor
        self._id = id
        self._name = name
        self._reminders = reminders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReminderProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReminderProfile of this ReminderProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doctor(self):
        """Gets the doctor of this ReminderProfile.

        Doctor who created the profile. Other doctors in the practice group may have access to their profiles

        :return: The doctor of this ReminderProfile.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this ReminderProfile.

        Doctor who created the profile. Other doctors in the practice group may have access to their profiles

        :param doctor: The doctor of this ReminderProfile.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this ReminderProfile.

        

        :return: The id of this ReminderProfile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReminderProfile.

        

        :param id: The id of this ReminderProfile.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReminderProfile.

        

        :return: The name of this ReminderProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReminderProfile.

        

        :param name: The name of this ReminderProfile.
        :type name: str
        """

        self._name = name

    @property
    def reminders(self):
        """Gets the reminders of this ReminderProfile.

        Reminders set in the profile

        :return: The reminders of this ReminderProfile.
        :rtype: List[ReminderTemplate]
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this ReminderProfile.

        Reminders set in the profile

        :param reminders: The reminders of this ReminderProfile.
        :type reminders: List[ReminderTemplate]
        """
        if reminders is None:
            raise ValueError("Invalid value for `reminders`, must not be `None`")

        self._reminders = reminders
