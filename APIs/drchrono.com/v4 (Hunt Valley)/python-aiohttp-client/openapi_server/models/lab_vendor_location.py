# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabVendorLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility_code: str=None, id: int=None, name: str=None, vendor_name: str=None):
        """LabVendorLocation - a model defined in OpenAPI

        :param facility_code: The facility_code of this LabVendorLocation.
        :param id: The id of this LabVendorLocation.
        :param name: The name of this LabVendorLocation.
        :param vendor_name: The vendor_name of this LabVendorLocation.
        """
        self.openapi_types = {
            'facility_code': str,
            'id': int,
            'name': str,
            'vendor_name': str
        }

        self.attribute_map = {
            'facility_code': 'facility_code',
            'id': 'id',
            'name': 'name',
            'vendor_name': 'vendor_name'
        }

        self._facility_code = facility_code
        self._id = id
        self._name = name
        self._vendor_name = vendor_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabVendorLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabVendorLocation of this LabVendorLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility_code(self):
        """Gets the facility_code of this LabVendorLocation.

        Used for identifying the lab in orders and results

        :return: The facility_code of this LabVendorLocation.
        :rtype: str
        """
        return self._facility_code

    @facility_code.setter
    def facility_code(self, facility_code):
        """Sets the facility_code of this LabVendorLocation.

        Used for identifying the lab in orders and results

        :param facility_code: The facility_code of this LabVendorLocation.
        :type facility_code: str
        """
        if facility_code is None:
            raise ValueError("Invalid value for `facility_code`, must not be `None`")

        self._facility_code = facility_code

    @property
    def id(self):
        """Gets the id of this LabVendorLocation.

        

        :return: The id of this LabVendorLocation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabVendorLocation.

        

        :param id: The id of this LabVendorLocation.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LabVendorLocation.

        

        :return: The name of this LabVendorLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabVendorLocation.

        

        :param name: The name of this LabVendorLocation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def vendor_name(self):
        """Gets the vendor_name of this LabVendorLocation.

        

        :return: The vendor_name of this LabVendorLocation.
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this LabVendorLocation.

        

        :param vendor_name: The vendor_name of this LabVendorLocation.
        :type vendor_name: str
        """

        self._vendor_name = vendor_name
