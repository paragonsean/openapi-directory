# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientIntervention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, code_system: str=None, created_at: str=None, doctor: int=None, effective_time: str=None, id: int=None, name: str=None, patient: int=None, value_code: str=None, value_code_system: str=None, value_name: str=None):
        """PatientIntervention - a model defined in OpenAPI

        :param code: The code of this PatientIntervention.
        :param code_system: The code_system of this PatientIntervention.
        :param created_at: The created_at of this PatientIntervention.
        :param doctor: The doctor of this PatientIntervention.
        :param effective_time: The effective_time of this PatientIntervention.
        :param id: The id of this PatientIntervention.
        :param name: The name of this PatientIntervention.
        :param patient: The patient of this PatientIntervention.
        :param value_code: The value_code of this PatientIntervention.
        :param value_code_system: The value_code_system of this PatientIntervention.
        :param value_name: The value_name of this PatientIntervention.
        """
        self.openapi_types = {
            'code': str,
            'code_system': str,
            'created_at': str,
            'doctor': int,
            'effective_time': str,
            'id': int,
            'name': str,
            'patient': int,
            'value_code': str,
            'value_code_system': str,
            'value_name': str
        }

        self.attribute_map = {
            'code': 'code',
            'code_system': 'code_system',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'effective_time': 'effective_time',
            'id': 'id',
            'name': 'name',
            'patient': 'patient',
            'value_code': 'value_code',
            'value_code_system': 'value_code_system',
            'value_name': 'value_name'
        }

        self._code = code
        self._code_system = code_system
        self._created_at = created_at
        self._doctor = doctor
        self._effective_time = effective_time
        self._id = id
        self._name = name
        self._patient = patient
        self._value_code = value_code
        self._value_code_system = value_code_system
        self._value_name = value_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientIntervention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientIntervention of this PatientIntervention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this PatientIntervention.

        Code from different code system

        :return: The code of this PatientIntervention.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PatientIntervention.

        Code from different code system

        :param code: The code of this PatientIntervention.
        :type code: str
        """

        self._code = code

    @property
    def code_system(self):
        """Gets the code_system of this PatientIntervention.

        Can be `SNOMEDCT`, `HCPCS`, `CPT`, `ICD10CM`

        :return: The code_system of this PatientIntervention.
        :rtype: str
        """
        return self._code_system

    @code_system.setter
    def code_system(self, code_system):
        """Sets the code_system of this PatientIntervention.

        Can be `SNOMEDCT`, `HCPCS`, `CPT`, `ICD10CM`

        :param code_system: The code_system of this PatientIntervention.
        :type code_system: str
        """

        self._code_system = code_system

    @property
    def created_at(self):
        """Gets the created_at of this PatientIntervention.

        

        :return: The created_at of this PatientIntervention.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientIntervention.

        

        :param created_at: The created_at of this PatientIntervention.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this PatientIntervention.

        

        :return: The doctor of this PatientIntervention.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientIntervention.

        

        :param doctor: The doctor of this PatientIntervention.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def effective_time(self):
        """Gets the effective_time of this PatientIntervention.

        

        :return: The effective_time of this PatientIntervention.
        :rtype: str
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this PatientIntervention.

        

        :param effective_time: The effective_time of this PatientIntervention.
        :type effective_time: str
        """

        self._effective_time = effective_time

    @property
    def id(self):
        """Gets the id of this PatientIntervention.

        

        :return: The id of this PatientIntervention.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientIntervention.

        

        :param id: The id of this PatientIntervention.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PatientIntervention.

        Description of intervention

        :return: The name of this PatientIntervention.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientIntervention.

        Description of intervention

        :param name: The name of this PatientIntervention.
        :type name: str
        """

        self._name = name

    @property
    def patient(self):
        """Gets the patient of this PatientIntervention.

        

        :return: The patient of this PatientIntervention.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientIntervention.

        

        :param patient: The patient of this PatientIntervention.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def value_code(self):
        """Gets the value_code of this PatientIntervention.

        Code from different code system represent intervention value

        :return: The value_code of this PatientIntervention.
        :rtype: str
        """
        return self._value_code

    @value_code.setter
    def value_code(self, value_code):
        """Sets the value_code of this PatientIntervention.

        Code from different code system represent intervention value

        :param value_code: The value_code of this PatientIntervention.
        :type value_code: str
        """

        self._value_code = value_code

    @property
    def value_code_system(self):
        """Gets the value_code_system of this PatientIntervention.

        Can be `SNOMEDCT`, `ICD10CM`, `LOINC`

        :return: The value_code_system of this PatientIntervention.
        :rtype: str
        """
        return self._value_code_system

    @value_code_system.setter
    def value_code_system(self, value_code_system):
        """Sets the value_code_system of this PatientIntervention.

        Can be `SNOMEDCT`, `ICD10CM`, `LOINC`

        :param value_code_system: The value_code_system of this PatientIntervention.
        :type value_code_system: str
        """

        self._value_code_system = value_code_system

    @property
    def value_name(self):
        """Gets the value_name of this PatientIntervention.

        Description of value

        :return: The value_name of this PatientIntervention.
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this PatientIntervention.

        Description of value

        :param value_name: The value_name of this PatientIntervention.
        :type value_name: str
        """

        self._value_name = value_name
