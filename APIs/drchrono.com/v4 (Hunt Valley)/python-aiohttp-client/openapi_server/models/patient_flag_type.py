# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientFlagType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, color: str=None, created_at: str=None, doctor: int=None, id: int=None, name: str=None, priority: int=None, updated_at: str=None):
        """PatientFlagType - a model defined in OpenAPI

        :param archived: The archived of this PatientFlagType.
        :param color: The color of this PatientFlagType.
        :param created_at: The created_at of this PatientFlagType.
        :param doctor: The doctor of this PatientFlagType.
        :param id: The id of this PatientFlagType.
        :param name: The name of this PatientFlagType.
        :param priority: The priority of this PatientFlagType.
        :param updated_at: The updated_at of this PatientFlagType.
        """
        self.openapi_types = {
            'archived': bool,
            'color': str,
            'created_at': str,
            'doctor': int,
            'id': int,
            'name': str,
            'priority': int,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'color': 'color',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'name': 'name',
            'priority': 'priority',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._color = color
        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._name = name
        self._priority = priority
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientFlagType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientFlagType of this PatientFlagType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this PatientFlagType.

        Indicates the flag type is soft-deleted and should not be used

        :return: The archived of this PatientFlagType.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this PatientFlagType.

        Indicates the flag type is soft-deleted and should not be used

        :param archived: The archived of this PatientFlagType.
        :type archived: bool
        """

        self._archived = archived

    @property
    def color(self):
        """Gets the color of this PatientFlagType.

        

        :return: The color of this PatientFlagType.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PatientFlagType.

        

        :param color: The color of this PatientFlagType.
        :type color: str
        """

        self._color = color

    @property
    def created_at(self):
        """Gets the created_at of this PatientFlagType.

        

        :return: The created_at of this PatientFlagType.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientFlagType.

        

        :param created_at: The created_at of this PatientFlagType.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this PatientFlagType.

        Doctor who owns the flag type

        :return: The doctor of this PatientFlagType.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientFlagType.

        Doctor who owns the flag type

        :param doctor: The doctor of this PatientFlagType.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this PatientFlagType.

        

        :return: The id of this PatientFlagType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientFlagType.

        

        :param id: The id of this PatientFlagType.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PatientFlagType.

        Name of the patient flag type

        :return: The name of this PatientFlagType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientFlagType.

        Name of the patient flag type

        :param name: The name of this PatientFlagType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this PatientFlagType.

        Priority of the flag type

        :return: The priority of this PatientFlagType.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PatientFlagType.

        Priority of the flag type

        :param priority: The priority of this PatientFlagType.
        :type priority: int
        """

        self._priority = priority

    @property
    def updated_at(self):
        """Gets the updated_at of this PatientFlagType.

        

        :return: The updated_at of this PatientFlagType.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PatientFlagType.

        

        :param updated_at: The updated_at of this PatientFlagType.
        :type updated_at: str
        """

        self._updated_at = updated_at
