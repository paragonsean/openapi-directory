# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImplantableDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, brand_name: str=None, company_name: str=None, created_at: str=None, expiration_date: str=None, gmdn_pt_name: str=None, id: int=None, manufacturing_date: str=None, patient: str=None, procedure: str=None, serial_number: str=None, status: str=None, udi: str=None, updated_at: str=None, version_or_model: str=None):
        """ImplantableDevice - a model defined in OpenAPI

        :param archived: The archived of this ImplantableDevice.
        :param brand_name: The brand_name of this ImplantableDevice.
        :param company_name: The company_name of this ImplantableDevice.
        :param created_at: The created_at of this ImplantableDevice.
        :param expiration_date: The expiration_date of this ImplantableDevice.
        :param gmdn_pt_name: The gmdn_pt_name of this ImplantableDevice.
        :param id: The id of this ImplantableDevice.
        :param manufacturing_date: The manufacturing_date of this ImplantableDevice.
        :param patient: The patient of this ImplantableDevice.
        :param procedure: The procedure of this ImplantableDevice.
        :param serial_number: The serial_number of this ImplantableDevice.
        :param status: The status of this ImplantableDevice.
        :param udi: The udi of this ImplantableDevice.
        :param updated_at: The updated_at of this ImplantableDevice.
        :param version_or_model: The version_or_model of this ImplantableDevice.
        """
        self.openapi_types = {
            'archived': bool,
            'brand_name': str,
            'company_name': str,
            'created_at': str,
            'expiration_date': str,
            'gmdn_pt_name': str,
            'id': int,
            'manufacturing_date': str,
            'patient': str,
            'procedure': str,
            'serial_number': str,
            'status': str,
            'udi': str,
            'updated_at': str,
            'version_or_model': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'brand_name': 'brand_name',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'expiration_date': 'expiration_date',
            'gmdn_pt_name': 'gmdn_pt_name',
            'id': 'id',
            'manufacturing_date': 'manufacturing_date',
            'patient': 'patient',
            'procedure': 'procedure',
            'serial_number': 'serial_number',
            'status': 'status',
            'udi': 'udi',
            'updated_at': 'updated_at',
            'version_or_model': 'version_or_model'
        }

        self._archived = archived
        self._brand_name = brand_name
        self._company_name = company_name
        self._created_at = created_at
        self._expiration_date = expiration_date
        self._gmdn_pt_name = gmdn_pt_name
        self._id = id
        self._manufacturing_date = manufacturing_date
        self._patient = patient
        self._procedure = procedure
        self._serial_number = serial_number
        self._status = status
        self._udi = udi
        self._updated_at = updated_at
        self._version_or_model = version_or_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImplantableDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImplantableDevice of this ImplantableDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ImplantableDevice.

        

        :return: The archived of this ImplantableDevice.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ImplantableDevice.

        

        :param archived: The archived of this ImplantableDevice.
        :type archived: bool
        """

        self._archived = archived

    @property
    def brand_name(self):
        """Gets the brand_name of this ImplantableDevice.

        

        :return: The brand_name of this ImplantableDevice.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this ImplantableDevice.

        

        :param brand_name: The brand_name of this ImplantableDevice.
        :type brand_name: str
        """

        self._brand_name = brand_name

    @property
    def company_name(self):
        """Gets the company_name of this ImplantableDevice.

        

        :return: The company_name of this ImplantableDevice.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ImplantableDevice.

        

        :param company_name: The company_name of this ImplantableDevice.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this ImplantableDevice.

        

        :return: The created_at of this ImplantableDevice.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImplantableDevice.

        

        :param created_at: The created_at of this ImplantableDevice.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ImplantableDevice.

        

        :return: The expiration_date of this ImplantableDevice.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ImplantableDevice.

        

        :param expiration_date: The expiration_date of this ImplantableDevice.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def gmdn_pt_name(self):
        """Gets the gmdn_pt_name of this ImplantableDevice.

        \"GMDN PT Name\" or \"SNOMED CT Description\" mapped to the attribute in  the \"GMDN PT Name\"

        :return: The gmdn_pt_name of this ImplantableDevice.
        :rtype: str
        """
        return self._gmdn_pt_name

    @gmdn_pt_name.setter
    def gmdn_pt_name(self, gmdn_pt_name):
        """Sets the gmdn_pt_name of this ImplantableDevice.

        \"GMDN PT Name\" or \"SNOMED CT Description\" mapped to the attribute in  the \"GMDN PT Name\"

        :param gmdn_pt_name: The gmdn_pt_name of this ImplantableDevice.
        :type gmdn_pt_name: str
        """

        self._gmdn_pt_name = gmdn_pt_name

    @property
    def id(self):
        """Gets the id of this ImplantableDevice.

        

        :return: The id of this ImplantableDevice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImplantableDevice.

        

        :param id: The id of this ImplantableDevice.
        :type id: int
        """

        self._id = id

    @property
    def manufacturing_date(self):
        """Gets the manufacturing_date of this ImplantableDevice.

        

        :return: The manufacturing_date of this ImplantableDevice.
        :rtype: str
        """
        return self._manufacturing_date

    @manufacturing_date.setter
    def manufacturing_date(self, manufacturing_date):
        """Sets the manufacturing_date of this ImplantableDevice.

        

        :param manufacturing_date: The manufacturing_date of this ImplantableDevice.
        :type manufacturing_date: str
        """

        self._manufacturing_date = manufacturing_date

    @property
    def patient(self):
        """Gets the patient of this ImplantableDevice.

        

        :return: The patient of this ImplantableDevice.
        :rtype: str
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this ImplantableDevice.

        

        :param patient: The patient of this ImplantableDevice.
        :type patient: str
        """

        self._patient = patient

    @property
    def procedure(self):
        """Gets the procedure of this ImplantableDevice.

        ID of `/api/procedures` object

        :return: The procedure of this ImplantableDevice.
        :rtype: str
        """
        return self._procedure

    @procedure.setter
    def procedure(self, procedure):
        """Sets the procedure of this ImplantableDevice.

        ID of `/api/procedures` object

        :param procedure: The procedure of this ImplantableDevice.
        :type procedure: str
        """

        self._procedure = procedure

    @property
    def serial_number(self):
        """Gets the serial_number of this ImplantableDevice.

        

        :return: The serial_number of this ImplantableDevice.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImplantableDevice.

        

        :param serial_number: The serial_number of this ImplantableDevice.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def status(self):
        """Gets the status of this ImplantableDevice.

        One of `'active'` or `'inactive'`

        :return: The status of this ImplantableDevice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImplantableDevice.

        One of `'active'` or `'inactive'`

        :param status: The status of this ImplantableDevice.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def udi(self):
        """Gets the udi of this ImplantableDevice.

        

        :return: The udi of this ImplantableDevice.
        :rtype: str
        """
        return self._udi

    @udi.setter
    def udi(self, udi):
        """Sets the udi of this ImplantableDevice.

        

        :param udi: The udi of this ImplantableDevice.
        :type udi: str
        """

        self._udi = udi

    @property
    def updated_at(self):
        """Gets the updated_at of this ImplantableDevice.

        

        :return: The updated_at of this ImplantableDevice.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ImplantableDevice.

        

        :param updated_at: The updated_at of this ImplantableDevice.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version_or_model(self):
        """Gets the version_or_model of this ImplantableDevice.

        

        :return: The version_or_model of this ImplantableDevice.
        :rtype: str
        """
        return self._version_or_model

    @version_or_model.setter
    def version_or_model(self, version_or_model):
        """Sets the version_or_model of this ImplantableDevice.

        

        :param version_or_model: The version_or_model of this ImplantableDevice.
        :type version_or_model: str
        """

        self._version_or_model = version_or_model
