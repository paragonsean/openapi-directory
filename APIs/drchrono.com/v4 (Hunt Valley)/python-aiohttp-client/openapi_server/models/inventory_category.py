# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, category_type: str=None, created_at: str=None, doctor: str=None, id: int=None, name: str=None, updated_at: str=None):
        """InventoryCategory - a model defined in OpenAPI

        :param archived: The archived of this InventoryCategory.
        :param category_type: The category_type of this InventoryCategory.
        :param created_at: The created_at of this InventoryCategory.
        :param doctor: The doctor of this InventoryCategory.
        :param id: The id of this InventoryCategory.
        :param name: The name of this InventoryCategory.
        :param updated_at: The updated_at of this InventoryCategory.
        """
        self.openapi_types = {
            'archived': bool,
            'category_type': str,
            'created_at': str,
            'doctor': str,
            'id': int,
            'name': str,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'category_type': 'category_type',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'name': 'name',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._category_type = category_type
        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._name = name
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryCategory of this InventoryCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this InventoryCategory.

        If the category is archived or not

        :return: The archived of this InventoryCategory.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this InventoryCategory.

        If the category is archived or not

        :param archived: The archived of this InventoryCategory.
        :type archived: bool
        """

        self._archived = archived

    @property
    def category_type(self):
        """Gets the category_type of this InventoryCategory.

        Can be one of `\"vaccine\"`, `\"product\"` or `\"service\"`

        :return: The category_type of this InventoryCategory.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this InventoryCategory.

        Can be one of `\"vaccine\"`, `\"product\"` or `\"service\"`

        :param category_type: The category_type of this InventoryCategory.
        :type category_type: str
        """
        allowed_values = ["vaccine", "product", "service"]  # noqa: E501
        if category_type not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def created_at(self):
        """Gets the created_at of this InventoryCategory.

        

        :return: The created_at of this InventoryCategory.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InventoryCategory.

        

        :param created_at: The created_at of this InventoryCategory.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this InventoryCategory.

        

        :return: The doctor of this InventoryCategory.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this InventoryCategory.

        

        :param doctor: The doctor of this InventoryCategory.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this InventoryCategory.

        

        :return: The id of this InventoryCategory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryCategory.

        

        :param id: The id of this InventoryCategory.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InventoryCategory.

        Name of the inventory category

        :return: The name of this InventoryCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InventoryCategory.

        Name of the inventory category

        :param name: The name of this InventoryCategory.
        :type name: str
        """

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this InventoryCategory.

        

        :return: The updated_at of this InventoryCategory.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InventoryCategory.

        

        :param updated_at: The updated_at of this InventoryCategory.
        :type updated_at: str
        """

        self._updated_at = updated_at
