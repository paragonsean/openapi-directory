# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abnormal_status: str=None, comments: str=None, document: int=None, group_code: str=None, id: int=None, is_abnormal: str=None, lab_order: str=None, lab_test: int=None, normal_range: str=None, observation_code: str=None, observation_description: str=None, specimen_received: str=None, status: str=None, test_performed: str=None, unit: str=None, value: str=None, value_is_numeric: bool=None):
        """LabResult - a model defined in OpenAPI

        :param abnormal_status: The abnormal_status of this LabResult.
        :param comments: The comments of this LabResult.
        :param document: The document of this LabResult.
        :param group_code: The group_code of this LabResult.
        :param id: The id of this LabResult.
        :param is_abnormal: The is_abnormal of this LabResult.
        :param lab_order: The lab_order of this LabResult.
        :param lab_test: The lab_test of this LabResult.
        :param normal_range: The normal_range of this LabResult.
        :param observation_code: The observation_code of this LabResult.
        :param observation_description: The observation_description of this LabResult.
        :param specimen_received: The specimen_received of this LabResult.
        :param status: The status of this LabResult.
        :param test_performed: The test_performed of this LabResult.
        :param unit: The unit of this LabResult.
        :param value: The value of this LabResult.
        :param value_is_numeric: The value_is_numeric of this LabResult.
        """
        self.openapi_types = {
            'abnormal_status': str,
            'comments': str,
            'document': int,
            'group_code': str,
            'id': int,
            'is_abnormal': str,
            'lab_order': str,
            'lab_test': int,
            'normal_range': str,
            'observation_code': str,
            'observation_description': str,
            'specimen_received': str,
            'status': str,
            'test_performed': str,
            'unit': str,
            'value': str,
            'value_is_numeric': bool
        }

        self.attribute_map = {
            'abnormal_status': 'abnormal_status',
            'comments': 'comments',
            'document': 'document',
            'group_code': 'group_code',
            'id': 'id',
            'is_abnormal': 'is_abnormal',
            'lab_order': 'lab_order',
            'lab_test': 'lab_test',
            'normal_range': 'normal_range',
            'observation_code': 'observation_code',
            'observation_description': 'observation_description',
            'specimen_received': 'specimen_received',
            'status': 'status',
            'test_performed': 'test_performed',
            'unit': 'unit',
            'value': 'value',
            'value_is_numeric': 'value_is_numeric'
        }

        self._abnormal_status = abnormal_status
        self._comments = comments
        self._document = document
        self._group_code = group_code
        self._id = id
        self._is_abnormal = is_abnormal
        self._lab_order = lab_order
        self._lab_test = lab_test
        self._normal_range = normal_range
        self._observation_code = observation_code
        self._observation_description = observation_description
        self._specimen_received = specimen_received
        self._status = status
        self._test_performed = test_performed
        self._unit = unit
        self._value = value
        self._value_is_numeric = value_is_numeric

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabResult of this LabResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abnormal_status(self):
        """Gets the abnormal_status of this LabResult.

         Value | Notes ----- | ----- `'L'` | `'low'` `'LL'` | `'alert low'` `'H'` | `'high'` `'HH'` | `'alert high'` `'<'` | `'panic low'` `'>'` | `'panic high'` `'A'` | `'abnormal'` `'AA'` | `'very abnormal'` `'S'` | `'susceptible'` `'R'` | `'resistant'` `'I'` | `'intermediate'` `'NEG'` | `'negative'` `'POS'` | `'positive'` `'N'` | `'normal'` `''` | `'no comment'` 

        :return: The abnormal_status of this LabResult.
        :rtype: str
        """
        return self._abnormal_status

    @abnormal_status.setter
    def abnormal_status(self, abnormal_status):
        """Sets the abnormal_status of this LabResult.

         Value | Notes ----- | ----- `'L'` | `'low'` `'LL'` | `'alert low'` `'H'` | `'high'` `'HH'` | `'alert high'` `'<'` | `'panic low'` `'>'` | `'panic high'` `'A'` | `'abnormal'` `'AA'` | `'very abnormal'` `'S'` | `'susceptible'` `'R'` | `'resistant'` `'I'` | `'intermediate'` `'NEG'` | `'negative'` `'POS'` | `'positive'` `'N'` | `'normal'` `''` | `'no comment'` 

        :param abnormal_status: The abnormal_status of this LabResult.
        :type abnormal_status: str
        """
        allowed_values = ["L", "LL", "H", "HH", "<", ">", "A", "AA", "S", "R", "I", "NEG", "POS", "N", ""]  # noqa: E501
        if abnormal_status not in allowed_values:
            raise ValueError(
                "Invalid value for `abnormal_status` ({0}), must be one of {1}"
                .format(abnormal_status, allowed_values)
            )

        self._abnormal_status = abnormal_status

    @property
    def comments(self):
        """Gets the comments of this LabResult.

        

        :return: The comments of this LabResult.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this LabResult.

        

        :param comments: The comments of this LabResult.
        :type comments: str
        """

        self._comments = comments

    @property
    def document(self):
        """Gets the document of this LabResult.

        ID of `/lab_documents` object for the result

        :return: The document of this LabResult.
        :rtype: int
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this LabResult.

        ID of `/lab_documents` object for the result

        :param document: The document of this LabResult.
        :type document: int
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def group_code(self):
        """Gets the group_code of this LabResult.

        This is the code used for grouping result data.

        :return: The group_code of this LabResult.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this LabResult.

        This is the code used for grouping result data.

        :param group_code: The group_code of this LabResult.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def id(self):
        """Gets the id of this LabResult.

        

        :return: The id of this LabResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabResult.

        

        :param id: The id of this LabResult.
        :type id: int
        """

        self._id = id

    @property
    def is_abnormal(self):
        """Gets the is_abnormal of this LabResult.

        If true, the result will be flagged for the doctor's attention

        :return: The is_abnormal of this LabResult.
        :rtype: str
        """
        return self._is_abnormal

    @is_abnormal.setter
    def is_abnormal(self, is_abnormal):
        """Sets the is_abnormal of this LabResult.

        If true, the result will be flagged for the doctor's attention

        :param is_abnormal: The is_abnormal of this LabResult.
        :type is_abnormal: str
        """

        self._is_abnormal = is_abnormal

    @property
    def lab_order(self):
        """Gets the lab_order of this LabResult.

        ID of `/lab_orders` object the result belongs to

        :return: The lab_order of this LabResult.
        :rtype: str
        """
        return self._lab_order

    @lab_order.setter
    def lab_order(self, lab_order):
        """Sets the lab_order of this LabResult.

        ID of `/lab_orders` object the result belongs to

        :param lab_order: The lab_order of this LabResult.
        :type lab_order: str
        """

        self._lab_order = lab_order

    @property
    def lab_test(self):
        """Gets the lab_test of this LabResult.

        ID of `/lab_tests` object for the result

        :return: The lab_test of this LabResult.
        :rtype: int
        """
        return self._lab_test

    @lab_test.setter
    def lab_test(self, lab_test):
        """Sets the lab_test of this LabResult.

        ID of `/lab_tests` object for the result

        :param lab_test: The lab_test of this LabResult.
        :type lab_test: int
        """
        if lab_test is None:
            raise ValueError("Invalid value for `lab_test`, must not be `None`")

        self._lab_test = lab_test

    @property
    def normal_range(self):
        """Gets the normal_range of this LabResult.

        When ``value_is_numeric`` is True, this parameter must be a string of the form ``\"<lower> <upper>\", where both lower and upper are numerical``

        :return: The normal_range of this LabResult.
        :rtype: str
        """
        return self._normal_range

    @normal_range.setter
    def normal_range(self, normal_range):
        """Sets the normal_range of this LabResult.

        When ``value_is_numeric`` is True, this parameter must be a string of the form ``\"<lower> <upper>\", where both lower and upper are numerical``

        :param normal_range: The normal_range of this LabResult.
        :type normal_range: str
        """

        self._normal_range = normal_range

    @property
    def observation_code(self):
        """Gets the observation_code of this LabResult.

        

        :return: The observation_code of this LabResult.
        :rtype: str
        """
        return self._observation_code

    @observation_code.setter
    def observation_code(self, observation_code):
        """Sets the observation_code of this LabResult.

        

        :param observation_code: The observation_code of this LabResult.
        :type observation_code: str
        """

        self._observation_code = observation_code

    @property
    def observation_description(self):
        """Gets the observation_description of this LabResult.

        For example, ``\"Blood Urea Nitrogen (BUN)\"``

        :return: The observation_description of this LabResult.
        :rtype: str
        """
        return self._observation_description

    @observation_description.setter
    def observation_description(self, observation_description):
        """Sets the observation_description of this LabResult.

        For example, ``\"Blood Urea Nitrogen (BUN)\"``

        :param observation_description: The observation_description of this LabResult.
        :type observation_description: str
        """

        self._observation_description = observation_description

    @property
    def specimen_received(self):
        """Gets the specimen_received of this LabResult.

        

        :return: The specimen_received of this LabResult.
        :rtype: str
        """
        return self._specimen_received

    @specimen_received.setter
    def specimen_received(self, specimen_received):
        """Sets the specimen_received of this LabResult.

        

        :param specimen_received: The specimen_received of this LabResult.
        :type specimen_received: str
        """

        self._specimen_received = specimen_received

    @property
    def status(self):
        """Gets the status of this LabResult.

         Value | Notes ----- | ----- `'P'` | `'preliminary'` `'I'` | `'pending'` `'C'` | `'correction'` `'F'` | `'final'` `'X'` | `'canceled'` 

        :return: The status of this LabResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabResult.

         Value | Notes ----- | ----- `'P'` | `'preliminary'` `'I'` | `'pending'` `'C'` | `'correction'` `'F'` | `'final'` `'X'` | `'canceled'` 

        :param status: The status of this LabResult.
        :type status: str
        """
        allowed_values = ["P", "I", "C", "F", "X"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def test_performed(self):
        """Gets the test_performed of this LabResult.

        

        :return: The test_performed of this LabResult.
        :rtype: str
        """
        return self._test_performed

    @test_performed.setter
    def test_performed(self, test_performed):
        """Sets the test_performed of this LabResult.

        

        :param test_performed: The test_performed of this LabResult.
        :type test_performed: str
        """
        if test_performed is None:
            raise ValueError("Invalid value for `test_performed`, must not be `None`")

        self._test_performed = test_performed

    @property
    def unit(self):
        """Gets the unit of this LabResult.

        Unit used for the value

        :return: The unit of this LabResult.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LabResult.

        Unit used for the value

        :param unit: The unit of this LabResult.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this LabResult.

        

        :return: The value of this LabResult.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LabResult.

        

        :param value: The value of this LabResult.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def value_is_numeric(self):
        """Gets the value_is_numeric of this LabResult.

        Default to `False`

        :return: The value_is_numeric of this LabResult.
        :rtype: bool
        """
        return self._value_is_numeric

    @value_is_numeric.setter
    def value_is_numeric(self, value_is_numeric):
        """Sets the value_is_numeric of this LabResult.

        Default to `False`

        :param value_is_numeric: The value_is_numeric of this LabResult.
        :type value_is_numeric: bool
        """

        self._value_is_numeric = value_is_numeric
