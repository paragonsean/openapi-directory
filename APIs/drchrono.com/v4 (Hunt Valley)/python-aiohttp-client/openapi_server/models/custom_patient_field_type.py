# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomPatientFieldType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: str=None, archived: bool=None, description: str=None, doctor: int=None, id: int=None, name: str=None, template_name: str=None):
        """CustomPatientFieldType - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this CustomPatientFieldType.
        :param archived: The archived of this CustomPatientFieldType.
        :param description: The description of this CustomPatientFieldType.
        :param doctor: The doctor of this CustomPatientFieldType.
        :param id: The id of this CustomPatientFieldType.
        :param name: The name of this CustomPatientFieldType.
        :param template_name: The template_name of this CustomPatientFieldType.
        """
        self.openapi_types = {
            'allowed_values': str,
            'archived': bool,
            'description': str,
            'doctor': int,
            'id': int,
            'name': str,
            'template_name': str
        }

        self.attribute_map = {
            'allowed_values': 'allowed_values',
            'archived': 'archived',
            'description': 'description',
            'doctor': 'doctor',
            'id': 'id',
            'name': 'name',
            'template_name': 'template_name'
        }

        self._allowed_values = allowed_values
        self._archived = archived
        self._description = description
        self._doctor = doctor
        self._id = id
        self._name = name
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomPatientFieldType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomPatientFieldType of this CustomPatientFieldType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this CustomPatientFieldType.

        Allowed values if needed. Values must be separated by comma `,`

        :return: The allowed_values of this CustomPatientFieldType.
        :rtype: str
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this CustomPatientFieldType.

        Allowed values if needed. Values must be separated by comma `,`

        :param allowed_values: The allowed_values of this CustomPatientFieldType.
        :type allowed_values: str
        """

        self._allowed_values = allowed_values

    @property
    def archived(self):
        """Gets the archived of this CustomPatientFieldType.

        Indicates that the object has been soft-deleted, and should not be used

        :return: The archived of this CustomPatientFieldType.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this CustomPatientFieldType.

        Indicates that the object has been soft-deleted, and should not be used

        :param archived: The archived of this CustomPatientFieldType.
        :type archived: bool
        """

        self._archived = archived

    @property
    def description(self):
        """Gets the description of this CustomPatientFieldType.

        

        :return: The description of this CustomPatientFieldType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomPatientFieldType.

        

        :param description: The description of this CustomPatientFieldType.
        :type description: str
        """

        self._description = description

    @property
    def doctor(self):
        """Gets the doctor of this CustomPatientFieldType.

        

        :return: The doctor of this CustomPatientFieldType.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this CustomPatientFieldType.

        

        :param doctor: The doctor of this CustomPatientFieldType.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this CustomPatientFieldType.

        

        :return: The id of this CustomPatientFieldType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomPatientFieldType.

        

        :param id: The id of this CustomPatientFieldType.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomPatientFieldType.

        

        :return: The name of this CustomPatientFieldType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomPatientFieldType.

        

        :param name: The name of this CustomPatientFieldType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def template_name(self):
        """Gets the template_name of this CustomPatientFieldType.

        Custom Patient Demographics with `template_name` set can be inserted into clinical notes via Form Builder. Only letters (a-z or A-Z), numbers (0-9) or underscore(_) are allowed for template name.

        :return: The template_name of this CustomPatientFieldType.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CustomPatientFieldType.

        Custom Patient Demographics with `template_name` set can be inserted into clinical notes via Form Builder. Only letters (a-z or A-Z), numbers (0-9) or underscore(_) are allowed for template name.

        :param template_name: The template_name of this CustomPatientFieldType.
        :type template_name: str
        """

        self._template_name = template_name
