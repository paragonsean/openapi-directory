# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NdcCodeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ndc_package_code: str=None, quantity: str=None, units: str=None):
        """NdcCodeInner - a model defined in OpenAPI

        :param ndc_package_code: The ndc_package_code of this NdcCodeInner.
        :param quantity: The quantity of this NdcCodeInner.
        :param units: The units of this NdcCodeInner.
        """
        self.openapi_types = {
            'ndc_package_code': str,
            'quantity': str,
            'units': str
        }

        self.attribute_map = {
            'ndc_package_code': 'ndc_package_code',
            'quantity': 'quantity',
            'units': 'units'
        }

        self._ndc_package_code = ndc_package_code
        self._quantity = quantity
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NdcCodeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ndc_code_inner of this NdcCodeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ndc_package_code(self):
        """Gets the ndc_package_code of this NdcCodeInner.

        

        :return: The ndc_package_code of this NdcCodeInner.
        :rtype: str
        """
        return self._ndc_package_code

    @ndc_package_code.setter
    def ndc_package_code(self, ndc_package_code):
        """Sets the ndc_package_code of this NdcCodeInner.

        

        :param ndc_package_code: The ndc_package_code of this NdcCodeInner.
        :type ndc_package_code: str
        """

        self._ndc_package_code = ndc_package_code

    @property
    def quantity(self):
        """Gets the quantity of this NdcCodeInner.

        

        :return: The quantity of this NdcCodeInner.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this NdcCodeInner.

        

        :param quantity: The quantity of this NdcCodeInner.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def units(self):
        """Gets the units of this NdcCodeInner.

        Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)

        :return: The units of this NdcCodeInner.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this NdcCodeInner.

        Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)

        :param units: The units of this NdcCodeInner.
        :type units: str
        """
        allowed_values = ["F2", "GR", "ME", "ML", "UN"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"
                .format(units, allowed_values)
            )

        self._units = units
