# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, collection_date: str=None, description: str=None, id: int=None, internal_notes: str=None, lab_order: int=None, name: str=None, report_notes: str=None, specimen_condition: str=None, specimen_source: str=None, specimen_total_volume: float=None, status: str=None):
        """LabTest - a model defined in OpenAPI

        :param code: The code of this LabTest.
        :param collection_date: The collection_date of this LabTest.
        :param description: The description of this LabTest.
        :param id: The id of this LabTest.
        :param internal_notes: The internal_notes of this LabTest.
        :param lab_order: The lab_order of this LabTest.
        :param name: The name of this LabTest.
        :param report_notes: The report_notes of this LabTest.
        :param specimen_condition: The specimen_condition of this LabTest.
        :param specimen_source: The specimen_source of this LabTest.
        :param specimen_total_volume: The specimen_total_volume of this LabTest.
        :param status: The status of this LabTest.
        """
        self.openapi_types = {
            'code': str,
            'collection_date': str,
            'description': str,
            'id': int,
            'internal_notes': str,
            'lab_order': int,
            'name': str,
            'report_notes': str,
            'specimen_condition': str,
            'specimen_source': str,
            'specimen_total_volume': float,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'collection_date': 'collection_date',
            'description': 'description',
            'id': 'id',
            'internal_notes': 'internal_notes',
            'lab_order': 'lab_order',
            'name': 'name',
            'report_notes': 'report_notes',
            'specimen_condition': 'specimen_condition',
            'specimen_source': 'specimen_source',
            'specimen_total_volume': 'specimen_total_volume',
            'status': 'status'
        }

        self._code = code
        self._collection_date = collection_date
        self._description = description
        self._id = id
        self._internal_notes = internal_notes
        self._lab_order = lab_order
        self._name = name
        self._report_notes = report_notes
        self._specimen_condition = specimen_condition
        self._specimen_source = specimen_source
        self._specimen_total_volume = specimen_total_volume
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabTest of this LabTest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this LabTest.

        

        :return: The code of this LabTest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LabTest.

        

        :param code: The code of this LabTest.
        :type code: str
        """

        self._code = code

    @property
    def collection_date(self):
        """Gets the collection_date of this LabTest.

        The date the specimen were collected

        :return: The collection_date of this LabTest.
        :rtype: str
        """
        return self._collection_date

    @collection_date.setter
    def collection_date(self, collection_date):
        """Sets the collection_date of this LabTest.

        The date the specimen were collected

        :param collection_date: The collection_date of this LabTest.
        :type collection_date: str
        """

        self._collection_date = collection_date

    @property
    def description(self):
        """Gets the description of this LabTest.

        Short description of the ICD-10 code

        :return: The description of this LabTest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabTest.

        Short description of the ICD-10 code

        :param description: The description of this LabTest.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this LabTest.

        

        :return: The id of this LabTest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabTest.

        

        :param id: The id of this LabTest.
        :type id: int
        """

        self._id = id

    @property
    def internal_notes(self):
        """Gets the internal_notes of this LabTest.

        Notes which are meant for, and read by, the labs

        :return: The internal_notes of this LabTest.
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this LabTest.

        Notes which are meant for, and read by, the labs

        :param internal_notes: The internal_notes of this LabTest.
        :type internal_notes: str
        """

        self._internal_notes = internal_notes

    @property
    def lab_order(self):
        """Gets the lab_order of this LabTest.

        ID of associated lab order

        :return: The lab_order of this LabTest.
        :rtype: int
        """
        return self._lab_order

    @lab_order.setter
    def lab_order(self, lab_order):
        """Sets the lab_order of this LabTest.

        ID of associated lab order

        :param lab_order: The lab_order of this LabTest.
        :type lab_order: int
        """
        if lab_order is None:
            raise ValueError("Invalid value for `lab_order`, must not be `None`")

        self._lab_order = lab_order

    @property
    def name(self):
        """Gets the name of this LabTest.

        Name for the test

        :return: The name of this LabTest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabTest.

        Name for the test

        :param name: The name of this LabTest.
        :type name: str
        """

        self._name = name

    @property
    def report_notes(self):
        """Gets the report_notes of this LabTest.

        Notes which are not meant for labs, but are copied on the results.

        :return: The report_notes of this LabTest.
        :rtype: str
        """
        return self._report_notes

    @report_notes.setter
    def report_notes(self, report_notes):
        """Sets the report_notes of this LabTest.

        Notes which are not meant for labs, but are copied on the results.

        :param report_notes: The report_notes of this LabTest.
        :type report_notes: str
        """

        self._report_notes = report_notes

    @property
    def specimen_condition(self):
        """Gets the specimen_condition of this LabTest.

        

        :return: The specimen_condition of this LabTest.
        :rtype: str
        """
        return self._specimen_condition

    @specimen_condition.setter
    def specimen_condition(self, specimen_condition):
        """Sets the specimen_condition of this LabTest.

        

        :param specimen_condition: The specimen_condition of this LabTest.
        :type specimen_condition: str
        """

        self._specimen_condition = specimen_condition

    @property
    def specimen_source(self):
        """Gets the specimen_source of this LabTest.

        

        :return: The specimen_source of this LabTest.
        :rtype: str
        """
        return self._specimen_source

    @specimen_source.setter
    def specimen_source(self, specimen_source):
        """Sets the specimen_source of this LabTest.

        

        :param specimen_source: The specimen_source of this LabTest.
        :type specimen_source: str
        """

        self._specimen_source = specimen_source

    @property
    def specimen_total_volume(self):
        """Gets the specimen_total_volume of this LabTest.

        

        :return: The specimen_total_volume of this LabTest.
        :rtype: float
        """
        return self._specimen_total_volume

    @specimen_total_volume.setter
    def specimen_total_volume(self, specimen_total_volume):
        """Sets the specimen_total_volume of this LabTest.

        

        :param specimen_total_volume: The specimen_total_volume of this LabTest.
        :type specimen_total_volume: float
        """

        self._specimen_total_volume = specimen_total_volume

    @property
    def status(self):
        """Gets the status of this LabTest.

        One of `\"preliminary\"`, `\"pending\"`, `\"correction\"`, `\"final\"` or `\"canceled\"`. Defaults to `\"preliminary\"`

        :return: The status of this LabTest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabTest.

        One of `\"preliminary\"`, `\"pending\"`, `\"correction\"`, `\"final\"` or `\"canceled\"`. Defaults to `\"preliminary\"`

        :param status: The status of this LabTest.
        :type status: str
        """
        allowed_values = ["P", "I", "C", "F", "X"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
