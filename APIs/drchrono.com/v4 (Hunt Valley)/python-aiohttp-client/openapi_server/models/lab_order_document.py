# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabOrderDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, id: int=None, lab_order: int=None, timestamp: str=None, type: str=None):
        """LabOrderDocument - a model defined in OpenAPI

        :param document: The document of this LabOrderDocument.
        :param id: The id of this LabOrderDocument.
        :param lab_order: The lab_order of this LabOrderDocument.
        :param timestamp: The timestamp of this LabOrderDocument.
        :param type: The type of this LabOrderDocument.
        """
        self.openapi_types = {
            'document': str,
            'id': int,
            'lab_order': int,
            'timestamp': str,
            'type': str
        }

        self.attribute_map = {
            'document': 'document',
            'id': 'id',
            'lab_order': 'lab_order',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._document = document
        self._id = id
        self._lab_order = lab_order
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabOrderDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabOrderDocument of this LabOrderDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this LabOrderDocument.

        

        :return: The document of this LabOrderDocument.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this LabOrderDocument.

        

        :param document: The document of this LabOrderDocument.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def id(self):
        """Gets the id of this LabOrderDocument.

        

        :return: The id of this LabOrderDocument.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabOrderDocument.

        

        :param id: The id of this LabOrderDocument.
        :type id: int
        """

        self._id = id

    @property
    def lab_order(self):
        """Gets the lab_order of this LabOrderDocument.

        ID of the order this document is associated with

        :return: The lab_order of this LabOrderDocument.
        :rtype: int
        """
        return self._lab_order

    @lab_order.setter
    def lab_order(self, lab_order):
        """Sets the lab_order of this LabOrderDocument.

        ID of the order this document is associated with

        :param lab_order: The lab_order of this LabOrderDocument.
        :type lab_order: int
        """
        if lab_order is None:
            raise ValueError("Invalid value for `lab_order`, must not be `None`")

        self._lab_order = lab_order

    @property
    def timestamp(self):
        """Gets the timestamp of this LabOrderDocument.

        Time at which the document was uploaded

        :return: The timestamp of this LabOrderDocument.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LabOrderDocument.

        Time at which the document was uploaded

        :param timestamp: The timestamp of this LabOrderDocument.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this LabOrderDocument.

         Value | Notes ----- | ----- `\"REQ\"` | requisition form                                              | `\"ABN\"` | `ABN (Advance Beneficiary Notice)`                            | `\"R-A\"` | requisition form and :abbr:`ABN (Advance Beneficiary Notice)` | `\"RES\"` | lab results                                                   | 

        :return: The type of this LabOrderDocument.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LabOrderDocument.

         Value | Notes ----- | ----- `\"REQ\"` | requisition form                                              | `\"ABN\"` | `ABN (Advance Beneficiary Notice)`                            | `\"R-A\"` | requisition form and :abbr:`ABN (Advance Beneficiary Notice)` | `\"RES\"` | lab results                                                   | 

        :param type: The type of this LabOrderDocument.
        :type type: str
        """
        allowed_values = ["REQ", "ABN", "R-A", "RES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
