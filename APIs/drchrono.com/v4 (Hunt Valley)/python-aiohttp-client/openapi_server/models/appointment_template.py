# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_slot import OpenSlot
from openapi_server import util


class AppointmentTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, date_end: str=None, date_start: str=None, duration: int=None, exam_room: int=None, id: int=None, office: int=None, open_slots: List[OpenSlot]=None, profile: int=None, scheduled_time: str=None, week_days: List[int]=None):
        """AppointmentTemplate - a model defined in OpenAPI

        :param archived: The archived of this AppointmentTemplate.
        :param date_end: The date_end of this AppointmentTemplate.
        :param date_start: The date_start of this AppointmentTemplate.
        :param duration: The duration of this AppointmentTemplate.
        :param exam_room: The exam_room of this AppointmentTemplate.
        :param id: The id of this AppointmentTemplate.
        :param office: The office of this AppointmentTemplate.
        :param open_slots: The open_slots of this AppointmentTemplate.
        :param profile: The profile of this AppointmentTemplate.
        :param scheduled_time: The scheduled_time of this AppointmentTemplate.
        :param week_days: The week_days of this AppointmentTemplate.
        """
        self.openapi_types = {
            'archived': bool,
            'date_end': str,
            'date_start': str,
            'duration': int,
            'exam_room': int,
            'id': int,
            'office': int,
            'open_slots': List[OpenSlot],
            'profile': int,
            'scheduled_time': str,
            'week_days': List[int]
        }

        self.attribute_map = {
            'archived': 'archived',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'duration': 'duration',
            'exam_room': 'exam_room',
            'id': 'id',
            'office': 'office',
            'open_slots': 'open_slots',
            'profile': 'profile',
            'scheduled_time': 'scheduled_time',
            'week_days': 'week_days'
        }

        self._archived = archived
        self._date_end = date_end
        self._date_start = date_start
        self._duration = duration
        self._exam_room = exam_room
        self._id = id
        self._office = office
        self._open_slots = open_slots
        self._profile = profile
        self._scheduled_time = scheduled_time
        self._week_days = week_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppointmentTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppointmentTemplate of this AppointmentTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this AppointmentTemplate.

        Indicats that the object has been soft-deleted and should not be used

        :return: The archived of this AppointmentTemplate.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this AppointmentTemplate.

        Indicats that the object has been soft-deleted and should not be used

        :param archived: The archived of this AppointmentTemplate.
        :type archived: bool
        """

        self._archived = archived

    @property
    def date_end(self):
        """Gets the date_end of this AppointmentTemplate.

        

        :return: The date_end of this AppointmentTemplate.
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this AppointmentTemplate.

        

        :param date_end: The date_end of this AppointmentTemplate.
        :type date_end: str
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this AppointmentTemplate.

        

        :return: The date_start of this AppointmentTemplate.
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this AppointmentTemplate.

        

        :param date_start: The date_start of this AppointmentTemplate.
        :type date_start: str
        """

        self._date_start = date_start

    @property
    def duration(self):
        """Gets the duration of this AppointmentTemplate.

        Length of an appointment in minutes

        :return: The duration of this AppointmentTemplate.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AppointmentTemplate.

        Length of an appointment in minutes

        :param duration: The duration of this AppointmentTemplate.
        :type duration: int
        """

        self._duration = duration

    @property
    def exam_room(self):
        """Gets the exam_room of this AppointmentTemplate.

        **1-based** index for the exam room

        :return: The exam_room of this AppointmentTemplate.
        :rtype: int
        """
        return self._exam_room

    @exam_room.setter
    def exam_room(self, exam_room):
        """Sets the exam_room of this AppointmentTemplate.

        **1-based** index for the exam room

        :param exam_room: The exam_room of this AppointmentTemplate.
        :type exam_room: int
        """
        if exam_room is None:
            raise ValueError("Invalid value for `exam_room`, must not be `None`")

        self._exam_room = exam_room

    @property
    def id(self):
        """Gets the id of this AppointmentTemplate.

        

        :return: The id of this AppointmentTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppointmentTemplate.

        

        :param id: The id of this AppointmentTemplate.
        :type id: int
        """

        self._id = id

    @property
    def office(self):
        """Gets the office of this AppointmentTemplate.

        

        :return: The office of this AppointmentTemplate.
        :rtype: int
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this AppointmentTemplate.

        

        :param office: The office of this AppointmentTemplate.
        :type office: int
        """
        if office is None:
            raise ValueError("Invalid value for `office`, must not be `None`")

        self._office = office

    @property
    def open_slots(self):
        """Gets the open_slots of this AppointmentTemplate.

        Array of time intervals during which the template is available. Only computed if the available and verbose query parameters are passed. Note that only slots long enough to fit an appointment with the corresponding profile are included.

        :return: The open_slots of this AppointmentTemplate.
        :rtype: List[OpenSlot]
        """
        return self._open_slots

    @open_slots.setter
    def open_slots(self, open_slots):
        """Sets the open_slots of this AppointmentTemplate.

        Array of time intervals during which the template is available. Only computed if the available and verbose query parameters are passed. Note that only slots long enough to fit an appointment with the corresponding profile are included.

        :param open_slots: The open_slots of this AppointmentTemplate.
        :type open_slots: List[OpenSlot]
        """

        self._open_slots = open_slots

    @property
    def profile(self):
        """Gets the profile of this AppointmentTemplate.

        ID of the appointment profile to default to

        :return: The profile of this AppointmentTemplate.
        :rtype: int
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this AppointmentTemplate.

        ID of the appointment profile to default to

        :param profile: The profile of this AppointmentTemplate.
        :type profile: int
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this AppointmentTemplate.

        

        :return: The scheduled_time of this AppointmentTemplate.
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this AppointmentTemplate.

        

        :param scheduled_time: The scheduled_time of this AppointmentTemplate.
        :type scheduled_time: str
        """
        if scheduled_time is None:
            raise ValueError("Invalid value for `scheduled_time`, must not be `None`")

        self._scheduled_time = scheduled_time

    @property
    def week_days(self):
        """Gets the week_days of this AppointmentTemplate.

        Array of integers that indicate week days (`0` = Monday, ..., `6` = Sunday)

        :return: The week_days of this AppointmentTemplate.
        :rtype: List[int]
        """
        return self._week_days

    @week_days.setter
    def week_days(self, week_days):
        """Sets the week_days of this AppointmentTemplate.

        Array of integers that indicate week days (`0` = Monday, ..., `6` = Sunday)

        :param week_days: The week_days of this AppointmentTemplate.
        :type week_days: List[int]
        """
        if week_days is None:
            raise ValueError("Invalid value for `week_days`, must not be `None`")

        self._week_days = week_days
