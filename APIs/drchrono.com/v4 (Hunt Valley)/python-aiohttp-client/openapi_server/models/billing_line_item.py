# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: float=None, allowed: float=None, appointment: int=None, balance_ins: float=None, balance_pt: float=None, balance_total: str=None, billed: float=None, billing_status: str=None, code: str=None, denied_flag: bool=None, description: str=None, diagnosis_pointers: List[str]=None, doctor: str=None, expected_reimbursement: float=None, id: int=None, ins1_paid: float=None, ins2_paid: float=None, ins3_paid: float=None, ins_total: str=None, insurance_status: str=None, modifiers: List[str]=None, paid_total: str=None, patient: str=None, posted_date: str=None, price: float=None, procedure_type: str=None, pt_paid: float=None, quantity: float=None, service_date: str=None, units: str=None, updated_at: str=None):
        """BillingLineItem - a model defined in OpenAPI

        :param adjustment: The adjustment of this BillingLineItem.
        :param allowed: The allowed of this BillingLineItem.
        :param appointment: The appointment of this BillingLineItem.
        :param balance_ins: The balance_ins of this BillingLineItem.
        :param balance_pt: The balance_pt of this BillingLineItem.
        :param balance_total: The balance_total of this BillingLineItem.
        :param billed: The billed of this BillingLineItem.
        :param billing_status: The billing_status of this BillingLineItem.
        :param code: The code of this BillingLineItem.
        :param denied_flag: The denied_flag of this BillingLineItem.
        :param description: The description of this BillingLineItem.
        :param diagnosis_pointers: The diagnosis_pointers of this BillingLineItem.
        :param doctor: The doctor of this BillingLineItem.
        :param expected_reimbursement: The expected_reimbursement of this BillingLineItem.
        :param id: The id of this BillingLineItem.
        :param ins1_paid: The ins1_paid of this BillingLineItem.
        :param ins2_paid: The ins2_paid of this BillingLineItem.
        :param ins3_paid: The ins3_paid of this BillingLineItem.
        :param ins_total: The ins_total of this BillingLineItem.
        :param insurance_status: The insurance_status of this BillingLineItem.
        :param modifiers: The modifiers of this BillingLineItem.
        :param paid_total: The paid_total of this BillingLineItem.
        :param patient: The patient of this BillingLineItem.
        :param posted_date: The posted_date of this BillingLineItem.
        :param price: The price of this BillingLineItem.
        :param procedure_type: The procedure_type of this BillingLineItem.
        :param pt_paid: The pt_paid of this BillingLineItem.
        :param quantity: The quantity of this BillingLineItem.
        :param service_date: The service_date of this BillingLineItem.
        :param units: The units of this BillingLineItem.
        :param updated_at: The updated_at of this BillingLineItem.
        """
        self.openapi_types = {
            'adjustment': float,
            'allowed': float,
            'appointment': int,
            'balance_ins': float,
            'balance_pt': float,
            'balance_total': str,
            'billed': float,
            'billing_status': str,
            'code': str,
            'denied_flag': bool,
            'description': str,
            'diagnosis_pointers': List[str],
            'doctor': str,
            'expected_reimbursement': float,
            'id': int,
            'ins1_paid': float,
            'ins2_paid': float,
            'ins3_paid': float,
            'ins_total': str,
            'insurance_status': str,
            'modifiers': List[str],
            'paid_total': str,
            'patient': str,
            'posted_date': str,
            'price': float,
            'procedure_type': str,
            'pt_paid': float,
            'quantity': float,
            'service_date': str,
            'units': str,
            'updated_at': str
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'allowed': 'allowed',
            'appointment': 'appointment',
            'balance_ins': 'balance_ins',
            'balance_pt': 'balance_pt',
            'balance_total': 'balance_total',
            'billed': 'billed',
            'billing_status': 'billing_status',
            'code': 'code',
            'denied_flag': 'denied_flag',
            'description': 'description',
            'diagnosis_pointers': 'diagnosis_pointers',
            'doctor': 'doctor',
            'expected_reimbursement': 'expected_reimbursement',
            'id': 'id',
            'ins1_paid': 'ins1_paid',
            'ins2_paid': 'ins2_paid',
            'ins3_paid': 'ins3_paid',
            'ins_total': 'ins_total',
            'insurance_status': 'insurance_status',
            'modifiers': 'modifiers',
            'paid_total': 'paid_total',
            'patient': 'patient',
            'posted_date': 'posted_date',
            'price': 'price',
            'procedure_type': 'procedure_type',
            'pt_paid': 'pt_paid',
            'quantity': 'quantity',
            'service_date': 'service_date',
            'units': 'units',
            'updated_at': 'updated_at'
        }

        self._adjustment = adjustment
        self._allowed = allowed
        self._appointment = appointment
        self._balance_ins = balance_ins
        self._balance_pt = balance_pt
        self._balance_total = balance_total
        self._billed = billed
        self._billing_status = billing_status
        self._code = code
        self._denied_flag = denied_flag
        self._description = description
        self._diagnosis_pointers = diagnosis_pointers
        self._doctor = doctor
        self._expected_reimbursement = expected_reimbursement
        self._id = id
        self._ins1_paid = ins1_paid
        self._ins2_paid = ins2_paid
        self._ins3_paid = ins3_paid
        self._ins_total = ins_total
        self._insurance_status = insurance_status
        self._modifiers = modifiers
        self._paid_total = paid_total
        self._patient = patient
        self._posted_date = posted_date
        self._price = price
        self._procedure_type = procedure_type
        self._pt_paid = pt_paid
        self._quantity = quantity
        self._service_date = service_date
        self._units = units
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingLineItem of this BillingLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this BillingLineItem.

        Adjustment from total billed

        :return: The adjustment of this BillingLineItem.
        :rtype: float
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this BillingLineItem.

        Adjustment from total billed

        :param adjustment: The adjustment of this BillingLineItem.
        :type adjustment: float
        """

        self._adjustment = adjustment

    @property
    def allowed(self):
        """Gets the allowed of this BillingLineItem.

        Amount allowed by insurance

        :return: The allowed of this BillingLineItem.
        :rtype: float
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this BillingLineItem.

        Amount allowed by insurance

        :param allowed: The allowed of this BillingLineItem.
        :type allowed: float
        """

        self._allowed = allowed

    @property
    def appointment(self):
        """Gets the appointment of this BillingLineItem.

        Appointment ID

        :return: The appointment of this BillingLineItem.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this BillingLineItem.

        Appointment ID

        :param appointment: The appointment of this BillingLineItem.
        :type appointment: int
        """
        if appointment is None:
            raise ValueError("Invalid value for `appointment`, must not be `None`")

        self._appointment = appointment

    @property
    def balance_ins(self):
        """Gets the balance_ins of this BillingLineItem.

        Insurance balance

        :return: The balance_ins of this BillingLineItem.
        :rtype: float
        """
        return self._balance_ins

    @balance_ins.setter
    def balance_ins(self, balance_ins):
        """Sets the balance_ins of this BillingLineItem.

        Insurance balance

        :param balance_ins: The balance_ins of this BillingLineItem.
        :type balance_ins: float
        """

        self._balance_ins = balance_ins

    @property
    def balance_pt(self):
        """Gets the balance_pt of this BillingLineItem.

        Patient balance

        :return: The balance_pt of this BillingLineItem.
        :rtype: float
        """
        return self._balance_pt

    @balance_pt.setter
    def balance_pt(self, balance_pt):
        """Sets the balance_pt of this BillingLineItem.

        Patient balance

        :param balance_pt: The balance_pt of this BillingLineItem.
        :type balance_pt: float
        """

        self._balance_pt = balance_pt

    @property
    def balance_total(self):
        """Gets the balance_total of this BillingLineItem.

        Total balance

        :return: The balance_total of this BillingLineItem.
        :rtype: str
        """
        return self._balance_total

    @balance_total.setter
    def balance_total(self, balance_total):
        """Sets the balance_total of this BillingLineItem.

        Total balance

        :param balance_total: The balance_total of this BillingLineItem.
        :type balance_total: str
        """

        self._balance_total = balance_total

    @property
    def billed(self):
        """Gets the billed of this BillingLineItem.

        Total billed

        :return: The billed of this BillingLineItem.
        :rtype: float
        """
        return self._billed

    @billed.setter
    def billed(self, billed):
        """Sets the billed of this BillingLineItem.

        Total billed

        :param billed: The billed of this BillingLineItem.
        :type billed: float
        """

        self._billed = billed

    @property
    def billing_status(self):
        """Gets the billing_status of this BillingLineItem.

        One of `\"\"`, `\"Incomplete Information\"`, `\"In Process Emdeon\"`, `\"In Process iHCFA\"`, `\"In Process Gateway\"`, `\"Rejected Emdeon\"`, `\"Rejected iHCFA\"`, `\"Rejected Gateway\"`, `\"In Process Payer\"`, `\"Payer Acknowledged\"`, `\"Rejected Payer\"`, `\"Paid in Full\"`,  `\"Partially Paid\"`,  `\"Coordination of Benefits\"`,  `\"ERA Received\"`,  `\"ERA Denied\"`

        :return: The billing_status of this BillingLineItem.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this BillingLineItem.

        One of `\"\"`, `\"Incomplete Information\"`, `\"In Process Emdeon\"`, `\"In Process iHCFA\"`, `\"In Process Gateway\"`, `\"Rejected Emdeon\"`, `\"Rejected iHCFA\"`, `\"Rejected Gateway\"`, `\"In Process Payer\"`, `\"Payer Acknowledged\"`, `\"Rejected Payer\"`, `\"Paid in Full\"`,  `\"Partially Paid\"`,  `\"Coordination of Benefits\"`,  `\"ERA Received\"`,  `\"ERA Denied\"`

        :param billing_status: The billing_status of this BillingLineItem.
        :type billing_status: str
        """
        allowed_values = ["", "Incomplete Information", "In Process Emdeon", "In Process iHCFA", "In Process Gateway", "In Process Jopari", "In Process Waystar", "Rejected Emdeon", "Rejected iHCFA", "Rejected Gateway", "Rejected Jopari", "Rejected Waystar", "In Process Payer", "Payer Acknowledged", "Rejected Payer", "Paid in Full", "Partially Paid", "Coordination of Benefits", "ERA Received", "ERA Denied"]  # noqa: E501
        if billing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_status` ({0}), must be one of {1}"
                .format(billing_status, allowed_values)
            )

        self._billing_status = billing_status

    @property
    def code(self):
        """Gets the code of this BillingLineItem.

        

        :return: The code of this BillingLineItem.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BillingLineItem.

        

        :param code: The code of this BillingLineItem.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def denied_flag(self):
        """Gets the denied_flag of this BillingLineItem.

        

        :return: The denied_flag of this BillingLineItem.
        :rtype: bool
        """
        return self._denied_flag

    @denied_flag.setter
    def denied_flag(self, denied_flag):
        """Sets the denied_flag of this BillingLineItem.

        

        :param denied_flag: The denied_flag of this BillingLineItem.
        :type denied_flag: bool
        """

        self._denied_flag = denied_flag

    @property
    def description(self):
        """Gets the description of this BillingLineItem.

        

        :return: The description of this BillingLineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BillingLineItem.

        

        :param description: The description of this BillingLineItem.
        :type description: str
        """

        self._description = description

    @property
    def diagnosis_pointers(self):
        """Gets the diagnosis_pointers of this BillingLineItem.

        List of 4 diagnosis pointers

        :return: The diagnosis_pointers of this BillingLineItem.
        :rtype: List[str]
        """
        return self._diagnosis_pointers

    @diagnosis_pointers.setter
    def diagnosis_pointers(self, diagnosis_pointers):
        """Sets the diagnosis_pointers of this BillingLineItem.

        List of 4 diagnosis pointers

        :param diagnosis_pointers: The diagnosis_pointers of this BillingLineItem.
        :type diagnosis_pointers: List[str]
        """
        if diagnosis_pointers is None:
            raise ValueError("Invalid value for `diagnosis_pointers`, must not be `None`")

        self._diagnosis_pointers = diagnosis_pointers

    @property
    def doctor(self):
        """Gets the doctor of this BillingLineItem.

        Doctor ID

        :return: The doctor of this BillingLineItem.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this BillingLineItem.

        Doctor ID

        :param doctor: The doctor of this BillingLineItem.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def expected_reimbursement(self):
        """Gets the expected_reimbursement of this BillingLineItem.

        

        :return: The expected_reimbursement of this BillingLineItem.
        :rtype: float
        """
        return self._expected_reimbursement

    @expected_reimbursement.setter
    def expected_reimbursement(self, expected_reimbursement):
        """Sets the expected_reimbursement of this BillingLineItem.

        

        :param expected_reimbursement: The expected_reimbursement of this BillingLineItem.
        :type expected_reimbursement: float
        """

        self._expected_reimbursement = expected_reimbursement

    @property
    def id(self):
        """Gets the id of this BillingLineItem.

        

        :return: The id of this BillingLineItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingLineItem.

        

        :param id: The id of this BillingLineItem.
        :type id: int
        """

        self._id = id

    @property
    def ins1_paid(self):
        """Gets the ins1_paid of this BillingLineItem.

        Amount paid by patient's primary insurer

        :return: The ins1_paid of this BillingLineItem.
        :rtype: float
        """
        return self._ins1_paid

    @ins1_paid.setter
    def ins1_paid(self, ins1_paid):
        """Sets the ins1_paid of this BillingLineItem.

        Amount paid by patient's primary insurer

        :param ins1_paid: The ins1_paid of this BillingLineItem.
        :type ins1_paid: float
        """

        self._ins1_paid = ins1_paid

    @property
    def ins2_paid(self):
        """Gets the ins2_paid of this BillingLineItem.

        Amount paid by patient's secondary insurer

        :return: The ins2_paid of this BillingLineItem.
        :rtype: float
        """
        return self._ins2_paid

    @ins2_paid.setter
    def ins2_paid(self, ins2_paid):
        """Sets the ins2_paid of this BillingLineItem.

        Amount paid by patient's secondary insurer

        :param ins2_paid: The ins2_paid of this BillingLineItem.
        :type ins2_paid: float
        """

        self._ins2_paid = ins2_paid

    @property
    def ins3_paid(self):
        """Gets the ins3_paid of this BillingLineItem.

        Amount paid by patinet's tertiary insurer

        :return: The ins3_paid of this BillingLineItem.
        :rtype: float
        """
        return self._ins3_paid

    @ins3_paid.setter
    def ins3_paid(self, ins3_paid):
        """Sets the ins3_paid of this BillingLineItem.

        Amount paid by patinet's tertiary insurer

        :param ins3_paid: The ins3_paid of this BillingLineItem.
        :type ins3_paid: float
        """

        self._ins3_paid = ins3_paid

    @property
    def ins_total(self):
        """Gets the ins_total of this BillingLineItem.

        Total amount paid by patient's insurers

        :return: The ins_total of this BillingLineItem.
        :rtype: str
        """
        return self._ins_total

    @ins_total.setter
    def ins_total(self, ins_total):
        """Sets the ins_total of this BillingLineItem.

        Total amount paid by patient's insurers

        :param ins_total: The ins_total of this BillingLineItem.
        :type ins_total: str
        """

        self._ins_total = ins_total

    @property
    def insurance_status(self):
        """Gets the insurance_status of this BillingLineItem.

        This corresponds to the \"Status/Adj Type\" from billing detail screen

        :return: The insurance_status of this BillingLineItem.
        :rtype: str
        """
        return self._insurance_status

    @insurance_status.setter
    def insurance_status(self, insurance_status):
        """Sets the insurance_status of this BillingLineItem.

        This corresponds to the \"Status/Adj Type\" from billing detail screen

        :param insurance_status: The insurance_status of this BillingLineItem.
        :type insurance_status: str
        """

        self._insurance_status = insurance_status

    @property
    def modifiers(self):
        """Gets the modifiers of this BillingLineItem.

        List of 4 code modifiers

        :return: The modifiers of this BillingLineItem.
        :rtype: List[str]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this BillingLineItem.

        List of 4 code modifiers

        :param modifiers: The modifiers of this BillingLineItem.
        :type modifiers: List[str]
        """

        self._modifiers = modifiers

    @property
    def paid_total(self):
        """Gets the paid_total of this BillingLineItem.

        Total amount paid

        :return: The paid_total of this BillingLineItem.
        :rtype: str
        """
        return self._paid_total

    @paid_total.setter
    def paid_total(self, paid_total):
        """Sets the paid_total of this BillingLineItem.

        Total amount paid

        :param paid_total: The paid_total of this BillingLineItem.
        :type paid_total: str
        """

        self._paid_total = paid_total

    @property
    def patient(self):
        """Gets the patient of this BillingLineItem.

        Patient ID

        :return: The patient of this BillingLineItem.
        :rtype: str
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this BillingLineItem.

        Patient ID

        :param patient: The patient of this BillingLineItem.
        :type patient: str
        """

        self._patient = patient

    @property
    def posted_date(self):
        """Gets the posted_date of this BillingLineItem.

        

        :return: The posted_date of this BillingLineItem.
        :rtype: str
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this BillingLineItem.

        

        :param posted_date: The posted_date of this BillingLineItem.
        :type posted_date: str
        """

        self._posted_date = posted_date

    @property
    def price(self):
        """Gets the price of this BillingLineItem.

        Price of procedure

        :return: The price of this BillingLineItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BillingLineItem.

        Price of procedure

        :param price: The price of this BillingLineItem.
        :type price: float
        """

        self._price = price

    @property
    def procedure_type(self):
        """Gets the procedure_type of this BillingLineItem.

        One of `\"CPT(C)\"`, `\"HCPCS(H)\"`, `\"Custom(U)\"`, use 1 character identifier when using `POST`

        :return: The procedure_type of this BillingLineItem.
        :rtype: str
        """
        return self._procedure_type

    @procedure_type.setter
    def procedure_type(self, procedure_type):
        """Sets the procedure_type of this BillingLineItem.

        One of `\"CPT(C)\"`, `\"HCPCS(H)\"`, `\"Custom(U)\"`, use 1 character identifier when using `POST`

        :param procedure_type: The procedure_type of this BillingLineItem.
        :type procedure_type: str
        """
        allowed_values = ["C", "H", "U", "S"]  # noqa: E501
        if procedure_type not in allowed_values:
            raise ValueError(
                "Invalid value for `procedure_type` ({0}), must be one of {1}"
                .format(procedure_type, allowed_values)
            )

        self._procedure_type = procedure_type

    @property
    def pt_paid(self):
        """Gets the pt_paid of this BillingLineItem.

        Amount paid by patient

        :return: The pt_paid of this BillingLineItem.
        :rtype: float
        """
        return self._pt_paid

    @pt_paid.setter
    def pt_paid(self, pt_paid):
        """Sets the pt_paid of this BillingLineItem.

        Amount paid by patient

        :param pt_paid: The pt_paid of this BillingLineItem.
        :type pt_paid: float
        """

        self._pt_paid = pt_paid

    @property
    def quantity(self):
        """Gets the quantity of this BillingLineItem.

        

        :return: The quantity of this BillingLineItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BillingLineItem.

        

        :param quantity: The quantity of this BillingLineItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def service_date(self):
        """Gets the service_date of this BillingLineItem.

        Date on which the service was rendered

        :return: The service_date of this BillingLineItem.
        :rtype: str
        """
        return self._service_date

    @service_date.setter
    def service_date(self, service_date):
        """Sets the service_date of this BillingLineItem.

        Date on which the service was rendered

        :param service_date: The service_date of this BillingLineItem.
        :type service_date: str
        """

        self._service_date = service_date

    @property
    def units(self):
        """Gets the units of this BillingLineItem.

        Default to \"UN\"

        :return: The units of this BillingLineItem.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this BillingLineItem.

        Default to \"UN\"

        :param units: The units of this BillingLineItem.
        :type units: str
        """

        self._units = units

    @property
    def updated_at(self):
        """Gets the updated_at of this BillingLineItem.

        

        :return: The updated_at of this BillingLineItem.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BillingLineItem.

        

        :param updated_at: The updated_at of this BillingLineItem.
        :type updated_at: str
        """

        self._updated_at = updated_at
