# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clinical_note_section import ClinicalNoteSection
from openapi_server import util


class ClinicalNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment: str=None, archived: bool=None, clinical_note_sections: List[ClinicalNoteSection]=None, patient: str=None):
        """ClinicalNote - a model defined in OpenAPI

        :param appointment: The appointment of this ClinicalNote.
        :param archived: The archived of this ClinicalNote.
        :param clinical_note_sections: The clinical_note_sections of this ClinicalNote.
        :param patient: The patient of this ClinicalNote.
        """
        self.openapi_types = {
            'appointment': str,
            'archived': bool,
            'clinical_note_sections': List[ClinicalNoteSection],
            'patient': str
        }

        self.attribute_map = {
            'appointment': 'appointment',
            'archived': 'archived',
            'clinical_note_sections': 'clinical_note_sections',
            'patient': 'patient'
        }

        self._appointment = appointment
        self._archived = archived
        self._clinical_note_sections = clinical_note_sections
        self._patient = patient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClinicalNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClinicalNote of this ClinicalNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment(self):
        """Gets the appointment of this ClinicalNote.

        

        :return: The appointment of this ClinicalNote.
        :rtype: str
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this ClinicalNote.

        

        :param appointment: The appointment of this ClinicalNote.
        :type appointment: str
        """

        self._appointment = appointment

    @property
    def archived(self):
        """Gets the archived of this ClinicalNote.

        

        :return: The archived of this ClinicalNote.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ClinicalNote.

        

        :param archived: The archived of this ClinicalNote.
        :type archived: bool
        """

        self._archived = archived

    @property
    def clinical_note_sections(self):
        """Gets the clinical_note_sections of this ClinicalNote.

        

        :return: The clinical_note_sections of this ClinicalNote.
        :rtype: List[ClinicalNoteSection]
        """
        return self._clinical_note_sections

    @clinical_note_sections.setter
    def clinical_note_sections(self, clinical_note_sections):
        """Sets the clinical_note_sections of this ClinicalNote.

        

        :param clinical_note_sections: The clinical_note_sections of this ClinicalNote.
        :type clinical_note_sections: List[ClinicalNoteSection]
        """

        self._clinical_note_sections = clinical_note_sections

    @property
    def patient(self):
        """Gets the patient of this ClinicalNote.

        

        :return: The patient of this ClinicalNote.
        :rtype: str
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this ClinicalNote.

        

        :param patient: The patient of this ClinicalNote.
        :type patient: str
        """

        self._patient = patient
