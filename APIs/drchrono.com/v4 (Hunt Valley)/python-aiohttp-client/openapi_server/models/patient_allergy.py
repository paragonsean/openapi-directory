# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientAllergy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, doctor: int=None, id: int=None, notes: str=None, patient: int=None, reaction: str=None, rxnorm: str=None, snomed_reaction: str=None, status: str=None):
        """PatientAllergy - a model defined in OpenAPI

        :param description: The description of this PatientAllergy.
        :param doctor: The doctor of this PatientAllergy.
        :param id: The id of this PatientAllergy.
        :param notes: The notes of this PatientAllergy.
        :param patient: The patient of this PatientAllergy.
        :param reaction: The reaction of this PatientAllergy.
        :param rxnorm: The rxnorm of this PatientAllergy.
        :param snomed_reaction: The snomed_reaction of this PatientAllergy.
        :param status: The status of this PatientAllergy.
        """
        self.openapi_types = {
            'description': str,
            'doctor': int,
            'id': int,
            'notes': str,
            'patient': int,
            'reaction': str,
            'rxnorm': str,
            'snomed_reaction': str,
            'status': str
        }

        self.attribute_map = {
            'description': 'description',
            'doctor': 'doctor',
            'id': 'id',
            'notes': 'notes',
            'patient': 'patient',
            'reaction': 'reaction',
            'rxnorm': 'rxnorm',
            'snomed_reaction': 'snomed_reaction',
            'status': 'status'
        }

        self._description = description
        self._doctor = doctor
        self._id = id
        self._notes = notes
        self._patient = patient
        self._reaction = reaction
        self._rxnorm = rxnorm
        self._snomed_reaction = snomed_reaction
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAllergy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAllergy of this PatientAllergy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PatientAllergy.

        Description of the allergy, such as `\"Cat hair\"`

        :return: The description of this PatientAllergy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatientAllergy.

        Description of the allergy, such as `\"Cat hair\"`

        :param description: The description of this PatientAllergy.
        :type description: str
        """

        self._description = description

    @property
    def doctor(self):
        """Gets the doctor of this PatientAllergy.

        Id of the doctor who diagnosed the allergy

        :return: The doctor of this PatientAllergy.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientAllergy.

        Id of the doctor who diagnosed the allergy

        :param doctor: The doctor of this PatientAllergy.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this PatientAllergy.

        

        :return: The id of this PatientAllergy.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientAllergy.

        

        :param id: The id of this PatientAllergy.
        :type id: int
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this PatientAllergy.

        Any additional notes from the provider

        :return: The notes of this PatientAllergy.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PatientAllergy.

        Any additional notes from the provider

        :param notes: The notes of this PatientAllergy.
        :type notes: str
        """

        self._notes = notes

    @property
    def patient(self):
        """Gets the patient of this PatientAllergy.

        

        :return: The patient of this PatientAllergy.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientAllergy.

        

        :param patient: The patient of this PatientAllergy.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def reaction(self):
        """Gets the reaction of this PatientAllergy.

        Short description of the patient's allergic reaction, such as `\"Hives\"`

        :return: The reaction of this PatientAllergy.
        :rtype: str
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this PatientAllergy.

        Short description of the patient's allergic reaction, such as `\"Hives\"`

        :param reaction: The reaction of this PatientAllergy.
        :type reaction: str
        """

        self._reaction = reaction

    @property
    def rxnorm(self):
        """Gets the rxnorm of this PatientAllergy.

        If the allergy is a drug allergy, this is the RxNorm code of the drug

        :return: The rxnorm of this PatientAllergy.
        :rtype: str
        """
        return self._rxnorm

    @rxnorm.setter
    def rxnorm(self, rxnorm):
        """Sets the rxnorm of this PatientAllergy.

        If the allergy is a drug allergy, this is the RxNorm code of the drug

        :param rxnorm: The rxnorm of this PatientAllergy.
        :type rxnorm: str
        """

        self._rxnorm = rxnorm

    @property
    def snomed_reaction(self):
        """Gets the snomed_reaction of this PatientAllergy.

        SNOMED code for the reaction. For possible SnoMED codes, please see [this link from PHIN VADS](https://phinvads.cdc.gov/vads/ViewValueSet.action?id=896AABB4-5ACD-DE11-913D-0015173D1785)

        :return: The snomed_reaction of this PatientAllergy.
        :rtype: str
        """
        return self._snomed_reaction

    @snomed_reaction.setter
    def snomed_reaction(self, snomed_reaction):
        """Sets the snomed_reaction of this PatientAllergy.

        SNOMED code for the reaction. For possible SnoMED codes, please see [this link from PHIN VADS](https://phinvads.cdc.gov/vads/ViewValueSet.action?id=896AABB4-5ACD-DE11-913D-0015173D1785)

        :param snomed_reaction: The snomed_reaction of this PatientAllergy.
        :type snomed_reaction: str
        """
        allowed_values = ["", "14669001", "39579001", "57676002", "43724002", "49727002", "386661006", "25064002", "247472004", "271795006", "68962001", "68235000", "422587007", "95388000", "271807003", "271825005", "64531003", "267036007", "162397003", "65124004"]  # noqa: E501
        if snomed_reaction not in allowed_values:
            raise ValueError(
                "Invalid value for `snomed_reaction` ({0}), must be one of {1}"
                .format(snomed_reaction, allowed_values)
            )

        self._snomed_reaction = snomed_reaction

    @property
    def status(self):
        """Gets the status of this PatientAllergy.

        One of `\"active\"`, `\"inactive\"`. If absent in `POST`, default to `\"active\"`

        :return: The status of this PatientAllergy.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatientAllergy.

        One of `\"active\"`, `\"inactive\"`. If absent in `POST`, default to `\"active\"`

        :param status: The status of this PatientAllergy.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
