# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_accident_insurance import AutoAccidentInsurance
from openapi_server.models.custom_patient_field_value import CustomPatientFieldValue
from openapi_server.models.patient1 import Patient1
from openapi_server.models.patient_flag import PatientFlag
from openapi_server.models.patient_flag_type1 import PatientFlagType1
from openapi_server.models.primary_insurance import PrimaryInsurance
from openapi_server.models.secondary_insurance import SecondaryInsurance
from openapi_server.models.tertiary_insurance import TertiaryInsurance
from openapi_server.models.worker_comp_insurance import WorkerCompInsurance
from openapi_server import util


class Patient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, auto_accident_insurance: AutoAccidentInsurance=None, cell_phone: str=None, chart_id: str=None, city: str=None, copay: str=None, custom_demographics: List[CustomPatientFieldValue]=None, date_of_birth: str=None, date_of_first_appointment: str=None, date_of_last_appointment: str=None, default_pharmacy: str=None, disable_sms_messages: bool=None, doctor: int=None, email: str=None, emergency_contact_name: str=None, emergency_contact_phone: str=None, emergency_contact_relation: str=None, employer: str=None, employer_address: str=None, employer_city: str=None, employer_state: str=None, employer_zip_code: str=None, ethnicity: str=None, first_name: str=None, gender: str=None, home_phone: str=None, id: int=None, last_name: str=None, middle_name: str=None, nick_name: str=None, office_phone: str=None, offices: List[int]=None, patient_flags: List[PatientFlagType1]=None, patient_flags_attached: List[PatientFlag]=None, patient_payment_profile: str=None, patient_photo: str=None, patient_photo_date: str=None, patient_status: str=None, preferred_language: str=None, primary_care_physician: str=None, primary_insurance: PrimaryInsurance=None, race: str=None, referring_doctor: Patient1=None, referring_source: str=None, responsible_party_email: str=None, responsible_party_name: str=None, responsible_party_phone: str=None, responsible_party_relation: str=None, secondary_insurance: SecondaryInsurance=None, social_security_number: str=None, state: str=None, tertiary_insurance: TertiaryInsurance=None, updated_at: str=None, workers_comp_insurance: WorkerCompInsurance=None, zip_code: str=None):
        """Patient - a model defined in OpenAPI

        :param address: The address of this Patient.
        :param auto_accident_insurance: The auto_accident_insurance of this Patient.
        :param cell_phone: The cell_phone of this Patient.
        :param chart_id: The chart_id of this Patient.
        :param city: The city of this Patient.
        :param copay: The copay of this Patient.
        :param custom_demographics: The custom_demographics of this Patient.
        :param date_of_birth: The date_of_birth of this Patient.
        :param date_of_first_appointment: The date_of_first_appointment of this Patient.
        :param date_of_last_appointment: The date_of_last_appointment of this Patient.
        :param default_pharmacy: The default_pharmacy of this Patient.
        :param disable_sms_messages: The disable_sms_messages of this Patient.
        :param doctor: The doctor of this Patient.
        :param email: The email of this Patient.
        :param emergency_contact_name: The emergency_contact_name of this Patient.
        :param emergency_contact_phone: The emergency_contact_phone of this Patient.
        :param emergency_contact_relation: The emergency_contact_relation of this Patient.
        :param employer: The employer of this Patient.
        :param employer_address: The employer_address of this Patient.
        :param employer_city: The employer_city of this Patient.
        :param employer_state: The employer_state of this Patient.
        :param employer_zip_code: The employer_zip_code of this Patient.
        :param ethnicity: The ethnicity of this Patient.
        :param first_name: The first_name of this Patient.
        :param gender: The gender of this Patient.
        :param home_phone: The home_phone of this Patient.
        :param id: The id of this Patient.
        :param last_name: The last_name of this Patient.
        :param middle_name: The middle_name of this Patient.
        :param nick_name: The nick_name of this Patient.
        :param office_phone: The office_phone of this Patient.
        :param offices: The offices of this Patient.
        :param patient_flags: The patient_flags of this Patient.
        :param patient_flags_attached: The patient_flags_attached of this Patient.
        :param patient_payment_profile: The patient_payment_profile of this Patient.
        :param patient_photo: The patient_photo of this Patient.
        :param patient_photo_date: The patient_photo_date of this Patient.
        :param patient_status: The patient_status of this Patient.
        :param preferred_language: The preferred_language of this Patient.
        :param primary_care_physician: The primary_care_physician of this Patient.
        :param primary_insurance: The primary_insurance of this Patient.
        :param race: The race of this Patient.
        :param referring_doctor: The referring_doctor of this Patient.
        :param referring_source: The referring_source of this Patient.
        :param responsible_party_email: The responsible_party_email of this Patient.
        :param responsible_party_name: The responsible_party_name of this Patient.
        :param responsible_party_phone: The responsible_party_phone of this Patient.
        :param responsible_party_relation: The responsible_party_relation of this Patient.
        :param secondary_insurance: The secondary_insurance of this Patient.
        :param social_security_number: The social_security_number of this Patient.
        :param state: The state of this Patient.
        :param tertiary_insurance: The tertiary_insurance of this Patient.
        :param updated_at: The updated_at of this Patient.
        :param workers_comp_insurance: The workers_comp_insurance of this Patient.
        :param zip_code: The zip_code of this Patient.
        """
        self.openapi_types = {
            'address': str,
            'auto_accident_insurance': AutoAccidentInsurance,
            'cell_phone': str,
            'chart_id': str,
            'city': str,
            'copay': str,
            'custom_demographics': List[CustomPatientFieldValue],
            'date_of_birth': str,
            'date_of_first_appointment': str,
            'date_of_last_appointment': str,
            'default_pharmacy': str,
            'disable_sms_messages': bool,
            'doctor': int,
            'email': str,
            'emergency_contact_name': str,
            'emergency_contact_phone': str,
            'emergency_contact_relation': str,
            'employer': str,
            'employer_address': str,
            'employer_city': str,
            'employer_state': str,
            'employer_zip_code': str,
            'ethnicity': str,
            'first_name': str,
            'gender': str,
            'home_phone': str,
            'id': int,
            'last_name': str,
            'middle_name': str,
            'nick_name': str,
            'office_phone': str,
            'offices': List[int],
            'patient_flags': List[PatientFlagType1],
            'patient_flags_attached': List[PatientFlag],
            'patient_payment_profile': str,
            'patient_photo': str,
            'patient_photo_date': str,
            'patient_status': str,
            'preferred_language': str,
            'primary_care_physician': str,
            'primary_insurance': PrimaryInsurance,
            'race': str,
            'referring_doctor': Patient1,
            'referring_source': str,
            'responsible_party_email': str,
            'responsible_party_name': str,
            'responsible_party_phone': str,
            'responsible_party_relation': str,
            'secondary_insurance': SecondaryInsurance,
            'social_security_number': str,
            'state': str,
            'tertiary_insurance': TertiaryInsurance,
            'updated_at': str,
            'workers_comp_insurance': WorkerCompInsurance,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'auto_accident_insurance': 'auto_accident_insurance',
            'cell_phone': 'cell_phone',
            'chart_id': 'chart_id',
            'city': 'city',
            'copay': 'copay',
            'custom_demographics': 'custom_demographics',
            'date_of_birth': 'date_of_birth',
            'date_of_first_appointment': 'date_of_first_appointment',
            'date_of_last_appointment': 'date_of_last_appointment',
            'default_pharmacy': 'default_pharmacy',
            'disable_sms_messages': 'disable_sms_messages',
            'doctor': 'doctor',
            'email': 'email',
            'emergency_contact_name': 'emergency_contact_name',
            'emergency_contact_phone': 'emergency_contact_phone',
            'emergency_contact_relation': 'emergency_contact_relation',
            'employer': 'employer',
            'employer_address': 'employer_address',
            'employer_city': 'employer_city',
            'employer_state': 'employer_state',
            'employer_zip_code': 'employer_zip_code',
            'ethnicity': 'ethnicity',
            'first_name': 'first_name',
            'gender': 'gender',
            'home_phone': 'home_phone',
            'id': 'id',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'nick_name': 'nick_name',
            'office_phone': 'office_phone',
            'offices': 'offices',
            'patient_flags': 'patient_flags',
            'patient_flags_attached': 'patient_flags_attached',
            'patient_payment_profile': 'patient_payment_profile',
            'patient_photo': 'patient_photo',
            'patient_photo_date': 'patient_photo_date',
            'patient_status': 'patient_status',
            'preferred_language': 'preferred_language',
            'primary_care_physician': 'primary_care_physician',
            'primary_insurance': 'primary_insurance',
            'race': 'race',
            'referring_doctor': 'referring_doctor',
            'referring_source': 'referring_source',
            'responsible_party_email': 'responsible_party_email',
            'responsible_party_name': 'responsible_party_name',
            'responsible_party_phone': 'responsible_party_phone',
            'responsible_party_relation': 'responsible_party_relation',
            'secondary_insurance': 'secondary_insurance',
            'social_security_number': 'social_security_number',
            'state': 'state',
            'tertiary_insurance': 'tertiary_insurance',
            'updated_at': 'updated_at',
            'workers_comp_insurance': 'workers_comp_insurance',
            'zip_code': 'zip_code'
        }

        self._address = address
        self._auto_accident_insurance = auto_accident_insurance
        self._cell_phone = cell_phone
        self._chart_id = chart_id
        self._city = city
        self._copay = copay
        self._custom_demographics = custom_demographics
        self._date_of_birth = date_of_birth
        self._date_of_first_appointment = date_of_first_appointment
        self._date_of_last_appointment = date_of_last_appointment
        self._default_pharmacy = default_pharmacy
        self._disable_sms_messages = disable_sms_messages
        self._doctor = doctor
        self._email = email
        self._emergency_contact_name = emergency_contact_name
        self._emergency_contact_phone = emergency_contact_phone
        self._emergency_contact_relation = emergency_contact_relation
        self._employer = employer
        self._employer_address = employer_address
        self._employer_city = employer_city
        self._employer_state = employer_state
        self._employer_zip_code = employer_zip_code
        self._ethnicity = ethnicity
        self._first_name = first_name
        self._gender = gender
        self._home_phone = home_phone
        self._id = id
        self._last_name = last_name
        self._middle_name = middle_name
        self._nick_name = nick_name
        self._office_phone = office_phone
        self._offices = offices
        self._patient_flags = patient_flags
        self._patient_flags_attached = patient_flags_attached
        self._patient_payment_profile = patient_payment_profile
        self._patient_photo = patient_photo
        self._patient_photo_date = patient_photo_date
        self._patient_status = patient_status
        self._preferred_language = preferred_language
        self._primary_care_physician = primary_care_physician
        self._primary_insurance = primary_insurance
        self._race = race
        self._referring_doctor = referring_doctor
        self._referring_source = referring_source
        self._responsible_party_email = responsible_party_email
        self._responsible_party_name = responsible_party_name
        self._responsible_party_phone = responsible_party_phone
        self._responsible_party_relation = responsible_party_relation
        self._secondary_insurance = secondary_insurance
        self._social_security_number = social_security_number
        self._state = state
        self._tertiary_insurance = tertiary_insurance
        self._updated_at = updated_at
        self._workers_comp_insurance = workers_comp_insurance
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Patient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Patient of this Patient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Patient.

        

        :return: The address of this Patient.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Patient.

        

        :param address: The address of this Patient.
        :type address: str
        """

        self._address = address

    @property
    def auto_accident_insurance(self):
        """Gets the auto_accident_insurance of this Patient.


        :return: The auto_accident_insurance of this Patient.
        :rtype: AutoAccidentInsurance
        """
        return self._auto_accident_insurance

    @auto_accident_insurance.setter
    def auto_accident_insurance(self, auto_accident_insurance):
        """Sets the auto_accident_insurance of this Patient.


        :param auto_accident_insurance: The auto_accident_insurance of this Patient.
        :type auto_accident_insurance: AutoAccidentInsurance
        """

        self._auto_accident_insurance = auto_accident_insurance

    @property
    def cell_phone(self):
        """Gets the cell_phone of this Patient.

        

        :return: The cell_phone of this Patient.
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this Patient.

        

        :param cell_phone: The cell_phone of this Patient.
        :type cell_phone: str
        """

        self._cell_phone = cell_phone

    @property
    def chart_id(self):
        """Gets the chart_id of this Patient.

        Automatically set using first & last name if absent

        :return: The chart_id of this Patient.
        :rtype: str
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this Patient.

        Automatically set using first & last name if absent

        :param chart_id: The chart_id of this Patient.
        :type chart_id: str
        """

        self._chart_id = chart_id

    @property
    def city(self):
        """Gets the city of this Patient.

        

        :return: The city of this Patient.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Patient.

        

        :param city: The city of this Patient.
        :type city: str
        """

        self._city = city

    @property
    def copay(self):
        """Gets the copay of this Patient.

        

        :return: The copay of this Patient.
        :rtype: str
        """
        return self._copay

    @copay.setter
    def copay(self, copay):
        """Sets the copay of this Patient.

        

        :param copay: The copay of this Patient.
        :type copay: str
        """

        self._copay = copay

    @property
    def custom_demographics(self):
        """Gets the custom_demographics of this Patient.

        

        :return: The custom_demographics of this Patient.
        :rtype: List[CustomPatientFieldValue]
        """
        return self._custom_demographics

    @custom_demographics.setter
    def custom_demographics(self, custom_demographics):
        """Sets the custom_demographics of this Patient.

        

        :param custom_demographics: The custom_demographics of this Patient.
        :type custom_demographics: List[CustomPatientFieldValue]
        """

        self._custom_demographics = custom_demographics

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Patient.

        

        :return: The date_of_birth of this Patient.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Patient.

        

        :param date_of_birth: The date_of_birth of this Patient.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def date_of_first_appointment(self):
        """Gets the date_of_first_appointment of this Patient.

        Date of first patient visit.

        :return: The date_of_first_appointment of this Patient.
        :rtype: str
        """
        return self._date_of_first_appointment

    @date_of_first_appointment.setter
    def date_of_first_appointment(self, date_of_first_appointment):
        """Sets the date_of_first_appointment of this Patient.

        Date of first patient visit.

        :param date_of_first_appointment: The date_of_first_appointment of this Patient.
        :type date_of_first_appointment: str
        """

        self._date_of_first_appointment = date_of_first_appointment

    @property
    def date_of_last_appointment(self):
        """Gets the date_of_last_appointment of this Patient.

        Date of previous patient visit

        :return: The date_of_last_appointment of this Patient.
        :rtype: str
        """
        return self._date_of_last_appointment

    @date_of_last_appointment.setter
    def date_of_last_appointment(self, date_of_last_appointment):
        """Sets the date_of_last_appointment of this Patient.

        Date of previous patient visit

        :param date_of_last_appointment: The date_of_last_appointment of this Patient.
        :type date_of_last_appointment: str
        """

        self._date_of_last_appointment = date_of_last_appointment

    @property
    def default_pharmacy(self):
        """Gets the default_pharmacy of this Patient.

        ncpdp id of patient's default pharmacy

        :return: The default_pharmacy of this Patient.
        :rtype: str
        """
        return self._default_pharmacy

    @default_pharmacy.setter
    def default_pharmacy(self, default_pharmacy):
        """Sets the default_pharmacy of this Patient.

        ncpdp id of patient's default pharmacy

        :param default_pharmacy: The default_pharmacy of this Patient.
        :type default_pharmacy: str
        """

        self._default_pharmacy = default_pharmacy

    @property
    def disable_sms_messages(self):
        """Gets the disable_sms_messages of this Patient.

        If True, suppress SMS/Txt messages to this patient even if we have a cell phone # for them.

        :return: The disable_sms_messages of this Patient.
        :rtype: bool
        """
        return self._disable_sms_messages

    @disable_sms_messages.setter
    def disable_sms_messages(self, disable_sms_messages):
        """Sets the disable_sms_messages of this Patient.

        If True, suppress SMS/Txt messages to this patient even if we have a cell phone # for them.

        :param disable_sms_messages: The disable_sms_messages of this Patient.
        :type disable_sms_messages: bool
        """

        self._disable_sms_messages = disable_sms_messages

    @property
    def doctor(self):
        """Gets the doctor of this Patient.

        

        :return: The doctor of this Patient.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this Patient.

        

        :param doctor: The doctor of this Patient.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def email(self):
        """Gets the email of this Patient.

        

        :return: The email of this Patient.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Patient.

        

        :param email: The email of this Patient.
        :type email: str
        """

        self._email = email

    @property
    def emergency_contact_name(self):
        """Gets the emergency_contact_name of this Patient.

        

        :return: The emergency_contact_name of this Patient.
        :rtype: str
        """
        return self._emergency_contact_name

    @emergency_contact_name.setter
    def emergency_contact_name(self, emergency_contact_name):
        """Sets the emergency_contact_name of this Patient.

        

        :param emergency_contact_name: The emergency_contact_name of this Patient.
        :type emergency_contact_name: str
        """

        self._emergency_contact_name = emergency_contact_name

    @property
    def emergency_contact_phone(self):
        """Gets the emergency_contact_phone of this Patient.

        

        :return: The emergency_contact_phone of this Patient.
        :rtype: str
        """
        return self._emergency_contact_phone

    @emergency_contact_phone.setter
    def emergency_contact_phone(self, emergency_contact_phone):
        """Sets the emergency_contact_phone of this Patient.

        

        :param emergency_contact_phone: The emergency_contact_phone of this Patient.
        :type emergency_contact_phone: str
        """

        self._emergency_contact_phone = emergency_contact_phone

    @property
    def emergency_contact_relation(self):
        """Gets the emergency_contact_relation of this Patient.

        

        :return: The emergency_contact_relation of this Patient.
        :rtype: str
        """
        return self._emergency_contact_relation

    @emergency_contact_relation.setter
    def emergency_contact_relation(self, emergency_contact_relation):
        """Sets the emergency_contact_relation of this Patient.

        

        :param emergency_contact_relation: The emergency_contact_relation of this Patient.
        :type emergency_contact_relation: str
        """

        self._emergency_contact_relation = emergency_contact_relation

    @property
    def employer(self):
        """Gets the employer of this Patient.

        

        :return: The employer of this Patient.
        :rtype: str
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this Patient.

        

        :param employer: The employer of this Patient.
        :type employer: str
        """

        self._employer = employer

    @property
    def employer_address(self):
        """Gets the employer_address of this Patient.

        

        :return: The employer_address of this Patient.
        :rtype: str
        """
        return self._employer_address

    @employer_address.setter
    def employer_address(self, employer_address):
        """Sets the employer_address of this Patient.

        

        :param employer_address: The employer_address of this Patient.
        :type employer_address: str
        """

        self._employer_address = employer_address

    @property
    def employer_city(self):
        """Gets the employer_city of this Patient.

        

        :return: The employer_city of this Patient.
        :rtype: str
        """
        return self._employer_city

    @employer_city.setter
    def employer_city(self, employer_city):
        """Sets the employer_city of this Patient.

        

        :param employer_city: The employer_city of this Patient.
        :type employer_city: str
        """

        self._employer_city = employer_city

    @property
    def employer_state(self):
        """Gets the employer_state of this Patient.

        Two-letter abbreviation

        :return: The employer_state of this Patient.
        :rtype: str
        """
        return self._employer_state

    @employer_state.setter
    def employer_state(self, employer_state):
        """Sets the employer_state of this Patient.

        Two-letter abbreviation

        :param employer_state: The employer_state of this Patient.
        :type employer_state: str
        """

        self._employer_state = employer_state

    @property
    def employer_zip_code(self):
        """Gets the employer_zip_code of this Patient.

        

        :return: The employer_zip_code of this Patient.
        :rtype: str
        """
        return self._employer_zip_code

    @employer_zip_code.setter
    def employer_zip_code(self, employer_zip_code):
        """Sets the employer_zip_code of this Patient.

        

        :param employer_zip_code: The employer_zip_code of this Patient.
        :type employer_zip_code: str
        """

        self._employer_zip_code = employer_zip_code

    @property
    def ethnicity(self):
        """Gets the ethnicity of this Patient.

        One of `\"blank\"`, `\"hispanic\"`, `\"not_hispanic\"` or `\"declined\"`

        :return: The ethnicity of this Patient.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this Patient.

        One of `\"blank\"`, `\"hispanic\"`, `\"not_hispanic\"` or `\"declined\"`

        :param ethnicity: The ethnicity of this Patient.
        :type ethnicity: str
        """
        allowed_values = ["blank", "hispanic", "not_hispanic", "declined"]  # noqa: E501
        if ethnicity not in allowed_values:
            raise ValueError(
                "Invalid value for `ethnicity` ({0}), must be one of {1}"
                .format(ethnicity, allowed_values)
            )

        self._ethnicity = ethnicity

    @property
    def first_name(self):
        """Gets the first_name of this Patient.

        

        :return: The first_name of this Patient.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Patient.

        

        :param first_name: The first_name of this Patient.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Patient.

        One of `\"Male\"`, `\"Female\"`, or `\"Other\"`

        :return: The gender of this Patient.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Patient.

        One of `\"Male\"`, `\"Female\"`, or `\"Other\"`

        :param gender: The gender of this Patient.
        :type gender: str
        """
        allowed_values = ["", "Male", "Female", "Other", "UNK", "ASKU"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def home_phone(self):
        """Gets the home_phone of this Patient.

        

        :return: The home_phone of this Patient.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Patient.

        

        :param home_phone: The home_phone of this Patient.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this Patient.

        

        :return: The id of this Patient.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Patient.

        

        :param id: The id of this Patient.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Patient.

        

        :return: The last_name of this Patient.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Patient.

        

        :param last_name: The last_name of this Patient.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Patient.

        

        :return: The middle_name of this Patient.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Patient.

        

        :param middle_name: The middle_name of this Patient.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def nick_name(self):
        """Gets the nick_name of this Patient.

        Common name for patient, should be used instead of first name if supplied.

        :return: The nick_name of this Patient.
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this Patient.

        Common name for patient, should be used instead of first name if supplied.

        :param nick_name: The nick_name of this Patient.
        :type nick_name: str
        """

        self._nick_name = nick_name

    @property
    def office_phone(self):
        """Gets the office_phone of this Patient.

        

        :return: The office_phone of this Patient.
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """Sets the office_phone of this Patient.

        

        :param office_phone: The office_phone of this Patient.
        :type office_phone: str
        """

        self._office_phone = office_phone

    @property
    def offices(self):
        """Gets the offices of this Patient.

        IDs of every office this patient has been to

        :return: The offices of this Patient.
        :rtype: List[int]
        """
        return self._offices

    @offices.setter
    def offices(self, offices):
        """Sets the offices of this Patient.

        IDs of every office this patient has been to

        :param offices: The offices of this Patient.
        :type offices: List[int]
        """

        self._offices = offices

    @property
    def patient_flags(self):
        """Gets the patient_flags of this Patient.

        Possible patient flag type that can be attached to the patient

        :return: The patient_flags of this Patient.
        :rtype: List[PatientFlagType1]
        """
        return self._patient_flags

    @patient_flags.setter
    def patient_flags(self, patient_flags):
        """Sets the patient_flags of this Patient.

        Possible patient flag type that can be attached to the patient

        :param patient_flags: The patient_flags of this Patient.
        :type patient_flags: List[PatientFlagType1]
        """

        self._patient_flags = patient_flags

    @property
    def patient_flags_attached(self):
        """Gets the patient_flags_attached of this Patient.

        Patient flags attached to the patient

        :return: The patient_flags_attached of this Patient.
        :rtype: List[PatientFlag]
        """
        return self._patient_flags_attached

    @patient_flags_attached.setter
    def patient_flags_attached(self, patient_flags_attached):
        """Sets the patient_flags_attached of this Patient.

        Patient flags attached to the patient

        :param patient_flags_attached: The patient_flags_attached of this Patient.
        :type patient_flags_attached: List[PatientFlag]
        """

        self._patient_flags_attached = patient_flags_attached

    @property
    def patient_payment_profile(self):
        """Gets the patient_payment_profile of this Patient.

        One of `\"\"`, `\"Cash\"`, `\"Insurance\"`, `\"Insurance Out of Network\"`, `\"Auto Accident\"` or `\"Worker's Comp\"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen.

        :return: The patient_payment_profile of this Patient.
        :rtype: str
        """
        return self._patient_payment_profile

    @patient_payment_profile.setter
    def patient_payment_profile(self, patient_payment_profile):
        """Sets the patient_payment_profile of this Patient.

        One of `\"\"`, `\"Cash\"`, `\"Insurance\"`, `\"Insurance Out of Network\"`, `\"Auto Accident\"` or `\"Worker's Comp\"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen.

        :param patient_payment_profile: The patient_payment_profile of this Patient.
        :type patient_payment_profile: str
        """
        allowed_values = ["", "Cash", "Insurance", "Insurance Out of Network", "Auto Accident", "Worker's Comp"]  # noqa: E501
        if patient_payment_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `patient_payment_profile` ({0}), must be one of {1}"
                .format(patient_payment_profile, allowed_values)
            )

        self._patient_payment_profile = patient_payment_profile

    @property
    def patient_photo(self):
        """Gets the patient_photo of this Patient.

        

        :return: The patient_photo of this Patient.
        :rtype: str
        """
        return self._patient_photo

    @patient_photo.setter
    def patient_photo(self, patient_photo):
        """Sets the patient_photo of this Patient.

        

        :param patient_photo: The patient_photo of this Patient.
        :type patient_photo: str
        """

        self._patient_photo = patient_photo

    @property
    def patient_photo_date(self):
        """Gets the patient_photo_date of this Patient.

        Cannot be passed without `patient_photo`

        :return: The patient_photo_date of this Patient.
        :rtype: str
        """
        return self._patient_photo_date

    @patient_photo_date.setter
    def patient_photo_date(self, patient_photo_date):
        """Sets the patient_photo_date of this Patient.

        Cannot be passed without `patient_photo`

        :param patient_photo_date: The patient_photo_date of this Patient.
        :type patient_photo_date: str
        """

        self._patient_photo_date = patient_photo_date

    @property
    def patient_status(self):
        """Gets the patient_status of this Patient.

        One of `\"A\"` (active), `\"I\"` (inactive), `\"D\"` (inactive-deceased)

        :return: The patient_status of this Patient.
        :rtype: str
        """
        return self._patient_status

    @patient_status.setter
    def patient_status(self, patient_status):
        """Sets the patient_status of this Patient.

        One of `\"A\"` (active), `\"I\"` (inactive), `\"D\"` (inactive-deceased)

        :param patient_status: The patient_status of this Patient.
        :type patient_status: str
        """
        allowed_values = ["A", "I", "D"]  # noqa: E501
        if patient_status not in allowed_values:
            raise ValueError(
                "Invalid value for `patient_status` ({0}), must be one of {1}"
                .format(patient_status, allowed_values)
            )

        self._patient_status = patient_status

    @property
    def preferred_language(self):
        """Gets the preferred_language of this Patient.

        Use ISO 639 alpha-3 codes

        :return: The preferred_language of this Patient.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this Patient.

        Use ISO 639 alpha-3 codes

        :param preferred_language: The preferred_language of this Patient.
        :type preferred_language: str
        """
        allowed_values = ["blank", "eng", "zho", "fra", "ita", "jpn", "por", "rus", "spa", "other", "unknown", "declined"]  # noqa: E501
        if preferred_language not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_language` ({0}), must be one of {1}"
                .format(preferred_language, allowed_values)
            )

        self._preferred_language = preferred_language

    @property
    def primary_care_physician(self):
        """Gets the primary_care_physician of this Patient.

        Referring doctor for this patient

        :return: The primary_care_physician of this Patient.
        :rtype: str
        """
        return self._primary_care_physician

    @primary_care_physician.setter
    def primary_care_physician(self, primary_care_physician):
        """Sets the primary_care_physician of this Patient.

        Referring doctor for this patient

        :param primary_care_physician: The primary_care_physician of this Patient.
        :type primary_care_physician: str
        """

        self._primary_care_physician = primary_care_physician

    @property
    def primary_insurance(self):
        """Gets the primary_insurance of this Patient.


        :return: The primary_insurance of this Patient.
        :rtype: PrimaryInsurance
        """
        return self._primary_insurance

    @primary_insurance.setter
    def primary_insurance(self, primary_insurance):
        """Sets the primary_insurance of this Patient.


        :param primary_insurance: The primary_insurance of this Patient.
        :type primary_insurance: PrimaryInsurance
        """

        self._primary_insurance = primary_insurance

    @property
    def race(self):
        """Gets the race of this Patient.

        One of `\"blank\"`, `\"indian\"`, `\"asian\"`, `\"black\"`, `\"hawaiian\"`, `\"white\"` or `\"declined\"`

        :return: The race of this Patient.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this Patient.

        One of `\"blank\"`, `\"indian\"`, `\"asian\"`, `\"black\"`, `\"hawaiian\"`, `\"white\"` or `\"declined\"`

        :param race: The race of this Patient.
        :type race: str
        """
        allowed_values = ["blank", "indian", "asian", "black", "hawaiian", "white", "other", "declined"]  # noqa: E501
        if race not in allowed_values:
            raise ValueError(
                "Invalid value for `race` ({0}), must be one of {1}"
                .format(race, allowed_values)
            )

        self._race = race

    @property
    def referring_doctor(self):
        """Gets the referring_doctor of this Patient.


        :return: The referring_doctor of this Patient.
        :rtype: Patient1
        """
        return self._referring_doctor

    @referring_doctor.setter
    def referring_doctor(self, referring_doctor):
        """Sets the referring_doctor of this Patient.


        :param referring_doctor: The referring_doctor of this Patient.
        :type referring_doctor: Patient1
        """

        self._referring_doctor = referring_doctor

    @property
    def referring_source(self):
        """Gets the referring_source of this Patient.

        Referring source.

        :return: The referring_source of this Patient.
        :rtype: str
        """
        return self._referring_source

    @referring_source.setter
    def referring_source(self, referring_source):
        """Sets the referring_source of this Patient.

        Referring source.

        :param referring_source: The referring_source of this Patient.
        :type referring_source: str
        """

        self._referring_source = referring_source

    @property
    def responsible_party_email(self):
        """Gets the responsible_party_email of this Patient.

        

        :return: The responsible_party_email of this Patient.
        :rtype: str
        """
        return self._responsible_party_email

    @responsible_party_email.setter
    def responsible_party_email(self, responsible_party_email):
        """Sets the responsible_party_email of this Patient.

        

        :param responsible_party_email: The responsible_party_email of this Patient.
        :type responsible_party_email: str
        """

        self._responsible_party_email = responsible_party_email

    @property
    def responsible_party_name(self):
        """Gets the responsible_party_name of this Patient.

        

        :return: The responsible_party_name of this Patient.
        :rtype: str
        """
        return self._responsible_party_name

    @responsible_party_name.setter
    def responsible_party_name(self, responsible_party_name):
        """Sets the responsible_party_name of this Patient.

        

        :param responsible_party_name: The responsible_party_name of this Patient.
        :type responsible_party_name: str
        """

        self._responsible_party_name = responsible_party_name

    @property
    def responsible_party_phone(self):
        """Gets the responsible_party_phone of this Patient.

        

        :return: The responsible_party_phone of this Patient.
        :rtype: str
        """
        return self._responsible_party_phone

    @responsible_party_phone.setter
    def responsible_party_phone(self, responsible_party_phone):
        """Sets the responsible_party_phone of this Patient.

        

        :param responsible_party_phone: The responsible_party_phone of this Patient.
        :type responsible_party_phone: str
        """

        self._responsible_party_phone = responsible_party_phone

    @property
    def responsible_party_relation(self):
        """Gets the responsible_party_relation of this Patient.

        

        :return: The responsible_party_relation of this Patient.
        :rtype: str
        """
        return self._responsible_party_relation

    @responsible_party_relation.setter
    def responsible_party_relation(self, responsible_party_relation):
        """Sets the responsible_party_relation of this Patient.

        

        :param responsible_party_relation: The responsible_party_relation of this Patient.
        :type responsible_party_relation: str
        """

        self._responsible_party_relation = responsible_party_relation

    @property
    def secondary_insurance(self):
        """Gets the secondary_insurance of this Patient.


        :return: The secondary_insurance of this Patient.
        :rtype: SecondaryInsurance
        """
        return self._secondary_insurance

    @secondary_insurance.setter
    def secondary_insurance(self, secondary_insurance):
        """Sets the secondary_insurance of this Patient.


        :param secondary_insurance: The secondary_insurance of this Patient.
        :type secondary_insurance: SecondaryInsurance
        """

        self._secondary_insurance = secondary_insurance

    @property
    def social_security_number(self):
        """Gets the social_security_number of this Patient.

        

        :return: The social_security_number of this Patient.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this Patient.

        

        :param social_security_number: The social_security_number of this Patient.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def state(self):
        """Gets the state of this Patient.

        Two-letter abbreviation

        :return: The state of this Patient.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Patient.

        Two-letter abbreviation

        :param state: The state of this Patient.
        :type state: str
        """

        self._state = state

    @property
    def tertiary_insurance(self):
        """Gets the tertiary_insurance of this Patient.


        :return: The tertiary_insurance of this Patient.
        :rtype: TertiaryInsurance
        """
        return self._tertiary_insurance

    @tertiary_insurance.setter
    def tertiary_insurance(self, tertiary_insurance):
        """Sets the tertiary_insurance of this Patient.


        :param tertiary_insurance: The tertiary_insurance of this Patient.
        :type tertiary_insurance: TertiaryInsurance
        """

        self._tertiary_insurance = tertiary_insurance

    @property
    def updated_at(self):
        """Gets the updated_at of this Patient.

        

        :return: The updated_at of this Patient.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Patient.

        

        :param updated_at: The updated_at of this Patient.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def workers_comp_insurance(self):
        """Gets the workers_comp_insurance of this Patient.


        :return: The workers_comp_insurance of this Patient.
        :rtype: WorkerCompInsurance
        """
        return self._workers_comp_insurance

    @workers_comp_insurance.setter
    def workers_comp_insurance(self, workers_comp_insurance):
        """Sets the workers_comp_insurance of this Patient.


        :param workers_comp_insurance: The workers_comp_insurance of this Patient.
        :type workers_comp_insurance: WorkerCompInsurance
        """

        self._workers_comp_insurance = workers_comp_insurance

    @property
    def zip_code(self):
        """Gets the zip_code of this Patient.

        

        :return: The zip_code of this Patient.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Patient.

        

        :param zip_code: The zip_code of this Patient.
        :type zip_code: str
        """

        self._zip_code = zip_code
