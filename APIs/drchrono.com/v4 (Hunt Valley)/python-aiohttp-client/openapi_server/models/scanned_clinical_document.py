# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScannedClinicalDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, _date: str=None, description: str=None, doctor: int=None, document: str=None, id: int=None, metatags: str=None, patient: int=None, updated_at: str=None):
        """ScannedClinicalDocument - a model defined in OpenAPI

        :param archived: The archived of this ScannedClinicalDocument.
        :param _date: The _date of this ScannedClinicalDocument.
        :param description: The description of this ScannedClinicalDocument.
        :param doctor: The doctor of this ScannedClinicalDocument.
        :param document: The document of this ScannedClinicalDocument.
        :param id: The id of this ScannedClinicalDocument.
        :param metatags: The metatags of this ScannedClinicalDocument.
        :param patient: The patient of this ScannedClinicalDocument.
        :param updated_at: The updated_at of this ScannedClinicalDocument.
        """
        self.openapi_types = {
            'archived': bool,
            '_date': str,
            'description': str,
            'doctor': int,
            'document': str,
            'id': int,
            'metatags': str,
            'patient': int,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            '_date': 'date',
            'description': 'description',
            'doctor': 'doctor',
            'document': 'document',
            'id': 'id',
            'metatags': 'metatags',
            'patient': 'patient',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self.__date = _date
        self._description = description
        self._doctor = doctor
        self._document = document
        self._id = id
        self._metatags = metatags
        self._patient = patient
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScannedClinicalDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScannedClinicalDocument of this ScannedClinicalDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ScannedClinicalDocument.

        `DELETE` operation will set this field to `true`

        :return: The archived of this ScannedClinicalDocument.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ScannedClinicalDocument.

        `DELETE` operation will set this field to `true`

        :param archived: The archived of this ScannedClinicalDocument.
        :type archived: bool
        """

        self._archived = archived

    @property
    def _date(self):
        """Gets the _date of this ScannedClinicalDocument.

        

        :return: The _date of this ScannedClinicalDocument.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ScannedClinicalDocument.

        

        :param _date: The _date of this ScannedClinicalDocument.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this ScannedClinicalDocument.

        

        :return: The description of this ScannedClinicalDocument.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScannedClinicalDocument.

        

        :param description: The description of this ScannedClinicalDocument.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def doctor(self):
        """Gets the doctor of this ScannedClinicalDocument.

        ID of the doctor who owns the document

        :return: The doctor of this ScannedClinicalDocument.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this ScannedClinicalDocument.

        ID of the doctor who owns the document

        :param doctor: The doctor of this ScannedClinicalDocument.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def document(self):
        """Gets the document of this ScannedClinicalDocument.

        When creating, if you receive response as 201, but this field is `null`, please send a `GET` request with the created object's ID to retrieve the updated file URL

        :return: The document of this ScannedClinicalDocument.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ScannedClinicalDocument.

        When creating, if you receive response as 201, but this field is `null`, please send a `GET` request with the created object's ID to retrieve the updated file URL

        :param document: The document of this ScannedClinicalDocument.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def id(self):
        """Gets the id of this ScannedClinicalDocument.

        

        :return: The id of this ScannedClinicalDocument.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScannedClinicalDocument.

        

        :param id: The id of this ScannedClinicalDocument.
        :type id: int
        """

        self._id = id

    @property
    def metatags(self):
        """Gets the metatags of this ScannedClinicalDocument.

        Array of tags represented as string. This should be quoted--e.g. `'[\"a\", \"b\"]'`--since this endpoint requires `multipart/form-data` encoding

        :return: The metatags of this ScannedClinicalDocument.
        :rtype: str
        """
        return self._metatags

    @metatags.setter
    def metatags(self, metatags):
        """Sets the metatags of this ScannedClinicalDocument.

        Array of tags represented as string. This should be quoted--e.g. `'[\"a\", \"b\"]'`--since this endpoint requires `multipart/form-data` encoding

        :param metatags: The metatags of this ScannedClinicalDocument.
        :type metatags: str
        """

        self._metatags = metatags

    @property
    def patient(self):
        """Gets the patient of this ScannedClinicalDocument.

        ID of the patient the document concerns

        :return: The patient of this ScannedClinicalDocument.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this ScannedClinicalDocument.

        ID of the patient the document concerns

        :param patient: The patient of this ScannedClinicalDocument.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def updated_at(self):
        """Gets the updated_at of this ScannedClinicalDocument.

        

        :return: The updated_at of this ScannedClinicalDocument.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ScannedClinicalDocument.

        

        :param updated_at: The updated_at of this ScannedClinicalDocument.
        :type updated_at: str
        """

        self._updated_at = updated_at
