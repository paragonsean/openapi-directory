# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Doctor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_phone: str=None, country: str=None, email: str=None, first_name: str=None, group_npi_number: str=None, home_phone: str=None, id: int=None, is_account_suspended: bool=None, job_title: str=None, last_name: str=None, npi_number: str=None, office_phone: str=None, practice_group: str=None, practice_group_name: str=None, profile_picture: str=None, specialty: str=None, suffix: str=None, timezone: str=None, website: str=None):
        """Doctor - a model defined in OpenAPI

        :param cell_phone: The cell_phone of this Doctor.
        :param country: The country of this Doctor.
        :param email: The email of this Doctor.
        :param first_name: The first_name of this Doctor.
        :param group_npi_number: The group_npi_number of this Doctor.
        :param home_phone: The home_phone of this Doctor.
        :param id: The id of this Doctor.
        :param is_account_suspended: The is_account_suspended of this Doctor.
        :param job_title: The job_title of this Doctor.
        :param last_name: The last_name of this Doctor.
        :param npi_number: The npi_number of this Doctor.
        :param office_phone: The office_phone of this Doctor.
        :param practice_group: The practice_group of this Doctor.
        :param practice_group_name: The practice_group_name of this Doctor.
        :param profile_picture: The profile_picture of this Doctor.
        :param specialty: The specialty of this Doctor.
        :param suffix: The suffix of this Doctor.
        :param timezone: The timezone of this Doctor.
        :param website: The website of this Doctor.
        """
        self.openapi_types = {
            'cell_phone': str,
            'country': str,
            'email': str,
            'first_name': str,
            'group_npi_number': str,
            'home_phone': str,
            'id': int,
            'is_account_suspended': bool,
            'job_title': str,
            'last_name': str,
            'npi_number': str,
            'office_phone': str,
            'practice_group': str,
            'practice_group_name': str,
            'profile_picture': str,
            'specialty': str,
            'suffix': str,
            'timezone': str,
            'website': str
        }

        self.attribute_map = {
            'cell_phone': 'cell_phone',
            'country': 'country',
            'email': 'email',
            'first_name': 'first_name',
            'group_npi_number': 'group_npi_number',
            'home_phone': 'home_phone',
            'id': 'id',
            'is_account_suspended': 'is_account_suspended',
            'job_title': 'job_title',
            'last_name': 'last_name',
            'npi_number': 'npi_number',
            'office_phone': 'office_phone',
            'practice_group': 'practice_group',
            'practice_group_name': 'practice_group_name',
            'profile_picture': 'profile_picture',
            'specialty': 'specialty',
            'suffix': 'suffix',
            'timezone': 'timezone',
            'website': 'website'
        }

        self._cell_phone = cell_phone
        self._country = country
        self._email = email
        self._first_name = first_name
        self._group_npi_number = group_npi_number
        self._home_phone = home_phone
        self._id = id
        self._is_account_suspended = is_account_suspended
        self._job_title = job_title
        self._last_name = last_name
        self._npi_number = npi_number
        self._office_phone = office_phone
        self._practice_group = practice_group
        self._practice_group_name = practice_group_name
        self._profile_picture = profile_picture
        self._specialty = specialty
        self._suffix = suffix
        self._timezone = timezone
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Doctor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Doctor of this Doctor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_phone(self):
        """Gets the cell_phone of this Doctor.

        

        :return: The cell_phone of this Doctor.
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this Doctor.

        

        :param cell_phone: The cell_phone of this Doctor.
        :type cell_phone: str
        """

        self._cell_phone = cell_phone

    @property
    def country(self):
        """Gets the country of this Doctor.

        Two-letter conutry code. Default is `US`

        :return: The country of this Doctor.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Doctor.

        Two-letter conutry code. Default is `US`

        :param country: The country of this Doctor.
        :type country: str
        """
        allowed_values = ["BD", "WF", "BF", "BG", "BA", "BB", "BE", "BL", "BM", "BN", "BO", "JP", "BI", "BJ", "BT", "JM", "BV", "JO", "WS", "BQ", "BR", "BS", "JE", "BY", "BZ", "RU", "RW", "RS", "TL", "RE", "TM", "TJ", "RO", "TK", "GW", "GU", "GT", "GS", "GR", "GQ", "GP", "BH", "GY", "GG", "GF", "GE", "GD", "GB", "GA", "GN", "GM", "GL", "KW", "GI", "GH", "OM", "TN", "BW", "HR", "HT", "HU", "HK", "HN", "HM", "KR", "AD", "PR", "PS", "PW", "PT", "KN", "PY", "AI", "PA", "PF", "PG", "PE", "PK", "PH", "PN", "PL", "PM", "ZM", "EH", "EE", "EG", "ZA", "EC", "AL", "AO", "KZ", "ET", "ZW", "KY", "ES", "ER", "ME", "MD", "MG", "MF", "MA", "MC", "UZ", "MM", "ML", "MO", "MN", "MH", "MK", "MU", "MT", "MW", "MV", "MQ", "MP", "MS", "MR", "AU", "UG", "MY", "MX", "MZ", "FR", "AW", "AF", "AX", "FI", "FJ", "FK", "FM", "FO", "NI", "NL", "false", "NA", "VU", "NC", "NE", "NF", "NG", "NZ", "NP", "NR", "NU", "CK", "CI", "CH", "CO", "CN", "CM", "CL", "CC", "CA", "CG", "CF", "CD", "CZ", "CY", "CX", "CR", "KP", "CW", "CV", "CU", "SZ", "SY", "SX", "KG", "KE", "SS", "SR", "KI", "KH", "SV", "KM", "ST", "SK", "SJ", "SI", "SH", "SO", "SN", "SM", "SL", "SC", "SB", "SA", "SG", "SE", "SD", "DO", "DM", "DJ", "DK", "DE", "YE", "AT", "DZ", "US", "UY", "YT", "UM", "LB", "LC", "LA", "TV", "TW", "TT", "TR", "LK", "LI", "LV", "TO", "LT", "LU", "LR", "LS", "TH", "TF", "TG", "TD", "TC", "LY", "VA", "VC", "AE", "VE", "AG", "VG", "IQ", "VI", "IS", "IR", "AM", "IT", "VN", "AQ", "AS", "AR", "IM", "IL", "IO", "IN", "TZ", "AZ", "IE", "ID", "UA", "QA"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def email(self):
        """Gets the email of this Doctor.

        

        :return: The email of this Doctor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Doctor.

        

        :param email: The email of this Doctor.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Doctor.

        

        :return: The first_name of this Doctor.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Doctor.

        

        :param first_name: The first_name of this Doctor.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def group_npi_number(self):
        """Gets the group_npi_number of this Doctor.

        

        :return: The group_npi_number of this Doctor.
        :rtype: str
        """
        return self._group_npi_number

    @group_npi_number.setter
    def group_npi_number(self, group_npi_number):
        """Sets the group_npi_number of this Doctor.

        

        :param group_npi_number: The group_npi_number of this Doctor.
        :type group_npi_number: str
        """

        self._group_npi_number = group_npi_number

    @property
    def home_phone(self):
        """Gets the home_phone of this Doctor.

        

        :return: The home_phone of this Doctor.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Doctor.

        

        :param home_phone: The home_phone of this Doctor.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this Doctor.

        

        :return: The id of this Doctor.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Doctor.

        

        :param id: The id of this Doctor.
        :type id: int
        """

        self._id = id

    @property
    def is_account_suspended(self):
        """Gets the is_account_suspended of this Doctor.

        Indicates the doctor's account is suspended or not

        :return: The is_account_suspended of this Doctor.
        :rtype: bool
        """
        return self._is_account_suspended

    @is_account_suspended.setter
    def is_account_suspended(self, is_account_suspended):
        """Sets the is_account_suspended of this Doctor.

        Indicates the doctor's account is suspended or not

        :param is_account_suspended: The is_account_suspended of this Doctor.
        :type is_account_suspended: bool
        """

        self._is_account_suspended = is_account_suspended

    @property
    def job_title(self):
        """Gets the job_title of this Doctor.

        

        :return: The job_title of this Doctor.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Doctor.

        

        :param job_title: The job_title of this Doctor.
        :type job_title: str
        """
        allowed_values = ["", "Provider/Staff (Private Practice)", "Provider/Staff (Hospital)", "Patients/Interview Candidate", "Educator/Student", "API/Developer", "Consultant", "Other"]  # noqa: E501
        if job_title not in allowed_values:
            raise ValueError(
                "Invalid value for `job_title` ({0}), must be one of {1}"
                .format(job_title, allowed_values)
            )

        self._job_title = job_title

    @property
    def last_name(self):
        """Gets the last_name of this Doctor.

        

        :return: The last_name of this Doctor.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Doctor.

        

        :param last_name: The last_name of this Doctor.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def npi_number(self):
        """Gets the npi_number of this Doctor.

        If both this field and `group_npi_number` are set, prefer this field

        :return: The npi_number of this Doctor.
        :rtype: str
        """
        return self._npi_number

    @npi_number.setter
    def npi_number(self, npi_number):
        """Sets the npi_number of this Doctor.

        If both this field and `group_npi_number` are set, prefer this field

        :param npi_number: The npi_number of this Doctor.
        :type npi_number: str
        """

        self._npi_number = npi_number

    @property
    def office_phone(self):
        """Gets the office_phone of this Doctor.

        

        :return: The office_phone of this Doctor.
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """Sets the office_phone of this Doctor.

        

        :param office_phone: The office_phone of this Doctor.
        :type office_phone: str
        """

        self._office_phone = office_phone

    @property
    def practice_group(self):
        """Gets the practice_group of this Doctor.

        The ID of the practice group this user belongs to. This can be used to identify users in the same practice.

        :return: The practice_group of this Doctor.
        :rtype: str
        """
        return self._practice_group

    @practice_group.setter
    def practice_group(self, practice_group):
        """Sets the practice_group of this Doctor.

        The ID of the practice group this user belongs to. This can be used to identify users in the same practice.

        :param practice_group: The practice_group of this Doctor.
        :type practice_group: str
        """

        self._practice_group = practice_group

    @property
    def practice_group_name(self):
        """Gets the practice_group_name of this Doctor.

        

        :return: The practice_group_name of this Doctor.
        :rtype: str
        """
        return self._practice_group_name

    @practice_group_name.setter
    def practice_group_name(self, practice_group_name):
        """Sets the practice_group_name of this Doctor.

        

        :param practice_group_name: The practice_group_name of this Doctor.
        :type practice_group_name: str
        """

        self._practice_group_name = practice_group_name

    @property
    def profile_picture(self):
        """Gets the profile_picture of this Doctor.

        

        :return: The profile_picture of this Doctor.
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this Doctor.

        

        :param profile_picture: The profile_picture of this Doctor.
        :type profile_picture: str
        """

        self._profile_picture = profile_picture

    @property
    def specialty(self):
        """Gets the specialty of this Doctor.

        

        :return: The specialty of this Doctor.
        :rtype: str
        """
        return self._specialty

    @specialty.setter
    def specialty(self, specialty):
        """Sets the specialty of this Doctor.

        

        :param specialty: The specialty of this Doctor.
        :type specialty: str
        """

        self._specialty = specialty

    @property
    def suffix(self):
        """Gets the suffix of this Doctor.

        

        :return: The suffix of this Doctor.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Doctor.

        

        :param suffix: The suffix of this Doctor.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def timezone(self):
        """Gets the timezone of this Doctor.

        

        :return: The timezone of this Doctor.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Doctor.

        

        :param timezone: The timezone of this Doctor.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def website(self):
        """Gets the website of this Doctor.

        

        :return: The website of this Doctor.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Doctor.

        

        :param website: The website of this Doctor.
        :type website: str
        """

        self._website = website
