# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_message_attachment import PatientMessageAttachment
from openapi_server import util


class PatientMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[PatientMessageAttachment]=None, body: str=None, created_at: str=None, doctor: int=None, id: int=None, message: str=None, patient: int=None, subject: str=None, updated_at: str=None):
        """PatientMessage - a model defined in OpenAPI

        :param attachments: The attachments of this PatientMessage.
        :param body: The body of this PatientMessage.
        :param created_at: The created_at of this PatientMessage.
        :param doctor: The doctor of this PatientMessage.
        :param id: The id of this PatientMessage.
        :param message: The message of this PatientMessage.
        :param patient: The patient of this PatientMessage.
        :param subject: The subject of this PatientMessage.
        :param updated_at: The updated_at of this PatientMessage.
        """
        self.openapi_types = {
            'attachments': List[PatientMessageAttachment],
            'body': str,
            'created_at': str,
            'doctor': int,
            'id': int,
            'message': str,
            'patient': int,
            'subject': str,
            'updated_at': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'body': 'body',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'message': 'message',
            'patient': 'patient',
            'subject': 'subject',
            'updated_at': 'updated_at'
        }

        self._attachments = attachments
        self._body = body
        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._message = message
        self._patient = patient
        self._subject = subject
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientMessage of this PatientMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this PatientMessage.

        

        :return: The attachments of this PatientMessage.
        :rtype: List[PatientMessageAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PatientMessage.

        

        :param attachments: The attachments of this PatientMessage.
        :type attachments: List[PatientMessageAttachment]
        """

        self._attachments = attachments

    @property
    def body(self):
        """Gets the body of this PatientMessage.

        

        :return: The body of this PatientMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PatientMessage.

        

        :param body: The body of this PatientMessage.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this PatientMessage.

        

        :return: The created_at of this PatientMessage.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientMessage.

        

        :param created_at: The created_at of this PatientMessage.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this PatientMessage.

        

        :return: The doctor of this PatientMessage.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientMessage.

        

        :param doctor: The doctor of this PatientMessage.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this PatientMessage.

        

        :return: The id of this PatientMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientMessage.

        

        :param id: The id of this PatientMessage.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this PatientMessage.

        

        :return: The message of this PatientMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PatientMessage.

        

        :param message: The message of this PatientMessage.
        :type message: str
        """

        self._message = message

    @property
    def patient(self):
        """Gets the patient of this PatientMessage.

        

        :return: The patient of this PatientMessage.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientMessage.

        

        :param patient: The patient of this PatientMessage.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def subject(self):
        """Gets the subject of this PatientMessage.

        

        :return: The subject of this PatientMessage.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PatientMessage.

        

        :param subject: The subject of this PatientMessage.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def updated_at(self):
        """Gets the updated_at of this PatientMessage.

        

        :return: The updated_at of this PatientMessage.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PatientMessage.

        

        :param updated_at: The updated_at of this PatientMessage.
        :type updated_at: str
        """

        self._updated_at = updated_at
