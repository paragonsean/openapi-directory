# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomVitalType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List[str]=None, archived: bool=None, data_type: str=None, description: str=None, doctor: str=None, fraction_delimiter: str=None, id: int=None, is_fraction_field: bool=None, name: str=None, unit: str=None):
        """CustomVitalType - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this CustomVitalType.
        :param archived: The archived of this CustomVitalType.
        :param data_type: The data_type of this CustomVitalType.
        :param description: The description of this CustomVitalType.
        :param doctor: The doctor of this CustomVitalType.
        :param fraction_delimiter: The fraction_delimiter of this CustomVitalType.
        :param id: The id of this CustomVitalType.
        :param is_fraction_field: The is_fraction_field of this CustomVitalType.
        :param name: The name of this CustomVitalType.
        :param unit: The unit of this CustomVitalType.
        """
        self.openapi_types = {
            'allowed_values': List[str],
            'archived': bool,
            'data_type': str,
            'description': str,
            'doctor': str,
            'fraction_delimiter': str,
            'id': int,
            'is_fraction_field': bool,
            'name': str,
            'unit': str
        }

        self.attribute_map = {
            'allowed_values': 'allowed_values',
            'archived': 'archived',
            'data_type': 'data_type',
            'description': 'description',
            'doctor': 'doctor',
            'fraction_delimiter': 'fraction_delimiter',
            'id': 'id',
            'is_fraction_field': 'is_fraction_field',
            'name': 'name',
            'unit': 'unit'
        }

        self._allowed_values = allowed_values
        self._archived = archived
        self._data_type = data_type
        self._description = description
        self._doctor = doctor
        self._fraction_delimiter = fraction_delimiter
        self._id = id
        self._is_fraction_field = is_fraction_field
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomVitalType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomVitalType of this CustomVitalType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this CustomVitalType.

        If `data_type` is `single_sel`, this is the array of values in the select's dropdown.

        :return: The allowed_values of this CustomVitalType.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this CustomVitalType.

        If `data_type` is `single_sel`, this is the array of values in the select's dropdown.

        :param allowed_values: The allowed_values of this CustomVitalType.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def archived(self):
        """Gets the archived of this CustomVitalType.

        Indicates that the object has been soft-deleted and should not be used

        :return: The archived of this CustomVitalType.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this CustomVitalType.

        Indicates that the object has been soft-deleted and should not be used

        :param archived: The archived of this CustomVitalType.
        :type archived: bool
        """

        self._archived = archived

    @property
    def data_type(self):
        """Gets the data_type of this CustomVitalType.

        One of `text`, `number`, or `single_sel`

        :return: The data_type of this CustomVitalType.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CustomVitalType.

        One of `text`, `number`, or `single_sel`

        :param data_type: The data_type of this CustomVitalType.
        :type data_type: str
        """
        allowed_values = ["text", "number", "single_sel"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this CustomVitalType.

        

        :return: The description of this CustomVitalType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomVitalType.

        

        :param description: The description of this CustomVitalType.
        :type description: str
        """

        self._description = description

    @property
    def doctor(self):
        """Gets the doctor of this CustomVitalType.

        ID of the doctor who created the custom vital

        :return: The doctor of this CustomVitalType.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this CustomVitalType.

        ID of the doctor who created the custom vital

        :param doctor: The doctor of this CustomVitalType.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def fraction_delimiter(self):
        """Gets the fraction_delimiter of this CustomVitalType.

        If `is_fraction_field` is true, this is the character separating the numerator and denominator

        :return: The fraction_delimiter of this CustomVitalType.
        :rtype: str
        """
        return self._fraction_delimiter

    @fraction_delimiter.setter
    def fraction_delimiter(self, fraction_delimiter):
        """Sets the fraction_delimiter of this CustomVitalType.

        If `is_fraction_field` is true, this is the character separating the numerator and denominator

        :param fraction_delimiter: The fraction_delimiter of this CustomVitalType.
        :type fraction_delimiter: str
        """

        self._fraction_delimiter = fraction_delimiter

    @property
    def id(self):
        """Gets the id of this CustomVitalType.

        

        :return: The id of this CustomVitalType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomVitalType.

        

        :param id: The id of this CustomVitalType.
        :type id: int
        """

        self._id = id

    @property
    def is_fraction_field(self):
        """Gets the is_fraction_field of this CustomVitalType.

        

        :return: The is_fraction_field of this CustomVitalType.
        :rtype: bool
        """
        return self._is_fraction_field

    @is_fraction_field.setter
    def is_fraction_field(self, is_fraction_field):
        """Sets the is_fraction_field of this CustomVitalType.

        

        :param is_fraction_field: The is_fraction_field of this CustomVitalType.
        :type is_fraction_field: bool
        """

        self._is_fraction_field = is_fraction_field

    @property
    def name(self):
        """Gets the name of this CustomVitalType.

        

        :return: The name of this CustomVitalType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomVitalType.

        

        :param name: The name of this CustomVitalType.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this CustomVitalType.

        

        :return: The unit of this CustomVitalType.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CustomVitalType.

        

        :param unit: The unit of this CustomVitalType.
        :type unit: str
        """

        self._unit = unit
