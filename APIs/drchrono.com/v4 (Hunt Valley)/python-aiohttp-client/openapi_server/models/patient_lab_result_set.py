# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientLabResultSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, date_test_performed: str=None, doctor_comments: str=None, doctor_signoff: bool=None, id: int=None, lab_abnormal_flag: str=None, lab_imported_from_ccr: str=None, lab_normal_range: str=None, lab_normal_range_units: str=None, lab_order_status: str=None, lab_result_value: str=None, lab_result_value_as_float: float=None, lab_result_value_units: str=None, loinc_code: str=None, ordering_doctor: int=None, patient: int=None, scanned_in_result: str=None, title: str=None, updated_at: str=None):
        """PatientLabResultSet - a model defined in OpenAPI

        :param created_at: The created_at of this PatientLabResultSet.
        :param date_test_performed: The date_test_performed of this PatientLabResultSet.
        :param doctor_comments: The doctor_comments of this PatientLabResultSet.
        :param doctor_signoff: The doctor_signoff of this PatientLabResultSet.
        :param id: The id of this PatientLabResultSet.
        :param lab_abnormal_flag: The lab_abnormal_flag of this PatientLabResultSet.
        :param lab_imported_from_ccr: The lab_imported_from_ccr of this PatientLabResultSet.
        :param lab_normal_range: The lab_normal_range of this PatientLabResultSet.
        :param lab_normal_range_units: The lab_normal_range_units of this PatientLabResultSet.
        :param lab_order_status: The lab_order_status of this PatientLabResultSet.
        :param lab_result_value: The lab_result_value of this PatientLabResultSet.
        :param lab_result_value_as_float: The lab_result_value_as_float of this PatientLabResultSet.
        :param lab_result_value_units: The lab_result_value_units of this PatientLabResultSet.
        :param loinc_code: The loinc_code of this PatientLabResultSet.
        :param ordering_doctor: The ordering_doctor of this PatientLabResultSet.
        :param patient: The patient of this PatientLabResultSet.
        :param scanned_in_result: The scanned_in_result of this PatientLabResultSet.
        :param title: The title of this PatientLabResultSet.
        :param updated_at: The updated_at of this PatientLabResultSet.
        """
        self.openapi_types = {
            'created_at': str,
            'date_test_performed': str,
            'doctor_comments': str,
            'doctor_signoff': bool,
            'id': int,
            'lab_abnormal_flag': str,
            'lab_imported_from_ccr': str,
            'lab_normal_range': str,
            'lab_normal_range_units': str,
            'lab_order_status': str,
            'lab_result_value': str,
            'lab_result_value_as_float': float,
            'lab_result_value_units': str,
            'loinc_code': str,
            'ordering_doctor': int,
            'patient': int,
            'scanned_in_result': str,
            'title': str,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'date_test_performed': 'date_test_performed',
            'doctor_comments': 'doctor_comments',
            'doctor_signoff': 'doctor_signoff',
            'id': 'id',
            'lab_abnormal_flag': 'lab_abnormal_flag',
            'lab_imported_from_ccr': 'lab_imported_from_ccr',
            'lab_normal_range': 'lab_normal_range',
            'lab_normal_range_units': 'lab_normal_range_units',
            'lab_order_status': 'lab_order_status',
            'lab_result_value': 'lab_result_value',
            'lab_result_value_as_float': 'lab_result_value_as_float',
            'lab_result_value_units': 'lab_result_value_units',
            'loinc_code': 'loinc_code',
            'ordering_doctor': 'ordering_doctor',
            'patient': 'patient',
            'scanned_in_result': 'scanned_in_result',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._date_test_performed = date_test_performed
        self._doctor_comments = doctor_comments
        self._doctor_signoff = doctor_signoff
        self._id = id
        self._lab_abnormal_flag = lab_abnormal_flag
        self._lab_imported_from_ccr = lab_imported_from_ccr
        self._lab_normal_range = lab_normal_range
        self._lab_normal_range_units = lab_normal_range_units
        self._lab_order_status = lab_order_status
        self._lab_result_value = lab_result_value
        self._lab_result_value_as_float = lab_result_value_as_float
        self._lab_result_value_units = lab_result_value_units
        self._loinc_code = loinc_code
        self._ordering_doctor = ordering_doctor
        self._patient = patient
        self._scanned_in_result = scanned_in_result
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientLabResultSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientLabResultSet of this PatientLabResultSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PatientLabResultSet.

        

        :return: The created_at of this PatientLabResultSet.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientLabResultSet.

        

        :param created_at: The created_at of this PatientLabResultSet.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def date_test_performed(self):
        """Gets the date_test_performed of this PatientLabResultSet.

        Date of lab test.

        :return: The date_test_performed of this PatientLabResultSet.
        :rtype: str
        """
        return self._date_test_performed

    @date_test_performed.setter
    def date_test_performed(self, date_test_performed):
        """Sets the date_test_performed of this PatientLabResultSet.

        Date of lab test.

        :param date_test_performed: The date_test_performed of this PatientLabResultSet.
        :type date_test_performed: str
        """

        self._date_test_performed = date_test_performed

    @property
    def doctor_comments(self):
        """Gets the doctor_comments of this PatientLabResultSet.

        Comment from the doctor on lab result.

        :return: The doctor_comments of this PatientLabResultSet.
        :rtype: str
        """
        return self._doctor_comments

    @doctor_comments.setter
    def doctor_comments(self, doctor_comments):
        """Sets the doctor_comments of this PatientLabResultSet.

        Comment from the doctor on lab result.

        :param doctor_comments: The doctor_comments of this PatientLabResultSet.
        :type doctor_comments: str
        """

        self._doctor_comments = doctor_comments

    @property
    def doctor_signoff(self):
        """Gets the doctor_signoff of this PatientLabResultSet.

        Check this box when the doctor has reviewed the lab result and taken appropriate action.

        :return: The doctor_signoff of this PatientLabResultSet.
        :rtype: bool
        """
        return self._doctor_signoff

    @doctor_signoff.setter
    def doctor_signoff(self, doctor_signoff):
        """Sets the doctor_signoff of this PatientLabResultSet.

        Check this box when the doctor has reviewed the lab result and taken appropriate action.

        :param doctor_signoff: The doctor_signoff of this PatientLabResultSet.
        :type doctor_signoff: bool
        """

        self._doctor_signoff = doctor_signoff

    @property
    def id(self):
        """Gets the id of this PatientLabResultSet.

        

        :return: The id of this PatientLabResultSet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientLabResultSet.

        

        :param id: The id of this PatientLabResultSet.
        :type id: int
        """

        self._id = id

    @property
    def lab_abnormal_flag(self):
        """Gets the lab_abnormal_flag of this PatientLabResultSet.

        HL7 codified abnormal flag for the result.

        :return: The lab_abnormal_flag of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_abnormal_flag

    @lab_abnormal_flag.setter
    def lab_abnormal_flag(self, lab_abnormal_flag):
        """Sets the lab_abnormal_flag of this PatientLabResultSet.

        HL7 codified abnormal flag for the result.

        :param lab_abnormal_flag: The lab_abnormal_flag of this PatientLabResultSet.
        :type lab_abnormal_flag: str
        """
        allowed_values = ["", "L", "H", "LL", "HH", "<", ">", "N", "A", "AA", "null", "U", "D", "B", "W", "S", "R", "I", "MS", "VS"]  # noqa: E501
        if lab_abnormal_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_abnormal_flag` ({0}), must be one of {1}"
                .format(lab_abnormal_flag, allowed_values)
            )

        self._lab_abnormal_flag = lab_abnormal_flag

    @property
    def lab_imported_from_ccr(self):
        """Gets the lab_imported_from_ccr of this PatientLabResultSet.

        Imported CCR document that contains lab results.

        :return: The lab_imported_from_ccr of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_imported_from_ccr

    @lab_imported_from_ccr.setter
    def lab_imported_from_ccr(self, lab_imported_from_ccr):
        """Sets the lab_imported_from_ccr of this PatientLabResultSet.

        Imported CCR document that contains lab results.

        :param lab_imported_from_ccr: The lab_imported_from_ccr of this PatientLabResultSet.
        :type lab_imported_from_ccr: str
        """

        self._lab_imported_from_ccr = lab_imported_from_ccr

    @property
    def lab_normal_range(self):
        """Gets the lab_normal_range of this PatientLabResultSet.

        

        :return: The lab_normal_range of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_normal_range

    @lab_normal_range.setter
    def lab_normal_range(self, lab_normal_range):
        """Sets the lab_normal_range of this PatientLabResultSet.

        

        :param lab_normal_range: The lab_normal_range of this PatientLabResultSet.
        :type lab_normal_range: str
        """

        self._lab_normal_range = lab_normal_range

    @property
    def lab_normal_range_units(self):
        """Gets the lab_normal_range_units of this PatientLabResultSet.

        

        :return: The lab_normal_range_units of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_normal_range_units

    @lab_normal_range_units.setter
    def lab_normal_range_units(self, lab_normal_range_units):
        """Sets the lab_normal_range_units of this PatientLabResultSet.

        

        :param lab_normal_range_units: The lab_normal_range_units of this PatientLabResultSet.
        :type lab_normal_range_units: str
        """

        self._lab_normal_range_units = lab_normal_range_units

    @property
    def lab_order_status(self):
        """Gets the lab_order_status of this PatientLabResultSet.

        Status of the lab order.

        :return: The lab_order_status of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_order_status

    @lab_order_status.setter
    def lab_order_status(self, lab_order_status):
        """Sets the lab_order_status of this PatientLabResultSet.

        Status of the lab order.

        :param lab_order_status: The lab_order_status of this PatientLabResultSet.
        :type lab_order_status: str
        """
        allowed_values = ["", "Order Entered", "Discontinued", "In Progress", "Results Received", "Results Reviewed with Patient", "Paper Order"]  # noqa: E501
        if lab_order_status not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_order_status` ({0}), must be one of {1}"
                .format(lab_order_status, allowed_values)
            )

        self._lab_order_status = lab_order_status

    @property
    def lab_result_value(self):
        """Gets the lab_result_value of this PatientLabResultSet.

        

        :return: The lab_result_value of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_result_value

    @lab_result_value.setter
    def lab_result_value(self, lab_result_value):
        """Sets the lab_result_value of this PatientLabResultSet.

        

        :param lab_result_value: The lab_result_value of this PatientLabResultSet.
        :type lab_result_value: str
        """

        self._lab_result_value = lab_result_value

    @property
    def lab_result_value_as_float(self):
        """Gets the lab_result_value_as_float of this PatientLabResultSet.

        

        :return: The lab_result_value_as_float of this PatientLabResultSet.
        :rtype: float
        """
        return self._lab_result_value_as_float

    @lab_result_value_as_float.setter
    def lab_result_value_as_float(self, lab_result_value_as_float):
        """Sets the lab_result_value_as_float of this PatientLabResultSet.

        

        :param lab_result_value_as_float: The lab_result_value_as_float of this PatientLabResultSet.
        :type lab_result_value_as_float: float
        """

        self._lab_result_value_as_float = lab_result_value_as_float

    @property
    def lab_result_value_units(self):
        """Gets the lab_result_value_units of this PatientLabResultSet.

        

        :return: The lab_result_value_units of this PatientLabResultSet.
        :rtype: str
        """
        return self._lab_result_value_units

    @lab_result_value_units.setter
    def lab_result_value_units(self, lab_result_value_units):
        """Sets the lab_result_value_units of this PatientLabResultSet.

        

        :param lab_result_value_units: The lab_result_value_units of this PatientLabResultSet.
        :type lab_result_value_units: str
        """

        self._lab_result_value_units = lab_result_value_units

    @property
    def loinc_code(self):
        """Gets the loinc_code of this PatientLabResultSet.

        

        :return: The loinc_code of this PatientLabResultSet.
        :rtype: str
        """
        return self._loinc_code

    @loinc_code.setter
    def loinc_code(self, loinc_code):
        """Sets the loinc_code of this PatientLabResultSet.

        

        :param loinc_code: The loinc_code of this PatientLabResultSet.
        :type loinc_code: str
        """

        self._loinc_code = loinc_code

    @property
    def ordering_doctor(self):
        """Gets the ordering_doctor of this PatientLabResultSet.

        

        :return: The ordering_doctor of this PatientLabResultSet.
        :rtype: int
        """
        return self._ordering_doctor

    @ordering_doctor.setter
    def ordering_doctor(self, ordering_doctor):
        """Sets the ordering_doctor of this PatientLabResultSet.

        

        :param ordering_doctor: The ordering_doctor of this PatientLabResultSet.
        :type ordering_doctor: int
        """
        if ordering_doctor is None:
            raise ValueError("Invalid value for `ordering_doctor`, must not be `None`")

        self._ordering_doctor = ordering_doctor

    @property
    def patient(self):
        """Gets the patient of this PatientLabResultSet.

        

        :return: The patient of this PatientLabResultSet.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientLabResultSet.

        

        :param patient: The patient of this PatientLabResultSet.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def scanned_in_result(self):
        """Gets the scanned_in_result of this PatientLabResultSet.

        Scanned in PDF for this lab result (optional).

        :return: The scanned_in_result of this PatientLabResultSet.
        :rtype: str
        """
        return self._scanned_in_result

    @scanned_in_result.setter
    def scanned_in_result(self, scanned_in_result):
        """Sets the scanned_in_result of this PatientLabResultSet.

        Scanned in PDF for this lab result (optional).

        :param scanned_in_result: The scanned_in_result of this PatientLabResultSet.
        :type scanned_in_result: str
        """

        self._scanned_in_result = scanned_in_result

    @property
    def title(self):
        """Gets the title of this PatientLabResultSet.

        

        :return: The title of this PatientLabResultSet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PatientLabResultSet.

        

        :param title: The title of this PatientLabResultSet.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this PatientLabResultSet.

        

        :return: The updated_at of this PatientLabResultSet.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PatientLabResultSet.

        

        :param updated_at: The updated_at of this PatientLabResultSet.
        :type updated_at: str
        """

        self._updated_at = updated_at
