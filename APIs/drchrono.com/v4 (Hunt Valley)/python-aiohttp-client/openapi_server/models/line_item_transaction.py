# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineItemTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: float=None, adjustment_group_code: str=None, adjustment_reason: str=None, appointment: int=None, check_date: str=None, claim_status: str=None, created_at: str=None, doctor: int=None, id: int=None, ins_name: int=None, ins_paid: float=None, line_item: int=None, patient: int=None, posted_date: str=None, trace_number: str=None, updated_at: str=None):
        """LineItemTransaction - a model defined in OpenAPI

        :param adjustment: The adjustment of this LineItemTransaction.
        :param adjustment_group_code: The adjustment_group_code of this LineItemTransaction.
        :param adjustment_reason: The adjustment_reason of this LineItemTransaction.
        :param appointment: The appointment of this LineItemTransaction.
        :param check_date: The check_date of this LineItemTransaction.
        :param claim_status: The claim_status of this LineItemTransaction.
        :param created_at: The created_at of this LineItemTransaction.
        :param doctor: The doctor of this LineItemTransaction.
        :param id: The id of this LineItemTransaction.
        :param ins_name: The ins_name of this LineItemTransaction.
        :param ins_paid: The ins_paid of this LineItemTransaction.
        :param line_item: The line_item of this LineItemTransaction.
        :param patient: The patient of this LineItemTransaction.
        :param posted_date: The posted_date of this LineItemTransaction.
        :param trace_number: The trace_number of this LineItemTransaction.
        :param updated_at: The updated_at of this LineItemTransaction.
        """
        self.openapi_types = {
            'adjustment': float,
            'adjustment_group_code': str,
            'adjustment_reason': str,
            'appointment': int,
            'check_date': str,
            'claim_status': str,
            'created_at': str,
            'doctor': int,
            'id': int,
            'ins_name': int,
            'ins_paid': float,
            'line_item': int,
            'patient': int,
            'posted_date': str,
            'trace_number': str,
            'updated_at': str
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'adjustment_group_code': 'adjustment_group_code',
            'adjustment_reason': 'adjustment_reason',
            'appointment': 'appointment',
            'check_date': 'check_date',
            'claim_status': 'claim_status',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'ins_name': 'ins_name',
            'ins_paid': 'ins_paid',
            'line_item': 'line_item',
            'patient': 'patient',
            'posted_date': 'posted_date',
            'trace_number': 'trace_number',
            'updated_at': 'updated_at'
        }

        self._adjustment = adjustment
        self._adjustment_group_code = adjustment_group_code
        self._adjustment_reason = adjustment_reason
        self._appointment = appointment
        self._check_date = check_date
        self._claim_status = claim_status
        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._ins_name = ins_name
        self._ins_paid = ins_paid
        self._line_item = line_item
        self._patient = patient
        self._posted_date = posted_date
        self._trace_number = trace_number
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItemTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItemTransaction of this LineItemTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this LineItemTransaction.

        Adjustment from total billed

        :return: The adjustment of this LineItemTransaction.
        :rtype: float
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this LineItemTransaction.

        Adjustment from total billed

        :param adjustment: The adjustment of this LineItemTransaction.
        :type adjustment: float
        """

        self._adjustment = adjustment

    @property
    def adjustment_group_code(self):
        """Gets the adjustment_group_code of this LineItemTransaction.

        Group code for adjustment

        :return: The adjustment_group_code of this LineItemTransaction.
        :rtype: str
        """
        return self._adjustment_group_code

    @adjustment_group_code.setter
    def adjustment_group_code(self, adjustment_group_code):
        """Sets the adjustment_group_code of this LineItemTransaction.

        Group code for adjustment

        :param adjustment_group_code: The adjustment_group_code of this LineItemTransaction.
        :type adjustment_group_code: str
        """
        allowed_values = ["", "CO", "OA", "PI", "PR"]  # noqa: E501
        if adjustment_group_code not in allowed_values:
            raise ValueError(
                "Invalid value for `adjustment_group_code` ({0}), must be one of {1}"
                .format(adjustment_group_code, allowed_values)
            )

        self._adjustment_group_code = adjustment_group_code

    @property
    def adjustment_reason(self):
        """Gets the adjustment_reason of this LineItemTransaction.

        Reason for adjustment

        :return: The adjustment_reason of this LineItemTransaction.
        :rtype: str
        """
        return self._adjustment_reason

    @adjustment_reason.setter
    def adjustment_reason(self, adjustment_reason):
        """Sets the adjustment_reason of this LineItemTransaction.

        Reason for adjustment

        :param adjustment_reason: The adjustment_reason of this LineItemTransaction.
        :type adjustment_reason: str
        """
        allowed_values = ["-3", "-2", "-4", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "18", "19", "20", "21", "22", "23", "24", "26", "27", "29", "31", "32", "33", "34", "35", "39", "40", "44", "45", "49", "50", "51", "53", "54", "55", "56", "58", "59", "60", "61", "66", "69", "70", "74", "75", "76", "78", "85", "87", "89", "90", "91", "94", "95", "96", "97", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "114", "115", "116", "117", "118", "119", "121", "122", "125", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "142", "143", "144", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "197", "198", "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", "272", "273", "274", "275", "276", "277", "287", "288", "A0", "A1", "A5", "A6", "A7", "A8", "B1", "B4", "B5", "B7", "B8", "B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B20", "B22", "B23", "P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10", "P11", "P12", "P13", "P14", "P15", "P16", "P17", "P18", "P19", "P20", "P21", "P22", "P23", "W1", "W2", "W3", "W4", "Y1", "Y2", "Y3"]  # noqa: E501
        if adjustment_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `adjustment_reason` ({0}), must be one of {1}"
                .format(adjustment_reason, allowed_values)
            )

        self._adjustment_reason = adjustment_reason

    @property
    def appointment(self):
        """Gets the appointment of this LineItemTransaction.

        Appointment ID

        :return: The appointment of this LineItemTransaction.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this LineItemTransaction.

        Appointment ID

        :param appointment: The appointment of this LineItemTransaction.
        :type appointment: int
        """

        self._appointment = appointment

    @property
    def check_date(self):
        """Gets the check_date of this LineItemTransaction.

        Date of check

        :return: The check_date of this LineItemTransaction.
        :rtype: str
        """
        return self._check_date

    @check_date.setter
    def check_date(self, check_date):
        """Sets the check_date of this LineItemTransaction.

        Date of check

        :param check_date: The check_date of this LineItemTransaction.
        :type check_date: str
        """

        self._check_date = check_date

    @property
    def claim_status(self):
        """Gets the claim_status of this LineItemTransaction.

        Status of claim

        :return: The claim_status of this LineItemTransaction.
        :rtype: str
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status):
        """Sets the claim_status of this LineItemTransaction.

        Status of claim

        :param claim_status: The claim_status of this LineItemTransaction.
        :type claim_status: str
        """
        allowed_values = ["", "0", "1", "2", "3", "4", "5", "10", "13", "15", "16", "17", "19", "20", "21", "22", "23", "25", "27"]  # noqa: E501
        if claim_status not in allowed_values:
            raise ValueError(
                "Invalid value for `claim_status` ({0}), must be one of {1}"
                .format(claim_status, allowed_values)
            )

        self._claim_status = claim_status

    @property
    def created_at(self):
        """Gets the created_at of this LineItemTransaction.

        

        :return: The created_at of this LineItemTransaction.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LineItemTransaction.

        

        :param created_at: The created_at of this LineItemTransaction.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this LineItemTransaction.

        Doctor ID

        :return: The doctor of this LineItemTransaction.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this LineItemTransaction.

        Doctor ID

        :param doctor: The doctor of this LineItemTransaction.
        :type doctor: int
        """

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this LineItemTransaction.

        

        :return: The id of this LineItemTransaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LineItemTransaction.

        

        :param id: The id of this LineItemTransaction.
        :type id: int
        """

        self._id = id

    @property
    def ins_name(self):
        """Gets the ins_name of this LineItemTransaction.

        Can be one of the following, `1`(Primary Insurance), `2`(Secondary Insurance)

        :return: The ins_name of this LineItemTransaction.
        :rtype: int
        """
        return self._ins_name

    @ins_name.setter
    def ins_name(self, ins_name):
        """Sets the ins_name of this LineItemTransaction.

        Can be one of the following, `1`(Primary Insurance), `2`(Secondary Insurance)

        :param ins_name: The ins_name of this LineItemTransaction.
        :type ins_name: int
        """

        self._ins_name = ins_name

    @property
    def ins_paid(self):
        """Gets the ins_paid of this LineItemTransaction.

        

        :return: The ins_paid of this LineItemTransaction.
        :rtype: float
        """
        return self._ins_paid

    @ins_paid.setter
    def ins_paid(self, ins_paid):
        """Sets the ins_paid of this LineItemTransaction.

        

        :param ins_paid: The ins_paid of this LineItemTransaction.
        :type ins_paid: float
        """

        self._ins_paid = ins_paid

    @property
    def line_item(self):
        """Gets the line_item of this LineItemTransaction.

        ID of `/api/line_item` object

        :return: The line_item of this LineItemTransaction.
        :rtype: int
        """
        return self._line_item

    @line_item.setter
    def line_item(self, line_item):
        """Sets the line_item of this LineItemTransaction.

        ID of `/api/line_item` object

        :param line_item: The line_item of this LineItemTransaction.
        :type line_item: int
        """

        self._line_item = line_item

    @property
    def patient(self):
        """Gets the patient of this LineItemTransaction.

        

        :return: The patient of this LineItemTransaction.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this LineItemTransaction.

        

        :param patient: The patient of this LineItemTransaction.
        :type patient: int
        """

        self._patient = patient

    @property
    def posted_date(self):
        """Gets the posted_date of this LineItemTransaction.

        Date when transaction is created

        :return: The posted_date of this LineItemTransaction.
        :rtype: str
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this LineItemTransaction.

        Date when transaction is created

        :param posted_date: The posted_date of this LineItemTransaction.
        :type posted_date: str
        """

        self._posted_date = posted_date

    @property
    def trace_number(self):
        """Gets the trace_number of this LineItemTransaction.

        Check number

        :return: The trace_number of this LineItemTransaction.
        :rtype: str
        """
        return self._trace_number

    @trace_number.setter
    def trace_number(self, trace_number):
        """Sets the trace_number of this LineItemTransaction.

        Check number

        :param trace_number: The trace_number of this LineItemTransaction.
        :type trace_number: str
        """

        self._trace_number = trace_number

    @property
    def updated_at(self):
        """Gets the updated_at of this LineItemTransaction.

        

        :return: The updated_at of this LineItemTransaction.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LineItemTransaction.

        

        :param updated_at: The updated_at of this LineItemTransaction.
        :type updated_at: str
        """

        self._updated_at = updated_at
