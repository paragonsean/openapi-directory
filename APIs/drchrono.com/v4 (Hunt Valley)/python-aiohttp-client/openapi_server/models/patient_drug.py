# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientDrug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment: int=None, date_prescribed: str=None, date_started_taking: str=None, date_stopped_taking: str=None, daw: bool=None, dispense_quantity: float=None, doctor: int=None, dosage_quantity: str=None, dosage_units: str=None, frequency: str=None, id: int=None, indication: str=None, name: str=None, ndc: str=None, notes: str=None, number_refills: int=None, order_status: str=None, patient: int=None, pharmacy_note: str=None, prn: bool=None, route: str=None, rxnorm: str=None, signature_note: str=None, status: str=None):
        """PatientDrug - a model defined in OpenAPI

        :param appointment: The appointment of this PatientDrug.
        :param date_prescribed: The date_prescribed of this PatientDrug.
        :param date_started_taking: The date_started_taking of this PatientDrug.
        :param date_stopped_taking: The date_stopped_taking of this PatientDrug.
        :param daw: The daw of this PatientDrug.
        :param dispense_quantity: The dispense_quantity of this PatientDrug.
        :param doctor: The doctor of this PatientDrug.
        :param dosage_quantity: The dosage_quantity of this PatientDrug.
        :param dosage_units: The dosage_units of this PatientDrug.
        :param frequency: The frequency of this PatientDrug.
        :param id: The id of this PatientDrug.
        :param indication: The indication of this PatientDrug.
        :param name: The name of this PatientDrug.
        :param ndc: The ndc of this PatientDrug.
        :param notes: The notes of this PatientDrug.
        :param number_refills: The number_refills of this PatientDrug.
        :param order_status: The order_status of this PatientDrug.
        :param patient: The patient of this PatientDrug.
        :param pharmacy_note: The pharmacy_note of this PatientDrug.
        :param prn: The prn of this PatientDrug.
        :param route: The route of this PatientDrug.
        :param rxnorm: The rxnorm of this PatientDrug.
        :param signature_note: The signature_note of this PatientDrug.
        :param status: The status of this PatientDrug.
        """
        self.openapi_types = {
            'appointment': int,
            'date_prescribed': str,
            'date_started_taking': str,
            'date_stopped_taking': str,
            'daw': bool,
            'dispense_quantity': float,
            'doctor': int,
            'dosage_quantity': str,
            'dosage_units': str,
            'frequency': str,
            'id': int,
            'indication': str,
            'name': str,
            'ndc': str,
            'notes': str,
            'number_refills': int,
            'order_status': str,
            'patient': int,
            'pharmacy_note': str,
            'prn': bool,
            'route': str,
            'rxnorm': str,
            'signature_note': str,
            'status': str
        }

        self.attribute_map = {
            'appointment': 'appointment',
            'date_prescribed': 'date_prescribed',
            'date_started_taking': 'date_started_taking',
            'date_stopped_taking': 'date_stopped_taking',
            'daw': 'daw',
            'dispense_quantity': 'dispense_quantity',
            'doctor': 'doctor',
            'dosage_quantity': 'dosage_quantity',
            'dosage_units': 'dosage_units',
            'frequency': 'frequency',
            'id': 'id',
            'indication': 'indication',
            'name': 'name',
            'ndc': 'ndc',
            'notes': 'notes',
            'number_refills': 'number_refills',
            'order_status': 'order_status',
            'patient': 'patient',
            'pharmacy_note': 'pharmacy_note',
            'prn': 'prn',
            'route': 'route',
            'rxnorm': 'rxnorm',
            'signature_note': 'signature_note',
            'status': 'status'
        }

        self._appointment = appointment
        self._date_prescribed = date_prescribed
        self._date_started_taking = date_started_taking
        self._date_stopped_taking = date_stopped_taking
        self._daw = daw
        self._dispense_quantity = dispense_quantity
        self._doctor = doctor
        self._dosage_quantity = dosage_quantity
        self._dosage_units = dosage_units
        self._frequency = frequency
        self._id = id
        self._indication = indication
        self._name = name
        self._ndc = ndc
        self._notes = notes
        self._number_refills = number_refills
        self._order_status = order_status
        self._patient = patient
        self._pharmacy_note = pharmacy_note
        self._prn = prn
        self._route = route
        self._rxnorm = rxnorm
        self._signature_note = signature_note
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientDrug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientDrug of this PatientDrug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment(self):
        """Gets the appointment of this PatientDrug.

        Appointment ID corresponding to the initial prescription

        :return: The appointment of this PatientDrug.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this PatientDrug.

        Appointment ID corresponding to the initial prescription

        :param appointment: The appointment of this PatientDrug.
        :type appointment: int
        """

        self._appointment = appointment

    @property
    def date_prescribed(self):
        """Gets the date_prescribed of this PatientDrug.

        

        :return: The date_prescribed of this PatientDrug.
        :rtype: str
        """
        return self._date_prescribed

    @date_prescribed.setter
    def date_prescribed(self, date_prescribed):
        """Sets the date_prescribed of this PatientDrug.

        

        :param date_prescribed: The date_prescribed of this PatientDrug.
        :type date_prescribed: str
        """

        self._date_prescribed = date_prescribed

    @property
    def date_started_taking(self):
        """Gets the date_started_taking of this PatientDrug.

        

        :return: The date_started_taking of this PatientDrug.
        :rtype: str
        """
        return self._date_started_taking

    @date_started_taking.setter
    def date_started_taking(self, date_started_taking):
        """Sets the date_started_taking of this PatientDrug.

        

        :param date_started_taking: The date_started_taking of this PatientDrug.
        :type date_started_taking: str
        """

        self._date_started_taking = date_started_taking

    @property
    def date_stopped_taking(self):
        """Gets the date_stopped_taking of this PatientDrug.

        

        :return: The date_stopped_taking of this PatientDrug.
        :rtype: str
        """
        return self._date_stopped_taking

    @date_stopped_taking.setter
    def date_stopped_taking(self, date_stopped_taking):
        """Sets the date_stopped_taking of this PatientDrug.

        

        :param date_stopped_taking: The date_stopped_taking of this PatientDrug.
        :type date_stopped_taking: str
        """

        self._date_stopped_taking = date_stopped_taking

    @property
    def daw(self):
        """Gets the daw of this PatientDrug.

        If true, the prescription should be dispensed as written and not substituted

        :return: The daw of this PatientDrug.
        :rtype: bool
        """
        return self._daw

    @daw.setter
    def daw(self, daw):
        """Sets the daw of this PatientDrug.

        If true, the prescription should be dispensed as written and not substituted

        :param daw: The daw of this PatientDrug.
        :type daw: bool
        """

        self._daw = daw

    @property
    def dispense_quantity(self):
        """Gets the dispense_quantity of this PatientDrug.

        

        :return: The dispense_quantity of this PatientDrug.
        :rtype: float
        """
        return self._dispense_quantity

    @dispense_quantity.setter
    def dispense_quantity(self, dispense_quantity):
        """Sets the dispense_quantity of this PatientDrug.

        

        :param dispense_quantity: The dispense_quantity of this PatientDrug.
        :type dispense_quantity: float
        """

        self._dispense_quantity = dispense_quantity

    @property
    def doctor(self):
        """Gets the doctor of this PatientDrug.

        Prescribing doctor ID

        :return: The doctor of this PatientDrug.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientDrug.

        Prescribing doctor ID

        :param doctor: The doctor of this PatientDrug.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def dosage_quantity(self):
        """Gets the dosage_quantity of this PatientDrug.

        Please note, this used to be an decimal field, you can still pass decimal value to it. Or you can pass in some formatted string if needed.

        :return: The dosage_quantity of this PatientDrug.
        :rtype: str
        """
        return self._dosage_quantity

    @dosage_quantity.setter
    def dosage_quantity(self, dosage_quantity):
        """Sets the dosage_quantity of this PatientDrug.

        Please note, this used to be an decimal field, you can still pass decimal value to it. Or you can pass in some formatted string if needed.

        :param dosage_quantity: The dosage_quantity of this PatientDrug.
        :type dosage_quantity: str
        """

        self._dosage_quantity = dosage_quantity

    @property
    def dosage_units(self):
        """Gets the dosage_units of this PatientDrug.

        

        :return: The dosage_units of this PatientDrug.
        :rtype: str
        """
        return self._dosage_units

    @dosage_units.setter
    def dosage_units(self, dosage_units):
        """Sets the dosage_units of this PatientDrug.

        

        :param dosage_units: The dosage_units of this PatientDrug.
        :type dosage_units: str
        """

        self._dosage_units = dosage_units

    @property
    def frequency(self):
        """Gets the frequency of this PatientDrug.

        Frequency pf administration

        :return: The frequency of this PatientDrug.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PatientDrug.

        Frequency pf administration

        :param frequency: The frequency of this PatientDrug.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this PatientDrug.

        

        :return: The id of this PatientDrug.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientDrug.

        

        :param id: The id of this PatientDrug.
        :type id: int
        """

        self._id = id

    @property
    def indication(self):
        """Gets the indication of this PatientDrug.

        

        :return: The indication of this PatientDrug.
        :rtype: str
        """
        return self._indication

    @indication.setter
    def indication(self, indication):
        """Sets the indication of this PatientDrug.

        

        :param indication: The indication of this PatientDrug.
        :type indication: str
        """

        self._indication = indication

    @property
    def name(self):
        """Gets the name of this PatientDrug.

        

        :return: The name of this PatientDrug.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientDrug.

        

        :param name: The name of this PatientDrug.
        :type name: str
        """

        self._name = name

    @property
    def ndc(self):
        """Gets the ndc of this PatientDrug.

        

        :return: The ndc of this PatientDrug.
        :rtype: str
        """
        return self._ndc

    @ndc.setter
    def ndc(self, ndc):
        """Sets the ndc of this PatientDrug.

        

        :param ndc: The ndc of this PatientDrug.
        :type ndc: str
        """

        self._ndc = ndc

    @property
    def notes(self):
        """Gets the notes of this PatientDrug.

        Any additional notes from the provider

        :return: The notes of this PatientDrug.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PatientDrug.

        Any additional notes from the provider

        :param notes: The notes of this PatientDrug.
        :type notes: str
        """

        self._notes = notes

    @property
    def number_refills(self):
        """Gets the number_refills of this PatientDrug.

        

        :return: The number_refills of this PatientDrug.
        :rtype: int
        """
        return self._number_refills

    @number_refills.setter
    def number_refills(self, number_refills):
        """Sets the number_refills of this PatientDrug.

        

        :param number_refills: The number_refills of this PatientDrug.
        :type number_refills: int
        """

        self._number_refills = number_refills

    @property
    def order_status(self):
        """Gets the order_status of this PatientDrug.

        One of `\"\"`, `\"Ordered\"`, `\"Administered during visit\"`, `\"Electronic eRx Sent\"`, `\"Phoned into Pharmacy\"`, `\"Faxed to Pharmacy\"`, `\"Paper Rx\"`, `\"Prescription Printed\"`, `\"Discontinued\"`, `\"Prescribed by other Dr\"` or `\"Over the Counter\"`. If omitted in writing, default to `\"\"`

        :return: The order_status of this PatientDrug.
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this PatientDrug.

        One of `\"\"`, `\"Ordered\"`, `\"Administered during visit\"`, `\"Electronic eRx Sent\"`, `\"Phoned into Pharmacy\"`, `\"Faxed to Pharmacy\"`, `\"Paper Rx\"`, `\"Prescription Printed\"`, `\"Discontinued\"`, `\"Prescribed by other Dr\"` or `\"Over the Counter\"`. If omitted in writing, default to `\"\"`

        :param order_status: The order_status of this PatientDrug.
        :type order_status: str
        """
        allowed_values = ["", "Ordered", "Administered during visit", "Electronic eRx Sent", "Phoned into Pharmacy", "Faxed to Pharmacy", "Paper Rx", "Prescription Printed", "Discontinued", "Prescribed by other Dr", "Over the Counter"]  # noqa: E501
        if order_status not in allowed_values:
            raise ValueError(
                "Invalid value for `order_status` ({0}), must be one of {1}"
                .format(order_status, allowed_values)
            )

        self._order_status = order_status

    @property
    def patient(self):
        """Gets the patient of this PatientDrug.

        

        :return: The patient of this PatientDrug.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientDrug.

        

        :param patient: The patient of this PatientDrug.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def pharmacy_note(self):
        """Gets the pharmacy_note of this PatientDrug.

        

        :return: The pharmacy_note of this PatientDrug.
        :rtype: str
        """
        return self._pharmacy_note

    @pharmacy_note.setter
    def pharmacy_note(self, pharmacy_note):
        """Sets the pharmacy_note of this PatientDrug.

        

        :param pharmacy_note: The pharmacy_note of this PatientDrug.
        :type pharmacy_note: str
        """

        self._pharmacy_note = pharmacy_note

    @property
    def prn(self):
        """Gets the prn of this PatientDrug.

        If `True`, the medication should be taken when necessary

        :return: The prn of this PatientDrug.
        :rtype: bool
        """
        return self._prn

    @prn.setter
    def prn(self, prn):
        """Sets the prn of this PatientDrug.

        If `True`, the medication should be taken when necessary

        :param prn: The prn of this PatientDrug.
        :type prn: bool
        """

        self._prn = prn

    @property
    def route(self):
        """Gets the route of this PatientDrug.

        Route of administration

        :return: The route of this PatientDrug.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this PatientDrug.

        Route of administration

        :param route: The route of this PatientDrug.
        :type route: str
        """

        self._route = route

    @property
    def rxnorm(self):
        """Gets the rxnorm of this PatientDrug.

        RxNorm code for the medication

        :return: The rxnorm of this PatientDrug.
        :rtype: str
        """
        return self._rxnorm

    @rxnorm.setter
    def rxnorm(self, rxnorm):
        """Sets the rxnorm of this PatientDrug.

        RxNorm code for the medication

        :param rxnorm: The rxnorm of this PatientDrug.
        :type rxnorm: str
        """

        self._rxnorm = rxnorm

    @property
    def signature_note(self):
        """Gets the signature_note of this PatientDrug.

        

        :return: The signature_note of this PatientDrug.
        :rtype: str
        """
        return self._signature_note

    @signature_note.setter
    def signature_note(self, signature_note):
        """Sets the signature_note of this PatientDrug.

        

        :param signature_note: The signature_note of this PatientDrug.
        :type signature_note: str
        """

        self._signature_note = signature_note

    @property
    def status(self):
        """Gets the status of this PatientDrug.

        If present, one of `\"active\"` or `\"inactive\"`. If omitted in writing, default to `\"active\"`

        :return: The status of this PatientDrug.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatientDrug.

        If present, one of `\"active\"` or `\"inactive\"`. If omitted in writing, default to `\"active\"`

        :param status: The status of this PatientDrug.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
