# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clinical_note_field import ClinicalNoteField
from openapi_server.models.soap_note_custom_report1 import SoapNoteCustomReport1
from openapi_server import util


class SoapNoteCustomReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, clinical_note_fields: List[ClinicalNoteField]=None, doctor: str=None, id: int=None, is_onpatient: bool=None, is_persistent: bool=None, name: str=None, order: SoapNoteCustomReport1=None, updated_at: str=None):
        """SoapNoteCustomReport - a model defined in OpenAPI

        :param archived: The archived of this SoapNoteCustomReport.
        :param clinical_note_fields: The clinical_note_fields of this SoapNoteCustomReport.
        :param doctor: The doctor of this SoapNoteCustomReport.
        :param id: The id of this SoapNoteCustomReport.
        :param is_onpatient: The is_onpatient of this SoapNoteCustomReport.
        :param is_persistent: The is_persistent of this SoapNoteCustomReport.
        :param name: The name of this SoapNoteCustomReport.
        :param order: The order of this SoapNoteCustomReport.
        :param updated_at: The updated_at of this SoapNoteCustomReport.
        """
        self.openapi_types = {
            'archived': bool,
            'clinical_note_fields': List[ClinicalNoteField],
            'doctor': str,
            'id': int,
            'is_onpatient': bool,
            'is_persistent': bool,
            'name': str,
            'order': SoapNoteCustomReport1,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'clinical_note_fields': 'clinical_note_fields',
            'doctor': 'doctor',
            'id': 'id',
            'is_onpatient': 'is_onpatient',
            'is_persistent': 'is_persistent',
            'name': 'name',
            'order': 'order',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._clinical_note_fields = clinical_note_fields
        self._doctor = doctor
        self._id = id
        self._is_onpatient = is_onpatient
        self._is_persistent = is_persistent
        self._name = name
        self._order = order
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoapNoteCustomReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoapNoteCustomReport of this SoapNoteCustomReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this SoapNoteCustomReport.

        Indicates that the doctor has soft-deleted this template, and will not use it for future appointments

        :return: The archived of this SoapNoteCustomReport.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this SoapNoteCustomReport.

        Indicates that the doctor has soft-deleted this template, and will not use it for future appointments

        :param archived: The archived of this SoapNoteCustomReport.
        :type archived: bool
        """

        self._archived = archived

    @property
    def clinical_note_fields(self):
        """Gets the clinical_note_fields of this SoapNoteCustomReport.

        clinical note fields

        :return: The clinical_note_fields of this SoapNoteCustomReport.
        :rtype: List[ClinicalNoteField]
        """
        return self._clinical_note_fields

    @clinical_note_fields.setter
    def clinical_note_fields(self, clinical_note_fields):
        """Sets the clinical_note_fields of this SoapNoteCustomReport.

        clinical note fields

        :param clinical_note_fields: The clinical_note_fields of this SoapNoteCustomReport.
        :type clinical_note_fields: List[ClinicalNoteField]
        """

        self._clinical_note_fields = clinical_note_fields

    @property
    def doctor(self):
        """Gets the doctor of this SoapNoteCustomReport.

        

        :return: The doctor of this SoapNoteCustomReport.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this SoapNoteCustomReport.

        

        :param doctor: The doctor of this SoapNoteCustomReport.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this SoapNoteCustomReport.

        

        :return: The id of this SoapNoteCustomReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoapNoteCustomReport.

        

        :param id: The id of this SoapNoteCustomReport.
        :type id: int
        """

        self._id = id

    @property
    def is_onpatient(self):
        """Gets the is_onpatient of this SoapNoteCustomReport.

        

        :return: The is_onpatient of this SoapNoteCustomReport.
        :rtype: bool
        """
        return self._is_onpatient

    @is_onpatient.setter
    def is_onpatient(self, is_onpatient):
        """Sets the is_onpatient of this SoapNoteCustomReport.

        

        :param is_onpatient: The is_onpatient of this SoapNoteCustomReport.
        :type is_onpatient: bool
        """

        self._is_onpatient = is_onpatient

    @property
    def is_persistent(self):
        """Gets the is_persistent of this SoapNoteCustomReport.

        If this is true, this report will be the same across all notes

        :return: The is_persistent of this SoapNoteCustomReport.
        :rtype: bool
        """
        return self._is_persistent

    @is_persistent.setter
    def is_persistent(self, is_persistent):
        """Sets the is_persistent of this SoapNoteCustomReport.

        If this is true, this report will be the same across all notes

        :param is_persistent: The is_persistent of this SoapNoteCustomReport.
        :type is_persistent: bool
        """

        self._is_persistent = is_persistent

    @property
    def name(self):
        """Gets the name of this SoapNoteCustomReport.

        

        :return: The name of this SoapNoteCustomReport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoapNoteCustomReport.

        

        :param name: The name of this SoapNoteCustomReport.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this SoapNoteCustomReport.


        :return: The order of this SoapNoteCustomReport.
        :rtype: SoapNoteCustomReport1
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SoapNoteCustomReport.


        :param order: The order of this SoapNoteCustomReport.
        :type order: SoapNoteCustomReport1
        """

        self._order = order

    @property
    def updated_at(self):
        """Gets the updated_at of this SoapNoteCustomReport.

        

        :return: The updated_at of this SoapNoteCustomReport.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SoapNoteCustomReport.

        

        :param updated_at: The updated_at of this SoapNoteCustomReport.
        :type updated_at: str
        """

        self._updated_at = updated_at
