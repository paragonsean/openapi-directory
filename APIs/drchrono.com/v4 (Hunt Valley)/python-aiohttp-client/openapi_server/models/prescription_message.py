# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrescriptionMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, doctor: int=None, id: int=None, json_data: str=None, message_direction: str=None, message_status: str=None, message_type: str=None, parent_message: str=None, patient: int=None, pharmacy: str=None):
        """PrescriptionMessage - a model defined in OpenAPI

        :param created_at: The created_at of this PrescriptionMessage.
        :param doctor: The doctor of this PrescriptionMessage.
        :param id: The id of this PrescriptionMessage.
        :param json_data: The json_data of this PrescriptionMessage.
        :param message_direction: The message_direction of this PrescriptionMessage.
        :param message_status: The message_status of this PrescriptionMessage.
        :param message_type: The message_type of this PrescriptionMessage.
        :param parent_message: The parent_message of this PrescriptionMessage.
        :param patient: The patient of this PrescriptionMessage.
        :param pharmacy: The pharmacy of this PrescriptionMessage.
        """
        self.openapi_types = {
            'created_at': str,
            'doctor': int,
            'id': int,
            'json_data': str,
            'message_direction': str,
            'message_status': str,
            'message_type': str,
            'parent_message': str,
            'patient': int,
            'pharmacy': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'json_data': 'json_data',
            'message_direction': 'message_direction',
            'message_status': 'message_status',
            'message_type': 'message_type',
            'parent_message': 'parent_message',
            'patient': 'patient',
            'pharmacy': 'pharmacy'
        }

        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._json_data = json_data
        self._message_direction = message_direction
        self._message_status = message_status
        self._message_type = message_type
        self._parent_message = parent_message
        self._patient = patient
        self._pharmacy = pharmacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrescriptionMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrescriptionMessage of this PrescriptionMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PrescriptionMessage.

        

        :return: The created_at of this PrescriptionMessage.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PrescriptionMessage.

        

        :param created_at: The created_at of this PrescriptionMessage.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this PrescriptionMessage.

        

        :return: The doctor of this PrescriptionMessage.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PrescriptionMessage.

        

        :param doctor: The doctor of this PrescriptionMessage.
        :type doctor: int
        """

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this PrescriptionMessage.

        

        :return: The id of this PrescriptionMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrescriptionMessage.

        

        :param id: The id of this PrescriptionMessage.
        :type id: int
        """

        self._id = id

    @property
    def json_data(self):
        """Gets the json_data of this PrescriptionMessage.

        Data sent along with `NewRx`, `RefillRequest`, and `RefillResponses` messages. The format varies, but most likely it will contain `BenefitsCoordination` section with insurance info and `MedicationPrescribed` with medication info. `Patient`, `Pharmacy`, and `Prescriber` are also usually present.

        :return: The json_data of this PrescriptionMessage.
        :rtype: str
        """
        return self._json_data

    @json_data.setter
    def json_data(self, json_data):
        """Sets the json_data of this PrescriptionMessage.

        Data sent along with `NewRx`, `RefillRequest`, and `RefillResponses` messages. The format varies, but most likely it will contain `BenefitsCoordination` section with insurance info and `MedicationPrescribed` with medication info. `Patient`, `Pharmacy`, and `Prescriber` are also usually present.

        :param json_data: The json_data of this PrescriptionMessage.
        :type json_data: str
        """

        self._json_data = json_data

    @property
    def message_direction(self):
        """Gets the message_direction of this PrescriptionMessage.

        Possible values are `Outgoing` and `Incoming`.

        :return: The message_direction of this PrescriptionMessage.
        :rtype: str
        """
        return self._message_direction

    @message_direction.setter
    def message_direction(self, message_direction):
        """Sets the message_direction of this PrescriptionMessage.

        Possible values are `Outgoing` and `Incoming`.

        :param message_direction: The message_direction of this PrescriptionMessage.
        :type message_direction: str
        """
        allowed_values = ["I", "O"]  # noqa: E501
        if message_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `message_direction` ({0}), must be one of {1}"
                .format(message_direction, allowed_values)
            )

        self._message_direction = message_direction

    @property
    def message_status(self):
        """Gets the message_status of this PrescriptionMessage.

        Message status for Incoming and Outgoing values. Success message for message_type are: `NewRx` : `Sent`, `RefillRequest` : `Received`, `RefillResponse` : `Sent`.

        :return: The message_status of this PrescriptionMessage.
        :rtype: str
        """
        return self._message_status

    @message_status.setter
    def message_status(self, message_status):
        """Sets the message_status of this PrescriptionMessage.

        Message status for Incoming and Outgoing values. Success message for message_type are: `NewRx` : `Sent`, `RefillRequest` : `Received`, `RefillResponse` : `Sent`.

        :param message_status: The message_status of this PrescriptionMessage.
        :type message_status: str
        """

        self._message_status = message_status

    @property
    def message_type(self):
        """Gets the message_type of this PrescriptionMessage.

        Possible values are `NewRx` for outgoing new prescriptions, `RefillRequest` for incoming refill requests, `RefillResponse` for outgoing refill responses, `Error` for incoming errors, `Status` and `Verify` for incoming status reports from Surescripts.

        :return: The message_type of this PrescriptionMessage.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this PrescriptionMessage.

        Possible values are `NewRx` for outgoing new prescriptions, `RefillRequest` for incoming refill requests, `RefillResponse` for outgoing refill responses, `Error` for incoming errors, `Status` and `Verify` for incoming status reports from Surescripts.

        :param message_type: The message_type of this PrescriptionMessage.
        :type message_type: str
        """

        self._message_type = message_type

    @property
    def parent_message(self):
        """Gets the parent_message of this PrescriptionMessage.

        Refers to the parent message, used for refill responses and incoming error/status reports.

        :return: The parent_message of this PrescriptionMessage.
        :rtype: str
        """
        return self._parent_message

    @parent_message.setter
    def parent_message(self, parent_message):
        """Sets the parent_message of this PrescriptionMessage.

        Refers to the parent message, used for refill responses and incoming error/status reports.

        :param parent_message: The parent_message of this PrescriptionMessage.
        :type parent_message: str
        """

        self._parent_message = parent_message

    @property
    def patient(self):
        """Gets the patient of this PrescriptionMessage.

        An optional field which refers to a patient.

        :return: The patient of this PrescriptionMessage.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PrescriptionMessage.

        An optional field which refers to a patient.

        :param patient: The patient of this PrescriptionMessage.
        :type patient: int
        """

        self._patient = patient

    @property
    def pharmacy(self):
        """Gets the pharmacy of this PrescriptionMessage.

        NCPDPID allocated #ID of the Pharmacy

        :return: The pharmacy of this PrescriptionMessage.
        :rtype: str
        """
        return self._pharmacy

    @pharmacy.setter
    def pharmacy(self, pharmacy):
        """Sets the pharmacy of this PrescriptionMessage.

        NCPDPID allocated #ID of the Pharmacy

        :param pharmacy: The pharmacy of this PrescriptionMessage.
        :type pharmacy: str
        """

        self._pharmacy = pharmacy
