# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentForm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, assign_by_default: bool=None, created_at: str=None, doctor: int=None, id: int=None, is_mandatory: bool=None, order: int=None, title: str=None, updated_at: str=None, uri: str=None):
        """ConsentForm - a model defined in OpenAPI

        :param archived: The archived of this ConsentForm.
        :param assign_by_default: The assign_by_default of this ConsentForm.
        :param created_at: The created_at of this ConsentForm.
        :param doctor: The doctor of this ConsentForm.
        :param id: The id of this ConsentForm.
        :param is_mandatory: The is_mandatory of this ConsentForm.
        :param order: The order of this ConsentForm.
        :param title: The title of this ConsentForm.
        :param updated_at: The updated_at of this ConsentForm.
        :param uri: The uri of this ConsentForm.
        """
        self.openapi_types = {
            'archived': bool,
            'assign_by_default': bool,
            'created_at': str,
            'doctor': int,
            'id': int,
            'is_mandatory': bool,
            'order': int,
            'title': str,
            'updated_at': str,
            'uri': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'assign_by_default': 'assign_by_default',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'id': 'id',
            'is_mandatory': 'is_mandatory',
            'order': 'order',
            'title': 'title',
            'updated_at': 'updated_at',
            'uri': 'uri'
        }

        self._archived = archived
        self._assign_by_default = assign_by_default
        self._created_at = created_at
        self._doctor = doctor
        self._id = id
        self._is_mandatory = is_mandatory
        self._order = order
        self._title = title
        self._updated_at = updated_at
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentForm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentForm of this ConsentForm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ConsentForm.

        

        :return: The archived of this ConsentForm.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ConsentForm.

        

        :param archived: The archived of this ConsentForm.
        :type archived: bool
        """

        self._archived = archived

    @property
    def assign_by_default(self):
        """Gets the assign_by_default of this ConsentForm.

        If true, consent form will always be automatically assigned to appointments

        :return: The assign_by_default of this ConsentForm.
        :rtype: bool
        """
        return self._assign_by_default

    @assign_by_default.setter
    def assign_by_default(self, assign_by_default):
        """Sets the assign_by_default of this ConsentForm.

        If true, consent form will always be automatically assigned to appointments

        :param assign_by_default: The assign_by_default of this ConsentForm.
        :type assign_by_default: bool
        """
        if assign_by_default is None:
            raise ValueError("Invalid value for `assign_by_default`, must not be `None`")

        self._assign_by_default = assign_by_default

    @property
    def created_at(self):
        """Gets the created_at of this ConsentForm.

        

        :return: The created_at of this ConsentForm.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConsentForm.

        

        :param created_at: The created_at of this ConsentForm.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this ConsentForm.

        

        :return: The doctor of this ConsentForm.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this ConsentForm.

        

        :param doctor: The doctor of this ConsentForm.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this ConsentForm.

        

        :return: The id of this ConsentForm.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsentForm.

        

        :param id: The id of this ConsentForm.
        :type id: int
        """

        self._id = id

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this ConsentForm.

        If true, consent form must be signed prior to appointment check in

        :return: The is_mandatory of this ConsentForm.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this ConsentForm.

        If true, consent form must be signed prior to appointment check in

        :param is_mandatory: The is_mandatory of this ConsentForm.
        :type is_mandatory: bool
        """
        if is_mandatory is None:
            raise ValueError("Invalid value for `is_mandatory`, must not be `None`")

        self._is_mandatory = is_mandatory

    @property
    def order(self):
        """Gets the order of this ConsentForm.

        The order of consent forms that will show in management screen

        :return: The order of this ConsentForm.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConsentForm.

        The order of consent forms that will show in management screen

        :param order: The order of this ConsentForm.
        :type order: int
        """

        self._order = order

    @property
    def title(self):
        """Gets the title of this ConsentForm.

        

        :return: The title of this ConsentForm.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConsentForm.

        

        :param title: The title of this ConsentForm.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this ConsentForm.

        

        :return: The updated_at of this ConsentForm.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConsentForm.

        

        :param updated_at: The updated_at of this ConsentForm.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def uri(self):
        """Gets the uri of this ConsentForm.

        Files are passed using `multipart/form-data` encoding, but returned as URLs.

        :return: The uri of this ConsentForm.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ConsentForm.

        Files are passed using `multipart/form-data` encoding, but returned as URLs.

        :param uri: The uri of this ConsentForm.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
