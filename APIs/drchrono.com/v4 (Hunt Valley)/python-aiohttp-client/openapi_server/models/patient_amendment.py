# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientAmendment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amendment_file: str=None, amendment_name: str=None, appointment: int=None, comments: str=None, doctor: int=None, id: int=None, patient: int=None):
        """PatientAmendment - a model defined in OpenAPI

        :param amendment_file: The amendment_file of this PatientAmendment.
        :param amendment_name: The amendment_name of this PatientAmendment.
        :param appointment: The appointment of this PatientAmendment.
        :param comments: The comments of this PatientAmendment.
        :param doctor: The doctor of this PatientAmendment.
        :param id: The id of this PatientAmendment.
        :param patient: The patient of this PatientAmendment.
        """
        self.openapi_types = {
            'amendment_file': str,
            'amendment_name': str,
            'appointment': int,
            'comments': str,
            'doctor': int,
            'id': int,
            'patient': int
        }

        self.attribute_map = {
            'amendment_file': 'amendment_file',
            'amendment_name': 'amendment_name',
            'appointment': 'appointment',
            'comments': 'comments',
            'doctor': 'doctor',
            'id': 'id',
            'patient': 'patient'
        }

        self._amendment_file = amendment_file
        self._amendment_name = amendment_name
        self._appointment = appointment
        self._comments = comments
        self._doctor = doctor
        self._id = id
        self._patient = patient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientAmendment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientAmendment of this PatientAmendment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amendment_file(self):
        """Gets the amendment_file of this PatientAmendment.

        A PDF file containing the amended information for the patient's record

        :return: The amendment_file of this PatientAmendment.
        :rtype: str
        """
        return self._amendment_file

    @amendment_file.setter
    def amendment_file(self, amendment_file):
        """Sets the amendment_file of this PatientAmendment.

        A PDF file containing the amended information for the patient's record

        :param amendment_file: The amendment_file of this PatientAmendment.
        :type amendment_file: str
        """
        if amendment_file is None:
            raise ValueError("Invalid value for `amendment_file`, must not be `None`")

        self._amendment_file = amendment_file

    @property
    def amendment_name(self):
        """Gets the amendment_name of this PatientAmendment.

        

        :return: The amendment_name of this PatientAmendment.
        :rtype: str
        """
        return self._amendment_name

    @amendment_name.setter
    def amendment_name(self, amendment_name):
        """Sets the amendment_name of this PatientAmendment.

        

        :param amendment_name: The amendment_name of this PatientAmendment.
        :type amendment_name: str
        """
        if amendment_name is None:
            raise ValueError("Invalid value for `amendment_name`, must not be `None`")

        self._amendment_name = amendment_name

    @property
    def appointment(self):
        """Gets the appointment of this PatientAmendment.

        ID of the appointment to which the amendment applies, if any. If present, the `amendment_file` will be appended to the clinical note for this appointment.

        :return: The appointment of this PatientAmendment.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this PatientAmendment.

        ID of the appointment to which the amendment applies, if any. If present, the `amendment_file` will be appended to the clinical note for this appointment.

        :param appointment: The appointment of this PatientAmendment.
        :type appointment: int
        """

        self._appointment = appointment

    @property
    def comments(self):
        """Gets the comments of this PatientAmendment.

        

        :return: The comments of this PatientAmendment.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PatientAmendment.

        

        :param comments: The comments of this PatientAmendment.
        :type comments: str
        """

        self._comments = comments

    @property
    def doctor(self):
        """Gets the doctor of this PatientAmendment.

        ID of the doctor who owns the amendment

        :return: The doctor of this PatientAmendment.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientAmendment.

        ID of the doctor who owns the amendment

        :param doctor: The doctor of this PatientAmendment.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this PatientAmendment.

        

        :return: The id of this PatientAmendment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientAmendment.

        

        :param id: The id of this PatientAmendment.
        :type id: int
        """

        self._id = id

    @property
    def patient(self):
        """Gets the patient of this PatientAmendment.

        ID of the patient to whom the amendment applies

        :return: The patient of this PatientAmendment.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientAmendment.

        ID of the patient to whom the amendment applies

        :param patient: The patient of this PatientAmendment.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient
