# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientProblem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_changed: str=None, date_diagnosis: str=None, date_onset: str=None, description: str=None, doctor: int=None, icd_code: str=None, icd_version: str=None, id: int=None, info_url: str=None, name: str=None, notes: str=None, patient: int=None, snomed_ct_code: str=None, status: str=None):
        """PatientProblem - a model defined in OpenAPI

        :param date_changed: The date_changed of this PatientProblem.
        :param date_diagnosis: The date_diagnosis of this PatientProblem.
        :param date_onset: The date_onset of this PatientProblem.
        :param description: The description of this PatientProblem.
        :param doctor: The doctor of this PatientProblem.
        :param icd_code: The icd_code of this PatientProblem.
        :param icd_version: The icd_version of this PatientProblem.
        :param id: The id of this PatientProblem.
        :param info_url: The info_url of this PatientProblem.
        :param name: The name of this PatientProblem.
        :param notes: The notes of this PatientProblem.
        :param patient: The patient of this PatientProblem.
        :param snomed_ct_code: The snomed_ct_code of this PatientProblem.
        :param status: The status of this PatientProblem.
        """
        self.openapi_types = {
            'date_changed': str,
            'date_diagnosis': str,
            'date_onset': str,
            'description': str,
            'doctor': int,
            'icd_code': str,
            'icd_version': str,
            'id': int,
            'info_url': str,
            'name': str,
            'notes': str,
            'patient': int,
            'snomed_ct_code': str,
            'status': str
        }

        self.attribute_map = {
            'date_changed': 'date_changed',
            'date_diagnosis': 'date_diagnosis',
            'date_onset': 'date_onset',
            'description': 'description',
            'doctor': 'doctor',
            'icd_code': 'icd_code',
            'icd_version': 'icd_version',
            'id': 'id',
            'info_url': 'info_url',
            'name': 'name',
            'notes': 'notes',
            'patient': 'patient',
            'snomed_ct_code': 'snomed_ct_code',
            'status': 'status'
        }

        self._date_changed = date_changed
        self._date_diagnosis = date_diagnosis
        self._date_onset = date_onset
        self._description = description
        self._doctor = doctor
        self._icd_code = icd_code
        self._icd_version = icd_version
        self._id = id
        self._info_url = info_url
        self._name = name
        self._notes = notes
        self._patient = patient
        self._snomed_ct_code = snomed_ct_code
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientProblem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientProblem of this PatientProblem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_changed(self):
        """Gets the date_changed of this PatientProblem.

        

        :return: The date_changed of this PatientProblem.
        :rtype: str
        """
        return self._date_changed

    @date_changed.setter
    def date_changed(self, date_changed):
        """Sets the date_changed of this PatientProblem.

        

        :param date_changed: The date_changed of this PatientProblem.
        :type date_changed: str
        """

        self._date_changed = date_changed

    @property
    def date_diagnosis(self):
        """Gets the date_diagnosis of this PatientProblem.

        

        :return: The date_diagnosis of this PatientProblem.
        :rtype: str
        """
        return self._date_diagnosis

    @date_diagnosis.setter
    def date_diagnosis(self, date_diagnosis):
        """Sets the date_diagnosis of this PatientProblem.

        

        :param date_diagnosis: The date_diagnosis of this PatientProblem.
        :type date_diagnosis: str
        """

        self._date_diagnosis = date_diagnosis

    @property
    def date_onset(self):
        """Gets the date_onset of this PatientProblem.

        

        :return: The date_onset of this PatientProblem.
        :rtype: str
        """
        return self._date_onset

    @date_onset.setter
    def date_onset(self, date_onset):
        """Sets the date_onset of this PatientProblem.

        

        :param date_onset: The date_onset of this PatientProblem.
        :type date_onset: str
        """

        self._date_onset = date_onset

    @property
    def description(self):
        """Gets the description of this PatientProblem.

        

        :return: The description of this PatientProblem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatientProblem.

        

        :param description: The description of this PatientProblem.
        :type description: str
        """

        self._description = description

    @property
    def doctor(self):
        """Gets the doctor of this PatientProblem.

        

        :return: The doctor of this PatientProblem.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PatientProblem.

        

        :param doctor: The doctor of this PatientProblem.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def icd_code(self):
        """Gets the icd_code of this PatientProblem.

        ICD9 or ICD10 code for the problem

        :return: The icd_code of this PatientProblem.
        :rtype: str
        """
        return self._icd_code

    @icd_code.setter
    def icd_code(self, icd_code):
        """Sets the icd_code of this PatientProblem.

        ICD9 or ICD10 code for the problem

        :param icd_code: The icd_code of this PatientProblem.
        :type icd_code: str
        """

        self._icd_code = icd_code

    @property
    def icd_version(self):
        """Gets the icd_version of this PatientProblem.

        Either `9` or `10`. If omitted in writing, default to 10.

        :return: The icd_version of this PatientProblem.
        :rtype: str
        """
        return self._icd_version

    @icd_version.setter
    def icd_version(self, icd_version):
        """Sets the icd_version of this PatientProblem.

        Either `9` or `10`. If omitted in writing, default to 10.

        :param icd_version: The icd_version of this PatientProblem.
        :type icd_version: str
        """
        allowed_values = ["9", "10"]  # noqa: E501
        if icd_version not in allowed_values:
            raise ValueError(
                "Invalid value for `icd_version` ({0}), must be one of {1}"
                .format(icd_version, allowed_values)
            )

        self._icd_version = icd_version

    @property
    def id(self):
        """Gets the id of this PatientProblem.

        

        :return: The id of this PatientProblem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientProblem.

        

        :param id: The id of this PatientProblem.
        :type id: int
        """

        self._id = id

    @property
    def info_url(self):
        """Gets the info_url of this PatientProblem.

        External URL with more information about the problem, intended for patient education

        :return: The info_url of this PatientProblem.
        :rtype: str
        """
        return self._info_url

    @info_url.setter
    def info_url(self, info_url):
        """Sets the info_url of this PatientProblem.

        External URL with more information about the problem, intended for patient education

        :param info_url: The info_url of this PatientProblem.
        :type info_url: str
        """

        self._info_url = info_url

    @property
    def name(self):
        """Gets the name of this PatientProblem.

        Name of the problem

        :return: The name of this PatientProblem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientProblem.

        Name of the problem

        :param name: The name of this PatientProblem.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this PatientProblem.

        Any additional notes by the provider

        :return: The notes of this PatientProblem.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PatientProblem.

        Any additional notes by the provider

        :param notes: The notes of this PatientProblem.
        :type notes: str
        """

        self._notes = notes

    @property
    def patient(self):
        """Gets the patient of this PatientProblem.

        

        :return: The patient of this PatientProblem.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientProblem.

        

        :param patient: The patient of this PatientProblem.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def snomed_ct_code(self):
        """Gets the snomed_ct_code of this PatientProblem.

        SnoMED code for the problem

        :return: The snomed_ct_code of this PatientProblem.
        :rtype: str
        """
        return self._snomed_ct_code

    @snomed_ct_code.setter
    def snomed_ct_code(self, snomed_ct_code):
        """Sets the snomed_ct_code of this PatientProblem.

        SnoMED code for the problem

        :param snomed_ct_code: The snomed_ct_code of this PatientProblem.
        :type snomed_ct_code: str
        """

        self._snomed_ct_code = snomed_ct_code

    @property
    def status(self):
        """Gets the status of this PatientProblem.

        Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`

        :return: The status of this PatientProblem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatientProblem.

        Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`

        :param status: The status of this PatientProblem.
        :type status: str
        """
        allowed_values = ["active", "inactive", "resolved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
