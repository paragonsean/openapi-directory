# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppointmentProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, color: str=None, doctor: int=None, duration: int=None, id: int=None, name: str=None, online_scheduling: bool=None, reason: str=None, sort_order: int=None):
        """AppointmentProfile - a model defined in OpenAPI

        :param archived: The archived of this AppointmentProfile.
        :param color: The color of this AppointmentProfile.
        :param doctor: The doctor of this AppointmentProfile.
        :param duration: The duration of this AppointmentProfile.
        :param id: The id of this AppointmentProfile.
        :param name: The name of this AppointmentProfile.
        :param online_scheduling: The online_scheduling of this AppointmentProfile.
        :param reason: The reason of this AppointmentProfile.
        :param sort_order: The sort_order of this AppointmentProfile.
        """
        self.openapi_types = {
            'archived': bool,
            'color': str,
            'doctor': int,
            'duration': int,
            'id': int,
            'name': str,
            'online_scheduling': bool,
            'reason': str,
            'sort_order': int
        }

        self.attribute_map = {
            'archived': 'archived',
            'color': 'color',
            'doctor': 'doctor',
            'duration': 'duration',
            'id': 'id',
            'name': 'name',
            'online_scheduling': 'online_scheduling',
            'reason': 'reason',
            'sort_order': 'sort_order'
        }

        self._archived = archived
        self._color = color
        self._doctor = doctor
        self._duration = duration
        self._id = id
        self._name = name
        self._online_scheduling = online_scheduling
        self._reason = reason
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppointmentProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppointmentProfile of this AppointmentProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this AppointmentProfile.

        Indicates that the object has been soft-deleted and should not be used

        :return: The archived of this AppointmentProfile.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this AppointmentProfile.

        Indicates that the object has been soft-deleted and should not be used

        :param archived: The archived of this AppointmentProfile.
        :type archived: bool
        """

        self._archived = archived

    @property
    def color(self):
        """Gets the color of this AppointmentProfile.

        

        :return: The color of this AppointmentProfile.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AppointmentProfile.

        

        :param color: The color of this AppointmentProfile.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def doctor(self):
        """Gets the doctor of this AppointmentProfile.

        

        :return: The doctor of this AppointmentProfile.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this AppointmentProfile.

        

        :param doctor: The doctor of this AppointmentProfile.
        :type doctor: int
        """

        self._doctor = doctor

    @property
    def duration(self):
        """Gets the duration of this AppointmentProfile.

        Length of an appointment in minutes

        :return: The duration of this AppointmentProfile.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AppointmentProfile.

        Length of an appointment in minutes

        :param duration: The duration of this AppointmentProfile.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this AppointmentProfile.

        

        :return: The id of this AppointmentProfile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppointmentProfile.

        

        :param id: The id of this AppointmentProfile.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AppointmentProfile.

        

        :return: The name of this AppointmentProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppointmentProfile.

        

        :param name: The name of this AppointmentProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def online_scheduling(self):
        """Gets the online_scheduling of this AppointmentProfile.

        Whether this profile should be available for online scheduling

        :return: The online_scheduling of this AppointmentProfile.
        :rtype: bool
        """
        return self._online_scheduling

    @online_scheduling.setter
    def online_scheduling(self, online_scheduling):
        """Sets the online_scheduling of this AppointmentProfile.

        Whether this profile should be available for online scheduling

        :param online_scheduling: The online_scheduling of this AppointmentProfile.
        :type online_scheduling: bool
        """
        if online_scheduling is None:
            raise ValueError("Invalid value for `online_scheduling`, must not be `None`")

        self._online_scheduling = online_scheduling

    @property
    def reason(self):
        """Gets the reason of this AppointmentProfile.

        

        :return: The reason of this AppointmentProfile.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AppointmentProfile.

        

        :param reason: The reason of this AppointmentProfile.
        :type reason: str
        """

        self._reason = reason

    @property
    def sort_order(self):
        """Gets the sort_order of this AppointmentProfile.

        Override the usual ordering ordering of appointments in the patient's appointments page. Lower values are shown at the top

        :return: The sort_order of this AppointmentProfile.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AppointmentProfile.

        Override the usual ordering ordering of appointments in the patient's appointments page. Lower values are shown at the top

        :param sort_order: The sort_order of this AppointmentProfile.
        :type sort_order: int
        """

        self._sort_order = sort_order
