# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.office_online_hours import OfficeOnlineHours
from openapi_server import util


class Office(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, archived: bool=None, city: str=None, country: str=None, doctor: str=None, end_time: str=None, exam_rooms: str=None, fax_number: str=None, id: int=None, name: str=None, online_scheduling: bool=None, online_timeslots: List[OfficeOnlineHours]=None, phone_number: str=None, start_time: str=None, state: str=None, tax_id_number_professional: str=None, zip_code: str=None):
        """Office - a model defined in OpenAPI

        :param address: The address of this Office.
        :param archived: The archived of this Office.
        :param city: The city of this Office.
        :param country: The country of this Office.
        :param doctor: The doctor of this Office.
        :param end_time: The end_time of this Office.
        :param exam_rooms: The exam_rooms of this Office.
        :param fax_number: The fax_number of this Office.
        :param id: The id of this Office.
        :param name: The name of this Office.
        :param online_scheduling: The online_scheduling of this Office.
        :param online_timeslots: The online_timeslots of this Office.
        :param phone_number: The phone_number of this Office.
        :param start_time: The start_time of this Office.
        :param state: The state of this Office.
        :param tax_id_number_professional: The tax_id_number_professional of this Office.
        :param zip_code: The zip_code of this Office.
        """
        self.openapi_types = {
            'address': str,
            'archived': bool,
            'city': str,
            'country': str,
            'doctor': str,
            'end_time': str,
            'exam_rooms': str,
            'fax_number': str,
            'id': int,
            'name': str,
            'online_scheduling': bool,
            'online_timeslots': List[OfficeOnlineHours],
            'phone_number': str,
            'start_time': str,
            'state': str,
            'tax_id_number_professional': str,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'archived': 'archived',
            'city': 'city',
            'country': 'country',
            'doctor': 'doctor',
            'end_time': 'end_time',
            'exam_rooms': 'exam_rooms',
            'fax_number': 'fax_number',
            'id': 'id',
            'name': 'name',
            'online_scheduling': 'online_scheduling',
            'online_timeslots': 'online_timeslots',
            'phone_number': 'phone_number',
            'start_time': 'start_time',
            'state': 'state',
            'tax_id_number_professional': 'tax_id_number_professional',
            'zip_code': 'zip_code'
        }

        self._address = address
        self._archived = archived
        self._city = city
        self._country = country
        self._doctor = doctor
        self._end_time = end_time
        self._exam_rooms = exam_rooms
        self._fax_number = fax_number
        self._id = id
        self._name = name
        self._online_scheduling = online_scheduling
        self._online_timeslots = online_timeslots
        self._phone_number = phone_number
        self._start_time = start_time
        self._state = state
        self._tax_id_number_professional = tax_id_number_professional
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Office':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Office of this Office.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Office.

        

        :return: The address of this Office.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Office.

        

        :param address: The address of this Office.
        :type address: str
        """

        self._address = address

    @property
    def archived(self):
        """Gets the archived of this Office.

        Indicates that the object has been soft-deleted and should not be used

        :return: The archived of this Office.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Office.

        Indicates that the object has been soft-deleted and should not be used

        :param archived: The archived of this Office.
        :type archived: bool
        """

        self._archived = archived

    @property
    def city(self):
        """Gets the city of this Office.

        

        :return: The city of this Office.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Office.

        

        :param city: The city of this Office.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Office.

        Two-letter country code

        :return: The country of this Office.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Office.

        Two-letter country code

        :param country: The country of this Office.
        :type country: str
        """
        allowed_values = ["", "AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CG", "CD", "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "CYM", "DK", "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "XK", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "falsenoqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def doctor(self):
        """Gets the doctor of this Office.

        ID of the doctor who owns the office

        :return: The doctor of this Office.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this Office.

        ID of the doctor who owns the office

        :param doctor: The doctor of this Office.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def end_time(self):
        """Gets the end_time of this Office.

        Truncated to the hour. Default is `24:00`

        :return: The end_time of this Office.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Office.

        Truncated to the hour. Default is `24:00`

        :param end_time: The end_time of this Office.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def exam_rooms(self):
        """Gets the exam_rooms of this Office.

        

        :return: The exam_rooms of this Office.
        :rtype: str
        """
        return self._exam_rooms

    @exam_rooms.setter
    def exam_rooms(self, exam_rooms):
        """Sets the exam_rooms of this Office.

        

        :param exam_rooms: The exam_rooms of this Office.
        :type exam_rooms: str
        """

        self._exam_rooms = exam_rooms

    @property
    def fax_number(self):
        """Gets the fax_number of this Office.

        

        :return: The fax_number of this Office.
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this Office.

        

        :param fax_number: The fax_number of this Office.
        :type fax_number: str
        """

        self._fax_number = fax_number

    @property
    def id(self):
        """Gets the id of this Office.

        

        :return: The id of this Office.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Office.

        

        :param id: The id of this Office.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Office.

        

        :return: The name of this Office.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Office.

        

        :param name: The name of this Office.
        :type name: str
        """

        self._name = name

    @property
    def online_scheduling(self):
        """Gets the online_scheduling of this Office.

        Default is `false`

        :return: The online_scheduling of this Office.
        :rtype: bool
        """
        return self._online_scheduling

    @online_scheduling.setter
    def online_scheduling(self, online_scheduling):
        """Sets the online_scheduling of this Office.

        Default is `false`

        :param online_scheduling: The online_scheduling of this Office.
        :type online_scheduling: bool
        """

        self._online_scheduling = online_scheduling

    @property
    def online_timeslots(self):
        """Gets the online_timeslots of this Office.

        Array of timslots

        :return: The online_timeslots of this Office.
        :rtype: List[OfficeOnlineHours]
        """
        return self._online_timeslots

    @online_timeslots.setter
    def online_timeslots(self, online_timeslots):
        """Sets the online_timeslots of this Office.

        Array of timslots

        :param online_timeslots: The online_timeslots of this Office.
        :type online_timeslots: List[OfficeOnlineHours]
        """

        self._online_timeslots = online_timeslots

    @property
    def phone_number(self):
        """Gets the phone_number of this Office.

        

        :return: The phone_number of this Office.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Office.

        

        :param phone_number: The phone_number of this Office.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def start_time(self):
        """Gets the start_time of this Office.

        Truncated to the hour. Default is `00:00:00`

        :return: The start_time of this Office.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Office.

        Truncated to the hour. Default is `00:00:00`

        :param start_time: The start_time of this Office.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Office.

        Two-letter abbreviation

        :return: The state of this Office.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Office.

        Two-letter abbreviation

        :param state: The state of this Office.
        :type state: str
        """
        allowed_values = ["AL", "AK", "AS", "AZ", "AR", "AA", "AE", "AP", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tax_id_number_professional(self):
        """Gets the tax_id_number_professional of this Office.

        Billing Tax ID #

        :return: The tax_id_number_professional of this Office.
        :rtype: str
        """
        return self._tax_id_number_professional

    @tax_id_number_professional.setter
    def tax_id_number_professional(self, tax_id_number_professional):
        """Sets the tax_id_number_professional of this Office.

        Billing Tax ID #

        :param tax_id_number_professional: The tax_id_number_professional of this Office.
        :type tax_id_number_professional: str
        """

        self._tax_id_number_professional = tax_id_number_professional

    @property
    def zip_code(self):
        """Gets the zip_code of this Office.

        

        :return: The zip_code of this Office.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Office.

        

        :param zip_code: The zip_code of this Office.
        :type zip_code: str
        """

        self._zip_code = zip_code
