# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoapNoteLineItemFieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment: int=None, clinical_note_field: int=None, created_at: str=None, id: int=None, updated_at: str=None, value: str=None):
        """SoapNoteLineItemFieldValue - a model defined in OpenAPI

        :param appointment: The appointment of this SoapNoteLineItemFieldValue.
        :param clinical_note_field: The clinical_note_field of this SoapNoteLineItemFieldValue.
        :param created_at: The created_at of this SoapNoteLineItemFieldValue.
        :param id: The id of this SoapNoteLineItemFieldValue.
        :param updated_at: The updated_at of this SoapNoteLineItemFieldValue.
        :param value: The value of this SoapNoteLineItemFieldValue.
        """
        self.openapi_types = {
            'appointment': int,
            'clinical_note_field': int,
            'created_at': str,
            'id': int,
            'updated_at': str,
            'value': str
        }

        self.attribute_map = {
            'appointment': 'appointment',
            'clinical_note_field': 'clinical_note_field',
            'created_at': 'created_at',
            'id': 'id',
            'updated_at': 'updated_at',
            'value': 'value'
        }

        self._appointment = appointment
        self._clinical_note_field = clinical_note_field
        self._created_at = created_at
        self._id = id
        self._updated_at = updated_at
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoapNoteLineItemFieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoapNoteLineItemFieldValue of this SoapNoteLineItemFieldValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment(self):
        """Gets the appointment of this SoapNoteLineItemFieldValue.

        ID of appointment that the value applies to

        :return: The appointment of this SoapNoteLineItemFieldValue.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this SoapNoteLineItemFieldValue.

        ID of appointment that the value applies to

        :param appointment: The appointment of this SoapNoteLineItemFieldValue.
        :type appointment: int
        """
        if appointment is None:
            raise ValueError("Invalid value for `appointment`, must not be `None`")

        self._appointment = appointment

    @property
    def clinical_note_field(self):
        """Gets the clinical_note_field of this SoapNoteLineItemFieldValue.

        ID of `/api/clinical_note_field_types` object that indicates type of the value

        :return: The clinical_note_field of this SoapNoteLineItemFieldValue.
        :rtype: int
        """
        return self._clinical_note_field

    @clinical_note_field.setter
    def clinical_note_field(self, clinical_note_field):
        """Sets the clinical_note_field of this SoapNoteLineItemFieldValue.

        ID of `/api/clinical_note_field_types` object that indicates type of the value

        :param clinical_note_field: The clinical_note_field of this SoapNoteLineItemFieldValue.
        :type clinical_note_field: int
        """
        if clinical_note_field is None:
            raise ValueError("Invalid value for `clinical_note_field`, must not be `None`")

        self._clinical_note_field = clinical_note_field

    @property
    def created_at(self):
        """Gets the created_at of this SoapNoteLineItemFieldValue.

        

        :return: The created_at of this SoapNoteLineItemFieldValue.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SoapNoteLineItemFieldValue.

        

        :param created_at: The created_at of this SoapNoteLineItemFieldValue.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this SoapNoteLineItemFieldValue.

        

        :return: The id of this SoapNoteLineItemFieldValue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoapNoteLineItemFieldValue.

        

        :param id: The id of this SoapNoteLineItemFieldValue.
        :type id: int
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this SoapNoteLineItemFieldValue.

        

        :return: The updated_at of this SoapNoteLineItemFieldValue.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SoapNoteLineItemFieldValue.

        

        :param updated_at: The updated_at of this SoapNoteLineItemFieldValue.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def value(self):
        """Gets the value of this SoapNoteLineItemFieldValue.

        Value of the field. Interpretation varies by field type. `clinical_note_field.data_type` | Value | Description ------------------------------- | ----- | ----------- `\"Header\"` | string |  `\"SubHeader\"` | string | `\"String\"` | string | If field is single/multiple select field, make sure value presents in allowed values set. `\"TwoStrings\"` | string | String is seperated by `\"/\"` `\"NullCheckbox\"` | string | Can be `\"0\"`, `\"1\"`, `\"2\"`, `\"0\"`-`Not selected`, `\"1\"`-`No`, `\"2\"`-`Yes` `\"Checkbox\"` | string | Can be `\"True\"`, `\"False\"` 

        :return: The value of this SoapNoteLineItemFieldValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SoapNoteLineItemFieldValue.

        Value of the field. Interpretation varies by field type. `clinical_note_field.data_type` | Value | Description ------------------------------- | ----- | ----------- `\"Header\"` | string |  `\"SubHeader\"` | string | `\"String\"` | string | If field is single/multiple select field, make sure value presents in allowed values set. `\"TwoStrings\"` | string | String is seperated by `\"/\"` `\"NullCheckbox\"` | string | Can be `\"0\"`, `\"1\"`, `\"2\"`, `\"0\"`-`Not selected`, `\"1\"`-`No`, `\"2\"`-`Yes` `\"Checkbox\"` | string | Can be `\"True\"`, `\"False\"` 

        :param value: The value of this SoapNoteLineItemFieldValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
