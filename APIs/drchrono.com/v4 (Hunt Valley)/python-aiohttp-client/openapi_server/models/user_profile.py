# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doctor: str=None, id: str=None, is_doctor: str=None, is_staff: str=None, permissions: str=None, practice_group: str=None, username: str=None):
        """UserProfile - a model defined in OpenAPI

        :param doctor: The doctor of this UserProfile.
        :param id: The id of this UserProfile.
        :param is_doctor: The is_doctor of this UserProfile.
        :param is_staff: The is_staff of this UserProfile.
        :param permissions: The permissions of this UserProfile.
        :param practice_group: The practice_group of this UserProfile.
        :param username: The username of this UserProfile.
        """
        self.openapi_types = {
            'doctor': str,
            'id': str,
            'is_doctor': str,
            'is_staff': str,
            'permissions': str,
            'practice_group': str,
            'username': str
        }

        self.attribute_map = {
            'doctor': 'doctor',
            'id': 'id',
            'is_doctor': 'is_doctor',
            'is_staff': 'is_staff',
            'permissions': 'permissions',
            'practice_group': 'practice_group',
            'username': 'username'
        }

        self._doctor = doctor
        self._id = id
        self._is_doctor = is_doctor
        self._is_staff = is_staff
        self._permissions = permissions
        self._practice_group = practice_group
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfile of this UserProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doctor(self):
        """Gets the doctor of this UserProfile.

        For staff members, this is their primary physician's ID. For doctors, it is their own ID.

        :return: The doctor of this UserProfile.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this UserProfile.

        For staff members, this is their primary physician's ID. For doctors, it is their own ID.

        :param doctor: The doctor of this UserProfile.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def id(self):
        """Gets the id of this UserProfile.

        

        :return: The id of this UserProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProfile.

        

        :param id: The id of this UserProfile.
        :type id: str
        """

        self._id = id

    @property
    def is_doctor(self):
        """Gets the is_doctor of this UserProfile.

        Mutually exclusive with `is_staff`

        :return: The is_doctor of this UserProfile.
        :rtype: str
        """
        return self._is_doctor

    @is_doctor.setter
    def is_doctor(self, is_doctor):
        """Sets the is_doctor of this UserProfile.

        Mutually exclusive with `is_staff`

        :param is_doctor: The is_doctor of this UserProfile.
        :type is_doctor: str
        """

        self._is_doctor = is_doctor

    @property
    def is_staff(self):
        """Gets the is_staff of this UserProfile.

        Mutually exclusive with `is_doctor`

        :return: The is_staff of this UserProfile.
        :rtype: str
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this UserProfile.

        Mutually exclusive with `is_doctor`

        :param is_staff: The is_staff of this UserProfile.
        :type is_staff: str
        """

        self._is_staff = is_staff

    @property
    def permissions(self):
        """Gets the permissions of this UserProfile.

        Permissions the user has.

        :return: The permissions of this UserProfile.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserProfile.

        Permissions the user has.

        :param permissions: The permissions of this UserProfile.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def practice_group(self):
        """Gets the practice_group of this UserProfile.

        The ID of the practice group this user belongs to. This can be used to identify users in the same practice.

        :return: The practice_group of this UserProfile.
        :rtype: str
        """
        return self._practice_group

    @practice_group.setter
    def practice_group(self, practice_group):
        """Sets the practice_group of this UserProfile.

        The ID of the practice group this user belongs to. This can be used to identify users in the same practice.

        :param practice_group: The practice_group of this UserProfile.
        :type practice_group: str
        """

        self._practice_group = practice_group

    @property
    def username(self):
        """Gets the username of this UserProfile.

        

        :return: The username of this UserProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserProfile.

        

        :param username: The username of this UserProfile.
        :type username: str
        """

        self._username = username
