# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CarePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment: str=None, code: str=None, code_system: str=None, created_at: str=None, description: str=None, id: int=None, instructions: str=None, patient: str=None, plan_type: str=None, scheduled_date: str=None, title: str=None, updated_at: str=None):
        """CarePlan - a model defined in OpenAPI

        :param appointment: The appointment of this CarePlan.
        :param code: The code of this CarePlan.
        :param code_system: The code_system of this CarePlan.
        :param created_at: The created_at of this CarePlan.
        :param description: The description of this CarePlan.
        :param id: The id of this CarePlan.
        :param instructions: The instructions of this CarePlan.
        :param patient: The patient of this CarePlan.
        :param plan_type: The plan_type of this CarePlan.
        :param scheduled_date: The scheduled_date of this CarePlan.
        :param title: The title of this CarePlan.
        :param updated_at: The updated_at of this CarePlan.
        """
        self.openapi_types = {
            'appointment': str,
            'code': str,
            'code_system': str,
            'created_at': str,
            'description': str,
            'id': int,
            'instructions': str,
            'patient': str,
            'plan_type': str,
            'scheduled_date': str,
            'title': str,
            'updated_at': str
        }

        self.attribute_map = {
            'appointment': 'appointment',
            'code': 'code',
            'code_system': 'code_system',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'instructions': 'instructions',
            'patient': 'patient',
            'plan_type': 'plan_type',
            'scheduled_date': 'scheduled_date',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._appointment = appointment
        self._code = code
        self._code_system = code_system
        self._created_at = created_at
        self._description = description
        self._id = id
        self._instructions = instructions
        self._patient = patient
        self._plan_type = plan_type
        self._scheduled_date = scheduled_date
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CarePlan of this CarePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment(self):
        """Gets the appointment of this CarePlan.

        

        :return: The appointment of this CarePlan.
        :rtype: str
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this CarePlan.

        

        :param appointment: The appointment of this CarePlan.
        :type appointment: str
        """

        self._appointment = appointment

    @property
    def code(self):
        """Gets the code of this CarePlan.

        

        :return: The code of this CarePlan.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CarePlan.

        

        :param code: The code of this CarePlan.
        :type code: str
        """

        self._code = code

    @property
    def code_system(self):
        """Gets the code_system of this CarePlan.

        

        :return: The code_system of this CarePlan.
        :rtype: str
        """
        return self._code_system

    @code_system.setter
    def code_system(self, code_system):
        """Sets the code_system of this CarePlan.

        

        :param code_system: The code_system of this CarePlan.
        :type code_system: str
        """

        self._code_system = code_system

    @property
    def created_at(self):
        """Gets the created_at of this CarePlan.

        

        :return: The created_at of this CarePlan.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CarePlan.

        

        :param created_at: The created_at of this CarePlan.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CarePlan.

        

        :return: The description of this CarePlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CarePlan.

        

        :param description: The description of this CarePlan.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CarePlan.

        

        :return: The id of this CarePlan.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarePlan.

        

        :param id: The id of this CarePlan.
        :type id: int
        """

        self._id = id

    @property
    def instructions(self):
        """Gets the instructions of this CarePlan.

        

        :return: The instructions of this CarePlan.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this CarePlan.

        

        :param instructions: The instructions of this CarePlan.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def patient(self):
        """Gets the patient of this CarePlan.

        

        :return: The patient of this CarePlan.
        :rtype: str
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this CarePlan.

        

        :param patient: The patient of this CarePlan.
        :type patient: str
        """

        self._patient = patient

    @property
    def plan_type(self):
        """Gets the plan_type of this CarePlan.

        Can be one of the following: `1`(Goal), `2`(Patient education), `3`(Patient decision aid), `4`(Patient clinical instruction), `5`(Referral to other doctor), `6`(Health concerns)

        :return: The plan_type of this CarePlan.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this CarePlan.

        Can be one of the following: `1`(Goal), `2`(Patient education), `3`(Patient decision aid), `4`(Patient clinical instruction), `5`(Referral to other doctor), `6`(Health concerns)

        :param plan_type: The plan_type of this CarePlan.
        :type plan_type: str
        """
        allowed_values = ["1", "2", "3", "4", "5", "6"]  # noqa: E501
        if plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_type` ({0}), must be one of {1}"
                .format(plan_type, allowed_values)
            )

        self._plan_type = plan_type

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this CarePlan.

        

        :return: The scheduled_date of this CarePlan.
        :rtype: str
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this CarePlan.

        

        :param scheduled_date: The scheduled_date of this CarePlan.
        :type scheduled_date: str
        """

        self._scheduled_date = scheduled_date

    @property
    def title(self):
        """Gets the title of this CarePlan.

        

        :return: The title of this CarePlan.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CarePlan.

        

        :param title: The title of this CarePlan.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this CarePlan.

        

        :return: The updated_at of this CarePlan.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CarePlan.

        

        :param updated_at: The updated_at of this CarePlan.
        :type updated_at: str
        """

        self._updated_at = updated_at
