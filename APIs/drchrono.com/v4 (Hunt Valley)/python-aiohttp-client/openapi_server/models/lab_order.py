# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.icd10_code import ICD10Code
from openapi_server import util


class LabOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accession_number: str=None, doctor: int=None, documents: List[str]=None, icd10_codes: List[ICD10Code]=None, id: int=None, notes: str=None, patient: int=None, priority: str=None, requisition_id: str=None, status: str=None, sublab: int=None, timestamp: str=None):
        """LabOrder - a model defined in OpenAPI

        :param accession_number: The accession_number of this LabOrder.
        :param doctor: The doctor of this LabOrder.
        :param documents: The documents of this LabOrder.
        :param icd10_codes: The icd10_codes of this LabOrder.
        :param id: The id of this LabOrder.
        :param notes: The notes of this LabOrder.
        :param patient: The patient of this LabOrder.
        :param priority: The priority of this LabOrder.
        :param requisition_id: The requisition_id of this LabOrder.
        :param status: The status of this LabOrder.
        :param sublab: The sublab of this LabOrder.
        :param timestamp: The timestamp of this LabOrder.
        """
        self.openapi_types = {
            'accession_number': str,
            'doctor': int,
            'documents': List[str],
            'icd10_codes': List[ICD10Code],
            'id': int,
            'notes': str,
            'patient': int,
            'priority': str,
            'requisition_id': str,
            'status': str,
            'sublab': int,
            'timestamp': str
        }

        self.attribute_map = {
            'accession_number': 'accession_number',
            'doctor': 'doctor',
            'documents': 'documents',
            'icd10_codes': 'icd10_codes',
            'id': 'id',
            'notes': 'notes',
            'patient': 'patient',
            'priority': 'priority',
            'requisition_id': 'requisition_id',
            'status': 'status',
            'sublab': 'sublab',
            'timestamp': 'timestamp'
        }

        self._accession_number = accession_number
        self._doctor = doctor
        self._documents = documents
        self._icd10_codes = icd10_codes
        self._id = id
        self._notes = notes
        self._patient = patient
        self._priority = priority
        self._requisition_id = requisition_id
        self._status = status
        self._sublab = sublab
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabOrder of this LabOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accession_number(self):
        """Gets the accession_number of this LabOrder.

        For external use only

        :return: The accession_number of this LabOrder.
        :rtype: str
        """
        return self._accession_number

    @accession_number.setter
    def accession_number(self, accession_number):
        """Sets the accession_number of this LabOrder.

        For external use only

        :param accession_number: The accession_number of this LabOrder.
        :type accession_number: str
        """

        self._accession_number = accession_number

    @property
    def doctor(self):
        """Gets the doctor of this LabOrder.

        

        :return: The doctor of this LabOrder.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this LabOrder.

        

        :param doctor: The doctor of this LabOrder.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def documents(self):
        """Gets the documents of this LabOrder.

        Associated `/lab_documents` objects

        :return: The documents of this LabOrder.
        :rtype: List[str]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this LabOrder.

        Associated `/lab_documents` objects

        :param documents: The documents of this LabOrder.
        :type documents: List[str]
        """

        self._documents = documents

    @property
    def icd10_codes(self):
        """Gets the icd10_codes of this LabOrder.

        ICD-10 codes of the conditions which the tests concerns.

        :return: The icd10_codes of this LabOrder.
        :rtype: List[ICD10Code]
        """
        return self._icd10_codes

    @icd10_codes.setter
    def icd10_codes(self, icd10_codes):
        """Sets the icd10_codes of this LabOrder.

        ICD-10 codes of the conditions which the tests concerns.

        :param icd10_codes: The icd10_codes of this LabOrder.
        :type icd10_codes: List[ICD10Code]
        """

        self._icd10_codes = icd10_codes

    @property
    def id(self):
        """Gets the id of this LabOrder.

        

        :return: The id of this LabOrder.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabOrder.

        

        :param id: The id of this LabOrder.
        :type id: int
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this LabOrder.

        

        :return: The notes of this LabOrder.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this LabOrder.

        

        :param notes: The notes of this LabOrder.
        :type notes: str
        """

        self._notes = notes

    @property
    def patient(self):
        """Gets the patient of this LabOrder.

        

        :return: The patient of this LabOrder.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this LabOrder.

        

        :param patient: The patient of this LabOrder.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def priority(self):
        """Gets the priority of this LabOrder.

        `\"Normal\"` or `\"STAT\"`. Default `\"Normal\"`

        :return: The priority of this LabOrder.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this LabOrder.

        `\"Normal\"` or `\"STAT\"`. Default `\"Normal\"`

        :param priority: The priority of this LabOrder.
        :type priority: str
        """
        allowed_values = ["N", "S"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def requisition_id(self):
        """Gets the requisition_id of this LabOrder.

        The ID printed on the requisition PDF. Generally the same as id.

        :return: The requisition_id of this LabOrder.
        :rtype: str
        """
        return self._requisition_id

    @requisition_id.setter
    def requisition_id(self, requisition_id):
        """Sets the requisition_id of this LabOrder.

        The ID printed on the requisition PDF. Generally the same as id.

        :param requisition_id: The requisition_id of this LabOrder.
        :type requisition_id: str
        """

        self._requisition_id = requisition_id

    @property
    def status(self):
        """Gets the status of this LabOrder.

        Equivalent to HL7's ORC.5. Defaults to `\"N\"`. Value | Notes ----- | ----- `\"N\"` | not sent                                          | `\"Q\"` | queued for processing                             | `\"A\"` | `ABN (Advance Beneficiary Notice)` required       | `\"S\"` | send                                              | `\"R\"` | results received                                  | `\"E\"` | error                                             | 

        :return: The status of this LabOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabOrder.

        Equivalent to HL7's ORC.5. Defaults to `\"N\"`. Value | Notes ----- | ----- `\"N\"` | not sent                                          | `\"Q\"` | queued for processing                             | `\"A\"` | `ABN (Advance Beneficiary Notice)` required       | `\"S\"` | send                                              | `\"R\"` | results received                                  | `\"E\"` | error                                             | 

        :param status: The status of this LabOrder.
        :type status: str
        """

        self._status = status

    @property
    def sublab(self):
        """Gets the sublab of this LabOrder.

        

        :return: The sublab of this LabOrder.
        :rtype: int
        """
        return self._sublab

    @sublab.setter
    def sublab(self, sublab):
        """Sets the sublab of this LabOrder.

        

        :param sublab: The sublab of this LabOrder.
        :type sublab: int
        """
        if sublab is None:
            raise ValueError("Invalid value for `sublab`, must not be `None`")

        self._sublab = sublab

    @property
    def timestamp(self):
        """Gets the timestamp of this LabOrder.

        Time at which the order was submitted. Defaults to now

        :return: The timestamp of this LabOrder.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LabOrder.

        Time at which the order was submitted. Defaults to now

        :param timestamp: The timestamp of this LabOrder.
        :type timestamp: str
        """

        self._timestamp = timestamp
