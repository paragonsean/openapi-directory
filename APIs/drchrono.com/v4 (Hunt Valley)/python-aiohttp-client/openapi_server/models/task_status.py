# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, created_at: str=None, id: int=None, name: str=None, practice_group: int=None, status_category: str=None, task_category: int=None, updated_at: str=None):
        """TaskStatus - a model defined in OpenAPI

        :param archived: The archived of this TaskStatus.
        :param created_at: The created_at of this TaskStatus.
        :param id: The id of this TaskStatus.
        :param name: The name of this TaskStatus.
        :param practice_group: The practice_group of this TaskStatus.
        :param status_category: The status_category of this TaskStatus.
        :param task_category: The task_category of this TaskStatus.
        :param updated_at: The updated_at of this TaskStatus.
        """
        self.openapi_types = {
            'archived': bool,
            'created_at': str,
            'id': int,
            'name': str,
            'practice_group': int,
            'status_category': str,
            'task_category': int,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'practice_group': 'practice_group',
            'status_category': 'status_category',
            'task_category': 'task_category',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._created_at = created_at
        self._id = id
        self._name = name
        self._practice_group = practice_group
        self._status_category = status_category
        self._task_category = task_category
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskStatus of this TaskStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this TaskStatus.

        

        :return: The archived of this TaskStatus.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TaskStatus.

        

        :param archived: The archived of this TaskStatus.
        :type archived: bool
        """

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this TaskStatus.

        

        :return: The created_at of this TaskStatus.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskStatus.

        

        :param created_at: The created_at of this TaskStatus.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TaskStatus.

        

        :return: The id of this TaskStatus.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskStatus.

        

        :param id: The id of this TaskStatus.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaskStatus.

        

        :return: The name of this TaskStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskStatus.

        

        :param name: The name of this TaskStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def practice_group(self):
        """Gets the practice_group of this TaskStatus.

        

        :return: The practice_group of this TaskStatus.
        :rtype: int
        """
        return self._practice_group

    @practice_group.setter
    def practice_group(self, practice_group):
        """Sets the practice_group of this TaskStatus.

        

        :param practice_group: The practice_group of this TaskStatus.
        :type practice_group: int
        """
        if practice_group is None:
            raise ValueError("Invalid value for `practice_group`, must not be `None`")

        self._practice_group = practice_group

    @property
    def status_category(self):
        """Gets the status_category of this TaskStatus.

        Can be one of the following `O`(open), `P`(In progress), `H`(On hold), `C`(Complete), default to `O`(Open)

        :return: The status_category of this TaskStatus.
        :rtype: str
        """
        return self._status_category

    @status_category.setter
    def status_category(self, status_category):
        """Sets the status_category of this TaskStatus.

        Can be one of the following `O`(open), `P`(In progress), `H`(On hold), `C`(Complete), default to `O`(Open)

        :param status_category: The status_category of this TaskStatus.
        :type status_category: str
        """
        allowed_values = ["O", "P", "H", "C"]  # noqa: E501
        if status_category not in allowed_values:
            raise ValueError(
                "Invalid value for `status_category` ({0}), must be one of {1}"
                .format(status_category, allowed_values)
            )

        self._status_category = status_category

    @property
    def task_category(self):
        """Gets the task_category of this TaskStatus.

        ID of `/api/task_categories`

        :return: The task_category of this TaskStatus.
        :rtype: int
        """
        return self._task_category

    @task_category.setter
    def task_category(self, task_category):
        """Sets the task_category of this TaskStatus.

        ID of `/api/task_categories`

        :param task_category: The task_category of this TaskStatus.
        :type task_category: int
        """

        self._task_category = task_category

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskStatus.

        

        :return: The updated_at of this TaskStatus.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskStatus.

        

        :param updated_at: The updated_at of this TaskStatus.
        :type updated_at: str
        """

        self._updated_at = updated_at
