# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientFlag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, created_at: str=None, flag_text: str=None, flag_type: int=None, id: int=None, updated_at: str=None):
        """PatientFlag - a model defined in OpenAPI

        :param archived: The archived of this PatientFlag.
        :param created_at: The created_at of this PatientFlag.
        :param flag_text: The flag_text of this PatientFlag.
        :param flag_type: The flag_type of this PatientFlag.
        :param id: The id of this PatientFlag.
        :param updated_at: The updated_at of this PatientFlag.
        """
        self.openapi_types = {
            'archived': bool,
            'created_at': str,
            'flag_text': str,
            'flag_type': int,
            'id': int,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'created_at': 'created_at',
            'flag_text': 'flag_text',
            'flag_type': 'flag_type',
            'id': 'id',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._created_at = created_at
        self._flag_text = flag_text
        self._flag_type = flag_type
        self._id = id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientFlag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientFlag of this PatientFlag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this PatientFlag.

        

        :return: The archived of this PatientFlag.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this PatientFlag.

        

        :param archived: The archived of this PatientFlag.
        :type archived: bool
        """

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this PatientFlag.

        

        :return: The created_at of this PatientFlag.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientFlag.

        

        :param created_at: The created_at of this PatientFlag.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def flag_text(self):
        """Gets the flag_text of this PatientFlag.

        Description of the patient flag

        :return: The flag_text of this PatientFlag.
        :rtype: str
        """
        return self._flag_text

    @flag_text.setter
    def flag_text(self, flag_text):
        """Sets the flag_text of this PatientFlag.

        Description of the patient flag

        :param flag_text: The flag_text of this PatientFlag.
        :type flag_text: str
        """

        self._flag_text = flag_text

    @property
    def flag_type(self):
        """Gets the flag_type of this PatientFlag.

        ID of the associated `/api/patient_flag_types` object

        :return: The flag_type of this PatientFlag.
        :rtype: int
        """
        return self._flag_type

    @flag_type.setter
    def flag_type(self, flag_type):
        """Sets the flag_type of this PatientFlag.

        ID of the associated `/api/patient_flag_types` object

        :param flag_type: The flag_type of this PatientFlag.
        :type flag_type: int
        """

        self._flag_type = flag_type

    @property
    def id(self):
        """Gets the id of this PatientFlag.

        

        :return: The id of this PatientFlag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientFlag.

        

        :param id: The id of this PatientFlag.
        :type id: int
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this PatientFlag.

        

        :return: The updated_at of this PatientFlag.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PatientFlag.

        

        :param updated_at: The updated_at of this PatientFlag.
        :type updated_at: str
        """

        self._updated_at = updated_at
