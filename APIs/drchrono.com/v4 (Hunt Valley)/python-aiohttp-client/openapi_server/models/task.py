# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associated_task_item import AssociatedTaskItem
from openapi_server.models.task_note1 import TaskNote1
from openapi_server.models.task_reminder import TaskReminder
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, assigned_by: str=None, assignee_group: int=None, assignee_user: str=None, associated_items: List[AssociatedTaskItem]=None, category: int=None, created_at: str=None, created_by: str=None, due_date: TaskReminder=None, id: int=None, notes: List[TaskNote1]=None, priority: str=None, status: int=None, title: str=None, updated_at: str=None):
        """Task - a model defined in OpenAPI

        :param archived: The archived of this Task.
        :param assigned_by: The assigned_by of this Task.
        :param assignee_group: The assignee_group of this Task.
        :param assignee_user: The assignee_user of this Task.
        :param associated_items: The associated_items of this Task.
        :param category: The category of this Task.
        :param created_at: The created_at of this Task.
        :param created_by: The created_by of this Task.
        :param due_date: The due_date of this Task.
        :param id: The id of this Task.
        :param notes: The notes of this Task.
        :param priority: The priority of this Task.
        :param status: The status of this Task.
        :param title: The title of this Task.
        :param updated_at: The updated_at of this Task.
        """
        self.openapi_types = {
            'archived': bool,
            'assigned_by': str,
            'assignee_group': int,
            'assignee_user': str,
            'associated_items': List[AssociatedTaskItem],
            'category': int,
            'created_at': str,
            'created_by': str,
            'due_date': TaskReminder,
            'id': int,
            'notes': List[TaskNote1],
            'priority': str,
            'status': int,
            'title': str,
            'updated_at': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'assigned_by': 'assigned_by',
            'assignee_group': 'assignee_group',
            'assignee_user': 'assignee_user',
            'associated_items': 'associated_items',
            'category': 'category',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'due_date': 'due_date',
            'id': 'id',
            'notes': 'notes',
            'priority': 'priority',
            'status': 'status',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._archived = archived
        self._assigned_by = assigned_by
        self._assignee_group = assignee_group
        self._assignee_user = assignee_user
        self._associated_items = associated_items
        self._category = category
        self._created_at = created_at
        self._created_by = created_by
        self._due_date = due_date
        self._id = id
        self._notes = notes
        self._priority = priority
        self._status = status
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Task.

        

        :return: The archived of this Task.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Task.

        

        :param archived: The archived of this Task.
        :type archived: bool
        """

        self._archived = archived

    @property
    def assigned_by(self):
        """Gets the assigned_by of this Task.

        ID of `/api/users/` who assigned the task

        :return: The assigned_by of this Task.
        :rtype: str
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this Task.

        ID of `/api/users/` who assigned the task

        :param assigned_by: The assigned_by of this Task.
        :type assigned_by: str
        """

        self._assigned_by = assigned_by

    @property
    def assignee_group(self):
        """Gets the assignee_group of this Task.

        Either `assignee_user` or `assignee_group` should be set

        :return: The assignee_group of this Task.
        :rtype: int
        """
        return self._assignee_group

    @assignee_group.setter
    def assignee_group(self, assignee_group):
        """Sets the assignee_group of this Task.

        Either `assignee_user` or `assignee_group` should be set

        :param assignee_group: The assignee_group of this Task.
        :type assignee_group: int
        """

        self._assignee_group = assignee_group

    @property
    def assignee_user(self):
        """Gets the assignee_user of this Task.

        Either `assignee_user` or `assignee_group` should be set

        :return: The assignee_user of this Task.
        :rtype: str
        """
        return self._assignee_user

    @assignee_user.setter
    def assignee_user(self, assignee_user):
        """Sets the assignee_user of this Task.

        Either `assignee_user` or `assignee_group` should be set

        :param assignee_user: The assignee_user of this Task.
        :type assignee_user: str
        """

        self._assignee_user = assignee_user

    @property
    def associated_items(self):
        """Gets the associated_items of this Task.

        Associated task items

        :return: The associated_items of this Task.
        :rtype: List[AssociatedTaskItem]
        """
        return self._associated_items

    @associated_items.setter
    def associated_items(self, associated_items):
        """Sets the associated_items of this Task.

        Associated task items

        :param associated_items: The associated_items of this Task.
        :type associated_items: List[AssociatedTaskItem]
        """

        self._associated_items = associated_items

    @property
    def category(self):
        """Gets the category of this Task.

        

        :return: The category of this Task.
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Task.

        

        :param category: The category of this Task.
        :type category: int
        """

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this Task.

        

        :return: The created_at of this Task.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        

        :param created_at: The created_at of this Task.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Task.

        ID of `/api/users` who created the task

        :return: The created_by of this Task.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Task.

        ID of `/api/users` who created the task

        :param created_by: The created_by of this Task.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def due_date(self):
        """Gets the due_date of this Task.


        :return: The due_date of this Task.
        :rtype: TaskReminder
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Task.


        :param due_date: The due_date of this Task.
        :type due_date: TaskReminder
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Task.

        

        :return: The id of this Task.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        

        :param id: The id of this Task.
        :type id: int
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this Task.

        Additional notes of the task

        :return: The notes of this Task.
        :rtype: List[TaskNote1]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Task.

        Additional notes of the task

        :param notes: The notes of this Task.
        :type notes: List[TaskNote1]
        """

        self._notes = notes

    @property
    def priority(self):
        """Gets the priority of this Task.

        Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)

        :return: The priority of this Task.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Task.

        Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)

        :param priority: The priority of this Task.
        :type priority: str
        """
        allowed_values = ["10", "20", "30", "40"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this Task.

        

        :return: The status of this Task.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.

        

        :param status: The status of this Task.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this Task.

        

        :return: The title of this Task.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.

        

        :param title: The title of this Task.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.

        

        :return: The updated_at of this Task.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.

        

        :param updated_at: The updated_at of this Task.
        :type updated_at: str
        """

        self._updated_at = updated_at
