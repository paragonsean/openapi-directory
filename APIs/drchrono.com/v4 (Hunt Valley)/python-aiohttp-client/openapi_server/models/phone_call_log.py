# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneCallLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment: int=None, archived: bool=None, author: str=None, cash_charged: float=None, created_at: str=None, doctor: int=None, duration: int=None, id: int=None, message: str=None, patient: int=None, scheduled_time: str=None, title: str=None, type: str=None, updated_at: str=None):
        """PhoneCallLog - a model defined in OpenAPI

        :param appointment: The appointment of this PhoneCallLog.
        :param archived: The archived of this PhoneCallLog.
        :param author: The author of this PhoneCallLog.
        :param cash_charged: The cash_charged of this PhoneCallLog.
        :param created_at: The created_at of this PhoneCallLog.
        :param doctor: The doctor of this PhoneCallLog.
        :param duration: The duration of this PhoneCallLog.
        :param id: The id of this PhoneCallLog.
        :param message: The message of this PhoneCallLog.
        :param patient: The patient of this PhoneCallLog.
        :param scheduled_time: The scheduled_time of this PhoneCallLog.
        :param title: The title of this PhoneCallLog.
        :param type: The type of this PhoneCallLog.
        :param updated_at: The updated_at of this PhoneCallLog.
        """
        self.openapi_types = {
            'appointment': int,
            'archived': bool,
            'author': str,
            'cash_charged': float,
            'created_at': str,
            'doctor': int,
            'duration': int,
            'id': int,
            'message': str,
            'patient': int,
            'scheduled_time': str,
            'title': str,
            'type': str,
            'updated_at': str
        }

        self.attribute_map = {
            'appointment': 'appointment',
            'archived': 'archived',
            'author': 'author',
            'cash_charged': 'cash_charged',
            'created_at': 'created_at',
            'doctor': 'doctor',
            'duration': 'duration',
            'id': 'id',
            'message': 'message',
            'patient': 'patient',
            'scheduled_time': 'scheduled_time',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._appointment = appointment
        self._archived = archived
        self._author = author
        self._cash_charged = cash_charged
        self._created_at = created_at
        self._doctor = doctor
        self._duration = duration
        self._id = id
        self._message = message
        self._patient = patient
        self._scheduled_time = scheduled_time
        self._title = title
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneCallLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneCallLog of this PhoneCallLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment(self):
        """Gets the appointment of this PhoneCallLog.

        Appointment related with the phone call log

        :return: The appointment of this PhoneCallLog.
        :rtype: int
        """
        return self._appointment

    @appointment.setter
    def appointment(self, appointment):
        """Sets the appointment of this PhoneCallLog.

        Appointment related with the phone call log

        :param appointment: The appointment of this PhoneCallLog.
        :type appointment: int
        """

        self._appointment = appointment

    @property
    def archived(self):
        """Gets the archived of this PhoneCallLog.

        If this phone call log is archived or not

        :return: The archived of this PhoneCallLog.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this PhoneCallLog.

        If this phone call log is archived or not

        :param archived: The archived of this PhoneCallLog.
        :type archived: bool
        """

        self._archived = archived

    @property
    def author(self):
        """Gets the author of this PhoneCallLog.

        Author of post.

        :return: The author of this PhoneCallLog.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PhoneCallLog.

        Author of post.

        :param author: The author of this PhoneCallLog.
        :type author: str
        """

        self._author = author

    @property
    def cash_charged(self):
        """Gets the cash_charged of this PhoneCallLog.

        Amount of cash needs to be charged

        :return: The cash_charged of this PhoneCallLog.
        :rtype: float
        """
        return self._cash_charged

    @cash_charged.setter
    def cash_charged(self, cash_charged):
        """Sets the cash_charged of this PhoneCallLog.

        Amount of cash needs to be charged

        :param cash_charged: The cash_charged of this PhoneCallLog.
        :type cash_charged: float
        """

        self._cash_charged = cash_charged

    @property
    def created_at(self):
        """Gets the created_at of this PhoneCallLog.

        

        :return: The created_at of this PhoneCallLog.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PhoneCallLog.

        

        :param created_at: The created_at of this PhoneCallLog.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def doctor(self):
        """Gets the doctor of this PhoneCallLog.

        

        :return: The doctor of this PhoneCallLog.
        :rtype: int
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this PhoneCallLog.

        

        :param doctor: The doctor of this PhoneCallLog.
        :type doctor: int
        """
        if doctor is None:
            raise ValueError("Invalid value for `doctor`, must not be `None`")

        self._doctor = doctor

    @property
    def duration(self):
        """Gets the duration of this PhoneCallLog.

        Duration of the phone call

        :return: The duration of this PhoneCallLog.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PhoneCallLog.

        Duration of the phone call

        :param duration: The duration of this PhoneCallLog.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this PhoneCallLog.

        

        :return: The id of this PhoneCallLog.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneCallLog.

        

        :param id: The id of this PhoneCallLog.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this PhoneCallLog.

        Additional message for the phone call

        :return: The message of this PhoneCallLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PhoneCallLog.

        Additional message for the phone call

        :param message: The message of this PhoneCallLog.
        :type message: str
        """

        self._message = message

    @property
    def patient(self):
        """Gets the patient of this PhoneCallLog.

        

        :return: The patient of this PhoneCallLog.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PhoneCallLog.

        

        :param patient: The patient of this PhoneCallLog.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this PhoneCallLog.

        Date of phone call, if `appointment` is set, this field will be set as the `scheduled_time` of that appointment

        :return: The scheduled_time of this PhoneCallLog.
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this PhoneCallLog.

        Date of phone call, if `appointment` is set, this field will be set as the `scheduled_time` of that appointment

        :param scheduled_time: The scheduled_time of this PhoneCallLog.
        :type scheduled_time: str
        """

        self._scheduled_time = scheduled_time

    @property
    def title(self):
        """Gets the title of this PhoneCallLog.

        Title of this log

        :return: The title of this PhoneCallLog.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PhoneCallLog.

        Title of this log

        :param title: The title of this PhoneCallLog.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this PhoneCallLog.

        Type of phone call log

        :return: The type of this PhoneCallLog.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneCallLog.

        Type of phone call log

        :param type: The type of this PhoneCallLog.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this PhoneCallLog.

        

        :return: The updated_at of this PhoneCallLog.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PhoneCallLog.

        

        :param updated_at: The updated_at of this PhoneCallLog.
        :type updated_at: str
        """

        self._updated_at = updated_at
