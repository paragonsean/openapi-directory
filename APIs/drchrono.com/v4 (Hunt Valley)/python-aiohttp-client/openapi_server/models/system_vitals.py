# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SystemVitals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blood_pressure_1: int=None, blood_pressure_2: int=None, bmi: str=None, head_circumference: float=None, head_circumference_units: str=None, height: float=None, height_units: str=None, oxygen_saturation: float=None, pain: str=None, pulse: int=None, respiratory_rate: int=None, smoking_status: str=None, temperature: float=None, temperature_units: str=None, weight: float=None, weight_units: str=None):
        """SystemVitals - a model defined in OpenAPI

        :param blood_pressure_1: The blood_pressure_1 of this SystemVitals.
        :param blood_pressure_2: The blood_pressure_2 of this SystemVitals.
        :param bmi: The bmi of this SystemVitals.
        :param head_circumference: The head_circumference of this SystemVitals.
        :param head_circumference_units: The head_circumference_units of this SystemVitals.
        :param height: The height of this SystemVitals.
        :param height_units: The height_units of this SystemVitals.
        :param oxygen_saturation: The oxygen_saturation of this SystemVitals.
        :param pain: The pain of this SystemVitals.
        :param pulse: The pulse of this SystemVitals.
        :param respiratory_rate: The respiratory_rate of this SystemVitals.
        :param smoking_status: The smoking_status of this SystemVitals.
        :param temperature: The temperature of this SystemVitals.
        :param temperature_units: The temperature_units of this SystemVitals.
        :param weight: The weight of this SystemVitals.
        :param weight_units: The weight_units of this SystemVitals.
        """
        self.openapi_types = {
            'blood_pressure_1': int,
            'blood_pressure_2': int,
            'bmi': str,
            'head_circumference': float,
            'head_circumference_units': str,
            'height': float,
            'height_units': str,
            'oxygen_saturation': float,
            'pain': str,
            'pulse': int,
            'respiratory_rate': int,
            'smoking_status': str,
            'temperature': float,
            'temperature_units': str,
            'weight': float,
            'weight_units': str
        }

        self.attribute_map = {
            'blood_pressure_1': 'blood_pressure_1',
            'blood_pressure_2': 'blood_pressure_2',
            'bmi': 'bmi',
            'head_circumference': 'head_circumference',
            'head_circumference_units': 'head_circumference_units',
            'height': 'height',
            'height_units': 'height_units',
            'oxygen_saturation': 'oxygen_saturation',
            'pain': 'pain',
            'pulse': 'pulse',
            'respiratory_rate': 'respiratory_rate',
            'smoking_status': 'smoking_status',
            'temperature': 'temperature',
            'temperature_units': 'temperature_units',
            'weight': 'weight',
            'weight_units': 'weight_units'
        }

        self._blood_pressure_1 = blood_pressure_1
        self._blood_pressure_2 = blood_pressure_2
        self._bmi = bmi
        self._head_circumference = head_circumference
        self._head_circumference_units = head_circumference_units
        self._height = height
        self._height_units = height_units
        self._oxygen_saturation = oxygen_saturation
        self._pain = pain
        self._pulse = pulse
        self._respiratory_rate = respiratory_rate
        self._smoking_status = smoking_status
        self._temperature = temperature
        self._temperature_units = temperature_units
        self._weight = weight
        self._weight_units = weight_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemVitals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemVitals of this SystemVitals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blood_pressure_1(self):
        """Gets the blood_pressure_1 of this SystemVitals.

        

        :return: The blood_pressure_1 of this SystemVitals.
        :rtype: int
        """
        return self._blood_pressure_1

    @blood_pressure_1.setter
    def blood_pressure_1(self, blood_pressure_1):
        """Sets the blood_pressure_1 of this SystemVitals.

        

        :param blood_pressure_1: The blood_pressure_1 of this SystemVitals.
        :type blood_pressure_1: int
        """

        self._blood_pressure_1 = blood_pressure_1

    @property
    def blood_pressure_2(self):
        """Gets the blood_pressure_2 of this SystemVitals.

        

        :return: The blood_pressure_2 of this SystemVitals.
        :rtype: int
        """
        return self._blood_pressure_2

    @blood_pressure_2.setter
    def blood_pressure_2(self, blood_pressure_2):
        """Sets the blood_pressure_2 of this SystemVitals.

        

        :param blood_pressure_2: The blood_pressure_2 of this SystemVitals.
        :type blood_pressure_2: int
        """

        self._blood_pressure_2 = blood_pressure_2

    @property
    def bmi(self):
        """Gets the bmi of this SystemVitals.

        

        :return: The bmi of this SystemVitals.
        :rtype: str
        """
        return self._bmi

    @bmi.setter
    def bmi(self, bmi):
        """Sets the bmi of this SystemVitals.

        

        :param bmi: The bmi of this SystemVitals.
        :type bmi: str
        """

        self._bmi = bmi

    @property
    def head_circumference(self):
        """Gets the head_circumference of this SystemVitals.

        

        :return: The head_circumference of this SystemVitals.
        :rtype: float
        """
        return self._head_circumference

    @head_circumference.setter
    def head_circumference(self, head_circumference):
        """Sets the head_circumference of this SystemVitals.

        

        :param head_circumference: The head_circumference of this SystemVitals.
        :type head_circumference: float
        """

        self._head_circumference = head_circumference

    @property
    def head_circumference_units(self):
        """Gets the head_circumference_units of this SystemVitals.

        

        :return: The head_circumference_units of this SystemVitals.
        :rtype: str
        """
        return self._head_circumference_units

    @head_circumference_units.setter
    def head_circumference_units(self, head_circumference_units):
        """Sets the head_circumference_units of this SystemVitals.

        

        :param head_circumference_units: The head_circumference_units of this SystemVitals.
        :type head_circumference_units: str
        """

        self._head_circumference_units = head_circumference_units

    @property
    def height(self):
        """Gets the height of this SystemVitals.

        

        :return: The height of this SystemVitals.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SystemVitals.

        

        :param height: The height of this SystemVitals.
        :type height: float
        """

        self._height = height

    @property
    def height_units(self):
        """Gets the height_units of this SystemVitals.

        

        :return: The height_units of this SystemVitals.
        :rtype: str
        """
        return self._height_units

    @height_units.setter
    def height_units(self, height_units):
        """Sets the height_units of this SystemVitals.

        

        :param height_units: The height_units of this SystemVitals.
        :type height_units: str
        """

        self._height_units = height_units

    @property
    def oxygen_saturation(self):
        """Gets the oxygen_saturation of this SystemVitals.

        

        :return: The oxygen_saturation of this SystemVitals.
        :rtype: float
        """
        return self._oxygen_saturation

    @oxygen_saturation.setter
    def oxygen_saturation(self, oxygen_saturation):
        """Sets the oxygen_saturation of this SystemVitals.

        

        :param oxygen_saturation: The oxygen_saturation of this SystemVitals.
        :type oxygen_saturation: float
        """

        self._oxygen_saturation = oxygen_saturation

    @property
    def pain(self):
        """Gets the pain of this SystemVitals.

        1-10 pain scale.

        :return: The pain of this SystemVitals.
        :rtype: str
        """
        return self._pain

    @pain.setter
    def pain(self, pain):
        """Sets the pain of this SystemVitals.

        1-10 pain scale.

        :param pain: The pain of this SystemVitals.
        :type pain: str
        """

        self._pain = pain

    @property
    def pulse(self):
        """Gets the pulse of this SystemVitals.

        Beats per minute.

        :return: The pulse of this SystemVitals.
        :rtype: int
        """
        return self._pulse

    @pulse.setter
    def pulse(self, pulse):
        """Sets the pulse of this SystemVitals.

        Beats per minute.

        :param pulse: The pulse of this SystemVitals.
        :type pulse: int
        """

        self._pulse = pulse

    @property
    def respiratory_rate(self):
        """Gets the respiratory_rate of this SystemVitals.

        Breathes per minute.

        :return: The respiratory_rate of this SystemVitals.
        :rtype: int
        """
        return self._respiratory_rate

    @respiratory_rate.setter
    def respiratory_rate(self, respiratory_rate):
        """Sets the respiratory_rate of this SystemVitals.

        Breathes per minute.

        :param respiratory_rate: The respiratory_rate of this SystemVitals.
        :type respiratory_rate: int
        """

        self._respiratory_rate = respiratory_rate

    @property
    def smoking_status(self):
        """Gets the smoking_status of this SystemVitals.

        

        :return: The smoking_status of this SystemVitals.
        :rtype: str
        """
        return self._smoking_status

    @smoking_status.setter
    def smoking_status(self, smoking_status):
        """Sets the smoking_status of this SystemVitals.

        

        :param smoking_status: The smoking_status of this SystemVitals.
        :type smoking_status: str
        """
        allowed_values = ["blank", "449868002", "428041000124106", "8517006", "266919005", "77176002", "266927001", "428071000124103", "428061000124105"]  # noqa: E501
        if smoking_status not in allowed_values:
            raise ValueError(
                "Invalid value for `smoking_status` ({0}), must be one of {1}"
                .format(smoking_status, allowed_values)
            )

        self._smoking_status = smoking_status

    @property
    def temperature(self):
        """Gets the temperature of this SystemVitals.

        

        :return: The temperature of this SystemVitals.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SystemVitals.

        

        :param temperature: The temperature of this SystemVitals.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def temperature_units(self):
        """Gets the temperature_units of this SystemVitals.

        

        :return: The temperature_units of this SystemVitals.
        :rtype: str
        """
        return self._temperature_units

    @temperature_units.setter
    def temperature_units(self, temperature_units):
        """Sets the temperature_units of this SystemVitals.

        

        :param temperature_units: The temperature_units of this SystemVitals.
        :type temperature_units: str
        """

        self._temperature_units = temperature_units

    @property
    def weight(self):
        """Gets the weight of this SystemVitals.

        

        :return: The weight of this SystemVitals.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SystemVitals.

        

        :param weight: The weight of this SystemVitals.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_units(self):
        """Gets the weight_units of this SystemVitals.

        

        :return: The weight_units of this SystemVitals.
        :rtype: str
        """
        return self._weight_units

    @weight_units.setter
    def weight_units(self, weight_units):
        """Sets the weight_units of this SystemVitals.

        

        :param weight_units: The weight_units of this SystemVitals.
        :type weight_units: str
        """

        self._weight_units = weight_units
