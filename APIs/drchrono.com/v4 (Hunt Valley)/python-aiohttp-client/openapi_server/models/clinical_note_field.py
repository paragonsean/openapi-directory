# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClinicalNoteField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List[str]=None, archived: bool=None, clinical_note_template: int=None, data_type: str=None, name: str=None, required: bool=None):
        """ClinicalNoteField - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this ClinicalNoteField.
        :param archived: The archived of this ClinicalNoteField.
        :param clinical_note_template: The clinical_note_template of this ClinicalNoteField.
        :param data_type: The data_type of this ClinicalNoteField.
        :param name: The name of this ClinicalNoteField.
        :param required: The required of this ClinicalNoteField.
        """
        self.openapi_types = {
            'allowed_values': List[str],
            'archived': bool,
            'clinical_note_template': int,
            'data_type': str,
            'name': str,
            'required': bool
        }

        self.attribute_map = {
            'allowed_values': 'allowed_values',
            'archived': 'archived',
            'clinical_note_template': 'clinical_note_template',
            'data_type': 'data_type',
            'name': 'name',
            'required': 'required'
        }

        self._allowed_values = allowed_values
        self._archived = archived
        self._clinical_note_template = clinical_note_template
        self._data_type = data_type
        self._name = name
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClinicalNoteField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Clinical_Note_Field of this ClinicalNoteField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this ClinicalNoteField.

        

        :return: The allowed_values of this ClinicalNoteField.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this ClinicalNoteField.

        

        :param allowed_values: The allowed_values of this ClinicalNoteField.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def archived(self):
        """Gets the archived of this ClinicalNoteField.

        Indicates that the field has been soft-deleted by the doctor

        :return: The archived of this ClinicalNoteField.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ClinicalNoteField.

        Indicates that the field has been soft-deleted by the doctor

        :param archived: The archived of this ClinicalNoteField.
        :type archived: bool
        """

        self._archived = archived

    @property
    def clinical_note_template(self):
        """Gets the clinical_note_template of this ClinicalNoteField.

        

        :return: The clinical_note_template of this ClinicalNoteField.
        :rtype: int
        """
        return self._clinical_note_template

    @clinical_note_template.setter
    def clinical_note_template(self, clinical_note_template):
        """Sets the clinical_note_template of this ClinicalNoteField.

        

        :param clinical_note_template: The clinical_note_template of this ClinicalNoteField.
        :type clinical_note_template: int
        """

        self._clinical_note_template = clinical_note_template

    @property
    def data_type(self):
        """Gets the data_type of this ClinicalNoteField.

        One of `\"\"`, `\"Checkbox\"`, `\"NullCheckbox\"`, `\"String\"`, `\"TwoStrings\"`, `\"FreeDraw\"`, `\"Photo\"`, `\"Header\"`, `\"Subheader\"`

        :return: The data_type of this ClinicalNoteField.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ClinicalNoteField.

        One of `\"\"`, `\"Checkbox\"`, `\"NullCheckbox\"`, `\"String\"`, `\"TwoStrings\"`, `\"FreeDraw\"`, `\"Photo\"`, `\"Header\"`, `\"Subheader\"`

        :param data_type: The data_type of this ClinicalNoteField.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def name(self):
        """Gets the name of this ClinicalNoteField.

        

        :return: The name of this ClinicalNoteField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClinicalNoteField.

        

        :param name: The name of this ClinicalNoteField.
        :type name: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this ClinicalNoteField.

        Indicates that a note should not be locked unless a value is provided for this field

        :return: The required of this ClinicalNoteField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ClinicalNoteField.

        Indicates that a note should not be locked unless a value is provided for this field

        :param required: The required of this ClinicalNoteField.
        :type required: bool
        """

        self._required = required
