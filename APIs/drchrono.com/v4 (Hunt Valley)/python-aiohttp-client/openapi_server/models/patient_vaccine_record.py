# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vaccine_dose import VaccineDose
from openapi_server import util


class PatientVaccineRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administered_at: int=None, administered_by: str=None, administration_start: str=None, amount: float=None, comments: str=None, completion_status: str=None, consent_form: int=None, cpt_code: str=None, created_at: str=None, cvx_code: str=None, doses: List[VaccineDose]=None, entered_by: str=None, funding_eligibility: str=None, id: int=None, name: str=None, next_dose_date: str=None, observed_immunity: str=None, ordering_doctor: int=None, patient: int=None, record_source: str=None, route: str=None, site: str=None, units: str=None, updated_at: str=None, vaccine_inventory: int=None, vis: str=None):
        """PatientVaccineRecord - a model defined in OpenAPI

        :param administered_at: The administered_at of this PatientVaccineRecord.
        :param administered_by: The administered_by of this PatientVaccineRecord.
        :param administration_start: The administration_start of this PatientVaccineRecord.
        :param amount: The amount of this PatientVaccineRecord.
        :param comments: The comments of this PatientVaccineRecord.
        :param completion_status: The completion_status of this PatientVaccineRecord.
        :param consent_form: The consent_form of this PatientVaccineRecord.
        :param cpt_code: The cpt_code of this PatientVaccineRecord.
        :param created_at: The created_at of this PatientVaccineRecord.
        :param cvx_code: The cvx_code of this PatientVaccineRecord.
        :param doses: The doses of this PatientVaccineRecord.
        :param entered_by: The entered_by of this PatientVaccineRecord.
        :param funding_eligibility: The funding_eligibility of this PatientVaccineRecord.
        :param id: The id of this PatientVaccineRecord.
        :param name: The name of this PatientVaccineRecord.
        :param next_dose_date: The next_dose_date of this PatientVaccineRecord.
        :param observed_immunity: The observed_immunity of this PatientVaccineRecord.
        :param ordering_doctor: The ordering_doctor of this PatientVaccineRecord.
        :param patient: The patient of this PatientVaccineRecord.
        :param record_source: The record_source of this PatientVaccineRecord.
        :param route: The route of this PatientVaccineRecord.
        :param site: The site of this PatientVaccineRecord.
        :param units: The units of this PatientVaccineRecord.
        :param updated_at: The updated_at of this PatientVaccineRecord.
        :param vaccine_inventory: The vaccine_inventory of this PatientVaccineRecord.
        :param vis: The vis of this PatientVaccineRecord.
        """
        self.openapi_types = {
            'administered_at': int,
            'administered_by': str,
            'administration_start': str,
            'amount': float,
            'comments': str,
            'completion_status': str,
            'consent_form': int,
            'cpt_code': str,
            'created_at': str,
            'cvx_code': str,
            'doses': List[VaccineDose],
            'entered_by': str,
            'funding_eligibility': str,
            'id': int,
            'name': str,
            'next_dose_date': str,
            'observed_immunity': str,
            'ordering_doctor': int,
            'patient': int,
            'record_source': str,
            'route': str,
            'site': str,
            'units': str,
            'updated_at': str,
            'vaccine_inventory': int,
            'vis': str
        }

        self.attribute_map = {
            'administered_at': 'administered_at',
            'administered_by': 'administered_by',
            'administration_start': 'administration_start',
            'amount': 'amount',
            'comments': 'comments',
            'completion_status': 'completion_status',
            'consent_form': 'consent_form',
            'cpt_code': 'cpt_code',
            'created_at': 'created_at',
            'cvx_code': 'cvx_code',
            'doses': 'doses',
            'entered_by': 'entered_by',
            'funding_eligibility': 'funding_eligibility',
            'id': 'id',
            'name': 'name',
            'next_dose_date': 'next_dose_date',
            'observed_immunity': 'observed_immunity',
            'ordering_doctor': 'ordering_doctor',
            'patient': 'patient',
            'record_source': 'record_source',
            'route': 'route',
            'site': 'site',
            'units': 'units',
            'updated_at': 'updated_at',
            'vaccine_inventory': 'vaccine_inventory',
            'vis': 'vis'
        }

        self._administered_at = administered_at
        self._administered_by = administered_by
        self._administration_start = administration_start
        self._amount = amount
        self._comments = comments
        self._completion_status = completion_status
        self._consent_form = consent_form
        self._cpt_code = cpt_code
        self._created_at = created_at
        self._cvx_code = cvx_code
        self._doses = doses
        self._entered_by = entered_by
        self._funding_eligibility = funding_eligibility
        self._id = id
        self._name = name
        self._next_dose_date = next_dose_date
        self._observed_immunity = observed_immunity
        self._ordering_doctor = ordering_doctor
        self._patient = patient
        self._record_source = record_source
        self._route = route
        self._site = site
        self._units = units
        self._updated_at = updated_at
        self._vaccine_inventory = vaccine_inventory
        self._vis = vis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientVaccineRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientVaccineRecord of this PatientVaccineRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administered_at(self):
        """Gets the administered_at of this PatientVaccineRecord.

        ID of `/api/offices` where the administration happened

        :return: The administered_at of this PatientVaccineRecord.
        :rtype: int
        """
        return self._administered_at

    @administered_at.setter
    def administered_at(self, administered_at):
        """Sets the administered_at of this PatientVaccineRecord.

        ID of `/api/offices` where the administration happened

        :param administered_at: The administered_at of this PatientVaccineRecord.
        :type administered_at: int
        """

        self._administered_at = administered_at

    @property
    def administered_by(self):
        """Gets the administered_by of this PatientVaccineRecord.

        ID of `/api/users` who performs the administration

        :return: The administered_by of this PatientVaccineRecord.
        :rtype: str
        """
        return self._administered_by

    @administered_by.setter
    def administered_by(self, administered_by):
        """Sets the administered_by of this PatientVaccineRecord.

        ID of `/api/users` who performs the administration

        :param administered_by: The administered_by of this PatientVaccineRecord.
        :type administered_by: str
        """

        self._administered_by = administered_by

    @property
    def administration_start(self):
        """Gets the administration_start of this PatientVaccineRecord.

        Datetime when the administration starts

        :return: The administration_start of this PatientVaccineRecord.
        :rtype: str
        """
        return self._administration_start

    @administration_start.setter
    def administration_start(self, administration_start):
        """Sets the administration_start of this PatientVaccineRecord.

        Datetime when the administration starts

        :param administration_start: The administration_start of this PatientVaccineRecord.
        :type administration_start: str
        """

        self._administration_start = administration_start

    @property
    def amount(self):
        """Gets the amount of this PatientVaccineRecord.

        Amount of vaccine administered

        :return: The amount of this PatientVaccineRecord.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PatientVaccineRecord.

        Amount of vaccine administered

        :param amount: The amount of this PatientVaccineRecord.
        :type amount: float
        """

        self._amount = amount

    @property
    def comments(self):
        """Gets the comments of this PatientVaccineRecord.

        

        :return: The comments of this PatientVaccineRecord.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PatientVaccineRecord.

        

        :param comments: The comments of this PatientVaccineRecord.
        :type comments: str
        """

        self._comments = comments

    @property
    def completion_status(self):
        """Gets the completion_status of this PatientVaccineRecord.

        Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)

        :return: The completion_status of this PatientVaccineRecord.
        :rtype: str
        """
        return self._completion_status

    @completion_status.setter
    def completion_status(self, completion_status):
        """Sets the completion_status of this PatientVaccineRecord.

        Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)

        :param completion_status: The completion_status of this PatientVaccineRecord.
        :type completion_status: str
        """
        allowed_values = ["CP", "RE", "NA", "PA"]  # noqa: E501
        if completion_status not in allowed_values:
            raise ValueError(
                "Invalid value for `completion_status` ({0}), must be one of {1}"
                .format(completion_status, allowed_values)
            )

        self._completion_status = completion_status

    @property
    def consent_form(self):
        """Gets the consent_form of this PatientVaccineRecord.

        Consent form related with vaccine record

        :return: The consent_form of this PatientVaccineRecord.
        :rtype: int
        """
        return self._consent_form

    @consent_form.setter
    def consent_form(self, consent_form):
        """Sets the consent_form of this PatientVaccineRecord.

        Consent form related with vaccine record

        :param consent_form: The consent_form of this PatientVaccineRecord.
        :type consent_form: int
        """

        self._consent_form = consent_form

    @property
    def cpt_code(self):
        """Gets the cpt_code of this PatientVaccineRecord.

        Vaccine cpt code

        :return: The cpt_code of this PatientVaccineRecord.
        :rtype: str
        """
        return self._cpt_code

    @cpt_code.setter
    def cpt_code(self, cpt_code):
        """Sets the cpt_code of this PatientVaccineRecord.

        Vaccine cpt code

        :param cpt_code: The cpt_code of this PatientVaccineRecord.
        :type cpt_code: str
        """

        self._cpt_code = cpt_code

    @property
    def created_at(self):
        """Gets the created_at of this PatientVaccineRecord.

        

        :return: The created_at of this PatientVaccineRecord.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PatientVaccineRecord.

        

        :param created_at: The created_at of this PatientVaccineRecord.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def cvx_code(self):
        """Gets the cvx_code of this PatientVaccineRecord.

        Vaccine cvx code

        :return: The cvx_code of this PatientVaccineRecord.
        :rtype: str
        """
        return self._cvx_code

    @cvx_code.setter
    def cvx_code(self, cvx_code):
        """Sets the cvx_code of this PatientVaccineRecord.

        Vaccine cvx code

        :param cvx_code: The cvx_code of this PatientVaccineRecord.
        :type cvx_code: str
        """
        if cvx_code is None:
            raise ValueError("Invalid value for `cvx_code`, must not be `None`")

        self._cvx_code = cvx_code

    @property
    def doses(self):
        """Gets the doses of this PatientVaccineRecord.

        Vaccine dose IDs received in consent form signed hook

        :return: The doses of this PatientVaccineRecord.
        :rtype: List[VaccineDose]
        """
        return self._doses

    @doses.setter
    def doses(self, doses):
        """Sets the doses of this PatientVaccineRecord.

        Vaccine dose IDs received in consent form signed hook

        :param doses: The doses of this PatientVaccineRecord.
        :type doses: List[VaccineDose]
        """

        self._doses = doses

    @property
    def entered_by(self):
        """Gets the entered_by of this PatientVaccineRecord.

        ID of user who created the record

        :return: The entered_by of this PatientVaccineRecord.
        :rtype: str
        """
        return self._entered_by

    @entered_by.setter
    def entered_by(self, entered_by):
        """Sets the entered_by of this PatientVaccineRecord.

        ID of user who created the record

        :param entered_by: The entered_by of this PatientVaccineRecord.
        :type entered_by: str
        """

        self._entered_by = entered_by

    @property
    def funding_eligibility(self):
        """Gets the funding_eligibility of this PatientVaccineRecord.

        The funding program that should pay for a given immunization

        :return: The funding_eligibility of this PatientVaccineRecord.
        :rtype: str
        """
        return self._funding_eligibility

    @funding_eligibility.setter
    def funding_eligibility(self, funding_eligibility):
        """Sets the funding_eligibility of this PatientVaccineRecord.

        The funding program that should pay for a given immunization

        :param funding_eligibility: The funding_eligibility of this PatientVaccineRecord.
        :type funding_eligibility: str
        """
        allowed_values = ["V01", "V02", "V03", "V04", "V05", "V07"]  # noqa: E501
        if funding_eligibility not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_eligibility` ({0}), must be one of {1}"
                .format(funding_eligibility, allowed_values)
            )

        self._funding_eligibility = funding_eligibility

    @property
    def id(self):
        """Gets the id of this PatientVaccineRecord.

        

        :return: The id of this PatientVaccineRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatientVaccineRecord.

        

        :param id: The id of this PatientVaccineRecord.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PatientVaccineRecord.

        

        :return: The name of this PatientVaccineRecord.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatientVaccineRecord.

        

        :param name: The name of this PatientVaccineRecord.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def next_dose_date(self):
        """Gets the next_dose_date of this PatientVaccineRecord.

        Date for next dose of vaccine

        :return: The next_dose_date of this PatientVaccineRecord.
        :rtype: str
        """
        return self._next_dose_date

    @next_dose_date.setter
    def next_dose_date(self, next_dose_date):
        """Sets the next_dose_date of this PatientVaccineRecord.

        Date for next dose of vaccine

        :param next_dose_date: The next_dose_date of this PatientVaccineRecord.
        :type next_dose_date: str
        """

        self._next_dose_date = next_dose_date

    @property
    def observed_immunity(self):
        """Gets the observed_immunity of this PatientVaccineRecord.

        

        :return: The observed_immunity of this PatientVaccineRecord.
        :rtype: str
        """
        return self._observed_immunity

    @observed_immunity.setter
    def observed_immunity(self, observed_immunity):
        """Sets the observed_immunity of this PatientVaccineRecord.

        

        :param observed_immunity: The observed_immunity of this PatientVaccineRecord.
        :type observed_immunity: str
        """
        allowed_values = ["398102009", "409498004", "397428000", "18624000", "91428005", "271511000", "240532009", "6142004", "52947006", "14189004", "23511006", "36989005", "27836007", "16814004", "14168008", "36653000", "76902006", "66071002", "4834000", "111852003", "38907003", "40468003", "16541001"]  # noqa: E501
        if observed_immunity not in allowed_values:
            raise ValueError(
                "Invalid value for `observed_immunity` ({0}), must be one of {1}"
                .format(observed_immunity, allowed_values)
            )

        self._observed_immunity = observed_immunity

    @property
    def ordering_doctor(self):
        """Gets the ordering_doctor of this PatientVaccineRecord.

        

        :return: The ordering_doctor of this PatientVaccineRecord.
        :rtype: int
        """
        return self._ordering_doctor

    @ordering_doctor.setter
    def ordering_doctor(self, ordering_doctor):
        """Sets the ordering_doctor of this PatientVaccineRecord.

        

        :param ordering_doctor: The ordering_doctor of this PatientVaccineRecord.
        :type ordering_doctor: int
        """

        self._ordering_doctor = ordering_doctor

    @property
    def patient(self):
        """Gets the patient of this PatientVaccineRecord.

        

        :return: The patient of this PatientVaccineRecord.
        :rtype: int
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientVaccineRecord.

        

        :param patient: The patient of this PatientVaccineRecord.
        :type patient: int
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def record_source(self):
        """Gets the record_source of this PatientVaccineRecord.

        

        :return: The record_source of this PatientVaccineRecord.
        :rtype: str
        """
        return self._record_source

    @record_source.setter
    def record_source(self, record_source):
        """Sets the record_source of this PatientVaccineRecord.

        

        :param record_source: The record_source of this PatientVaccineRecord.
        :type record_source: str
        """
        allowed_values = ["00", "01", "02", "03", "04", "05", "06", "07", "08"]  # noqa: E501
        if record_source not in allowed_values:
            raise ValueError(
                "Invalid value for `record_source` ({0}), must be one of {1}"
                .format(record_source, allowed_values)
            )

        self._record_source = record_source

    @property
    def route(self):
        """Gets the route of this PatientVaccineRecord.

        

        :return: The route of this PatientVaccineRecord.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this PatientVaccineRecord.

        

        :param route: The route of this PatientVaccineRecord.
        :type route: str
        """

        self._route = route

    @property
    def site(self):
        """Gets the site of this PatientVaccineRecord.

        

        :return: The site of this PatientVaccineRecord.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this PatientVaccineRecord.

        

        :param site: The site of this PatientVaccineRecord.
        :type site: str
        """

        self._site = site

    @property
    def units(self):
        """Gets the units of this PatientVaccineRecord.

        

        :return: The units of this PatientVaccineRecord.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PatientVaccineRecord.

        

        :param units: The units of this PatientVaccineRecord.
        :type units: str
        """

        self._units = units

    @property
    def updated_at(self):
        """Gets the updated_at of this PatientVaccineRecord.

        

        :return: The updated_at of this PatientVaccineRecord.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PatientVaccineRecord.

        

        :param updated_at: The updated_at of this PatientVaccineRecord.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def vaccine_inventory(self):
        """Gets the vaccine_inventory of this PatientVaccineRecord.

        ID of `/api/vaccine_inventories` the vaccine is from

        :return: The vaccine_inventory of this PatientVaccineRecord.
        :rtype: int
        """
        return self._vaccine_inventory

    @vaccine_inventory.setter
    def vaccine_inventory(self, vaccine_inventory):
        """Sets the vaccine_inventory of this PatientVaccineRecord.

        ID of `/api/vaccine_inventories` the vaccine is from

        :param vaccine_inventory: The vaccine_inventory of this PatientVaccineRecord.
        :type vaccine_inventory: int
        """

        self._vaccine_inventory = vaccine_inventory

    @property
    def vis(self):
        """Gets the vis of this PatientVaccineRecord.

        Related vaccine information statement

        :return: The vis of this PatientVaccineRecord.
        :rtype: str
        """
        return self._vis

    @vis.setter
    def vis(self, vis):
        """Sets the vis of this PatientVaccineRecord.

        Related vaccine information statement

        :param vis: The vis of this PatientVaccineRecord.
        :type vis: str
        """

        self._vis = vis
