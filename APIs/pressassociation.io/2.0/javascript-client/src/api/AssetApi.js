/**
 * TV API
 * Welcome to the API Reference Docs page for the Press Association TV API (v2).
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Asset service.
* @module api/AssetApi
* @version 2.0
*/
export default class AssetApi {

    /**
    * Constructs a new AssetApi. 
    * @alias module:api/AssetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAsset operation.
     * @callback module:api/AssetApi~getAssetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Asset Detail
     * Return the content of the selected asset.
     * @param {String} assetId A asset ID filter for the schedule collection. This can be a reference to any type of asset i.e. movie, season, series or episode.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [aliases = true)] Flag to display Legacy and Provider Ids.
     * @param {module:api/AssetApi~getAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAsset(assetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAsset");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
        'aliases': opts['aliases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/asset/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetContributors operation.
     * @callback module:api/AssetApi~getAssetContributorsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Asset Contributors
     * Return the contributors of the selected asset.
     * @param {String} assetId A asset ID filter for the schedule collection. This can be a reference to any type of asset i.e. movie, season, series or episode.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [aliases = true)] Flag to display Legacy and Provider Ids.
     * @param {module:api/AssetApi~getAssetContributorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAssetContributors(assetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetContributors");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
        'aliases': opts['aliases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/asset/{assetId}/contributor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssets operation.
     * @callback module:api/AssetApi~listAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Asset Collection
     * Return a collection of Assets.
     * @param {Object} opts Optional parameters
     * @param {String} [updatedAfter = '2015-05-05T00:00:00.000Z')] Updated After
     * @param {Number} [limit = 100)] Limit the the number of items to be returned per page. For example: 5.
     * @param {Boolean} [aliases = true)] Flag to display Legacy and Provider Ids.
     * @param {module:api/AssetApi~listAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAssets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedAfter': opts['updatedAfter'],
        'limit': opts['limit'],
        'aliases': opts['aliases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/asset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
