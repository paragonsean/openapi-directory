/**
 * TV API
 * Welcome to the API Reference Docs page for the Press Association TV API (v2).
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Catalogue service.
* @module api/CatalogueApi
* @version 2.0
*/
export default class CatalogueApi {

    /**
    * Constructs a new CatalogueApi. 
    * @alias module:api/CatalogueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCatalogue operation.
     * @callback module:api/CatalogueApi~getCatalogueCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Catalogue Detail
     * Return the content of the selected catalogue.
     * @param {String} catalogueId The identifier for the selected catalogue.
     * @param {module:api/CatalogueApi~getCatalogueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCatalogue(catalogueId, callback) {
      let postBody = null;
      // verify the required parameter 'catalogueId' is set
      if (catalogueId === undefined || catalogueId === null) {
        throw new Error("Missing the required parameter 'catalogueId' when calling getCatalogue");
      }

      let pathParams = {
        'catalogueId': catalogueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/catalogue/{catalogueId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogueAsset operation.
     * @callback module:api/CatalogueApi~getCatalogueAssetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Catalogue Asset Collection
     * Return the content of the selected catalogue.
     * @param {String} catalogueId The identifier for the selected catalogue.
     * @param {Object} opts Optional parameters
     * @param {String} [title] The query string for a title search
     * @param {String} [start = '2015-05-05T00:00:00')] The Start Date for the catalogue date range.
     * @param {String} [end = '2015-05-06T00:00:00')] The End Date for the catalogue date range.
     * @param {String} [updatedAfter = '2015-05-06T00:00:00')] Retrieve items only that have been updated after this point.
     * @param {Number} [limit = 500)] Restrict number of returned items Min = 1, Max = 500.
     * @param {Boolean} [aliases = true)] Flag to display Legacy and Provider Ids.
     * @param {module:api/CatalogueApi~getCatalogueAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCatalogueAsset(catalogueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogueId' is set
      if (catalogueId === undefined || catalogueId === null) {
        throw new Error("Missing the required parameter 'catalogueId' when calling getCatalogueAsset");
      }

      let pathParams = {
        'catalogueId': catalogueId
      };
      let queryParams = {
        'title': opts['title'],
        'start': opts['start'],
        'end': opts['end'],
        'updatedAfter': opts['updatedAfter'],
        'limit': opts['limit'],
        'aliases': opts['aliases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/catalogue/{catalogueId}/asset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogueAssetDetail operation.
     * @callback module:api/CatalogueApi~getCatalogueAssetDetailCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Catalogue Asset Detail
     * Return the content of the selected catalogue asset.
     * @param {String} catalogueId The identifier for the selected catalogue.
     * @param {String} assetId The identifier for the selected catalogue asset.
     * @param {module:api/CatalogueApi~getCatalogueAssetDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getCatalogueAssetDetail(catalogueId, assetId, callback) {
      let postBody = null;
      // verify the required parameter 'catalogueId' is set
      if (catalogueId === undefined || catalogueId === null) {
        throw new Error("Missing the required parameter 'catalogueId' when calling getCatalogueAssetDetail");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getCatalogueAssetDetail");
      }

      let pathParams = {
        'catalogueId': catalogueId,
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/catalogue/{catalogueId}/asset/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogues operation.
     * @callback module:api/CatalogueApi~listCataloguesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Catalogue Collection
     * Return a collection of Catalogues.
     * @param {module:api/CatalogueApi~listCataloguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listCatalogues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/catalogue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
