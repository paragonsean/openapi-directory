/*
 * TV API
 * Welcome to the API Reference Docs page for the Press Association TV API (v2).
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getChannel
     * @param channelId The identifier for the selected channel. (required)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCall(String channelId, Boolean aliases, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel/{channelId}"
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aliases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliases", aliases));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelValidateBeforeCall(String channelId, Boolean aliases, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannel(Async)");
        }

        return getChannelCall(channelId, aliases, _callback);

    }

    /**
     * Channel Detail
     * Return the content of the selected channel.
     * @param channelId The identifier for the selected channel. (required)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getChannel(String channelId, Boolean aliases) throws ApiException {
        ApiResponse<Object> localVarResp = getChannelWithHttpInfo(channelId, aliases);
        return localVarResp.getData();
    }

    /**
     * Channel Detail
     * Return the content of the selected channel.
     * @param channelId The identifier for the selected channel. (required)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getChannelWithHttpInfo(String channelId, Boolean aliases) throws ApiException {
        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, aliases, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Channel Detail (asynchronously)
     * Return the content of the selected channel.
     * @param channelId The identifier for the selected channel. (required)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelAsync(String channelId, Boolean aliases, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, aliases, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannels
     * @param platformId The identifier for the selected platform. Multiple platforms can be passed to the API without a region Id. Passing multiple platforms without a region will not return epg numbers as these are linked to a platform and region. (optional, default to d3b26caa-8c7d-5f97-9eff-40fcf1a6f8d3)
     * @param regionId The platform region ID for the channel selection. (optional, default to afa4f624-da9b-54ce-b514-570345dbbdce)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param date Date of the Channel State to select, this will display channel names and attributes in the future or past. (optional, default to 2018-09-15)
     * @param scheduleStart The Start Date for the schedule. (optional, default to 2015-05-05T00:00:00)
     * @param scheduleEnd The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param scheduleUpdatedSince Schedule Updated Since (optional, default to 2015-05-05T00:00:00)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsCall(String platformId, String regionId, Boolean aliases, String date, String scheduleStart, String scheduleEnd, String scheduleUpdatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platformId", platformId));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionId", regionId));
        }

        if (aliases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliases", aliases));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scheduleStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleStart", scheduleStart));
        }

        if (scheduleEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleEnd", scheduleEnd));
        }

        if (scheduleUpdatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleUpdatedSince", scheduleUpdatedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsValidateBeforeCall(String platformId, String regionId, Boolean aliases, String date, String scheduleStart, String scheduleEnd, String scheduleUpdatedSince, final ApiCallback _callback) throws ApiException {
        return listChannelsCall(platformId, regionId, aliases, date, scheduleStart, scheduleEnd, scheduleUpdatedSince, _callback);

    }

    /**
     * Channel Collection
     * If you are interested in a list of channels that have had there schedule updated you can filter by the following query params.  - scheduleStart  - scheduleEnd  - scheduleUpdatedSince  adding these query params will filter the channel collection to only return channels that have been updated within the given range, updatedSince stores the state of your previous call.  Example Usage: Every 10 minutes get me the channels that have updated schedules for the next 2 weeks.  /channel?platform&#x3D;{uuid}&amp;scheduleStart&#x3D;{today}&amp;scheduleEnd&#x3D;{today + 2 weeks}&amp;updatedSince&#x3D;{10 minutes ago}  Also please note epg numbers are only exposed when a platform and region are passed to the query.
     * @param platformId The identifier for the selected platform. Multiple platforms can be passed to the API without a region Id. Passing multiple platforms without a region will not return epg numbers as these are linked to a platform and region. (optional, default to d3b26caa-8c7d-5f97-9eff-40fcf1a6f8d3)
     * @param regionId The platform region ID for the channel selection. (optional, default to afa4f624-da9b-54ce-b514-570345dbbdce)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param date Date of the Channel State to select, this will display channel names and attributes in the future or past. (optional, default to 2018-09-15)
     * @param scheduleStart The Start Date for the schedule. (optional, default to 2015-05-05T00:00:00)
     * @param scheduleEnd The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param scheduleUpdatedSince Schedule Updated Since (optional, default to 2015-05-05T00:00:00)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listChannels(String platformId, String regionId, Boolean aliases, String date, String scheduleStart, String scheduleEnd, String scheduleUpdatedSince) throws ApiException {
        ApiResponse<Object> localVarResp = listChannelsWithHttpInfo(platformId, regionId, aliases, date, scheduleStart, scheduleEnd, scheduleUpdatedSince);
        return localVarResp.getData();
    }

    /**
     * Channel Collection
     * If you are interested in a list of channels that have had there schedule updated you can filter by the following query params.  - scheduleStart  - scheduleEnd  - scheduleUpdatedSince  adding these query params will filter the channel collection to only return channels that have been updated within the given range, updatedSince stores the state of your previous call.  Example Usage: Every 10 minutes get me the channels that have updated schedules for the next 2 weeks.  /channel?platform&#x3D;{uuid}&amp;scheduleStart&#x3D;{today}&amp;scheduleEnd&#x3D;{today + 2 weeks}&amp;updatedSince&#x3D;{10 minutes ago}  Also please note epg numbers are only exposed when a platform and region are passed to the query.
     * @param platformId The identifier for the selected platform. Multiple platforms can be passed to the API without a region Id. Passing multiple platforms without a region will not return epg numbers as these are linked to a platform and region. (optional, default to d3b26caa-8c7d-5f97-9eff-40fcf1a6f8d3)
     * @param regionId The platform region ID for the channel selection. (optional, default to afa4f624-da9b-54ce-b514-570345dbbdce)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param date Date of the Channel State to select, this will display channel names and attributes in the future or past. (optional, default to 2018-09-15)
     * @param scheduleStart The Start Date for the schedule. (optional, default to 2015-05-05T00:00:00)
     * @param scheduleEnd The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param scheduleUpdatedSince Schedule Updated Since (optional, default to 2015-05-05T00:00:00)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listChannelsWithHttpInfo(String platformId, String regionId, Boolean aliases, String date, String scheduleStart, String scheduleEnd, String scheduleUpdatedSince) throws ApiException {
        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(platformId, regionId, aliases, date, scheduleStart, scheduleEnd, scheduleUpdatedSince, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Channel Collection (asynchronously)
     * If you are interested in a list of channels that have had there schedule updated you can filter by the following query params.  - scheduleStart  - scheduleEnd  - scheduleUpdatedSince  adding these query params will filter the channel collection to only return channels that have been updated within the given range, updatedSince stores the state of your previous call.  Example Usage: Every 10 minutes get me the channels that have updated schedules for the next 2 weeks.  /channel?platform&#x3D;{uuid}&amp;scheduleStart&#x3D;{today}&amp;scheduleEnd&#x3D;{today + 2 weeks}&amp;updatedSince&#x3D;{10 minutes ago}  Also please note epg numbers are only exposed when a platform and region are passed to the query.
     * @param platformId The identifier for the selected platform. Multiple platforms can be passed to the API without a region Id. Passing multiple platforms without a region will not return epg numbers as these are linked to a platform and region. (optional, default to d3b26caa-8c7d-5f97-9eff-40fcf1a6f8d3)
     * @param regionId The platform region ID for the channel selection. (optional, default to afa4f624-da9b-54ce-b514-570345dbbdce)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param date Date of the Channel State to select, this will display channel names and attributes in the future or past. (optional, default to 2018-09-15)
     * @param scheduleStart The Start Date for the schedule. (optional, default to 2015-05-05T00:00:00)
     * @param scheduleEnd The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param scheduleUpdatedSince Schedule Updated Since (optional, default to 2015-05-05T00:00:00)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsAsync(String platformId, String regionId, Boolean aliases, String date, String scheduleStart, String scheduleEnd, String scheduleUpdatedSince, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(platformId, regionId, aliases, date, scheduleStart, scheduleEnd, scheduleUpdatedSince, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
