/*
 * TV API
 * Welcome to the API Reference Docs page for the Press Association TV API (v2).
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listSchedule
     * @param channelId The identifier for the selected channel. (required)
     * @param start The Start Date for the schedule. (required)
     * @param end The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleCall(String channelId, String start, String end, Boolean aliases, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelId", channelId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (aliases != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aliases", aliases));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScheduleValidateBeforeCall(String channelId, String start, String end, Boolean aliases, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling listSchedule(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling listSchedule(Async)");
        }

        return listScheduleCall(channelId, start, end, aliases, _callback);

    }

    /**
     * Schedule Collection
     * The schedule endpoint produces a linear TV schedule for a given channel and date range.   - The date range supplied must be no larger than 21 days.  - If no end data is passed the API will default to start date + 24 hours.
     * @param channelId The identifier for the selected channel. (required)
     * @param start The Start Date for the schedule. (required)
     * @param end The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listSchedule(String channelId, String start, String end, Boolean aliases) throws ApiException {
        ApiResponse<Object> localVarResp = listScheduleWithHttpInfo(channelId, start, end, aliases);
        return localVarResp.getData();
    }

    /**
     * Schedule Collection
     * The schedule endpoint produces a linear TV schedule for a given channel and date range.   - The date range supplied must be no larger than 21 days.  - If no end data is passed the API will default to start date + 24 hours.
     * @param channelId The identifier for the selected channel. (required)
     * @param start The Start Date for the schedule. (required)
     * @param end The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listScheduleWithHttpInfo(String channelId, String start, String end, Boolean aliases) throws ApiException {
        okhttp3.Call localVarCall = listScheduleValidateBeforeCall(channelId, start, end, aliases, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Schedule Collection (asynchronously)
     * The schedule endpoint produces a linear TV schedule for a given channel and date range.   - The date range supplied must be no larger than 21 days.  - If no end data is passed the API will default to start date + 24 hours.
     * @param channelId The identifier for the selected channel. (required)
     * @param start The Start Date for the schedule. (required)
     * @param end The End Date for the schedule. (optional, default to 2015-05-06T00:00:00)
     * @param aliases Flag to display Legacy and Provider Ids. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleAsync(String channelId, String start, String end, Boolean aliases, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScheduleValidateBeforeCall(channelId, start, end, aliases, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
