/**
 * SelectPdf HTML To PDF API
 * SelectPdf HTML To PDF Online REST API is a professional solution that lets you create PDF from web pages and raw HTML code in your applications. The API is easy to use and the integration takes only a few lines of code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@selectpdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionParameters::OAIConversionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionParameters::OAIConversionParameters() {
    this->initializeModel();
}

OAIConversionParameters::~OAIConversionParameters() {}

void OAIConversionParameters::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_margin_bottom_isSet = false;
    m_margin_bottom_isValid = false;

    m_margin_left_isSet = false;
    m_margin_left_isValid = false;

    m_margin_right_isSet = false;
    m_margin_right_isValid = false;

    m_margin_top_isSet = false;
    m_margin_top_isValid = false;

    m_page_orientation_isSet = false;
    m_page_orientation_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionParameters::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_margin_bottom_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom, json[QString("margin_bottom")]);
    m_margin_bottom_isSet = !json[QString("margin_bottom")].isNull() && m_margin_bottom_isValid;

    m_margin_left_isValid = ::OpenAPI::fromJsonValue(m_margin_left, json[QString("margin_left")]);
    m_margin_left_isSet = !json[QString("margin_left")].isNull() && m_margin_left_isValid;

    m_margin_right_isValid = ::OpenAPI::fromJsonValue(m_margin_right, json[QString("margin_right")]);
    m_margin_right_isSet = !json[QString("margin_right")].isNull() && m_margin_right_isValid;

    m_margin_top_isValid = ::OpenAPI::fromJsonValue(m_margin_top, json[QString("margin_top")]);
    m_margin_top_isSet = !json[QString("margin_top")].isNull() && m_margin_top_isValid;

    m_page_orientation_isValid = ::OpenAPI::fromJsonValue(m_page_orientation, json[QString("page_orientation")]);
    m_page_orientation_isSet = !json[QString("page_orientation")].isNull() && m_page_orientation_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_margin_bottom_isSet) {
        obj.insert(QString("margin_bottom"), ::OpenAPI::toJsonValue(m_margin_bottom));
    }
    if (m_margin_left_isSet) {
        obj.insert(QString("margin_left"), ::OpenAPI::toJsonValue(m_margin_left));
    }
    if (m_margin_right_isSet) {
        obj.insert(QString("margin_right"), ::OpenAPI::toJsonValue(m_margin_right));
    }
    if (m_margin_top_isSet) {
        obj.insert(QString("margin_top"), ::OpenAPI::toJsonValue(m_margin_top));
    }
    if (m_page_orientation_isSet) {
        obj.insert(QString("page_orientation"), ::OpenAPI::toJsonValue(m_page_orientation));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversionParameters::getBaseUrl() const {
    return m_base_url;
}
void OAIConversionParameters::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIConversionParameters::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIConversionParameters::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIConversionParameters::getHtml() const {
    return m_html;
}
void OAIConversionParameters::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIConversionParameters::is_html_Set() const{
    return m_html_isSet;
}

bool OAIConversionParameters::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIConversionParameters::getKey() const {
    return m_key;
}
void OAIConversionParameters::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIConversionParameters::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConversionParameters::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIConversionParameters::getMarginBottom() const {
    return m_margin_bottom;
}
void OAIConversionParameters::setMarginBottom(const qint32 &margin_bottom) {
    m_margin_bottom = margin_bottom;
    m_margin_bottom_isSet = true;
}

bool OAIConversionParameters::is_margin_bottom_Set() const{
    return m_margin_bottom_isSet;
}

bool OAIConversionParameters::is_margin_bottom_Valid() const{
    return m_margin_bottom_isValid;
}

qint32 OAIConversionParameters::getMarginLeft() const {
    return m_margin_left;
}
void OAIConversionParameters::setMarginLeft(const qint32 &margin_left) {
    m_margin_left = margin_left;
    m_margin_left_isSet = true;
}

bool OAIConversionParameters::is_margin_left_Set() const{
    return m_margin_left_isSet;
}

bool OAIConversionParameters::is_margin_left_Valid() const{
    return m_margin_left_isValid;
}

qint32 OAIConversionParameters::getMarginRight() const {
    return m_margin_right;
}
void OAIConversionParameters::setMarginRight(const qint32 &margin_right) {
    m_margin_right = margin_right;
    m_margin_right_isSet = true;
}

bool OAIConversionParameters::is_margin_right_Set() const{
    return m_margin_right_isSet;
}

bool OAIConversionParameters::is_margin_right_Valid() const{
    return m_margin_right_isValid;
}

qint32 OAIConversionParameters::getMarginTop() const {
    return m_margin_top;
}
void OAIConversionParameters::setMarginTop(const qint32 &margin_top) {
    m_margin_top = margin_top;
    m_margin_top_isSet = true;
}

bool OAIConversionParameters::is_margin_top_Set() const{
    return m_margin_top_isSet;
}

bool OAIConversionParameters::is_margin_top_Valid() const{
    return m_margin_top_isValid;
}

QString OAIConversionParameters::getPageOrientation() const {
    return m_page_orientation;
}
void OAIConversionParameters::setPageOrientation(const QString &page_orientation) {
    m_page_orientation = page_orientation;
    m_page_orientation_isSet = true;
}

bool OAIConversionParameters::is_page_orientation_Set() const{
    return m_page_orientation_isSet;
}

bool OAIConversionParameters::is_page_orientation_Valid() const{
    return m_page_orientation_isValid;
}

QString OAIConversionParameters::getPageSize() const {
    return m_page_size;
}
void OAIConversionParameters::setPageSize(const QString &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIConversionParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIConversionParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIConversionParameters::getUrl() const {
    return m_url;
}
void OAIConversionParameters::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversionParameters::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversionParameters::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
