# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConversionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, html: str=None, key: str=None, margin_bottom: int=None, margin_left: int=None, margin_right: int=None, margin_top: int=None, page_orientation: str='Portrait', page_size: str='A4', url: str=None):
        """ConversionParameters - a model defined in OpenAPI

        :param base_url: The base_url of this ConversionParameters.
        :param html: The html of this ConversionParameters.
        :param key: The key of this ConversionParameters.
        :param margin_bottom: The margin_bottom of this ConversionParameters.
        :param margin_left: The margin_left of this ConversionParameters.
        :param margin_right: The margin_right of this ConversionParameters.
        :param margin_top: The margin_top of this ConversionParameters.
        :param page_orientation: The page_orientation of this ConversionParameters.
        :param page_size: The page_size of this ConversionParameters.
        :param url: The url of this ConversionParameters.
        """
        self.openapi_types = {
            'base_url': str,
            'html': str,
            'key': str,
            'margin_bottom': int,
            'margin_left': int,
            'margin_right': int,
            'margin_top': int,
            'page_orientation': str,
            'page_size': str,
            'url': str
        }

        self.attribute_map = {
            'base_url': 'base_url',
            'html': 'html',
            'key': 'key',
            'margin_bottom': 'margin_bottom',
            'margin_left': 'margin_left',
            'margin_right': 'margin_right',
            'margin_top': 'margin_top',
            'page_orientation': 'page_orientation',
            'page_size': 'page_size',
            'url': 'url'
        }

        self._base_url = base_url
        self._html = html
        self._key = key
        self._margin_bottom = margin_bottom
        self._margin_left = margin_left
        self._margin_right = margin_right
        self._margin_top = margin_top
        self._page_orientation = page_orientation
        self._page_size = page_size
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversionParameters of this ConversionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this ConversionParameters.

        An optional base url parameter can be used together with html to resolve relative paths from the html string

        :return: The base_url of this ConversionParameters.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ConversionParameters.

        An optional base url parameter can be used together with html to resolve relative paths from the html string

        :param base_url: The base_url of this ConversionParameters.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def html(self):
        """Gets the html of this ConversionParameters.

        The raw html string that will be converted to PDF

        :return: The html of this ConversionParameters.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ConversionParameters.

        The raw html string that will be converted to PDF

        :param html: The html of this ConversionParameters.
        :type html: str
        """

        self._html = html

    @property
    def key(self):
        """Gets the key of this ConversionParameters.

        The license key required to use the API

        :return: The key of this ConversionParameters.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConversionParameters.

        The license key required to use the API

        :param key: The key of this ConversionParameters.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def margin_bottom(self):
        """Gets the margin_bottom of this ConversionParameters.

        Bottom margin of the generated PDF document in points (1 point = 1/72 inch)

        :return: The margin_bottom of this ConversionParameters.
        :rtype: int
        """
        return self._margin_bottom

    @margin_bottom.setter
    def margin_bottom(self, margin_bottom):
        """Sets the margin_bottom of this ConversionParameters.

        Bottom margin of the generated PDF document in points (1 point = 1/72 inch)

        :param margin_bottom: The margin_bottom of this ConversionParameters.
        :type margin_bottom: int
        """

        self._margin_bottom = margin_bottom

    @property
    def margin_left(self):
        """Gets the margin_left of this ConversionParameters.

        Left margin of the generated PDF document in points (1 point = 1/72 inch)

        :return: The margin_left of this ConversionParameters.
        :rtype: int
        """
        return self._margin_left

    @margin_left.setter
    def margin_left(self, margin_left):
        """Sets the margin_left of this ConversionParameters.

        Left margin of the generated PDF document in points (1 point = 1/72 inch)

        :param margin_left: The margin_left of this ConversionParameters.
        :type margin_left: int
        """

        self._margin_left = margin_left

    @property
    def margin_right(self):
        """Gets the margin_right of this ConversionParameters.

        Right margin of the generated PDF document in points (1 point = 1/72 inch)

        :return: The margin_right of this ConversionParameters.
        :rtype: int
        """
        return self._margin_right

    @margin_right.setter
    def margin_right(self, margin_right):
        """Sets the margin_right of this ConversionParameters.

        Right margin of the generated PDF document in points (1 point = 1/72 inch)

        :param margin_right: The margin_right of this ConversionParameters.
        :type margin_right: int
        """

        self._margin_right = margin_right

    @property
    def margin_top(self):
        """Gets the margin_top of this ConversionParameters.

        Top margin of the generated PDF document in points (1 point = 1/72 inch)

        :return: The margin_top of this ConversionParameters.
        :rtype: int
        """
        return self._margin_top

    @margin_top.setter
    def margin_top(self, margin_top):
        """Sets the margin_top of this ConversionParameters.

        Top margin of the generated PDF document in points (1 point = 1/72 inch)

        :param margin_top: The margin_top of this ConversionParameters.
        :type margin_top: int
        """

        self._margin_top = margin_top

    @property
    def page_orientation(self):
        """Gets the page_orientation of this ConversionParameters.

        Specifies the page orientation of the generated pdf document

        :return: The page_orientation of this ConversionParameters.
        :rtype: str
        """
        return self._page_orientation

    @page_orientation.setter
    def page_orientation(self, page_orientation):
        """Sets the page_orientation of this ConversionParameters.

        Specifies the page orientation of the generated pdf document

        :param page_orientation: The page_orientation of this ConversionParameters.
        :type page_orientation: str
        """
        allowed_values = ["Portrait", "Landscape"]  # noqa: E501
        if page_orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `page_orientation` ({0}), must be one of {1}"
                .format(page_orientation, allowed_values)
            )

        self._page_orientation = page_orientation

    @property
    def page_size(self):
        """Gets the page_size of this ConversionParameters.

        Specifies the page size of the generated pdf document

        :return: The page_size of this ConversionParameters.
        :rtype: str
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ConversionParameters.

        Specifies the page size of the generated pdf document

        :param page_size: The page_size of this ConversionParameters.
        :type page_size: str
        """
        allowed_values = ["A1", "A2", "A3", "A4", "A5", "Letter", "HalfLetter", "Ledger", "Legal"]  # noqa: E501
        if page_size not in allowed_values:
            raise ValueError(
                "Invalid value for `page_size` ({0}), must be one of {1}"
                .format(page_size, allowed_values)
            )

        self._page_size = page_size

    @property
    def url(self):
        """Gets the url of this ConversionParameters.

        The url that will be converted to PDF

        :return: The url of this ConversionParameters.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversionParameters.

        The url that will be converted to PDF

        :param url: The url of this ConversionParameters.
        :type url: str
        """

        self._url = url
