/*
 * SelectPdf HTML To PDF API
 * SelectPdf HTML To PDF Online REST API is a professional solution that lets you create PDF from web pages and raw HTML code in your applications. The API is easy to use and the integration takes only a few lines of code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@selectpdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversionParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:26.014382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversionParameters {
  public static final String SERIALIZED_NAME_BASE_URL = "base_url";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private UUID key;

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM = "margin_bottom";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM)
  private Integer marginBottom;

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "margin_left";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private Integer marginLeft;

  public static final String SERIALIZED_NAME_MARGIN_RIGHT = "margin_right";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT)
  private Integer marginRight;

  public static final String SERIALIZED_NAME_MARGIN_TOP = "margin_top";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP)
  private Integer marginTop;

  /**
   * Specifies the page orientation of the generated pdf document
   */
  @JsonAdapter(PageOrientationEnum.Adapter.class)
  public enum PageOrientationEnum {
    PORTRAIT("Portrait"),
    
    LANDSCAPE("Landscape");

    private String value;

    PageOrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageOrientationEnum fromValue(String value) {
      for (PageOrientationEnum b : PageOrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageOrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageOrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageOrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageOrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PageOrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAGE_ORIENTATION = "page_orientation";
  @SerializedName(SERIALIZED_NAME_PAGE_ORIENTATION)
  private PageOrientationEnum pageOrientation = PageOrientationEnum.PORTRAIT;

  /**
   * Specifies the page size of the generated pdf document
   */
  @JsonAdapter(PageSizeEnum.Adapter.class)
  public enum PageSizeEnum {
    A1("A1"),
    
    A2("A2"),
    
    A3("A3"),
    
    A4("A4"),
    
    A5("A5"),
    
    LETTER("Letter"),
    
    HALF_LETTER("HalfLetter"),
    
    LEDGER("Ledger"),
    
    LEGAL("Legal");

    private String value;

    PageSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageSizeEnum fromValue(String value) {
      for (PageSizeEnum b : PageSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PageSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private PageSizeEnum pageSize = PageSizeEnum.A4;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ConversionParameters() {
  }

  public ConversionParameters baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * An optional base url parameter can be used together with html to resolve relative paths from the html string
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public ConversionParameters html(String html) {
    this.html = html;
    return this;
  }

  /**
   * The raw html string that will be converted to PDF
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public ConversionParameters key(UUID key) {
    this.key = key;
    return this;
  }

  /**
   * The license key required to use the API
   * @return key
   */
  @javax.annotation.Nonnull
  public UUID getKey() {
    return key;
  }

  public void setKey(UUID key) {
    this.key = key;
  }


  public ConversionParameters marginBottom(Integer marginBottom) {
    this.marginBottom = marginBottom;
    return this;
  }

  /**
   * Bottom margin of the generated PDF document in points (1 point &#x3D; 1/72 inch)
   * @return marginBottom
   */
  @javax.annotation.Nullable
  public Integer getMarginBottom() {
    return marginBottom;
  }

  public void setMarginBottom(Integer marginBottom) {
    this.marginBottom = marginBottom;
  }


  public ConversionParameters marginLeft(Integer marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * Left margin of the generated PDF document in points (1 point &#x3D; 1/72 inch)
   * @return marginLeft
   */
  @javax.annotation.Nullable
  public Integer getMarginLeft() {
    return marginLeft;
  }

  public void setMarginLeft(Integer marginLeft) {
    this.marginLeft = marginLeft;
  }


  public ConversionParameters marginRight(Integer marginRight) {
    this.marginRight = marginRight;
    return this;
  }

  /**
   * Right margin of the generated PDF document in points (1 point &#x3D; 1/72 inch)
   * @return marginRight
   */
  @javax.annotation.Nullable
  public Integer getMarginRight() {
    return marginRight;
  }

  public void setMarginRight(Integer marginRight) {
    this.marginRight = marginRight;
  }


  public ConversionParameters marginTop(Integer marginTop) {
    this.marginTop = marginTop;
    return this;
  }

  /**
   * Top margin of the generated PDF document in points (1 point &#x3D; 1/72 inch)
   * @return marginTop
   */
  @javax.annotation.Nullable
  public Integer getMarginTop() {
    return marginTop;
  }

  public void setMarginTop(Integer marginTop) {
    this.marginTop = marginTop;
  }


  public ConversionParameters pageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
    return this;
  }

  /**
   * Specifies the page orientation of the generated pdf document
   * @return pageOrientation
   */
  @javax.annotation.Nullable
  public PageOrientationEnum getPageOrientation() {
    return pageOrientation;
  }

  public void setPageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
  }


  public ConversionParameters pageSize(PageSizeEnum pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Specifies the page size of the generated pdf document
   * @return pageSize
   */
  @javax.annotation.Nullable
  public PageSizeEnum getPageSize() {
    return pageSize;
  }

  public void setPageSize(PageSizeEnum pageSize) {
    this.pageSize = pageSize;
  }


  public ConversionParameters url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url that will be converted to PDF
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionParameters conversionParameters = (ConversionParameters) o;
    return Objects.equals(this.baseUrl, conversionParameters.baseUrl) &&
        Objects.equals(this.html, conversionParameters.html) &&
        Objects.equals(this.key, conversionParameters.key) &&
        Objects.equals(this.marginBottom, conversionParameters.marginBottom) &&
        Objects.equals(this.marginLeft, conversionParameters.marginLeft) &&
        Objects.equals(this.marginRight, conversionParameters.marginRight) &&
        Objects.equals(this.marginTop, conversionParameters.marginTop) &&
        Objects.equals(this.pageOrientation, conversionParameters.pageOrientation) &&
        Objects.equals(this.pageSize, conversionParameters.pageSize) &&
        Objects.equals(this.url, conversionParameters.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseUrl, html, key, marginBottom, marginLeft, marginRight, marginTop, pageOrientation, pageSize, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionParameters {\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    marginBottom: ").append(toIndentedString(marginBottom)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    marginRight: ").append(toIndentedString(marginRight)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("    pageOrientation: ").append(toIndentedString(pageOrientation)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_url");
    openapiFields.add("html");
    openapiFields.add("key");
    openapiFields.add("margin_bottom");
    openapiFields.add("margin_left");
    openapiFields.add("margin_right");
    openapiFields.add("margin_top");
    openapiFields.add("page_orientation");
    openapiFields.add("page_size");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversionParameters is not found in the empty JSON string", ConversionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversionParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_url") != null && !jsonObj.get("base_url").isJsonNull()) && !jsonObj.get("base_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_url").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("page_orientation") != null && !jsonObj.get("page_orientation").isJsonNull()) && !jsonObj.get("page_orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_orientation").toString()));
      }
      // validate the optional field `page_orientation`
      if (jsonObj.get("page_orientation") != null && !jsonObj.get("page_orientation").isJsonNull()) {
        PageOrientationEnum.validateJsonElement(jsonObj.get("page_orientation"));
      }
      if ((jsonObj.get("page_size") != null && !jsonObj.get("page_size").isJsonNull()) && !jsonObj.get("page_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_size").toString()));
      }
      // validate the optional field `page_size`
      if (jsonObj.get("page_size") != null && !jsonObj.get("page_size").isJsonNull()) {
        PageSizeEnum.validateJsonElement(jsonObj.get("page_size"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversionParameters>() {
           @Override
           public void write(JsonWriter out, ConversionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversionParameters
   * @throws IOException if the JSON string is invalid with respect to ConversionParameters
   */
  public static ConversionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversionParameters.class);
  }

  /**
   * Convert an instance of ConversionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

