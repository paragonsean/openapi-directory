/**
 * SelectPdf HTML To PDF API
 * SelectPdf HTML To PDF Online REST API is a professional solution that lets you create PDF from web pages and raw HTML code in your applications. The API is easy to use and the integration takes only a few lines of code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@selectpdf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConversionParameters model module.
 * @module model/ConversionParameters
 * @version 1.0.0
 */
class ConversionParameters {
    /**
     * Constructs a new <code>ConversionParameters</code>.
     * @alias module:model/ConversionParameters
     * @param key {String} The license key required to use the API
     */
    constructor(key) { 
        
        ConversionParameters.initialize(this, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key) { 
        obj['key'] = key;
        obj['page_orientation'] = 'Portrait';
        obj['page_size'] = 'A4';
    }

    /**
     * Constructs a <code>ConversionParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionParameters} obj Optional instance to populate.
     * @return {module:model/ConversionParameters} The populated <code>ConversionParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionParameters();

            if (data.hasOwnProperty('base_url')) {
                obj['base_url'] = ApiClient.convertToType(data['base_url'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('margin_bottom')) {
                obj['margin_bottom'] = ApiClient.convertToType(data['margin_bottom'], 'Number');
            }
            if (data.hasOwnProperty('margin_left')) {
                obj['margin_left'] = ApiClient.convertToType(data['margin_left'], 'Number');
            }
            if (data.hasOwnProperty('margin_right')) {
                obj['margin_right'] = ApiClient.convertToType(data['margin_right'], 'Number');
            }
            if (data.hasOwnProperty('margin_top')) {
                obj['margin_top'] = ApiClient.convertToType(data['margin_top'], 'Number');
            }
            if (data.hasOwnProperty('page_orientation')) {
                obj['page_orientation'] = ApiClient.convertToType(data['page_orientation'], 'String');
            }
            if (data.hasOwnProperty('page_size')) {
                obj['page_size'] = ApiClient.convertToType(data['page_size'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversionParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['base_url'] && !(typeof data['base_url'] === 'string' || data['base_url'] instanceof String)) {
            throw new Error("Expected the field `base_url` to be a primitive type in the JSON string but got " + data['base_url']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['page_orientation'] && !(typeof data['page_orientation'] === 'string' || data['page_orientation'] instanceof String)) {
            throw new Error("Expected the field `page_orientation` to be a primitive type in the JSON string but got " + data['page_orientation']);
        }
        // ensure the json data is a string
        if (data['page_size'] && !(typeof data['page_size'] === 'string' || data['page_size'] instanceof String)) {
            throw new Error("Expected the field `page_size` to be a primitive type in the JSON string but got " + data['page_size']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ConversionParameters.RequiredProperties = ["key"];

/**
 * An optional base url parameter can be used together with html to resolve relative paths from the html string
 * @member {String} base_url
 */
ConversionParameters.prototype['base_url'] = undefined;

/**
 * The raw html string that will be converted to PDF
 * @member {String} html
 */
ConversionParameters.prototype['html'] = undefined;

/**
 * The license key required to use the API
 * @member {String} key
 */
ConversionParameters.prototype['key'] = undefined;

/**
 * Bottom margin of the generated PDF document in points (1 point = 1/72 inch)
 * @member {Number} margin_bottom
 */
ConversionParameters.prototype['margin_bottom'] = undefined;

/**
 * Left margin of the generated PDF document in points (1 point = 1/72 inch)
 * @member {Number} margin_left
 */
ConversionParameters.prototype['margin_left'] = undefined;

/**
 * Right margin of the generated PDF document in points (1 point = 1/72 inch)
 * @member {Number} margin_right
 */
ConversionParameters.prototype['margin_right'] = undefined;

/**
 * Top margin of the generated PDF document in points (1 point = 1/72 inch)
 * @member {Number} margin_top
 */
ConversionParameters.prototype['margin_top'] = undefined;

/**
 * Specifies the page orientation of the generated pdf document
 * @member {module:model/ConversionParameters.PageOrientationEnum} page_orientation
 * @default 'Portrait'
 */
ConversionParameters.prototype['page_orientation'] = 'Portrait';

/**
 * Specifies the page size of the generated pdf document
 * @member {module:model/ConversionParameters.PageSizeEnum} page_size
 * @default 'A4'
 */
ConversionParameters.prototype['page_size'] = 'A4';

/**
 * The url that will be converted to PDF
 * @member {String} url
 */
ConversionParameters.prototype['url'] = undefined;





/**
 * Allowed values for the <code>page_orientation</code> property.
 * @enum {String}
 * @readonly
 */
ConversionParameters['PageOrientationEnum'] = {

    /**
     * value: "Portrait"
     * @const
     */
    "Portrait": "Portrait",

    /**
     * value: "Landscape"
     * @const
     */
    "Landscape": "Landscape"
};


/**
 * Allowed values for the <code>page_size</code> property.
 * @enum {String}
 * @readonly
 */
ConversionParameters['PageSizeEnum'] = {

    /**
     * value: "A1"
     * @const
     */
    "A1": "A1",

    /**
     * value: "A2"
     * @const
     */
    "A2": "A2",

    /**
     * value: "A3"
     * @const
     */
    "A3": "A3",

    /**
     * value: "A4"
     * @const
     */
    "A4": "A4",

    /**
     * value: "A5"
     * @const
     */
    "A5": "A5",

    /**
     * value: "Letter"
     * @const
     */
    "Letter": "Letter",

    /**
     * value: "HalfLetter"
     * @const
     */
    "HalfLetter": "HalfLetter",

    /**
     * value: "Ledger"
     * @const
     */
    "Ledger": "Ledger",

    /**
     * value: "Legal"
     * @const
     */
    "Legal": "Legal"
};



export default ConversionParameters;

