/**
 * Self Service Developer API
 * Self Service Developer API documentation and demo.  ##Getting Started  You will need an API access profile user and password in order to access search endpoints. Your access profile user and password is used for authenticating all requests to our search API.  You MUST pass the user and password each time you perform a search request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_address_autocomplete_post_request.h"
#include "OAI_contact_enrich_post_request.h"
#include "OAI_email_enrich_post_request.h"
#include "OAI_phone_enrich_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  galaxy_ap_name QString [optional]
    * @param[in]  galaxy_ap_password QString [optional]
    * @param[in]  galaxy_search_type QString [optional]
    * @param[in]  oai_address_autocomplete_post_request OAI_address_autocomplete_post_request [optional]
    */
    virtual void addressAutocompletePost(const ::OpenAPI::OptionalParam<QString> &galaxy_ap_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_ap_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_address_autocomplete_post_request> &oai_address_autocomplete_post_request = ::OpenAPI::OptionalParam<OAI_address_autocomplete_post_request>());

    /**
    * @param[in]  galaxy_ap_name QString [optional]
    * @param[in]  galaxy_ap_password QString [optional]
    * @param[in]  galaxy_search_type QString [optional]
    * @param[in]  oai_contact_enrich_post_request OAI_contact_enrich_post_request [optional]
    */
    virtual void contactEnrichPost(const ::OpenAPI::OptionalParam<QString> &galaxy_ap_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_ap_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_contact_enrich_post_request> &oai_contact_enrich_post_request = ::OpenAPI::OptionalParam<OAI_contact_enrich_post_request>());

    /**
    * @param[in]  galaxy_ap_name QString [optional]
    * @param[in]  galaxy_ap_password QString [optional]
    * @param[in]  galaxy_search_type QString [optional]
    * @param[in]  oai_email_enrich_post_request OAI_email_enrich_post_request [optional]
    */
    virtual void emailEnrichPost(const ::OpenAPI::OptionalParam<QString> &galaxy_ap_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_ap_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_email_enrich_post_request> &oai_email_enrich_post_request = ::OpenAPI::OptionalParam<OAI_email_enrich_post_request>());

    /**
    * @param[in]  galaxy_ap_name QString [optional]
    * @param[in]  galaxy_ap_password QString [optional]
    * @param[in]  galaxy_search_type QString [optional]
    * @param[in]  oai_phone_enrich_post_request OAI_phone_enrich_post_request [optional]
    */
    virtual void phoneEnrichPost(const ::OpenAPI::OptionalParam<QString> &galaxy_ap_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_ap_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_phone_enrich_post_request> &oai_phone_enrich_post_request = ::OpenAPI::OptionalParam<OAI_phone_enrich_post_request>());

    /**
    * @param[in]  galaxy_ap_name QString [optional]
    * @param[in]  galaxy_ap_password QString [optional]
    * @param[in]  galaxy_search_type QString [optional]
    * @param[in]  oai_contact_enrich_post_request OAI_contact_enrich_post_request [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<QString> &galaxy_ap_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_ap_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &galaxy_search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_contact_enrich_post_request> &oai_contact_enrich_post_request = ::OpenAPI::OptionalParam<OAI_contact_enrich_post_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressAutocompletePostCallback(OAIHttpRequestWorker *worker);
    void contactEnrichPostCallback(OAIHttpRequestWorker *worker);
    void emailEnrichPostCallback(OAIHttpRequestWorker *worker);
    void phoneEnrichPostCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressAutocompletePostSignal();
    void contactEnrichPostSignal();
    void emailEnrichPostSignal();
    void phoneEnrichPostSignal();
    void searchSignal();


    void addressAutocompletePostSignalFull(OAIHttpRequestWorker *worker);
    void contactEnrichPostSignalFull(OAIHttpRequestWorker *worker);
    void emailEnrichPostSignalFull(OAIHttpRequestWorker *worker);
    void phoneEnrichPostSignalFull(OAIHttpRequestWorker *worker);
    void searchSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addressAutocompletePostSignalError() instead")
    void addressAutocompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addressAutocompletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactEnrichPostSignalError() instead")
    void contactEnrichPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contactEnrichPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailEnrichPostSignalError() instead")
    void emailEnrichPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emailEnrichPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneEnrichPostSignalError() instead")
    void phoneEnrichPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void phoneEnrichPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressAutocompletePostSignalErrorFull() instead")
    void addressAutocompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressAutocompletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactEnrichPostSignalErrorFull() instead")
    void contactEnrichPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactEnrichPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailEnrichPostSignalErrorFull() instead")
    void emailEnrichPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailEnrichPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneEnrichPostSignalErrorFull() instead")
    void phoneEnrichPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneEnrichPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
