/**
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingJob::OAIMappingJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingJob::OAIMappingJob() {
    this->initializeModel();
}

OAIMappingJob::~OAIMappingJob() {}

void OAIMappingJob::initializeModel() {

    m_contract_size_isSet = false;
    m_contract_size_isValid = false;

    m_coupon_isSet = false;
    m_coupon_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_exch_code_isSet = false;
    m_exch_code_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_type_isSet = false;
    m_id_type_isValid = false;

    m_id_value_isSet = false;
    m_id_value_isValid = false;

    m_include_unlisted_equities_isSet = false;
    m_include_unlisted_equities_isValid = false;

    m_market_sec_des_isSet = false;
    m_market_sec_des_isValid = false;

    m_maturity_isSet = false;
    m_maturity_isValid = false;

    m_mic_code_isSet = false;
    m_mic_code_isValid = false;

    m_option_type_isSet = false;
    m_option_type_isValid = false;

    m_security_type_isSet = false;
    m_security_type_isValid = false;

    m_security_type2_isSet = false;
    m_security_type2_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_strike_isSet = false;
    m_strike_isValid = false;
}

void OAIMappingJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingJob::fromJsonObject(QJsonObject json) {

    m_contract_size_isValid = ::OpenAPI::fromJsonValue(m_contract_size, json[QString("contractSize")]);
    m_contract_size_isSet = !json[QString("contractSize")].isNull() && m_contract_size_isValid;

    m_coupon_isValid = ::OpenAPI::fromJsonValue(m_coupon, json[QString("coupon")]);
    m_coupon_isSet = !json[QString("coupon")].isNull() && m_coupon_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_exch_code_isValid = ::OpenAPI::fromJsonValue(m_exch_code, json[QString("exchCode")]);
    m_exch_code_isSet = !json[QString("exchCode")].isNull() && m_exch_code_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_id_type_isValid = ::OpenAPI::fromJsonValue(m_id_type, json[QString("idType")]);
    m_id_type_isSet = !json[QString("idType")].isNull() && m_id_type_isValid;

    m_id_value_isValid = ::OpenAPI::fromJsonValue(m_id_value, json[QString("idValue")]);
    m_id_value_isSet = !json[QString("idValue")].isNull() && m_id_value_isValid;

    m_include_unlisted_equities_isValid = ::OpenAPI::fromJsonValue(m_include_unlisted_equities, json[QString("includeUnlistedEquities")]);
    m_include_unlisted_equities_isSet = !json[QString("includeUnlistedEquities")].isNull() && m_include_unlisted_equities_isValid;

    m_market_sec_des_isValid = ::OpenAPI::fromJsonValue(m_market_sec_des, json[QString("marketSecDes")]);
    m_market_sec_des_isSet = !json[QString("marketSecDes")].isNull() && m_market_sec_des_isValid;

    m_maturity_isValid = ::OpenAPI::fromJsonValue(m_maturity, json[QString("maturity")]);
    m_maturity_isSet = !json[QString("maturity")].isNull() && m_maturity_isValid;

    m_mic_code_isValid = ::OpenAPI::fromJsonValue(m_mic_code, json[QString("micCode")]);
    m_mic_code_isSet = !json[QString("micCode")].isNull() && m_mic_code_isValid;

    m_option_type_isValid = ::OpenAPI::fromJsonValue(m_option_type, json[QString("optionType")]);
    m_option_type_isSet = !json[QString("optionType")].isNull() && m_option_type_isValid;

    m_security_type_isValid = ::OpenAPI::fromJsonValue(m_security_type, json[QString("securityType")]);
    m_security_type_isSet = !json[QString("securityType")].isNull() && m_security_type_isValid;

    m_security_type2_isValid = ::OpenAPI::fromJsonValue(m_security_type2, json[QString("securityType2")]);
    m_security_type2_isSet = !json[QString("securityType2")].isNull() && m_security_type2_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("stateCode")]);
    m_state_code_isSet = !json[QString("stateCode")].isNull() && m_state_code_isValid;

    m_strike_isValid = ::OpenAPI::fromJsonValue(m_strike, json[QString("strike")]);
    m_strike_isSet = !json[QString("strike")].isNull() && m_strike_isValid;
}

QString OAIMappingJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingJob::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_size.size() > 0) {
        obj.insert(QString("contractSize"), ::OpenAPI::toJsonValue(m_contract_size));
    }
    if (m_coupon.size() > 0) {
        obj.insert(QString("coupon"), ::OpenAPI::toJsonValue(m_coupon));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_exch_code_isSet) {
        obj.insert(QString("exchCode"), ::OpenAPI::toJsonValue(m_exch_code));
    }
    if (m_expiration.size() > 0) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_type_isSet) {
        obj.insert(QString("idType"), ::OpenAPI::toJsonValue(m_id_type));
    }
    if (m_id_value.isSet()) {
        obj.insert(QString("idValue"), ::OpenAPI::toJsonValue(m_id_value));
    }
    if (m_include_unlisted_equities_isSet) {
        obj.insert(QString("includeUnlistedEquities"), ::OpenAPI::toJsonValue(m_include_unlisted_equities));
    }
    if (m_market_sec_des_isSet) {
        obj.insert(QString("marketSecDes"), ::OpenAPI::toJsonValue(m_market_sec_des));
    }
    if (m_maturity.size() > 0) {
        obj.insert(QString("maturity"), ::OpenAPI::toJsonValue(m_maturity));
    }
    if (m_mic_code_isSet) {
        obj.insert(QString("micCode"), ::OpenAPI::toJsonValue(m_mic_code));
    }
    if (m_option_type_isSet) {
        obj.insert(QString("optionType"), ::OpenAPI::toJsonValue(m_option_type));
    }
    if (m_security_type_isSet) {
        obj.insert(QString("securityType"), ::OpenAPI::toJsonValue(m_security_type));
    }
    if (m_security_type2_isSet) {
        obj.insert(QString("securityType2"), ::OpenAPI::toJsonValue(m_security_type2));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("stateCode"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_strike.size() > 0) {
        obj.insert(QString("strike"), ::OpenAPI::toJsonValue(m_strike));
    }
    return obj;
}

QList<double> OAIMappingJob::getContractSize() const {
    return m_contract_size;
}
void OAIMappingJob::setContractSize(const QList<double> &contract_size) {
    m_contract_size = contract_size;
    m_contract_size_isSet = true;
}

bool OAIMappingJob::is_contract_size_Set() const{
    return m_contract_size_isSet;
}

bool OAIMappingJob::is_contract_size_Valid() const{
    return m_contract_size_isValid;
}

QList<double> OAIMappingJob::getCoupon() const {
    return m_coupon;
}
void OAIMappingJob::setCoupon(const QList<double> &coupon) {
    m_coupon = coupon;
    m_coupon_isSet = true;
}

bool OAIMappingJob::is_coupon_Set() const{
    return m_coupon_isSet;
}

bool OAIMappingJob::is_coupon_Valid() const{
    return m_coupon_isValid;
}

QString OAIMappingJob::getCurrency() const {
    return m_currency;
}
void OAIMappingJob::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMappingJob::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMappingJob::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIMappingJob::getExchCode() const {
    return m_exch_code;
}
void OAIMappingJob::setExchCode(const QString &exch_code) {
    m_exch_code = exch_code;
    m_exch_code_isSet = true;
}

bool OAIMappingJob::is_exch_code_Set() const{
    return m_exch_code_isSet;
}

bool OAIMappingJob::is_exch_code_Valid() const{
    return m_exch_code_isValid;
}

QList<QDate> OAIMappingJob::getExpiration() const {
    return m_expiration;
}
void OAIMappingJob::setExpiration(const QList<QDate> &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIMappingJob::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIMappingJob::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIMappingJob::getIdType() const {
    return m_id_type;
}
void OAIMappingJob::setIdType(const QString &id_type) {
    m_id_type = id_type;
    m_id_type_isSet = true;
}

bool OAIMappingJob::is_id_type_Set() const{
    return m_id_type_isSet;
}

bool OAIMappingJob::is_id_type_Valid() const{
    return m_id_type_isValid;
}

OAIMappingJob_idValue OAIMappingJob::getIdValue() const {
    return m_id_value;
}
void OAIMappingJob::setIdValue(const OAIMappingJob_idValue &id_value) {
    m_id_value = id_value;
    m_id_value_isSet = true;
}

bool OAIMappingJob::is_id_value_Set() const{
    return m_id_value_isSet;
}

bool OAIMappingJob::is_id_value_Valid() const{
    return m_id_value_isValid;
}

bool OAIMappingJob::isIncludeUnlistedEquities() const {
    return m_include_unlisted_equities;
}
void OAIMappingJob::setIncludeUnlistedEquities(const bool &include_unlisted_equities) {
    m_include_unlisted_equities = include_unlisted_equities;
    m_include_unlisted_equities_isSet = true;
}

bool OAIMappingJob::is_include_unlisted_equities_Set() const{
    return m_include_unlisted_equities_isSet;
}

bool OAIMappingJob::is_include_unlisted_equities_Valid() const{
    return m_include_unlisted_equities_isValid;
}

QString OAIMappingJob::getMarketSecDes() const {
    return m_market_sec_des;
}
void OAIMappingJob::setMarketSecDes(const QString &market_sec_des) {
    m_market_sec_des = market_sec_des;
    m_market_sec_des_isSet = true;
}

bool OAIMappingJob::is_market_sec_des_Set() const{
    return m_market_sec_des_isSet;
}

bool OAIMappingJob::is_market_sec_des_Valid() const{
    return m_market_sec_des_isValid;
}

QList<QDate> OAIMappingJob::getMaturity() const {
    return m_maturity;
}
void OAIMappingJob::setMaturity(const QList<QDate> &maturity) {
    m_maturity = maturity;
    m_maturity_isSet = true;
}

bool OAIMappingJob::is_maturity_Set() const{
    return m_maturity_isSet;
}

bool OAIMappingJob::is_maturity_Valid() const{
    return m_maturity_isValid;
}

QString OAIMappingJob::getMicCode() const {
    return m_mic_code;
}
void OAIMappingJob::setMicCode(const QString &mic_code) {
    m_mic_code = mic_code;
    m_mic_code_isSet = true;
}

bool OAIMappingJob::is_mic_code_Set() const{
    return m_mic_code_isSet;
}

bool OAIMappingJob::is_mic_code_Valid() const{
    return m_mic_code_isValid;
}

QString OAIMappingJob::getOptionType() const {
    return m_option_type;
}
void OAIMappingJob::setOptionType(const QString &option_type) {
    m_option_type = option_type;
    m_option_type_isSet = true;
}

bool OAIMappingJob::is_option_type_Set() const{
    return m_option_type_isSet;
}

bool OAIMappingJob::is_option_type_Valid() const{
    return m_option_type_isValid;
}

QString OAIMappingJob::getSecurityType() const {
    return m_security_type;
}
void OAIMappingJob::setSecurityType(const QString &security_type) {
    m_security_type = security_type;
    m_security_type_isSet = true;
}

bool OAIMappingJob::is_security_type_Set() const{
    return m_security_type_isSet;
}

bool OAIMappingJob::is_security_type_Valid() const{
    return m_security_type_isValid;
}

QString OAIMappingJob::getSecurityType2() const {
    return m_security_type2;
}
void OAIMappingJob::setSecurityType2(const QString &security_type2) {
    m_security_type2 = security_type2;
    m_security_type2_isSet = true;
}

bool OAIMappingJob::is_security_type2_Set() const{
    return m_security_type2_isSet;
}

bool OAIMappingJob::is_security_type2_Valid() const{
    return m_security_type2_isValid;
}

QString OAIMappingJob::getStateCode() const {
    return m_state_code;
}
void OAIMappingJob::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIMappingJob::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIMappingJob::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QList<double> OAIMappingJob::getStrike() const {
    return m_strike;
}
void OAIMappingJob::setStrike(const QList<double> &strike) {
    m_strike = strike;
    m_strike_isSet = true;
}

bool OAIMappingJob::is_strike_Set() const{
    return m_strike_isSet;
}

bool OAIMappingJob::is_strike_Valid() const{
    return m_strike_isValid;
}

bool OAIMappingJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unlisted_equities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_sec_des_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mic_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strike.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_type_isValid && m_id_value_isValid && true;
}

} // namespace OpenAPI
