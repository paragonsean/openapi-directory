/**
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMappingJob.h
 *
 * For V3: securityType2 is required when idType is BASE_TICKER or ID_EXCH_SYMBOL.  expiration is required when securityType2 is Option or Warrant.  maturity is required when securityType2 is Pool.
 */

#ifndef OAIMappingJob_H
#define OAIMappingJob_H

#include <QJsonObject>

#include "OAIMappingJob_idValue.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMappingJob : public OAIObject {
public:
    OAIMappingJob();
    OAIMappingJob(QString json);
    ~OAIMappingJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<double> getContractSize() const;
    void setContractSize(const QList<double> &contract_size);
    bool is_contract_size_Set() const;
    bool is_contract_size_Valid() const;

    QList<double> getCoupon() const;
    void setCoupon(const QList<double> &coupon);
    bool is_coupon_Set() const;
    bool is_coupon_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getExchCode() const;
    void setExchCode(const QString &exch_code);
    bool is_exch_code_Set() const;
    bool is_exch_code_Valid() const;

    QList<QDate> getExpiration() const;
    void setExpiration(const QList<QDate> &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    QString getIdType() const;
    void setIdType(const QString &id_type);
    bool is_id_type_Set() const;
    bool is_id_type_Valid() const;

    OAIMappingJob_idValue getIdValue() const;
    void setIdValue(const OAIMappingJob_idValue &id_value);
    bool is_id_value_Set() const;
    bool is_id_value_Valid() const;

    bool isIncludeUnlistedEquities() const;
    void setIncludeUnlistedEquities(const bool &include_unlisted_equities);
    bool is_include_unlisted_equities_Set() const;
    bool is_include_unlisted_equities_Valid() const;

    QString getMarketSecDes() const;
    void setMarketSecDes(const QString &market_sec_des);
    bool is_market_sec_des_Set() const;
    bool is_market_sec_des_Valid() const;

    QList<QDate> getMaturity() const;
    void setMaturity(const QList<QDate> &maturity);
    bool is_maturity_Set() const;
    bool is_maturity_Valid() const;

    QString getMicCode() const;
    void setMicCode(const QString &mic_code);
    bool is_mic_code_Set() const;
    bool is_mic_code_Valid() const;

    QString getOptionType() const;
    void setOptionType(const QString &option_type);
    bool is_option_type_Set() const;
    bool is_option_type_Valid() const;

    QString getSecurityType() const;
    void setSecurityType(const QString &security_type);
    bool is_security_type_Set() const;
    bool is_security_type_Valid() const;

    QString getSecurityType2() const;
    void setSecurityType2(const QString &security_type2);
    bool is_security_type2_Set() const;
    bool is_security_type2_Valid() const;

    QString getStateCode() const;
    void setStateCode(const QString &state_code);
    bool is_state_code_Set() const;
    bool is_state_code_Valid() const;

    QList<double> getStrike() const;
    void setStrike(const QList<double> &strike);
    bool is_strike_Set() const;
    bool is_strike_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<double> m_contract_size;
    bool m_contract_size_isSet;
    bool m_contract_size_isValid;

    QList<double> m_coupon;
    bool m_coupon_isSet;
    bool m_coupon_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_exch_code;
    bool m_exch_code_isSet;
    bool m_exch_code_isValid;

    QList<QDate> m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    QString m_id_type;
    bool m_id_type_isSet;
    bool m_id_type_isValid;

    OAIMappingJob_idValue m_id_value;
    bool m_id_value_isSet;
    bool m_id_value_isValid;

    bool m_include_unlisted_equities;
    bool m_include_unlisted_equities_isSet;
    bool m_include_unlisted_equities_isValid;

    QString m_market_sec_des;
    bool m_market_sec_des_isSet;
    bool m_market_sec_des_isValid;

    QList<QDate> m_maturity;
    bool m_maturity_isSet;
    bool m_maturity_isValid;

    QString m_mic_code;
    bool m_mic_code_isSet;
    bool m_mic_code_isValid;

    QString m_option_type;
    bool m_option_type_isSet;
    bool m_option_type_isValid;

    QString m_security_type;
    bool m_security_type_isSet;
    bool m_security_type_isValid;

    QString m_security_type2;
    bool m_security_type2_isSet;
    bool m_security_type2_isValid;

    QString m_state_code;
    bool m_state_code_isSet;
    bool m_state_code_isValid;

    QList<double> m_strike;
    bool m_strike_isSet;
    bool m_strike_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMappingJob)

#endif // OAIMappingJob_H
