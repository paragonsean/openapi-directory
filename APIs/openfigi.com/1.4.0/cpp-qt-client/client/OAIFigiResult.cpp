/**
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFigiResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFigiResult::OAIFigiResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFigiResult::OAIFigiResult() {
    this->initializeModel();
}

OAIFigiResult::~OAIFigiResult() {}

void OAIFigiResult::initializeModel() {

    m_composite_figi_isSet = false;
    m_composite_figi_isValid = false;

    m_exch_code_isSet = false;
    m_exch_code_isValid = false;

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_market_sector_isSet = false;
    m_market_sector_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_description_isSet = false;
    m_security_description_isValid = false;

    m_security_type_isSet = false;
    m_security_type_isValid = false;

    m_security_type2_isSet = false;
    m_security_type2_isValid = false;

    m_share_class_figi_isSet = false;
    m_share_class_figi_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;
}

void OAIFigiResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFigiResult::fromJsonObject(QJsonObject json) {

    m_composite_figi_isValid = ::OpenAPI::fromJsonValue(m_composite_figi, json[QString("compositeFIGI")]);
    m_composite_figi_isSet = !json[QString("compositeFIGI")].isNull() && m_composite_figi_isValid;

    m_exch_code_isValid = ::OpenAPI::fromJsonValue(m_exch_code, json[QString("exchCode")]);
    m_exch_code_isSet = !json[QString("exchCode")].isNull() && m_exch_code_isValid;

    m_figi_isValid = ::OpenAPI::fromJsonValue(m_figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_market_sector_isValid = ::OpenAPI::fromJsonValue(m_market_sector, json[QString("marketSector")]);
    m_market_sector_isSet = !json[QString("marketSector")].isNull() && m_market_sector_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_security_description_isValid = ::OpenAPI::fromJsonValue(m_security_description, json[QString("securityDescription")]);
    m_security_description_isSet = !json[QString("securityDescription")].isNull() && m_security_description_isValid;

    m_security_type_isValid = ::OpenAPI::fromJsonValue(m_security_type, json[QString("securityType")]);
    m_security_type_isSet = !json[QString("securityType")].isNull() && m_security_type_isValid;

    m_security_type2_isValid = ::OpenAPI::fromJsonValue(m_security_type2, json[QString("securityType2")]);
    m_security_type2_isSet = !json[QString("securityType2")].isNull() && m_security_type2_isValid;

    m_share_class_figi_isValid = ::OpenAPI::fromJsonValue(m_share_class_figi, json[QString("shareClassFIGI")]);
    m_share_class_figi_isSet = !json[QString("shareClassFIGI")].isNull() && m_share_class_figi_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;
}

QString OAIFigiResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFigiResult::asJsonObject() const {
    QJsonObject obj;
    if (m_composite_figi_isSet) {
        obj.insert(QString("compositeFIGI"), ::OpenAPI::toJsonValue(m_composite_figi));
    }
    if (m_exch_code_isSet) {
        obj.insert(QString("exchCode"), ::OpenAPI::toJsonValue(m_exch_code));
    }
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(m_figi));
    }
    if (m_market_sector_isSet) {
        obj.insert(QString("marketSector"), ::OpenAPI::toJsonValue(m_market_sector));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_description_isSet) {
        obj.insert(QString("securityDescription"), ::OpenAPI::toJsonValue(m_security_description));
    }
    if (m_security_type_isSet) {
        obj.insert(QString("securityType"), ::OpenAPI::toJsonValue(m_security_type));
    }
    if (m_security_type2_isSet) {
        obj.insert(QString("securityType2"), ::OpenAPI::toJsonValue(m_security_type2));
    }
    if (m_share_class_figi_isSet) {
        obj.insert(QString("shareClassFIGI"), ::OpenAPI::toJsonValue(m_share_class_figi));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    return obj;
}

QString OAIFigiResult::getCompositeFigi() const {
    return m_composite_figi;
}
void OAIFigiResult::setCompositeFigi(const QString &composite_figi) {
    m_composite_figi = composite_figi;
    m_composite_figi_isSet = true;
}

bool OAIFigiResult::is_composite_figi_Set() const{
    return m_composite_figi_isSet;
}

bool OAIFigiResult::is_composite_figi_Valid() const{
    return m_composite_figi_isValid;
}

QString OAIFigiResult::getExchCode() const {
    return m_exch_code;
}
void OAIFigiResult::setExchCode(const QString &exch_code) {
    m_exch_code = exch_code;
    m_exch_code_isSet = true;
}

bool OAIFigiResult::is_exch_code_Set() const{
    return m_exch_code_isSet;
}

bool OAIFigiResult::is_exch_code_Valid() const{
    return m_exch_code_isValid;
}

QString OAIFigiResult::getFigi() const {
    return m_figi;
}
void OAIFigiResult::setFigi(const QString &figi) {
    m_figi = figi;
    m_figi_isSet = true;
}

bool OAIFigiResult::is_figi_Set() const{
    return m_figi_isSet;
}

bool OAIFigiResult::is_figi_Valid() const{
    return m_figi_isValid;
}

QString OAIFigiResult::getMarketSector() const {
    return m_market_sector;
}
void OAIFigiResult::setMarketSector(const QString &market_sector) {
    m_market_sector = market_sector;
    m_market_sector_isSet = true;
}

bool OAIFigiResult::is_market_sector_Set() const{
    return m_market_sector_isSet;
}

bool OAIFigiResult::is_market_sector_Valid() const{
    return m_market_sector_isValid;
}

QString OAIFigiResult::getMetadata() const {
    return m_metadata;
}
void OAIFigiResult::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFigiResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFigiResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIFigiResult::getName() const {
    return m_name;
}
void OAIFigiResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFigiResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFigiResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFigiResult::getSecurityDescription() const {
    return m_security_description;
}
void OAIFigiResult::setSecurityDescription(const QString &security_description) {
    m_security_description = security_description;
    m_security_description_isSet = true;
}

bool OAIFigiResult::is_security_description_Set() const{
    return m_security_description_isSet;
}

bool OAIFigiResult::is_security_description_Valid() const{
    return m_security_description_isValid;
}

QString OAIFigiResult::getSecurityType() const {
    return m_security_type;
}
void OAIFigiResult::setSecurityType(const QString &security_type) {
    m_security_type = security_type;
    m_security_type_isSet = true;
}

bool OAIFigiResult::is_security_type_Set() const{
    return m_security_type_isSet;
}

bool OAIFigiResult::is_security_type_Valid() const{
    return m_security_type_isValid;
}

QString OAIFigiResult::getSecurityType2() const {
    return m_security_type2;
}
void OAIFigiResult::setSecurityType2(const QString &security_type2) {
    m_security_type2 = security_type2;
    m_security_type2_isSet = true;
}

bool OAIFigiResult::is_security_type2_Set() const{
    return m_security_type2_isSet;
}

bool OAIFigiResult::is_security_type2_Valid() const{
    return m_security_type2_isValid;
}

QString OAIFigiResult::getShareClassFigi() const {
    return m_share_class_figi;
}
void OAIFigiResult::setShareClassFigi(const QString &share_class_figi) {
    m_share_class_figi = share_class_figi;
    m_share_class_figi_isSet = true;
}

bool OAIFigiResult::is_share_class_figi_Set() const{
    return m_share_class_figi_isSet;
}

bool OAIFigiResult::is_share_class_figi_Valid() const{
    return m_share_class_figi_isValid;
}

QString OAIFigiResult::getTicker() const {
    return m_ticker;
}
void OAIFigiResult::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAIFigiResult::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAIFigiResult::is_ticker_Valid() const{
    return m_ticker_isValid;
}

bool OAIFigiResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_composite_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_class_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFigiResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
