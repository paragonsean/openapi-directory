/*
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FigiResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:18.756953-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FigiResult {
  public static final String SERIALIZED_NAME_COMPOSITE_F_I_G_I = "compositeFIGI";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_F_I_G_I)
  private String compositeFIGI;

  public static final String SERIALIZED_NAME_EXCH_CODE = "exchCode";
  @SerializedName(SERIALIZED_NAME_EXCH_CODE)
  private String exchCode;

  public static final String SERIALIZED_NAME_FIGI = "figi";
  @SerializedName(SERIALIZED_NAME_FIGI)
  private String figi;

  public static final String SERIALIZED_NAME_MARKET_SECTOR = "marketSector";
  @SerializedName(SERIALIZED_NAME_MARKET_SECTOR)
  private String marketSector;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SECURITY_DESCRIPTION = "securityDescription";
  @SerializedName(SERIALIZED_NAME_SECURITY_DESCRIPTION)
  private String securityDescription;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "securityType";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  private String securityType;

  public static final String SERIALIZED_NAME_SECURITY_TYPE2 = "securityType2";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE2)
  private String securityType2;

  public static final String SERIALIZED_NAME_SHARE_CLASS_F_I_G_I = "shareClassFIGI";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS_F_I_G_I)
  private String shareClassFIGI;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public FigiResult() {
  }

  public FigiResult compositeFIGI(String compositeFIGI) {
    this.compositeFIGI = compositeFIGI;
    return this;
  }

  /**
   * Get compositeFIGI
   * @return compositeFIGI
   */
  @javax.annotation.Nullable
  public String getCompositeFIGI() {
    return compositeFIGI;
  }

  public void setCompositeFIGI(String compositeFIGI) {
    this.compositeFIGI = compositeFIGI;
  }


  public FigiResult exchCode(String exchCode) {
    this.exchCode = exchCode;
    return this;
  }

  /**
   * Get exchCode
   * @return exchCode
   */
  @javax.annotation.Nullable
  public String getExchCode() {
    return exchCode;
  }

  public void setExchCode(String exchCode) {
    this.exchCode = exchCode;
  }


  public FigiResult figi(String figi) {
    this.figi = figi;
    return this;
  }

  /**
   * Get figi
   * @return figi
   */
  @javax.annotation.Nullable
  public String getFigi() {
    return figi;
  }

  public void setFigi(String figi) {
    this.figi = figi;
  }


  public FigiResult marketSector(String marketSector) {
    this.marketSector = marketSector;
    return this;
  }

  /**
   * Get marketSector
   * @return marketSector
   */
  @javax.annotation.Nullable
  public String getMarketSector() {
    return marketSector;
  }

  public void setMarketSector(String marketSector) {
    this.marketSector = marketSector;
  }


  public FigiResult metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Exists when API is unable to show non-FIGI fields.
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public FigiResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FigiResult securityDescription(String securityDescription) {
    this.securityDescription = securityDescription;
    return this;
  }

  /**
   * Get securityDescription
   * @return securityDescription
   */
  @javax.annotation.Nullable
  public String getSecurityDescription() {
    return securityDescription;
  }

  public void setSecurityDescription(String securityDescription) {
    this.securityDescription = securityDescription;
  }


  public FigiResult securityType(String securityType) {
    this.securityType = securityType;
    return this;
  }

  /**
   * Get securityType
   * @return securityType
   */
  @javax.annotation.Nullable
  public String getSecurityType() {
    return securityType;
  }

  public void setSecurityType(String securityType) {
    this.securityType = securityType;
  }


  public FigiResult securityType2(String securityType2) {
    this.securityType2 = securityType2;
    return this;
  }

  /**
   * Get securityType2
   * @return securityType2
   */
  @javax.annotation.Nullable
  public String getSecurityType2() {
    return securityType2;
  }

  public void setSecurityType2(String securityType2) {
    this.securityType2 = securityType2;
  }


  public FigiResult shareClassFIGI(String shareClassFIGI) {
    this.shareClassFIGI = shareClassFIGI;
    return this;
  }

  /**
   * Get shareClassFIGI
   * @return shareClassFIGI
   */
  @javax.annotation.Nullable
  public String getShareClassFIGI() {
    return shareClassFIGI;
  }

  public void setShareClassFIGI(String shareClassFIGI) {
    this.shareClassFIGI = shareClassFIGI;
  }


  public FigiResult ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Get ticker
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FigiResult figiResult = (FigiResult) o;
    return Objects.equals(this.compositeFIGI, figiResult.compositeFIGI) &&
        Objects.equals(this.exchCode, figiResult.exchCode) &&
        Objects.equals(this.figi, figiResult.figi) &&
        Objects.equals(this.marketSector, figiResult.marketSector) &&
        Objects.equals(this.metadata, figiResult.metadata) &&
        Objects.equals(this.name, figiResult.name) &&
        Objects.equals(this.securityDescription, figiResult.securityDescription) &&
        Objects.equals(this.securityType, figiResult.securityType) &&
        Objects.equals(this.securityType2, figiResult.securityType2) &&
        Objects.equals(this.shareClassFIGI, figiResult.shareClassFIGI) &&
        Objects.equals(this.ticker, figiResult.ticker);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(compositeFIGI, exchCode, figi, marketSector, metadata, name, securityDescription, securityType, securityType2, shareClassFIGI, ticker);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FigiResult {\n");
    sb.append("    compositeFIGI: ").append(toIndentedString(compositeFIGI)).append("\n");
    sb.append("    exchCode: ").append(toIndentedString(exchCode)).append("\n");
    sb.append("    figi: ").append(toIndentedString(figi)).append("\n");
    sb.append("    marketSector: ").append(toIndentedString(marketSector)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    securityDescription: ").append(toIndentedString(securityDescription)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    securityType2: ").append(toIndentedString(securityType2)).append("\n");
    sb.append("    shareClassFIGI: ").append(toIndentedString(shareClassFIGI)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compositeFIGI");
    openapiFields.add("exchCode");
    openapiFields.add("figi");
    openapiFields.add("marketSector");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("securityDescription");
    openapiFields.add("securityType");
    openapiFields.add("securityType2");
    openapiFields.add("shareClassFIGI");
    openapiFields.add("ticker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FigiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FigiResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FigiResult is not found in the empty JSON string", FigiResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FigiResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FigiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compositeFIGI") != null && !jsonObj.get("compositeFIGI").isJsonNull()) && !jsonObj.get("compositeFIGI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compositeFIGI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compositeFIGI").toString()));
      }
      if ((jsonObj.get("exchCode") != null && !jsonObj.get("exchCode").isJsonNull()) && !jsonObj.get("exchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchCode").toString()));
      }
      if ((jsonObj.get("figi") != null && !jsonObj.get("figi").isJsonNull()) && !jsonObj.get("figi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `figi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("figi").toString()));
      }
      if ((jsonObj.get("marketSector") != null && !jsonObj.get("marketSector").isJsonNull()) && !jsonObj.get("marketSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketSector").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("securityDescription") != null && !jsonObj.get("securityDescription").isJsonNull()) && !jsonObj.get("securityDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityDescription").toString()));
      }
      if ((jsonObj.get("securityType") != null && !jsonObj.get("securityType").isJsonNull()) && !jsonObj.get("securityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType").toString()));
      }
      if ((jsonObj.get("securityType2") != null && !jsonObj.get("securityType2").isJsonNull()) && !jsonObj.get("securityType2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType2").toString()));
      }
      if ((jsonObj.get("shareClassFIGI") != null && !jsonObj.get("shareClassFIGI").isJsonNull()) && !jsonObj.get("shareClassFIGI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareClassFIGI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareClassFIGI").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FigiResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FigiResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FigiResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FigiResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FigiResult>() {
           @Override
           public void write(JsonWriter out, FigiResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FigiResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FigiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FigiResult
   * @throws IOException if the JSON string is invalid with respect to FigiResult
   */
  public static FigiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FigiResult.class);
  }

  /**
   * Convert an instance of FigiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

