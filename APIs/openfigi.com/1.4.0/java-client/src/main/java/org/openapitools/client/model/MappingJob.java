/*
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MappingJobIdValue;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For V3: securityType2 is required when idType is BASE_TICKER or ID_EXCH_SYMBOL.  expiration is required when securityType2 is Option or Warrant.  maturity is required when securityType2 is Pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:18.756953-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingJob {
  public static final String SERIALIZED_NAME_CONTRACT_SIZE = "contractSize";
  @SerializedName(SERIALIZED_NAME_CONTRACT_SIZE)
  private List<BigDecimal> contractSize;

  public static final String SERIALIZED_NAME_COUPON = "coupon";
  @SerializedName(SERIALIZED_NAME_COUPON)
  private List<BigDecimal> coupon;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EXCH_CODE = "exchCode";
  @SerializedName(SERIALIZED_NAME_EXCH_CODE)
  private String exchCode;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private List<LocalDate> expiration;

  /**
   * Gets or Sets idType
   */
  @JsonAdapter(IdTypeEnum.Adapter.class)
  public enum IdTypeEnum {
    ID_ISIN("ID_ISIN"),
    
    ID_BB_UNIQUE("ID_BB_UNIQUE"),
    
    ID_SEDOL("ID_SEDOL"),
    
    ID_COMMON("ID_COMMON"),
    
    ID_WERTPAPIER("ID_WERTPAPIER"),
    
    ID_CUSIP("ID_CUSIP"),
    
    ID_BB("ID_BB"),
    
    ID_ITALY("ID_ITALY"),
    
    ID_EXCH_SYMBOL("ID_EXCH_SYMBOL"),
    
    ID_FULL_EXCHANGE_SYMBOL("ID_FULL_EXCHANGE_SYMBOL"),
    
    COMPOSITE_ID_BB_GLOBAL("COMPOSITE_ID_BB_GLOBAL"),
    
    ID_BB_GLOBAL_SHARE_CLASS_LEVEL("ID_BB_GLOBAL_SHARE_CLASS_LEVEL"),
    
    ID_BB_SEC_NUM_DES("ID_BB_SEC_NUM_DES"),
    
    ID_BB_GLOBAL("ID_BB_GLOBAL"),
    
    TICKER("TICKER"),
    
    ID_CUSIP_8_CHR("ID_CUSIP_8_CHR"),
    
    OCC_SYMBOL("OCC_SYMBOL"),
    
    UNIQUE_ID_FUT_OPT("UNIQUE_ID_FUT_OPT"),
    
    OPRA_SYMBOL("OPRA_SYMBOL"),
    
    TRADING_SYSTEM_IDENTIFIER("TRADING_SYSTEM_IDENTIFIER"),
    
    ID_CINS("ID_CINS"),
    
    ID_SHORT_CODE("ID_SHORT_CODE"),
    
    BASE_TICKER("BASE_TICKER"),
    
    VENDOR_INDEX_CODE("VENDOR_INDEX_CODE");

    private String value;

    IdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdTypeEnum fromValue(String value) {
      for (IdTypeEnum b : IdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  private IdTypeEnum idType;

  public static final String SERIALIZED_NAME_ID_VALUE = "idValue";
  @SerializedName(SERIALIZED_NAME_ID_VALUE)
  private MappingJobIdValue idValue = string;

  public static final String SERIALIZED_NAME_INCLUDE_UNLISTED_EQUITIES = "includeUnlistedEquities";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNLISTED_EQUITIES)
  private Boolean includeUnlistedEquities;

  public static final String SERIALIZED_NAME_MARKET_SEC_DES = "marketSecDes";
  @SerializedName(SERIALIZED_NAME_MARKET_SEC_DES)
  private String marketSecDes;

  public static final String SERIALIZED_NAME_MATURITY = "maturity";
  @SerializedName(SERIALIZED_NAME_MATURITY)
  private List<LocalDate> maturity;

  public static final String SERIALIZED_NAME_MIC_CODE = "micCode";
  @SerializedName(SERIALIZED_NAME_MIC_CODE)
  private String micCode;

  /**
   * Gets or Sets optionType
   */
  @JsonAdapter(OptionTypeEnum.Adapter.class)
  public enum OptionTypeEnum {
    PUT("Put"),
    
    CALL("Call");

    private String value;

    OptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptionTypeEnum fromValue(String value) {
      for (OptionTypeEnum b : OptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private OptionTypeEnum optionType;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "securityType";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  private String securityType;

  public static final String SERIALIZED_NAME_SECURITY_TYPE2 = "securityType2";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE2)
  private String securityType2;

  /**
   * Gets or Sets stateCode
   */
  @JsonAdapter(StateCodeEnum.Adapter.class)
  public enum StateCodeEnum {
    AB("AB"),
    
    AC("AC"),
    
    AC2("AC"),
    
    AH("AH"),
    
    AK("AK"),
    
    AL("AL"),
    
    AM("AM"),
    
    AR("AR"),
    
    AS("AS"),
    
    AT("AT"),
    
    AZ("AZ"),
    
    BC("BC"),
    
    BJ("BJ"),
    
    CA("CA"),
    
    CB("CB"),
    
    CO("CO"),
    
    CQ("CQ"),
    
    CT("CT"),
    
    CZ("CZ"),
    
    DC("DC"),
    
    DE("DE"),
    
    EH("EH"),
    
    FH("FH"),
    
    FI("FI"),
    
    FJ("FJ"),
    
    FL("FL"),
    
    FO("FO"),
    
    FS("FS"),
    
    GA("GA"),
    
    GD("GD"),
    
    GF("GF"),
    
    GM("GM"),
    
    GS("GS"),
    
    GU("GU"),
    
    GX("GX"),
    
    GZ("GZ"),
    
    HA("HA"),
    
    HB("HB"),
    
    HE("HE"),
    
    HG("HG"),
    
    HI("HI"),
    
    HI2("HI"),
    
    HL("HL"),
    
    HN("HN"),
    
    HO("HO"),
    
    HS("HS"),
    
    IA("IA"),
    
    ID("ID"),
    
    IG("IG"),
    
    IK("IK"),
    
    IL("IL"),
    
    IN("IN"),
    
    IT("IT"),
    
    JL("JL"),
    
    JS("JS"),
    
    JX("JX"),
    
    KA("KA"),
    
    KC("KC"),
    
    KN("KN"),
    
    KO("KO"),
    
    KS("KS"),
    
    KT("KT"),
    
    KU("KU"),
    
    KY("KY"),
    
    LA("LA"),
    
    LN("LN"),
    
    MA("MA"),
    
    MB("MB"),
    
    MD("MD"),
    
    ME("ME"),
    
    ME2("ME"),
    
    MG("MG"),
    
    MI("MI"),
    
    MN("MN"),
    
    MO("MO"),
    
    MS("MS"),
    
    MT("MT"),
    
    MZ("MZ"),
    
    NB("NB"),
    
    NC("NC"),
    
    ND("ND"),
    
    NE("NE"),
    
    NG("NG"),
    
    NH("NH"),
    
    NJ("NJ"),
    
    NL("NL"),
    
    NM("NM"),
    
    NM2("NM"),
    
    NN("NN"),
    
    NR("NR"),
    
    NS("NS"),
    
    NS2("NS"),
    
    NS3("NS"),
    
    NT("NT"),
    
    NU("NU"),
    
    NV("NV"),
    
    NW("NW"),
    
    NX("NX"),
    
    NY("NY"),
    
    OH("OH"),
    
    OK("OK"),
    
    TRUE("true"),
    
    TRUE2("true"),
    
    OR("OR"),
    
    OS("OS"),
    
    OT("OT"),
    
    OT2("OT"),
    
    OY("OY"),
    
    PA("PA"),
    
    PE("PE"),
    
    PR("PR"),
    
    QC("QC"),
    
    QH("QH"),
    
    QL("QL"),
    
    RI("RI"),
    
    SA("SA"),
    
    SA2("SA"),
    
    SC("SC"),
    
    SC2("SC"),
    
    SD("SD"),
    
    SD2("SD"),
    
    SH("SH"),
    
    SI("SI"),
    
    SK("SK"),
    
    SN("SN"),
    
    SN2("SN"),
    
    ST("ST"),
    
    SX("SX"),
    
    SZ("SZ"),
    
    TA("TA"),
    
    TG("TG"),
    
    TJ("TJ"),
    
    TK("TK"),
    
    TN("TN"),
    
    TS("TS"),
    
    TT("TT"),
    
    TT2("TT"),
    
    TX("TX"),
    
    TY("TY"),
    
    UT("UT"),
    
    VA("VA"),
    
    VI("VI"),
    
    VI2("VI"),
    
    VT("VT"),
    
    WA("WA"),
    
    WA2("WA"),
    
    WI("WI"),
    
    WK("WK"),
    
    WV("WV"),
    
    WY("WY"),
    
    XJ("XJ"),
    
    XZ("XZ"),
    
    YA("YA"),
    
    YN("YN"),
    
    YN2("YN"),
    
    YT("YT"),
    
    YU("YU"),
    
    ZJ("ZJ");

    private String value;

    StateCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateCodeEnum fromValue(String value) {
      for (StateCodeEnum b : StateCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private StateCodeEnum stateCode;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  private List<BigDecimal> strike;

  public MappingJob() {
  }

  public MappingJob contractSize(List<BigDecimal> contractSize) {
    this.contractSize = contractSize;
    return this;
  }

  public MappingJob addContractSizeItem(BigDecimal contractSizeItem) {
    if (this.contractSize == null) {
      this.contractSize = new ArrayList<>();
    }
    this.contractSize.add(contractSizeItem);
    return this;
  }

  /**
   * At least one entry should be non-null.
   * @return contractSize
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getContractSize() {
    return contractSize;
  }

  public void setContractSize(List<BigDecimal> contractSize) {
    this.contractSize = contractSize;
  }


  public MappingJob coupon(List<BigDecimal> coupon) {
    this.coupon = coupon;
    return this;
  }

  public MappingJob addCouponItem(BigDecimal couponItem) {
    if (this.coupon == null) {
      this.coupon = new ArrayList<>();
    }
    this.coupon.add(couponItem);
    return this;
  }

  /**
   * At least one entry should be non-null.
   * @return coupon
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getCoupon() {
    return coupon;
  }

  public void setCoupon(List<BigDecimal> coupon) {
    this.coupon = coupon;
  }


  public MappingJob currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public MappingJob exchCode(String exchCode) {
    this.exchCode = exchCode;
    return this;
  }

  /**
   * Get exchCode
   * @return exchCode
   */
  @javax.annotation.Nullable
  public String getExchCode() {
    return exchCode;
  }

  public void setExchCode(String exchCode) {
    this.exchCode = exchCode;
  }


  public MappingJob expiration(List<LocalDate> expiration) {
    this.expiration = expiration;
    return this;
  }

  public MappingJob addExpirationItem(LocalDate expirationItem) {
    if (this.expiration == null) {
      this.expiration = new ArrayList<>();
    }
    this.expiration.add(expirationItem);
    return this;
  }

  /**
   * At least one entry should be non-null.
   * @return expiration
   */
  @javax.annotation.Nullable
  public List<LocalDate> getExpiration() {
    return expiration;
  }

  public void setExpiration(List<LocalDate> expiration) {
    this.expiration = expiration;
  }


  public MappingJob idType(IdTypeEnum idType) {
    this.idType = idType;
    return this;
  }

  /**
   * Get idType
   * @return idType
   */
  @javax.annotation.Nonnull
  public IdTypeEnum getIdType() {
    return idType;
  }

  public void setIdType(IdTypeEnum idType) {
    this.idType = idType;
  }


  public MappingJob idValue(MappingJobIdValue idValue) {
    this.idValue = idValue;
    return this;
  }

  /**
   * Get idValue
   * @return idValue
   */
  @javax.annotation.Nonnull
  public MappingJobIdValue getIdValue() {
    return idValue;
  }

  public void setIdValue(MappingJobIdValue idValue) {
    this.idValue = idValue;
  }


  public MappingJob includeUnlistedEquities(Boolean includeUnlistedEquities) {
    this.includeUnlistedEquities = includeUnlistedEquities;
    return this;
  }

  /**
   * Get includeUnlistedEquities
   * @return includeUnlistedEquities
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUnlistedEquities() {
    return includeUnlistedEquities;
  }

  public void setIncludeUnlistedEquities(Boolean includeUnlistedEquities) {
    this.includeUnlistedEquities = includeUnlistedEquities;
  }


  public MappingJob marketSecDes(String marketSecDes) {
    this.marketSecDes = marketSecDes;
    return this;
  }

  /**
   * Get marketSecDes
   * @return marketSecDes
   */
  @javax.annotation.Nullable
  public String getMarketSecDes() {
    return marketSecDes;
  }

  public void setMarketSecDes(String marketSecDes) {
    this.marketSecDes = marketSecDes;
  }


  public MappingJob maturity(List<LocalDate> maturity) {
    this.maturity = maturity;
    return this;
  }

  public MappingJob addMaturityItem(LocalDate maturityItem) {
    if (this.maturity == null) {
      this.maturity = new ArrayList<>();
    }
    this.maturity.add(maturityItem);
    return this;
  }

  /**
   * At least one entry should be non-null.
   * @return maturity
   */
  @javax.annotation.Nullable
  public List<LocalDate> getMaturity() {
    return maturity;
  }

  public void setMaturity(List<LocalDate> maturity) {
    this.maturity = maturity;
  }


  public MappingJob micCode(String micCode) {
    this.micCode = micCode;
    return this;
  }

  /**
   * Get micCode
   * @return micCode
   */
  @javax.annotation.Nullable
  public String getMicCode() {
    return micCode;
  }

  public void setMicCode(String micCode) {
    this.micCode = micCode;
  }


  public MappingJob optionType(OptionTypeEnum optionType) {
    this.optionType = optionType;
    return this;
  }

  /**
   * Get optionType
   * @return optionType
   */
  @javax.annotation.Nullable
  public OptionTypeEnum getOptionType() {
    return optionType;
  }

  public void setOptionType(OptionTypeEnum optionType) {
    this.optionType = optionType;
  }


  public MappingJob securityType(String securityType) {
    this.securityType = securityType;
    return this;
  }

  /**
   * Get securityType
   * @return securityType
   */
  @javax.annotation.Nullable
  public String getSecurityType() {
    return securityType;
  }

  public void setSecurityType(String securityType) {
    this.securityType = securityType;
  }


  public MappingJob securityType2(String securityType2) {
    this.securityType2 = securityType2;
    return this;
  }

  /**
   * Get securityType2
   * @return securityType2
   */
  @javax.annotation.Nullable
  public String getSecurityType2() {
    return securityType2;
  }

  public void setSecurityType2(String securityType2) {
    this.securityType2 = securityType2;
  }


  public MappingJob stateCode(StateCodeEnum stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * Get stateCode
   * @return stateCode
   */
  @javax.annotation.Nullable
  public StateCodeEnum getStateCode() {
    return stateCode;
  }

  public void setStateCode(StateCodeEnum stateCode) {
    this.stateCode = stateCode;
  }


  public MappingJob strike(List<BigDecimal> strike) {
    this.strike = strike;
    return this;
  }

  public MappingJob addStrikeItem(BigDecimal strikeItem) {
    if (this.strike == null) {
      this.strike = new ArrayList<>();
    }
    this.strike.add(strikeItem);
    return this;
  }

  /**
   * At least one entry should be non-null.
   * @return strike
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getStrike() {
    return strike;
  }

  public void setStrike(List<BigDecimal> strike) {
    this.strike = strike;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingJob mappingJob = (MappingJob) o;
    return Objects.equals(this.contractSize, mappingJob.contractSize) &&
        Objects.equals(this.coupon, mappingJob.coupon) &&
        Objects.equals(this.currency, mappingJob.currency) &&
        Objects.equals(this.exchCode, mappingJob.exchCode) &&
        Objects.equals(this.expiration, mappingJob.expiration) &&
        Objects.equals(this.idType, mappingJob.idType) &&
        Objects.equals(this.idValue, mappingJob.idValue) &&
        Objects.equals(this.includeUnlistedEquities, mappingJob.includeUnlistedEquities) &&
        Objects.equals(this.marketSecDes, mappingJob.marketSecDes) &&
        Objects.equals(this.maturity, mappingJob.maturity) &&
        Objects.equals(this.micCode, mappingJob.micCode) &&
        Objects.equals(this.optionType, mappingJob.optionType) &&
        Objects.equals(this.securityType, mappingJob.securityType) &&
        Objects.equals(this.securityType2, mappingJob.securityType2) &&
        Objects.equals(this.stateCode, mappingJob.stateCode) &&
        Objects.equals(this.strike, mappingJob.strike);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractSize, coupon, currency, exchCode, expiration, idType, idValue, includeUnlistedEquities, marketSecDes, maturity, micCode, optionType, securityType, securityType2, stateCode, strike);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingJob {\n");
    sb.append("    contractSize: ").append(toIndentedString(contractSize)).append("\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    exchCode: ").append(toIndentedString(exchCode)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    idValue: ").append(toIndentedString(idValue)).append("\n");
    sb.append("    includeUnlistedEquities: ").append(toIndentedString(includeUnlistedEquities)).append("\n");
    sb.append("    marketSecDes: ").append(toIndentedString(marketSecDes)).append("\n");
    sb.append("    maturity: ").append(toIndentedString(maturity)).append("\n");
    sb.append("    micCode: ").append(toIndentedString(micCode)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    securityType2: ").append(toIndentedString(securityType2)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractSize");
    openapiFields.add("coupon");
    openapiFields.add("currency");
    openapiFields.add("exchCode");
    openapiFields.add("expiration");
    openapiFields.add("idType");
    openapiFields.add("idValue");
    openapiFields.add("includeUnlistedEquities");
    openapiFields.add("marketSecDes");
    openapiFields.add("maturity");
    openapiFields.add("micCode");
    openapiFields.add("optionType");
    openapiFields.add("securityType");
    openapiFields.add("securityType2");
    openapiFields.add("stateCode");
    openapiFields.add("strike");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idType");
    openapiRequiredFields.add("idValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingJob is not found in the empty JSON string", MappingJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MappingJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("contractSize") != null && !jsonObj.get("contractSize").isJsonNull() && !jsonObj.get("contractSize").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractSize` to be an array in the JSON string but got `%s`", jsonObj.get("contractSize").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("coupon") != null && !jsonObj.get("coupon").isJsonNull() && !jsonObj.get("coupon").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon` to be an array in the JSON string but got `%s`", jsonObj.get("coupon").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("exchCode") != null && !jsonObj.get("exchCode").isJsonNull()) && !jsonObj.get("exchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull() && !jsonObj.get("expiration").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be an array in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if (!jsonObj.get("idType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idType").toString()));
      }
      // validate the required field `idType`
      IdTypeEnum.validateJsonElement(jsonObj.get("idType"));
      // validate the required field `idValue`
      MappingJobIdValue.validateJsonElement(jsonObj.get("idValue"));
      if ((jsonObj.get("marketSecDes") != null && !jsonObj.get("marketSecDes").isJsonNull()) && !jsonObj.get("marketSecDes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketSecDes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketSecDes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("maturity") != null && !jsonObj.get("maturity").isJsonNull() && !jsonObj.get("maturity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maturity` to be an array in the JSON string but got `%s`", jsonObj.get("maturity").toString()));
      }
      if ((jsonObj.get("micCode") != null && !jsonObj.get("micCode").isJsonNull()) && !jsonObj.get("micCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `micCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("micCode").toString()));
      }
      if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull()) && !jsonObj.get("optionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionType").toString()));
      }
      // validate the optional field `optionType`
      if (jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull()) {
        OptionTypeEnum.validateJsonElement(jsonObj.get("optionType"));
      }
      if ((jsonObj.get("securityType") != null && !jsonObj.get("securityType").isJsonNull()) && !jsonObj.get("securityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType").toString()));
      }
      if ((jsonObj.get("securityType2") != null && !jsonObj.get("securityType2").isJsonNull()) && !jsonObj.get("securityType2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityType2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityType2").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      // validate the optional field `stateCode`
      if (jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) {
        StateCodeEnum.validateJsonElement(jsonObj.get("stateCode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("strike") != null && !jsonObj.get("strike").isJsonNull() && !jsonObj.get("strike").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `strike` to be an array in the JSON string but got `%s`", jsonObj.get("strike").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingJob.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingJob>() {
           @Override
           public void write(JsonWriter out, MappingJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingJob
   * @throws IOException if the JSON string is invalid with respect to MappingJob
   */
  public static MappingJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingJob.class);
  }

  /**
   * Convert an instance of MappingJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

