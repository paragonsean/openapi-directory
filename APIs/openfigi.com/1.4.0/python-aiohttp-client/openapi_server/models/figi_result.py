# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FigiResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composite_figi: str=None, exch_code: str=None, figi: str=None, market_sector: str=None, metadata: str=None, name: str=None, security_description: str=None, security_type: str=None, security_type2: str=None, share_class_figi: str=None, ticker: str=None):
        """FigiResult - a model defined in OpenAPI

        :param composite_figi: The composite_figi of this FigiResult.
        :param exch_code: The exch_code of this FigiResult.
        :param figi: The figi of this FigiResult.
        :param market_sector: The market_sector of this FigiResult.
        :param metadata: The metadata of this FigiResult.
        :param name: The name of this FigiResult.
        :param security_description: The security_description of this FigiResult.
        :param security_type: The security_type of this FigiResult.
        :param security_type2: The security_type2 of this FigiResult.
        :param share_class_figi: The share_class_figi of this FigiResult.
        :param ticker: The ticker of this FigiResult.
        """
        self.openapi_types = {
            'composite_figi': str,
            'exch_code': str,
            'figi': str,
            'market_sector': str,
            'metadata': str,
            'name': str,
            'security_description': str,
            'security_type': str,
            'security_type2': str,
            'share_class_figi': str,
            'ticker': str
        }

        self.attribute_map = {
            'composite_figi': 'compositeFIGI',
            'exch_code': 'exchCode',
            'figi': 'figi',
            'market_sector': 'marketSector',
            'metadata': 'metadata',
            'name': 'name',
            'security_description': 'securityDescription',
            'security_type': 'securityType',
            'security_type2': 'securityType2',
            'share_class_figi': 'shareClassFIGI',
            'ticker': 'ticker'
        }

        self._composite_figi = composite_figi
        self._exch_code = exch_code
        self._figi = figi
        self._market_sector = market_sector
        self._metadata = metadata
        self._name = name
        self._security_description = security_description
        self._security_type = security_type
        self._security_type2 = security_type2
        self._share_class_figi = share_class_figi
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FigiResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FigiResult of this FigiResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composite_figi(self):
        """Gets the composite_figi of this FigiResult.


        :return: The composite_figi of this FigiResult.
        :rtype: str
        """
        return self._composite_figi

    @composite_figi.setter
    def composite_figi(self, composite_figi):
        """Sets the composite_figi of this FigiResult.


        :param composite_figi: The composite_figi of this FigiResult.
        :type composite_figi: str
        """

        self._composite_figi = composite_figi

    @property
    def exch_code(self):
        """Gets the exch_code of this FigiResult.


        :return: The exch_code of this FigiResult.
        :rtype: str
        """
        return self._exch_code

    @exch_code.setter
    def exch_code(self, exch_code):
        """Sets the exch_code of this FigiResult.


        :param exch_code: The exch_code of this FigiResult.
        :type exch_code: str
        """

        self._exch_code = exch_code

    @property
    def figi(self):
        """Gets the figi of this FigiResult.


        :return: The figi of this FigiResult.
        :rtype: str
        """
        return self._figi

    @figi.setter
    def figi(self, figi):
        """Sets the figi of this FigiResult.


        :param figi: The figi of this FigiResult.
        :type figi: str
        """

        self._figi = figi

    @property
    def market_sector(self):
        """Gets the market_sector of this FigiResult.


        :return: The market_sector of this FigiResult.
        :rtype: str
        """
        return self._market_sector

    @market_sector.setter
    def market_sector(self, market_sector):
        """Sets the market_sector of this FigiResult.


        :param market_sector: The market_sector of this FigiResult.
        :type market_sector: str
        """

        self._market_sector = market_sector

    @property
    def metadata(self):
        """Gets the metadata of this FigiResult.

        Exists when API is unable to show non-FIGI fields.

        :return: The metadata of this FigiResult.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FigiResult.

        Exists when API is unable to show non-FIGI fields.

        :param metadata: The metadata of this FigiResult.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this FigiResult.


        :return: The name of this FigiResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FigiResult.


        :param name: The name of this FigiResult.
        :type name: str
        """

        self._name = name

    @property
    def security_description(self):
        """Gets the security_description of this FigiResult.


        :return: The security_description of this FigiResult.
        :rtype: str
        """
        return self._security_description

    @security_description.setter
    def security_description(self, security_description):
        """Sets the security_description of this FigiResult.


        :param security_description: The security_description of this FigiResult.
        :type security_description: str
        """

        self._security_description = security_description

    @property
    def security_type(self):
        """Gets the security_type of this FigiResult.


        :return: The security_type of this FigiResult.
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this FigiResult.


        :param security_type: The security_type of this FigiResult.
        :type security_type: str
        """

        self._security_type = security_type

    @property
    def security_type2(self):
        """Gets the security_type2 of this FigiResult.


        :return: The security_type2 of this FigiResult.
        :rtype: str
        """
        return self._security_type2

    @security_type2.setter
    def security_type2(self, security_type2):
        """Sets the security_type2 of this FigiResult.


        :param security_type2: The security_type2 of this FigiResult.
        :type security_type2: str
        """

        self._security_type2 = security_type2

    @property
    def share_class_figi(self):
        """Gets the share_class_figi of this FigiResult.


        :return: The share_class_figi of this FigiResult.
        :rtype: str
        """
        return self._share_class_figi

    @share_class_figi.setter
    def share_class_figi(self, share_class_figi):
        """Sets the share_class_figi of this FigiResult.


        :param share_class_figi: The share_class_figi of this FigiResult.
        :type share_class_figi: str
        """

        self._share_class_figi = share_class_figi

    @property
    def ticker(self):
        """Gets the ticker of this FigiResult.


        :return: The ticker of this FigiResult.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this FigiResult.


        :param ticker: The ticker of this FigiResult.
        :type ticker: str
        """

        self._ticker = ticker
