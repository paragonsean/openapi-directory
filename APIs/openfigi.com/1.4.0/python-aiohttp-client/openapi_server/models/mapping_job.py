# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mapping_job_id_value import MappingJobIdValue
from openapi_server import util


class MappingJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_size: List[float]=None, coupon: List[float]=None, currency: str=None, exch_code: str=None, expiration: List[date]=None, id_type: str=None, id_value: MappingJobIdValue=None, include_unlisted_equities: bool=None, market_sec_des: str=None, maturity: List[date]=None, mic_code: str=None, option_type: str=None, security_type: str=None, security_type2: str=None, state_code: str=None, strike: List[float]=None):
        """MappingJob - a model defined in OpenAPI

        :param contract_size: The contract_size of this MappingJob.
        :param coupon: The coupon of this MappingJob.
        :param currency: The currency of this MappingJob.
        :param exch_code: The exch_code of this MappingJob.
        :param expiration: The expiration of this MappingJob.
        :param id_type: The id_type of this MappingJob.
        :param id_value: The id_value of this MappingJob.
        :param include_unlisted_equities: The include_unlisted_equities of this MappingJob.
        :param market_sec_des: The market_sec_des of this MappingJob.
        :param maturity: The maturity of this MappingJob.
        :param mic_code: The mic_code of this MappingJob.
        :param option_type: The option_type of this MappingJob.
        :param security_type: The security_type of this MappingJob.
        :param security_type2: The security_type2 of this MappingJob.
        :param state_code: The state_code of this MappingJob.
        :param strike: The strike of this MappingJob.
        """
        self.openapi_types = {
            'contract_size': List[float],
            'coupon': List[float],
            'currency': str,
            'exch_code': str,
            'expiration': List[date],
            'id_type': str,
            'id_value': MappingJobIdValue,
            'include_unlisted_equities': bool,
            'market_sec_des': str,
            'maturity': List[date],
            'mic_code': str,
            'option_type': str,
            'security_type': str,
            'security_type2': str,
            'state_code': str,
            'strike': List[float]
        }

        self.attribute_map = {
            'contract_size': 'contractSize',
            'coupon': 'coupon',
            'currency': 'currency',
            'exch_code': 'exchCode',
            'expiration': 'expiration',
            'id_type': 'idType',
            'id_value': 'idValue',
            'include_unlisted_equities': 'includeUnlistedEquities',
            'market_sec_des': 'marketSecDes',
            'maturity': 'maturity',
            'mic_code': 'micCode',
            'option_type': 'optionType',
            'security_type': 'securityType',
            'security_type2': 'securityType2',
            'state_code': 'stateCode',
            'strike': 'strike'
        }

        self._contract_size = contract_size
        self._coupon = coupon
        self._currency = currency
        self._exch_code = exch_code
        self._expiration = expiration
        self._id_type = id_type
        self._id_value = id_value
        self._include_unlisted_equities = include_unlisted_equities
        self._market_sec_des = market_sec_des
        self._maturity = maturity
        self._mic_code = mic_code
        self._option_type = option_type
        self._security_type = security_type
        self._security_type2 = security_type2
        self._state_code = state_code
        self._strike = strike

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingJob of this MappingJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_size(self):
        """Gets the contract_size of this MappingJob.

        At least one entry should be non-null.

        :return: The contract_size of this MappingJob.
        :rtype: List[float]
        """
        return self._contract_size

    @contract_size.setter
    def contract_size(self, contract_size):
        """Sets the contract_size of this MappingJob.

        At least one entry should be non-null.

        :param contract_size: The contract_size of this MappingJob.
        :type contract_size: List[float]
        """
        if contract_size is not None and len(contract_size) > 2:
            raise ValueError("Invalid value for `contract_size`, number of items must be less than or equal to `2`")
        if contract_size is not None and len(contract_size) < 2:
            raise ValueError("Invalid value for `contract_size`, number of items must be greater than or equal to `2`")

        self._contract_size = contract_size

    @property
    def coupon(self):
        """Gets the coupon of this MappingJob.

        At least one entry should be non-null.

        :return: The coupon of this MappingJob.
        :rtype: List[float]
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this MappingJob.

        At least one entry should be non-null.

        :param coupon: The coupon of this MappingJob.
        :type coupon: List[float]
        """
        if coupon is not None and len(coupon) > 2:
            raise ValueError("Invalid value for `coupon`, number of items must be less than or equal to `2`")
        if coupon is not None and len(coupon) < 2:
            raise ValueError("Invalid value for `coupon`, number of items must be greater than or equal to `2`")

        self._coupon = coupon

    @property
    def currency(self):
        """Gets the currency of this MappingJob.


        :return: The currency of this MappingJob.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MappingJob.


        :param currency: The currency of this MappingJob.
        :type currency: str
        """

        self._currency = currency

    @property
    def exch_code(self):
        """Gets the exch_code of this MappingJob.


        :return: The exch_code of this MappingJob.
        :rtype: str
        """
        return self._exch_code

    @exch_code.setter
    def exch_code(self, exch_code):
        """Sets the exch_code of this MappingJob.


        :param exch_code: The exch_code of this MappingJob.
        :type exch_code: str
        """

        self._exch_code = exch_code

    @property
    def expiration(self):
        """Gets the expiration of this MappingJob.

        At least one entry should be non-null.

        :return: The expiration of this MappingJob.
        :rtype: List[date]
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this MappingJob.

        At least one entry should be non-null.

        :param expiration: The expiration of this MappingJob.
        :type expiration: List[date]
        """
        if expiration is not None and len(expiration) > 2:
            raise ValueError("Invalid value for `expiration`, number of items must be less than or equal to `2`")
        if expiration is not None and len(expiration) < 2:
            raise ValueError("Invalid value for `expiration`, number of items must be greater than or equal to `2`")

        self._expiration = expiration

    @property
    def id_type(self):
        """Gets the id_type of this MappingJob.


        :return: The id_type of this MappingJob.
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this MappingJob.


        :param id_type: The id_type of this MappingJob.
        :type id_type: str
        """
        allowed_values = ["ID_ISIN", "ID_BB_UNIQUE", "ID_SEDOL", "ID_COMMON", "ID_WERTPAPIER", "ID_CUSIP", "ID_BB", "ID_ITALY", "ID_EXCH_SYMBOL", "ID_FULL_EXCHANGE_SYMBOL", "COMPOSITE_ID_BB_GLOBAL", "ID_BB_GLOBAL_SHARE_CLASS_LEVEL", "ID_BB_SEC_NUM_DES", "ID_BB_GLOBAL", "TICKER", "ID_CUSIP_8_CHR", "OCC_SYMBOL", "UNIQUE_ID_FUT_OPT", "OPRA_SYMBOL", "TRADING_SYSTEM_IDENTIFIER", "ID_CINS", "ID_SHORT_CODE", "BASE_TICKER", "VENDOR_INDEX_CODE"]  # noqa: E501
        if id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `id_type` ({0}), must be one of {1}"
                .format(id_type, allowed_values)
            )

        self._id_type = id_type

    @property
    def id_value(self):
        """Gets the id_value of this MappingJob.


        :return: The id_value of this MappingJob.
        :rtype: MappingJobIdValue
        """
        return self._id_value

    @id_value.setter
    def id_value(self, id_value):
        """Sets the id_value of this MappingJob.


        :param id_value: The id_value of this MappingJob.
        :type id_value: MappingJobIdValue
        """
        if id_value is None:
            raise ValueError("Invalid value for `id_value`, must not be `None`")

        self._id_value = id_value

    @property
    def include_unlisted_equities(self):
        """Gets the include_unlisted_equities of this MappingJob.


        :return: The include_unlisted_equities of this MappingJob.
        :rtype: bool
        """
        return self._include_unlisted_equities

    @include_unlisted_equities.setter
    def include_unlisted_equities(self, include_unlisted_equities):
        """Sets the include_unlisted_equities of this MappingJob.


        :param include_unlisted_equities: The include_unlisted_equities of this MappingJob.
        :type include_unlisted_equities: bool
        """

        self._include_unlisted_equities = include_unlisted_equities

    @property
    def market_sec_des(self):
        """Gets the market_sec_des of this MappingJob.


        :return: The market_sec_des of this MappingJob.
        :rtype: str
        """
        return self._market_sec_des

    @market_sec_des.setter
    def market_sec_des(self, market_sec_des):
        """Sets the market_sec_des of this MappingJob.


        :param market_sec_des: The market_sec_des of this MappingJob.
        :type market_sec_des: str
        """

        self._market_sec_des = market_sec_des

    @property
    def maturity(self):
        """Gets the maturity of this MappingJob.

        At least one entry should be non-null.

        :return: The maturity of this MappingJob.
        :rtype: List[date]
        """
        return self._maturity

    @maturity.setter
    def maturity(self, maturity):
        """Sets the maturity of this MappingJob.

        At least one entry should be non-null.

        :param maturity: The maturity of this MappingJob.
        :type maturity: List[date]
        """
        if maturity is not None and len(maturity) > 2:
            raise ValueError("Invalid value for `maturity`, number of items must be less than or equal to `2`")
        if maturity is not None and len(maturity) < 2:
            raise ValueError("Invalid value for `maturity`, number of items must be greater than or equal to `2`")

        self._maturity = maturity

    @property
    def mic_code(self):
        """Gets the mic_code of this MappingJob.


        :return: The mic_code of this MappingJob.
        :rtype: str
        """
        return self._mic_code

    @mic_code.setter
    def mic_code(self, mic_code):
        """Sets the mic_code of this MappingJob.


        :param mic_code: The mic_code of this MappingJob.
        :type mic_code: str
        """

        self._mic_code = mic_code

    @property
    def option_type(self):
        """Gets the option_type of this MappingJob.


        :return: The option_type of this MappingJob.
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this MappingJob.


        :param option_type: The option_type of this MappingJob.
        :type option_type: str
        """
        allowed_values = [None,"Put", "Call"]  # noqa: E501
        if option_type not in allowed_values:
            raise ValueError(
                "Invalid value for `option_type` ({0}), must be one of {1}"
                .format(option_type, allowed_values)
            )

        self._option_type = option_type

    @property
    def security_type(self):
        """Gets the security_type of this MappingJob.


        :return: The security_type of this MappingJob.
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this MappingJob.


        :param security_type: The security_type of this MappingJob.
        :type security_type: str
        """

        self._security_type = security_type

    @property
    def security_type2(self):
        """Gets the security_type2 of this MappingJob.


        :return: The security_type2 of this MappingJob.
        :rtype: str
        """
        return self._security_type2

    @security_type2.setter
    def security_type2(self, security_type2):
        """Sets the security_type2 of this MappingJob.


        :param security_type2: The security_type2 of this MappingJob.
        :type security_type2: str
        """

        self._security_type2 = security_type2

    @property
    def state_code(self):
        """Gets the state_code of this MappingJob.


        :return: The state_code of this MappingJob.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this MappingJob.


        :param state_code: The state_code of this MappingJob.
        :type state_code: str
        """
        allowed_values = [None,"AB", "AC", "AC", "AH", "AK", "AL", "AM", "AR", "AS", "AT", "AZ", "BC", "BJ", "CA", "CB", "CO", "CQ", "CT", "CZ", "DC", "DE", "EH", "FH", "FI", "FJ", "FL", "FO", "FS", "GA", "GD", "GF", "GM", "GS", "GU", "GX", "GZ", "HA", "HB", "HE", "HG", "HI", "HI", "HL", "HN", "HO", "HS", "IA", "ID", "IG", "IK", "IL", "IN", "IT", "JL", "JS", "JX", "KA", "KC", "KN", "KO", "KS", "KT", "KU", "KY", "LA", "LN", "MA", "MB", "MD", "ME", "ME", "MG", "MI", "MN", "MO", "MS", "MT", "MZ", "NB", "NC", "ND", "NE", "NG", "NH", "NJ", "NL", "NM", "NM", "NN", "NR", "NS", "NS", "NS", "NT", "NU", "NV", "NW", "NX", "NY", "OH", "OK", "true", "true", "OR", "OS", "OT", "OT", "OY", "PA", "PE", "PR", "QC", "QH", "QL", "RI", "SA", "SA", "SC", "SC", "SD", "SD", "SH", "SI", "SK", "SN", "SN", "ST", "SX", "SZ", "TA", "TG", "TJ", "TK", "TN", "TS", "TT", "TT", "TX", "TY", "UT", "VA", "VI", "VI", "VT", "WA", "WA", "WI", "WK", "WV", "WY", "XJ", "XZ", "YA", "YN", "YN", "YT", "YU", "ZJ"]  # noqa: E501
        if state_code not in allowed_values:
            raise ValueError(
                "Invalid value for `state_code` ({0}), must be one of {1}"
                .format(state_code, allowed_values)
            )

        self._state_code = state_code

    @property
    def strike(self):
        """Gets the strike of this MappingJob.

        At least one entry should be non-null.

        :return: The strike of this MappingJob.
        :rtype: List[float]
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this MappingJob.

        At least one entry should be non-null.

        :param strike: The strike of this MappingJob.
        :type strike: List[float]
        """
        if strike is not None and len(strike) > 2:
            raise ValueError("Invalid value for `strike`, number of items must be less than or equal to `2`")
        if strike is not None and len(strike) < 2:
            raise ValueError("Invalid value for `strike`, number of items must be greater than or equal to `2`")

        self._strike = strike
