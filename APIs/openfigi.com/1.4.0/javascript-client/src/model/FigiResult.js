/**
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FigiResult model module.
 * @module model/FigiResult
 * @version 1.4.0
 */
class FigiResult {
    /**
     * Constructs a new <code>FigiResult</code>.
     * @alias module:model/FigiResult
     */
    constructor() { 
        
        FigiResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FigiResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FigiResult} obj Optional instance to populate.
     * @return {module:model/FigiResult} The populated <code>FigiResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FigiResult();

            if (data.hasOwnProperty('compositeFIGI')) {
                obj['compositeFIGI'] = ApiClient.convertToType(data['compositeFIGI'], 'String');
            }
            if (data.hasOwnProperty('exchCode')) {
                obj['exchCode'] = ApiClient.convertToType(data['exchCode'], 'String');
            }
            if (data.hasOwnProperty('figi')) {
                obj['figi'] = ApiClient.convertToType(data['figi'], 'String');
            }
            if (data.hasOwnProperty('marketSector')) {
                obj['marketSector'] = ApiClient.convertToType(data['marketSector'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('securityDescription')) {
                obj['securityDescription'] = ApiClient.convertToType(data['securityDescription'], 'String');
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = ApiClient.convertToType(data['securityType'], 'String');
            }
            if (data.hasOwnProperty('securityType2')) {
                obj['securityType2'] = ApiClient.convertToType(data['securityType2'], 'String');
            }
            if (data.hasOwnProperty('shareClassFIGI')) {
                obj['shareClassFIGI'] = ApiClient.convertToType(data['shareClassFIGI'], 'String');
            }
            if (data.hasOwnProperty('ticker')) {
                obj['ticker'] = ApiClient.convertToType(data['ticker'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FigiResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FigiResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['compositeFIGI'] && !(typeof data['compositeFIGI'] === 'string' || data['compositeFIGI'] instanceof String)) {
            throw new Error("Expected the field `compositeFIGI` to be a primitive type in the JSON string but got " + data['compositeFIGI']);
        }
        // ensure the json data is a string
        if (data['exchCode'] && !(typeof data['exchCode'] === 'string' || data['exchCode'] instanceof String)) {
            throw new Error("Expected the field `exchCode` to be a primitive type in the JSON string but got " + data['exchCode']);
        }
        // ensure the json data is a string
        if (data['figi'] && !(typeof data['figi'] === 'string' || data['figi'] instanceof String)) {
            throw new Error("Expected the field `figi` to be a primitive type in the JSON string but got " + data['figi']);
        }
        // ensure the json data is a string
        if (data['marketSector'] && !(typeof data['marketSector'] === 'string' || data['marketSector'] instanceof String)) {
            throw new Error("Expected the field `marketSector` to be a primitive type in the JSON string but got " + data['marketSector']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['securityDescription'] && !(typeof data['securityDescription'] === 'string' || data['securityDescription'] instanceof String)) {
            throw new Error("Expected the field `securityDescription` to be a primitive type in the JSON string but got " + data['securityDescription']);
        }
        // ensure the json data is a string
        if (data['securityType'] && !(typeof data['securityType'] === 'string' || data['securityType'] instanceof String)) {
            throw new Error("Expected the field `securityType` to be a primitive type in the JSON string but got " + data['securityType']);
        }
        // ensure the json data is a string
        if (data['securityType2'] && !(typeof data['securityType2'] === 'string' || data['securityType2'] instanceof String)) {
            throw new Error("Expected the field `securityType2` to be a primitive type in the JSON string but got " + data['securityType2']);
        }
        // ensure the json data is a string
        if (data['shareClassFIGI'] && !(typeof data['shareClassFIGI'] === 'string' || data['shareClassFIGI'] instanceof String)) {
            throw new Error("Expected the field `shareClassFIGI` to be a primitive type in the JSON string but got " + data['shareClassFIGI']);
        }
        // ensure the json data is a string
        if (data['ticker'] && !(typeof data['ticker'] === 'string' || data['ticker'] instanceof String)) {
            throw new Error("Expected the field `ticker` to be a primitive type in the JSON string but got " + data['ticker']);
        }

        return true;
    }


}



/**
 * @member {String} compositeFIGI
 */
FigiResult.prototype['compositeFIGI'] = undefined;

/**
 * @member {String} exchCode
 */
FigiResult.prototype['exchCode'] = undefined;

/**
 * @member {String} figi
 */
FigiResult.prototype['figi'] = undefined;

/**
 * @member {String} marketSector
 */
FigiResult.prototype['marketSector'] = undefined;

/**
 * Exists when API is unable to show non-FIGI fields.
 * @member {String} metadata
 */
FigiResult.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
FigiResult.prototype['name'] = undefined;

/**
 * @member {String} securityDescription
 */
FigiResult.prototype['securityDescription'] = undefined;

/**
 * @member {String} securityType
 */
FigiResult.prototype['securityType'] = undefined;

/**
 * @member {String} securityType2
 */
FigiResult.prototype['securityType2'] = undefined;

/**
 * @member {String} shareClassFIGI
 */
FigiResult.prototype['shareClassFIGI'] = undefined;

/**
 * @member {String} ticker
 */
FigiResult.prototype['ticker'] = undefined;






export default FigiResult;

