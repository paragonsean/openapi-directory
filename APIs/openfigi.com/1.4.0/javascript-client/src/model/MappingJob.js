/**
 * OpenFIGI API
 * A free & open API for FIGI discovery.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: support@openfigi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MappingJobIdValue from './MappingJobIdValue';

/**
 * The MappingJob model module.
 * @module model/MappingJob
 * @version 1.4.0
 */
class MappingJob {
    /**
     * Constructs a new <code>MappingJob</code>.
     * For V3: securityType2 is required when idType is BASE_TICKER or ID_EXCH_SYMBOL.  expiration is required when securityType2 is Option or Warrant.  maturity is required when securityType2 is Pool.
     * @alias module:model/MappingJob
     * @param idType {module:model/MappingJob.IdTypeEnum} 
     * @param idValue {module:model/MappingJobIdValue} 
     */
    constructor(idType, idValue) { 
        
        MappingJob.initialize(this, idType, idValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idType, idValue) { 
        obj['idType'] = idType;
        obj['idValue'] = idValue;
    }

    /**
     * Constructs a <code>MappingJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingJob} obj Optional instance to populate.
     * @return {module:model/MappingJob} The populated <code>MappingJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingJob();

            if (data.hasOwnProperty('contractSize')) {
                obj['contractSize'] = ApiClient.convertToType(data['contractSize'], ['Number']);
            }
            if (data.hasOwnProperty('coupon')) {
                obj['coupon'] = ApiClient.convertToType(data['coupon'], ['Number']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('exchCode')) {
                obj['exchCode'] = ApiClient.convertToType(data['exchCode'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], ['Date']);
            }
            if (data.hasOwnProperty('idType')) {
                obj['idType'] = ApiClient.convertToType(data['idType'], 'String');
            }
            if (data.hasOwnProperty('idValue')) {
                obj['idValue'] = MappingJobIdValue.constructFromObject(data['idValue']);
            }
            if (data.hasOwnProperty('includeUnlistedEquities')) {
                obj['includeUnlistedEquities'] = ApiClient.convertToType(data['includeUnlistedEquities'], 'Boolean');
            }
            if (data.hasOwnProperty('marketSecDes')) {
                obj['marketSecDes'] = ApiClient.convertToType(data['marketSecDes'], 'String');
            }
            if (data.hasOwnProperty('maturity')) {
                obj['maturity'] = ApiClient.convertToType(data['maturity'], ['Date']);
            }
            if (data.hasOwnProperty('micCode')) {
                obj['micCode'] = ApiClient.convertToType(data['micCode'], 'String');
            }
            if (data.hasOwnProperty('optionType')) {
                obj['optionType'] = ApiClient.convertToType(data['optionType'], 'String');
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = ApiClient.convertToType(data['securityType'], 'String');
            }
            if (data.hasOwnProperty('securityType2')) {
                obj['securityType2'] = ApiClient.convertToType(data['securityType2'], 'String');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
            if (data.hasOwnProperty('strike')) {
                obj['strike'] = ApiClient.convertToType(data['strike'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingJob</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MappingJob.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contractSize'])) {
            throw new Error("Expected the field `contractSize` to be an array in the JSON data but got " + data['contractSize']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coupon'])) {
            throw new Error("Expected the field `coupon` to be an array in the JSON data but got " + data['coupon']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['exchCode'] && !(typeof data['exchCode'] === 'string' || data['exchCode'] instanceof String)) {
            throw new Error("Expected the field `exchCode` to be a primitive type in the JSON string but got " + data['exchCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expiration'])) {
            throw new Error("Expected the field `expiration` to be an array in the JSON data but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['idType'] && !(typeof data['idType'] === 'string' || data['idType'] instanceof String)) {
            throw new Error("Expected the field `idType` to be a primitive type in the JSON string but got " + data['idType']);
        }
        // validate the optional field `idValue`
        if (data['idValue']) { // data not null
          MappingJobIdValue.validateJSON(data['idValue']);
        }
        // ensure the json data is a string
        if (data['marketSecDes'] && !(typeof data['marketSecDes'] === 'string' || data['marketSecDes'] instanceof String)) {
            throw new Error("Expected the field `marketSecDes` to be a primitive type in the JSON string but got " + data['marketSecDes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['maturity'])) {
            throw new Error("Expected the field `maturity` to be an array in the JSON data but got " + data['maturity']);
        }
        // ensure the json data is a string
        if (data['micCode'] && !(typeof data['micCode'] === 'string' || data['micCode'] instanceof String)) {
            throw new Error("Expected the field `micCode` to be a primitive type in the JSON string but got " + data['micCode']);
        }
        // ensure the json data is a string
        if (data['optionType'] && !(typeof data['optionType'] === 'string' || data['optionType'] instanceof String)) {
            throw new Error("Expected the field `optionType` to be a primitive type in the JSON string but got " + data['optionType']);
        }
        // ensure the json data is a string
        if (data['securityType'] && !(typeof data['securityType'] === 'string' || data['securityType'] instanceof String)) {
            throw new Error("Expected the field `securityType` to be a primitive type in the JSON string but got " + data['securityType']);
        }
        // ensure the json data is a string
        if (data['securityType2'] && !(typeof data['securityType2'] === 'string' || data['securityType2'] instanceof String)) {
            throw new Error("Expected the field `securityType2` to be a primitive type in the JSON string but got " + data['securityType2']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['strike'])) {
            throw new Error("Expected the field `strike` to be an array in the JSON data but got " + data['strike']);
        }

        return true;
    }


}

MappingJob.RequiredProperties = ["idType", "idValue"];

/**
 * At least one entry should be non-null.
 * @member {Array.<Number>} contractSize
 */
MappingJob.prototype['contractSize'] = undefined;

/**
 * At least one entry should be non-null.
 * @member {Array.<Number>} coupon
 */
MappingJob.prototype['coupon'] = undefined;

/**
 * @member {String} currency
 */
MappingJob.prototype['currency'] = undefined;

/**
 * @member {String} exchCode
 */
MappingJob.prototype['exchCode'] = undefined;

/**
 * At least one entry should be non-null.
 * @member {Array.<Date>} expiration
 */
MappingJob.prototype['expiration'] = undefined;

/**
 * @member {module:model/MappingJob.IdTypeEnum} idType
 */
MappingJob.prototype['idType'] = undefined;

/**
 * @member {module:model/MappingJobIdValue} idValue
 */
MappingJob.prototype['idValue'] = undefined;

/**
 * @member {Boolean} includeUnlistedEquities
 */
MappingJob.prototype['includeUnlistedEquities'] = undefined;

/**
 * @member {String} marketSecDes
 */
MappingJob.prototype['marketSecDes'] = undefined;

/**
 * At least one entry should be non-null.
 * @member {Array.<Date>} maturity
 */
MappingJob.prototype['maturity'] = undefined;

/**
 * @member {String} micCode
 */
MappingJob.prototype['micCode'] = undefined;

/**
 * @member {module:model/MappingJob.OptionTypeEnum} optionType
 */
MappingJob.prototype['optionType'] = undefined;

/**
 * @member {String} securityType
 */
MappingJob.prototype['securityType'] = undefined;

/**
 * @member {String} securityType2
 */
MappingJob.prototype['securityType2'] = undefined;

/**
 * @member {module:model/MappingJob.StateCodeEnum} stateCode
 */
MappingJob.prototype['stateCode'] = undefined;

/**
 * At least one entry should be non-null.
 * @member {Array.<Number>} strike
 */
MappingJob.prototype['strike'] = undefined;





/**
 * Allowed values for the <code>idType</code> property.
 * @enum {String}
 * @readonly
 */
MappingJob['IdTypeEnum'] = {

    /**
     * value: "ID_ISIN"
     * @const
     */
    "ID_ISIN": "ID_ISIN",

    /**
     * value: "ID_BB_UNIQUE"
     * @const
     */
    "ID_BB_UNIQUE": "ID_BB_UNIQUE",

    /**
     * value: "ID_SEDOL"
     * @const
     */
    "ID_SEDOL": "ID_SEDOL",

    /**
     * value: "ID_COMMON"
     * @const
     */
    "ID_COMMON": "ID_COMMON",

    /**
     * value: "ID_WERTPAPIER"
     * @const
     */
    "ID_WERTPAPIER": "ID_WERTPAPIER",

    /**
     * value: "ID_CUSIP"
     * @const
     */
    "ID_CUSIP": "ID_CUSIP",

    /**
     * value: "ID_BB"
     * @const
     */
    "ID_BB": "ID_BB",

    /**
     * value: "ID_ITALY"
     * @const
     */
    "ID_ITALY": "ID_ITALY",

    /**
     * value: "ID_EXCH_SYMBOL"
     * @const
     */
    "ID_EXCH_SYMBOL": "ID_EXCH_SYMBOL",

    /**
     * value: "ID_FULL_EXCHANGE_SYMBOL"
     * @const
     */
    "ID_FULL_EXCHANGE_SYMBOL": "ID_FULL_EXCHANGE_SYMBOL",

    /**
     * value: "COMPOSITE_ID_BB_GLOBAL"
     * @const
     */
    "COMPOSITE_ID_BB_GLOBAL": "COMPOSITE_ID_BB_GLOBAL",

    /**
     * value: "ID_BB_GLOBAL_SHARE_CLASS_LEVEL"
     * @const
     */
    "ID_BB_GLOBAL_SHARE_CLASS_LEVEL": "ID_BB_GLOBAL_SHARE_CLASS_LEVEL",

    /**
     * value: "ID_BB_SEC_NUM_DES"
     * @const
     */
    "ID_BB_SEC_NUM_DES": "ID_BB_SEC_NUM_DES",

    /**
     * value: "ID_BB_GLOBAL"
     * @const
     */
    "ID_BB_GLOBAL": "ID_BB_GLOBAL",

    /**
     * value: "TICKER"
     * @const
     */
    "TICKER": "TICKER",

    /**
     * value: "ID_CUSIP_8_CHR"
     * @const
     */
    "ID_CUSIP_8_CHR": "ID_CUSIP_8_CHR",

    /**
     * value: "OCC_SYMBOL"
     * @const
     */
    "OCC_SYMBOL": "OCC_SYMBOL",

    /**
     * value: "UNIQUE_ID_FUT_OPT"
     * @const
     */
    "UNIQUE_ID_FUT_OPT": "UNIQUE_ID_FUT_OPT",

    /**
     * value: "OPRA_SYMBOL"
     * @const
     */
    "OPRA_SYMBOL": "OPRA_SYMBOL",

    /**
     * value: "TRADING_SYSTEM_IDENTIFIER"
     * @const
     */
    "TRADING_SYSTEM_IDENTIFIER": "TRADING_SYSTEM_IDENTIFIER",

    /**
     * value: "ID_CINS"
     * @const
     */
    "ID_CINS": "ID_CINS",

    /**
     * value: "ID_SHORT_CODE"
     * @const
     */
    "ID_SHORT_CODE": "ID_SHORT_CODE",

    /**
     * value: "BASE_TICKER"
     * @const
     */
    "BASE_TICKER": "BASE_TICKER",

    /**
     * value: "VENDOR_INDEX_CODE"
     * @const
     */
    "VENDOR_INDEX_CODE": "VENDOR_INDEX_CODE"
};


/**
 * Allowed values for the <code>optionType</code> property.
 * @enum {String}
 * @readonly
 */
MappingJob['OptionTypeEnum'] = {

    /**
     * value: "Put"
     * @const
     */
    "Put": "Put",

    /**
     * value: "Call"
     * @const
     */
    "Call": "Call"
};


/**
 * Allowed values for the <code>stateCode</code> property.
 * @enum {String}
 * @readonly
 */
MappingJob['StateCodeEnum'] = {

    /**
     * value: "AB"
     * @const
     */
    "AB": "AB",

    /**
     * value: "AC"
     * @const
     */
    "AC": "AC",

    /**
     * value: "AC"
     * @const
     */
    "AC2": "AC",

    /**
     * value: "AH"
     * @const
     */
    "AH": "AH",

    /**
     * value: "AK"
     * @const
     */
    "AK": "AK",

    /**
     * value: "AL"
     * @const
     */
    "AL": "AL",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "AR"
     * @const
     */
    "AR": "AR",

    /**
     * value: "AS"
     * @const
     */
    "AS": "AS",

    /**
     * value: "AT"
     * @const
     */
    "AT": "AT",

    /**
     * value: "AZ"
     * @const
     */
    "AZ": "AZ",

    /**
     * value: "BC"
     * @const
     */
    "BC": "BC",

    /**
     * value: "BJ"
     * @const
     */
    "BJ": "BJ",

    /**
     * value: "CA"
     * @const
     */
    "CA": "CA",

    /**
     * value: "CB"
     * @const
     */
    "CB": "CB",

    /**
     * value: "CO"
     * @const
     */
    "CO": "CO",

    /**
     * value: "CQ"
     * @const
     */
    "CQ": "CQ",

    /**
     * value: "CT"
     * @const
     */
    "CT": "CT",

    /**
     * value: "CZ"
     * @const
     */
    "CZ": "CZ",

    /**
     * value: "DC"
     * @const
     */
    "DC": "DC",

    /**
     * value: "DE"
     * @const
     */
    "DE": "DE",

    /**
     * value: "EH"
     * @const
     */
    "EH": "EH",

    /**
     * value: "FH"
     * @const
     */
    "FH": "FH",

    /**
     * value: "FI"
     * @const
     */
    "FI": "FI",

    /**
     * value: "FJ"
     * @const
     */
    "FJ": "FJ",

    /**
     * value: "FL"
     * @const
     */
    "FL": "FL",

    /**
     * value: "FO"
     * @const
     */
    "FO": "FO",

    /**
     * value: "FS"
     * @const
     */
    "FS": "FS",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "GD"
     * @const
     */
    "GD": "GD",

    /**
     * value: "GF"
     * @const
     */
    "GF": "GF",

    /**
     * value: "GM"
     * @const
     */
    "GM": "GM",

    /**
     * value: "GS"
     * @const
     */
    "GS": "GS",

    /**
     * value: "GU"
     * @const
     */
    "GU": "GU",

    /**
     * value: "GX"
     * @const
     */
    "GX": "GX",

    /**
     * value: "GZ"
     * @const
     */
    "GZ": "GZ",

    /**
     * value: "HA"
     * @const
     */
    "HA": "HA",

    /**
     * value: "HB"
     * @const
     */
    "HB": "HB",

    /**
     * value: "HE"
     * @const
     */
    "HE": "HE",

    /**
     * value: "HG"
     * @const
     */
    "HG": "HG",

    /**
     * value: "HI"
     * @const
     */
    "HI": "HI",

    /**
     * value: "HI"
     * @const
     */
    "HI2": "HI",

    /**
     * value: "HL"
     * @const
     */
    "HL": "HL",

    /**
     * value: "HN"
     * @const
     */
    "HN": "HN",

    /**
     * value: "HO"
     * @const
     */
    "HO": "HO",

    /**
     * value: "HS"
     * @const
     */
    "HS": "HS",

    /**
     * value: "IA"
     * @const
     */
    "IA": "IA",

    /**
     * value: "ID"
     * @const
     */
    "ID": "ID",

    /**
     * value: "IG"
     * @const
     */
    "IG": "IG",

    /**
     * value: "IK"
     * @const
     */
    "IK": "IK",

    /**
     * value: "IL"
     * @const
     */
    "IL": "IL",

    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",

    /**
     * value: "IT"
     * @const
     */
    "IT": "IT",

    /**
     * value: "JL"
     * @const
     */
    "JL": "JL",

    /**
     * value: "JS"
     * @const
     */
    "JS": "JS",

    /**
     * value: "JX"
     * @const
     */
    "JX": "JX",

    /**
     * value: "KA"
     * @const
     */
    "KA": "KA",

    /**
     * value: "KC"
     * @const
     */
    "KC": "KC",

    /**
     * value: "KN"
     * @const
     */
    "KN": "KN",

    /**
     * value: "KO"
     * @const
     */
    "KO": "KO",

    /**
     * value: "KS"
     * @const
     */
    "KS": "KS",

    /**
     * value: "KT"
     * @const
     */
    "KT": "KT",

    /**
     * value: "KU"
     * @const
     */
    "KU": "KU",

    /**
     * value: "KY"
     * @const
     */
    "KY": "KY",

    /**
     * value: "LA"
     * @const
     */
    "LA": "LA",

    /**
     * value: "LN"
     * @const
     */
    "LN": "LN",

    /**
     * value: "MA"
     * @const
     */
    "MA": "MA",

    /**
     * value: "MB"
     * @const
     */
    "MB": "MB",

    /**
     * value: "MD"
     * @const
     */
    "MD": "MD",

    /**
     * value: "ME"
     * @const
     */
    "ME": "ME",

    /**
     * value: "ME"
     * @const
     */
    "ME2": "ME",

    /**
     * value: "MG"
     * @const
     */
    "MG": "MG",

    /**
     * value: "MI"
     * @const
     */
    "MI": "MI",

    /**
     * value: "MN"
     * @const
     */
    "MN": "MN",

    /**
     * value: "MO"
     * @const
     */
    "MO": "MO",

    /**
     * value: "MS"
     * @const
     */
    "MS": "MS",

    /**
     * value: "MT"
     * @const
     */
    "MT": "MT",

    /**
     * value: "MZ"
     * @const
     */
    "MZ": "MZ",

    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",

    /**
     * value: "NC"
     * @const
     */
    "NC": "NC",

    /**
     * value: "ND"
     * @const
     */
    "ND": "ND",

    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",

    /**
     * value: "NG"
     * @const
     */
    "NG": "NG",

    /**
     * value: "NH"
     * @const
     */
    "NH": "NH",

    /**
     * value: "NJ"
     * @const
     */
    "NJ": "NJ",

    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",

    /**
     * value: "NM"
     * @const
     */
    "NM": "NM",

    /**
     * value: "NM"
     * @const
     */
    "NM2": "NM",

    /**
     * value: "NN"
     * @const
     */
    "NN": "NN",

    /**
     * value: "NR"
     * @const
     */
    "NR": "NR",

    /**
     * value: "NS"
     * @const
     */
    "NS": "NS",

    /**
     * value: "NS"
     * @const
     */
    "NS2": "NS",

    /**
     * value: "NS"
     * @const
     */
    "NS3": "NS",

    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",

    /**
     * value: "NU"
     * @const
     */
    "NU": "NU",

    /**
     * value: "NV"
     * @const
     */
    "NV": "NV",

    /**
     * value: "NW"
     * @const
     */
    "NW": "NW",

    /**
     * value: "NX"
     * @const
     */
    "NX": "NX",

    /**
     * value: "NY"
     * @const
     */
    "NY": "NY",

    /**
     * value: "OH"
     * @const
     */
    "OH": "OH",

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "true"
     * @const
     */
    "true2": "true",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",

    /**
     * value: "OS"
     * @const
     */
    "OS": "OS",

    /**
     * value: "OT"
     * @const
     */
    "OT": "OT",

    /**
     * value: "OT"
     * @const
     */
    "OT2": "OT",

    /**
     * value: "OY"
     * @const
     */
    "OY": "OY",

    /**
     * value: "PA"
     * @const
     */
    "PA": "PA",

    /**
     * value: "PE"
     * @const
     */
    "PE": "PE",

    /**
     * value: "PR"
     * @const
     */
    "PR": "PR",

    /**
     * value: "QC"
     * @const
     */
    "QC": "QC",

    /**
     * value: "QH"
     * @const
     */
    "QH": "QH",

    /**
     * value: "QL"
     * @const
     */
    "QL": "QL",

    /**
     * value: "RI"
     * @const
     */
    "RI": "RI",

    /**
     * value: "SA"
     * @const
     */
    "SA": "SA",

    /**
     * value: "SA"
     * @const
     */
    "SA2": "SA",

    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",

    /**
     * value: "SC"
     * @const
     */
    "SC2": "SC",

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "SD"
     * @const
     */
    "SD2": "SD",

    /**
     * value: "SH"
     * @const
     */
    "SH": "SH",

    /**
     * value: "SI"
     * @const
     */
    "SI": "SI",

    /**
     * value: "SK"
     * @const
     */
    "SK": "SK",

    /**
     * value: "SN"
     * @const
     */
    "SN": "SN",

    /**
     * value: "SN"
     * @const
     */
    "SN2": "SN",

    /**
     * value: "ST"
     * @const
     */
    "ST": "ST",

    /**
     * value: "SX"
     * @const
     */
    "SX": "SX",

    /**
     * value: "SZ"
     * @const
     */
    "SZ": "SZ",

    /**
     * value: "TA"
     * @const
     */
    "TA": "TA",

    /**
     * value: "TG"
     * @const
     */
    "TG": "TG",

    /**
     * value: "TJ"
     * @const
     */
    "TJ": "TJ",

    /**
     * value: "TK"
     * @const
     */
    "TK": "TK",

    /**
     * value: "TN"
     * @const
     */
    "TN": "TN",

    /**
     * value: "TS"
     * @const
     */
    "TS": "TS",

    /**
     * value: "TT"
     * @const
     */
    "TT": "TT",

    /**
     * value: "TT"
     * @const
     */
    "TT2": "TT",

    /**
     * value: "TX"
     * @const
     */
    "TX": "TX",

    /**
     * value: "TY"
     * @const
     */
    "TY": "TY",

    /**
     * value: "UT"
     * @const
     */
    "UT": "UT",

    /**
     * value: "VA"
     * @const
     */
    "VA": "VA",

    /**
     * value: "VI"
     * @const
     */
    "VI": "VI",

    /**
     * value: "VI"
     * @const
     */
    "VI2": "VI",

    /**
     * value: "VT"
     * @const
     */
    "VT": "VT",

    /**
     * value: "WA"
     * @const
     */
    "WA": "WA",

    /**
     * value: "WA"
     * @const
     */
    "WA2": "WA",

    /**
     * value: "WI"
     * @const
     */
    "WI": "WI",

    /**
     * value: "WK"
     * @const
     */
    "WK": "WK",

    /**
     * value: "WV"
     * @const
     */
    "WV": "WV",

    /**
     * value: "WY"
     * @const
     */
    "WY": "WY",

    /**
     * value: "XJ"
     * @const
     */
    "XJ": "XJ",

    /**
     * value: "XZ"
     * @const
     */
    "XZ": "XZ",

    /**
     * value: "YA"
     * @const
     */
    "YA": "YA",

    /**
     * value: "YN"
     * @const
     */
    "YN": "YN",

    /**
     * value: "YN"
     * @const
     */
    "YN2": "YN",

    /**
     * value: "YT"
     * @const
     */
    "YT": "YT",

    /**
     * value: "YU"
     * @const
     */
    "YU": "YU",

    /**
     * value: "ZJ"
     * @const
     */
    "ZJ": "ZJ"
};



export default MappingJob;

