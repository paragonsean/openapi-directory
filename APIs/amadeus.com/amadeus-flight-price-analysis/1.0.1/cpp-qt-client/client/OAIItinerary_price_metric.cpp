/**
 * Flight Price Analysis API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItinerary_price_metric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItinerary_price_metric::OAIItinerary_price_metric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItinerary_price_metric::OAIItinerary_price_metric() {
    this->initializeModel();
}

OAIItinerary_price_metric::~OAIItinerary_price_metric() {}

void OAIItinerary_price_metric::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_price_metrics_isSet = false;
    m_price_metrics_isValid = false;

    m_transport_type_isSet = false;
    m_transport_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIItinerary_price_metric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItinerary_price_metric::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departureDate")]);
    m_departure_date_isSet = !json[QString("departureDate")].isNull() && m_departure_date_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("oneWay")]);
    m_one_way_isSet = !json[QString("oneWay")].isNull() && m_one_way_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_price_metrics_isValid = ::OpenAPI::fromJsonValue(m_price_metrics, json[QString("priceMetrics")]);
    m_price_metrics_isSet = !json[QString("priceMetrics")].isNull() && m_price_metrics_isValid;

    m_transport_type_isValid = ::OpenAPI::fromJsonValue(m_transport_type, json[QString("transportType")]);
    m_transport_type_isSet = !json[QString("transportType")].isNull() && m_transport_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIItinerary_price_metric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItinerary_price_metric::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_departure_date_isSet) {
        obj.insert(QString("departureDate"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("oneWay"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_price_metrics.size() > 0) {
        obj.insert(QString("priceMetrics"), ::OpenAPI::toJsonValue(m_price_metrics));
    }
    if (m_transport_type_isSet) {
        obj.insert(QString("transportType"), ::OpenAPI::toJsonValue(m_transport_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIItinerary_price_metric::getCurrencyCode() const {
    return m_currency_code;
}
void OAIItinerary_price_metric::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIItinerary_price_metric::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIItinerary_price_metric::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIItinerary_price_metric::getDepartureDate() const {
    return m_departure_date;
}
void OAIItinerary_price_metric::setDepartureDate(const QString &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIItinerary_price_metric::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIItinerary_price_metric::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

OAILocation OAIItinerary_price_metric::getDestination() const {
    return m_destination;
}
void OAIItinerary_price_metric::setDestination(const OAILocation &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIItinerary_price_metric::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIItinerary_price_metric::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIItinerary_price_metric::isOneWay() const {
    return m_one_way;
}
void OAIItinerary_price_metric::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAIItinerary_price_metric::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAIItinerary_price_metric::is_one_way_Valid() const{
    return m_one_way_isValid;
}

OAILocation OAIItinerary_price_metric::getOrigin() const {
    return m_origin;
}
void OAIItinerary_price_metric::setOrigin(const OAILocation &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIItinerary_price_metric::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIItinerary_price_metric::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<OAIItinerary_price_metric_priceMetrics_inner> OAIItinerary_price_metric::getPriceMetrics() const {
    return m_price_metrics;
}
void OAIItinerary_price_metric::setPriceMetrics(const QList<OAIItinerary_price_metric_priceMetrics_inner> &price_metrics) {
    m_price_metrics = price_metrics;
    m_price_metrics_isSet = true;
}

bool OAIItinerary_price_metric::is_price_metrics_Set() const{
    return m_price_metrics_isSet;
}

bool OAIItinerary_price_metric::is_price_metrics_Valid() const{
    return m_price_metrics_isValid;
}

QString OAIItinerary_price_metric::getTransportType() const {
    return m_transport_type;
}
void OAIItinerary_price_metric::setTransportType(const QString &transport_type) {
    m_transport_type = transport_type;
    m_transport_type_isSet = true;
}

bool OAIItinerary_price_metric::is_transport_type_Set() const{
    return m_transport_type_isSet;
}

bool OAIItinerary_price_metric::is_transport_type_Valid() const{
    return m_transport_type_isValid;
}

QString OAIItinerary_price_metric::getType() const {
    return m_type;
}
void OAIItinerary_price_metric::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItinerary_price_metric::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItinerary_price_metric::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIItinerary_price_metric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItinerary_price_metric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
