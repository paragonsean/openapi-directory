# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItineraryPriceMetricPriceMetricsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, quartile_ranking: str=None):
        """ItineraryPriceMetricPriceMetricsInner - a model defined in OpenAPI

        :param amount: The amount of this ItineraryPriceMetricPriceMetricsInner.
        :param quartile_ranking: The quartile_ranking of this ItineraryPriceMetricPriceMetricsInner.
        """
        self.openapi_types = {
            'amount': str,
            'quartile_ranking': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'quartile_ranking': 'quartileRanking'
        }

        self._amount = amount
        self._quartile_ranking = quartile_ranking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItineraryPriceMetricPriceMetricsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The itinerary_price_metric_priceMetrics_inner of this ItineraryPriceMetricPriceMetricsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ItineraryPriceMetricPriceMetricsInner.

        Defines the monetary value with decimal position. It can be in cash or miles.

        :return: The amount of this ItineraryPriceMetricPriceMetricsInner.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ItineraryPriceMetricPriceMetricsInner.

        Defines the monetary value with decimal position. It can be in cash or miles.

        :param amount: The amount of this ItineraryPriceMetricPriceMetricsInner.
        :type amount: str
        """

        self._amount = amount

    @property
    def quartile_ranking(self):
        """Gets the quartile_ranking of this ItineraryPriceMetricPriceMetricsInner.


        :return: The quartile_ranking of this ItineraryPriceMetricPriceMetricsInner.
        :rtype: str
        """
        return self._quartile_ranking

    @quartile_ranking.setter
    def quartile_ranking(self, quartile_ranking):
        """Sets the quartile_ranking of this ItineraryPriceMetricPriceMetricsInner.


        :param quartile_ranking: The quartile_ranking of this ItineraryPriceMetricPriceMetricsInner.
        :type quartile_ranking: str
        """
        allowed_values = ["MINIMUM", "FIRST", "MEDIUM", "THIRD", "MAXIMUM"]  # noqa: E501
        if quartile_ranking not in allowed_values:
            raise ValueError(
                "Invalid value for `quartile_ranking` ({0}), must be one of {1}"
                .format(quartile_ranking, allowed_values)
            )

        self._quartile_ranking = quartile_ranking
