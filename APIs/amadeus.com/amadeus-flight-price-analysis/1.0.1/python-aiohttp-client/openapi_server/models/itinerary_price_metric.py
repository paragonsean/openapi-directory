# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.itinerary_price_metric_price_metrics_inner import ItineraryPriceMetricPriceMetricsInner
from openapi_server.models.location import Location
from openapi_server import util


class ItineraryPriceMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, departure_date: str=None, destination: Location=None, one_way: bool=None, origin: Location=None, price_metrics: List[ItineraryPriceMetricPriceMetricsInner]=None, transport_type: str=None, type: str=None):
        """ItineraryPriceMetric - a model defined in OpenAPI

        :param currency_code: The currency_code of this ItineraryPriceMetric.
        :param departure_date: The departure_date of this ItineraryPriceMetric.
        :param destination: The destination of this ItineraryPriceMetric.
        :param one_way: The one_way of this ItineraryPriceMetric.
        :param origin: The origin of this ItineraryPriceMetric.
        :param price_metrics: The price_metrics of this ItineraryPriceMetric.
        :param transport_type: The transport_type of this ItineraryPriceMetric.
        :param type: The type of this ItineraryPriceMetric.
        """
        self.openapi_types = {
            'currency_code': str,
            'departure_date': str,
            'destination': Location,
            'one_way': bool,
            'origin': Location,
            'price_metrics': List[ItineraryPriceMetricPriceMetricsInner],
            'transport_type': str,
            'type': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'departure_date': 'departureDate',
            'destination': 'destination',
            'one_way': 'oneWay',
            'origin': 'origin',
            'price_metrics': 'priceMetrics',
            'transport_type': 'transportType',
            'type': 'type'
        }

        self._currency_code = currency_code
        self._departure_date = departure_date
        self._destination = destination
        self._one_way = one_way
        self._origin = origin
        self._price_metrics = price_metrics
        self._transport_type = transport_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItineraryPriceMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The itinerary-price-metric of this ItineraryPriceMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this ItineraryPriceMetric.

        currency of the prices.  Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro

        :return: The currency_code of this ItineraryPriceMetric.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ItineraryPriceMetric.

        currency of the prices.  Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro

        :param currency_code: The currency_code of this ItineraryPriceMetric.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def departure_date(self):
        """Gets the departure_date of this ItineraryPriceMetric.

        The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.

        :return: The departure_date of this ItineraryPriceMetric.
        :rtype: str
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this ItineraryPriceMetric.

        The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.

        :param departure_date: The departure_date of this ItineraryPriceMetric.
        :type departure_date: str
        """

        self._departure_date = departure_date

    @property
    def destination(self):
        """Gets the destination of this ItineraryPriceMetric.


        :return: The destination of this ItineraryPriceMetric.
        :rtype: Location
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ItineraryPriceMetric.


        :param destination: The destination of this ItineraryPriceMetric.
        :type destination: Location
        """

        self._destination = destination

    @property
    def one_way(self):
        """Gets the one_way of this ItineraryPriceMetric.

        true for a one way trip, false for a round trip

        :return: The one_way of this ItineraryPriceMetric.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this ItineraryPriceMetric.

        true for a one way trip, false for a round trip

        :param one_way: The one_way of this ItineraryPriceMetric.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def origin(self):
        """Gets the origin of this ItineraryPriceMetric.


        :return: The origin of this ItineraryPriceMetric.
        :rtype: Location
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ItineraryPriceMetric.


        :param origin: The origin of this ItineraryPriceMetric.
        :type origin: Location
        """

        self._origin = origin

    @property
    def price_metrics(self):
        """Gets the price_metrics of this ItineraryPriceMetric.


        :return: The price_metrics of this ItineraryPriceMetric.
        :rtype: List[ItineraryPriceMetricPriceMetricsInner]
        """
        return self._price_metrics

    @price_metrics.setter
    def price_metrics(self, price_metrics):
        """Sets the price_metrics of this ItineraryPriceMetric.


        :param price_metrics: The price_metrics of this ItineraryPriceMetric.
        :type price_metrics: List[ItineraryPriceMetricPriceMetricsInner]
        """

        self._price_metrics = price_metrics

    @property
    def transport_type(self):
        """Gets the transport_type of this ItineraryPriceMetric.

        transportation type

        :return: The transport_type of this ItineraryPriceMetric.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this ItineraryPriceMetric.

        transportation type

        :param transport_type: The transport_type of this ItineraryPriceMetric.
        :type transport_type: str
        """
        allowed_values = ["FLIGHT"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type

    @property
    def type(self):
        """Gets the type of this ItineraryPriceMetric.

        ressource type - always price-metrics

        :return: The type of this ItineraryPriceMetric.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItineraryPriceMetric.

        ressource type - always price-metrics

        :param type: The type of this ItineraryPriceMetric.
        :type type: str
        """

        self._type = type
