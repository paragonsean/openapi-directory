/*
 * Flight Price Analysis API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItineraryPriceMetricPriceMetricsInner;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * price metric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:26.048316-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItineraryPriceMetric {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departureDate";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private String departureDate;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Location destination;

  public static final String SERIALIZED_NAME_ONE_WAY = "oneWay";
  @SerializedName(SERIALIZED_NAME_ONE_WAY)
  private Boolean oneWay;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private Location origin;

  public static final String SERIALIZED_NAME_PRICE_METRICS = "priceMetrics";
  @SerializedName(SERIALIZED_NAME_PRICE_METRICS)
  private List<ItineraryPriceMetricPriceMetricsInner> priceMetrics = new ArrayList<>();

  /**
   * transportation type
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    FLIGHT("FLIGHT");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ItineraryPriceMetric() {
  }

  public ItineraryPriceMetric currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * currency of the prices.  Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ItineraryPriceMetric departureDate(String departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
   * @return departureDate
   */
  @javax.annotation.Nullable
  public String getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(String departureDate) {
    this.departureDate = departureDate;
  }


  public ItineraryPriceMetric destination(Location destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public Location getDestination() {
    return destination;
  }

  public void setDestination(Location destination) {
    this.destination = destination;
  }


  public ItineraryPriceMetric oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

  /**
   * true for a one way trip, false for a round trip
   * @return oneWay
   */
  @javax.annotation.Nullable
  public Boolean getOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }


  public ItineraryPriceMetric origin(Location origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public Location getOrigin() {
    return origin;
  }

  public void setOrigin(Location origin) {
    this.origin = origin;
  }


  public ItineraryPriceMetric priceMetrics(List<ItineraryPriceMetricPriceMetricsInner> priceMetrics) {
    this.priceMetrics = priceMetrics;
    return this;
  }

  public ItineraryPriceMetric addPriceMetricsItem(ItineraryPriceMetricPriceMetricsInner priceMetricsItem) {
    if (this.priceMetrics == null) {
      this.priceMetrics = new ArrayList<>();
    }
    this.priceMetrics.add(priceMetricsItem);
    return this;
  }

  /**
   * Get priceMetrics
   * @return priceMetrics
   */
  @javax.annotation.Nullable
  public List<ItineraryPriceMetricPriceMetricsInner> getPriceMetrics() {
    return priceMetrics;
  }

  public void setPriceMetrics(List<ItineraryPriceMetricPriceMetricsInner> priceMetrics) {
    this.priceMetrics = priceMetrics;
  }


  public ItineraryPriceMetric transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

  /**
   * transportation type
   * @return transportType
   */
  @javax.annotation.Nullable
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }


  public ItineraryPriceMetric type(String type) {
    this.type = type;
    return this;
  }

  /**
   * ressource type - always price-metrics
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItineraryPriceMetric itineraryPriceMetric = (ItineraryPriceMetric) o;
    return Objects.equals(this.currencyCode, itineraryPriceMetric.currencyCode) &&
        Objects.equals(this.departureDate, itineraryPriceMetric.departureDate) &&
        Objects.equals(this.destination, itineraryPriceMetric.destination) &&
        Objects.equals(this.oneWay, itineraryPriceMetric.oneWay) &&
        Objects.equals(this.origin, itineraryPriceMetric.origin) &&
        Objects.equals(this.priceMetrics, itineraryPriceMetric.priceMetrics) &&
        Objects.equals(this.transportType, itineraryPriceMetric.transportType) &&
        Objects.equals(this.type, itineraryPriceMetric.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, departureDate, destination, oneWay, origin, priceMetrics, transportType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItineraryPriceMetric {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    priceMetrics: ").append(toIndentedString(priceMetrics)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("departureDate");
    openapiFields.add("destination");
    openapiFields.add("oneWay");
    openapiFields.add("origin");
    openapiFields.add("priceMetrics");
    openapiFields.add("transportType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItineraryPriceMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItineraryPriceMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItineraryPriceMetric is not found in the empty JSON string", ItineraryPriceMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItineraryPriceMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItineraryPriceMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("departureDate") != null && !jsonObj.get("departureDate").isJsonNull()) && !jsonObj.get("departureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departureDate").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("destination"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("origin"));
      }
      if (jsonObj.get("priceMetrics") != null && !jsonObj.get("priceMetrics").isJsonNull()) {
        JsonArray jsonArraypriceMetrics = jsonObj.getAsJsonArray("priceMetrics");
        if (jsonArraypriceMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("priceMetrics").toString()));
          }

          // validate the optional field `priceMetrics` (array)
          for (int i = 0; i < jsonArraypriceMetrics.size(); i++) {
            ItineraryPriceMetricPriceMetricsInner.validateJsonElement(jsonArraypriceMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) && !jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      // validate the optional field `transportType`
      if (jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) {
        TransportTypeEnum.validateJsonElement(jsonObj.get("transportType"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItineraryPriceMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItineraryPriceMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItineraryPriceMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItineraryPriceMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<ItineraryPriceMetric>() {
           @Override
           public void write(JsonWriter out, ItineraryPriceMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItineraryPriceMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItineraryPriceMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItineraryPriceMetric
   * @throws IOException if the JSON string is invalid with respect to ItineraryPriceMetric
   */
  public static ItineraryPriceMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItineraryPriceMetric.class);
  }

  /**
   * Convert an instance of ItineraryPriceMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

