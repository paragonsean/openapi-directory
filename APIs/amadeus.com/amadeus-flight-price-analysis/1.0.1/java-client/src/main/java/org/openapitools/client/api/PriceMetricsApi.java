/*
 * Flight Price Analysis API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.GetItineraryPriceMetrics200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PriceMetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PriceMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PriceMetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getItineraryPriceMetrics
     * @param originIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), from which the traveler will depart  (required)
     * @param destinationIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), to which the traveler is going. (required)
     * @param departureDate The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format. (required)
     * @param currencyCode the preferred currency for display. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional, default to EUR)
     * @param oneWay true to get price metrics for a one way trip, false to get price metrics for a round trip (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION                             32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItineraryPriceMetricsCall(String originIataCode, String destinationIataCode, String departureDate, String currencyCode, Boolean oneWay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/itinerary-price-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originIataCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originIataCode", originIataCode));
        }

        if (destinationIataCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationIataCode", destinationIataCode));
        }

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureDate", departureDate));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        if (oneWay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oneWay", oneWay));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItineraryPriceMetricsValidateBeforeCall(String originIataCode, String destinationIataCode, String departureDate, String currencyCode, Boolean oneWay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originIataCode' is set
        if (originIataCode == null) {
            throw new ApiException("Missing the required parameter 'originIataCode' when calling getItineraryPriceMetrics(Async)");
        }

        // verify the required parameter 'destinationIataCode' is set
        if (destinationIataCode == null) {
            throw new ApiException("Missing the required parameter 'destinationIataCode' when calling getItineraryPriceMetrics(Async)");
        }

        // verify the required parameter 'departureDate' is set
        if (departureDate == null) {
            throw new ApiException("Missing the required parameter 'departureDate' when calling getItineraryPriceMetrics(Async)");
        }

        return getItineraryPriceMetricsCall(originIataCode, destinationIataCode, departureDate, currencyCode, oneWay, _callback);

    }

    /**
     * GET itinerary price metric
     * 
     * @param originIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), from which the traveler will depart  (required)
     * @param destinationIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), to which the traveler is going. (required)
     * @param departureDate The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format. (required)
     * @param currencyCode the preferred currency for display. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional, default to EUR)
     * @param oneWay true to get price metrics for a one way trip, false to get price metrics for a round trip (optional, default to false)
     * @return GetItineraryPriceMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION                             32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetItineraryPriceMetrics200Response getItineraryPriceMetrics(String originIataCode, String destinationIataCode, String departureDate, String currencyCode, Boolean oneWay) throws ApiException {
        ApiResponse<GetItineraryPriceMetrics200Response> localVarResp = getItineraryPriceMetricsWithHttpInfo(originIataCode, destinationIataCode, departureDate, currencyCode, oneWay);
        return localVarResp.getData();
    }

    /**
     * GET itinerary price metric
     * 
     * @param originIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), from which the traveler will depart  (required)
     * @param destinationIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), to which the traveler is going. (required)
     * @param departureDate The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format. (required)
     * @param currencyCode the preferred currency for display. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional, default to EUR)
     * @param oneWay true to get price metrics for a one way trip, false to get price metrics for a round trip (optional, default to false)
     * @return ApiResponse&lt;GetItineraryPriceMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION                             32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetItineraryPriceMetrics200Response> getItineraryPriceMetricsWithHttpInfo(String originIataCode, String destinationIataCode, String departureDate, String currencyCode, Boolean oneWay) throws ApiException {
        okhttp3.Call localVarCall = getItineraryPriceMetricsValidateBeforeCall(originIataCode, destinationIataCode, departureDate, currencyCode, oneWay, null);
        Type localVarReturnType = new TypeToken<GetItineraryPriceMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET itinerary price metric (asynchronously)
     * 
     * @param originIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), from which the traveler will depart  (required)
     * @param destinationIataCode airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), to which the traveler is going. (required)
     * @param departureDate The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format. (required)
     * @param currencyCode the preferred currency for display. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional, default to EUR)
     * @param oneWay true to get price metrics for a one way trip, false to get price metrics for a round trip (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION                             32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItineraryPriceMetricsAsync(String originIataCode, String destinationIataCode, String departureDate, String currencyCode, Boolean oneWay, final ApiCallback<GetItineraryPriceMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItineraryPriceMetricsValidateBeforeCall(originIataCode, destinationIataCode, departureDate, currencyCode, oneWay, _callback);
        Type localVarReturnType = new TypeToken<GetItineraryPriceMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
