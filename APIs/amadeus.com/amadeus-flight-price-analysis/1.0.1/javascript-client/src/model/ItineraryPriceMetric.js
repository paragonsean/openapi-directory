/**
 * Flight Price Analysis API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItineraryPriceMetricPriceMetricsInner from './ItineraryPriceMetricPriceMetricsInner';
import Location from './Location';

/**
 * The ItineraryPriceMetric model module.
 * @module model/ItineraryPriceMetric
 * @version 1.0.1
 */
class ItineraryPriceMetric {
    /**
     * Constructs a new <code>ItineraryPriceMetric</code>.
     * price metric
     * @alias module:model/ItineraryPriceMetric
     */
    constructor() { 
        
        ItineraryPriceMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItineraryPriceMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItineraryPriceMetric} obj Optional instance to populate.
     * @return {module:model/ItineraryPriceMetric} The populated <code>ItineraryPriceMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItineraryPriceMetric();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('departureDate')) {
                obj['departureDate'] = ApiClient.convertToType(data['departureDate'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = Location.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('oneWay')) {
                obj['oneWay'] = ApiClient.convertToType(data['oneWay'], 'Boolean');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = Location.constructFromObject(data['origin']);
            }
            if (data.hasOwnProperty('priceMetrics')) {
                obj['priceMetrics'] = ApiClient.convertToType(data['priceMetrics'], [ItineraryPriceMetricPriceMetricsInner]);
            }
            if (data.hasOwnProperty('transportType')) {
                obj['transportType'] = ApiClient.convertToType(data['transportType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItineraryPriceMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItineraryPriceMetric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['departureDate'] && !(typeof data['departureDate'] === 'string' || data['departureDate'] instanceof String)) {
            throw new Error("Expected the field `departureDate` to be a primitive type in the JSON string but got " + data['departureDate']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          Location.validateJSON(data['destination']);
        }
        // validate the optional field `origin`
        if (data['origin']) { // data not null
          Location.validateJSON(data['origin']);
        }
        if (data['priceMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['priceMetrics'])) {
                throw new Error("Expected the field `priceMetrics` to be an array in the JSON data but got " + data['priceMetrics']);
            }
            // validate the optional field `priceMetrics` (array)
            for (const item of data['priceMetrics']) {
                ItineraryPriceMetricPriceMetricsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['transportType'] && !(typeof data['transportType'] === 'string' || data['transportType'] instanceof String)) {
            throw new Error("Expected the field `transportType` to be a primitive type in the JSON string but got " + data['transportType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * currency of the prices.  Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
 * @member {String} currencyCode
 */
ItineraryPriceMetric.prototype['currencyCode'] = undefined;

/**
 * The date on which the traveler will depart from the origin to go to the destination.   Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
 * @member {String} departureDate
 */
ItineraryPriceMetric.prototype['departureDate'] = undefined;

/**
 * @member {module:model/Location} destination
 */
ItineraryPriceMetric.prototype['destination'] = undefined;

/**
 * true for a one way trip, false for a round trip
 * @member {Boolean} oneWay
 */
ItineraryPriceMetric.prototype['oneWay'] = undefined;

/**
 * @member {module:model/Location} origin
 */
ItineraryPriceMetric.prototype['origin'] = undefined;

/**
 * @member {Array.<module:model/ItineraryPriceMetricPriceMetricsInner>} priceMetrics
 */
ItineraryPriceMetric.prototype['priceMetrics'] = undefined;

/**
 * transportation type
 * @member {module:model/ItineraryPriceMetric.TransportTypeEnum} transportType
 */
ItineraryPriceMetric.prototype['transportType'] = undefined;

/**
 * ressource type - always price-metrics
 * @member {String} type
 */
ItineraryPriceMetric.prototype['type'] = undefined;





/**
 * Allowed values for the <code>transportType</code> property.
 * @enum {String}
 * @readonly
 */
ItineraryPriceMetric['TransportTypeEnum'] = {

    /**
     * value: "FLIGHT"
     * @const
     */
    "FLIGHT": "FLIGHT"
};



export default ItineraryPriceMetric;

