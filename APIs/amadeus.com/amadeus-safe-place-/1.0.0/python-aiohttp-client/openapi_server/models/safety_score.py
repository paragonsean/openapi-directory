# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SafetyScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lgbtq: int=None, medical: int=None, overall: int=None, physical_harm: int=None, political_freedom: int=None, theft: int=None, women: int=None):
        """SafetyScore - a model defined in OpenAPI

        :param lgbtq: The lgbtq of this SafetyScore.
        :param medical: The medical of this SafetyScore.
        :param overall: The overall of this SafetyScore.
        :param physical_harm: The physical_harm of this SafetyScore.
        :param political_freedom: The political_freedom of this SafetyScore.
        :param theft: The theft of this SafetyScore.
        :param women: The women of this SafetyScore.
        """
        self.openapi_types = {
            'lgbtq': int,
            'medical': int,
            'overall': int,
            'physical_harm': int,
            'political_freedom': int,
            'theft': int,
            'women': int
        }

        self.attribute_map = {
            'lgbtq': 'lgbtq',
            'medical': 'medical',
            'overall': 'overall',
            'physical_harm': 'physicalHarm',
            'political_freedom': 'politicalFreedom',
            'theft': 'theft',
            'women': 'women'
        }

        self._lgbtq = lgbtq
        self._medical = medical
        self._overall = overall
        self._physical_harm = physical_harm
        self._political_freedom = political_freedom
        self._theft = theft
        self._women = women

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SafetyScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SafetyScore of this SafetyScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lgbtq(self):
        """Gets the lgbtq of this SafetyScore.

        Likelihood of harm or discrimination against LGBTQ persons or groups and level of caution required at location. Score go from 1 (not likely) to 100 (very likely).

        :return: The lgbtq of this SafetyScore.
        :rtype: int
        """
        return self._lgbtq

    @lgbtq.setter
    def lgbtq(self, lgbtq):
        """Sets the lgbtq of this SafetyScore.

        Likelihood of harm or discrimination against LGBTQ persons or groups and level of caution required at location. Score go from 1 (not likely) to 100 (very likely).

        :param lgbtq: The lgbtq of this SafetyScore.
        :type lgbtq: int
        """

        self._lgbtq = lgbtq

    @property
    def medical(self):
        """Gets the medical of this SafetyScore.

        Likelihood of illness or disease, assessment of water and air quality, and access to reliable medical care. Score go from 1 (not likely) to 100 (very likely).

        :return: The medical of this SafetyScore.
        :rtype: int
        """
        return self._medical

    @medical.setter
    def medical(self, medical):
        """Sets the medical of this SafetyScore.

        Likelihood of illness or disease, assessment of water and air quality, and access to reliable medical care. Score go from 1 (not likely) to 100 (very likely).

        :param medical: The medical of this SafetyScore.
        :type medical: int
        """

        self._medical = medical

    @property
    def overall(self):
        """Gets the overall of this SafetyScore.

        An average of the 6 “sub”-categories. Score go from 1 (very safe) to 100 (very dangerous).

        :return: The overall of this SafetyScore.
        :rtype: int
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this SafetyScore.

        An average of the 6 “sub”-categories. Score go from 1 (very safe) to 100 (very dangerous).

        :param overall: The overall of this SafetyScore.
        :type overall: int
        """

        self._overall = overall

    @property
    def physical_harm(self):
        """Gets the physical_harm of this SafetyScore.

        Likelihood of injury due to harmful intent. Score go from 1 (not likely) to 100 (very likely).

        :return: The physical_harm of this SafetyScore.
        :rtype: int
        """
        return self._physical_harm

    @physical_harm.setter
    def physical_harm(self, physical_harm):
        """Sets the physical_harm of this SafetyScore.

        Likelihood of injury due to harmful intent. Score go from 1 (not likely) to 100 (very likely).

        :param physical_harm: The physical_harm of this SafetyScore.
        :type physical_harm: int
        """

        self._physical_harm = physical_harm

    @property
    def political_freedom(self):
        """Gets the political_freedom of this SafetyScore.

        Potential for infringement of political rights or political unrest. Score go from 1 (not likely) to 100 (very likely).

        :return: The political_freedom of this SafetyScore.
        :rtype: int
        """
        return self._political_freedom

    @political_freedom.setter
    def political_freedom(self, political_freedom):
        """Sets the political_freedom of this SafetyScore.

        Potential for infringement of political rights or political unrest. Score go from 1 (not likely) to 100 (very likely).

        :param political_freedom: The political_freedom of this SafetyScore.
        :type political_freedom: int
        """

        self._political_freedom = political_freedom

    @property
    def theft(self):
        """Gets the theft of this SafetyScore.

        Likelihood of theft. Score go from 1 (not likely) to 100 (very likely).

        :return: The theft of this SafetyScore.
        :rtype: int
        """
        return self._theft

    @theft.setter
    def theft(self, theft):
        """Sets the theft of this SafetyScore.

        Likelihood of theft. Score go from 1 (not likely) to 100 (very likely).

        :param theft: The theft of this SafetyScore.
        :type theft: int
        """

        self._theft = theft

    @property
    def women(self):
        """Gets the women of this SafetyScore.

        Likelihood of inappropriate behavior against females. Score go from 1 (not likely) to 100 (very likely).

        :return: The women of this SafetyScore.
        :rtype: int
        """
        return self._women

    @women.setter
    def women(self, women):
        """Sets the women of this SafetyScore.

        Likelihood of inappropriate behavior against females. Score go from 1 (not likely) to 100 (very likely).

        :param women: The women of this SafetyScore.
        :type women: int
        """

        self._women = women
