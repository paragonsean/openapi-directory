/**
 * Safe Place
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISafetyScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISafetyScore::OAISafetyScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISafetyScore::OAISafetyScore() {
    this->initializeModel();
}

OAISafetyScore::~OAISafetyScore() {}

void OAISafetyScore::initializeModel() {

    m_lgbtq_isSet = false;
    m_lgbtq_isValid = false;

    m_medical_isSet = false;
    m_medical_isValid = false;

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_physical_harm_isSet = false;
    m_physical_harm_isValid = false;

    m_political_freedom_isSet = false;
    m_political_freedom_isValid = false;

    m_theft_isSet = false;
    m_theft_isValid = false;

    m_women_isSet = false;
    m_women_isValid = false;
}

void OAISafetyScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISafetyScore::fromJsonObject(QJsonObject json) {

    m_lgbtq_isValid = ::OpenAPI::fromJsonValue(m_lgbtq, json[QString("lgbtq")]);
    m_lgbtq_isSet = !json[QString("lgbtq")].isNull() && m_lgbtq_isValid;

    m_medical_isValid = ::OpenAPI::fromJsonValue(m_medical, json[QString("medical")]);
    m_medical_isSet = !json[QString("medical")].isNull() && m_medical_isValid;

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_physical_harm_isValid = ::OpenAPI::fromJsonValue(m_physical_harm, json[QString("physicalHarm")]);
    m_physical_harm_isSet = !json[QString("physicalHarm")].isNull() && m_physical_harm_isValid;

    m_political_freedom_isValid = ::OpenAPI::fromJsonValue(m_political_freedom, json[QString("politicalFreedom")]);
    m_political_freedom_isSet = !json[QString("politicalFreedom")].isNull() && m_political_freedom_isValid;

    m_theft_isValid = ::OpenAPI::fromJsonValue(m_theft, json[QString("theft")]);
    m_theft_isSet = !json[QString("theft")].isNull() && m_theft_isValid;

    m_women_isValid = ::OpenAPI::fromJsonValue(m_women, json[QString("women")]);
    m_women_isSet = !json[QString("women")].isNull() && m_women_isValid;
}

QString OAISafetyScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISafetyScore::asJsonObject() const {
    QJsonObject obj;
    if (m_lgbtq_isSet) {
        obj.insert(QString("lgbtq"), ::OpenAPI::toJsonValue(m_lgbtq));
    }
    if (m_medical_isSet) {
        obj.insert(QString("medical"), ::OpenAPI::toJsonValue(m_medical));
    }
    if (m_overall_isSet) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_physical_harm_isSet) {
        obj.insert(QString("physicalHarm"), ::OpenAPI::toJsonValue(m_physical_harm));
    }
    if (m_political_freedom_isSet) {
        obj.insert(QString("politicalFreedom"), ::OpenAPI::toJsonValue(m_political_freedom));
    }
    if (m_theft_isSet) {
        obj.insert(QString("theft"), ::OpenAPI::toJsonValue(m_theft));
    }
    if (m_women_isSet) {
        obj.insert(QString("women"), ::OpenAPI::toJsonValue(m_women));
    }
    return obj;
}

qint32 OAISafetyScore::getLgbtq() const {
    return m_lgbtq;
}
void OAISafetyScore::setLgbtq(const qint32 &lgbtq) {
    m_lgbtq = lgbtq;
    m_lgbtq_isSet = true;
}

bool OAISafetyScore::is_lgbtq_Set() const{
    return m_lgbtq_isSet;
}

bool OAISafetyScore::is_lgbtq_Valid() const{
    return m_lgbtq_isValid;
}

qint32 OAISafetyScore::getMedical() const {
    return m_medical;
}
void OAISafetyScore::setMedical(const qint32 &medical) {
    m_medical = medical;
    m_medical_isSet = true;
}

bool OAISafetyScore::is_medical_Set() const{
    return m_medical_isSet;
}

bool OAISafetyScore::is_medical_Valid() const{
    return m_medical_isValid;
}

qint32 OAISafetyScore::getOverall() const {
    return m_overall;
}
void OAISafetyScore::setOverall(const qint32 &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAISafetyScore::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAISafetyScore::is_overall_Valid() const{
    return m_overall_isValid;
}

qint32 OAISafetyScore::getPhysicalHarm() const {
    return m_physical_harm;
}
void OAISafetyScore::setPhysicalHarm(const qint32 &physical_harm) {
    m_physical_harm = physical_harm;
    m_physical_harm_isSet = true;
}

bool OAISafetyScore::is_physical_harm_Set() const{
    return m_physical_harm_isSet;
}

bool OAISafetyScore::is_physical_harm_Valid() const{
    return m_physical_harm_isValid;
}

qint32 OAISafetyScore::getPoliticalFreedom() const {
    return m_political_freedom;
}
void OAISafetyScore::setPoliticalFreedom(const qint32 &political_freedom) {
    m_political_freedom = political_freedom;
    m_political_freedom_isSet = true;
}

bool OAISafetyScore::is_political_freedom_Set() const{
    return m_political_freedom_isSet;
}

bool OAISafetyScore::is_political_freedom_Valid() const{
    return m_political_freedom_isValid;
}

qint32 OAISafetyScore::getTheft() const {
    return m_theft;
}
void OAISafetyScore::setTheft(const qint32 &theft) {
    m_theft = theft;
    m_theft_isSet = true;
}

bool OAISafetyScore::is_theft_Set() const{
    return m_theft_isSet;
}

bool OAISafetyScore::is_theft_Valid() const{
    return m_theft_isValid;
}

qint32 OAISafetyScore::getWomen() const {
    return m_women;
}
void OAISafetyScore::setWomen(const qint32 &women) {
    m_women = women;
    m_women_isSet = true;
}

bool OAISafetyScore::is_women_Set() const{
    return m_women_isSet;
}

bool OAISafetyScore::is_women_Valid() const{
    return m_women_isValid;
}

bool OAISafetyScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lgbtq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_harm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_political_freedom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_women_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISafetyScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
