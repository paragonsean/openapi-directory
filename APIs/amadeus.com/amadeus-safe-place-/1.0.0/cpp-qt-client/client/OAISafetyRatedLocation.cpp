/**
 * Safe Place
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISafetyRatedLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISafetyRatedLocation::OAISafetyRatedLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISafetyRatedLocation::OAISafetyRatedLocation() {
    this->initializeModel();
}

OAISafetyRatedLocation::~OAISafetyRatedLocation() {}

void OAISafetyRatedLocation::initializeModel() {

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_safety_score_isSet = false;
    m_safety_score_isValid = false;
}

void OAISafetyRatedLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISafetyRatedLocation::fromJsonObject(QJsonObject json) {

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_safety_score_isValid = ::OpenAPI::fromJsonValue(m_safety_score, json[QString("safetyScore")]);
    m_safety_score_isSet = !json[QString("safetyScore")].isNull() && m_safety_score_isValid;
}

QString OAISafetyRatedLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISafetyRatedLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_safety_score.isSet()) {
        obj.insert(QString("safetyScore"), ::OpenAPI::toJsonValue(m_safety_score));
    }
    return obj;
}

OAIGeoCode OAISafetyRatedLocation::getGeoCode() const {
    return m_geo_code;
}
void OAISafetyRatedLocation::setGeoCode(const OAIGeoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAISafetyRatedLocation::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAISafetyRatedLocation::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

QString OAISafetyRatedLocation::getId() const {
    return m_id;
}
void OAISafetyRatedLocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISafetyRatedLocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAISafetyRatedLocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISafetyRatedLocation::getName() const {
    return m_name;
}
void OAISafetyRatedLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISafetyRatedLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAISafetyRatedLocation::is_name_Valid() const{
    return m_name_isValid;
}

OAILinks OAISafetyRatedLocation::getSelf() const {
    return m_self;
}
void OAISafetyRatedLocation::setSelf(const OAILinks &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISafetyRatedLocation::is_self_Set() const{
    return m_self_isSet;
}

bool OAISafetyRatedLocation::is_self_Valid() const{
    return m_self_isValid;
}

QString OAISafetyRatedLocation::getSubType() const {
    return m_sub_type;
}
void OAISafetyRatedLocation::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAISafetyRatedLocation::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAISafetyRatedLocation::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAISafetyRatedLocation::getType() const {
    return m_type;
}
void OAISafetyRatedLocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISafetyRatedLocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAISafetyRatedLocation::is_type_Valid() const{
    return m_type_isValid;
}

OAISafetyScore OAISafetyRatedLocation::getSafetyScore() const {
    return m_safety_score;
}
void OAISafetyRatedLocation::setSafetyScore(const OAISafetyScore &safety_score) {
    m_safety_score = safety_score;
    m_safety_score_isSet = true;
}

bool OAISafetyRatedLocation::is_safety_score_Set() const{
    return m_safety_score_isSet;
}

bool OAISafetyRatedLocation::is_safety_score_Valid() const{
    return m_safety_score_isValid;
}

bool OAISafetyRatedLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_score.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISafetyRatedLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
