/**
 * Safe Place
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error500 from '../model/Error500';
import Success from '../model/Success';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSafetyRankBySquare operation.
     * @callback module:api/SearchApi~getSafetyRankBySquareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the safety rating of a given area
     * @param {Number} north Latitude north of bounding box (decimal coordinates)
     * @param {Number} west Longitude west of bounding box (decimal coordinates)
     * @param {Number} south Latitude south of bounding box (decimal coordinates)
     * @param {Number} east Longitude east of bounding box (decimal coordinates)
     * @param {Object} opts Optional parameters
     * @param {Number} [pageLimit = 10)] maximum items in one page
     * @param {Number} [pageOffset = 0)] start index of the requested page
     * @param {module:api/SearchApi~getSafetyRankBySquareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    getSafetyRankBySquare(north, west, south, east, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'north' is set
      if (north === undefined || north === null) {
        throw new Error("Missing the required parameter 'north' when calling getSafetyRankBySquare");
      }
      // verify the required parameter 'west' is set
      if (west === undefined || west === null) {
        throw new Error("Missing the required parameter 'west' when calling getSafetyRankBySquare");
      }
      // verify the required parameter 'south' is set
      if (south === undefined || south === null) {
        throw new Error("Missing the required parameter 'south' when calling getSafetyRankBySquare");
      }
      // verify the required parameter 'east' is set
      if (east === undefined || east === null) {
        throw new Error("Missing the required parameter 'east' when calling getSafetyRankBySquare");
      }

      let pathParams = {
      };
      let queryParams = {
        'north': north,
        'west': west,
        'south': south,
        'east': east,
        'page[limit]': opts['pageLimit'],
        'page[offset]': opts['pageOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/safety/safety-rated-locations/by-square', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSafetyRanking operation.
     * @callback module:api/SearchApi~getSafetyRankingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns safety rating for a given location and radius.
     * @param {Number} latitude Latitude (decimal coordinates)
     * @param {Number} longitude Longitude (decimal coordinates)
     * @param {Object} opts Optional parameters
     * @param {Number} [radius = 1)] radius of the search in Kilometer. Can be from 0 to 20, default value is 1 Km.
     * @param {Number} [pageLimit = 10)] maximum items in one page
     * @param {Number} [pageOffset = 0)] start index of the requested page
     * @param {module:api/SearchApi~getSafetyRankingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    getSafetyRanking(latitude, longitude, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling getSafetyRanking");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling getSafetyRanking");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude,
        'radius': opts['radius'],
        'page[limit]': opts['pageLimit'],
        'page[offset]': opts['pageOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/safety/safety-rated-locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
