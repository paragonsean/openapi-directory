/**
 * Safe Place
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SafetyScore model module.
 * @module model/SafetyScore
 * @version 1.0.0
 */
class SafetyScore {
    /**
     * Constructs a new <code>SafetyScore</code>.
     * @alias module:model/SafetyScore
     */
    constructor() { 
        
        SafetyScore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SafetyScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SafetyScore} obj Optional instance to populate.
     * @return {module:model/SafetyScore} The populated <code>SafetyScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SafetyScore();

            if (data.hasOwnProperty('lgbtq')) {
                obj['lgbtq'] = ApiClient.convertToType(data['lgbtq'], 'Number');
            }
            if (data.hasOwnProperty('medical')) {
                obj['medical'] = ApiClient.convertToType(data['medical'], 'Number');
            }
            if (data.hasOwnProperty('overall')) {
                obj['overall'] = ApiClient.convertToType(data['overall'], 'Number');
            }
            if (data.hasOwnProperty('physicalHarm')) {
                obj['physicalHarm'] = ApiClient.convertToType(data['physicalHarm'], 'Number');
            }
            if (data.hasOwnProperty('politicalFreedom')) {
                obj['politicalFreedom'] = ApiClient.convertToType(data['politicalFreedom'], 'Number');
            }
            if (data.hasOwnProperty('theft')) {
                obj['theft'] = ApiClient.convertToType(data['theft'], 'Number');
            }
            if (data.hasOwnProperty('women')) {
                obj['women'] = ApiClient.convertToType(data['women'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SafetyScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SafetyScore</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Likelihood of harm or discrimination against LGBTQ persons or groups and level of caution required at location. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} lgbtq
 */
SafetyScore.prototype['lgbtq'] = undefined;

/**
 * Likelihood of illness or disease, assessment of water and air quality, and access to reliable medical care. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} medical
 */
SafetyScore.prototype['medical'] = undefined;

/**
 * An average of the 6 “sub”-categories. Score go from 1 (very safe) to 100 (very dangerous).
 * @member {Number} overall
 */
SafetyScore.prototype['overall'] = undefined;

/**
 * Likelihood of injury due to harmful intent. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} physicalHarm
 */
SafetyScore.prototype['physicalHarm'] = undefined;

/**
 * Potential for infringement of political rights or political unrest. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} politicalFreedom
 */
SafetyScore.prototype['politicalFreedom'] = undefined;

/**
 * Likelihood of theft. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} theft
 */
SafetyScore.prototype['theft'] = undefined;

/**
 * Likelihood of inappropriate behavior against females. Score go from 1 (not likely) to 100 (very likely).
 * @member {Number} women
 */
SafetyScore.prototype['women'] = undefined;






export default SafetyScore;

