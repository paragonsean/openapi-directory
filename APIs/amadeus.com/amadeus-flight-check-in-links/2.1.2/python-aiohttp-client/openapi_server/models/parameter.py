# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, format: str=None, type: str=None):
        """Parameter - a model defined in OpenAPI

        :param description: The description of this Parameter.
        :param format: The format of this Parameter.
        :param type: The type of this Parameter.
        """
        self.openapi_types = {
            'description': str,
            'format': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'format': 'format',
            'type': 'type'
        }

        self._description = description
        self._format = format
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parameter of this Parameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Parameter.

        parameter descriptive information

        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.

        parameter descriptive information

        :param description: The description of this Parameter.
        :type description: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this Parameter.

        format of the parameter

        :return: The format of this Parameter.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Parameter.

        format of the parameter

        :param format: The format of this Parameter.
        :type format: str
        """

        self._format = format

    @property
    def type(self):
        """Gets the type of this Parameter.

        type of the parameter

        :return: The type of this Parameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Parameter.

        type of the parameter

        :param type: The type of this Parameter.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
