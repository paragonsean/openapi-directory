# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckinLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, href: str=None, id: str=None, parameters: object=None, type: str=None):
        """CheckinLink - a model defined in OpenAPI

        :param channel: The channel of this CheckinLink.
        :param href: The href of this CheckinLink.
        :param id: The id of this CheckinLink.
        :param parameters: The parameters of this CheckinLink.
        :param type: The type of this CheckinLink.
        """
        self.openapi_types = {
            'channel': str,
            'href': str,
            'id': str,
            'parameters': object,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'href': 'href',
            'id': 'id',
            'parameters': 'parameters',
            'type': 'type'
        }

        self._channel = channel
        self._href = href
        self._id = id
        self._parameters = parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckinLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckinLink of this CheckinLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this CheckinLink.

        indicates the type of channel supported by the URL

        :return: The channel of this CheckinLink.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CheckinLink.

        indicates the type of channel supported by the URL

        :param channel: The channel of this CheckinLink.
        :type channel: str
        """
        allowed_values = ["Mobile", "Web", "All"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def href(self):
        """Gets the href of this CheckinLink.

        direct URL to the relevant page

        :return: The href of this CheckinLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CheckinLink.

        direct URL to the relevant page

        :param href: The href of this CheckinLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """Gets the id of this CheckinLink.

        identifier of the resource

        :return: The id of this CheckinLink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckinLink.

        identifier of the resource

        :param id: The id of this CheckinLink.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parameters(self):
        """Gets the parameters of this CheckinLink.

        list of URL parameters with descriptive information such as description and/or type and/or format

        :return: The parameters of this CheckinLink.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CheckinLink.

        list of URL parameters with descriptive information such as description and/or type and/or format

        :param parameters: The parameters of this CheckinLink.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this CheckinLink.

        the resource name

        :return: The type of this CheckinLink.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckinLink.

        the resource name

        :param type: The type of this CheckinLink.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
