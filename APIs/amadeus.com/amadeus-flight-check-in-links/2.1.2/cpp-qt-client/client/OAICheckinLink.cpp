/**
 * Flight Check-in Links
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckinLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckinLink::OAICheckinLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckinLink::OAICheckinLink() {
    this->initializeModel();
}

OAICheckinLink::~OAICheckinLink() {}

void OAICheckinLink::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheckinLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckinLink::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheckinLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckinLink::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICheckinLink::getChannel() const {
    return m_channel;
}
void OAICheckinLink::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICheckinLink::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICheckinLink::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAICheckinLink::getHref() const {
    return m_href;
}
void OAICheckinLink::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICheckinLink::is_href_Set() const{
    return m_href_isSet;
}

bool OAICheckinLink::is_href_Valid() const{
    return m_href_isValid;
}

QString OAICheckinLink::getId() const {
    return m_id;
}
void OAICheckinLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheckinLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheckinLink::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAICheckinLink::getParameters() const {
    return m_parameters;
}
void OAICheckinLink::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICheckinLink::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICheckinLink::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICheckinLink::getType() const {
    return m_type;
}
void OAICheckinLink::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheckinLink::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheckinLink::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheckinLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckinLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_href_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
