# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_code: str=None, city_name: str=None, country_code: str=None, country_name: str=None, region_code: str=None, state_code: str=None):
        """Address - a model defined in OpenAPI

        :param city_code: The city_code of this Address.
        :param city_name: The city_name of this Address.
        :param country_code: The country_code of this Address.
        :param country_name: The country_name of this Address.
        :param region_code: The region_code of this Address.
        :param state_code: The state_code of this Address.
        """
        self.openapi_types = {
            'city_code': str,
            'city_name': str,
            'country_code': str,
            'country_name': str,
            'region_code': str,
            'state_code': str
        }

        self.attribute_map = {
            'city_code': 'cityCode',
            'city_name': 'cityName',
            'country_code': 'countryCode',
            'country_name': 'countryName',
            'region_code': 'regionCode',
            'state_code': 'stateCode'
        }

        self._city_code = city_code
        self._city_name = city_name
        self._country_code = country_code
        self._country_name = country_name
        self._region_code = region_code
        self._state_code = state_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_code(self):
        """Gets the city_code of this Address.

        IATA code of the city of the location; equal to IATAcode if the location is a city

        :return: The city_code of this Address.
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this Address.

        IATA code of the city of the location; equal to IATAcode if the location is a city

        :param city_code: The city_code of this Address.
        :type city_code: str
        """

        self._city_code = city_code

    @property
    def city_name(self):
        """Gets the city_name of this Address.

        name of the city of the location; equal to name if the location is a city

        :return: The city_name of this Address.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this Address.

        name of the city of the location; equal to name if the location is a city

        :param city_name: The city_name of this Address.
        :type city_name: str
        """

        self._city_name = city_name

    @property
    def country_code(self):
        """Gets the country_code of this Address.

        code of the country of the location in ISO standard

        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        code of the country of the location in ISO standard

        :param country_code: The country_code of this Address.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Address.

        name of the country of the location

        :return: The country_name of this Address.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Address.

        name of the country of the location

        :param country_name: The country_name of this Address.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def region_code(self):
        """Gets the region_code of this Address.

        code of the region of the location in ISO standard

        :return: The region_code of this Address.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Address.

        code of the region of the location in ISO standard

        :param region_code: The region_code of this Address.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def state_code(self):
        """Gets the state_code of this Address.

        code of the state of the location if any

        :return: The state_code of this Address.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Address.

        code of the state of the location if any

        :param state_code: The state_code of this Address.
        :type state_code: str
        """

        self._state_code = state_code
