/**
 * Airport Nearest Relevant
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILocation.h
 *
 * 
 */

#ifndef OAILocation_H
#define OAILocation_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIAnalytics.h"
#include "OAIDistance.h"
#include "OAIGeoCode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAIAnalytics;
class OAIDistance;
class OAIGeoCode;

class OAILocation : public OAIObject {
public:
    OAILocation();
    OAILocation(QString json);
    ~OAILocation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAddress getAddress() const;
    void setAddress(const OAIAddress &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OAIAnalytics getAnalytics() const;
    void setAnalytics(const OAIAnalytics &analytics);
    bool is_analytics_Set() const;
    bool is_analytics_Valid() const;

    QString getDetailedName() const;
    void setDetailedName(const QString &detailed_name);
    bool is_detailed_name_Set() const;
    bool is_detailed_name_Valid() const;

    OAIDistance getDistance() const;
    void setDistance(const OAIDistance &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    OAIGeoCode getGeoCode() const;
    void setGeoCode(const OAIGeoCode &geo_code);
    bool is_geo_code_Set() const;
    bool is_geo_code_Valid() const;

    QString getIataCode() const;
    void setIataCode(const QString &iata_code);
    bool is_iata_code_Set() const;
    bool is_iata_code_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getRelevance() const;
    void setRelevance(const double &relevance);
    bool is_relevance_Set() const;
    bool is_relevance_Valid() const;

    QString getSubType() const;
    void setSubType(const QString &sub_type);
    bool is_sub_type_Set() const;
    bool is_sub_type_Valid() const;

    QString getTimeZoneOffset() const;
    void setTimeZoneOffset(const QString &time_zone_offset);
    bool is_time_zone_offset_Set() const;
    bool is_time_zone_offset_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAddress m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OAIAnalytics m_analytics;
    bool m_analytics_isSet;
    bool m_analytics_isValid;

    QString m_detailed_name;
    bool m_detailed_name_isSet;
    bool m_detailed_name_isValid;

    OAIDistance m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    OAIGeoCode m_geo_code;
    bool m_geo_code_isSet;
    bool m_geo_code_isValid;

    QString m_iata_code;
    bool m_iata_code_isSet;
    bool m_iata_code_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_relevance;
    bool m_relevance_isSet;
    bool m_relevance_isValid;

    QString m_sub_type;
    bool m_sub_type_isSet;
    bool m_sub_type_isValid;

    QString m_time_zone_offset;
    bool m_time_zone_offset_isSet;
    bool m_time_zone_offset_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILocation)

#endif // OAILocation_H
