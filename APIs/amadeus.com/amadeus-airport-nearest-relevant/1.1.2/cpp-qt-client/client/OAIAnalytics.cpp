/**
 * Airport Nearest Relevant
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalytics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalytics::OAIAnalytics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalytics::OAIAnalytics() {
    this->initializeModel();
}

OAIAnalytics::~OAIAnalytics() {}

void OAIAnalytics::initializeModel() {

    m_flights_isSet = false;
    m_flights_isValid = false;

    m_travelers_isSet = false;
    m_travelers_isValid = false;
}

void OAIAnalytics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalytics::fromJsonObject(QJsonObject json) {

    m_flights_isValid = ::OpenAPI::fromJsonValue(m_flights, json[QString("flights")]);
    m_flights_isSet = !json[QString("flights")].isNull() && m_flights_isValid;

    m_travelers_isValid = ::OpenAPI::fromJsonValue(m_travelers, json[QString("travelers")]);
    m_travelers_isSet = !json[QString("travelers")].isNull() && m_travelers_isValid;
}

QString OAIAnalytics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalytics::asJsonObject() const {
    QJsonObject obj;
    if (m_flights.isSet()) {
        obj.insert(QString("flights"), ::OpenAPI::toJsonValue(m_flights));
    }
    if (m_travelers.isSet()) {
        obj.insert(QString("travelers"), ::OpenAPI::toJsonValue(m_travelers));
    }
    return obj;
}

OAIFlights OAIAnalytics::getFlights() const {
    return m_flights;
}
void OAIAnalytics::setFlights(const OAIFlights &flights) {
    m_flights = flights;
    m_flights_isSet = true;
}

bool OAIAnalytics::is_flights_Set() const{
    return m_flights_isSet;
}

bool OAIAnalytics::is_flights_Valid() const{
    return m_flights_isValid;
}

OAITravelers OAIAnalytics::getTravelers() const {
    return m_travelers;
}
void OAIAnalytics::setTravelers(const OAITravelers &travelers) {
    m_travelers = travelers;
    m_travelers_isSet = true;
}

bool OAIAnalytics::is_travelers_Set() const{
    return m_travelers_isSet;
}

bool OAIAnalytics::is_travelers_Valid() const{
    return m_travelers_isValid;
}

bool OAIAnalytics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_travelers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalytics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
