/**
 * Airport Nearest Relevant
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_analytics_isSet = false;
    m_analytics_isValid = false;

    m_detailed_name_isSet = false;
    m_detailed_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_time_zone_offset_isSet = false;
    m_time_zone_offset_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_analytics_isValid = ::OpenAPI::fromJsonValue(m_analytics, json[QString("analytics")]);
    m_analytics_isSet = !json[QString("analytics")].isNull() && m_analytics_isValid;

    m_detailed_name_isValid = ::OpenAPI::fromJsonValue(m_detailed_name, json[QString("detailedName")]);
    m_detailed_name_isSet = !json[QString("detailedName")].isNull() && m_detailed_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_time_zone_offset_isValid = ::OpenAPI::fromJsonValue(m_time_zone_offset, json[QString("timeZoneOffset")]);
    m_time_zone_offset_isSet = !json[QString("timeZoneOffset")].isNull() && m_time_zone_offset_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_analytics.isSet()) {
        obj.insert(QString("analytics"), ::OpenAPI::toJsonValue(m_analytics));
    }
    if (m_detailed_name_isSet) {
        obj.insert(QString("detailedName"), ::OpenAPI::toJsonValue(m_detailed_name));
    }
    if (m_distance.isSet()) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_time_zone_offset_isSet) {
        obj.insert(QString("timeZoneOffset"), ::OpenAPI::toJsonValue(m_time_zone_offset));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAddress OAILocation::getAddress() const {
    return m_address;
}
void OAILocation::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation::is_address_Valid() const{
    return m_address_isValid;
}

OAIAnalytics OAILocation::getAnalytics() const {
    return m_analytics;
}
void OAILocation::setAnalytics(const OAIAnalytics &analytics) {
    m_analytics = analytics;
    m_analytics_isSet = true;
}

bool OAILocation::is_analytics_Set() const{
    return m_analytics_isSet;
}

bool OAILocation::is_analytics_Valid() const{
    return m_analytics_isValid;
}

QString OAILocation::getDetailedName() const {
    return m_detailed_name;
}
void OAILocation::setDetailedName(const QString &detailed_name) {
    m_detailed_name = detailed_name;
    m_detailed_name_isSet = true;
}

bool OAILocation::is_detailed_name_Set() const{
    return m_detailed_name_isSet;
}

bool OAILocation::is_detailed_name_Valid() const{
    return m_detailed_name_isValid;
}

OAIDistance OAILocation::getDistance() const {
    return m_distance;
}
void OAILocation::setDistance(const OAIDistance &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAILocation::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAILocation::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIGeoCode OAILocation::getGeoCode() const {
    return m_geo_code;
}
void OAILocation::setGeoCode(const OAIGeoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAILocation::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAILocation::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

QString OAILocation::getIataCode() const {
    return m_iata_code;
}
void OAILocation::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAILocation::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAILocation::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAILocation::getName() const {
    return m_name;
}
void OAILocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation::is_name_Valid() const{
    return m_name_isValid;
}

double OAILocation::getRelevance() const {
    return m_relevance;
}
void OAILocation::setRelevance(const double &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAILocation::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAILocation::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAILocation::getSubType() const {
    return m_sub_type;
}
void OAILocation::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAILocation::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAILocation::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAILocation::getTimeZoneOffset() const {
    return m_time_zone_offset;
}
void OAILocation::setTimeZoneOffset(const QString &time_zone_offset) {
    m_time_zone_offset = time_zone_offset;
    m_time_zone_offset_isSet = true;
}

bool OAILocation::is_time_zone_offset_Set() const{
    return m_time_zone_offset_isSet;
}

bool OAILocation::is_time_zone_offset_Valid() const{
    return m_time_zone_offset_isValid;
}

QString OAILocation::getType() const {
    return m_type;
}
void OAILocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAILocation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
