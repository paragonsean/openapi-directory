/**
 * Tours and Activities
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccessful_Search.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccessful_Search::OAISuccessful_Search(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccessful_Search::OAISuccessful_Search() {
    this->initializeModel();
}

OAISuccessful_Search::~OAISuccessful_Search() {}

void OAISuccessful_Search::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAISuccessful_Search::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccessful_Search::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAISuccessful_Search::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccessful_Search::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIActivity> OAISuccessful_Search::getData() const {
    return m_data;
}
void OAISuccessful_Search::setData(const QList<OAIActivity> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISuccessful_Search::is_data_Set() const{
    return m_data_isSet;
}

bool OAISuccessful_Search::is_data_Valid() const{
    return m_data_isValid;
}

OAICollection_Meta OAISuccessful_Search::getMeta() const {
    return m_meta;
}
void OAISuccessful_Search::setMeta(const OAICollection_Meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAISuccessful_Search::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAISuccessful_Search::is_meta_Valid() const{
    return m_meta_isValid;
}

QList<OAIIssue> OAISuccessful_Search::getWarnings() const {
    return m_warnings;
}
void OAISuccessful_Search::setWarnings(const QList<OAIIssue> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAISuccessful_Search::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAISuccessful_Search::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAISuccessful_Search::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccessful_Search::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
