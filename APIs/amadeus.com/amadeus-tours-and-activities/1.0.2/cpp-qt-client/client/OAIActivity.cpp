/**
 * Tours and Activities
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_booking_link_isSet = false;
    m_booking_link_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_minimum_duration_isSet = false;
    m_minimum_duration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_booking_link_isValid = ::OpenAPI::fromJsonValue(m_booking_link, json[QString("bookingLink")]);
    m_booking_link_isSet = !json[QString("bookingLink")].isNull() && m_booking_link_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_minimum_duration_isValid = ::OpenAPI::fromJsonValue(m_minimum_duration, json[QString("minimumDuration")]);
    m_minimum_duration_isSet = !json[QString("minimumDuration")].isNull() && m_minimum_duration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_link_isSet) {
        obj.insert(QString("bookingLink"), ::OpenAPI::toJsonValue(m_booking_link));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_minimum_duration_isSet) {
        obj.insert(QString("minimumDuration"), ::OpenAPI::toJsonValue(m_minimum_duration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pictures.size() > 0) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIActivity::getBookingLink() const {
    return m_booking_link;
}
void OAIActivity::setBookingLink(const QString &booking_link) {
    m_booking_link = booking_link;
    m_booking_link_isSet = true;
}

bool OAIActivity::is_booking_link_Set() const{
    return m_booking_link_isSet;
}

bool OAIActivity::is_booking_link_Valid() const{
    return m_booking_link_isValid;
}

QString OAIActivity::getDescription() const {
    return m_description;
}
void OAIActivity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivity::is_description_Valid() const{
    return m_description_isValid;
}

OAIGeoCode OAIActivity::getGeoCode() const {
    return m_geo_code;
}
void OAIActivity::setGeoCode(const OAIGeoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAIActivity::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAIActivity::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

QString OAIActivity::getId() const {
    return m_id;
}
void OAIActivity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivity::getMinimumDuration() const {
    return m_minimum_duration;
}
void OAIActivity::setMinimumDuration(const QString &minimum_duration) {
    m_minimum_duration = minimum_duration;
    m_minimum_duration_isSet = true;
}

bool OAIActivity::is_minimum_duration_Set() const{
    return m_minimum_duration_isSet;
}

bool OAIActivity::is_minimum_duration_Valid() const{
    return m_minimum_duration_isValid;
}

QString OAIActivity::getName() const {
    return m_name;
}
void OAIActivity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivity::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIActivity::getPictures() const {
    return m_pictures;
}
void OAIActivity::setPictures(const QList<QString> &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIActivity::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIActivity::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIElementaryPrice OAIActivity::getPrice() const {
    return m_price;
}
void OAIActivity::setPrice(const OAIElementaryPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIActivity::is_price_Set() const{
    return m_price_isSet;
}

bool OAIActivity::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIActivity::getRating() const {
    return m_rating;
}
void OAIActivity::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIActivity::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIActivity::is_rating_Valid() const{
    return m_rating_isValid;
}

OAILink OAIActivity::getSelf() const {
    return m_self;
}
void OAIActivity::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIActivity::is_self_Set() const{
    return m_self_isSet;
}

bool OAIActivity::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIActivity::getShortDescription() const {
    return m_short_description;
}
void OAIActivity::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIActivity::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIActivity::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIActivity::getType() const {
    return m_type;
}
void OAIActivity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
