# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elementary_price import ElementaryPrice
from openapi_server.models.geo_code import GeoCode
from openapi_server.models.link import Link
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_link: str=None, description: str=None, geo_code: GeoCode=None, id: str=None, minimum_duration: str=None, name: str=None, pictures: List[str]=None, price: ElementaryPrice=None, rating: str=None, _self: Link=None, short_description: str=None, type: str=None):
        """Activity - a model defined in OpenAPI

        :param booking_link: The booking_link of this Activity.
        :param description: The description of this Activity.
        :param geo_code: The geo_code of this Activity.
        :param id: The id of this Activity.
        :param minimum_duration: The minimum_duration of this Activity.
        :param name: The name of this Activity.
        :param pictures: The pictures of this Activity.
        :param price: The price of this Activity.
        :param rating: The rating of this Activity.
        :param _self: The _self of this Activity.
        :param short_description: The short_description of this Activity.
        :param type: The type of this Activity.
        """
        self.openapi_types = {
            'booking_link': str,
            'description': str,
            'geo_code': GeoCode,
            'id': str,
            'minimum_duration': str,
            'name': str,
            'pictures': List[str],
            'price': ElementaryPrice,
            'rating': str,
            '_self': Link,
            'short_description': str,
            'type': str
        }

        self.attribute_map = {
            'booking_link': 'bookingLink',
            'description': 'description',
            'geo_code': 'geoCode',
            'id': 'id',
            'minimum_duration': 'minimumDuration',
            'name': 'name',
            'pictures': 'pictures',
            'price': 'price',
            'rating': 'rating',
            '_self': 'self',
            'short_description': 'shortDescription',
            'type': 'type'
        }

        self._booking_link = booking_link
        self._description = description
        self._geo_code = geo_code
        self._id = id
        self._minimum_duration = minimum_duration
        self._name = name
        self._pictures = pictures
        self._price = price
        self._rating = rating
        self.__self = _self
        self._short_description = short_description
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_link(self):
        """Gets the booking_link of this Activity.

        url to book the activity

        :return: The booking_link of this Activity.
        :rtype: str
        """
        return self._booking_link

    @booking_link.setter
    def booking_link(self, booking_link):
        """Sets the booking_link of this Activity.

        url to book the activity

        :param booking_link: The booking_link of this Activity.
        :type booking_link: str
        """

        self._booking_link = booking_link

    @property
    def description(self):
        """Gets the description of this Activity.

        full description of the activity

        :return: The description of this Activity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Activity.

        full description of the activity

        :param description: The description of this Activity.
        :type description: str
        """

        self._description = description

    @property
    def geo_code(self):
        """Gets the geo_code of this Activity.


        :return: The geo_code of this Activity.
        :rtype: GeoCode
        """
        return self._geo_code

    @geo_code.setter
    def geo_code(self, geo_code):
        """Sets the geo_code of this Activity.


        :param geo_code: The geo_code of this Activity.
        :type geo_code: GeoCode
        """

        self._geo_code = geo_code

    @property
    def id(self):
        """Gets the id of this Activity.

        unique id of the ressource

        :return: The id of this Activity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        unique id of the ressource

        :param id: The id of this Activity.
        :type id: str
        """

        self._id = id

    @property
    def minimum_duration(self):
        """Gets the minimum_duration of this Activity.

        Minimum recommended duration for the activity

        :return: The minimum_duration of this Activity.
        :rtype: str
        """
        return self._minimum_duration

    @minimum_duration.setter
    def minimum_duration(self, minimum_duration):
        """Sets the minimum_duration of this Activity.

        Minimum recommended duration for the activity

        :param minimum_duration: The minimum_duration of this Activity.
        :type minimum_duration: str
        """

        self._minimum_duration = minimum_duration

    @property
    def name(self):
        """Gets the name of this Activity.

        activity name

        :return: The name of this Activity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Activity.

        activity name

        :param name: The name of this Activity.
        :type name: str
        """

        self._name = name

    @property
    def pictures(self):
        """Gets the pictures of this Activity.

        link to picture related to the activity

        :return: The pictures of this Activity.
        :rtype: List[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Activity.

        link to picture related to the activity

        :param pictures: The pictures of this Activity.
        :type pictures: List[str]
        """

        self._pictures = pictures

    @property
    def price(self):
        """Gets the price of this Activity.


        :return: The price of this Activity.
        :rtype: ElementaryPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Activity.


        :param price: The price of this Activity.
        :type price: ElementaryPrice
        """

        self._price = price

    @property
    def rating(self):
        """Gets the rating of this Activity.

        rating of the activity

        :return: The rating of this Activity.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Activity.

        rating of the activity

        :param rating: The rating of this Activity.
        :type rating: str
        """

        self._rating = rating

    @property
    def _self(self):
        """Gets the _self of this Activity.


        :return: The _self of this Activity.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Activity.


        :param _self: The _self of this Activity.
        :type _self: Link
        """

        self.__self = _self

    @property
    def short_description(self):
        """Gets the short_description of this Activity.

        short description of the activity

        :return: The short_description of this Activity.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Activity.

        short description of the activity

        :param short_description: The short_description of this Activity.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def type(self):
        """Gets the type of this Activity.

        the ressource name

        :return: The type of this Activity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.

        the ressource name

        :param type: The type of this Activity.
        :type type: str
        """

        self._type = type
