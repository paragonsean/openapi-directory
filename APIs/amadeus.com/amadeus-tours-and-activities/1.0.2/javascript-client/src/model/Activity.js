/**
 * Tours and Activities
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElementaryPrice from './ElementaryPrice';
import GeoCode from './GeoCode';
import Link from './Link';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 1.0.2
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * Activity description
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('bookingLink')) {
                obj['bookingLink'] = ApiClient.convertToType(data['bookingLink'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('geoCode')) {
                obj['geoCode'] = GeoCode.constructFromObject(data['geoCode']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('minimumDuration')) {
                obj['minimumDuration'] = ApiClient.convertToType(data['minimumDuration'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], ['String']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ElementaryPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = Link.constructFromObject(data['self']);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bookingLink'] && !(typeof data['bookingLink'] === 'string' || data['bookingLink'] instanceof String)) {
            throw new Error("Expected the field `bookingLink` to be a primitive type in the JSON string but got " + data['bookingLink']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `geoCode`
        if (data['geoCode']) { // data not null
          GeoCode.validateJSON(data['geoCode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['minimumDuration'] && !(typeof data['minimumDuration'] === 'string' || data['minimumDuration'] instanceof String)) {
            throw new Error("Expected the field `minimumDuration` to be a primitive type in the JSON string but got " + data['minimumDuration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pictures'])) {
            throw new Error("Expected the field `pictures` to be an array in the JSON data but got " + data['pictures']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ElementaryPrice.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          Link.validateJSON(data['self']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * url to book the activity
 * @member {String} bookingLink
 */
Activity.prototype['bookingLink'] = undefined;

/**
 * full description of the activity
 * @member {String} description
 */
Activity.prototype['description'] = undefined;

/**
 * @member {module:model/GeoCode} geoCode
 */
Activity.prototype['geoCode'] = undefined;

/**
 * unique id of the ressource
 * @member {String} id
 */
Activity.prototype['id'] = undefined;

/**
 * Minimum recommended duration for the activity
 * @member {String} minimumDuration
 */
Activity.prototype['minimumDuration'] = undefined;

/**
 * activity name
 * @member {String} name
 */
Activity.prototype['name'] = undefined;

/**
 * link to picture related to the activity
 * @member {Array.<String>} pictures
 */
Activity.prototype['pictures'] = undefined;

/**
 * @member {module:model/ElementaryPrice} price
 */
Activity.prototype['price'] = undefined;

/**
 * rating of the activity
 * @member {String} rating
 */
Activity.prototype['rating'] = undefined;

/**
 * @member {module:model/Link} self
 */
Activity.prototype['self'] = undefined;

/**
 * short description of the activity
 * @member {String} shortDescription
 */
Activity.prototype['shortDescription'] = undefined;

/**
 * the ressource name
 * @member {String} type
 */
Activity.prototype['type'] = undefined;






export default Activity;

