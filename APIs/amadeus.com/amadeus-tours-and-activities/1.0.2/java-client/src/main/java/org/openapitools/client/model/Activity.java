/*
 * Tours and Activities
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElementaryPrice;
import org.openapitools.client.model.GeoCode;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activity description
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:49.975890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity {
  public static final String SERIALIZED_NAME_BOOKING_LINK = "bookingLink";
  @SerializedName(SERIALIZED_NAME_BOOKING_LINK)
  private String bookingLink;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GEO_CODE = "geoCode";
  @SerializedName(SERIALIZED_NAME_GEO_CODE)
  private GeoCode geoCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MINIMUM_DURATION = "minimumDuration";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DURATION)
  private String minimumDuration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private List<String> pictures = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ElementaryPrice price;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Activity() {
  }

  public Activity(
     String id, 
     String type
  ) {
    this();
    this.id = id;
    this.type = type;
  }

  public Activity bookingLink(String bookingLink) {
    this.bookingLink = bookingLink;
    return this;
  }

  /**
   * url to book the activity
   * @return bookingLink
   */
  @javax.annotation.Nullable
  public String getBookingLink() {
    return bookingLink;
  }

  public void setBookingLink(String bookingLink) {
    this.bookingLink = bookingLink;
  }


  public Activity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * full description of the activity
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Activity geoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
    return this;
  }

  /**
   * Get geoCode
   * @return geoCode
   */
  @javax.annotation.Nullable
  public GeoCode getGeoCode() {
    return geoCode;
  }

  public void setGeoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
  }


  /**
   * unique id of the ressource
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Activity minimumDuration(String minimumDuration) {
    this.minimumDuration = minimumDuration;
    return this;
  }

  /**
   * Minimum recommended duration for the activity
   * @return minimumDuration
   */
  @javax.annotation.Nullable
  public String getMinimumDuration() {
    return minimumDuration;
  }

  public void setMinimumDuration(String minimumDuration) {
    this.minimumDuration = minimumDuration;
  }


  public Activity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * activity name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Activity pictures(List<String> pictures) {
    this.pictures = pictures;
    return this;
  }

  public Activity addPicturesItem(String picturesItem) {
    if (this.pictures == null) {
      this.pictures = new ArrayList<>();
    }
    this.pictures.add(picturesItem);
    return this;
  }

  /**
   * link to picture related to the activity
   * @return pictures
   */
  @javax.annotation.Nullable
  public List<String> getPictures() {
    return pictures;
  }

  public void setPictures(List<String> pictures) {
    this.pictures = pictures;
  }


  public Activity price(ElementaryPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ElementaryPrice getPrice() {
    return price;
  }

  public void setPrice(ElementaryPrice price) {
    this.price = price;
  }


  public Activity rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * rating of the activity
   * @return rating
   */
  @javax.annotation.Nullable
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public Activity self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }


  public Activity shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * short description of the activity
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  /**
   * the ressource name
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.bookingLink, activity.bookingLink) &&
        Objects.equals(this.description, activity.description) &&
        Objects.equals(this.geoCode, activity.geoCode) &&
        Objects.equals(this.id, activity.id) &&
        Objects.equals(this.minimumDuration, activity.minimumDuration) &&
        Objects.equals(this.name, activity.name) &&
        Objects.equals(this.pictures, activity.pictures) &&
        Objects.equals(this.price, activity.price) &&
        Objects.equals(this.rating, activity.rating) &&
        Objects.equals(this.self, activity.self) &&
        Objects.equals(this.shortDescription, activity.shortDescription) &&
        Objects.equals(this.type, activity.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingLink, description, geoCode, id, minimumDuration, name, pictures, price, rating, self, shortDescription, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    bookingLink: ").append(toIndentedString(bookingLink)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    geoCode: ").append(toIndentedString(geoCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minimumDuration: ").append(toIndentedString(minimumDuration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookingLink");
    openapiFields.add("description");
    openapiFields.add("geoCode");
    openapiFields.add("id");
    openapiFields.add("minimumDuration");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("price");
    openapiFields.add("rating");
    openapiFields.add("self");
    openapiFields.add("shortDescription");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bookingLink") != null && !jsonObj.get("bookingLink").isJsonNull()) && !jsonObj.get("bookingLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingLink").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `geoCode`
      if (jsonObj.get("geoCode") != null && !jsonObj.get("geoCode").isJsonNull()) {
        GeoCode.validateJsonElement(jsonObj.get("geoCode"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("minimumDuration") != null && !jsonObj.get("minimumDuration").isJsonNull()) && !jsonObj.get("minimumDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumDuration").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pictures") != null && !jsonObj.get("pictures").isJsonNull() && !jsonObj.get("pictures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictures` to be an array in the JSON string but got `%s`", jsonObj.get("pictures").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ElementaryPrice.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity
   * @throws IOException if the JSON string is invalid with respect to Activity
   */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

  /**
   * Convert an instance of Activity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

