# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.analytics import Analytics
from openapi_server.models.distance import Distance
from openapi_server.models.geo_code import GeoCode
from openapi_server.models.links import Links
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, analytics: Analytics=None, category: str=None, detailed_name: str=None, distance: Distance=None, geo_code: GeoCode=None, iata_code: str=None, id: str=None, name: str=None, rank: str=None, relevance: float=None, _self: Links=None, sub_type: str=None, tags: List[str]=None, time_zone_offset: str=None, type: str=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param analytics: The analytics of this Location.
        :param category: The category of this Location.
        :param detailed_name: The detailed_name of this Location.
        :param distance: The distance of this Location.
        :param geo_code: The geo_code of this Location.
        :param iata_code: The iata_code of this Location.
        :param id: The id of this Location.
        :param name: The name of this Location.
        :param rank: The rank of this Location.
        :param relevance: The relevance of this Location.
        :param _self: The _self of this Location.
        :param sub_type: The sub_type of this Location.
        :param tags: The tags of this Location.
        :param time_zone_offset: The time_zone_offset of this Location.
        :param type: The type of this Location.
        """
        self.openapi_types = {
            'address': Address,
            'analytics': Analytics,
            'category': str,
            'detailed_name': str,
            'distance': Distance,
            'geo_code': GeoCode,
            'iata_code': str,
            'id': str,
            'name': str,
            'rank': str,
            'relevance': float,
            '_self': Links,
            'sub_type': str,
            'tags': List[str],
            'time_zone_offset': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'analytics': 'analytics',
            'category': 'category',
            'detailed_name': 'detailedName',
            'distance': 'distance',
            'geo_code': 'geoCode',
            'iata_code': 'iataCode',
            'id': 'id',
            'name': 'name',
            'rank': 'rank',
            'relevance': 'relevance',
            '_self': 'self',
            'sub_type': 'subType',
            'tags': 'tags',
            'time_zone_offset': 'timeZoneOffset',
            'type': 'type'
        }

        self._address = address
        self._analytics = analytics
        self._category = category
        self._detailed_name = detailed_name
        self._distance = distance
        self._geo_code = geo_code
        self._iata_code = iata_code
        self._id = id
        self._name = name
        self._rank = rank
        self._relevance = relevance
        self.__self = _self
        self._sub_type = sub_type
        self._tags = tags
        self._time_zone_offset = time_zone_offset
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.


        :return: The address of this Location.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.
        :type address: Address
        """

        self._address = address

    @property
    def analytics(self):
        """Gets the analytics of this Location.


        :return: The analytics of this Location.
        :rtype: Analytics
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this Location.


        :param analytics: The analytics of this Location.
        :type analytics: Analytics
        """

        self._analytics = analytics

    @property
    def category(self):
        """Gets the category of this Location.

        category of the location

        :return: The category of this Location.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Location.

        category of the location

        :param category: The category of this Location.
        :type category: str
        """
        allowed_values = ["SIGHTS", "BEACH_PARK", "HISTORICAL", "NIGHTLIFE", "RESTAURANT", "SHOPPING"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def detailed_name(self):
        """Gets the detailed_name of this Location.

        detailed name of the location. For a city location it contains city name and country code. For an airport location it contains city name; country code and airport full name

        :return: The detailed_name of this Location.
        :rtype: str
        """
        return self._detailed_name

    @detailed_name.setter
    def detailed_name(self, detailed_name):
        """Sets the detailed_name of this Location.

        detailed name of the location. For a city location it contains city name and country code. For an airport location it contains city name; country code and airport full name

        :param detailed_name: The detailed_name of this Location.
        :type detailed_name: str
        """

        self._detailed_name = detailed_name

    @property
    def distance(self):
        """Gets the distance of this Location.


        :return: The distance of this Location.
        :rtype: Distance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Location.


        :param distance: The distance of this Location.
        :type distance: Distance
        """

        self._distance = distance

    @property
    def geo_code(self):
        """Gets the geo_code of this Location.


        :return: The geo_code of this Location.
        :rtype: GeoCode
        """
        return self._geo_code

    @geo_code.setter
    def geo_code(self, geo_code):
        """Sets the geo_code of this Location.


        :param geo_code: The geo_code of this Location.
        :type geo_code: GeoCode
        """

        self._geo_code = geo_code

    @property
    def iata_code(self):
        """Gets the iata_code of this Location.

        IATA code of the location. ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) here)

        :return: The iata_code of this Location.
        :rtype: str
        """
        return self._iata_code

    @iata_code.setter
    def iata_code(self, iata_code):
        """Sets the iata_code of this Location.

        IATA code of the location. ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) here)

        :param iata_code: The iata_code of this Location.
        :type iata_code: str
        """

        self._iata_code = iata_code

    @property
    def id(self):
        """Gets the id of this Location.

        id of the ressource

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        id of the ressource

        :param id: The id of this Location.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Location.

        short name of the location

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        short name of the location

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this Location.

        the rank is the position compared to other locations based on how famous is a place. 1 being the highest.

        :return: The rank of this Location.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Location.

        the rank is the position compared to other locations based on how famous is a place. 1 being the highest.

        :param rank: The rank of this Location.
        :type rank: str
        """

        self._rank = rank

    @property
    def relevance(self):
        """Gets the relevance of this Location.

        score value calculated based on distance and analytics

        :return: The relevance of this Location.
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this Location.

        score value calculated based on distance and analytics

        :param relevance: The relevance of this Location.
        :type relevance: float
        """

        self._relevance = relevance

    @property
    def _self(self):
        """Gets the _self of this Location.


        :return: The _self of this Location.
        :rtype: Links
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Location.


        :param _self: The _self of this Location.
        :type _self: Links
        """

        self.__self = _self

    @property
    def sub_type(self):
        """Gets the sub_type of this Location.

        location sub type

        :return: The sub_type of this Location.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Location.

        location sub type

        :param sub_type: The sub_type of this Location.
        :type sub_type: str
        """
        allowed_values = ["AIRPORT", "CITY", "POINT_OF_INTEREST", "DISTRICT"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def tags(self):
        """Gets the tags of this Location.

        list of tags related to the location

        :return: The tags of this Location.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Location.

        list of tags related to the location

        :param tags: The tags of this Location.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this Location.

        timezone offset of the location at the date of the API call (including daylight saving time)

        :return: The time_zone_offset of this Location.
        :rtype: str
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this Location.

        timezone offset of the location at the date of the API call (including daylight saving time)

        :param time_zone_offset: The time_zone_offset of this Location.
        :type time_zone_offset: str
        """

        self._time_zone_offset = time_zone_offset

    @property
    def type(self):
        """Gets the type of this Location.

        the resource name

        :return: The type of this Location.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        the resource name

        :param type: The type of this Location.
        :type type: str
        """

        self._type = type
