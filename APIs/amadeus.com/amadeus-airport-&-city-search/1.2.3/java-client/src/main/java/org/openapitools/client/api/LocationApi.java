/*
 * Airport & City Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, in test this API only contains data from the United States, Spain, United Kingdom, Germany and India. 
 *
 * The version of the OpenAPI document: 1.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.Success1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAirportCity
     * @param locationId identifier of the location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  572     | INVALID OPTION      </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportCityCall(String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reference-data/locations/{locationId}"
            .replace("{" + "locationId" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAirportCityValidateBeforeCall(String locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getAirportCity(Async)");
        }

        return getAirportCityCall(locationId, _callback);

    }

    /**
     * Returns a specific airports or cities based on its id.
     * 
     * @param locationId identifier of the location (required)
     * @return Success1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  572     | INVALID OPTION      </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Success1 getAirportCity(String locationId) throws ApiException {
        ApiResponse<Success1> localVarResp = getAirportCityWithHttpInfo(locationId);
        return localVarResp.getData();
    }

    /**
     * Returns a specific airports or cities based on its id.
     * 
     * @param locationId identifier of the location (required)
     * @return ApiResponse&lt;Success1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  572     | INVALID OPTION      </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success1> getAirportCityWithHttpInfo(String locationId) throws ApiException {
        okhttp3.Call localVarCall = getAirportCityValidateBeforeCall(locationId, null);
        Type localVarReturnType = new TypeToken<Success1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a specific airports or cities based on its id. (asynchronously)
     * 
     * @param locationId identifier of the location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  572     | INVALID OPTION      </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportCityAsync(String locationId, final ApiCallback<Success1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAirportCityValidateBeforeCall(locationId, _callback);
        Type localVarReturnType = new TypeToken<Success1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAirportCitySearch
     * @param subType sub type of the location (AIRPORT and/or CITY) (required)
     * @param keyword keyword that should represent the start of a word in a city or airport name or code.   Supported charaters are: A-Za-z0-9./:-&#39;()\&quot; (required)
     * @param countryCode Country code of the location using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code format (e.g. US). (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * analytics.travelers.score - sort by the number of travelers by airport or city, the airports and cities with the highest traffic are on top of the results  (optional, default to analytics.travelers.score)
     * @param view select the level of information of the reply: * LIGHT - Gives only the IATACode, name, detailedName, cityName and countryName * FULL - Adds on top of the LIGHT information the timeZoneOffset, geocode, detailed address and travelers.score default option is FULL  (optional, default to FULL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION  2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportCitySearchCall(List<String> subType, String keyword, String countryCode, Integer pageLimit, Integer pageOffset, String sort, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reference-data/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "subType", subType));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (pageLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[limit]", pageLimit));
        }

        if (pageOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[offset]", pageOffset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAirportCitySearchValidateBeforeCall(List<String> subType, String keyword, String countryCode, Integer pageLimit, Integer pageOffset, String sort, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subType' is set
        if (subType == null) {
            throw new ApiException("Missing the required parameter 'subType' when calling getAirportCitySearch(Async)");
        }

        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling getAirportCitySearch(Async)");
        }

        return getAirportCitySearchCall(subType, keyword, countryCode, pageLimit, pageOffset, sort, view, _callback);

    }

    /**
     * Returns a list of airports and cities matching a given keyword.
     * 
     * @param subType sub type of the location (AIRPORT and/or CITY) (required)
     * @param keyword keyword that should represent the start of a word in a city or airport name or code.   Supported charaters are: A-Za-z0-9./:-&#39;()\&quot; (required)
     * @param countryCode Country code of the location using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code format (e.g. US). (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * analytics.travelers.score - sort by the number of travelers by airport or city, the airports and cities with the highest traffic are on top of the results  (optional, default to analytics.travelers.score)
     * @param view select the level of information of the reply: * LIGHT - Gives only the IATACode, name, detailedName, cityName and countryName * FULL - Adds on top of the LIGHT information the timeZoneOffset, geocode, detailed address and travelers.score default option is FULL  (optional, default to FULL)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION  2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Success getAirportCitySearch(List<String> subType, String keyword, String countryCode, Integer pageLimit, Integer pageOffset, String sort, String view) throws ApiException {
        ApiResponse<Success> localVarResp = getAirportCitySearchWithHttpInfo(subType, keyword, countryCode, pageLimit, pageOffset, sort, view);
        return localVarResp.getData();
    }

    /**
     * Returns a list of airports and cities matching a given keyword.
     * 
     * @param subType sub type of the location (AIRPORT and/or CITY) (required)
     * @param keyword keyword that should represent the start of a word in a city or airport name or code.   Supported charaters are: A-Za-z0-9./:-&#39;()\&quot; (required)
     * @param countryCode Country code of the location using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code format (e.g. US). (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * analytics.travelers.score - sort by the number of travelers by airport or city, the airports and cities with the highest traffic are on top of the results  (optional, default to analytics.travelers.score)
     * @param view select the level of information of the reply: * LIGHT - Gives only the IATACode, name, detailedName, cityName and countryName * FULL - Adds on top of the LIGHT information the timeZoneOffset, geocode, detailed address and travelers.score default option is FULL  (optional, default to FULL)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION  2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> getAirportCitySearchWithHttpInfo(List<String> subType, String keyword, String countryCode, Integer pageLimit, Integer pageOffset, String sort, String view) throws ApiException {
        okhttp3.Call localVarCall = getAirportCitySearchValidateBeforeCall(subType, keyword, countryCode, pageLimit, pageOffset, sort, view, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of airports and cities matching a given keyword. (asynchronously)
     * 
     * @param subType sub type of the location (AIRPORT and/or CITY) (required)
     * @param keyword keyword that should represent the start of a word in a city or airport name or code.   Supported charaters are: A-Za-z0-9./:-&#39;()\&quot; (required)
     * @param countryCode Country code of the location using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code format (e.g. US). (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * analytics.travelers.score - sort by the number of travelers by airport or city, the airports and cities with the highest traffic are on top of the results  (optional, default to analytics.travelers.score)
     * @param view select the level of information of the reply: * LIGHT - Gives only the IATACode, name, detailedName, cityName and countryName * FULL - Adds on top of the LIGHT information the timeZoneOffset, geocode, detailed address and travelers.score default option is FULL  (optional, default to FULL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION  2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportCitySearchAsync(List<String> subType, String keyword, String countryCode, Integer pageLimit, Integer pageOffset, String sort, String view, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAirportCitySearchValidateBeforeCall(subType, keyword, countryCode, pageLimit, pageOffset, sort, view, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
