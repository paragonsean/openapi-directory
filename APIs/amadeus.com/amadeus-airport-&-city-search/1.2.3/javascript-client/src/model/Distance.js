/**
 * Airport & City Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, in test this API only contains data from the United States, Spain, United Kingdom, Germany and India. 
 *
 * The version of the OpenAPI document: 1.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Distance model module.
 * @module model/Distance
 * @version 1.2.3
 */
class Distance {
    /**
     * Constructs a new <code>Distance</code>.
     * @alias module:model/Distance
     */
    constructor() { 
        
        Distance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Distance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Distance} obj Optional instance to populate.
     * @return {module:model/Distance} The populated <code>Distance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Distance();

            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Distance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Distance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * unit of the distance
 * @member {module:model/Distance.UnitEnum} unit
 */
Distance.prototype['unit'] = undefined;

/**
 * great-circle distance between two locations. This distance thus do not take into account traffic conditions; international boundaries; mountains; water; or other elements that might make the a nearby location hard to reach.
 * @member {Number} value
 */
Distance.prototype['value'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
Distance['UnitEnum'] = {

    /**
     * value: "KM"
     * @const
     */
    "KM": "KM",

    /**
     * value: "MI"
     * @const
     */
    "MI": "MI"
};



export default Distance;

