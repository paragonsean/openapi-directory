/**
 * Airport & City Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, in test this API only contains data from the United States, Spain, United Kingdom, Germany and India. 
 *
 * The version of the OpenAPI document: 1.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error404 from '../model/Error404';
import Error500 from '../model/Error500';
import Success from '../model/Success';
import Success1 from '../model/Success1';

/**
* Location service.
* @module api/LocationApi
* @version 1.2.3
*/
export default class LocationApi {

    /**
    * Constructs a new LocationApi. 
    * @alias module:api/LocationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAirportCity operation.
     * @callback module:api/LocationApi~getAirportCityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific airports or cities based on its id.
     * @param {String} locationId identifier of the location
     * @param {module:api/LocationApi~getAirportCityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success1}
     */
    getAirportCity(locationId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling getAirportCity");
      }

      let pathParams = {
        'locationId': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Success1;
      return this.apiClient.callApi(
        '/reference-data/locations/{locationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAirportCitySearch operation.
     * @callback module:api/LocationApi~getAirportCitySearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of airports and cities matching a given keyword.
     * @param {Array.<module:model/String>} subType sub type of the location (AIRPORT and/or CITY)
     * @param {String} keyword keyword that should represent the start of a word in a city or airport name or code.   Supported charaters are: A-Za-z0-9./:-'()\"
     * @param {Object} opts Optional parameters
     * @param {String} [countryCode] Country code of the location using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code format (e.g. US).
     * @param {Number} [pageLimit = 10)] maximum items in one page
     * @param {Number} [pageOffset = 0)] start index of the requested page
     * @param {module:model/String} [sort = 'analytics.travelers.score')] defines on which attribute the sorting will be done: * analytics.travelers.score - sort by the number of travelers by airport or city, the airports and cities with the highest traffic are on top of the results 
     * @param {module:model/String} [view = 'FULL')] select the level of information of the reply: * LIGHT - Gives only the IATACode, name, detailedName, cityName and countryName * FULL - Adds on top of the LIGHT information the timeZoneOffset, geocode, detailed address and travelers.score default option is FULL 
     * @param {module:api/LocationApi~getAirportCitySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    getAirportCitySearch(subType, keyword, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subType' is set
      if (subType === undefined || subType === null) {
        throw new Error("Missing the required parameter 'subType' when calling getAirportCitySearch");
      }
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling getAirportCitySearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'subType': this.apiClient.buildCollectionParam(subType, 'csv'),
        'keyword': keyword,
        'countryCode': opts['countryCode'],
        'page[limit]': opts['pageLimit'],
        'page[offset]': opts['pageOffset'],
        'sort': opts['sort'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/reference-data/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
