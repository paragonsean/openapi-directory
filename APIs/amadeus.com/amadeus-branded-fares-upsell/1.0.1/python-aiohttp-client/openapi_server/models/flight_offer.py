# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_price import ExtendedPrice
from openapi_server.models.fare_rules import FareRules
from openapi_server.models.flight_offer_source import FlightOfferSource
from openapi_server.models.itineraries import Itineraries
from openapi_server.models.pricing_options import PricingOptions
from openapi_server.models.traveler_pricing import TravelerPricing
from openapi_server import util


class FlightOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_pricing: bool=None, fare_rules: FareRules=None, id: str=None, instant_ticketing_required: bool=None, itineraries: List[Itineraries]=None, last_ticketing_date: str=None, non_homogeneous: bool=None, number_of_bookable_seats: float=None, one_way: bool=None, payment_card_required: bool=None, price: ExtendedPrice=None, pricing_options: PricingOptions=None, source: FlightOfferSource=None, traveler_pricings: List[TravelerPricing]=None, type: str=None, validating_airline_codes: List[str]=None):
        """FlightOffer - a model defined in OpenAPI

        :param disable_pricing: The disable_pricing of this FlightOffer.
        :param fare_rules: The fare_rules of this FlightOffer.
        :param id: The id of this FlightOffer.
        :param instant_ticketing_required: The instant_ticketing_required of this FlightOffer.
        :param itineraries: The itineraries of this FlightOffer.
        :param last_ticketing_date: The last_ticketing_date of this FlightOffer.
        :param non_homogeneous: The non_homogeneous of this FlightOffer.
        :param number_of_bookable_seats: The number_of_bookable_seats of this FlightOffer.
        :param one_way: The one_way of this FlightOffer.
        :param payment_card_required: The payment_card_required of this FlightOffer.
        :param price: The price of this FlightOffer.
        :param pricing_options: The pricing_options of this FlightOffer.
        :param source: The source of this FlightOffer.
        :param traveler_pricings: The traveler_pricings of this FlightOffer.
        :param type: The type of this FlightOffer.
        :param validating_airline_codes: The validating_airline_codes of this FlightOffer.
        """
        self.openapi_types = {
            'disable_pricing': bool,
            'fare_rules': FareRules,
            'id': str,
            'instant_ticketing_required': bool,
            'itineraries': List[Itineraries],
            'last_ticketing_date': str,
            'non_homogeneous': bool,
            'number_of_bookable_seats': float,
            'one_way': bool,
            'payment_card_required': bool,
            'price': ExtendedPrice,
            'pricing_options': PricingOptions,
            'source': FlightOfferSource,
            'traveler_pricings': List[TravelerPricing],
            'type': str,
            'validating_airline_codes': List[str]
        }

        self.attribute_map = {
            'disable_pricing': 'disablePricing',
            'fare_rules': 'fareRules',
            'id': 'id',
            'instant_ticketing_required': 'instantTicketingRequired',
            'itineraries': 'itineraries',
            'last_ticketing_date': 'lastTicketingDate',
            'non_homogeneous': 'nonHomogeneous',
            'number_of_bookable_seats': 'numberOfBookableSeats',
            'one_way': 'oneWay',
            'payment_card_required': 'paymentCardRequired',
            'price': 'price',
            'pricing_options': 'pricingOptions',
            'source': 'source',
            'traveler_pricings': 'travelerPricings',
            'type': 'type',
            'validating_airline_codes': 'validatingAirlineCodes'
        }

        self._disable_pricing = disable_pricing
        self._fare_rules = fare_rules
        self._id = id
        self._instant_ticketing_required = instant_ticketing_required
        self._itineraries = itineraries
        self._last_ticketing_date = last_ticketing_date
        self._non_homogeneous = non_homogeneous
        self._number_of_bookable_seats = number_of_bookable_seats
        self._one_way = one_way
        self._payment_card_required = payment_card_required
        self._price = price
        self._pricing_options = pricing_options
        self._source = source
        self._traveler_pricings = traveler_pricings
        self._type = type
        self._validating_airline_codes = validating_airline_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightOffer of this FlightOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_pricing(self):
        """Gets the disable_pricing of this FlightOffer.

        BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \"GDS\"

        :return: The disable_pricing of this FlightOffer.
        :rtype: bool
        """
        return self._disable_pricing

    @disable_pricing.setter
    def disable_pricing(self, disable_pricing):
        """Sets the disable_pricing of this FlightOffer.

        BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \"GDS\"

        :param disable_pricing: The disable_pricing of this FlightOffer.
        :type disable_pricing: bool
        """

        self._disable_pricing = disable_pricing

    @property
    def fare_rules(self):
        """Gets the fare_rules of this FlightOffer.


        :return: The fare_rules of this FlightOffer.
        :rtype: FareRules
        """
        return self._fare_rules

    @fare_rules.setter
    def fare_rules(self, fare_rules):
        """Sets the fare_rules of this FlightOffer.


        :param fare_rules: The fare_rules of this FlightOffer.
        :type fare_rules: FareRules
        """

        self._fare_rules = fare_rules

    @property
    def id(self):
        """Gets the id of this FlightOffer.

        Id of the flight offer

        :return: The id of this FlightOffer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlightOffer.

        Id of the flight offer

        :param id: The id of this FlightOffer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instant_ticketing_required(self):
        """Gets the instant_ticketing_required of this FlightOffer.

        If true, inform that a ticketing will be required at booking step.

        :return: The instant_ticketing_required of this FlightOffer.
        :rtype: bool
        """
        return self._instant_ticketing_required

    @instant_ticketing_required.setter
    def instant_ticketing_required(self, instant_ticketing_required):
        """Sets the instant_ticketing_required of this FlightOffer.

        If true, inform that a ticketing will be required at booking step.

        :param instant_ticketing_required: The instant_ticketing_required of this FlightOffer.
        :type instant_ticketing_required: bool
        """

        self._instant_ticketing_required = instant_ticketing_required

    @property
    def itineraries(self):
        """Gets the itineraries of this FlightOffer.


        :return: The itineraries of this FlightOffer.
        :rtype: List[Itineraries]
        """
        return self._itineraries

    @itineraries.setter
    def itineraries(self, itineraries):
        """Sets the itineraries of this FlightOffer.


        :param itineraries: The itineraries of this FlightOffer.
        :type itineraries: List[Itineraries]
        """
        if itineraries is not None and len(itineraries) > 250:
            raise ValueError("Invalid value for `itineraries`, number of items must be less than or equal to `250`")
        if itineraries is not None and len(itineraries) < 1:
            raise ValueError("Invalid value for `itineraries`, number of items must be greater than or equal to `1`")

        self._itineraries = itineraries

    @property
    def last_ticketing_date(self):
        """Gets the last_ticketing_date of this FlightOffer.

        If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07

        :return: The last_ticketing_date of this FlightOffer.
        :rtype: str
        """
        return self._last_ticketing_date

    @last_ticketing_date.setter
    def last_ticketing_date(self, last_ticketing_date):
        """Sets the last_ticketing_date of this FlightOffer.

        If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07

        :param last_ticketing_date: The last_ticketing_date of this FlightOffer.
        :type last_ticketing_date: str
        """

        self._last_ticketing_date = last_ticketing_date

    @property
    def non_homogeneous(self):
        """Gets the non_homogeneous of this FlightOffer.

        If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)

        :return: The non_homogeneous of this FlightOffer.
        :rtype: bool
        """
        return self._non_homogeneous

    @non_homogeneous.setter
    def non_homogeneous(self, non_homogeneous):
        """Sets the non_homogeneous of this FlightOffer.

        If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)

        :param non_homogeneous: The non_homogeneous of this FlightOffer.
        :type non_homogeneous: bool
        """

        self._non_homogeneous = non_homogeneous

    @property
    def number_of_bookable_seats(self):
        """Gets the number_of_bookable_seats of this FlightOffer.

        Number of seats bookable in a single request. Can not be higher than 9.

        :return: The number_of_bookable_seats of this FlightOffer.
        :rtype: float
        """
        return self._number_of_bookable_seats

    @number_of_bookable_seats.setter
    def number_of_bookable_seats(self, number_of_bookable_seats):
        """Sets the number_of_bookable_seats of this FlightOffer.

        Number of seats bookable in a single request. Can not be higher than 9.

        :param number_of_bookable_seats: The number_of_bookable_seats of this FlightOffer.
        :type number_of_bookable_seats: float
        """
        if number_of_bookable_seats is not None and number_of_bookable_seats > 9:
            raise ValueError("Invalid value for `number_of_bookable_seats`, must be a value less than or equal to `9`")
        if number_of_bookable_seats is not None and number_of_bookable_seats < 1:
            raise ValueError("Invalid value for `number_of_bookable_seats`, must be a value greater than or equal to `1`")

        self._number_of_bookable_seats = number_of_bookable_seats

    @property
    def one_way(self):
        """Gets the one_way of this FlightOffer.

        If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.

        :return: The one_way of this FlightOffer.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this FlightOffer.

        If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.

        :param one_way: The one_way of this FlightOffer.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def payment_card_required(self):
        """Gets the payment_card_required of this FlightOffer.

        If true, a payment card is mandatory to book this flight offer

        :return: The payment_card_required of this FlightOffer.
        :rtype: bool
        """
        return self._payment_card_required

    @payment_card_required.setter
    def payment_card_required(self, payment_card_required):
        """Sets the payment_card_required of this FlightOffer.

        If true, a payment card is mandatory to book this flight offer

        :param payment_card_required: The payment_card_required of this FlightOffer.
        :type payment_card_required: bool
        """

        self._payment_card_required = payment_card_required

    @property
    def price(self):
        """Gets the price of this FlightOffer.


        :return: The price of this FlightOffer.
        :rtype: ExtendedPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FlightOffer.


        :param price: The price of this FlightOffer.
        :type price: ExtendedPrice
        """

        self._price = price

    @property
    def pricing_options(self):
        """Gets the pricing_options of this FlightOffer.


        :return: The pricing_options of this FlightOffer.
        :rtype: PricingOptions
        """
        return self._pricing_options

    @pricing_options.setter
    def pricing_options(self, pricing_options):
        """Sets the pricing_options of this FlightOffer.


        :param pricing_options: The pricing_options of this FlightOffer.
        :type pricing_options: PricingOptions
        """

        self._pricing_options = pricing_options

    @property
    def source(self):
        """Gets the source of this FlightOffer.


        :return: The source of this FlightOffer.
        :rtype: FlightOfferSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FlightOffer.


        :param source: The source of this FlightOffer.
        :type source: FlightOfferSource
        """

        self._source = source

    @property
    def traveler_pricings(self):
        """Gets the traveler_pricings of this FlightOffer.

        Fare information for each traveler/segment

        :return: The traveler_pricings of this FlightOffer.
        :rtype: List[TravelerPricing]
        """
        return self._traveler_pricings

    @traveler_pricings.setter
    def traveler_pricings(self, traveler_pricings):
        """Sets the traveler_pricings of this FlightOffer.

        Fare information for each traveler/segment

        :param traveler_pricings: The traveler_pricings of this FlightOffer.
        :type traveler_pricings: List[TravelerPricing]
        """
        if traveler_pricings is not None and len(traveler_pricings) > 18:
            raise ValueError("Invalid value for `traveler_pricings`, number of items must be less than or equal to `18`")
        if traveler_pricings is not None and len(traveler_pricings) < 1:
            raise ValueError("Invalid value for `traveler_pricings`, number of items must be greater than or equal to `1`")

        self._traveler_pricings = traveler_pricings

    @property
    def type(self):
        """Gets the type of this FlightOffer.

        the resource name

        :return: The type of this FlightOffer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlightOffer.

        the resource name

        :param type: The type of this FlightOffer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def validating_airline_codes(self):
        """Gets the validating_airline_codes of this FlightOffer.

        This option ensures that the system will only consider these airlines.

        :return: The validating_airline_codes of this FlightOffer.
        :rtype: List[str]
        """
        return self._validating_airline_codes

    @validating_airline_codes.setter
    def validating_airline_codes(self, validating_airline_codes):
        """Sets the validating_airline_codes of this FlightOffer.

        This option ensures that the system will only consider these airlines.

        :param validating_airline_codes: The validating_airline_codes of this FlightOffer.
        :type validating_airline_codes: List[str]
        """
        if validating_airline_codes is not None and len(validating_airline_codes) > 9:
            raise ValueError("Invalid value for `validating_airline_codes`, number of items must be less than or equal to `9`")
        if validating_airline_codes is not None and len(validating_airline_codes) < 1:
            raise ValueError("Invalid value for `validating_airline_codes`, number of items must be greater than or equal to `1`")

        self._validating_airline_codes = validating_airline_codes
