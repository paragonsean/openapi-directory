# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight_offer import FlightOffer
from openapi_server.models.payment import Payment
from openapi_server import util


class FlightOfferUpsellIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flight_offers: List[FlightOffer]=None, payments: List[Payment]=None, type: str=None):
        """FlightOfferUpsellIn - a model defined in OpenAPI

        :param flight_offers: The flight_offers of this FlightOfferUpsellIn.
        :param payments: The payments of this FlightOfferUpsellIn.
        :param type: The type of this FlightOfferUpsellIn.
        """
        self.openapi_types = {
            'flight_offers': List[FlightOffer],
            'payments': List[Payment],
            'type': str
        }

        self.attribute_map = {
            'flight_offers': 'flightOffers',
            'payments': 'payments',
            'type': 'type'
        }

        self._flight_offers = flight_offers
        self._payments = payments
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightOfferUpsellIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightOfferUpsellIn of this FlightOfferUpsellIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flight_offers(self):
        """Gets the flight_offers of this FlightOfferUpsellIn.

        list of flight offer to price

        :return: The flight_offers of this FlightOfferUpsellIn.
        :rtype: List[FlightOffer]
        """
        return self._flight_offers

    @flight_offers.setter
    def flight_offers(self, flight_offers):
        """Sets the flight_offers of this FlightOfferUpsellIn.

        list of flight offer to price

        :param flight_offers: The flight_offers of this FlightOfferUpsellIn.
        :type flight_offers: List[FlightOffer]
        """
        if flight_offers is None:
            raise ValueError("Invalid value for `flight_offers`, must not be `None`")
        if flight_offers is not None and len(flight_offers) > 6:
            raise ValueError("Invalid value for `flight_offers`, number of items must be less than or equal to `6`")
        if flight_offers is not None and len(flight_offers) < 1:
            raise ValueError("Invalid value for `flight_offers`, number of items must be greater than or equal to `1`")

        self._flight_offers = flight_offers

    @property
    def payments(self):
        """Gets the payments of this FlightOfferUpsellIn.

        payment information for retrieve eventual credit card fees

        :return: The payments of this FlightOfferUpsellIn.
        :rtype: List[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this FlightOfferUpsellIn.

        payment information for retrieve eventual credit card fees

        :param payments: The payments of this FlightOfferUpsellIn.
        :type payments: List[Payment]
        """
        if payments is not None and len(payments) > 6:
            raise ValueError("Invalid value for `payments`, number of items must be less than or equal to `6`")

        self._payments = payments

    @property
    def type(self):
        """Gets the type of this FlightOfferUpsellIn.

        the resource name

        :return: The type of this FlightOfferUpsellIn.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlightOfferUpsellIn.

        the resource name

        :param type: The type of this FlightOfferUpsellIn.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
