/**
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmenityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmenityType::OAIAmenityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmenityType::OAIAmenityType() {
    this->initializeModel();
}

OAIAmenityType::~OAIAmenityType() {}

void OAIAmenityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAmenityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAmenityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BUNDLED_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::BUNDLED_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BRANDED_FARES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::BRANDED_FARES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAGGAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::BAGGAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARBON_OFFSET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::CARBON_OFFSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREQUENT_FLYER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::FREQUENT_FLYER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GROUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::GROUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENTERTAINMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::ENTERTAINMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOUNGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::LOUNGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::MEDICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::MEAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PETS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::PETS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RULE_OVERRIDE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::RULE_OVERRIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDBY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::STANDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::STORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRAVEL_SERVICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::TRAVEL_SERVICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNACCOMPANIED_TRAVEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::UNACCOMPANIED_TRAVEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPGRADES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::UPGRADES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNACCOMPANIED_TRAVEL_UNESCORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::UNACCOMPANIED_TRAVEL_UNESCORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRE_RESERVED_SEAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmenityType::PRE_RESERVED_SEAT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAmenityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAmenityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAmenityType::BUNDLED_SERVICE:
            val = "BUNDLED_SERVICE";
            break;
        case eOAIAmenityType::BRANDED_FARES:
            val = "BRANDED_FARES";
            break;
        case eOAIAmenityType::BAGGAGE:
            val = "BAGGAGE";
            break;
        case eOAIAmenityType::CARBON_OFFSET:
            val = "CARBON_OFFSET";
            break;
        case eOAIAmenityType::FREQUENT_FLYER:
            val = "FREQUENT_FLYER";
            break;
        case eOAIAmenityType::GROUND:
            val = "GROUND";
            break;
        case eOAIAmenityType::ENTERTAINMENT:
            val = "ENTERTAINMENT";
            break;
        case eOAIAmenityType::LOUNGE:
            val = "LOUNGE";
            break;
        case eOAIAmenityType::MEDICAL:
            val = "MEDICAL";
            break;
        case eOAIAmenityType::MEAL:
            val = "MEAL";
            break;
        case eOAIAmenityType::PETS:
            val = "PETS";
            break;
        case eOAIAmenityType::RULE_OVERRIDE:
            val = "RULE_OVERRIDE";
            break;
        case eOAIAmenityType::STANDBY:
            val = "STANDBY";
            break;
        case eOAIAmenityType::STORE:
            val = "STORE";
            break;
        case eOAIAmenityType::TRAVEL_SERVICES:
            val = "TRAVEL_SERVICES";
            break;
        case eOAIAmenityType::UNACCOMPANIED_TRAVEL:
            val = "UNACCOMPANIED_TRAVEL";
            break;
        case eOAIAmenityType::UPGRADES:
            val = "UPGRADES";
            break;
        case eOAIAmenityType::UNACCOMPANIED_TRAVEL_UNESCORTED:
            val = "UNACCOMPANIED_TRAVEL_UNESCORTED";
            break;
        case eOAIAmenityType::PRE_RESERVED_SEAT:
            val = "PRE_RESERVED_SEAT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAmenityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAmenityType::eOAIAmenityType OAIAmenityType::getValue() const {
    return m_value;
}

void OAIAmenityType::setValue(const OAIAmenityType::eOAIAmenityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAmenityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAmenityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
