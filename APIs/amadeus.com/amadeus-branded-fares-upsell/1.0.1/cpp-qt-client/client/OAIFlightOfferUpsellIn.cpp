/**
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightOfferUpsellIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightOfferUpsellIn::OAIFlightOfferUpsellIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightOfferUpsellIn::OAIFlightOfferUpsellIn() {
    this->initializeModel();
}

OAIFlightOfferUpsellIn::~OAIFlightOfferUpsellIn() {}

void OAIFlightOfferUpsellIn::initializeModel() {

    m_flight_offers_isSet = false;
    m_flight_offers_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlightOfferUpsellIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightOfferUpsellIn::fromJsonObject(QJsonObject json) {

    m_flight_offers_isValid = ::OpenAPI::fromJsonValue(m_flight_offers, json[QString("flightOffers")]);
    m_flight_offers_isSet = !json[QString("flightOffers")].isNull() && m_flight_offers_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlightOfferUpsellIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightOfferUpsellIn::asJsonObject() const {
    QJsonObject obj;
    if (m_flight_offers.size() > 0) {
        obj.insert(QString("flightOffers"), ::OpenAPI::toJsonValue(m_flight_offers));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIFlightOffer> OAIFlightOfferUpsellIn::getFlightOffers() const {
    return m_flight_offers;
}
void OAIFlightOfferUpsellIn::setFlightOffers(const QList<OAIFlightOffer> &flight_offers) {
    m_flight_offers = flight_offers;
    m_flight_offers_isSet = true;
}

bool OAIFlightOfferUpsellIn::is_flight_offers_Set() const{
    return m_flight_offers_isSet;
}

bool OAIFlightOfferUpsellIn::is_flight_offers_Valid() const{
    return m_flight_offers_isValid;
}

QList<OAIPayment> OAIFlightOfferUpsellIn::getPayments() const {
    return m_payments;
}
void OAIFlightOfferUpsellIn::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIFlightOfferUpsellIn::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIFlightOfferUpsellIn::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIFlightOfferUpsellIn::getType() const {
    return m_type;
}
void OAIFlightOfferUpsellIn::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlightOfferUpsellIn::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlightOfferUpsellIn::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlightOfferUpsellIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flight_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightOfferUpsellIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flight_offers_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
