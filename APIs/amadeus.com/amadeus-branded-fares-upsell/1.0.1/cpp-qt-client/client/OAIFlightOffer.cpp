/**
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightOffer::OAIFlightOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightOffer::OAIFlightOffer() {
    this->initializeModel();
}

OAIFlightOffer::~OAIFlightOffer() {}

void OAIFlightOffer::initializeModel() {

    m_disable_pricing_isSet = false;
    m_disable_pricing_isValid = false;

    m_fare_rules_isSet = false;
    m_fare_rules_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instant_ticketing_required_isSet = false;
    m_instant_ticketing_required_isValid = false;

    m_itineraries_isSet = false;
    m_itineraries_isValid = false;

    m_last_ticketing_date_isSet = false;
    m_last_ticketing_date_isValid = false;

    m_non_homogeneous_isSet = false;
    m_non_homogeneous_isValid = false;

    m_number_of_bookable_seats_isSet = false;
    m_number_of_bookable_seats_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_payment_card_required_isSet = false;
    m_payment_card_required_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_pricing_options_isSet = false;
    m_pricing_options_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_traveler_pricings_isSet = false;
    m_traveler_pricings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validating_airline_codes_isSet = false;
    m_validating_airline_codes_isValid = false;
}

void OAIFlightOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightOffer::fromJsonObject(QJsonObject json) {

    m_disable_pricing_isValid = ::OpenAPI::fromJsonValue(m_disable_pricing, json[QString("disablePricing")]);
    m_disable_pricing_isSet = !json[QString("disablePricing")].isNull() && m_disable_pricing_isValid;

    m_fare_rules_isValid = ::OpenAPI::fromJsonValue(m_fare_rules, json[QString("fareRules")]);
    m_fare_rules_isSet = !json[QString("fareRules")].isNull() && m_fare_rules_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instant_ticketing_required_isValid = ::OpenAPI::fromJsonValue(m_instant_ticketing_required, json[QString("instantTicketingRequired")]);
    m_instant_ticketing_required_isSet = !json[QString("instantTicketingRequired")].isNull() && m_instant_ticketing_required_isValid;

    m_itineraries_isValid = ::OpenAPI::fromJsonValue(m_itineraries, json[QString("itineraries")]);
    m_itineraries_isSet = !json[QString("itineraries")].isNull() && m_itineraries_isValid;

    m_last_ticketing_date_isValid = ::OpenAPI::fromJsonValue(m_last_ticketing_date, json[QString("lastTicketingDate")]);
    m_last_ticketing_date_isSet = !json[QString("lastTicketingDate")].isNull() && m_last_ticketing_date_isValid;

    m_non_homogeneous_isValid = ::OpenAPI::fromJsonValue(m_non_homogeneous, json[QString("nonHomogeneous")]);
    m_non_homogeneous_isSet = !json[QString("nonHomogeneous")].isNull() && m_non_homogeneous_isValid;

    m_number_of_bookable_seats_isValid = ::OpenAPI::fromJsonValue(m_number_of_bookable_seats, json[QString("numberOfBookableSeats")]);
    m_number_of_bookable_seats_isSet = !json[QString("numberOfBookableSeats")].isNull() && m_number_of_bookable_seats_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("oneWay")]);
    m_one_way_isSet = !json[QString("oneWay")].isNull() && m_one_way_isValid;

    m_payment_card_required_isValid = ::OpenAPI::fromJsonValue(m_payment_card_required, json[QString("paymentCardRequired")]);
    m_payment_card_required_isSet = !json[QString("paymentCardRequired")].isNull() && m_payment_card_required_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_pricing_options_isValid = ::OpenAPI::fromJsonValue(m_pricing_options, json[QString("pricingOptions")]);
    m_pricing_options_isSet = !json[QString("pricingOptions")].isNull() && m_pricing_options_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_traveler_pricings_isValid = ::OpenAPI::fromJsonValue(m_traveler_pricings, json[QString("travelerPricings")]);
    m_traveler_pricings_isSet = !json[QString("travelerPricings")].isNull() && m_traveler_pricings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validating_airline_codes_isValid = ::OpenAPI::fromJsonValue(m_validating_airline_codes, json[QString("validatingAirlineCodes")]);
    m_validating_airline_codes_isSet = !json[QString("validatingAirlineCodes")].isNull() && m_validating_airline_codes_isValid;
}

QString OAIFlightOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_pricing_isSet) {
        obj.insert(QString("disablePricing"), ::OpenAPI::toJsonValue(m_disable_pricing));
    }
    if (m_fare_rules.isSet()) {
        obj.insert(QString("fareRules"), ::OpenAPI::toJsonValue(m_fare_rules));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instant_ticketing_required_isSet) {
        obj.insert(QString("instantTicketingRequired"), ::OpenAPI::toJsonValue(m_instant_ticketing_required));
    }
    if (m_itineraries.size() > 0) {
        obj.insert(QString("itineraries"), ::OpenAPI::toJsonValue(m_itineraries));
    }
    if (m_last_ticketing_date_isSet) {
        obj.insert(QString("lastTicketingDate"), ::OpenAPI::toJsonValue(m_last_ticketing_date));
    }
    if (m_non_homogeneous_isSet) {
        obj.insert(QString("nonHomogeneous"), ::OpenAPI::toJsonValue(m_non_homogeneous));
    }
    if (m_number_of_bookable_seats_isSet) {
        obj.insert(QString("numberOfBookableSeats"), ::OpenAPI::toJsonValue(m_number_of_bookable_seats));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("oneWay"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_payment_card_required_isSet) {
        obj.insert(QString("paymentCardRequired"), ::OpenAPI::toJsonValue(m_payment_card_required));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_pricing_options.isSet()) {
        obj.insert(QString("pricingOptions"), ::OpenAPI::toJsonValue(m_pricing_options));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_traveler_pricings.size() > 0) {
        obj.insert(QString("travelerPricings"), ::OpenAPI::toJsonValue(m_traveler_pricings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validating_airline_codes.size() > 0) {
        obj.insert(QString("validatingAirlineCodes"), ::OpenAPI::toJsonValue(m_validating_airline_codes));
    }
    return obj;
}

bool OAIFlightOffer::isDisablePricing() const {
    return m_disable_pricing;
}
void OAIFlightOffer::setDisablePricing(const bool &disable_pricing) {
    m_disable_pricing = disable_pricing;
    m_disable_pricing_isSet = true;
}

bool OAIFlightOffer::is_disable_pricing_Set() const{
    return m_disable_pricing_isSet;
}

bool OAIFlightOffer::is_disable_pricing_Valid() const{
    return m_disable_pricing_isValid;
}

OAIFareRules OAIFlightOffer::getFareRules() const {
    return m_fare_rules;
}
void OAIFlightOffer::setFareRules(const OAIFareRules &fare_rules) {
    m_fare_rules = fare_rules;
    m_fare_rules_isSet = true;
}

bool OAIFlightOffer::is_fare_rules_Set() const{
    return m_fare_rules_isSet;
}

bool OAIFlightOffer::is_fare_rules_Valid() const{
    return m_fare_rules_isValid;
}

QString OAIFlightOffer::getId() const {
    return m_id;
}
void OAIFlightOffer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlightOffer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlightOffer::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFlightOffer::isInstantTicketingRequired() const {
    return m_instant_ticketing_required;
}
void OAIFlightOffer::setInstantTicketingRequired(const bool &instant_ticketing_required) {
    m_instant_ticketing_required = instant_ticketing_required;
    m_instant_ticketing_required_isSet = true;
}

bool OAIFlightOffer::is_instant_ticketing_required_Set() const{
    return m_instant_ticketing_required_isSet;
}

bool OAIFlightOffer::is_instant_ticketing_required_Valid() const{
    return m_instant_ticketing_required_isValid;
}

QList<OAIItineraries> OAIFlightOffer::getItineraries() const {
    return m_itineraries;
}
void OAIFlightOffer::setItineraries(const QList<OAIItineraries> &itineraries) {
    m_itineraries = itineraries;
    m_itineraries_isSet = true;
}

bool OAIFlightOffer::is_itineraries_Set() const{
    return m_itineraries_isSet;
}

bool OAIFlightOffer::is_itineraries_Valid() const{
    return m_itineraries_isValid;
}

QString OAIFlightOffer::getLastTicketingDate() const {
    return m_last_ticketing_date;
}
void OAIFlightOffer::setLastTicketingDate(const QString &last_ticketing_date) {
    m_last_ticketing_date = last_ticketing_date;
    m_last_ticketing_date_isSet = true;
}

bool OAIFlightOffer::is_last_ticketing_date_Set() const{
    return m_last_ticketing_date_isSet;
}

bool OAIFlightOffer::is_last_ticketing_date_Valid() const{
    return m_last_ticketing_date_isValid;
}

bool OAIFlightOffer::isNonHomogeneous() const {
    return m_non_homogeneous;
}
void OAIFlightOffer::setNonHomogeneous(const bool &non_homogeneous) {
    m_non_homogeneous = non_homogeneous;
    m_non_homogeneous_isSet = true;
}

bool OAIFlightOffer::is_non_homogeneous_Set() const{
    return m_non_homogeneous_isSet;
}

bool OAIFlightOffer::is_non_homogeneous_Valid() const{
    return m_non_homogeneous_isValid;
}

double OAIFlightOffer::getNumberOfBookableSeats() const {
    return m_number_of_bookable_seats;
}
void OAIFlightOffer::setNumberOfBookableSeats(const double &number_of_bookable_seats) {
    m_number_of_bookable_seats = number_of_bookable_seats;
    m_number_of_bookable_seats_isSet = true;
}

bool OAIFlightOffer::is_number_of_bookable_seats_Set() const{
    return m_number_of_bookable_seats_isSet;
}

bool OAIFlightOffer::is_number_of_bookable_seats_Valid() const{
    return m_number_of_bookable_seats_isValid;
}

bool OAIFlightOffer::isOneWay() const {
    return m_one_way;
}
void OAIFlightOffer::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAIFlightOffer::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAIFlightOffer::is_one_way_Valid() const{
    return m_one_way_isValid;
}

bool OAIFlightOffer::isPaymentCardRequired() const {
    return m_payment_card_required;
}
void OAIFlightOffer::setPaymentCardRequired(const bool &payment_card_required) {
    m_payment_card_required = payment_card_required;
    m_payment_card_required_isSet = true;
}

bool OAIFlightOffer::is_payment_card_required_Set() const{
    return m_payment_card_required_isSet;
}

bool OAIFlightOffer::is_payment_card_required_Valid() const{
    return m_payment_card_required_isValid;
}

OAIExtended_Price OAIFlightOffer::getPrice() const {
    return m_price;
}
void OAIFlightOffer::setPrice(const OAIExtended_Price &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFlightOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFlightOffer::is_price_Valid() const{
    return m_price_isValid;
}

OAIPricingOptions OAIFlightOffer::getPricingOptions() const {
    return m_pricing_options;
}
void OAIFlightOffer::setPricingOptions(const OAIPricingOptions &pricing_options) {
    m_pricing_options = pricing_options;
    m_pricing_options_isSet = true;
}

bool OAIFlightOffer::is_pricing_options_Set() const{
    return m_pricing_options_isSet;
}

bool OAIFlightOffer::is_pricing_options_Valid() const{
    return m_pricing_options_isValid;
}

OAIFlightOfferSource OAIFlightOffer::getSource() const {
    return m_source;
}
void OAIFlightOffer::setSource(const OAIFlightOfferSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIFlightOffer::is_source_Set() const{
    return m_source_isSet;
}

bool OAIFlightOffer::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAITravelerPricing> OAIFlightOffer::getTravelerPricings() const {
    return m_traveler_pricings;
}
void OAIFlightOffer::setTravelerPricings(const QList<OAITravelerPricing> &traveler_pricings) {
    m_traveler_pricings = traveler_pricings;
    m_traveler_pricings_isSet = true;
}

bool OAIFlightOffer::is_traveler_pricings_Set() const{
    return m_traveler_pricings_isSet;
}

bool OAIFlightOffer::is_traveler_pricings_Valid() const{
    return m_traveler_pricings_isValid;
}

QString OAIFlightOffer::getType() const {
    return m_type;
}
void OAIFlightOffer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlightOffer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlightOffer::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIFlightOffer::getValidatingAirlineCodes() const {
    return m_validating_airline_codes;
}
void OAIFlightOffer::setValidatingAirlineCodes(const QList<QString> &validating_airline_codes) {
    m_validating_airline_codes = validating_airline_codes;
    m_validating_airline_codes_isSet = true;
}

bool OAIFlightOffer::is_validating_airline_codes_Set() const{
    return m_validating_airline_codes_isSet;
}

bool OAIFlightOffer::is_validating_airline_codes_Valid() const{
    return m_validating_airline_codes_isValid;
}

bool OAIFlightOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instant_ticketing_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itineraries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ticketing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_homogeneous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_bookable_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_card_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_pricings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validating_airline_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
