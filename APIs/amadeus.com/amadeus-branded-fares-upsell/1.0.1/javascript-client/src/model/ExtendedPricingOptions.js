/**
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExtendedPricingOptions model module.
 * @module model/ExtendedPricingOptions
 * @version 1.0.1
 */
class ExtendedPricingOptions {
    /**
     * Constructs a new <code>ExtendedPricingOptions</code>.
     * fare filter options
     * @alias module:model/ExtendedPricingOptions
     */
    constructor() { 
        
        ExtendedPricingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedPricingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedPricingOptions} obj Optional instance to populate.
     * @return {module:model/ExtendedPricingOptions} The populated <code>ExtendedPricingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedPricingOptions();

            if (data.hasOwnProperty('corporateCodes')) {
                obj['corporateCodes'] = ApiClient.convertToType(data['corporateCodes'], ['String']);
            }
            if (data.hasOwnProperty('fareType')) {
                obj['fareType'] = ApiClient.convertToType(data['fareType'], ['String']);
            }
            if (data.hasOwnProperty('includedCheckedBagsOnly')) {
                obj['includedCheckedBagsOnly'] = ApiClient.convertToType(data['includedCheckedBagsOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumDelayBeforeTicketing')) {
                obj['minimumDelayBeforeTicketing'] = ApiClient.convertToType(data['minimumDelayBeforeTicketing'], 'String');
            }
            if (data.hasOwnProperty('noPenaltyFare')) {
                obj['noPenaltyFare'] = ApiClient.convertToType(data['noPenaltyFare'], 'Boolean');
            }
            if (data.hasOwnProperty('noRestrictionFare')) {
                obj['noRestrictionFare'] = ApiClient.convertToType(data['noRestrictionFare'], 'Boolean');
            }
            if (data.hasOwnProperty('refundableFare')) {
                obj['refundableFare'] = ApiClient.convertToType(data['refundableFare'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedPricingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedPricingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['corporateCodes'])) {
            throw new Error("Expected the field `corporateCodes` to be an array in the JSON data but got " + data['corporateCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fareType'])) {
            throw new Error("Expected the field `fareType` to be an array in the JSON data but got " + data['fareType']);
        }
        // ensure the json data is a string
        if (data['minimumDelayBeforeTicketing'] && !(typeof data['minimumDelayBeforeTicketing'] === 'string' || data['minimumDelayBeforeTicketing'] instanceof String)) {
            throw new Error("Expected the field `minimumDelayBeforeTicketing` to be a primitive type in the JSON string but got " + data['minimumDelayBeforeTicketing']);
        }

        return true;
    }


}



/**
 * Allow Corporate negotiated fares using one or more corporate number (corporate code).
 * @member {Array.<String>} corporateCodes
 */
ExtendedPricingOptions.prototype['corporateCodes'] = undefined;

/**
 * type of fare of the flight-offer
 * @member {Array.<module:model/ExtendedPricingOptions.FareTypeEnum>} fareType
 */
ExtendedPricingOptions.prototype['fareType'] = undefined;

/**
 * If true, returns the flight-offers with included checked bags only
 * @member {Boolean} includedCheckedBagsOnly
 */
ExtendedPricingOptions.prototype['includedCheckedBagsOnly'] = undefined;

/**
 * Required delay before being able to ticket. This option ensures that the system will only search for flight-offers which can still be ticketed the last day after this delay. If booked on the same day as the search (with respect to provider timezone), such flight-offers are guaranteed to be thereafter valid for ticketing at least during this delay (last day included). This option has no effect on flight-offers for which the last ticketing date does not make sense. Overrides the default settings. Max 365D
 * @member {String} minimumDelayBeforeTicketing
 */
ExtendedPricingOptions.prototype['minimumDelayBeforeTicketing'] = undefined;

/**
 * If true, returns the flight-offers with no penalty fares only
 * @member {Boolean} noPenaltyFare
 */
ExtendedPricingOptions.prototype['noPenaltyFare'] = undefined;

/**
 * If true, returns the flight-offers with no restriction fares only
 * @member {Boolean} noRestrictionFare
 */
ExtendedPricingOptions.prototype['noRestrictionFare'] = undefined;

/**
 * If true, returns the flight-offers with refundable fares only
 * @member {Boolean} refundableFare
 */
ExtendedPricingOptions.prototype['refundableFare'] = undefined;





/**
 * Allowed values for the <code>fareType</code> property.
 * @enum {String}
 * @readonly
 */
ExtendedPricingOptions['FareTypeEnum'] = {

    /**
     * value: "PUBLISHED"
     * @const
     */
    "PUBLISHED": "PUBLISHED",

    /**
     * value: "NEGOTIATED"
     * @const
     */
    "NEGOTIATED": "NEGOTIATED",

    /**
     * value: "CORPORATE"
     * @const
     */
    "CORPORATE": "CORPORATE"
};



export default ExtendedPricingOptions;

