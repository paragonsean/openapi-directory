/**
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OneWayUpselledCombinations from './OneWayUpselledCombinations';

/**
 * The CollectionMetaUpsell model module.
 * @module model/CollectionMetaUpsell
 * @version 1.0.1
 */
class CollectionMetaUpsell {
    /**
     * Constructs a new <code>CollectionMetaUpsell</code>.
     * @alias module:model/CollectionMetaUpsell
     */
    constructor() { 
        
        CollectionMetaUpsell.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CollectionMetaUpsell</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionMetaUpsell} obj Optional instance to populate.
     * @return {module:model/CollectionMetaUpsell} The populated <code>CollectionMetaUpsell</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionMetaUpsell();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('oneWayUpselledCombinations')) {
                obj['oneWayUpselledCombinations'] = ApiClient.convertToType(data['oneWayUpselledCombinations'], [OneWayUpselledCombinations]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionMetaUpsell</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionMetaUpsell</code>.
     */
    static validateJSON(data) {
        if (data['oneWayUpselledCombinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['oneWayUpselledCombinations'])) {
                throw new Error("Expected the field `oneWayUpselledCombinations` to be an array in the JSON data but got " + data['oneWayUpselledCombinations']);
            }
            // validate the optional field `oneWayUpselledCombinations` (array)
            for (const item of data['oneWayUpselledCombinations']) {
                OneWayUpselledCombinations.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} count
 */
CollectionMetaUpsell.prototype['count'] = undefined;

/**
 * @member {Array.<module:model/OneWayUpselledCombinations>} oneWayUpselledCombinations
 */
CollectionMetaUpsell.prototype['oneWayUpselledCombinations'] = undefined;






export default CollectionMetaUpsell;

