/*
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * fare filter options
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:43.649656-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedPricingOptions {
  public static final String SERIALIZED_NAME_CORPORATE_CODES = "corporateCodes";
  @SerializedName(SERIALIZED_NAME_CORPORATE_CODES)
  private List<String> corporateCodes = new ArrayList<>();

  /**
   * Gets or Sets fareType
   */
  @JsonAdapter(FareTypeEnum.Adapter.class)
  public enum FareTypeEnum {
    PUBLISHED("PUBLISHED"),
    
    NEGOTIATED("NEGOTIATED"),
    
    CORPORATE("CORPORATE");

    private String value;

    FareTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FareTypeEnum fromValue(String value) {
      for (FareTypeEnum b : FareTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FareTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FareTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FareTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FareTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FareTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FARE_TYPE = "fareType";
  @SerializedName(SERIALIZED_NAME_FARE_TYPE)
  private List<FareTypeEnum> fareType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_CHECKED_BAGS_ONLY = "includedCheckedBagsOnly";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CHECKED_BAGS_ONLY)
  private Boolean includedCheckedBagsOnly;

  public static final String SERIALIZED_NAME_MINIMUM_DELAY_BEFORE_TICKETING = "minimumDelayBeforeTicketing";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DELAY_BEFORE_TICKETING)
  private String minimumDelayBeforeTicketing;

  public static final String SERIALIZED_NAME_NO_PENALTY_FARE = "noPenaltyFare";
  @SerializedName(SERIALIZED_NAME_NO_PENALTY_FARE)
  private Boolean noPenaltyFare;

  public static final String SERIALIZED_NAME_NO_RESTRICTION_FARE = "noRestrictionFare";
  @SerializedName(SERIALIZED_NAME_NO_RESTRICTION_FARE)
  private Boolean noRestrictionFare;

  public static final String SERIALIZED_NAME_REFUNDABLE_FARE = "refundableFare";
  @SerializedName(SERIALIZED_NAME_REFUNDABLE_FARE)
  private Boolean refundableFare;

  public ExtendedPricingOptions() {
  }

  public ExtendedPricingOptions corporateCodes(List<String> corporateCodes) {
    this.corporateCodes = corporateCodes;
    return this;
  }

  public ExtendedPricingOptions addCorporateCodesItem(String corporateCodesItem) {
    if (this.corporateCodes == null) {
      this.corporateCodes = new ArrayList<>();
    }
    this.corporateCodes.add(corporateCodesItem);
    return this;
  }

  /**
   * Allow Corporate negotiated fares using one or more corporate number (corporate code).
   * @return corporateCodes
   */
  @javax.annotation.Nullable
  public List<String> getCorporateCodes() {
    return corporateCodes;
  }

  public void setCorporateCodes(List<String> corporateCodes) {
    this.corporateCodes = corporateCodes;
  }


  public ExtendedPricingOptions fareType(List<FareTypeEnum> fareType) {
    this.fareType = fareType;
    return this;
  }

  public ExtendedPricingOptions addFareTypeItem(FareTypeEnum fareTypeItem) {
    if (this.fareType == null) {
      this.fareType = new ArrayList<>();
    }
    this.fareType.add(fareTypeItem);
    return this;
  }

  /**
   * type of fare of the flight-offer
   * @return fareType
   */
  @javax.annotation.Nullable
  public List<FareTypeEnum> getFareType() {
    return fareType;
  }

  public void setFareType(List<FareTypeEnum> fareType) {
    this.fareType = fareType;
  }


  public ExtendedPricingOptions includedCheckedBagsOnly(Boolean includedCheckedBagsOnly) {
    this.includedCheckedBagsOnly = includedCheckedBagsOnly;
    return this;
  }

  /**
   * If true, returns the flight-offers with included checked bags only
   * @return includedCheckedBagsOnly
   */
  @javax.annotation.Nullable
  public Boolean getIncludedCheckedBagsOnly() {
    return includedCheckedBagsOnly;
  }

  public void setIncludedCheckedBagsOnly(Boolean includedCheckedBagsOnly) {
    this.includedCheckedBagsOnly = includedCheckedBagsOnly;
  }


  public ExtendedPricingOptions minimumDelayBeforeTicketing(String minimumDelayBeforeTicketing) {
    this.minimumDelayBeforeTicketing = minimumDelayBeforeTicketing;
    return this;
  }

  /**
   * Required delay before being able to ticket. This option ensures that the system will only search for flight-offers which can still be ticketed the last day after this delay. If booked on the same day as the search (with respect to provider timezone), such flight-offers are guaranteed to be thereafter valid for ticketing at least during this delay (last day included). This option has no effect on flight-offers for which the last ticketing date does not make sense. Overrides the default settings. Max 365D
   * @return minimumDelayBeforeTicketing
   */
  @javax.annotation.Nullable
  public String getMinimumDelayBeforeTicketing() {
    return minimumDelayBeforeTicketing;
  }

  public void setMinimumDelayBeforeTicketing(String minimumDelayBeforeTicketing) {
    this.minimumDelayBeforeTicketing = minimumDelayBeforeTicketing;
  }


  public ExtendedPricingOptions noPenaltyFare(Boolean noPenaltyFare) {
    this.noPenaltyFare = noPenaltyFare;
    return this;
  }

  /**
   * If true, returns the flight-offers with no penalty fares only
   * @return noPenaltyFare
   */
  @javax.annotation.Nullable
  public Boolean getNoPenaltyFare() {
    return noPenaltyFare;
  }

  public void setNoPenaltyFare(Boolean noPenaltyFare) {
    this.noPenaltyFare = noPenaltyFare;
  }


  public ExtendedPricingOptions noRestrictionFare(Boolean noRestrictionFare) {
    this.noRestrictionFare = noRestrictionFare;
    return this;
  }

  /**
   * If true, returns the flight-offers with no restriction fares only
   * @return noRestrictionFare
   */
  @javax.annotation.Nullable
  public Boolean getNoRestrictionFare() {
    return noRestrictionFare;
  }

  public void setNoRestrictionFare(Boolean noRestrictionFare) {
    this.noRestrictionFare = noRestrictionFare;
  }


  public ExtendedPricingOptions refundableFare(Boolean refundableFare) {
    this.refundableFare = refundableFare;
    return this;
  }

  /**
   * If true, returns the flight-offers with refundable fares only
   * @return refundableFare
   */
  @javax.annotation.Nullable
  public Boolean getRefundableFare() {
    return refundableFare;
  }

  public void setRefundableFare(Boolean refundableFare) {
    this.refundableFare = refundableFare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedPricingOptions extendedPricingOptions = (ExtendedPricingOptions) o;
    return Objects.equals(this.corporateCodes, extendedPricingOptions.corporateCodes) &&
        Objects.equals(this.fareType, extendedPricingOptions.fareType) &&
        Objects.equals(this.includedCheckedBagsOnly, extendedPricingOptions.includedCheckedBagsOnly) &&
        Objects.equals(this.minimumDelayBeforeTicketing, extendedPricingOptions.minimumDelayBeforeTicketing) &&
        Objects.equals(this.noPenaltyFare, extendedPricingOptions.noPenaltyFare) &&
        Objects.equals(this.noRestrictionFare, extendedPricingOptions.noRestrictionFare) &&
        Objects.equals(this.refundableFare, extendedPricingOptions.refundableFare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corporateCodes, fareType, includedCheckedBagsOnly, minimumDelayBeforeTicketing, noPenaltyFare, noRestrictionFare, refundableFare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedPricingOptions {\n");
    sb.append("    corporateCodes: ").append(toIndentedString(corporateCodes)).append("\n");
    sb.append("    fareType: ").append(toIndentedString(fareType)).append("\n");
    sb.append("    includedCheckedBagsOnly: ").append(toIndentedString(includedCheckedBagsOnly)).append("\n");
    sb.append("    minimumDelayBeforeTicketing: ").append(toIndentedString(minimumDelayBeforeTicketing)).append("\n");
    sb.append("    noPenaltyFare: ").append(toIndentedString(noPenaltyFare)).append("\n");
    sb.append("    noRestrictionFare: ").append(toIndentedString(noRestrictionFare)).append("\n");
    sb.append("    refundableFare: ").append(toIndentedString(refundableFare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corporateCodes");
    openapiFields.add("fareType");
    openapiFields.add("includedCheckedBagsOnly");
    openapiFields.add("minimumDelayBeforeTicketing");
    openapiFields.add("noPenaltyFare");
    openapiFields.add("noRestrictionFare");
    openapiFields.add("refundableFare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedPricingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedPricingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedPricingOptions is not found in the empty JSON string", ExtendedPricingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedPricingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedPricingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("corporateCodes") != null && !jsonObj.get("corporateCodes").isJsonNull() && !jsonObj.get("corporateCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporateCodes` to be an array in the JSON string but got `%s`", jsonObj.get("corporateCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fareType") != null && !jsonObj.get("fareType").isJsonNull() && !jsonObj.get("fareType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fareType` to be an array in the JSON string but got `%s`", jsonObj.get("fareType").toString()));
      }
      if ((jsonObj.get("minimumDelayBeforeTicketing") != null && !jsonObj.get("minimumDelayBeforeTicketing").isJsonNull()) && !jsonObj.get("minimumDelayBeforeTicketing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumDelayBeforeTicketing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumDelayBeforeTicketing").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedPricingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedPricingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedPricingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedPricingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedPricingOptions>() {
           @Override
           public void write(JsonWriter out, ExtendedPricingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedPricingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedPricingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedPricingOptions
   * @throws IOException if the JSON string is invalid with respect to ExtendedPricingOptions
   */
  public static ExtendedPricingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedPricingOptions.class);
  }

  /**
   * Convert an instance of ExtendedPricingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

