/*
 * Branded Fares Upsell
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Amenity type
 */
@JsonAdapter(AmenityType.Adapter.class)
public enum AmenityType {
  
  BUNDLED_SERVICE("BUNDLED_SERVICE"),
  
  BRANDED_FARES("BRANDED_FARES"),
  
  BAGGAGE("BAGGAGE"),
  
  CARBON_OFFSET("CARBON_OFFSET"),
  
  FREQUENT_FLYER("FREQUENT_FLYER"),
  
  GROUND("GROUND"),
  
  ENTERTAINMENT("ENTERTAINMENT"),
  
  LOUNGE("LOUNGE"),
  
  MEDICAL("MEDICAL"),
  
  MEAL("MEAL"),
  
  PETS("PETS"),
  
  RULE_OVERRIDE("RULE_OVERRIDE"),
  
  STANDBY("STANDBY"),
  
  STORE("STORE"),
  
  TRAVEL_SERVICES("TRAVEL_SERVICES"),
  
  UNACCOMPANIED_TRAVEL("UNACCOMPANIED_TRAVEL"),
  
  UPGRADES("UPGRADES"),
  
  UNACCOMPANIED_TRAVEL_UNESCORTED("UNACCOMPANIED_TRAVEL_UNESCORTED"),
  
  PRE_RESERVED_SEAT("PRE_RESERVED_SEAT");

  private String value;

  AmenityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AmenityType fromValue(String value) {
    for (AmenityType b : AmenityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AmenityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AmenityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AmenityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AmenityType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AmenityType.fromValue(value);
  }
}

