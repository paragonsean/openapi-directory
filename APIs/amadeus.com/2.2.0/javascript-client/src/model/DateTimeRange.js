/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DateTimeRange model module.
 * @module model/DateTimeRange
 * @version 2.2.0
 */
class DateTimeRange {
    /**
     * Constructs a new <code>DateTimeRange</code>.
     * @alias module:model/DateTimeRange
     * @param date {Date} Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25
     */
    constructor(date) { 
        
        DateTimeRange.initialize(this, date);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date) { 
        obj['date'] = date;
    }

    /**
     * Constructs a <code>DateTimeRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateTimeRange} obj Optional instance to populate.
     * @return {module:model/DateTimeRange} The populated <code>DateTimeRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateTimeRange();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('dateWindow')) {
                obj['dateWindow'] = ApiClient.convertToType(data['dateWindow'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
            if (data.hasOwnProperty('timeWindow')) {
                obj['timeWindow'] = ApiClient.convertToType(data['timeWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DateTimeRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DateTimeRange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DateTimeRange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dateWindow'] && !(typeof data['dateWindow'] === 'string' || data['dateWindow'] instanceof String)) {
            throw new Error("Expected the field `dateWindow` to be a primitive type in the JSON string but got " + data['dateWindow']);
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }
        // ensure the json data is a string
        if (data['timeWindow'] && !(typeof data['timeWindow'] === 'string' || data['timeWindow'] instanceof String)) {
            throw new Error("Expected the field `timeWindow` to be a primitive type in the JSON string but got " + data['timeWindow']);
        }

        return true;
    }


}

DateTimeRange.RequiredProperties = ["date"];

/**
 * Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25
 * @member {Date} date
 */
DateTimeRange.prototype['date'] = undefined;

/**
 * Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)  Can not be combined with \"originRadius\" or \"destinationRadius\". 
 * @member {String} dateWindow
 */
DateTimeRange.prototype['dateWindow'] = undefined;

/**
 * Local time. hh:mm:ss format, e.g 10:30:00
 * @member {String} time
 */
DateTimeRange.prototype['time'] = undefined;

/**
 * 1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H  Can not be combined with \"originRadius\" or \"destinationRadius\". 
 * @member {String} timeWindow
 */
DateTimeRange.prototype['timeWindow'] = undefined;






export default DateTimeRange;

