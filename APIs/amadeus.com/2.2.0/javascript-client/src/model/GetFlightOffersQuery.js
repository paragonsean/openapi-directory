/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlightOfferSource from './FlightOfferSource';
import OriginDestination from './OriginDestination';
import SearchCriteria from './SearchCriteria';
import Traveler from './Traveler';

/**
 * The GetFlightOffersQuery model module.
 * @module model/GetFlightOffersQuery
 * @version 2.2.0
 */
class GetFlightOffersQuery {
    /**
     * Constructs a new <code>GetFlightOffersQuery</code>.
     * @alias module:model/GetFlightOffersQuery
     * @param originDestinations {Array.<module:model/OriginDestination>} Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.
     * @param sources {Array.<module:model/FlightOfferSource>} Allows enable one or more sources. If present in the list, these sources will be called by the system.
     * @param travelers {Array.<module:model/Traveler>} 
     */
    constructor(originDestinations, sources, travelers) { 
        
        GetFlightOffersQuery.initialize(this, originDestinations, sources, travelers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, originDestinations, sources, travelers) { 
        obj['originDestinations'] = originDestinations;
        obj['sources'] = sources;
        obj['travelers'] = travelers;
    }

    /**
     * Constructs a <code>GetFlightOffersQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetFlightOffersQuery} obj Optional instance to populate.
     * @return {module:model/GetFlightOffersQuery} The populated <code>GetFlightOffersQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetFlightOffersQuery();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('originDestinations')) {
                obj['originDestinations'] = ApiClient.convertToType(data['originDestinations'], [OriginDestination]);
            }
            if (data.hasOwnProperty('searchCriteria')) {
                obj['searchCriteria'] = SearchCriteria.constructFromObject(data['searchCriteria']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [FlightOfferSource]);
            }
            if (data.hasOwnProperty('travelers')) {
                obj['travelers'] = ApiClient.convertToType(data['travelers'], [Traveler]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetFlightOffersQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetFlightOffersQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetFlightOffersQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['originDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['originDestinations'])) {
                throw new Error("Expected the field `originDestinations` to be an array in the JSON data but got " + data['originDestinations']);
            }
            // validate the optional field `originDestinations` (array)
            for (const item of data['originDestinations']) {
                OriginDestination.validateJSON(item);
            };
        }
        // validate the optional field `searchCriteria`
        if (data['searchCriteria']) { // data not null
          SearchCriteria.validateJSON(data['searchCriteria']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        if (data['travelers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['travelers'])) {
                throw new Error("Expected the field `travelers` to be an array in the JSON data but got " + data['travelers']);
            }
            // validate the optional field `travelers` (array)
            for (const item of data['travelers']) {
                Traveler.validateJSON(item);
            };
        }

        return true;
    }


}

GetFlightOffersQuery.RequiredProperties = ["originDestinations", "sources", "travelers"];

/**
 * The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.
 * @member {String} currencyCode
 */
GetFlightOffersQuery.prototype['currencyCode'] = undefined;

/**
 * Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.
 * @member {Array.<module:model/OriginDestination>} originDestinations
 */
GetFlightOffersQuery.prototype['originDestinations'] = undefined;

/**
 * @member {module:model/SearchCriteria} searchCriteria
 */
GetFlightOffersQuery.prototype['searchCriteria'] = undefined;

/**
 * Allows enable one or more sources. If present in the list, these sources will be called by the system.
 * @member {Array.<module:model/FlightOfferSource>} sources
 */
GetFlightOffersQuery.prototype['sources'] = undefined;

/**
 * @member {Array.<module:model/Traveler>} travelers
 */
GetFlightOffersQuery.prototype['travelers'] = undefined;






export default GetFlightOffersQuery;

