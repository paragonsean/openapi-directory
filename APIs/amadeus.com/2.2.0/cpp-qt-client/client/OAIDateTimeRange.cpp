/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeRange::OAIDateTimeRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeRange::OAIDateTimeRange() {
    this->initializeModel();
}

OAIDateTimeRange::~OAIDateTimeRange() {}

void OAIDateTimeRange::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_window_isSet = false;
    m_date_window_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_time_window_isSet = false;
    m_time_window_isValid = false;
}

void OAIDateTimeRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeRange::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_window_isValid = ::OpenAPI::fromJsonValue(m_date_window, json[QString("dateWindow")]);
    m_date_window_isSet = !json[QString("dateWindow")].isNull() && m_date_window_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_time_window_isValid = ::OpenAPI::fromJsonValue(m_time_window, json[QString("timeWindow")]);
    m_time_window_isSet = !json[QString("timeWindow")].isNull() && m_time_window_isValid;
}

QString OAIDateTimeRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeRange::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_window_isSet) {
        obj.insert(QString("dateWindow"), ::OpenAPI::toJsonValue(m_date_window));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_time_window_isSet) {
        obj.insert(QString("timeWindow"), ::OpenAPI::toJsonValue(m_time_window));
    }
    return obj;
}

QDate OAIDateTimeRange::getDate() const {
    return m_date;
}
void OAIDateTimeRange::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDateTimeRange::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDateTimeRange::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIDateTimeRange::getDateWindow() const {
    return m_date_window;
}
void OAIDateTimeRange::setDateWindow(const QString &date_window) {
    m_date_window = date_window;
    m_date_window_isSet = true;
}

bool OAIDateTimeRange::is_date_window_Set() const{
    return m_date_window_isSet;
}

bool OAIDateTimeRange::is_date_window_Valid() const{
    return m_date_window_isValid;
}

QString OAIDateTimeRange::getTime() const {
    return m_time;
}
void OAIDateTimeRange::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIDateTimeRange::is_time_Set() const{
    return m_time_isSet;
}

bool OAIDateTimeRange::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIDateTimeRange::getTimeWindow() const {
    return m_time_window;
}
void OAIDateTimeRange::setTimeWindow(const QString &time_window) {
    m_time_window = time_window;
    m_time_window_isSet = true;
}

bool OAIDateTimeRange::is_time_window_Set() const{
    return m_time_window_isSet;
}

bool OAIDateTimeRange::is_time_window_Valid() const{
    return m_time_window_isValid;
}

bool OAIDateTimeRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && true;
}

} // namespace OpenAPI
