/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginDestination::OAIOriginDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginDestination::OAIOriginDestination() {
    this->initializeModel();
}

OAIOriginDestination::~OAIOriginDestination() {}

void OAIOriginDestination::initializeModel() {

    m_alternative_destinations_codes_isSet = false;
    m_alternative_destinations_codes_isValid = false;

    m_alternative_origins_codes_isSet = false;
    m_alternative_origins_codes_isValid = false;

    m_arrival_date_time_range_isSet = false;
    m_arrival_date_time_range_isValid = false;

    m_departure_date_time_range_isSet = false;
    m_departure_date_time_range_isValid = false;

    m_destination_location_code_isSet = false;
    m_destination_location_code_isValid = false;

    m_destination_radius_isSet = false;
    m_destination_radius_isValid = false;

    m_excluded_connection_points_isSet = false;
    m_excluded_connection_points_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_included_connection_points_isSet = false;
    m_included_connection_points_isValid = false;

    m_origin_location_code_isSet = false;
    m_origin_location_code_isValid = false;

    m_origin_radius_isSet = false;
    m_origin_radius_isValid = false;
}

void OAIOriginDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginDestination::fromJsonObject(QJsonObject json) {

    m_alternative_destinations_codes_isValid = ::OpenAPI::fromJsonValue(m_alternative_destinations_codes, json[QString("alternativeDestinationsCodes")]);
    m_alternative_destinations_codes_isSet = !json[QString("alternativeDestinationsCodes")].isNull() && m_alternative_destinations_codes_isValid;

    m_alternative_origins_codes_isValid = ::OpenAPI::fromJsonValue(m_alternative_origins_codes, json[QString("alternativeOriginsCodes")]);
    m_alternative_origins_codes_isSet = !json[QString("alternativeOriginsCodes")].isNull() && m_alternative_origins_codes_isValid;

    m_arrival_date_time_range_isValid = ::OpenAPI::fromJsonValue(m_arrival_date_time_range, json[QString("arrivalDateTimeRange")]);
    m_arrival_date_time_range_isSet = !json[QString("arrivalDateTimeRange")].isNull() && m_arrival_date_time_range_isValid;

    m_departure_date_time_range_isValid = ::OpenAPI::fromJsonValue(m_departure_date_time_range, json[QString("departureDateTimeRange")]);
    m_departure_date_time_range_isSet = !json[QString("departureDateTimeRange")].isNull() && m_departure_date_time_range_isValid;

    m_destination_location_code_isValid = ::OpenAPI::fromJsonValue(m_destination_location_code, json[QString("destinationLocationCode")]);
    m_destination_location_code_isSet = !json[QString("destinationLocationCode")].isNull() && m_destination_location_code_isValid;

    m_destination_radius_isValid = ::OpenAPI::fromJsonValue(m_destination_radius, json[QString("destinationRadius")]);
    m_destination_radius_isSet = !json[QString("destinationRadius")].isNull() && m_destination_radius_isValid;

    m_excluded_connection_points_isValid = ::OpenAPI::fromJsonValue(m_excluded_connection_points, json[QString("excludedConnectionPoints")]);
    m_excluded_connection_points_isSet = !json[QString("excludedConnectionPoints")].isNull() && m_excluded_connection_points_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_included_connection_points_isValid = ::OpenAPI::fromJsonValue(m_included_connection_points, json[QString("includedConnectionPoints")]);
    m_included_connection_points_isSet = !json[QString("includedConnectionPoints")].isNull() && m_included_connection_points_isValid;

    m_origin_location_code_isValid = ::OpenAPI::fromJsonValue(m_origin_location_code, json[QString("originLocationCode")]);
    m_origin_location_code_isSet = !json[QString("originLocationCode")].isNull() && m_origin_location_code_isValid;

    m_origin_radius_isValid = ::OpenAPI::fromJsonValue(m_origin_radius, json[QString("originRadius")]);
    m_origin_radius_isSet = !json[QString("originRadius")].isNull() && m_origin_radius_isValid;
}

QString OAIOriginDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_destinations_codes.size() > 0) {
        obj.insert(QString("alternativeDestinationsCodes"), ::OpenAPI::toJsonValue(m_alternative_destinations_codes));
    }
    if (m_alternative_origins_codes.size() > 0) {
        obj.insert(QString("alternativeOriginsCodes"), ::OpenAPI::toJsonValue(m_alternative_origins_codes));
    }
    if (m_arrival_date_time_range.isSet()) {
        obj.insert(QString("arrivalDateTimeRange"), ::OpenAPI::toJsonValue(m_arrival_date_time_range));
    }
    if (m_departure_date_time_range.isSet()) {
        obj.insert(QString("departureDateTimeRange"), ::OpenAPI::toJsonValue(m_departure_date_time_range));
    }
    if (m_destination_location_code_isSet) {
        obj.insert(QString("destinationLocationCode"), ::OpenAPI::toJsonValue(m_destination_location_code));
    }
    if (m_destination_radius_isSet) {
        obj.insert(QString("destinationRadius"), ::OpenAPI::toJsonValue(m_destination_radius));
    }
    if (m_excluded_connection_points.size() > 0) {
        obj.insert(QString("excludedConnectionPoints"), ::OpenAPI::toJsonValue(m_excluded_connection_points));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_included_connection_points.size() > 0) {
        obj.insert(QString("includedConnectionPoints"), ::OpenAPI::toJsonValue(m_included_connection_points));
    }
    if (m_origin_location_code_isSet) {
        obj.insert(QString("originLocationCode"), ::OpenAPI::toJsonValue(m_origin_location_code));
    }
    if (m_origin_radius_isSet) {
        obj.insert(QString("originRadius"), ::OpenAPI::toJsonValue(m_origin_radius));
    }
    return obj;
}

QList<QString> OAIOriginDestination::getAlternativeDestinationsCodes() const {
    return m_alternative_destinations_codes;
}
void OAIOriginDestination::setAlternativeDestinationsCodes(const QList<QString> &alternative_destinations_codes) {
    m_alternative_destinations_codes = alternative_destinations_codes;
    m_alternative_destinations_codes_isSet = true;
}

bool OAIOriginDestination::is_alternative_destinations_codes_Set() const{
    return m_alternative_destinations_codes_isSet;
}

bool OAIOriginDestination::is_alternative_destinations_codes_Valid() const{
    return m_alternative_destinations_codes_isValid;
}

QList<QString> OAIOriginDestination::getAlternativeOriginsCodes() const {
    return m_alternative_origins_codes;
}
void OAIOriginDestination::setAlternativeOriginsCodes(const QList<QString> &alternative_origins_codes) {
    m_alternative_origins_codes = alternative_origins_codes;
    m_alternative_origins_codes_isSet = true;
}

bool OAIOriginDestination::is_alternative_origins_codes_Set() const{
    return m_alternative_origins_codes_isSet;
}

bool OAIOriginDestination::is_alternative_origins_codes_Valid() const{
    return m_alternative_origins_codes_isValid;
}

OAIDateTimeRange OAIOriginDestination::getArrivalDateTimeRange() const {
    return m_arrival_date_time_range;
}
void OAIOriginDestination::setArrivalDateTimeRange(const OAIDateTimeRange &arrival_date_time_range) {
    m_arrival_date_time_range = arrival_date_time_range;
    m_arrival_date_time_range_isSet = true;
}

bool OAIOriginDestination::is_arrival_date_time_range_Set() const{
    return m_arrival_date_time_range_isSet;
}

bool OAIOriginDestination::is_arrival_date_time_range_Valid() const{
    return m_arrival_date_time_range_isValid;
}

OAIDateTimeRange OAIOriginDestination::getDepartureDateTimeRange() const {
    return m_departure_date_time_range;
}
void OAIOriginDestination::setDepartureDateTimeRange(const OAIDateTimeRange &departure_date_time_range) {
    m_departure_date_time_range = departure_date_time_range;
    m_departure_date_time_range_isSet = true;
}

bool OAIOriginDestination::is_departure_date_time_range_Set() const{
    return m_departure_date_time_range_isSet;
}

bool OAIOriginDestination::is_departure_date_time_range_Valid() const{
    return m_departure_date_time_range_isValid;
}

QString OAIOriginDestination::getDestinationLocationCode() const {
    return m_destination_location_code;
}
void OAIOriginDestination::setDestinationLocationCode(const QString &destination_location_code) {
    m_destination_location_code = destination_location_code;
    m_destination_location_code_isSet = true;
}

bool OAIOriginDestination::is_destination_location_code_Set() const{
    return m_destination_location_code_isSet;
}

bool OAIOriginDestination::is_destination_location_code_Valid() const{
    return m_destination_location_code_isValid;
}

double OAIOriginDestination::getDestinationRadius() const {
    return m_destination_radius;
}
void OAIOriginDestination::setDestinationRadius(const double &destination_radius) {
    m_destination_radius = destination_radius;
    m_destination_radius_isSet = true;
}

bool OAIOriginDestination::is_destination_radius_Set() const{
    return m_destination_radius_isSet;
}

bool OAIOriginDestination::is_destination_radius_Valid() const{
    return m_destination_radius_isValid;
}

QList<QString> OAIOriginDestination::getExcludedConnectionPoints() const {
    return m_excluded_connection_points;
}
void OAIOriginDestination::setExcludedConnectionPoints(const QList<QString> &excluded_connection_points) {
    m_excluded_connection_points = excluded_connection_points;
    m_excluded_connection_points_isSet = true;
}

bool OAIOriginDestination::is_excluded_connection_points_Set() const{
    return m_excluded_connection_points_isSet;
}

bool OAIOriginDestination::is_excluded_connection_points_Valid() const{
    return m_excluded_connection_points_isValid;
}

QString OAIOriginDestination::getId() const {
    return m_id;
}
void OAIOriginDestination::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOriginDestination::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOriginDestination::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIOriginDestination::getIncludedConnectionPoints() const {
    return m_included_connection_points;
}
void OAIOriginDestination::setIncludedConnectionPoints(const QList<QString> &included_connection_points) {
    m_included_connection_points = included_connection_points;
    m_included_connection_points_isSet = true;
}

bool OAIOriginDestination::is_included_connection_points_Set() const{
    return m_included_connection_points_isSet;
}

bool OAIOriginDestination::is_included_connection_points_Valid() const{
    return m_included_connection_points_isValid;
}

QString OAIOriginDestination::getOriginLocationCode() const {
    return m_origin_location_code;
}
void OAIOriginDestination::setOriginLocationCode(const QString &origin_location_code) {
    m_origin_location_code = origin_location_code;
    m_origin_location_code_isSet = true;
}

bool OAIOriginDestination::is_origin_location_code_Set() const{
    return m_origin_location_code_isSet;
}

bool OAIOriginDestination::is_origin_location_code_Valid() const{
    return m_origin_location_code_isValid;
}

double OAIOriginDestination::getOriginRadius() const {
    return m_origin_radius;
}
void OAIOriginDestination::setOriginRadius(const double &origin_radius) {
    m_origin_radius = origin_radius;
    m_origin_radius_isSet = true;
}

bool OAIOriginDestination::is_origin_radius_Set() const{
    return m_origin_radius_isSet;
}

bool OAIOriginDestination::is_origin_radius_Valid() const{
    return m_origin_radius_isValid;
}

bool OAIOriginDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_destinations_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_origins_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_connection_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_connection_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_radius_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
