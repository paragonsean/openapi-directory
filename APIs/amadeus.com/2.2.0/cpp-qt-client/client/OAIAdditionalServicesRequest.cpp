/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalServicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalServicesRequest::OAIAdditionalServicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalServicesRequest::OAIAdditionalServicesRequest() {
    this->initializeModel();
}

OAIAdditionalServicesRequest::~OAIAdditionalServicesRequest() {}

void OAIAdditionalServicesRequest::initializeModel() {

    m_chargeable_checked_bags_isSet = false;
    m_chargeable_checked_bags_isValid = false;

    m_chargeable_seat_number_isSet = false;
    m_chargeable_seat_number_isValid = false;

    m_other_services_isSet = false;
    m_other_services_isValid = false;
}

void OAIAdditionalServicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalServicesRequest::fromJsonObject(QJsonObject json) {

    m_chargeable_checked_bags_isValid = ::OpenAPI::fromJsonValue(m_chargeable_checked_bags, json[QString("chargeableCheckedBags")]);
    m_chargeable_checked_bags_isSet = !json[QString("chargeableCheckedBags")].isNull() && m_chargeable_checked_bags_isValid;

    m_chargeable_seat_number_isValid = ::OpenAPI::fromJsonValue(m_chargeable_seat_number, json[QString("chargeableSeatNumber")]);
    m_chargeable_seat_number_isSet = !json[QString("chargeableSeatNumber")].isNull() && m_chargeable_seat_number_isValid;

    m_other_services_isValid = ::OpenAPI::fromJsonValue(m_other_services, json[QString("otherServices")]);
    m_other_services_isSet = !json[QString("otherServices")].isNull() && m_other_services_isValid;
}

QString OAIAdditionalServicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalServicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_chargeable_checked_bags.isSet()) {
        obj.insert(QString("chargeableCheckedBags"), ::OpenAPI::toJsonValue(m_chargeable_checked_bags));
    }
    if (m_chargeable_seat_number_isSet) {
        obj.insert(QString("chargeableSeatNumber"), ::OpenAPI::toJsonValue(m_chargeable_seat_number));
    }
    if (m_other_services.size() > 0) {
        obj.insert(QString("otherServices"), ::OpenAPI::toJsonValue(m_other_services));
    }
    return obj;
}

OAIBaggageAllowance OAIAdditionalServicesRequest::getChargeableCheckedBags() const {
    return m_chargeable_checked_bags;
}
void OAIAdditionalServicesRequest::setChargeableCheckedBags(const OAIBaggageAllowance &chargeable_checked_bags) {
    m_chargeable_checked_bags = chargeable_checked_bags;
    m_chargeable_checked_bags_isSet = true;
}

bool OAIAdditionalServicesRequest::is_chargeable_checked_bags_Set() const{
    return m_chargeable_checked_bags_isSet;
}

bool OAIAdditionalServicesRequest::is_chargeable_checked_bags_Valid() const{
    return m_chargeable_checked_bags_isValid;
}

QString OAIAdditionalServicesRequest::getChargeableSeatNumber() const {
    return m_chargeable_seat_number;
}
void OAIAdditionalServicesRequest::setChargeableSeatNumber(const QString &chargeable_seat_number) {
    m_chargeable_seat_number = chargeable_seat_number;
    m_chargeable_seat_number_isSet = true;
}

bool OAIAdditionalServicesRequest::is_chargeable_seat_number_Set() const{
    return m_chargeable_seat_number_isSet;
}

bool OAIAdditionalServicesRequest::is_chargeable_seat_number_Valid() const{
    return m_chargeable_seat_number_isValid;
}

QList<OAIServiceName> OAIAdditionalServicesRequest::getOtherServices() const {
    return m_other_services;
}
void OAIAdditionalServicesRequest::setOtherServices(const QList<OAIServiceName> &other_services) {
    m_other_services = other_services;
    m_other_services_isSet = true;
}

bool OAIAdditionalServicesRequest::is_other_services_Set() const{
    return m_other_services_isSet;
}

bool OAIAdditionalServicesRequest::is_other_services_Valid() const{
    return m_other_services_isValid;
}

bool OAIAdditionalServicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chargeable_checked_bags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chargeable_seat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalServicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
