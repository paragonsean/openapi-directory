/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchCriteria::OAISearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchCriteria::OAISearchCriteria() {
    this->initializeModel();
}

OAISearchCriteria::~OAISearchCriteria() {}

void OAISearchCriteria::initializeModel() {

    m_add_one_way_offers_isSet = false;
    m_add_one_way_offers_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_allow_alternative_fare_options_isSet = false;
    m_allow_alternative_fare_options_isValid = false;

    m_exclude_allotments_isSet = false;
    m_exclude_allotments_isValid = false;

    m_flight_filters_isSet = false;
    m_flight_filters_isValid = false;

    m_max_flight_offers_isSet = false;
    m_max_flight_offers_isValid = false;

    m_max_price_isSet = false;
    m_max_price_isValid = false;

    m_one_flight_offer_per_day_isSet = false;
    m_one_flight_offer_per_day_isValid = false;

    m_pricing_options_isSet = false;
    m_pricing_options_isValid = false;
}

void OAISearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchCriteria::fromJsonObject(QJsonObject json) {

    m_add_one_way_offers_isValid = ::OpenAPI::fromJsonValue(m_add_one_way_offers, json[QString("addOneWayOffers")]);
    m_add_one_way_offers_isSet = !json[QString("addOneWayOffers")].isNull() && m_add_one_way_offers_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_allow_alternative_fare_options_isValid = ::OpenAPI::fromJsonValue(m_allow_alternative_fare_options, json[QString("allowAlternativeFareOptions")]);
    m_allow_alternative_fare_options_isSet = !json[QString("allowAlternativeFareOptions")].isNull() && m_allow_alternative_fare_options_isValid;

    m_exclude_allotments_isValid = ::OpenAPI::fromJsonValue(m_exclude_allotments, json[QString("excludeAllotments")]);
    m_exclude_allotments_isSet = !json[QString("excludeAllotments")].isNull() && m_exclude_allotments_isValid;

    m_flight_filters_isValid = ::OpenAPI::fromJsonValue(m_flight_filters, json[QString("flightFilters")]);
    m_flight_filters_isSet = !json[QString("flightFilters")].isNull() && m_flight_filters_isValid;

    m_max_flight_offers_isValid = ::OpenAPI::fromJsonValue(m_max_flight_offers, json[QString("maxFlightOffers")]);
    m_max_flight_offers_isSet = !json[QString("maxFlightOffers")].isNull() && m_max_flight_offers_isValid;

    m_max_price_isValid = ::OpenAPI::fromJsonValue(m_max_price, json[QString("maxPrice")]);
    m_max_price_isSet = !json[QString("maxPrice")].isNull() && m_max_price_isValid;

    m_one_flight_offer_per_day_isValid = ::OpenAPI::fromJsonValue(m_one_flight_offer_per_day, json[QString("oneFlightOfferPerDay")]);
    m_one_flight_offer_per_day_isSet = !json[QString("oneFlightOfferPerDay")].isNull() && m_one_flight_offer_per_day_isValid;

    m_pricing_options_isValid = ::OpenAPI::fromJsonValue(m_pricing_options, json[QString("pricingOptions")]);
    m_pricing_options_isSet = !json[QString("pricingOptions")].isNull() && m_pricing_options_isValid;
}

QString OAISearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_add_one_way_offers_isSet) {
        obj.insert(QString("addOneWayOffers"), ::OpenAPI::toJsonValue(m_add_one_way_offers));
    }
    if (m_additional_information.isSet()) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_allow_alternative_fare_options_isSet) {
        obj.insert(QString("allowAlternativeFareOptions"), ::OpenAPI::toJsonValue(m_allow_alternative_fare_options));
    }
    if (m_exclude_allotments_isSet) {
        obj.insert(QString("excludeAllotments"), ::OpenAPI::toJsonValue(m_exclude_allotments));
    }
    if (m_flight_filters.isSet()) {
        obj.insert(QString("flightFilters"), ::OpenAPI::toJsonValue(m_flight_filters));
    }
    if (m_max_flight_offers_isSet) {
        obj.insert(QString("maxFlightOffers"), ::OpenAPI::toJsonValue(m_max_flight_offers));
    }
    if (m_max_price_isSet) {
        obj.insert(QString("maxPrice"), ::OpenAPI::toJsonValue(m_max_price));
    }
    if (m_one_flight_offer_per_day_isSet) {
        obj.insert(QString("oneFlightOfferPerDay"), ::OpenAPI::toJsonValue(m_one_flight_offer_per_day));
    }
    if (m_pricing_options.isSet()) {
        obj.insert(QString("pricingOptions"), ::OpenAPI::toJsonValue(m_pricing_options));
    }
    return obj;
}

bool OAISearchCriteria::isAddOneWayOffers() const {
    return m_add_one_way_offers;
}
void OAISearchCriteria::setAddOneWayOffers(const bool &add_one_way_offers) {
    m_add_one_way_offers = add_one_way_offers;
    m_add_one_way_offers_isSet = true;
}

bool OAISearchCriteria::is_add_one_way_offers_Set() const{
    return m_add_one_way_offers_isSet;
}

bool OAISearchCriteria::is_add_one_way_offers_Valid() const{
    return m_add_one_way_offers_isValid;
}

OAIAdditionalInformation OAISearchCriteria::getAdditionalInformation() const {
    return m_additional_information;
}
void OAISearchCriteria::setAdditionalInformation(const OAIAdditionalInformation &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAISearchCriteria::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAISearchCriteria::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

bool OAISearchCriteria::isAllowAlternativeFareOptions() const {
    return m_allow_alternative_fare_options;
}
void OAISearchCriteria::setAllowAlternativeFareOptions(const bool &allow_alternative_fare_options) {
    m_allow_alternative_fare_options = allow_alternative_fare_options;
    m_allow_alternative_fare_options_isSet = true;
}

bool OAISearchCriteria::is_allow_alternative_fare_options_Set() const{
    return m_allow_alternative_fare_options_isSet;
}

bool OAISearchCriteria::is_allow_alternative_fare_options_Valid() const{
    return m_allow_alternative_fare_options_isValid;
}

bool OAISearchCriteria::isExcludeAllotments() const {
    return m_exclude_allotments;
}
void OAISearchCriteria::setExcludeAllotments(const bool &exclude_allotments) {
    m_exclude_allotments = exclude_allotments;
    m_exclude_allotments_isSet = true;
}

bool OAISearchCriteria::is_exclude_allotments_Set() const{
    return m_exclude_allotments_isSet;
}

bool OAISearchCriteria::is_exclude_allotments_Valid() const{
    return m_exclude_allotments_isValid;
}

OAIFlightFilters OAISearchCriteria::getFlightFilters() const {
    return m_flight_filters;
}
void OAISearchCriteria::setFlightFilters(const OAIFlightFilters &flight_filters) {
    m_flight_filters = flight_filters;
    m_flight_filters_isSet = true;
}

bool OAISearchCriteria::is_flight_filters_Set() const{
    return m_flight_filters_isSet;
}

bool OAISearchCriteria::is_flight_filters_Valid() const{
    return m_flight_filters_isValid;
}

double OAISearchCriteria::getMaxFlightOffers() const {
    return m_max_flight_offers;
}
void OAISearchCriteria::setMaxFlightOffers(const double &max_flight_offers) {
    m_max_flight_offers = max_flight_offers;
    m_max_flight_offers_isSet = true;
}

bool OAISearchCriteria::is_max_flight_offers_Set() const{
    return m_max_flight_offers_isSet;
}

bool OAISearchCriteria::is_max_flight_offers_Valid() const{
    return m_max_flight_offers_isValid;
}

qint32 OAISearchCriteria::getMaxPrice() const {
    return m_max_price;
}
void OAISearchCriteria::setMaxPrice(const qint32 &max_price) {
    m_max_price = max_price;
    m_max_price_isSet = true;
}

bool OAISearchCriteria::is_max_price_Set() const{
    return m_max_price_isSet;
}

bool OAISearchCriteria::is_max_price_Valid() const{
    return m_max_price_isValid;
}

bool OAISearchCriteria::isOneFlightOfferPerDay() const {
    return m_one_flight_offer_per_day;
}
void OAISearchCriteria::setOneFlightOfferPerDay(const bool &one_flight_offer_per_day) {
    m_one_flight_offer_per_day = one_flight_offer_per_day;
    m_one_flight_offer_per_day_isSet = true;
}

bool OAISearchCriteria::is_one_flight_offer_per_day_Set() const{
    return m_one_flight_offer_per_day_isSet;
}

bool OAISearchCriteria::is_one_flight_offer_per_day_Valid() const{
    return m_one_flight_offer_per_day_isValid;
}

OAIExtendedPricingOptions OAISearchCriteria::getPricingOptions() const {
    return m_pricing_options;
}
void OAISearchCriteria::setPricingOptions(const OAIExtendedPricingOptions &pricing_options) {
    m_pricing_options = pricing_options;
    m_pricing_options_isSet = true;
}

bool OAISearchCriteria::is_pricing_options_Set() const{
    return m_pricing_options_isSet;
}

bool OAISearchCriteria::is_pricing_options_Valid() const{
    return m_pricing_options_isValid;
}

bool OAISearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_one_way_offers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_alternative_fare_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_allotments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_flight_offers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_flight_offer_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
