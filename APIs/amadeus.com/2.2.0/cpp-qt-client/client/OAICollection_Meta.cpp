/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection_Meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection_Meta::OAICollection_Meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection_Meta::OAICollection_Meta() {
    this->initializeModel();
}

OAICollection_Meta::~OAICollection_Meta() {}

void OAICollection_Meta::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_one_way_combinations_isSet = false;
    m_one_way_combinations_isValid = false;
}

void OAICollection_Meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection_Meta::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_one_way_combinations_isValid = ::OpenAPI::fromJsonValue(m_one_way_combinations, json[QString("oneWayCombinations")]);
    m_one_way_combinations_isSet = !json[QString("oneWayCombinations")].isNull() && m_one_way_combinations_isValid;
}

QString OAICollection_Meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection_Meta::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_one_way_combinations.size() > 0) {
        obj.insert(QString("oneWayCombinations"), ::OpenAPI::toJsonValue(m_one_way_combinations));
    }
    return obj;
}

qint32 OAICollection_Meta::getCount() const {
    return m_count;
}
void OAICollection_Meta::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICollection_Meta::is_count_Set() const{
    return m_count_isSet;
}

bool OAICollection_Meta::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIOneWayCombinations> OAICollection_Meta::getOneWayCombinations() const {
    return m_one_way_combinations;
}
void OAICollection_Meta::setOneWayCombinations(const QList<OAIOneWayCombinations> &one_way_combinations) {
    m_one_way_combinations = one_way_combinations;
    m_one_way_combinations_isSet = true;
}

bool OAICollection_Meta::is_one_way_combinations_Set() const{
    return m_one_way_combinations_isSet;
}

bool OAICollection_Meta::is_one_way_combinations_Valid() const{
    return m_one_way_combinations_isValid;
}

bool OAICollection_Meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_combinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection_Meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
