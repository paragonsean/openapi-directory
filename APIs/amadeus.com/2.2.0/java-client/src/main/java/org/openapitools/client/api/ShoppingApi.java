/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.GetFlightOffersQuery;
import java.time.LocalDate;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.Success1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShoppingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShoppingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShoppingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFlightOffers
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25 (required)
     * @param adults the number of adult travelers (age 12 or older on date of departure). (required)
     * @param returnDate the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28 (optional)
     * @param children the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0 (optional)
     * @param infants the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0 (optional)
     * @param travelClass most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class (optional)
     * @param includedAirlineCodes This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param excludedAirlineCodes This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param nonStop if set to true, the search will find only flights going from the origin to the destination with no stop in between (optional, default to false)
     * @param currencyCode the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional)
     * @param maxPrice maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals (optional)
     * @param max maximum number of flight offers to return. If specified, the value should be greater than or equal to 1 (optional, default to 250)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightOffersCall(String originLocationCode, String destinationLocationCode, LocalDate departureDate, Integer adults, LocalDate returnDate, Integer children, Integer infants, String travelClass, String includedAirlineCodes, String excludedAirlineCodes, Boolean nonStop, String currencyCode, Integer maxPrice, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shopping/flight-offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originLocationCode", originLocationCode));
        }

        if (destinationLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationLocationCode", destinationLocationCode));
        }

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureDate", departureDate));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnDate", returnDate));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (children != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("children", children));
        }

        if (infants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("infants", infants));
        }

        if (travelClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelClass", travelClass));
        }

        if (includedAirlineCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includedAirlineCodes", includedAirlineCodes));
        }

        if (excludedAirlineCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAirlineCodes", excludedAirlineCodes));
        }

        if (nonStop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonStop", nonStop));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPrice", maxPrice));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlightOffersValidateBeforeCall(String originLocationCode, String destinationLocationCode, LocalDate departureDate, Integer adults, LocalDate returnDate, Integer children, Integer infants, String travelClass, String includedAirlineCodes, String excludedAirlineCodes, Boolean nonStop, String currencyCode, Integer maxPrice, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originLocationCode' is set
        if (originLocationCode == null) {
            throw new ApiException("Missing the required parameter 'originLocationCode' when calling getFlightOffers(Async)");
        }

        // verify the required parameter 'destinationLocationCode' is set
        if (destinationLocationCode == null) {
            throw new ApiException("Missing the required parameter 'destinationLocationCode' when calling getFlightOffers(Async)");
        }

        // verify the required parameter 'departureDate' is set
        if (departureDate == null) {
            throw new ApiException("Missing the required parameter 'departureDate' when calling getFlightOffers(Async)");
        }

        // verify the required parameter 'adults' is set
        if (adults == null) {
            throw new ApiException("Missing the required parameter 'adults' when calling getFlightOffers(Async)");
        }

        return getFlightOffersCall(originLocationCode, destinationLocationCode, departureDate, adults, returnDate, children, infants, travelClass, includedAirlineCodes, excludedAirlineCodes, nonStop, currencyCode, maxPrice, max, _callback);

    }

    /**
     * Return list of Flight Offers based on searching criteria.
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25 (required)
     * @param adults the number of adult travelers (age 12 or older on date of departure). (required)
     * @param returnDate the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28 (optional)
     * @param children the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0 (optional)
     * @param infants the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0 (optional)
     * @param travelClass most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class (optional)
     * @param includedAirlineCodes This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param excludedAirlineCodes This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param nonStop if set to true, the search will find only flights going from the origin to the destination with no stop in between (optional, default to false)
     * @param currencyCode the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional)
     * @param maxPrice maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals (optional)
     * @param max maximum number of flight offers to return. If specified, the value should be greater than or equal to 1 (optional, default to 250)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Success getFlightOffers(String originLocationCode, String destinationLocationCode, LocalDate departureDate, Integer adults, LocalDate returnDate, Integer children, Integer infants, String travelClass, String includedAirlineCodes, String excludedAirlineCodes, Boolean nonStop, String currencyCode, Integer maxPrice, Integer max) throws ApiException {
        ApiResponse<Success> localVarResp = getFlightOffersWithHttpInfo(originLocationCode, destinationLocationCode, departureDate, adults, returnDate, children, infants, travelClass, includedAirlineCodes, excludedAirlineCodes, nonStop, currencyCode, maxPrice, max);
        return localVarResp.getData();
    }

    /**
     * Return list of Flight Offers based on searching criteria.
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25 (required)
     * @param adults the number of adult travelers (age 12 or older on date of departure). (required)
     * @param returnDate the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28 (optional)
     * @param children the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0 (optional)
     * @param infants the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0 (optional)
     * @param travelClass most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class (optional)
     * @param includedAirlineCodes This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param excludedAirlineCodes This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param nonStop if set to true, the search will find only flights going from the origin to the destination with no stop in between (optional, default to false)
     * @param currencyCode the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional)
     * @param maxPrice maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals (optional)
     * @param max maximum number of flight offers to return. If specified, the value should be greater than or equal to 1 (optional, default to 250)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> getFlightOffersWithHttpInfo(String originLocationCode, String destinationLocationCode, LocalDate departureDate, Integer adults, LocalDate returnDate, Integer children, Integer infants, String travelClass, String includedAirlineCodes, String excludedAirlineCodes, Boolean nonStop, String currencyCode, Integer maxPrice, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getFlightOffersValidateBeforeCall(originLocationCode, destinationLocationCode, departureDate, adults, returnDate, children, infants, travelClass, includedAirlineCodes, excludedAirlineCodes, nonStop, currencyCode, maxPrice, max, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of Flight Offers based on searching criteria. (asynchronously)
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25 (required)
     * @param adults the number of adult travelers (age 12 or older on date of departure). (required)
     * @param returnDate the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28 (optional)
     * @param children the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0 (optional)
     * @param infants the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0 (optional)
     * @param travelClass most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class (optional)
     * @param includedAirlineCodes This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param excludedAirlineCodes This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X  (optional)
     * @param nonStop if set to true, the search will find only flights going from the origin to the destination with no stop in between (optional, default to false)
     * @param currencyCode the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro (optional)
     * @param maxPrice maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals (optional)
     * @param max maximum number of flight offers to return. If specified, the value should be greater than or equal to 1 (optional, default to 250)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightOffersAsync(String originLocationCode, String destinationLocationCode, LocalDate departureDate, Integer adults, LocalDate returnDate, Integer children, Integer infants, String travelClass, String includedAirlineCodes, String excludedAirlineCodes, Boolean nonStop, String currencyCode, Integer maxPrice, Integer max, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlightOffersValidateBeforeCall(originLocationCode, destinationLocationCode, departureDate, adults, returnDate, children, infants, travelClass, includedAirlineCodes, excludedAirlineCodes, nonStop, currencyCode, maxPrice, max, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFlightOffers
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param getFlightOffersQuery list of criteria to retrieve a list of flight offers (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFlightOffersCall(String xHTTPMethodOverride, GetFlightOffersQuery getFlightOffersQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFlightOffersQuery;

        // create path and map variables
        String localVarPath = "/shopping/flight-offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xHTTPMethodOverride != null) {
            localVarHeaderParams.put("X-HTTP-Method-Override", localVarApiClient.parameterToString(xHTTPMethodOverride));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.amadeus+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFlightOffersValidateBeforeCall(String xHTTPMethodOverride, GetFlightOffersQuery getFlightOffersQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xHTTPMethodOverride' is set
        if (xHTTPMethodOverride == null) {
            throw new ApiException("Missing the required parameter 'xHTTPMethodOverride' when calling searchFlightOffers(Async)");
        }

        // verify the required parameter 'getFlightOffersQuery' is set
        if (getFlightOffersQuery == null) {
            throw new ApiException("Missing the required parameter 'getFlightOffersQuery' when calling searchFlightOffers(Async)");
        }

        return searchFlightOffersCall(xHTTPMethodOverride, getFlightOffersQuery, _callback);

    }

    /**
     * Return list of Flight Offers based on posted searching criteria.
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param getFlightOffersQuery list of criteria to retrieve a list of flight offers (required)
     * @return Success1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Success1 searchFlightOffers(String xHTTPMethodOverride, GetFlightOffersQuery getFlightOffersQuery) throws ApiException {
        ApiResponse<Success1> localVarResp = searchFlightOffersWithHttpInfo(xHTTPMethodOverride, getFlightOffersQuery);
        return localVarResp.getData();
    }

    /**
     * Return list of Flight Offers based on posted searching criteria.
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param getFlightOffersQuery list of criteria to retrieve a list of flight offers (required)
     * @return ApiResponse&lt;Success1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success1> searchFlightOffersWithHttpInfo(String xHTTPMethodOverride, GetFlightOffersQuery getFlightOffersQuery) throws ApiException {
        okhttp3.Call localVarCall = searchFlightOffersValidateBeforeCall(xHTTPMethodOverride, getFlightOffersQuery, null);
        Type localVarReturnType = new TypeToken<Success1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of Flight Offers based on posted searching criteria. (asynchronously)
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param getFlightOffersQuery list of criteria to retrieve a list of flight offers (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 10661   | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED  32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFlightOffersAsync(String xHTTPMethodOverride, GetFlightOffersQuery getFlightOffersQuery, final ApiCallback<Success1> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFlightOffersValidateBeforeCall(xHTTPMethodOverride, getFlightOffersQuery, _callback);
        Type localVarReturnType = new TypeToken<Success1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
