/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Restriction towards carriers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:36.621787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarrierRestrictions {
  public static final String SERIALIZED_NAME_BLACKLISTED_IN_E_U_ALLOWED = "blacklistedInEUAllowed";
  @SerializedName(SERIALIZED_NAME_BLACKLISTED_IN_E_U_ALLOWED)
  private Boolean blacklistedInEUAllowed;

  public static final String SERIALIZED_NAME_EXCLUDED_CARRIER_CODES = "excludedCarrierCodes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CARRIER_CODES)
  private List<String> excludedCarrierCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_CARRIER_CODES = "includedCarrierCodes";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CARRIER_CODES)
  private List<String> includedCarrierCodes = new ArrayList<>();

  public CarrierRestrictions() {
  }

  public CarrierRestrictions blacklistedInEUAllowed(Boolean blacklistedInEUAllowed) {
    this.blacklistedInEUAllowed = blacklistedInEUAllowed;
    return this;
  }

  /**
   * This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline
   * @return blacklistedInEUAllowed
   */
  @javax.annotation.Nullable
  public Boolean getBlacklistedInEUAllowed() {
    return blacklistedInEUAllowed;
  }

  public void setBlacklistedInEUAllowed(Boolean blacklistedInEUAllowed) {
    this.blacklistedInEUAllowed = blacklistedInEUAllowed;
  }


  public CarrierRestrictions excludedCarrierCodes(List<String> excludedCarrierCodes) {
    this.excludedCarrierCodes = excludedCarrierCodes;
    return this;
  }

  public CarrierRestrictions addExcludedCarrierCodesItem(String excludedCarrierCodesItem) {
    if (this.excludedCarrierCodes == null) {
      this.excludedCarrierCodes = new ArrayList<>();
    }
    this.excludedCarrierCodes.add(excludedCarrierCodesItem);
    return this;
  }

  /**
   * This option ensures that the system will only consider these airlines.
   * @return excludedCarrierCodes
   */
  @javax.annotation.Nullable
  public List<String> getExcludedCarrierCodes() {
    return excludedCarrierCodes;
  }

  public void setExcludedCarrierCodes(List<String> excludedCarrierCodes) {
    this.excludedCarrierCodes = excludedCarrierCodes;
  }


  public CarrierRestrictions includedCarrierCodes(List<String> includedCarrierCodes) {
    this.includedCarrierCodes = includedCarrierCodes;
    return this;
  }

  public CarrierRestrictions addIncludedCarrierCodesItem(String includedCarrierCodesItem) {
    if (this.includedCarrierCodes == null) {
      this.includedCarrierCodes = new ArrayList<>();
    }
    this.includedCarrierCodes.add(includedCarrierCodesItem);
    return this;
  }

  /**
   * This option ensures that the system will only consider these airlines.
   * @return includedCarrierCodes
   */
  @javax.annotation.Nullable
  public List<String> getIncludedCarrierCodes() {
    return includedCarrierCodes;
  }

  public void setIncludedCarrierCodes(List<String> includedCarrierCodes) {
    this.includedCarrierCodes = includedCarrierCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarrierRestrictions carrierRestrictions = (CarrierRestrictions) o;
    return Objects.equals(this.blacklistedInEUAllowed, carrierRestrictions.blacklistedInEUAllowed) &&
        Objects.equals(this.excludedCarrierCodes, carrierRestrictions.excludedCarrierCodes) &&
        Objects.equals(this.includedCarrierCodes, carrierRestrictions.includedCarrierCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blacklistedInEUAllowed, excludedCarrierCodes, includedCarrierCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarrierRestrictions {\n");
    sb.append("    blacklistedInEUAllowed: ").append(toIndentedString(blacklistedInEUAllowed)).append("\n");
    sb.append("    excludedCarrierCodes: ").append(toIndentedString(excludedCarrierCodes)).append("\n");
    sb.append("    includedCarrierCodes: ").append(toIndentedString(includedCarrierCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blacklistedInEUAllowed");
    openapiFields.add("excludedCarrierCodes");
    openapiFields.add("includedCarrierCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarrierRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarrierRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarrierRestrictions is not found in the empty JSON string", CarrierRestrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarrierRestrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarrierRestrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedCarrierCodes") != null && !jsonObj.get("excludedCarrierCodes").isJsonNull() && !jsonObj.get("excludedCarrierCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedCarrierCodes` to be an array in the JSON string but got `%s`", jsonObj.get("excludedCarrierCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedCarrierCodes") != null && !jsonObj.get("includedCarrierCodes").isJsonNull() && !jsonObj.get("includedCarrierCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedCarrierCodes` to be an array in the JSON string but got `%s`", jsonObj.get("includedCarrierCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarrierRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarrierRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarrierRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarrierRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<CarrierRestrictions>() {
           @Override
           public void write(JsonWriter out, CarrierRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarrierRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarrierRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarrierRestrictions
   * @throws IOException if the JSON string is invalid with respect to CarrierRestrictions
   */
  public static CarrierRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarrierRestrictions.class);
  }

  /**
   * Convert an instance of CarrierRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

