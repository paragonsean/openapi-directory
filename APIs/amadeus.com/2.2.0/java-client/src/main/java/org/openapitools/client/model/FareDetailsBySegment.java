/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalServicesRequest;
import org.openapitools.client.model.AllotmentDetails;
import org.openapitools.client.model.BaggageAllowance;
import org.openapitools.client.model.SliceDiceIndicator;
import org.openapitools.client.model.TravelClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fare details of the segment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:36.621787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FareDetailsBySegment {
  public static final String SERIALIZED_NAME_ADDITIONAL_SERVICES = "additionalServices";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SERVICES)
  private AdditionalServicesRequest additionalServices;

  public static final String SERIALIZED_NAME_ALLOTMENT_DETAILS = "allotmentDetails";
  @SerializedName(SERIALIZED_NAME_ALLOTMENT_DETAILS)
  private AllotmentDetails allotmentDetails;

  public static final String SERIALIZED_NAME_BRANDED_FARE = "brandedFare";
  @SerializedName(SERIALIZED_NAME_BRANDED_FARE)
  private String brandedFare;

  public static final String SERIALIZED_NAME_CABIN = "cabin";
  @SerializedName(SERIALIZED_NAME_CABIN)
  private TravelClass cabin;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_FARE_BASIS = "fareBasis";
  @SerializedName(SERIALIZED_NAME_FARE_BASIS)
  private String fareBasis;

  public static final String SERIALIZED_NAME_INCLUDED_CHECKED_BAGS = "includedCheckedBags";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CHECKED_BAGS)
  private BaggageAllowance includedCheckedBags;

  public static final String SERIALIZED_NAME_IS_ALLOTMENT = "isAllotment";
  @SerializedName(SERIALIZED_NAME_IS_ALLOTMENT)
  private Boolean isAllotment;

  public static final String SERIALIZED_NAME_SEGMENT_ID = "segmentId";
  @SerializedName(SERIALIZED_NAME_SEGMENT_ID)
  private String segmentId;

  public static final String SERIALIZED_NAME_SLICE_DICE_INDICATOR = "sliceDiceIndicator";
  @SerializedName(SERIALIZED_NAME_SLICE_DICE_INDICATOR)
  private SliceDiceIndicator sliceDiceIndicator;

  public FareDetailsBySegment() {
  }

  public FareDetailsBySegment additionalServices(AdditionalServicesRequest additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

  /**
   * Get additionalServices
   * @return additionalServices
   */
  @javax.annotation.Nullable
  public AdditionalServicesRequest getAdditionalServices() {
    return additionalServices;
  }

  public void setAdditionalServices(AdditionalServicesRequest additionalServices) {
    this.additionalServices = additionalServices;
  }


  public FareDetailsBySegment allotmentDetails(AllotmentDetails allotmentDetails) {
    this.allotmentDetails = allotmentDetails;
    return this;
  }

  /**
   * Get allotmentDetails
   * @return allotmentDetails
   */
  @javax.annotation.Nullable
  public AllotmentDetails getAllotmentDetails() {
    return allotmentDetails;
  }

  public void setAllotmentDetails(AllotmentDetails allotmentDetails) {
    this.allotmentDetails = allotmentDetails;
  }


  public FareDetailsBySegment brandedFare(String brandedFare) {
    this.brandedFare = brandedFare;
    return this;
  }

  /**
   * The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
   * @return brandedFare
   */
  @javax.annotation.Nullable
  public String getBrandedFare() {
    return brandedFare;
  }

  public void setBrandedFare(String brandedFare) {
    this.brandedFare = brandedFare;
  }


  public FareDetailsBySegment cabin(TravelClass cabin) {
    this.cabin = cabin;
    return this;
  }

  /**
   * Get cabin
   * @return cabin
   */
  @javax.annotation.Nullable
  public TravelClass getCabin() {
    return cabin;
  }

  public void setCabin(TravelClass cabin) {
    this.cabin = cabin;
  }


  public FareDetailsBySegment propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public FareDetailsBySegment fareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
    return this;
  }

  /**
   * Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
   * @return fareBasis
   */
  @javax.annotation.Nullable
  public String getFareBasis() {
    return fareBasis;
  }

  public void setFareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
  }


  public FareDetailsBySegment includedCheckedBags(BaggageAllowance includedCheckedBags) {
    this.includedCheckedBags = includedCheckedBags;
    return this;
  }

  /**
   * Get includedCheckedBags
   * @return includedCheckedBags
   */
  @javax.annotation.Nullable
  public BaggageAllowance getIncludedCheckedBags() {
    return includedCheckedBags;
  }

  public void setIncludedCheckedBags(BaggageAllowance includedCheckedBags) {
    this.includedCheckedBags = includedCheckedBags;
  }


  public FareDetailsBySegment isAllotment(Boolean isAllotment) {
    this.isAllotment = isAllotment;
    return this;
  }

  /**
   * True if the corresponding booking class is in an allotment
   * @return isAllotment
   */
  @javax.annotation.Nullable
  public Boolean getIsAllotment() {
    return isAllotment;
  }

  public void setIsAllotment(Boolean isAllotment) {
    this.isAllotment = isAllotment;
  }


  public FareDetailsBySegment segmentId(String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

  /**
   * Id of the segment
   * @return segmentId
   */
  @javax.annotation.Nonnull
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }


  public FareDetailsBySegment sliceDiceIndicator(SliceDiceIndicator sliceDiceIndicator) {
    this.sliceDiceIndicator = sliceDiceIndicator;
    return this;
  }

  /**
   * Get sliceDiceIndicator
   * @return sliceDiceIndicator
   */
  @javax.annotation.Nullable
  public SliceDiceIndicator getSliceDiceIndicator() {
    return sliceDiceIndicator;
  }

  public void setSliceDiceIndicator(SliceDiceIndicator sliceDiceIndicator) {
    this.sliceDiceIndicator = sliceDiceIndicator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FareDetailsBySegment fareDetailsBySegment = (FareDetailsBySegment) o;
    return Objects.equals(this.additionalServices, fareDetailsBySegment.additionalServices) &&
        Objects.equals(this.allotmentDetails, fareDetailsBySegment.allotmentDetails) &&
        Objects.equals(this.brandedFare, fareDetailsBySegment.brandedFare) &&
        Objects.equals(this.cabin, fareDetailsBySegment.cabin) &&
        Objects.equals(this.propertyClass, fareDetailsBySegment.propertyClass) &&
        Objects.equals(this.fareBasis, fareDetailsBySegment.fareBasis) &&
        Objects.equals(this.includedCheckedBags, fareDetailsBySegment.includedCheckedBags) &&
        Objects.equals(this.isAllotment, fareDetailsBySegment.isAllotment) &&
        Objects.equals(this.segmentId, fareDetailsBySegment.segmentId) &&
        Objects.equals(this.sliceDiceIndicator, fareDetailsBySegment.sliceDiceIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalServices, allotmentDetails, brandedFare, cabin, propertyClass, fareBasis, includedCheckedBags, isAllotment, segmentId, sliceDiceIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FareDetailsBySegment {\n");
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("    allotmentDetails: ").append(toIndentedString(allotmentDetails)).append("\n");
    sb.append("    brandedFare: ").append(toIndentedString(brandedFare)).append("\n");
    sb.append("    cabin: ").append(toIndentedString(cabin)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    includedCheckedBags: ").append(toIndentedString(includedCheckedBags)).append("\n");
    sb.append("    isAllotment: ").append(toIndentedString(isAllotment)).append("\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("    sliceDiceIndicator: ").append(toIndentedString(sliceDiceIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalServices");
    openapiFields.add("allotmentDetails");
    openapiFields.add("brandedFare");
    openapiFields.add("cabin");
    openapiFields.add("class");
    openapiFields.add("fareBasis");
    openapiFields.add("includedCheckedBags");
    openapiFields.add("isAllotment");
    openapiFields.add("segmentId");
    openapiFields.add("sliceDiceIndicator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("segmentId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FareDetailsBySegment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FareDetailsBySegment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FareDetailsBySegment is not found in the empty JSON string", FareDetailsBySegment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FareDetailsBySegment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FareDetailsBySegment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FareDetailsBySegment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalServices`
      if (jsonObj.get("additionalServices") != null && !jsonObj.get("additionalServices").isJsonNull()) {
        AdditionalServicesRequest.validateJsonElement(jsonObj.get("additionalServices"));
      }
      // validate the optional field `allotmentDetails`
      if (jsonObj.get("allotmentDetails") != null && !jsonObj.get("allotmentDetails").isJsonNull()) {
        AllotmentDetails.validateJsonElement(jsonObj.get("allotmentDetails"));
      }
      if ((jsonObj.get("brandedFare") != null && !jsonObj.get("brandedFare").isJsonNull()) && !jsonObj.get("brandedFare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandedFare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandedFare").toString()));
      }
      // validate the optional field `cabin`
      if (jsonObj.get("cabin") != null && !jsonObj.get("cabin").isJsonNull()) {
        TravelClass.validateJsonElement(jsonObj.get("cabin"));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("fareBasis") != null && !jsonObj.get("fareBasis").isJsonNull()) && !jsonObj.get("fareBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fareBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fareBasis").toString()));
      }
      // validate the optional field `includedCheckedBags`
      if (jsonObj.get("includedCheckedBags") != null && !jsonObj.get("includedCheckedBags").isJsonNull()) {
        BaggageAllowance.validateJsonElement(jsonObj.get("includedCheckedBags"));
      }
      if (!jsonObj.get("segmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentId").toString()));
      }
      // validate the optional field `sliceDiceIndicator`
      if (jsonObj.get("sliceDiceIndicator") != null && !jsonObj.get("sliceDiceIndicator").isJsonNull()) {
        SliceDiceIndicator.validateJsonElement(jsonObj.get("sliceDiceIndicator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FareDetailsBySegment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FareDetailsBySegment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FareDetailsBySegment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FareDetailsBySegment.class));

       return (TypeAdapter<T>) new TypeAdapter<FareDetailsBySegment>() {
           @Override
           public void write(JsonWriter out, FareDetailsBySegment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FareDetailsBySegment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FareDetailsBySegment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FareDetailsBySegment
   * @throws IOException if the JSON string is invalid with respect to FareDetailsBySegment
   */
  public static FareDetailsBySegment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FareDetailsBySegment.class);
  }

  /**
   * Convert an instance of FareDetailsBySegment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

