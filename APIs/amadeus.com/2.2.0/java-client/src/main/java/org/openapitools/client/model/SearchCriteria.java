/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalInformation;
import org.openapitools.client.model.ExtendedPricingOptions;
import org.openapitools.client.model.FlightFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchCriteria
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:36.621787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchCriteria {
  public static final String SERIALIZED_NAME_ADD_ONE_WAY_OFFERS = "addOneWayOffers";
  @SerializedName(SERIALIZED_NAME_ADD_ONE_WAY_OFFERS)
  private Boolean addOneWayOffers;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private AdditionalInformation additionalInformation;

  public static final String SERIALIZED_NAME_ALLOW_ALTERNATIVE_FARE_OPTIONS = "allowAlternativeFareOptions";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALTERNATIVE_FARE_OPTIONS)
  private Boolean allowAlternativeFareOptions;

  public static final String SERIALIZED_NAME_EXCLUDE_ALLOTMENTS = "excludeAllotments";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ALLOTMENTS)
  private Boolean excludeAllotments;

  public static final String SERIALIZED_NAME_FLIGHT_FILTERS = "flightFilters";
  @SerializedName(SERIALIZED_NAME_FLIGHT_FILTERS)
  private FlightFilters flightFilters;

  public static final String SERIALIZED_NAME_MAX_FLIGHT_OFFERS = "maxFlightOffers";
  @SerializedName(SERIALIZED_NAME_MAX_FLIGHT_OFFERS)
  private BigDecimal maxFlightOffers = new BigDecimal("250");

  public static final String SERIALIZED_NAME_MAX_PRICE = "maxPrice";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private Integer maxPrice;

  public static final String SERIALIZED_NAME_ONE_FLIGHT_OFFER_PER_DAY = "oneFlightOfferPerDay";
  @SerializedName(SERIALIZED_NAME_ONE_FLIGHT_OFFER_PER_DAY)
  private Boolean oneFlightOfferPerDay;

  public static final String SERIALIZED_NAME_PRICING_OPTIONS = "pricingOptions";
  @SerializedName(SERIALIZED_NAME_PRICING_OPTIONS)
  private ExtendedPricingOptions pricingOptions;

  public SearchCriteria() {
  }

  public SearchCriteria addOneWayOffers(Boolean addOneWayOffers) {
    this.addOneWayOffers = addOneWayOffers;
    return this;
  }

  /**
   * This option allows activate the one-way combinable feature
   * @return addOneWayOffers
   */
  @javax.annotation.Nullable
  public Boolean getAddOneWayOffers() {
    return addOneWayOffers;
  }

  public void setAddOneWayOffers(Boolean addOneWayOffers) {
    this.addOneWayOffers = addOneWayOffers;
  }


  public SearchCriteria additionalInformation(AdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Get additionalInformation
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public AdditionalInformation getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(AdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public SearchCriteria allowAlternativeFareOptions(Boolean allowAlternativeFareOptions) {
    this.allowAlternativeFareOptions = allowAlternativeFareOptions;
    return this;
  }

  /**
   * This option allows to default to a standard fareOption if no offers are found for the selected fareOption.
   * @return allowAlternativeFareOptions
   */
  @javax.annotation.Nullable
  public Boolean getAllowAlternativeFareOptions() {
    return allowAlternativeFareOptions;
  }

  public void setAllowAlternativeFareOptions(Boolean allowAlternativeFareOptions) {
    this.allowAlternativeFareOptions = allowAlternativeFareOptions;
  }


  public SearchCriteria excludeAllotments(Boolean excludeAllotments) {
    this.excludeAllotments = excludeAllotments;
    return this;
  }

  /**
   * This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.
   * @return excludeAllotments
   */
  @javax.annotation.Nullable
  public Boolean getExcludeAllotments() {
    return excludeAllotments;
  }

  public void setExcludeAllotments(Boolean excludeAllotments) {
    this.excludeAllotments = excludeAllotments;
  }


  public SearchCriteria flightFilters(FlightFilters flightFilters) {
    this.flightFilters = flightFilters;
    return this;
  }

  /**
   * Get flightFilters
   * @return flightFilters
   */
  @javax.annotation.Nullable
  public FlightFilters getFlightFilters() {
    return flightFilters;
  }

  public void setFlightFilters(FlightFilters flightFilters) {
    this.flightFilters = flightFilters;
  }


  public SearchCriteria maxFlightOffers(BigDecimal maxFlightOffers) {
    this.maxFlightOffers = maxFlightOffers;
    return this;
  }

  /**
   * Maximum number of flight offers returned (Max 250)
   * @return maxFlightOffers
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxFlightOffers() {
    return maxFlightOffers;
  }

  public void setMaxFlightOffers(BigDecimal maxFlightOffers) {
    this.maxFlightOffers = maxFlightOffers;
  }


  public SearchCriteria maxPrice(Integer maxPrice) {
    this.maxPrice = maxPrice;
    return this;
  }

  /**
   * maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
   * @return maxPrice
   */
  @javax.annotation.Nullable
  public Integer getMaxPrice() {
    return maxPrice;
  }

  public void setMaxPrice(Integer maxPrice) {
    this.maxPrice = maxPrice;
  }


  public SearchCriteria oneFlightOfferPerDay(Boolean oneFlightOfferPerDay) {
    this.oneFlightOfferPerDay = oneFlightOfferPerDay;
    return this;
  }

  /**
   * Requests the system to find at least one flight-offer per day, if possible, when a range of dates is specified. Default is false.
   * @return oneFlightOfferPerDay
   */
  @javax.annotation.Nullable
  public Boolean getOneFlightOfferPerDay() {
    return oneFlightOfferPerDay;
  }

  public void setOneFlightOfferPerDay(Boolean oneFlightOfferPerDay) {
    this.oneFlightOfferPerDay = oneFlightOfferPerDay;
  }


  public SearchCriteria pricingOptions(ExtendedPricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
    return this;
  }

  /**
   * Get pricingOptions
   * @return pricingOptions
   */
  @javax.annotation.Nullable
  public ExtendedPricingOptions getPricingOptions() {
    return pricingOptions;
  }

  public void setPricingOptions(ExtendedPricingOptions pricingOptions) {
    this.pricingOptions = pricingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCriteria searchCriteria = (SearchCriteria) o;
    return Objects.equals(this.addOneWayOffers, searchCriteria.addOneWayOffers) &&
        Objects.equals(this.additionalInformation, searchCriteria.additionalInformation) &&
        Objects.equals(this.allowAlternativeFareOptions, searchCriteria.allowAlternativeFareOptions) &&
        Objects.equals(this.excludeAllotments, searchCriteria.excludeAllotments) &&
        Objects.equals(this.flightFilters, searchCriteria.flightFilters) &&
        Objects.equals(this.maxFlightOffers, searchCriteria.maxFlightOffers) &&
        Objects.equals(this.maxPrice, searchCriteria.maxPrice) &&
        Objects.equals(this.oneFlightOfferPerDay, searchCriteria.oneFlightOfferPerDay) &&
        Objects.equals(this.pricingOptions, searchCriteria.pricingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOneWayOffers, additionalInformation, allowAlternativeFareOptions, excludeAllotments, flightFilters, maxFlightOffers, maxPrice, oneFlightOfferPerDay, pricingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCriteria {\n");
    sb.append("    addOneWayOffers: ").append(toIndentedString(addOneWayOffers)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    allowAlternativeFareOptions: ").append(toIndentedString(allowAlternativeFareOptions)).append("\n");
    sb.append("    excludeAllotments: ").append(toIndentedString(excludeAllotments)).append("\n");
    sb.append("    flightFilters: ").append(toIndentedString(flightFilters)).append("\n");
    sb.append("    maxFlightOffers: ").append(toIndentedString(maxFlightOffers)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    oneFlightOfferPerDay: ").append(toIndentedString(oneFlightOfferPerDay)).append("\n");
    sb.append("    pricingOptions: ").append(toIndentedString(pricingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOneWayOffers");
    openapiFields.add("additionalInformation");
    openapiFields.add("allowAlternativeFareOptions");
    openapiFields.add("excludeAllotments");
    openapiFields.add("flightFilters");
    openapiFields.add("maxFlightOffers");
    openapiFields.add("maxPrice");
    openapiFields.add("oneFlightOfferPerDay");
    openapiFields.add("pricingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCriteria is not found in the empty JSON string", SearchCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalInformation`
      if (jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) {
        AdditionalInformation.validateJsonElement(jsonObj.get("additionalInformation"));
      }
      // validate the optional field `flightFilters`
      if (jsonObj.get("flightFilters") != null && !jsonObj.get("flightFilters").isJsonNull()) {
        FlightFilters.validateJsonElement(jsonObj.get("flightFilters"));
      }
      // validate the optional field `pricingOptions`
      if (jsonObj.get("pricingOptions") != null && !jsonObj.get("pricingOptions").isJsonNull()) {
        ExtendedPricingOptions.validateJsonElement(jsonObj.get("pricingOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCriteria>() {
           @Override
           public void write(JsonWriter out, SearchCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchCriteria
   * @throws IOException if the JSON string is invalid with respect to SearchCriteria
   */
  public static SearchCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCriteria.class);
  }

  /**
   * Convert an instance of SearchCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

