/*
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OriginDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:36.621787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginDestination {
  public static final String SERIALIZED_NAME_ALTERNATIVE_DESTINATIONS_CODES = "alternativeDestinationsCodes";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_DESTINATIONS_CODES)
  private List<String> alternativeDestinationsCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALTERNATIVE_ORIGINS_CODES = "alternativeOriginsCodes";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_ORIGINS_CODES)
  private List<String> alternativeOriginsCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARRIVAL_DATE_TIME_RANGE = "arrivalDateTimeRange";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE_TIME_RANGE)
  private DateTimeRange arrivalDateTimeRange;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE_TIME_RANGE = "departureDateTimeRange";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE_TIME_RANGE)
  private DateTimeRange departureDateTimeRange;

  public static final String SERIALIZED_NAME_DESTINATION_LOCATION_CODE = "destinationLocationCode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_LOCATION_CODE)
  private String destinationLocationCode;

  public static final String SERIALIZED_NAME_DESTINATION_RADIUS = "destinationRadius";
  @SerializedName(SERIALIZED_NAME_DESTINATION_RADIUS)
  private BigDecimal destinationRadius;

  public static final String SERIALIZED_NAME_EXCLUDED_CONNECTION_POINTS = "excludedConnectionPoints";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CONNECTION_POINTS)
  private List<String> excludedConnectionPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUDED_CONNECTION_POINTS = "includedConnectionPoints";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CONNECTION_POINTS)
  private List<String> includedConnectionPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGIN_LOCATION_CODE = "originLocationCode";
  @SerializedName(SERIALIZED_NAME_ORIGIN_LOCATION_CODE)
  private String originLocationCode;

  public static final String SERIALIZED_NAME_ORIGIN_RADIUS = "originRadius";
  @SerializedName(SERIALIZED_NAME_ORIGIN_RADIUS)
  private BigDecimal originRadius;

  public OriginDestination() {
  }

  public OriginDestination alternativeDestinationsCodes(List<String> alternativeDestinationsCodes) {
    this.alternativeDestinationsCodes = alternativeDestinationsCodes;
    return this;
  }

  public OriginDestination addAlternativeDestinationsCodesItem(String alternativeDestinationsCodesItem) {
    if (this.alternativeDestinationsCodes == null) {
      this.alternativeDestinationsCodes = new ArrayList<>();
    }
    this.alternativeDestinationsCodes.add(alternativeDestinationsCodesItem);
    return this;
  }

  /**
   * Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return alternativeDestinationsCodes
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeDestinationsCodes() {
    return alternativeDestinationsCodes;
  }

  public void setAlternativeDestinationsCodes(List<String> alternativeDestinationsCodes) {
    this.alternativeDestinationsCodes = alternativeDestinationsCodes;
  }


  public OriginDestination alternativeOriginsCodes(List<String> alternativeOriginsCodes) {
    this.alternativeOriginsCodes = alternativeOriginsCodes;
    return this;
  }

  public OriginDestination addAlternativeOriginsCodesItem(String alternativeOriginsCodesItem) {
    if (this.alternativeOriginsCodes == null) {
      this.alternativeOriginsCodes = new ArrayList<>();
    }
    this.alternativeOriginsCodes.add(alternativeOriginsCodesItem);
    return this;
  }

  /**
   * Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return alternativeOriginsCodes
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeOriginsCodes() {
    return alternativeOriginsCodes;
  }

  public void setAlternativeOriginsCodes(List<String> alternativeOriginsCodes) {
    this.alternativeOriginsCodes = alternativeOriginsCodes;
  }


  public OriginDestination arrivalDateTimeRange(DateTimeRange arrivalDateTimeRange) {
    this.arrivalDateTimeRange = arrivalDateTimeRange;
    return this;
  }

  /**
   * Get arrivalDateTimeRange
   * @return arrivalDateTimeRange
   */
  @javax.annotation.Nullable
  public DateTimeRange getArrivalDateTimeRange() {
    return arrivalDateTimeRange;
  }

  public void setArrivalDateTimeRange(DateTimeRange arrivalDateTimeRange) {
    this.arrivalDateTimeRange = arrivalDateTimeRange;
  }


  public OriginDestination departureDateTimeRange(DateTimeRange departureDateTimeRange) {
    this.departureDateTimeRange = departureDateTimeRange;
    return this;
  }

  /**
   * Get departureDateTimeRange
   * @return departureDateTimeRange
   */
  @javax.annotation.Nullable
  public DateTimeRange getDepartureDateTimeRange() {
    return departureDateTimeRange;
  }

  public void setDepartureDateTimeRange(DateTimeRange departureDateTimeRange) {
    this.departureDateTimeRange = departureDateTimeRange;
  }


  public OriginDestination destinationLocationCode(String destinationLocationCode) {
    this.destinationLocationCode = destinationLocationCode;
    return this;
  }

  /**
   * Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return destinationLocationCode
   */
  @javax.annotation.Nullable
  public String getDestinationLocationCode() {
    return destinationLocationCode;
  }

  public void setDestinationLocationCode(String destinationLocationCode) {
    this.destinationLocationCode = destinationLocationCode;
  }


  public OriginDestination destinationRadius(BigDecimal destinationRadius) {
    this.destinationRadius = destinationRadius;
    return this;
  }

  /**
   * Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \&quot;dateWindow\&quot; or \&quot;timeWindow\&quot;. 
   * @return destinationRadius
   */
  @javax.annotation.Nullable
  public BigDecimal getDestinationRadius() {
    return destinationRadius;
  }

  public void setDestinationRadius(BigDecimal destinationRadius) {
    this.destinationRadius = destinationRadius;
  }


  public OriginDestination excludedConnectionPoints(List<String> excludedConnectionPoints) {
    this.excludedConnectionPoints = excludedConnectionPoints;
    return this;
  }

  public OriginDestination addExcludedConnectionPointsItem(String excludedConnectionPointsItem) {
    if (this.excludedConnectionPoints == null) {
      this.excludedConnectionPoints = new ArrayList<>();
    }
    this.excludedConnectionPoints.add(excludedConnectionPointsItem);
    return this;
  }

  /**
   * List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
   * @return excludedConnectionPoints
   */
  @javax.annotation.Nullable
  public List<String> getExcludedConnectionPoints() {
    return excludedConnectionPoints;
  }

  public void setExcludedConnectionPoints(List<String> excludedConnectionPoints) {
    this.excludedConnectionPoints = excludedConnectionPoints;
  }


  public OriginDestination id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OriginDestination includedConnectionPoints(List<String> includedConnectionPoints) {
    this.includedConnectionPoints = includedConnectionPoints;
    return this;
  }

  public OriginDestination addIncludedConnectionPointsItem(String includedConnectionPointsItem) {
    if (this.includedConnectionPoints == null) {
      this.includedConnectionPoints = new ArrayList<>();
    }
    this.includedConnectionPoints.add(includedConnectionPointsItem);
    return this;
  }

  /**
   * List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
   * @return includedConnectionPoints
   */
  @javax.annotation.Nullable
  public List<String> getIncludedConnectionPoints() {
    return includedConnectionPoints;
  }

  public void setIncludedConnectionPoints(List<String> includedConnectionPoints) {
    this.includedConnectionPoints = includedConnectionPoints;
  }


  public OriginDestination originLocationCode(String originLocationCode) {
    this.originLocationCode = originLocationCode;
    return this;
  }

  /**
   * Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return originLocationCode
   */
  @javax.annotation.Nullable
  public String getOriginLocationCode() {
    return originLocationCode;
  }

  public void setOriginLocationCode(String originLocationCode) {
    this.originLocationCode = originLocationCode;
  }


  public OriginDestination originRadius(BigDecimal originRadius) {
    this.originRadius = originRadius;
    return this;
  }

  /**
   * Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \&quot;dateWindow\&quot; or \&quot;timeWindow\&quot;. 
   * @return originRadius
   */
  @javax.annotation.Nullable
  public BigDecimal getOriginRadius() {
    return originRadius;
  }

  public void setOriginRadius(BigDecimal originRadius) {
    this.originRadius = originRadius;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginDestination originDestination = (OriginDestination) o;
    return Objects.equals(this.alternativeDestinationsCodes, originDestination.alternativeDestinationsCodes) &&
        Objects.equals(this.alternativeOriginsCodes, originDestination.alternativeOriginsCodes) &&
        Objects.equals(this.arrivalDateTimeRange, originDestination.arrivalDateTimeRange) &&
        Objects.equals(this.departureDateTimeRange, originDestination.departureDateTimeRange) &&
        Objects.equals(this.destinationLocationCode, originDestination.destinationLocationCode) &&
        Objects.equals(this.destinationRadius, originDestination.destinationRadius) &&
        Objects.equals(this.excludedConnectionPoints, originDestination.excludedConnectionPoints) &&
        Objects.equals(this.id, originDestination.id) &&
        Objects.equals(this.includedConnectionPoints, originDestination.includedConnectionPoints) &&
        Objects.equals(this.originLocationCode, originDestination.originLocationCode) &&
        Objects.equals(this.originRadius, originDestination.originRadius);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeDestinationsCodes, alternativeOriginsCodes, arrivalDateTimeRange, departureDateTimeRange, destinationLocationCode, destinationRadius, excludedConnectionPoints, id, includedConnectionPoints, originLocationCode, originRadius);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginDestination {\n");
    sb.append("    alternativeDestinationsCodes: ").append(toIndentedString(alternativeDestinationsCodes)).append("\n");
    sb.append("    alternativeOriginsCodes: ").append(toIndentedString(alternativeOriginsCodes)).append("\n");
    sb.append("    arrivalDateTimeRange: ").append(toIndentedString(arrivalDateTimeRange)).append("\n");
    sb.append("    departureDateTimeRange: ").append(toIndentedString(departureDateTimeRange)).append("\n");
    sb.append("    destinationLocationCode: ").append(toIndentedString(destinationLocationCode)).append("\n");
    sb.append("    destinationRadius: ").append(toIndentedString(destinationRadius)).append("\n");
    sb.append("    excludedConnectionPoints: ").append(toIndentedString(excludedConnectionPoints)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includedConnectionPoints: ").append(toIndentedString(includedConnectionPoints)).append("\n");
    sb.append("    originLocationCode: ").append(toIndentedString(originLocationCode)).append("\n");
    sb.append("    originRadius: ").append(toIndentedString(originRadius)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeDestinationsCodes");
    openapiFields.add("alternativeOriginsCodes");
    openapiFields.add("arrivalDateTimeRange");
    openapiFields.add("departureDateTimeRange");
    openapiFields.add("destinationLocationCode");
    openapiFields.add("destinationRadius");
    openapiFields.add("excludedConnectionPoints");
    openapiFields.add("id");
    openapiFields.add("includedConnectionPoints");
    openapiFields.add("originLocationCode");
    openapiFields.add("originRadius");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginDestination is not found in the empty JSON string", OriginDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternativeDestinationsCodes") != null && !jsonObj.get("alternativeDestinationsCodes").isJsonNull() && !jsonObj.get("alternativeDestinationsCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeDestinationsCodes` to be an array in the JSON string but got `%s`", jsonObj.get("alternativeDestinationsCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternativeOriginsCodes") != null && !jsonObj.get("alternativeOriginsCodes").isJsonNull() && !jsonObj.get("alternativeOriginsCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeOriginsCodes` to be an array in the JSON string but got `%s`", jsonObj.get("alternativeOriginsCodes").toString()));
      }
      // validate the optional field `arrivalDateTimeRange`
      if (jsonObj.get("arrivalDateTimeRange") != null && !jsonObj.get("arrivalDateTimeRange").isJsonNull()) {
        DateTimeRange.validateJsonElement(jsonObj.get("arrivalDateTimeRange"));
      }
      // validate the optional field `departureDateTimeRange`
      if (jsonObj.get("departureDateTimeRange") != null && !jsonObj.get("departureDateTimeRange").isJsonNull()) {
        DateTimeRange.validateJsonElement(jsonObj.get("departureDateTimeRange"));
      }
      if ((jsonObj.get("destinationLocationCode") != null && !jsonObj.get("destinationLocationCode").isJsonNull()) && !jsonObj.get("destinationLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationLocationCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedConnectionPoints") != null && !jsonObj.get("excludedConnectionPoints").isJsonNull() && !jsonObj.get("excludedConnectionPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedConnectionPoints` to be an array in the JSON string but got `%s`", jsonObj.get("excludedConnectionPoints").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedConnectionPoints") != null && !jsonObj.get("includedConnectionPoints").isJsonNull() && !jsonObj.get("includedConnectionPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedConnectionPoints` to be an array in the JSON string but got `%s`", jsonObj.get("includedConnectionPoints").toString()));
      }
      if ((jsonObj.get("originLocationCode") != null && !jsonObj.get("originLocationCode").isJsonNull()) && !jsonObj.get("originLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originLocationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginDestination>() {
           @Override
           public void write(JsonWriter out, OriginDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginDestination
   * @throws IOException if the JSON string is invalid with respect to OriginDestination
   */
  public static OriginDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginDestination.class);
  }

  /**
   * Convert an instance of OriginDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

