# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cabin_restriction import CabinRestriction
from openapi_server.models.carrier_restrictions import CarrierRestrictions
from openapi_server.models.connection_restriction import ConnectionRestriction
from openapi_server import util


class FlightFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bus_segment_allowed: bool=None, cabin_restrictions: List[CabinRestriction]=None, carrier_restrictions: CarrierRestrictions=None, connection_restriction: ConnectionRestriction=None, cross_border_allowed: bool=None, max_flight_time: float=None, more_overnights_allowed: bool=None, rail_segment_allowed: bool=None, return_to_departure_airport: bool=None):
        """FlightFilters - a model defined in OpenAPI

        :param bus_segment_allowed: The bus_segment_allowed of this FlightFilters.
        :param cabin_restrictions: The cabin_restrictions of this FlightFilters.
        :param carrier_restrictions: The carrier_restrictions of this FlightFilters.
        :param connection_restriction: The connection_restriction of this FlightFilters.
        :param cross_border_allowed: The cross_border_allowed of this FlightFilters.
        :param max_flight_time: The max_flight_time of this FlightFilters.
        :param more_overnights_allowed: The more_overnights_allowed of this FlightFilters.
        :param rail_segment_allowed: The rail_segment_allowed of this FlightFilters.
        :param return_to_departure_airport: The return_to_departure_airport of this FlightFilters.
        """
        self.openapi_types = {
            'bus_segment_allowed': bool,
            'cabin_restrictions': List[CabinRestriction],
            'carrier_restrictions': CarrierRestrictions,
            'connection_restriction': ConnectionRestriction,
            'cross_border_allowed': bool,
            'max_flight_time': float,
            'more_overnights_allowed': bool,
            'rail_segment_allowed': bool,
            'return_to_departure_airport': bool
        }

        self.attribute_map = {
            'bus_segment_allowed': 'busSegmentAllowed',
            'cabin_restrictions': 'cabinRestrictions',
            'carrier_restrictions': 'carrierRestrictions',
            'connection_restriction': 'connectionRestriction',
            'cross_border_allowed': 'crossBorderAllowed',
            'max_flight_time': 'maxFlightTime',
            'more_overnights_allowed': 'moreOvernightsAllowed',
            'rail_segment_allowed': 'railSegmentAllowed',
            'return_to_departure_airport': 'returnToDepartureAirport'
        }

        self._bus_segment_allowed = bus_segment_allowed
        self._cabin_restrictions = cabin_restrictions
        self._carrier_restrictions = carrier_restrictions
        self._connection_restriction = connection_restriction
        self._cross_border_allowed = cross_border_allowed
        self._max_flight_time = max_flight_time
        self._more_overnights_allowed = more_overnights_allowed
        self._rail_segment_allowed = rail_segment_allowed
        self._return_to_departure_airport = return_to_departure_airport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightFilters of this FlightFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bus_segment_allowed(self):
        """Gets the bus_segment_allowed of this FlightFilters.

        This flag enable/disable filtering of bus segment

        :return: The bus_segment_allowed of this FlightFilters.
        :rtype: bool
        """
        return self._bus_segment_allowed

    @bus_segment_allowed.setter
    def bus_segment_allowed(self, bus_segment_allowed):
        """Sets the bus_segment_allowed of this FlightFilters.

        This flag enable/disable filtering of bus segment

        :param bus_segment_allowed: The bus_segment_allowed of this FlightFilters.
        :type bus_segment_allowed: bool
        """

        self._bus_segment_allowed = bus_segment_allowed

    @property
    def cabin_restrictions(self):
        """Gets the cabin_restrictions of this FlightFilters.

        Restriction towards cabins.

        :return: The cabin_restrictions of this FlightFilters.
        :rtype: List[CabinRestriction]
        """
        return self._cabin_restrictions

    @cabin_restrictions.setter
    def cabin_restrictions(self, cabin_restrictions):
        """Sets the cabin_restrictions of this FlightFilters.

        Restriction towards cabins.

        :param cabin_restrictions: The cabin_restrictions of this FlightFilters.
        :type cabin_restrictions: List[CabinRestriction]
        """
        if cabin_restrictions is not None and len(cabin_restrictions) > 6:
            raise ValueError("Invalid value for `cabin_restrictions`, number of items must be less than or equal to `6`")
        if cabin_restrictions is not None and len(cabin_restrictions) < 1:
            raise ValueError("Invalid value for `cabin_restrictions`, number of items must be greater than or equal to `1`")

        self._cabin_restrictions = cabin_restrictions

    @property
    def carrier_restrictions(self):
        """Gets the carrier_restrictions of this FlightFilters.


        :return: The carrier_restrictions of this FlightFilters.
        :rtype: CarrierRestrictions
        """
        return self._carrier_restrictions

    @carrier_restrictions.setter
    def carrier_restrictions(self, carrier_restrictions):
        """Sets the carrier_restrictions of this FlightFilters.


        :param carrier_restrictions: The carrier_restrictions of this FlightFilters.
        :type carrier_restrictions: CarrierRestrictions
        """

        self._carrier_restrictions = carrier_restrictions

    @property
    def connection_restriction(self):
        """Gets the connection_restriction of this FlightFilters.


        :return: The connection_restriction of this FlightFilters.
        :rtype: ConnectionRestriction
        """
        return self._connection_restriction

    @connection_restriction.setter
    def connection_restriction(self, connection_restriction):
        """Sets the connection_restriction of this FlightFilters.


        :param connection_restriction: The connection_restriction of this FlightFilters.
        :type connection_restriction: ConnectionRestriction
        """

        self._connection_restriction = connection_restriction

    @property
    def cross_border_allowed(self):
        """Gets the cross_border_allowed of this FlightFilters.

        Allows to search a location outside the borders when a radius around a location is specified. Default is false.

        :return: The cross_border_allowed of this FlightFilters.
        :rtype: bool
        """
        return self._cross_border_allowed

    @cross_border_allowed.setter
    def cross_border_allowed(self, cross_border_allowed):
        """Sets the cross_border_allowed of this FlightFilters.

        Allows to search a location outside the borders when a radius around a location is specified. Default is false.

        :param cross_border_allowed: The cross_border_allowed of this FlightFilters.
        :type cross_border_allowed: bool
        """

        self._cross_border_allowed = cross_border_allowed

    @property
    def max_flight_time(self):
        """Gets the max_flight_time of this FlightFilters.

        This option allows to modify the value for the Elapsed Flying Time (EFT) masterPricer option

        :return: The max_flight_time of this FlightFilters.
        :rtype: float
        """
        return self._max_flight_time

    @max_flight_time.setter
    def max_flight_time(self, max_flight_time):
        """Sets the max_flight_time of this FlightFilters.

        This option allows to modify the value for the Elapsed Flying Time (EFT) masterPricer option

        :param max_flight_time: The max_flight_time of this FlightFilters.
        :type max_flight_time: float
        """

        self._max_flight_time = max_flight_time

    @property
    def more_overnights_allowed(self):
        """Gets the more_overnights_allowed of this FlightFilters.

        This flag enables/disables the possibility to have more overnight flights in Low Fare Search

        :return: The more_overnights_allowed of this FlightFilters.
        :rtype: bool
        """
        return self._more_overnights_allowed

    @more_overnights_allowed.setter
    def more_overnights_allowed(self, more_overnights_allowed):
        """Sets the more_overnights_allowed of this FlightFilters.

        This flag enables/disables the possibility to have more overnight flights in Low Fare Search

        :param more_overnights_allowed: The more_overnights_allowed of this FlightFilters.
        :type more_overnights_allowed: bool
        """

        self._more_overnights_allowed = more_overnights_allowed

    @property
    def rail_segment_allowed(self):
        """Gets the rail_segment_allowed of this FlightFilters.

        This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)

        :return: The rail_segment_allowed of this FlightFilters.
        :rtype: bool
        """
        return self._rail_segment_allowed

    @rail_segment_allowed.setter
    def rail_segment_allowed(self, rail_segment_allowed):
        """Sets the rail_segment_allowed of this FlightFilters.

        This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)

        :param rail_segment_allowed: The rail_segment_allowed of this FlightFilters.
        :type rail_segment_allowed: bool
        """

        self._rail_segment_allowed = rail_segment_allowed

    @property
    def return_to_departure_airport(self):
        """Gets the return_to_departure_airport of this FlightFilters.

        This option force to retrieve flight-offer with a departure and a return in the same airport

        :return: The return_to_departure_airport of this FlightFilters.
        :rtype: bool
        """
        return self._return_to_departure_airport

    @return_to_departure_airport.setter
    def return_to_departure_airport(self, return_to_departure_airport):
        """Sets the return_to_departure_airport of this FlightFilters.

        This option force to retrieve flight-offer with a departure and a return in the same airport

        :param return_to_departure_airport: The return_to_departure_airport of this FlightFilters.
        :type return_to_departure_airport: bool
        """

        self._return_to_departure_airport = return_to_departure_airport
