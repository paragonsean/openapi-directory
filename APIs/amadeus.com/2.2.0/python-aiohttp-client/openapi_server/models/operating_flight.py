# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperatingFlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_code: str=None):
        """OperatingFlight - a model defined in OpenAPI

        :param carrier_code: The carrier_code of this OperatingFlight.
        """
        self.openapi_types = {
            'carrier_code': str
        }

        self.attribute_map = {
            'carrier_code': 'carrierCode'
        }

        self._carrier_code = carrier_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperatingFlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperatingFlight of this OperatingFlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_code(self):
        """Gets the carrier_code of this OperatingFlight.

        providing the airline / carrier code

        :return: The carrier_code of this OperatingFlight.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this OperatingFlight.

        providing the airline / carrier code

        :param carrier_code: The carrier_code of this OperatingFlight.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 2:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code
