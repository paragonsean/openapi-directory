# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class OriginDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_destinations_codes: List[str]=None, alternative_origins_codes: List[str]=None, arrival_date_time_range: DateTimeRange=None, departure_date_time_range: DateTimeRange=None, destination_location_code: str=None, destination_radius: float=None, excluded_connection_points: List[str]=None, id: str=None, included_connection_points: List[str]=None, origin_location_code: str=None, origin_radius: float=None):
        """OriginDestination - a model defined in OpenAPI

        :param alternative_destinations_codes: The alternative_destinations_codes of this OriginDestination.
        :param alternative_origins_codes: The alternative_origins_codes of this OriginDestination.
        :param arrival_date_time_range: The arrival_date_time_range of this OriginDestination.
        :param departure_date_time_range: The departure_date_time_range of this OriginDestination.
        :param destination_location_code: The destination_location_code of this OriginDestination.
        :param destination_radius: The destination_radius of this OriginDestination.
        :param excluded_connection_points: The excluded_connection_points of this OriginDestination.
        :param id: The id of this OriginDestination.
        :param included_connection_points: The included_connection_points of this OriginDestination.
        :param origin_location_code: The origin_location_code of this OriginDestination.
        :param origin_radius: The origin_radius of this OriginDestination.
        """
        self.openapi_types = {
            'alternative_destinations_codes': List[str],
            'alternative_origins_codes': List[str],
            'arrival_date_time_range': DateTimeRange,
            'departure_date_time_range': DateTimeRange,
            'destination_location_code': str,
            'destination_radius': float,
            'excluded_connection_points': List[str],
            'id': str,
            'included_connection_points': List[str],
            'origin_location_code': str,
            'origin_radius': float
        }

        self.attribute_map = {
            'alternative_destinations_codes': 'alternativeDestinationsCodes',
            'alternative_origins_codes': 'alternativeOriginsCodes',
            'arrival_date_time_range': 'arrivalDateTimeRange',
            'departure_date_time_range': 'departureDateTimeRange',
            'destination_location_code': 'destinationLocationCode',
            'destination_radius': 'destinationRadius',
            'excluded_connection_points': 'excludedConnectionPoints',
            'id': 'id',
            'included_connection_points': 'includedConnectionPoints',
            'origin_location_code': 'originLocationCode',
            'origin_radius': 'originRadius'
        }

        self._alternative_destinations_codes = alternative_destinations_codes
        self._alternative_origins_codes = alternative_origins_codes
        self._arrival_date_time_range = arrival_date_time_range
        self._departure_date_time_range = departure_date_time_range
        self._destination_location_code = destination_location_code
        self._destination_radius = destination_radius
        self._excluded_connection_points = excluded_connection_points
        self._id = id
        self._included_connection_points = included_connection_points
        self._origin_location_code = origin_location_code
        self._origin_radius = origin_radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginDestination of this OriginDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_destinations_codes(self):
        """Gets the alternative_destinations_codes of this OriginDestination.

        Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The alternative_destinations_codes of this OriginDestination.
        :rtype: List[str]
        """
        return self._alternative_destinations_codes

    @alternative_destinations_codes.setter
    def alternative_destinations_codes(self, alternative_destinations_codes):
        """Sets the alternative_destinations_codes of this OriginDestination.

        Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param alternative_destinations_codes: The alternative_destinations_codes of this OriginDestination.
        :type alternative_destinations_codes: List[str]
        """
        if alternative_destinations_codes is not None and len(alternative_destinations_codes) > 2:
            raise ValueError("Invalid value for `alternative_destinations_codes`, number of items must be less than or equal to `2`")
        if alternative_destinations_codes is not None and len(alternative_destinations_codes) < 1:
            raise ValueError("Invalid value for `alternative_destinations_codes`, number of items must be greater than or equal to `1`")

        self._alternative_destinations_codes = alternative_destinations_codes

    @property
    def alternative_origins_codes(self):
        """Gets the alternative_origins_codes of this OriginDestination.

        Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The alternative_origins_codes of this OriginDestination.
        :rtype: List[str]
        """
        return self._alternative_origins_codes

    @alternative_origins_codes.setter
    def alternative_origins_codes(self, alternative_origins_codes):
        """Sets the alternative_origins_codes of this OriginDestination.

        Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param alternative_origins_codes: The alternative_origins_codes of this OriginDestination.
        :type alternative_origins_codes: List[str]
        """
        if alternative_origins_codes is not None and len(alternative_origins_codes) > 2:
            raise ValueError("Invalid value for `alternative_origins_codes`, number of items must be less than or equal to `2`")
        if alternative_origins_codes is not None and len(alternative_origins_codes) < 1:
            raise ValueError("Invalid value for `alternative_origins_codes`, number of items must be greater than or equal to `1`")

        self._alternative_origins_codes = alternative_origins_codes

    @property
    def arrival_date_time_range(self):
        """Gets the arrival_date_time_range of this OriginDestination.


        :return: The arrival_date_time_range of this OriginDestination.
        :rtype: DateTimeRange
        """
        return self._arrival_date_time_range

    @arrival_date_time_range.setter
    def arrival_date_time_range(self, arrival_date_time_range):
        """Sets the arrival_date_time_range of this OriginDestination.


        :param arrival_date_time_range: The arrival_date_time_range of this OriginDestination.
        :type arrival_date_time_range: DateTimeRange
        """

        self._arrival_date_time_range = arrival_date_time_range

    @property
    def departure_date_time_range(self):
        """Gets the departure_date_time_range of this OriginDestination.


        :return: The departure_date_time_range of this OriginDestination.
        :rtype: DateTimeRange
        """
        return self._departure_date_time_range

    @departure_date_time_range.setter
    def departure_date_time_range(self, departure_date_time_range):
        """Sets the departure_date_time_range of this OriginDestination.


        :param departure_date_time_range: The departure_date_time_range of this OriginDestination.
        :type departure_date_time_range: DateTimeRange
        """

        self._departure_date_time_range = departure_date_time_range

    @property
    def destination_location_code(self):
        """Gets the destination_location_code of this OriginDestination.

        Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The destination_location_code of this OriginDestination.
        :rtype: str
        """
        return self._destination_location_code

    @destination_location_code.setter
    def destination_location_code(self, destination_location_code):
        """Sets the destination_location_code of this OriginDestination.

        Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param destination_location_code: The destination_location_code of this OriginDestination.
        :type destination_location_code: str
        """

        self._destination_location_code = destination_location_code

    @property
    def destination_radius(self):
        """Gets the destination_radius of this OriginDestination.

        Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \"dateWindow\" or \"timeWindow\". 

        :return: The destination_radius of this OriginDestination.
        :rtype: float
        """
        return self._destination_radius

    @destination_radius.setter
    def destination_radius(self, destination_radius):
        """Sets the destination_radius of this OriginDestination.

        Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \"dateWindow\" or \"timeWindow\". 

        :param destination_radius: The destination_radius of this OriginDestination.
        :type destination_radius: float
        """

        self._destination_radius = destination_radius

    @property
    def excluded_connection_points(self):
        """Gets the excluded_connection_points of this OriginDestination.

        List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :return: The excluded_connection_points of this OriginDestination.
        :rtype: List[str]
        """
        return self._excluded_connection_points

    @excluded_connection_points.setter
    def excluded_connection_points(self, excluded_connection_points):
        """Sets the excluded_connection_points of this OriginDestination.

        List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :param excluded_connection_points: The excluded_connection_points of this OriginDestination.
        :type excluded_connection_points: List[str]
        """
        if excluded_connection_points is not None and len(excluded_connection_points) > 3:
            raise ValueError("Invalid value for `excluded_connection_points`, number of items must be less than or equal to `3`")
        if excluded_connection_points is not None and len(excluded_connection_points) < 1:
            raise ValueError("Invalid value for `excluded_connection_points`, number of items must be greater than or equal to `1`")

        self._excluded_connection_points = excluded_connection_points

    @property
    def id(self):
        """Gets the id of this OriginDestination.


        :return: The id of this OriginDestination.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OriginDestination.


        :param id: The id of this OriginDestination.
        :type id: str
        """

        self._id = id

    @property
    def included_connection_points(self):
        """Gets the included_connection_points of this OriginDestination.

        List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :return: The included_connection_points of this OriginDestination.
        :rtype: List[str]
        """
        return self._included_connection_points

    @included_connection_points.setter
    def included_connection_points(self, included_connection_points):
        """Sets the included_connection_points of this OriginDestination.

        List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :param included_connection_points: The included_connection_points of this OriginDestination.
        :type included_connection_points: List[str]
        """
        if included_connection_points is not None and len(included_connection_points) > 2:
            raise ValueError("Invalid value for `included_connection_points`, number of items must be less than or equal to `2`")
        if included_connection_points is not None and len(included_connection_points) < 1:
            raise ValueError("Invalid value for `included_connection_points`, number of items must be greater than or equal to `1`")

        self._included_connection_points = included_connection_points

    @property
    def origin_location_code(self):
        """Gets the origin_location_code of this OriginDestination.

        Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The origin_location_code of this OriginDestination.
        :rtype: str
        """
        return self._origin_location_code

    @origin_location_code.setter
    def origin_location_code(self, origin_location_code):
        """Sets the origin_location_code of this OriginDestination.

        Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param origin_location_code: The origin_location_code of this OriginDestination.
        :type origin_location_code: str
        """

        self._origin_location_code = origin_location_code

    @property
    def origin_radius(self):
        """Gets the origin_radius of this OriginDestination.

        Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \"dateWindow\" or \"timeWindow\". 

        :return: The origin_radius of this OriginDestination.
        :rtype: float
        """
        return self._origin_radius

    @origin_radius.setter
    def origin_radius(self, origin_radius):
        """Sets the origin_radius of this OriginDestination.

        Include other possible locations around the point, located less than this distance in kilometers away. Max:300  Can not be combined with \"dateWindow\" or \"timeWindow\". 

        :param origin_radius: The origin_radius of this OriginDestination.
        :type origin_radius: float
        """

        self._origin_radius = origin_radius
