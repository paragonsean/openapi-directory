# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_entry import AircraftEntry
from openapi_server.models.carrier_entry import CarrierEntry
from openapi_server.models.currency_entry import CurrencyEntry
from openapi_server.models.location_entry import LocationEntry
from openapi_server import util


class Dictionaries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aircraft: AircraftEntry=None, carriers: CarrierEntry=None, currencies: CurrencyEntry=None, locations: LocationEntry=None):
        """Dictionaries - a model defined in OpenAPI

        :param aircraft: The aircraft of this Dictionaries.
        :param carriers: The carriers of this Dictionaries.
        :param currencies: The currencies of this Dictionaries.
        :param locations: The locations of this Dictionaries.
        """
        self.openapi_types = {
            'aircraft': AircraftEntry,
            'carriers': CarrierEntry,
            'currencies': CurrencyEntry,
            'locations': LocationEntry
        }

        self.attribute_map = {
            'aircraft': 'aircraft',
            'carriers': 'carriers',
            'currencies': 'currencies',
            'locations': 'locations'
        }

        self._aircraft = aircraft
        self._carriers = carriers
        self._currencies = currencies
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dictionaries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dictionaries of this Dictionaries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aircraft(self):
        """Gets the aircraft of this Dictionaries.


        :return: The aircraft of this Dictionaries.
        :rtype: AircraftEntry
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this Dictionaries.


        :param aircraft: The aircraft of this Dictionaries.
        :type aircraft: AircraftEntry
        """

        self._aircraft = aircraft

    @property
    def carriers(self):
        """Gets the carriers of this Dictionaries.


        :return: The carriers of this Dictionaries.
        :rtype: CarrierEntry
        """
        return self._carriers

    @carriers.setter
    def carriers(self, carriers):
        """Sets the carriers of this Dictionaries.


        :param carriers: The carriers of this Dictionaries.
        :type carriers: CarrierEntry
        """

        self._carriers = carriers

    @property
    def currencies(self):
        """Gets the currencies of this Dictionaries.


        :return: The currencies of this Dictionaries.
        :rtype: CurrencyEntry
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this Dictionaries.


        :param currencies: The currencies of this Dictionaries.
        :type currencies: CurrencyEntry
        """

        self._currencies = currencies

    @property
    def locations(self):
        """Gets the locations of this Dictionaries.


        :return: The locations of this Dictionaries.
        :rtype: LocationEntry
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Dictionaries.


        :param locations: The locations of this Dictionaries.
        :type locations: LocationEntry
        """

        self._locations = locations
