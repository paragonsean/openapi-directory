# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight_offer_source import FlightOfferSource
from openapi_server.models.origin_destination import OriginDestination
from openapi_server.models.search_criteria import SearchCriteria
from openapi_server.models.traveler import Traveler
from openapi_server import util


class GetFlightOffersQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, origin_destinations: List[OriginDestination]=None, search_criteria: SearchCriteria=None, sources: List[FlightOfferSource]=None, travelers: List[Traveler]=None):
        """GetFlightOffersQuery - a model defined in OpenAPI

        :param currency_code: The currency_code of this GetFlightOffersQuery.
        :param origin_destinations: The origin_destinations of this GetFlightOffersQuery.
        :param search_criteria: The search_criteria of this GetFlightOffersQuery.
        :param sources: The sources of this GetFlightOffersQuery.
        :param travelers: The travelers of this GetFlightOffersQuery.
        """
        self.openapi_types = {
            'currency_code': str,
            'origin_destinations': List[OriginDestination],
            'search_criteria': SearchCriteria,
            'sources': List[FlightOfferSource],
            'travelers': List[Traveler]
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'origin_destinations': 'originDestinations',
            'search_criteria': 'searchCriteria',
            'sources': 'sources',
            'travelers': 'travelers'
        }

        self._currency_code = currency_code
        self._origin_destinations = origin_destinations
        self._search_criteria = search_criteria
        self._sources = sources
        self._travelers = travelers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFlightOffersQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFlightOffersQuery of this GetFlightOffersQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this GetFlightOffersQuery.

        The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.

        :return: The currency_code of this GetFlightOffersQuery.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GetFlightOffersQuery.

        The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.

        :param currency_code: The currency_code of this GetFlightOffersQuery.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def origin_destinations(self):
        """Gets the origin_destinations of this GetFlightOffersQuery.

        Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.

        :return: The origin_destinations of this GetFlightOffersQuery.
        :rtype: List[OriginDestination]
        """
        return self._origin_destinations

    @origin_destinations.setter
    def origin_destinations(self, origin_destinations):
        """Sets the origin_destinations of this GetFlightOffersQuery.

        Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.

        :param origin_destinations: The origin_destinations of this GetFlightOffersQuery.
        :type origin_destinations: List[OriginDestination]
        """
        if origin_destinations is None:
            raise ValueError("Invalid value for `origin_destinations`, must not be `None`")
        if origin_destinations is not None and len(origin_destinations) > 6:
            raise ValueError("Invalid value for `origin_destinations`, number of items must be less than or equal to `6`")
        if origin_destinations is not None and len(origin_destinations) < 1:
            raise ValueError("Invalid value for `origin_destinations`, number of items must be greater than or equal to `1`")

        self._origin_destinations = origin_destinations

    @property
    def search_criteria(self):
        """Gets the search_criteria of this GetFlightOffersQuery.


        :return: The search_criteria of this GetFlightOffersQuery.
        :rtype: SearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this GetFlightOffersQuery.


        :param search_criteria: The search_criteria of this GetFlightOffersQuery.
        :type search_criteria: SearchCriteria
        """

        self._search_criteria = search_criteria

    @property
    def sources(self):
        """Gets the sources of this GetFlightOffersQuery.

        Allows enable one or more sources. If present in the list, these sources will be called by the system.

        :return: The sources of this GetFlightOffersQuery.
        :rtype: List[FlightOfferSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this GetFlightOffersQuery.

        Allows enable one or more sources. If present in the list, these sources will be called by the system.

        :param sources: The sources of this GetFlightOffersQuery.
        :type sources: List[FlightOfferSource]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")
        if sources is not None and len(sources) < 1:
            raise ValueError("Invalid value for `sources`, number of items must be greater than or equal to `1`")

        self._sources = sources

    @property
    def travelers(self):
        """Gets the travelers of this GetFlightOffersQuery.


        :return: The travelers of this GetFlightOffersQuery.
        :rtype: List[Traveler]
        """
        return self._travelers

    @travelers.setter
    def travelers(self, travelers):
        """Sets the travelers of this GetFlightOffersQuery.


        :param travelers: The travelers of this GetFlightOffersQuery.
        :type travelers: List[Traveler]
        """
        if travelers is None:
            raise ValueError("Invalid value for `travelers`, must not be `None`")
        if travelers is not None and len(travelers) > 18:
            raise ValueError("Invalid value for `travelers`, number of items must be less than or equal to `18`")
        if travelers is not None and len(travelers) < 1:
            raise ValueError("Invalid value for `travelers`, number of items must be greater than or equal to `1`")

        self._travelers = travelers
