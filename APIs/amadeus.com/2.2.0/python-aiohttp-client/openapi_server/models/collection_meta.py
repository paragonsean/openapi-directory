# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.one_way_combinations import OneWayCombinations
from openapi_server import util


class CollectionMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, one_way_combinations: List[OneWayCombinations]=None):
        """CollectionMeta - a model defined in OpenAPI

        :param count: The count of this CollectionMeta.
        :param one_way_combinations: The one_way_combinations of this CollectionMeta.
        """
        self.openapi_types = {
            'count': int,
            'one_way_combinations': List[OneWayCombinations]
        }

        self.attribute_map = {
            'count': 'count',
            'one_way_combinations': 'oneWayCombinations'
        }

        self._count = count
        self._one_way_combinations = one_way_combinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection_Meta of this CollectionMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this CollectionMeta.


        :return: The count of this CollectionMeta.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CollectionMeta.


        :param count: The count of this CollectionMeta.
        :type count: int
        """

        self._count = count

    @property
    def one_way_combinations(self):
        """Gets the one_way_combinations of this CollectionMeta.


        :return: The one_way_combinations of this CollectionMeta.
        :rtype: List[OneWayCombinations]
        """
        return self._one_way_combinations

    @one_way_combinations.setter
    def one_way_combinations(self, one_way_combinations):
        """Sets the one_way_combinations of this CollectionMeta.


        :param one_way_combinations: The one_way_combinations of this CollectionMeta.
        :type one_way_combinations: List[OneWayCombinations]
        """

        self._one_way_combinations = one_way_combinations
