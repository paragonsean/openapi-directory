# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment import Segment
from openapi_server import util


class Itineraries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, segments: List[Segment]=None):
        """Itineraries - a model defined in OpenAPI

        :param duration: The duration of this Itineraries.
        :param segments: The segments of this Itineraries.
        """
        self.openapi_types = {
            'duration': str,
            'segments': List[Segment]
        }

        self.attribute_map = {
            'duration': 'duration',
            'segments': 'segments'
        }

        self._duration = duration
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Itineraries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Itineraries of this Itineraries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this Itineraries.

        duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m

        :return: The duration of this Itineraries.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Itineraries.

        duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m

        :param duration: The duration of this Itineraries.
        :type duration: str
        """

        self._duration = duration

    @property
    def segments(self):
        """Gets the segments of this Itineraries.


        :return: The segments of this Itineraries.
        :rtype: List[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Itineraries.


        :param segments: The segments of this Itineraries.
        :type segments: List[Segment]
        """
        if segments is None:
            raise ValueError("Invalid value for `segments`, must not be `None`")
        if segments is not None and len(segments) > 9:
            raise ValueError("Invalid value for `segments`, number of items must be less than or equal to `9`")
        if segments is not None and len(segments) < 1:
            raise ValueError("Invalid value for `segments`, number of items must be greater than or equal to `1`")

        self._segments = segments
