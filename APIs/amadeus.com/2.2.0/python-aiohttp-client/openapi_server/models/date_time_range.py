# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DateTimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, date_window: str=None, time: str=None, time_window: str=None):
        """DateTimeRange - a model defined in OpenAPI

        :param _date: The _date of this DateTimeRange.
        :param date_window: The date_window of this DateTimeRange.
        :param time: The time of this DateTimeRange.
        :param time_window: The time_window of this DateTimeRange.
        """
        self.openapi_types = {
            '_date': date,
            'date_window': str,
            'time': str,
            'time_window': str
        }

        self.attribute_map = {
            '_date': 'date',
            'date_window': 'dateWindow',
            'time': 'time',
            'time_window': 'timeWindow'
        }

        self.__date = _date
        self._date_window = date_window
        self._time = time
        self._time_window = time_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeRange of this DateTimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this DateTimeRange.

        Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25

        :return: The _date of this DateTimeRange.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DateTimeRange.

        Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25

        :param _date: The _date of this DateTimeRange.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def date_window(self):
        """Gets the date_window of this DateTimeRange.

        Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)  Can not be combined with \"originRadius\" or \"destinationRadius\". 

        :return: The date_window of this DateTimeRange.
        :rtype: str
        """
        return self._date_window

    @date_window.setter
    def date_window(self, date_window):
        """Sets the date_window of this DateTimeRange.

        Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)  Can not be combined with \"originRadius\" or \"destinationRadius\". 

        :param date_window: The date_window of this DateTimeRange.
        :type date_window: str
        """
        if date_window is not None and not re.search(r'^[MPI][1-3]D', date_window):
            raise ValueError("Invalid value for `date_window`, must be a follow pattern or equal to `/^[MPI][1-3]D/`")

        self._date_window = date_window

    @property
    def time(self):
        """Gets the time of this DateTimeRange.

        Local time. hh:mm:ss format, e.g 10:30:00

        :return: The time of this DateTimeRange.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DateTimeRange.

        Local time. hh:mm:ss format, e.g 10:30:00

        :param time: The time of this DateTimeRange.
        :type time: str
        """

        self._time = time

    @property
    def time_window(self):
        """Gets the time_window of this DateTimeRange.

        1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H  Can not be combined with \"originRadius\" or \"destinationRadius\". 

        :return: The time_window of this DateTimeRange.
        :rtype: str
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this DateTimeRange.

        1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H  Can not be combined with \"originRadius\" or \"destinationRadius\". 

        :param time_window: The time_window of this DateTimeRange.
        :type time_window: str
        """
        if time_window is not None and not re.search(r'^([1-9]|10|11|12)H', time_window):
            raise ValueError("Invalid value for `time_window`, must be a follow pattern or equal to `/^([1-9]|10|11|12)H/`")

        self._time_window = time_window
