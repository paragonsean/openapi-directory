/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AircraftCabinAmenities from './AircraftCabinAmenities';
import AircraftEquipment from './AircraftEquipment';
import AvailableSeatsCounter from './AvailableSeatsCounter';
import Deck from './Deck';
import FlightEndPoint from './FlightEndPoint';
import Link from './Link';
import OperatingFlight from './OperatingFlight';

/**
 * The SeatMap model module.
 * @module model/SeatMap
 * @version 1.9.2
 */
class SeatMap {
    /**
     * Constructs a new <code>SeatMap</code>.
     * seat map information
     * @alias module:model/SeatMap
     */
    constructor() { 
        
        SeatMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SeatMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SeatMap} obj Optional instance to populate.
     * @return {module:model/SeatMap} The populated <code>SeatMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SeatMap();

            if (data.hasOwnProperty('aircraft')) {
                obj['aircraft'] = AircraftEquipment.constructFromObject(data['aircraft']);
            }
            if (data.hasOwnProperty('aircraftCabinAmenities')) {
                obj['aircraftCabinAmenities'] = AircraftCabinAmenities.constructFromObject(data['aircraftCabinAmenities']);
            }
            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = FlightEndPoint.constructFromObject(data['arrival']);
            }
            if (data.hasOwnProperty('availableSeatsCounters')) {
                obj['availableSeatsCounters'] = ApiClient.convertToType(data['availableSeatsCounters'], [AvailableSeatsCounter]);
            }
            if (data.hasOwnProperty('carrierCode')) {
                obj['carrierCode'] = ApiClient.convertToType(data['carrierCode'], 'String');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('decks')) {
                obj['decks'] = ApiClient.convertToType(data['decks'], [Deck]);
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = FlightEndPoint.constructFromObject(data['departure']);
            }
            if (data.hasOwnProperty('flightOfferId')) {
                obj['flightOfferId'] = ApiClient.convertToType(data['flightOfferId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('operating')) {
                obj['operating'] = OperatingFlight.constructFromObject(data['operating']);
            }
            if (data.hasOwnProperty('segmentId')) {
                obj['segmentId'] = ApiClient.convertToType(data['segmentId'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = Link.constructFromObject(data['self']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SeatMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SeatMap</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aircraft`
        if (data['aircraft']) { // data not null
          AircraftEquipment.validateJSON(data['aircraft']);
        }
        // validate the optional field `aircraftCabinAmenities`
        if (data['aircraftCabinAmenities']) { // data not null
          AircraftCabinAmenities.validateJSON(data['aircraftCabinAmenities']);
        }
        // validate the optional field `arrival`
        if (data['arrival']) { // data not null
          FlightEndPoint.validateJSON(data['arrival']);
        }
        if (data['availableSeatsCounters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableSeatsCounters'])) {
                throw new Error("Expected the field `availableSeatsCounters` to be an array in the JSON data but got " + data['availableSeatsCounters']);
            }
            // validate the optional field `availableSeatsCounters` (array)
            for (const item of data['availableSeatsCounters']) {
                AvailableSeatsCounter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['carrierCode'] && !(typeof data['carrierCode'] === 'string' || data['carrierCode'] instanceof String)) {
            throw new Error("Expected the field `carrierCode` to be a primitive type in the JSON string but got " + data['carrierCode']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        if (data['decks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['decks'])) {
                throw new Error("Expected the field `decks` to be an array in the JSON data but got " + data['decks']);
            }
            // validate the optional field `decks` (array)
            for (const item of data['decks']) {
                Deck.validateJSON(item);
            };
        }
        // validate the optional field `departure`
        if (data['departure']) { // data not null
          FlightEndPoint.validateJSON(data['departure']);
        }
        // ensure the json data is a string
        if (data['flightOfferId'] && !(typeof data['flightOfferId'] === 'string' || data['flightOfferId'] instanceof String)) {
            throw new Error("Expected the field `flightOfferId` to be a primitive type in the JSON string but got " + data['flightOfferId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // validate the optional field `operating`
        if (data['operating']) { // data not null
          OperatingFlight.validateJSON(data['operating']);
        }
        // ensure the json data is a string
        if (data['segmentId'] && !(typeof data['segmentId'] === 'string' || data['segmentId'] instanceof String)) {
            throw new Error("Expected the field `segmentId` to be a primitive type in the JSON string but got " + data['segmentId']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          Link.validateJSON(data['self']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/AircraftEquipment} aircraft
 */
SeatMap.prototype['aircraft'] = undefined;

/**
 * @member {module:model/AircraftCabinAmenities} aircraftCabinAmenities
 */
SeatMap.prototype['aircraftCabinAmenities'] = undefined;

/**
 * @member {module:model/FlightEndPoint} arrival
 */
SeatMap.prototype['arrival'] = undefined;

/**
 * number of seats available for each passenger
 * @member {Array.<module:model/AvailableSeatsCounter>} availableSeatsCounters
 */
SeatMap.prototype['availableSeatsCounters'] = undefined;

/**
 * providing the marketing airline carrier code
 * @member {String} carrierCode
 */
SeatMap.prototype['carrierCode'] = undefined;

/**
 * reservation booking designator (RBD) of the carrier
 * @member {String} class
 */
SeatMap.prototype['class'] = undefined;

/**
 * decks information
 * @member {Array.<module:model/Deck>} decks
 */
SeatMap.prototype['decks'] = undefined;

/**
 * @member {module:model/FlightEndPoint} departure
 */
SeatMap.prototype['departure'] = undefined;

/**
 * Id of the impacted flight offer
 * @member {String} flightOfferId
 */
SeatMap.prototype['flightOfferId'] = undefined;

/**
 * item identifier
 * @member {String} id
 */
SeatMap.prototype['id'] = undefined;

/**
 * the flight number as assigned by the marketing carrier
 * @member {String} number
 */
SeatMap.prototype['number'] = undefined;

/**
 * @member {module:model/OperatingFlight} operating
 */
SeatMap.prototype['operating'] = undefined;

/**
 * Id of the impacted segment
 * @member {String} segmentId
 */
SeatMap.prototype['segmentId'] = undefined;

/**
 * @member {module:model/Link} self
 */
SeatMap.prototype['self'] = undefined;

/**
 * Ressource name
 * @member {String} type
 */
SeatMap.prototype['type'] = undefined;






export default SeatMap;

