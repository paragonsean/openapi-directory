/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QualifiedFreeText from './QualifiedFreeText';

/**
 * The AmenityMedia model module.
 * @module model/AmenityMedia
 * @version 1.9.2
 */
class AmenityMedia {
    /**
     * Constructs a new <code>AmenityMedia</code>.
     * Media is a digital content like image, video with associated text and description, several scales and some metadata can be provided also.
     * @alias module:model/AmenityMedia
     */
    constructor() { 
        
        AmenityMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AmenityMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmenityMedia} obj Optional instance to populate.
     * @return {module:model/AmenityMedia} The populated <code>AmenityMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmenityMedia();

            if (data.hasOwnProperty('description')) {
                obj['description'] = QualifiedFreeText.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmenityMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmenityMedia</code>.
     */
    static validateJSON(data) {
        // validate the optional field `description`
        if (data['description']) { // data not null
          QualifiedFreeText.validateJSON(data['description']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/QualifiedFreeText} description
 */
AmenityMedia.prototype['description'] = undefined;

/**
 * href to display the original media. 
 * @member {String} href
 */
AmenityMedia.prototype['href'] = undefined;

/**
 * media type as per IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)
 * @member {module:model/AmenityMedia.MediaTypeEnum} mediaType
 */
AmenityMedia.prototype['mediaType'] = undefined;

/**
 * media title
 * @member {String} title
 */
AmenityMedia.prototype['title'] = undefined;





/**
 * Allowed values for the <code>mediaType</code> property.
 * @enum {String}
 * @readonly
 */
AmenityMedia['MediaTypeEnum'] = {

    /**
     * value: "application"
     * @const
     */
    "application": "application",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio",

    /**
     * value: "font"
     * @const
     */
    "font": "font",

    /**
     * value: "example"
     * @const
     */
    "example": "example",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "message"
     * @const
     */
    "message": "message",

    /**
     * value: "model"
     * @const
     */
    "model": "model",

    /**
     * value: "multipart"
     * @const
     */
    "multipart": "multipart",

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "video"
     * @const
     */
    "video": "video"
};



export default AmenityMedia;

