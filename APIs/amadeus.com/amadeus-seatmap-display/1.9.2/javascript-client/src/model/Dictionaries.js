/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationValue from './LocationValue';

/**
 * The Dictionaries model module.
 * @module model/Dictionaries
 * @version 1.9.2
 */
class Dictionaries {
    /**
     * Constructs a new <code>Dictionaries</code>.
     * @alias module:model/Dictionaries
     */
    constructor() { 
        
        Dictionaries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dictionaries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dictionaries} obj Optional instance to populate.
     * @return {module:model/Dictionaries} The populated <code>Dictionaries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dictionaries();

            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], {'String': 'String'});
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], {'String': LocationValue});
            }
            if (data.hasOwnProperty('seatCharacteristics')) {
                obj['seatCharacteristics'] = ApiClient.convertToType(data['seatCharacteristics'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dictionaries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dictionaries</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * on board facilities map. E.g: bulkhead, closet, exit door, galley, lavatory
 * @member {Object.<String, String>} facilities
 */
Dictionaries.prototype['facilities'] = undefined;

/**
 * @member {Object.<String, module:model/LocationValue>} locations
 */
Dictionaries.prototype['locations'] = undefined;

/**
 * seat characteristics dictionary allows mapping a service characteristic to its name. Possible values are part of:   IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825, Example: CH = Chargeable Seat, W = Window Seat, A = Aisle              Seat, Q = Seat in a quiet zone, E = Exit Row Seat   Amadeus Code: defined as extension, example MV=row with movie screen   Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT=premium seat
 * @member {Object.<String, String>} seatCharacteristics
 */
Dictionaries.prototype['seatCharacteristics'] = undefined;






export default Dictionaries;

