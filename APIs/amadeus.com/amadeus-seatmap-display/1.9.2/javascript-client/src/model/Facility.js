/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';

/**
 * The Facility model module.
 * @module model/Facility
 * @version 1.9.2
 */
class Facility {
    /**
     * Constructs a new <code>Facility</code>.
     * @alias module:model/Facility
     */
    constructor() { 
        
        Facility.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Facility</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Facility} obj Optional instance to populate.
     * @return {module:model/Facility} The populated <code>Facility</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Facility();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = Coordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('row')) {
                obj['row'] = ApiClient.convertToType(data['row'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Facility</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Facility</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          Coordinates.validateJSON(data['coordinates']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['row'] && !(typeof data['row'] === 'string' || data['row'] instanceof String)) {
            throw new Error("Expected the field `row` to be a primitive type in the JSON string but got " + data['row']);
        }

        return true;
    }


}



/**
 * Facility code, as described in the facility dictionary
 * @member {String} code
 */
Facility.prototype['code'] = undefined;

/**
 * @member {String} column
 */
Facility.prototype['column'] = undefined;

/**
 * @member {module:model/Coordinates} coordinates
 */
Facility.prototype['coordinates'] = undefined;

/**
 * Position is either front, rear or seat (in case the facility takes the place of a seat)
 * @member {module:model/Facility.PositionEnum} position
 */
Facility.prototype['position'] = undefined;

/**
 * @member {String} row
 */
Facility.prototype['row'] = undefined;





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Facility['PositionEnum'] = {

    /**
     * value: "FRONT"
     * @const
     */
    "FRONT": "FRONT",

    /**
     * value: "REAR"
     * @const
     */
    "REAR": "REAR",

    /**
     * value: "SEAT"
     * @const
     */
    "SEAT": "SEAT"
};



export default Facility;

