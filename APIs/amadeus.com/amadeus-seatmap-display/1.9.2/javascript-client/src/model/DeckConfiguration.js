/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeckConfiguration model module.
 * @module model/DeckConfiguration
 * @version 1.9.2
 */
class DeckConfiguration {
    /**
     * Constructs a new <code>DeckConfiguration</code>.
     * deck dimensions are used as a reference to display the entire aircraft or to the section associated to the requested cabin (or set of cabins)
     * @alias module:model/DeckConfiguration
     */
    constructor() { 
        
        DeckConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeckConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeckConfiguration} obj Optional instance to populate.
     * @return {module:model/DeckConfiguration} The populated <code>DeckConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeckConfiguration();

            if (data.hasOwnProperty('endSeatRow')) {
                obj['endSeatRow'] = ApiClient.convertToType(data['endSeatRow'], 'Number');
            }
            if (data.hasOwnProperty('endWingsRow')) {
                obj['endWingsRow'] = ApiClient.convertToType(data['endWingsRow'], 'Number');
            }
            if (data.hasOwnProperty('endWingsX')) {
                obj['endWingsX'] = ApiClient.convertToType(data['endWingsX'], 'Number');
            }
            if (data.hasOwnProperty('exitRowsX')) {
                obj['exitRowsX'] = ApiClient.convertToType(data['exitRowsX'], ['Number']);
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('startSeatRow')) {
                obj['startSeatRow'] = ApiClient.convertToType(data['startSeatRow'], 'Number');
            }
            if (data.hasOwnProperty('startWingsRow')) {
                obj['startWingsRow'] = ApiClient.convertToType(data['startWingsRow'], 'Number');
            }
            if (data.hasOwnProperty('startWingsX')) {
                obj['startWingsX'] = ApiClient.convertToType(data['startWingsX'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeckConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeckConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['exitRowsX'])) {
            throw new Error("Expected the field `exitRowsX` to be an array in the JSON data but got " + data['exitRowsX']);
        }

        return true;
    }


}



/**
 * seat row where the deck is ending
 * @member {Number} endSeatRow
 */
DeckConfiguration.prototype['endSeatRow'] = undefined;

/**
 * seat row where the wing is ending
 * @member {Number} endWingsRow
 */
DeckConfiguration.prototype['endWingsRow'] = undefined;

/**
 * End x coordinate of the wings.The wings display ends relatively to the length.
 * @member {Number} endWingsX
 */
DeckConfiguration.prototype['endWingsX'] = undefined;

/**
 * X coordinate of the exit rows.The exit rows are displayed relatively to the length.
 * @member {Array.<Number>} exitRowsX
 */
DeckConfiguration.prototype['exitRowsX'] = undefined;

/**
 * Length (x-axis) of the deck.
 * @member {Number} length
 */
DeckConfiguration.prototype['length'] = undefined;

/**
 * seat row where the deck is starting
 * @member {Number} startSeatRow
 */
DeckConfiguration.prototype['startSeatRow'] = undefined;

/**
 * seat row where the wing is starting
 * @member {Number} startWingsRow
 */
DeckConfiguration.prototype['startWingsRow'] = undefined;

/**
 * Start x coordinate of the wings.The wings display starts relatively to the length.
 * @member {Number} startWingsX
 */
DeckConfiguration.prototype['startWingsX'] = undefined;

/**
 * Width (y-axis) of the deck.
 * @member {Number} width
 */
DeckConfiguration.prototype['width'] = undefined;






export default DeckConfiguration;

