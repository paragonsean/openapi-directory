/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';
import SeatmapTravelerPricing from './SeatmapTravelerPricing';

/**
 * The Seat model module.
 * @module model/Seat
 * @version 1.9.2
 */
class Seat {
    /**
     * Constructs a new <code>Seat</code>.
     * @alias module:model/Seat
     */
    constructor() { 
        
        Seat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Seat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Seat} obj Optional instance to populate.
     * @return {module:model/Seat} The populated <code>Seat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Seat();

            if (data.hasOwnProperty('cabin')) {
                obj['cabin'] = ApiClient.convertToType(data['cabin'], 'String');
            }
            if (data.hasOwnProperty('characteristicsCodes')) {
                obj['characteristicsCodes'] = ApiClient.convertToType(data['characteristicsCodes'], ['String']);
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = Coordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('travelerPricing')) {
                obj['travelerPricing'] = ApiClient.convertToType(data['travelerPricing'], [SeatmapTravelerPricing]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Seat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Seat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cabin'] && !(typeof data['cabin'] === 'string' || data['cabin'] instanceof String)) {
            throw new Error("Expected the field `cabin` to be a primitive type in the JSON string but got " + data['cabin']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['characteristicsCodes'])) {
            throw new Error("Expected the field `characteristicsCodes` to be an array in the JSON data but got " + data['characteristicsCodes']);
        }
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          Coordinates.validateJSON(data['coordinates']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        if (data['travelerPricing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['travelerPricing'])) {
                throw new Error("Expected the field `travelerPricing` to be an array in the JSON data but got " + data['travelerPricing']);
            }
            // validate the optional field `travelerPricing` (array)
            for (const item of data['travelerPricing']) {
                SeatmapTravelerPricing.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Cabin of the seat.
 * @member {String} cabin
 */
Seat.prototype['cabin'] = undefined;

/**
 * List of seat characteristics (the characteristic's names can be retrieved in the seat characteristic dictionary) Possible values are part of:    IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825    Amadeus Code: defined as extension, example MV=row with movie screen    Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT=premium seat
 * @member {Array.<String>} characteristicsCodes
 */
Seat.prototype['characteristicsCodes'] = undefined;

/**
 * @member {module:model/Coordinates} coordinates
 */
Seat.prototype['coordinates'] = undefined;

/**
 * Concatenation of the row id and the column id, for example 12B
 * @member {String} number
 */
Seat.prototype['number'] = undefined;

/**
 * Traveler's information and price
 * @member {Array.<module:model/SeatmapTravelerPricing>} travelerPricing
 */
Seat.prototype['travelerPricing'] = undefined;






export default Seat;

