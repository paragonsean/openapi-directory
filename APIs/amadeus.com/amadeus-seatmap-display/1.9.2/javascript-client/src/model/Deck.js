/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeckConfiguration from './DeckConfiguration';
import Facility from './Facility';
import Seat from './Seat';

/**
 * The Deck model module.
 * @module model/Deck
 * @version 1.9.2
 */
class Deck {
    /**
     * Constructs a new <code>Deck</code>.
     * deck information
     * @alias module:model/Deck
     */
    constructor() { 
        
        Deck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Deck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deck} obj Optional instance to populate.
     * @return {module:model/Deck} The populated <code>Deck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deck();

            if (data.hasOwnProperty('deckConfiguration')) {
                obj['deckConfiguration'] = DeckConfiguration.constructFromObject(data['deckConfiguration']);
            }
            if (data.hasOwnProperty('deckType')) {
                obj['deckType'] = ApiClient.convertToType(data['deckType'], 'String');
            }
            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], [Facility]);
            }
            if (data.hasOwnProperty('seats')) {
                obj['seats'] = ApiClient.convertToType(data['seats'], [Seat]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deck</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deckConfiguration`
        if (data['deckConfiguration']) { // data not null
          DeckConfiguration.validateJSON(data['deckConfiguration']);
        }
        // ensure the json data is a string
        if (data['deckType'] && !(typeof data['deckType'] === 'string' || data['deckType'] instanceof String)) {
            throw new Error("Expected the field `deckType` to be a primitive type in the JSON string but got " + data['deckType']);
        }
        if (data['facilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facilities'])) {
                throw new Error("Expected the field `facilities` to be an array in the JSON data but got " + data['facilities']);
            }
            // validate the optional field `facilities` (array)
            for (const item of data['facilities']) {
                Facility.validateJSON(item);
            };
        }
        if (data['seats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seats'])) {
                throw new Error("Expected the field `seats` to be an array in the JSON data but got " + data['seats']);
            }
            // validate the optional field `seats` (array)
            for (const item of data['seats']) {
                Seat.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DeckConfiguration} deckConfiguration
 */
Deck.prototype['deckConfiguration'] = undefined;

/**
 * A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.
 * @member {module:model/Deck.DeckTypeEnum} deckType
 */
Deck.prototype['deckType'] = undefined;

/**
 * @member {Array.<module:model/Facility>} facilities
 */
Deck.prototype['facilities'] = undefined;

/**
 * @member {Array.<module:model/Seat>} seats
 */
Deck.prototype['seats'] = undefined;





/**
 * Allowed values for the <code>deckType</code> property.
 * @enum {String}
 * @readonly
 */
Deck['DeckTypeEnum'] = {

    /**
     * value: "UPPER"
     * @const
     */
    "UPPER": "UPPER",

    /**
     * value: "MAIN"
     * @const
     */
    "MAIN": "MAIN",

    /**
     * value: "LOWER"
     * @const
     */
    "LOWER": "LOWER"
};



export default Deck;

