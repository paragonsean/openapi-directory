/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmenityMedia from './AmenityMedia';

/**
 * The AmenitySeat model module.
 * @module model/AmenitySeat
 * @version 1.9.2
 */
class AmenitySeat {
    /**
     * Constructs a new <code>AmenitySeat</code>.
     * Characteristics for a group of seat, such as Distance from one seat to the another in front or behind it or width space
     * @alias module:model/AmenitySeat
     */
    constructor() { 
        
        AmenitySeat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AmenitySeat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmenitySeat} obj Optional instance to populate.
     * @return {module:model/AmenitySeat} The populated <code>AmenitySeat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmenitySeat();

            if (data.hasOwnProperty('amenityType')) {
                obj['amenityType'] = ApiClient.convertToType(data['amenityType'], 'String');
            }
            if (data.hasOwnProperty('legSpace')) {
                obj['legSpace'] = ApiClient.convertToType(data['legSpace'], 'Number');
            }
            if (data.hasOwnProperty('medias')) {
                obj['medias'] = ApiClient.convertToType(data['medias'], [AmenityMedia]);
            }
            if (data.hasOwnProperty('spaceUnit')) {
                obj['spaceUnit'] = ApiClient.convertToType(data['spaceUnit'], 'String');
            }
            if (data.hasOwnProperty('tilt')) {
                obj['tilt'] = ApiClient.convertToType(data['tilt'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmenitySeat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmenitySeat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amenityType'] && !(typeof data['amenityType'] === 'string' || data['amenityType'] instanceof String)) {
            throw new Error("Expected the field `amenityType` to be a primitive type in the JSON string but got " + data['amenityType']);
        }
        if (data['medias']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['medias'])) {
                throw new Error("Expected the field `medias` to be an array in the JSON data but got " + data['medias']);
            }
            // validate the optional field `medias` (array)
            for (const item of data['medias']) {
                AmenityMedia.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['spaceUnit'] && !(typeof data['spaceUnit'] === 'string' || data['spaceUnit'] instanceof String)) {
            throw new Error("Expected the field `spaceUnit` to be a primitive type in the JSON string but got " + data['spaceUnit']);
        }
        // ensure the json data is a string
        if (data['tilt'] && !(typeof data['tilt'] === 'string' || data['tilt'] instanceof String)) {
            throw new Error("Expected the field `tilt` to be a primitive type in the JSON string but got " + data['tilt']);
        }

        return true;
    }


}



/**
 * @member {module:model/AmenitySeat.AmenityTypeEnum} amenityType
 */
AmenitySeat.prototype['amenityType'] = undefined;

/**
 * Space between 2 seats
 * @member {Number} legSpace
 */
AmenitySeat.prototype['legSpace'] = undefined;

/**
 * list of media associated to the seat (rich content)
 * @member {Array.<module:model/AmenityMedia>} medias
 */
AmenitySeat.prototype['medias'] = undefined;

/**
 * @member {module:model/AmenitySeat.SpaceUnitEnum} spaceUnit
 */
AmenitySeat.prototype['spaceUnit'] = undefined;

/**
 * Flatness of a seat
 * @member {module:model/AmenitySeat.TiltEnum} tilt
 */
AmenitySeat.prototype['tilt'] = undefined;





/**
 * Allowed values for the <code>amenityType</code> property.
 * @enum {String}
 * @readonly
 */
AmenitySeat['AmenityTypeEnum'] = {

    /**
     * value: "SEAT"
     * @const
     */
    "SEAT": "SEAT"
};


/**
 * Allowed values for the <code>spaceUnit</code> property.
 * @enum {String}
 * @readonly
 */
AmenitySeat['SpaceUnitEnum'] = {

    /**
     * value: "INCHES"
     * @const
     */
    "INCHES": "INCHES",

    /**
     * value: "CENTIMENTERS"
     * @const
     */
    "CENTIMENTERS": "CENTIMENTERS"
};


/**
 * Allowed values for the <code>tilt</code> property.
 * @enum {String}
 * @readonly
 */
AmenitySeat['TiltEnum'] = {

    /**
     * value: "FULL_FLAT"
     * @const
     */
    "FULL_FLAT": "FULL_FLAT",

    /**
     * value: "ANGLE_FLAT"
     * @const
     */
    "ANGLE_FLAT": "ANGLE_FLAT",

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL"
};



export default AmenitySeat;

