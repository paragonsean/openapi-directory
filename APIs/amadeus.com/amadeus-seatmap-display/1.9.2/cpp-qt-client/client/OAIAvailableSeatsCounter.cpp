/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableSeatsCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableSeatsCounter::OAIAvailableSeatsCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableSeatsCounter::OAIAvailableSeatsCounter() {
    this->initializeModel();
}

OAIAvailableSeatsCounter::~OAIAvailableSeatsCounter() {}

void OAIAvailableSeatsCounter::initializeModel() {

    m_traveler_id_isSet = false;
    m_traveler_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAvailableSeatsCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableSeatsCounter::fromJsonObject(QJsonObject json) {

    m_traveler_id_isValid = ::OpenAPI::fromJsonValue(m_traveler_id, json[QString("travelerId")]);
    m_traveler_id_isSet = !json[QString("travelerId")].isNull() && m_traveler_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAvailableSeatsCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableSeatsCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_traveler_id_isSet) {
        obj.insert(QString("travelerId"), ::OpenAPI::toJsonValue(m_traveler_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAvailableSeatsCounter::getTravelerId() const {
    return m_traveler_id;
}
void OAIAvailableSeatsCounter::setTravelerId(const QString &traveler_id) {
    m_traveler_id = traveler_id;
    m_traveler_id_isSet = true;
}

bool OAIAvailableSeatsCounter::is_traveler_id_Set() const{
    return m_traveler_id_isSet;
}

bool OAIAvailableSeatsCounter::is_traveler_id_Valid() const{
    return m_traveler_id_isValid;
}

qint32 OAIAvailableSeatsCounter::getValue() const {
    return m_value;
}
void OAIAvailableSeatsCounter::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAvailableSeatsCounter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAvailableSeatsCounter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAvailableSeatsCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_traveler_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableSeatsCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
