/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmenity_Seat.h
 *
 * Characteristics for a group of seat, such as Distance from one seat to the another in front or behind it or width space
 */

#ifndef OAIAmenity_Seat_H
#define OAIAmenity_Seat_H

#include <QJsonObject>

#include "OAIAmenity_Media.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmenity_Media;

class OAIAmenity_Seat : public OAIObject {
public:
    OAIAmenity_Seat();
    OAIAmenity_Seat(QString json);
    ~OAIAmenity_Seat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmenityType() const;
    void setAmenityType(const QString &amenity_type);
    bool is_amenity_type_Set() const;
    bool is_amenity_type_Valid() const;

    qint32 getLegSpace() const;
    void setLegSpace(const qint32 &leg_space);
    bool is_leg_space_Set() const;
    bool is_leg_space_Valid() const;

    QList<OAIAmenity_Media> getMedias() const;
    void setMedias(const QList<OAIAmenity_Media> &medias);
    bool is_medias_Set() const;
    bool is_medias_Valid() const;

    QString getSpaceUnit() const;
    void setSpaceUnit(const QString &space_unit);
    bool is_space_unit_Set() const;
    bool is_space_unit_Valid() const;

    QString getTilt() const;
    void setTilt(const QString &tilt);
    bool is_tilt_Set() const;
    bool is_tilt_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amenity_type;
    bool m_amenity_type_isSet;
    bool m_amenity_type_isValid;

    qint32 m_leg_space;
    bool m_leg_space_isSet;
    bool m_leg_space_isValid;

    QList<OAIAmenity_Media> m_medias;
    bool m_medias_isSet;
    bool m_medias_isValid;

    QString m_space_unit;
    bool m_space_unit_isSet;
    bool m_space_unit_isValid;

    QString m_tilt;
    bool m_tilt_isSet;
    bool m_tilt_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmenity_Seat)

#endif // OAIAmenity_Seat_H
