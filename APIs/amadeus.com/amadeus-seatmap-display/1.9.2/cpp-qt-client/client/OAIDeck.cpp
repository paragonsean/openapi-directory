/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeck::OAIDeck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeck::OAIDeck() {
    this->initializeModel();
}

OAIDeck::~OAIDeck() {}

void OAIDeck::initializeModel() {

    m_deck_configuration_isSet = false;
    m_deck_configuration_isValid = false;

    m_deck_type_isSet = false;
    m_deck_type_isValid = false;

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;
}

void OAIDeck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeck::fromJsonObject(QJsonObject json) {

    m_deck_configuration_isValid = ::OpenAPI::fromJsonValue(m_deck_configuration, json[QString("deckConfiguration")]);
    m_deck_configuration_isSet = !json[QString("deckConfiguration")].isNull() && m_deck_configuration_isValid;

    m_deck_type_isValid = ::OpenAPI::fromJsonValue(m_deck_type, json[QString("deckType")]);
    m_deck_type_isSet = !json[QString("deckType")].isNull() && m_deck_type_isValid;

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("facilities")]);
    m_facilities_isSet = !json[QString("facilities")].isNull() && m_facilities_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;
}

QString OAIDeck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeck::asJsonObject() const {
    QJsonObject obj;
    if (m_deck_configuration.isSet()) {
        obj.insert(QString("deckConfiguration"), ::OpenAPI::toJsonValue(m_deck_configuration));
    }
    if (m_deck_type_isSet) {
        obj.insert(QString("deckType"), ::OpenAPI::toJsonValue(m_deck_type));
    }
    if (m_facilities.size() > 0) {
        obj.insert(QString("facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_seats.size() > 0) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    return obj;
}

OAIDeckConfiguration OAIDeck::getDeckConfiguration() const {
    return m_deck_configuration;
}
void OAIDeck::setDeckConfiguration(const OAIDeckConfiguration &deck_configuration) {
    m_deck_configuration = deck_configuration;
    m_deck_configuration_isSet = true;
}

bool OAIDeck::is_deck_configuration_Set() const{
    return m_deck_configuration_isSet;
}

bool OAIDeck::is_deck_configuration_Valid() const{
    return m_deck_configuration_isValid;
}

QString OAIDeck::getDeckType() const {
    return m_deck_type;
}
void OAIDeck::setDeckType(const QString &deck_type) {
    m_deck_type = deck_type;
    m_deck_type_isSet = true;
}

bool OAIDeck::is_deck_type_Set() const{
    return m_deck_type_isSet;
}

bool OAIDeck::is_deck_type_Valid() const{
    return m_deck_type_isValid;
}

QList<OAIFacility> OAIDeck::getFacilities() const {
    return m_facilities;
}
void OAIDeck::setFacilities(const QList<OAIFacility> &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIDeck::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIDeck::is_facilities_Valid() const{
    return m_facilities_isValid;
}

QList<OAISeat> OAIDeck::getSeats() const {
    return m_seats;
}
void OAIDeck::setSeats(const QList<OAISeat> &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIDeck::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIDeck::is_seats_Valid() const{
    return m_seats_isValid;
}

bool OAIDeck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deck_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deck_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
