/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeckConfiguration.h
 *
 * deck dimensions are used as a reference to display the entire aircraft or to the section associated to the requested cabin (or set of cabins)
 */

#ifndef OAIDeckConfiguration_H
#define OAIDeckConfiguration_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeckConfiguration : public OAIObject {
public:
    OAIDeckConfiguration();
    OAIDeckConfiguration(QString json);
    ~OAIDeckConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEndSeatRow() const;
    void setEndSeatRow(const qint32 &end_seat_row);
    bool is_end_seat_row_Set() const;
    bool is_end_seat_row_Valid() const;

    qint32 getEndWingsRow() const;
    void setEndWingsRow(const qint32 &end_wings_row);
    bool is_end_wings_row_Set() const;
    bool is_end_wings_row_Valid() const;

    qint32 getEndWingsX() const;
    void setEndWingsX(const qint32 &end_wings_x);
    bool is_end_wings_x_Set() const;
    bool is_end_wings_x_Valid() const;

    QList<qint32> getExitRowsX() const;
    void setExitRowsX(const QList<qint32> &exit_rows_x);
    bool is_exit_rows_x_Set() const;
    bool is_exit_rows_x_Valid() const;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    qint32 getStartSeatRow() const;
    void setStartSeatRow(const qint32 &start_seat_row);
    bool is_start_seat_row_Set() const;
    bool is_start_seat_row_Valid() const;

    qint32 getStartWingsRow() const;
    void setStartWingsRow(const qint32 &start_wings_row);
    bool is_start_wings_row_Set() const;
    bool is_start_wings_row_Valid() const;

    qint32 getStartWingsX() const;
    void setStartWingsX(const qint32 &start_wings_x);
    bool is_start_wings_x_Set() const;
    bool is_start_wings_x_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end_seat_row;
    bool m_end_seat_row_isSet;
    bool m_end_seat_row_isValid;

    qint32 m_end_wings_row;
    bool m_end_wings_row_isSet;
    bool m_end_wings_row_isValid;

    qint32 m_end_wings_x;
    bool m_end_wings_x_isSet;
    bool m_end_wings_x_isValid;

    QList<qint32> m_exit_rows_x;
    bool m_exit_rows_x_isSet;
    bool m_exit_rows_x_isValid;

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    qint32 m_start_seat_row;
    bool m_start_seat_row_isSet;
    bool m_start_seat_row_isValid;

    qint32 m_start_wings_row;
    bool m_start_wings_row_isSet;
    bool m_start_wings_row_isValid;

    qint32 m_start_wings_x;
    bool m_start_wings_x_isSet;
    bool m_start_wings_x_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeckConfiguration)

#endif // OAIDeckConfiguration_H
