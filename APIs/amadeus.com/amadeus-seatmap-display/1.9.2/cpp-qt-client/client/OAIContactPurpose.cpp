/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactPurpose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactPurpose::OAIContactPurpose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactPurpose::OAIContactPurpose() {
    this->initializeModel();
}

OAIContactPurpose::~OAIContactPurpose() {}

void OAIContactPurpose::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContactPurpose::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContactPurpose::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactPurpose::STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVOICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactPurpose::INVOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDARD_WITHOUT_TRANSMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactPurpose::STANDARD_WITHOUT_TRANSMISSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContactPurpose::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContactPurpose::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContactPurpose::STANDARD:
            val = "STANDARD";
            break;
        case eOAIContactPurpose::INVOICE:
            val = "INVOICE";
            break;
        case eOAIContactPurpose::STANDARD_WITHOUT_TRANSMISSION:
            val = "STANDARD_WITHOUT_TRANSMISSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContactPurpose::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContactPurpose::eOAIContactPurpose OAIContactPurpose::getValue() const {
    return m_value;
}

void OAIContactPurpose::setValue(const OAIContactPurpose::eOAIContactPurpose& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContactPurpose::isSet() const {
    
    return m_value_isSet;
}

bool OAIContactPurpose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
