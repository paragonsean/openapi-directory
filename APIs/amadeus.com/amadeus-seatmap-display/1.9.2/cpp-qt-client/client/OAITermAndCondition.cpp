/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITermAndCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITermAndCondition::OAITermAndCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITermAndCondition::OAITermAndCondition() {
    this->initializeModel();
}

OAITermAndCondition::~OAITermAndCondition() {}

void OAITermAndCondition::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_circumstances_isSet = false;
    m_circumstances_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_max_penalty_amount_isSet = false;
    m_max_penalty_amount_isValid = false;

    m_not_applicable_isSet = false;
    m_not_applicable_isValid = false;
}

void OAITermAndCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITermAndCondition::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_circumstances_isValid = ::OpenAPI::fromJsonValue(m_circumstances, json[QString("circumstances")]);
    m_circumstances_isSet = !json[QString("circumstances")].isNull() && m_circumstances_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_max_penalty_amount_isValid = ::OpenAPI::fromJsonValue(m_max_penalty_amount, json[QString("maxPenaltyAmount")]);
    m_max_penalty_amount_isSet = !json[QString("maxPenaltyAmount")].isNull() && m_max_penalty_amount_isValid;

    m_not_applicable_isValid = ::OpenAPI::fromJsonValue(m_not_applicable, json[QString("notApplicable")]);
    m_not_applicable_isSet = !json[QString("notApplicable")].isNull() && m_not_applicable_isValid;
}

QString OAITermAndCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITermAndCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_circumstances_isSet) {
        obj.insert(QString("circumstances"), ::OpenAPI::toJsonValue(m_circumstances));
    }
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_max_penalty_amount_isSet) {
        obj.insert(QString("maxPenaltyAmount"), ::OpenAPI::toJsonValue(m_max_penalty_amount));
    }
    if (m_not_applicable_isSet) {
        obj.insert(QString("notApplicable"), ::OpenAPI::toJsonValue(m_not_applicable));
    }
    return obj;
}

QString OAITermAndCondition::getCategory() const {
    return m_category;
}
void OAITermAndCondition::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITermAndCondition::is_category_Set() const{
    return m_category_isSet;
}

bool OAITermAndCondition::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITermAndCondition::getCircumstances() const {
    return m_circumstances;
}
void OAITermAndCondition::setCircumstances(const QString &circumstances) {
    m_circumstances = circumstances;
    m_circumstances_isSet = true;
}

bool OAITermAndCondition::is_circumstances_Set() const{
    return m_circumstances_isSet;
}

bool OAITermAndCondition::is_circumstances_Valid() const{
    return m_circumstances_isValid;
}

QList<OAIDescription> OAITermAndCondition::getDescriptions() const {
    return m_descriptions;
}
void OAITermAndCondition::setDescriptions(const QList<OAIDescription> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAITermAndCondition::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAITermAndCondition::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

QString OAITermAndCondition::getMaxPenaltyAmount() const {
    return m_max_penalty_amount;
}
void OAITermAndCondition::setMaxPenaltyAmount(const QString &max_penalty_amount) {
    m_max_penalty_amount = max_penalty_amount;
    m_max_penalty_amount_isSet = true;
}

bool OAITermAndCondition::is_max_penalty_amount_Set() const{
    return m_max_penalty_amount_isSet;
}

bool OAITermAndCondition::is_max_penalty_amount_Valid() const{
    return m_max_penalty_amount_isValid;
}

bool OAITermAndCondition::isNotApplicable() const {
    return m_not_applicable;
}
void OAITermAndCondition::setNotApplicable(const bool &not_applicable) {
    m_not_applicable = not_applicable;
    m_not_applicable_isSet = true;
}

bool OAITermAndCondition::is_not_applicable_Set() const{
    return m_not_applicable_isSet;
}

bool OAITermAndCondition::is_not_applicable_Valid() const{
    return m_not_applicable_isValid;
}

bool OAITermAndCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circumstances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_penalty_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITermAndCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
