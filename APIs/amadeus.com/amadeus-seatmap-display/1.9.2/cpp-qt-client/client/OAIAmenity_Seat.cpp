/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmenity_Seat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmenity_Seat::OAIAmenity_Seat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmenity_Seat::OAIAmenity_Seat() {
    this->initializeModel();
}

OAIAmenity_Seat::~OAIAmenity_Seat() {}

void OAIAmenity_Seat::initializeModel() {

    m_amenity_type_isSet = false;
    m_amenity_type_isValid = false;

    m_leg_space_isSet = false;
    m_leg_space_isValid = false;

    m_medias_isSet = false;
    m_medias_isValid = false;

    m_space_unit_isSet = false;
    m_space_unit_isValid = false;

    m_tilt_isSet = false;
    m_tilt_isValid = false;
}

void OAIAmenity_Seat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmenity_Seat::fromJsonObject(QJsonObject json) {

    m_amenity_type_isValid = ::OpenAPI::fromJsonValue(m_amenity_type, json[QString("amenityType")]);
    m_amenity_type_isSet = !json[QString("amenityType")].isNull() && m_amenity_type_isValid;

    m_leg_space_isValid = ::OpenAPI::fromJsonValue(m_leg_space, json[QString("legSpace")]);
    m_leg_space_isSet = !json[QString("legSpace")].isNull() && m_leg_space_isValid;

    m_medias_isValid = ::OpenAPI::fromJsonValue(m_medias, json[QString("medias")]);
    m_medias_isSet = !json[QString("medias")].isNull() && m_medias_isValid;

    m_space_unit_isValid = ::OpenAPI::fromJsonValue(m_space_unit, json[QString("spaceUnit")]);
    m_space_unit_isSet = !json[QString("spaceUnit")].isNull() && m_space_unit_isValid;

    m_tilt_isValid = ::OpenAPI::fromJsonValue(m_tilt, json[QString("tilt")]);
    m_tilt_isSet = !json[QString("tilt")].isNull() && m_tilt_isValid;
}

QString OAIAmenity_Seat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmenity_Seat::asJsonObject() const {
    QJsonObject obj;
    if (m_amenity_type_isSet) {
        obj.insert(QString("amenityType"), ::OpenAPI::toJsonValue(m_amenity_type));
    }
    if (m_leg_space_isSet) {
        obj.insert(QString("legSpace"), ::OpenAPI::toJsonValue(m_leg_space));
    }
    if (m_medias.size() > 0) {
        obj.insert(QString("medias"), ::OpenAPI::toJsonValue(m_medias));
    }
    if (m_space_unit_isSet) {
        obj.insert(QString("spaceUnit"), ::OpenAPI::toJsonValue(m_space_unit));
    }
    if (m_tilt_isSet) {
        obj.insert(QString("tilt"), ::OpenAPI::toJsonValue(m_tilt));
    }
    return obj;
}

QString OAIAmenity_Seat::getAmenityType() const {
    return m_amenity_type;
}
void OAIAmenity_Seat::setAmenityType(const QString &amenity_type) {
    m_amenity_type = amenity_type;
    m_amenity_type_isSet = true;
}

bool OAIAmenity_Seat::is_amenity_type_Set() const{
    return m_amenity_type_isSet;
}

bool OAIAmenity_Seat::is_amenity_type_Valid() const{
    return m_amenity_type_isValid;
}

qint32 OAIAmenity_Seat::getLegSpace() const {
    return m_leg_space;
}
void OAIAmenity_Seat::setLegSpace(const qint32 &leg_space) {
    m_leg_space = leg_space;
    m_leg_space_isSet = true;
}

bool OAIAmenity_Seat::is_leg_space_Set() const{
    return m_leg_space_isSet;
}

bool OAIAmenity_Seat::is_leg_space_Valid() const{
    return m_leg_space_isValid;
}

QList<OAIAmenity_Media> OAIAmenity_Seat::getMedias() const {
    return m_medias;
}
void OAIAmenity_Seat::setMedias(const QList<OAIAmenity_Media> &medias) {
    m_medias = medias;
    m_medias_isSet = true;
}

bool OAIAmenity_Seat::is_medias_Set() const{
    return m_medias_isSet;
}

bool OAIAmenity_Seat::is_medias_Valid() const{
    return m_medias_isValid;
}

QString OAIAmenity_Seat::getSpaceUnit() const {
    return m_space_unit;
}
void OAIAmenity_Seat::setSpaceUnit(const QString &space_unit) {
    m_space_unit = space_unit;
    m_space_unit_isSet = true;
}

bool OAIAmenity_Seat::is_space_unit_Set() const{
    return m_space_unit_isSet;
}

bool OAIAmenity_Seat::is_space_unit_Valid() const{
    return m_space_unit_isValid;
}

QString OAIAmenity_Seat::getTilt() const {
    return m_tilt;
}
void OAIAmenity_Seat::setTilt(const QString &tilt) {
    m_tilt = tilt;
    m_tilt_isSet = true;
}

bool OAIAmenity_Seat::is_tilt_Set() const{
    return m_tilt_isSet;
}

bool OAIAmenity_Seat::is_tilt_Valid() const{
    return m_tilt_isValid;
}

bool OAIAmenity_Seat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leg_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tilt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmenity_Seat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
