/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISeatMap.h
 *
 * seat map information
 */

#ifndef OAISeatMap_H
#define OAISeatMap_H

#include <QJsonObject>

#include "OAIAircraftCabinAmenities.h"
#include "OAIAircraftEquipment.h"
#include "OAIAvailableSeatsCounter.h"
#include "OAIDeck.h"
#include "OAIFlightEndPoint.h"
#include "OAILink.h"
#include "OAIOperatingFlight.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAircraftEquipment;
class OAIAircraftCabinAmenities;
class OAIFlightEndPoint;
class OAIAvailableSeatsCounter;
class OAIDeck;
class OAIOperatingFlight;
class OAILink;

class OAISeatMap : public OAIObject {
public:
    OAISeatMap();
    OAISeatMap(QString json);
    ~OAISeatMap() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAircraftEquipment getAircraft() const;
    void setAircraft(const OAIAircraftEquipment &aircraft);
    bool is_aircraft_Set() const;
    bool is_aircraft_Valid() const;

    OAIAircraftCabinAmenities getAircraftCabinAmenities() const;
    void setAircraftCabinAmenities(const OAIAircraftCabinAmenities &aircraft_cabin_amenities);
    bool is_aircraft_cabin_amenities_Set() const;
    bool is_aircraft_cabin_amenities_Valid() const;

    OAIFlightEndPoint getArrival() const;
    void setArrival(const OAIFlightEndPoint &arrival);
    bool is_arrival_Set() const;
    bool is_arrival_Valid() const;

    QList<OAIAvailableSeatsCounter> getAvailableSeatsCounters() const;
    void setAvailableSeatsCounters(const QList<OAIAvailableSeatsCounter> &available_seats_counters);
    bool is_available_seats_counters_Set() const;
    bool is_available_seats_counters_Valid() const;

    QString getCarrierCode() const;
    void setCarrierCode(const QString &carrier_code);
    bool is_carrier_code_Set() const;
    bool is_carrier_code_Valid() const;

    QString getRClass() const;
    void setRClass(const QString &r_class);
    bool is_r_class_Set() const;
    bool is_r_class_Valid() const;

    QList<OAIDeck> getDecks() const;
    void setDecks(const QList<OAIDeck> &decks);
    bool is_decks_Set() const;
    bool is_decks_Valid() const;

    OAIFlightEndPoint getDeparture() const;
    void setDeparture(const OAIFlightEndPoint &departure);
    bool is_departure_Set() const;
    bool is_departure_Valid() const;

    QString getFlightOfferId() const;
    void setFlightOfferId(const QString &flight_offer_id);
    bool is_flight_offer_id_Set() const;
    bool is_flight_offer_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    OAIOperatingFlight getOperating() const;
    void setOperating(const OAIOperatingFlight &operating);
    bool is_operating_Set() const;
    bool is_operating_Valid() const;

    QString getSegmentId() const;
    void setSegmentId(const QString &segment_id);
    bool is_segment_id_Set() const;
    bool is_segment_id_Valid() const;

    OAILink getSelf() const;
    void setSelf(const OAILink &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAircraftEquipment m_aircraft;
    bool m_aircraft_isSet;
    bool m_aircraft_isValid;

    OAIAircraftCabinAmenities m_aircraft_cabin_amenities;
    bool m_aircraft_cabin_amenities_isSet;
    bool m_aircraft_cabin_amenities_isValid;

    OAIFlightEndPoint m_arrival;
    bool m_arrival_isSet;
    bool m_arrival_isValid;

    QList<OAIAvailableSeatsCounter> m_available_seats_counters;
    bool m_available_seats_counters_isSet;
    bool m_available_seats_counters_isValid;

    QString m_carrier_code;
    bool m_carrier_code_isSet;
    bool m_carrier_code_isValid;

    QString m_r_class;
    bool m_r_class_isSet;
    bool m_r_class_isValid;

    QList<OAIDeck> m_decks;
    bool m_decks_isSet;
    bool m_decks_isValid;

    OAIFlightEndPoint m_departure;
    bool m_departure_isSet;
    bool m_departure_isValid;

    QString m_flight_offer_id;
    bool m_flight_offer_id_isSet;
    bool m_flight_offer_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    OAIOperatingFlight m_operating;
    bool m_operating_isSet;
    bool m_operating_isValid;

    QString m_segment_id;
    bool m_segment_id_isSet;
    bool m_segment_id_isValid;

    OAILink m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISeatMap)

#endif // OAISeatMap_H
