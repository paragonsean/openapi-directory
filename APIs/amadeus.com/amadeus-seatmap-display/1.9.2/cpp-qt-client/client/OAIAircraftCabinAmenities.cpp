/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAircraftCabinAmenities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAircraftCabinAmenities::OAIAircraftCabinAmenities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAircraftCabinAmenities::OAIAircraftCabinAmenities() {
    this->initializeModel();
}

OAIAircraftCabinAmenities::~OAIAircraftCabinAmenities() {}

void OAIAircraftCabinAmenities::initializeModel() {

    m_beverage_isSet = false;
    m_beverage_isValid = false;

    m_entertainment_isSet = false;
    m_entertainment_isValid = false;

    m_food_isSet = false;
    m_food_isValid = false;

    m_power_isSet = false;
    m_power_isValid = false;

    m_seat_isSet = false;
    m_seat_isValid = false;

    m_wifi_isSet = false;
    m_wifi_isValid = false;
}

void OAIAircraftCabinAmenities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAircraftCabinAmenities::fromJsonObject(QJsonObject json) {

    m_beverage_isValid = ::OpenAPI::fromJsonValue(m_beverage, json[QString("beverage")]);
    m_beverage_isSet = !json[QString("beverage")].isNull() && m_beverage_isValid;

    m_entertainment_isValid = ::OpenAPI::fromJsonValue(m_entertainment, json[QString("entertainment")]);
    m_entertainment_isSet = !json[QString("entertainment")].isNull() && m_entertainment_isValid;

    m_food_isValid = ::OpenAPI::fromJsonValue(m_food, json[QString("food")]);
    m_food_isSet = !json[QString("food")].isNull() && m_food_isValid;

    m_power_isValid = ::OpenAPI::fromJsonValue(m_power, json[QString("power")]);
    m_power_isSet = !json[QString("power")].isNull() && m_power_isValid;

    m_seat_isValid = ::OpenAPI::fromJsonValue(m_seat, json[QString("seat")]);
    m_seat_isSet = !json[QString("seat")].isNull() && m_seat_isValid;

    m_wifi_isValid = ::OpenAPI::fromJsonValue(m_wifi, json[QString("wifi")]);
    m_wifi_isSet = !json[QString("wifi")].isNull() && m_wifi_isValid;
}

QString OAIAircraftCabinAmenities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAircraftCabinAmenities::asJsonObject() const {
    QJsonObject obj;
    if (m_beverage.isSet()) {
        obj.insert(QString("beverage"), ::OpenAPI::toJsonValue(m_beverage));
    }
    if (m_entertainment.size() > 0) {
        obj.insert(QString("entertainment"), ::OpenAPI::toJsonValue(m_entertainment));
    }
    if (m_food.isSet()) {
        obj.insert(QString("food"), ::OpenAPI::toJsonValue(m_food));
    }
    if (m_power.isSet()) {
        obj.insert(QString("power"), ::OpenAPI::toJsonValue(m_power));
    }
    if (m_seat.isSet()) {
        obj.insert(QString("seat"), ::OpenAPI::toJsonValue(m_seat));
    }
    if (m_wifi.isSet()) {
        obj.insert(QString("wifi"), ::OpenAPI::toJsonValue(m_wifi));
    }
    return obj;
}

OAIAircraftCabinAmenities_Beverage OAIAircraftCabinAmenities::getBeverage() const {
    return m_beverage;
}
void OAIAircraftCabinAmenities::setBeverage(const OAIAircraftCabinAmenities_Beverage &beverage) {
    m_beverage = beverage;
    m_beverage_isSet = true;
}

bool OAIAircraftCabinAmenities::is_beverage_Set() const{
    return m_beverage_isSet;
}

bool OAIAircraftCabinAmenities::is_beverage_Valid() const{
    return m_beverage_isValid;
}

QList<OAIAircraftCabinAmenities_Entertainment> OAIAircraftCabinAmenities::getEntertainment() const {
    return m_entertainment;
}
void OAIAircraftCabinAmenities::setEntertainment(const QList<OAIAircraftCabinAmenities_Entertainment> &entertainment) {
    m_entertainment = entertainment;
    m_entertainment_isSet = true;
}

bool OAIAircraftCabinAmenities::is_entertainment_Set() const{
    return m_entertainment_isSet;
}

bool OAIAircraftCabinAmenities::is_entertainment_Valid() const{
    return m_entertainment_isValid;
}

OAIAircraftCabinAmenities_Food OAIAircraftCabinAmenities::getFood() const {
    return m_food;
}
void OAIAircraftCabinAmenities::setFood(const OAIAircraftCabinAmenities_Food &food) {
    m_food = food;
    m_food_isSet = true;
}

bool OAIAircraftCabinAmenities::is_food_Set() const{
    return m_food_isSet;
}

bool OAIAircraftCabinAmenities::is_food_Valid() const{
    return m_food_isValid;
}

OAIAircraftCabinAmenities_Power OAIAircraftCabinAmenities::getPower() const {
    return m_power;
}
void OAIAircraftCabinAmenities::setPower(const OAIAircraftCabinAmenities_Power &power) {
    m_power = power;
    m_power_isSet = true;
}

bool OAIAircraftCabinAmenities::is_power_Set() const{
    return m_power_isSet;
}

bool OAIAircraftCabinAmenities::is_power_Valid() const{
    return m_power_isValid;
}

OAIAmenity_Seat OAIAircraftCabinAmenities::getSeat() const {
    return m_seat;
}
void OAIAircraftCabinAmenities::setSeat(const OAIAmenity_Seat &seat) {
    m_seat = seat;
    m_seat_isSet = true;
}

bool OAIAircraftCabinAmenities::is_seat_Set() const{
    return m_seat_isSet;
}

bool OAIAircraftCabinAmenities::is_seat_Valid() const{
    return m_seat_isValid;
}

OAIAircraftCabinAmenities_Wifi OAIAircraftCabinAmenities::getWifi() const {
    return m_wifi;
}
void OAIAircraftCabinAmenities::setWifi(const OAIAircraftCabinAmenities_Wifi &wifi) {
    m_wifi = wifi;
    m_wifi_isSet = true;
}

bool OAIAircraftCabinAmenities::is_wifi_Set() const{
    return m_wifi_isSet;
}

bool OAIAircraftCabinAmenities::is_wifi_Valid() const{
    return m_wifi_isValid;
}

bool OAIAircraftCabinAmenities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beverage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entertainment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_food.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_power.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAircraftCabinAmenities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
