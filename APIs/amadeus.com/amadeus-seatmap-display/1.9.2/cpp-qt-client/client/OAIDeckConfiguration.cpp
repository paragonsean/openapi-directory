/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeckConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeckConfiguration::OAIDeckConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeckConfiguration::OAIDeckConfiguration() {
    this->initializeModel();
}

OAIDeckConfiguration::~OAIDeckConfiguration() {}

void OAIDeckConfiguration::initializeModel() {

    m_end_seat_row_isSet = false;
    m_end_seat_row_isValid = false;

    m_end_wings_row_isSet = false;
    m_end_wings_row_isValid = false;

    m_end_wings_x_isSet = false;
    m_end_wings_x_isValid = false;

    m_exit_rows_x_isSet = false;
    m_exit_rows_x_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_start_seat_row_isSet = false;
    m_start_seat_row_isValid = false;

    m_start_wings_row_isSet = false;
    m_start_wings_row_isValid = false;

    m_start_wings_x_isSet = false;
    m_start_wings_x_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIDeckConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeckConfiguration::fromJsonObject(QJsonObject json) {

    m_end_seat_row_isValid = ::OpenAPI::fromJsonValue(m_end_seat_row, json[QString("endSeatRow")]);
    m_end_seat_row_isSet = !json[QString("endSeatRow")].isNull() && m_end_seat_row_isValid;

    m_end_wings_row_isValid = ::OpenAPI::fromJsonValue(m_end_wings_row, json[QString("endWingsRow")]);
    m_end_wings_row_isSet = !json[QString("endWingsRow")].isNull() && m_end_wings_row_isValid;

    m_end_wings_x_isValid = ::OpenAPI::fromJsonValue(m_end_wings_x, json[QString("endWingsX")]);
    m_end_wings_x_isSet = !json[QString("endWingsX")].isNull() && m_end_wings_x_isValid;

    m_exit_rows_x_isValid = ::OpenAPI::fromJsonValue(m_exit_rows_x, json[QString("exitRowsX")]);
    m_exit_rows_x_isSet = !json[QString("exitRowsX")].isNull() && m_exit_rows_x_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_start_seat_row_isValid = ::OpenAPI::fromJsonValue(m_start_seat_row, json[QString("startSeatRow")]);
    m_start_seat_row_isSet = !json[QString("startSeatRow")].isNull() && m_start_seat_row_isValid;

    m_start_wings_row_isValid = ::OpenAPI::fromJsonValue(m_start_wings_row, json[QString("startWingsRow")]);
    m_start_wings_row_isSet = !json[QString("startWingsRow")].isNull() && m_start_wings_row_isValid;

    m_start_wings_x_isValid = ::OpenAPI::fromJsonValue(m_start_wings_x, json[QString("startWingsX")]);
    m_start_wings_x_isSet = !json[QString("startWingsX")].isNull() && m_start_wings_x_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIDeckConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeckConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_end_seat_row_isSet) {
        obj.insert(QString("endSeatRow"), ::OpenAPI::toJsonValue(m_end_seat_row));
    }
    if (m_end_wings_row_isSet) {
        obj.insert(QString("endWingsRow"), ::OpenAPI::toJsonValue(m_end_wings_row));
    }
    if (m_end_wings_x_isSet) {
        obj.insert(QString("endWingsX"), ::OpenAPI::toJsonValue(m_end_wings_x));
    }
    if (m_exit_rows_x.size() > 0) {
        obj.insert(QString("exitRowsX"), ::OpenAPI::toJsonValue(m_exit_rows_x));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_start_seat_row_isSet) {
        obj.insert(QString("startSeatRow"), ::OpenAPI::toJsonValue(m_start_seat_row));
    }
    if (m_start_wings_row_isSet) {
        obj.insert(QString("startWingsRow"), ::OpenAPI::toJsonValue(m_start_wings_row));
    }
    if (m_start_wings_x_isSet) {
        obj.insert(QString("startWingsX"), ::OpenAPI::toJsonValue(m_start_wings_x));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIDeckConfiguration::getEndSeatRow() const {
    return m_end_seat_row;
}
void OAIDeckConfiguration::setEndSeatRow(const qint32 &end_seat_row) {
    m_end_seat_row = end_seat_row;
    m_end_seat_row_isSet = true;
}

bool OAIDeckConfiguration::is_end_seat_row_Set() const{
    return m_end_seat_row_isSet;
}

bool OAIDeckConfiguration::is_end_seat_row_Valid() const{
    return m_end_seat_row_isValid;
}

qint32 OAIDeckConfiguration::getEndWingsRow() const {
    return m_end_wings_row;
}
void OAIDeckConfiguration::setEndWingsRow(const qint32 &end_wings_row) {
    m_end_wings_row = end_wings_row;
    m_end_wings_row_isSet = true;
}

bool OAIDeckConfiguration::is_end_wings_row_Set() const{
    return m_end_wings_row_isSet;
}

bool OAIDeckConfiguration::is_end_wings_row_Valid() const{
    return m_end_wings_row_isValid;
}

qint32 OAIDeckConfiguration::getEndWingsX() const {
    return m_end_wings_x;
}
void OAIDeckConfiguration::setEndWingsX(const qint32 &end_wings_x) {
    m_end_wings_x = end_wings_x;
    m_end_wings_x_isSet = true;
}

bool OAIDeckConfiguration::is_end_wings_x_Set() const{
    return m_end_wings_x_isSet;
}

bool OAIDeckConfiguration::is_end_wings_x_Valid() const{
    return m_end_wings_x_isValid;
}

QList<qint32> OAIDeckConfiguration::getExitRowsX() const {
    return m_exit_rows_x;
}
void OAIDeckConfiguration::setExitRowsX(const QList<qint32> &exit_rows_x) {
    m_exit_rows_x = exit_rows_x;
    m_exit_rows_x_isSet = true;
}

bool OAIDeckConfiguration::is_exit_rows_x_Set() const{
    return m_exit_rows_x_isSet;
}

bool OAIDeckConfiguration::is_exit_rows_x_Valid() const{
    return m_exit_rows_x_isValid;
}

qint32 OAIDeckConfiguration::getLength() const {
    return m_length;
}
void OAIDeckConfiguration::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIDeckConfiguration::is_length_Set() const{
    return m_length_isSet;
}

bool OAIDeckConfiguration::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIDeckConfiguration::getStartSeatRow() const {
    return m_start_seat_row;
}
void OAIDeckConfiguration::setStartSeatRow(const qint32 &start_seat_row) {
    m_start_seat_row = start_seat_row;
    m_start_seat_row_isSet = true;
}

bool OAIDeckConfiguration::is_start_seat_row_Set() const{
    return m_start_seat_row_isSet;
}

bool OAIDeckConfiguration::is_start_seat_row_Valid() const{
    return m_start_seat_row_isValid;
}

qint32 OAIDeckConfiguration::getStartWingsRow() const {
    return m_start_wings_row;
}
void OAIDeckConfiguration::setStartWingsRow(const qint32 &start_wings_row) {
    m_start_wings_row = start_wings_row;
    m_start_wings_row_isSet = true;
}

bool OAIDeckConfiguration::is_start_wings_row_Set() const{
    return m_start_wings_row_isSet;
}

bool OAIDeckConfiguration::is_start_wings_row_Valid() const{
    return m_start_wings_row_isValid;
}

qint32 OAIDeckConfiguration::getStartWingsX() const {
    return m_start_wings_x;
}
void OAIDeckConfiguration::setStartWingsX(const qint32 &start_wings_x) {
    m_start_wings_x = start_wings_x;
    m_start_wings_x_isSet = true;
}

bool OAIDeckConfiguration::is_start_wings_x_Set() const{
    return m_start_wings_x_isSet;
}

bool OAIDeckConfiguration::is_start_wings_x_Valid() const{
    return m_start_wings_x_isValid;
}

qint32 OAIDeckConfiguration::getWidth() const {
    return m_width;
}
void OAIDeckConfiguration::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIDeckConfiguration::is_width_Set() const{
    return m_width_isSet;
}

bool OAIDeckConfiguration::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIDeckConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_seat_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_wings_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_wings_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_rows_x.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_seat_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_wings_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_wings_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeckConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
