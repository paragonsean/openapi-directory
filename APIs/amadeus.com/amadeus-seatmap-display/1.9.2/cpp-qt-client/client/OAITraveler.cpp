/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraveler.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraveler::OAITraveler(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraveler::OAITraveler() {
    this->initializeModel();
}

OAITraveler::~OAITraveler() {}

void OAITraveler::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_discount_eligibility_isSet = false;
    m_discount_eligibility_isValid = false;

    m_emergency_contact_isSet = false;
    m_emergency_contact_isValid = false;

    m_loyalty_programs_isSet = false;
    m_loyalty_programs_isValid = false;
}

void OAITraveler::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraveler::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_discount_eligibility_isValid = ::OpenAPI::fromJsonValue(m_discount_eligibility, json[QString("discountEligibility")]);
    m_discount_eligibility_isSet = !json[QString("discountEligibility")].isNull() && m_discount_eligibility_isValid;

    m_emergency_contact_isValid = ::OpenAPI::fromJsonValue(m_emergency_contact, json[QString("emergencyContact")]);
    m_emergency_contact_isSet = !json[QString("emergencyContact")].isNull() && m_emergency_contact_isValid;

    m_loyalty_programs_isValid = ::OpenAPI::fromJsonValue(m_loyalty_programs, json[QString("loyaltyPrograms")]);
    m_loyalty_programs_isSet = !json[QString("loyaltyPrograms")].isNull() && m_loyalty_programs_isValid;
}

QString OAITraveler::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraveler::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_gender.isSet()) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_discount_eligibility.size() > 0) {
        obj.insert(QString("discountEligibility"), ::OpenAPI::toJsonValue(m_discount_eligibility));
    }
    if (m_emergency_contact.isSet()) {
        obj.insert(QString("emergencyContact"), ::OpenAPI::toJsonValue(m_emergency_contact));
    }
    if (m_loyalty_programs.size() > 0) {
        obj.insert(QString("loyaltyPrograms"), ::OpenAPI::toJsonValue(m_loyalty_programs));
    }
    return obj;
}

QDate OAITraveler::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAITraveler::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAITraveler::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAITraveler::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QList<OAIIdentityDocument> OAITraveler::getDocuments() const {
    return m_documents;
}
void OAITraveler::setDocuments(const QList<OAIIdentityDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAITraveler::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAITraveler::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIStakeholderGender OAITraveler::getGender() const {
    return m_gender;
}
void OAITraveler::setGender(const OAIStakeholderGender &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAITraveler::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAITraveler::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAITraveler::getId() const {
    return m_id;
}
void OAITraveler::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITraveler::is_id_Set() const{
    return m_id_isSet;
}

bool OAITraveler::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAITraveler::getName() const {
    return m_name;
}
void OAITraveler::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITraveler::is_name_Set() const{
    return m_name_isSet;
}

bool OAITraveler::is_name_Valid() const{
    return m_name_isValid;
}

OAIContact OAITraveler::getContact() const {
    return m_contact;
}
void OAITraveler::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAITraveler::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAITraveler::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAIDiscount> OAITraveler::getDiscountEligibility() const {
    return m_discount_eligibility;
}
void OAITraveler::setDiscountEligibility(const QList<OAIDiscount> &discount_eligibility) {
    m_discount_eligibility = discount_eligibility;
    m_discount_eligibility_isSet = true;
}

bool OAITraveler::is_discount_eligibility_Set() const{
    return m_discount_eligibility_isSet;
}

bool OAITraveler::is_discount_eligibility_Valid() const{
    return m_discount_eligibility_isValid;
}

OAIEmergencyContact OAITraveler::getEmergencyContact() const {
    return m_emergency_contact;
}
void OAITraveler::setEmergencyContact(const OAIEmergencyContact &emergency_contact) {
    m_emergency_contact = emergency_contact;
    m_emergency_contact_isSet = true;
}

bool OAITraveler::is_emergency_contact_Set() const{
    return m_emergency_contact_isSet;
}

bool OAITraveler::is_emergency_contact_Valid() const{
    return m_emergency_contact_isValid;
}

QList<OAILoyaltyProgram> OAITraveler::getLoyaltyPrograms() const {
    return m_loyalty_programs;
}
void OAITraveler::setLoyaltyPrograms(const QList<OAILoyaltyProgram> &loyalty_programs) {
    m_loyalty_programs = loyalty_programs;
    m_loyalty_programs_isSet = true;
}

bool OAITraveler::is_loyalty_programs_Set() const{
    return m_loyalty_programs_isSet;
}

bool OAITraveler::is_loyalty_programs_Valid() const{
    return m_loyalty_programs_isValid;
}

bool OAITraveler::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_eligibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_emergency_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_programs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraveler::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
