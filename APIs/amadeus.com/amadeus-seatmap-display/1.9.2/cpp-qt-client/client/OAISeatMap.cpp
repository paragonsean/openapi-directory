/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeatMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeatMap::OAISeatMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeatMap::OAISeatMap() {
    this->initializeModel();
}

OAISeatMap::~OAISeatMap() {}

void OAISeatMap::initializeModel() {

    m_aircraft_isSet = false;
    m_aircraft_isValid = false;

    m_aircraft_cabin_amenities_isSet = false;
    m_aircraft_cabin_amenities_isValid = false;

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_available_seats_counters_isSet = false;
    m_available_seats_counters_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_decks_isSet = false;
    m_decks_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_flight_offer_id_isSet = false;
    m_flight_offer_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_operating_isSet = false;
    m_operating_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISeatMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeatMap::fromJsonObject(QJsonObject json) {

    m_aircraft_isValid = ::OpenAPI::fromJsonValue(m_aircraft, json[QString("aircraft")]);
    m_aircraft_isSet = !json[QString("aircraft")].isNull() && m_aircraft_isValid;

    m_aircraft_cabin_amenities_isValid = ::OpenAPI::fromJsonValue(m_aircraft_cabin_amenities, json[QString("aircraftCabinAmenities")]);
    m_aircraft_cabin_amenities_isSet = !json[QString("aircraftCabinAmenities")].isNull() && m_aircraft_cabin_amenities_isValid;

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_available_seats_counters_isValid = ::OpenAPI::fromJsonValue(m_available_seats_counters, json[QString("availableSeatsCounters")]);
    m_available_seats_counters_isSet = !json[QString("availableSeatsCounters")].isNull() && m_available_seats_counters_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrierCode")]);
    m_carrier_code_isSet = !json[QString("carrierCode")].isNull() && m_carrier_code_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_decks_isValid = ::OpenAPI::fromJsonValue(m_decks, json[QString("decks")]);
    m_decks_isSet = !json[QString("decks")].isNull() && m_decks_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_flight_offer_id_isValid = ::OpenAPI::fromJsonValue(m_flight_offer_id, json[QString("flightOfferId")]);
    m_flight_offer_id_isSet = !json[QString("flightOfferId")].isNull() && m_flight_offer_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_operating_isValid = ::OpenAPI::fromJsonValue(m_operating, json[QString("operating")]);
    m_operating_isSet = !json[QString("operating")].isNull() && m_operating_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISeatMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeatMap::asJsonObject() const {
    QJsonObject obj;
    if (m_aircraft.isSet()) {
        obj.insert(QString("aircraft"), ::OpenAPI::toJsonValue(m_aircraft));
    }
    if (m_aircraft_cabin_amenities.isSet()) {
        obj.insert(QString("aircraftCabinAmenities"), ::OpenAPI::toJsonValue(m_aircraft_cabin_amenities));
    }
    if (m_arrival.isSet()) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_available_seats_counters.size() > 0) {
        obj.insert(QString("availableSeatsCounters"), ::OpenAPI::toJsonValue(m_available_seats_counters));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrierCode"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_decks.size() > 0) {
        obj.insert(QString("decks"), ::OpenAPI::toJsonValue(m_decks));
    }
    if (m_departure.isSet()) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_flight_offer_id_isSet) {
        obj.insert(QString("flightOfferId"), ::OpenAPI::toJsonValue(m_flight_offer_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_operating.isSet()) {
        obj.insert(QString("operating"), ::OpenAPI::toJsonValue(m_operating));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAircraftEquipment OAISeatMap::getAircraft() const {
    return m_aircraft;
}
void OAISeatMap::setAircraft(const OAIAircraftEquipment &aircraft) {
    m_aircraft = aircraft;
    m_aircraft_isSet = true;
}

bool OAISeatMap::is_aircraft_Set() const{
    return m_aircraft_isSet;
}

bool OAISeatMap::is_aircraft_Valid() const{
    return m_aircraft_isValid;
}

OAIAircraftCabinAmenities OAISeatMap::getAircraftCabinAmenities() const {
    return m_aircraft_cabin_amenities;
}
void OAISeatMap::setAircraftCabinAmenities(const OAIAircraftCabinAmenities &aircraft_cabin_amenities) {
    m_aircraft_cabin_amenities = aircraft_cabin_amenities;
    m_aircraft_cabin_amenities_isSet = true;
}

bool OAISeatMap::is_aircraft_cabin_amenities_Set() const{
    return m_aircraft_cabin_amenities_isSet;
}

bool OAISeatMap::is_aircraft_cabin_amenities_Valid() const{
    return m_aircraft_cabin_amenities_isValid;
}

OAIFlightEndPoint OAISeatMap::getArrival() const {
    return m_arrival;
}
void OAISeatMap::setArrival(const OAIFlightEndPoint &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAISeatMap::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAISeatMap::is_arrival_Valid() const{
    return m_arrival_isValid;
}

QList<OAIAvailableSeatsCounter> OAISeatMap::getAvailableSeatsCounters() const {
    return m_available_seats_counters;
}
void OAISeatMap::setAvailableSeatsCounters(const QList<OAIAvailableSeatsCounter> &available_seats_counters) {
    m_available_seats_counters = available_seats_counters;
    m_available_seats_counters_isSet = true;
}

bool OAISeatMap::is_available_seats_counters_Set() const{
    return m_available_seats_counters_isSet;
}

bool OAISeatMap::is_available_seats_counters_Valid() const{
    return m_available_seats_counters_isValid;
}

QString OAISeatMap::getCarrierCode() const {
    return m_carrier_code;
}
void OAISeatMap::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAISeatMap::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAISeatMap::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAISeatMap::getRClass() const {
    return m_r_class;
}
void OAISeatMap::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAISeatMap::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAISeatMap::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QList<OAIDeck> OAISeatMap::getDecks() const {
    return m_decks;
}
void OAISeatMap::setDecks(const QList<OAIDeck> &decks) {
    m_decks = decks;
    m_decks_isSet = true;
}

bool OAISeatMap::is_decks_Set() const{
    return m_decks_isSet;
}

bool OAISeatMap::is_decks_Valid() const{
    return m_decks_isValid;
}

OAIFlightEndPoint OAISeatMap::getDeparture() const {
    return m_departure;
}
void OAISeatMap::setDeparture(const OAIFlightEndPoint &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAISeatMap::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAISeatMap::is_departure_Valid() const{
    return m_departure_isValid;
}

QString OAISeatMap::getFlightOfferId() const {
    return m_flight_offer_id;
}
void OAISeatMap::setFlightOfferId(const QString &flight_offer_id) {
    m_flight_offer_id = flight_offer_id;
    m_flight_offer_id_isSet = true;
}

bool OAISeatMap::is_flight_offer_id_Set() const{
    return m_flight_offer_id_isSet;
}

bool OAISeatMap::is_flight_offer_id_Valid() const{
    return m_flight_offer_id_isValid;
}

QString OAISeatMap::getId() const {
    return m_id;
}
void OAISeatMap::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISeatMap::is_id_Set() const{
    return m_id_isSet;
}

bool OAISeatMap::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISeatMap::getNumber() const {
    return m_number;
}
void OAISeatMap::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISeatMap::is_number_Set() const{
    return m_number_isSet;
}

bool OAISeatMap::is_number_Valid() const{
    return m_number_isValid;
}

OAIOperatingFlight OAISeatMap::getOperating() const {
    return m_operating;
}
void OAISeatMap::setOperating(const OAIOperatingFlight &operating) {
    m_operating = operating;
    m_operating_isSet = true;
}

bool OAISeatMap::is_operating_Set() const{
    return m_operating_isSet;
}

bool OAISeatMap::is_operating_Valid() const{
    return m_operating_isValid;
}

QString OAISeatMap::getSegmentId() const {
    return m_segment_id;
}
void OAISeatMap::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAISeatMap::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAISeatMap::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

OAILink OAISeatMap::getSelf() const {
    return m_self;
}
void OAISeatMap::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISeatMap::is_self_Set() const{
    return m_self_isSet;
}

bool OAISeatMap::is_self_Valid() const{
    return m_self_isValid;
}

QString OAISeatMap::getType() const {
    return m_type;
}
void OAISeatMap::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISeatMap::is_type_Set() const{
    return m_type_isSet;
}

bool OAISeatMap::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISeatMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aircraft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aircraft_cabin_amenities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_seats_counters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeatMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
