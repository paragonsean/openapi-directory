/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICo2Emission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICo2Emission::OAICo2Emission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICo2Emission::OAICo2Emission() {
    this->initializeModel();
}

OAICo2Emission::~OAICo2Emission() {}

void OAICo2Emission::initializeModel() {

    m_cabin_isSet = false;
    m_cabin_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;
}

void OAICo2Emission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICo2Emission::fromJsonObject(QJsonObject json) {

    m_cabin_isValid = ::OpenAPI::fromJsonValue(m_cabin, json[QString("cabin")]);
    m_cabin_isSet = !json[QString("cabin")].isNull() && m_cabin_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weightUnit")]);
    m_weight_unit_isSet = !json[QString("weightUnit")].isNull() && m_weight_unit_isValid;
}

QString OAICo2Emission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICo2Emission::asJsonObject() const {
    QJsonObject obj;
    if (m_cabin.isSet()) {
        obj.insert(QString("cabin"), ::OpenAPI::toJsonValue(m_cabin));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weightUnit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    return obj;
}

OAITravelClass OAICo2Emission::getCabin() const {
    return m_cabin;
}
void OAICo2Emission::setCabin(const OAITravelClass &cabin) {
    m_cabin = cabin;
    m_cabin_isSet = true;
}

bool OAICo2Emission::is_cabin_Set() const{
    return m_cabin_isSet;
}

bool OAICo2Emission::is_cabin_Valid() const{
    return m_cabin_isValid;
}

qint32 OAICo2Emission::getWeight() const {
    return m_weight;
}
void OAICo2Emission::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICo2Emission::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICo2Emission::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAICo2Emission::getWeightUnit() const {
    return m_weight_unit;
}
void OAICo2Emission::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAICo2Emission::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAICo2Emission::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

bool OAICo2Emission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cabin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICo2Emission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
