/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeat::OAISeat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeat::OAISeat() {
    this->initializeModel();
}

OAISeat::~OAISeat() {}

void OAISeat::initializeModel() {

    m_cabin_isSet = false;
    m_cabin_isValid = false;

    m_characteristics_codes_isSet = false;
    m_characteristics_codes_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_traveler_pricing_isSet = false;
    m_traveler_pricing_isValid = false;
}

void OAISeat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeat::fromJsonObject(QJsonObject json) {

    m_cabin_isValid = ::OpenAPI::fromJsonValue(m_cabin, json[QString("cabin")]);
    m_cabin_isSet = !json[QString("cabin")].isNull() && m_cabin_isValid;

    m_characteristics_codes_isValid = ::OpenAPI::fromJsonValue(m_characteristics_codes, json[QString("characteristicsCodes")]);
    m_characteristics_codes_isSet = !json[QString("characteristicsCodes")].isNull() && m_characteristics_codes_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_traveler_pricing_isValid = ::OpenAPI::fromJsonValue(m_traveler_pricing, json[QString("travelerPricing")]);
    m_traveler_pricing_isSet = !json[QString("travelerPricing")].isNull() && m_traveler_pricing_isValid;
}

QString OAISeat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeat::asJsonObject() const {
    QJsonObject obj;
    if (m_cabin_isSet) {
        obj.insert(QString("cabin"), ::OpenAPI::toJsonValue(m_cabin));
    }
    if (m_characteristics_codes.size() > 0) {
        obj.insert(QString("characteristicsCodes"), ::OpenAPI::toJsonValue(m_characteristics_codes));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_traveler_pricing.size() > 0) {
        obj.insert(QString("travelerPricing"), ::OpenAPI::toJsonValue(m_traveler_pricing));
    }
    return obj;
}

QString OAISeat::getCabin() const {
    return m_cabin;
}
void OAISeat::setCabin(const QString &cabin) {
    m_cabin = cabin;
    m_cabin_isSet = true;
}

bool OAISeat::is_cabin_Set() const{
    return m_cabin_isSet;
}

bool OAISeat::is_cabin_Valid() const{
    return m_cabin_isValid;
}

QList<QString> OAISeat::getCharacteristicsCodes() const {
    return m_characteristics_codes;
}
void OAISeat::setCharacteristicsCodes(const QList<QString> &characteristics_codes) {
    m_characteristics_codes = characteristics_codes;
    m_characteristics_codes_isSet = true;
}

bool OAISeat::is_characteristics_codes_Set() const{
    return m_characteristics_codes_isSet;
}

bool OAISeat::is_characteristics_codes_Valid() const{
    return m_characteristics_codes_isValid;
}

OAICoordinates OAISeat::getCoordinates() const {
    return m_coordinates;
}
void OAISeat::setCoordinates(const OAICoordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAISeat::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAISeat::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QString OAISeat::getNumber() const {
    return m_number;
}
void OAISeat::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISeat::is_number_Set() const{
    return m_number_isSet;
}

bool OAISeat::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAISeatmapTravelerPricing> OAISeat::getTravelerPricing() const {
    return m_traveler_pricing;
}
void OAISeat::setTravelerPricing(const QList<OAISeatmapTravelerPricing> &traveler_pricing) {
    m_traveler_pricing = traveler_pricing;
    m_traveler_pricing_isSet = true;
}

bool OAISeat::is_traveler_pricing_Set() const{
    return m_traveler_pricing_isSet;
}

bool OAISeat::is_traveler_pricing_Valid() const{
    return m_traveler_pricing_isValid;
}

bool OAISeat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cabin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_characteristics_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_pricing.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
