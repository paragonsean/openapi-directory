/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_birth_place_isSet = false;
    m_birth_place_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_issuance_country_isSet = false;
    m_issuance_country_isValid = false;

    m_issuance_date_isSet = false;
    m_issuance_date_isValid = false;

    m_issuance_location_isSet = false;
    m_issuance_location_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_birth_place_isValid = ::OpenAPI::fromJsonValue(m_birth_place, json[QString("birthPlace")]);
    m_birth_place_isSet = !json[QString("birthPlace")].isNull() && m_birth_place_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_issuance_country_isValid = ::OpenAPI::fromJsonValue(m_issuance_country, json[QString("issuanceCountry")]);
    m_issuance_country_isSet = !json[QString("issuanceCountry")].isNull() && m_issuance_country_isValid;

    m_issuance_date_isValid = ::OpenAPI::fromJsonValue(m_issuance_date, json[QString("issuanceDate")]);
    m_issuance_date_isSet = !json[QString("issuanceDate")].isNull() && m_issuance_date_isValid;

    m_issuance_location_isValid = ::OpenAPI::fromJsonValue(m_issuance_location, json[QString("issuanceLocation")]);
    m_issuance_location_isSet = !json[QString("issuanceLocation")].isNull() && m_issuance_location_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_place_isSet) {
        obj.insert(QString("birthPlace"), ::OpenAPI::toJsonValue(m_birth_place));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_issuance_country_isSet) {
        obj.insert(QString("issuanceCountry"), ::OpenAPI::toJsonValue(m_issuance_country));
    }
    if (m_issuance_date_isSet) {
        obj.insert(QString("issuanceDate"), ::OpenAPI::toJsonValue(m_issuance_date));
    }
    if (m_issuance_location_isSet) {
        obj.insert(QString("issuanceLocation"), ::OpenAPI::toJsonValue(m_issuance_location));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAIDocument::getBirthPlace() const {
    return m_birth_place;
}
void OAIDocument::setBirthPlace(const QString &birth_place) {
    m_birth_place = birth_place;
    m_birth_place_isSet = true;
}

bool OAIDocument::is_birth_place_Set() const{
    return m_birth_place_isSet;
}

bool OAIDocument::is_birth_place_Valid() const{
    return m_birth_place_isValid;
}

QDate OAIDocument::getExpiryDate() const {
    return m_expiry_date;
}
void OAIDocument::setExpiryDate(const QDate &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIDocument::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIDocument::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIDocument::getIssuanceCountry() const {
    return m_issuance_country;
}
void OAIDocument::setIssuanceCountry(const QString &issuance_country) {
    m_issuance_country = issuance_country;
    m_issuance_country_isSet = true;
}

bool OAIDocument::is_issuance_country_Set() const{
    return m_issuance_country_isSet;
}

bool OAIDocument::is_issuance_country_Valid() const{
    return m_issuance_country_isValid;
}

QDate OAIDocument::getIssuanceDate() const {
    return m_issuance_date;
}
void OAIDocument::setIssuanceDate(const QDate &issuance_date) {
    m_issuance_date = issuance_date;
    m_issuance_date_isSet = true;
}

bool OAIDocument::is_issuance_date_Set() const{
    return m_issuance_date_isSet;
}

bool OAIDocument::is_issuance_date_Valid() const{
    return m_issuance_date_isValid;
}

QString OAIDocument::getIssuanceLocation() const {
    return m_issuance_location;
}
void OAIDocument::setIssuanceLocation(const QString &issuance_location) {
    m_issuance_location = issuance_location;
    m_issuance_location_isSet = true;
}

bool OAIDocument::is_issuance_location_Set() const{
    return m_issuance_location_isSet;
}

bool OAIDocument::is_issuance_location_Valid() const{
    return m_issuance_location_isValid;
}

QString OAIDocument::getNationality() const {
    return m_nationality;
}
void OAIDocument::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIDocument::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIDocument::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIDocument::getNumber() const {
    return m_number;
}
void OAIDocument::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDocument::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDocument::is_number_Valid() const{
    return m_number_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuance_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuance_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
