/**
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAircraftCabinAmenities_Wifi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAircraftCabinAmenities_Wifi::OAIAircraftCabinAmenities_Wifi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAircraftCabinAmenities_Wifi::OAIAircraftCabinAmenities_Wifi() {
    this->initializeModel();
}

OAIAircraftCabinAmenities_Wifi::~OAIAircraftCabinAmenities_Wifi() {}

void OAIAircraftCabinAmenities_Wifi::initializeModel() {

    m_is_chargeable_isSet = false;
    m_is_chargeable_isValid = false;

    m_wifi_coverage_isSet = false;
    m_wifi_coverage_isValid = false;
}

void OAIAircraftCabinAmenities_Wifi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAircraftCabinAmenities_Wifi::fromJsonObject(QJsonObject json) {

    m_is_chargeable_isValid = ::OpenAPI::fromJsonValue(m_is_chargeable, json[QString("isChargeable")]);
    m_is_chargeable_isSet = !json[QString("isChargeable")].isNull() && m_is_chargeable_isValid;

    m_wifi_coverage_isValid = ::OpenAPI::fromJsonValue(m_wifi_coverage, json[QString("wifiCoverage")]);
    m_wifi_coverage_isSet = !json[QString("wifiCoverage")].isNull() && m_wifi_coverage_isValid;
}

QString OAIAircraftCabinAmenities_Wifi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAircraftCabinAmenities_Wifi::asJsonObject() const {
    QJsonObject obj;
    if (m_is_chargeable_isSet) {
        obj.insert(QString("isChargeable"), ::OpenAPI::toJsonValue(m_is_chargeable));
    }
    if (m_wifi_coverage_isSet) {
        obj.insert(QString("wifiCoverage"), ::OpenAPI::toJsonValue(m_wifi_coverage));
    }
    return obj;
}

bool OAIAircraftCabinAmenities_Wifi::isIsChargeable() const {
    return m_is_chargeable;
}
void OAIAircraftCabinAmenities_Wifi::setIsChargeable(const bool &is_chargeable) {
    m_is_chargeable = is_chargeable;
    m_is_chargeable_isSet = true;
}

bool OAIAircraftCabinAmenities_Wifi::is_is_chargeable_Set() const{
    return m_is_chargeable_isSet;
}

bool OAIAircraftCabinAmenities_Wifi::is_is_chargeable_Valid() const{
    return m_is_chargeable_isValid;
}

QString OAIAircraftCabinAmenities_Wifi::getWifiCoverage() const {
    return m_wifi_coverage;
}
void OAIAircraftCabinAmenities_Wifi::setWifiCoverage(const QString &wifi_coverage) {
    m_wifi_coverage = wifi_coverage;
    m_wifi_coverage_isSet = true;
}

bool OAIAircraftCabinAmenities_Wifi::is_wifi_coverage_Set() const{
    return m_wifi_coverage_isSet;
}

bool OAIAircraftCabinAmenities_Wifi::is_wifi_coverage_Valid() const{
    return m_wifi_coverage_isValid;
}

bool OAIAircraftCabinAmenities_Wifi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_chargeable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAircraftCabinAmenities_Wifi::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
