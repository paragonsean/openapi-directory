# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AircraftCabinAmenitiesPower(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_chargeable: bool=None, power_type: str=None, usb_type: str=None):
        """AircraftCabinAmenitiesPower - a model defined in OpenAPI

        :param is_chargeable: The is_chargeable of this AircraftCabinAmenitiesPower.
        :param power_type: The power_type of this AircraftCabinAmenitiesPower.
        :param usb_type: The usb_type of this AircraftCabinAmenitiesPower.
        """
        self.openapi_types = {
            'is_chargeable': bool,
            'power_type': str,
            'usb_type': str
        }

        self.attribute_map = {
            'is_chargeable': 'isChargeable',
            'power_type': 'powerType',
            'usb_type': 'usbType'
        }

        self._is_chargeable = is_chargeable
        self._power_type = power_type
        self._usb_type = usb_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AircraftCabinAmenitiesPower':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AircraftCabinAmenities_Power of this AircraftCabinAmenitiesPower.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this AircraftCabinAmenitiesPower.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :return: The is_chargeable of this AircraftCabinAmenitiesPower.
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this AircraftCabinAmenitiesPower.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :param is_chargeable: The is_chargeable of this AircraftCabinAmenitiesPower.
        :type is_chargeable: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def power_type(self):
        """Gets the power_type of this AircraftCabinAmenitiesPower.


        :return: The power_type of this AircraftCabinAmenitiesPower.
        :rtype: str
        """
        return self._power_type

    @power_type.setter
    def power_type(self, power_type):
        """Sets the power_type of this AircraftCabinAmenitiesPower.


        :param power_type: The power_type of this AircraftCabinAmenitiesPower.
        :type power_type: str
        """
        allowed_values = ["PLUG", "USB_PORT", "ADAPTOR", "PLUG_OR_USB_PORT"]  # noqa: E501
        if power_type not in allowed_values:
            raise ValueError(
                "Invalid value for `power_type` ({0}), must be one of {1}"
                .format(power_type, allowed_values)
            )

        self._power_type = power_type

    @property
    def usb_type(self):
        """Gets the usb_type of this AircraftCabinAmenitiesPower.


        :return: The usb_type of this AircraftCabinAmenitiesPower.
        :rtype: str
        """
        return self._usb_type

    @usb_type.setter
    def usb_type(self, usb_type):
        """Sets the usb_type of this AircraftCabinAmenitiesPower.


        :param usb_type: The usb_type of this AircraftCabinAmenitiesPower.
        :type usb_type: str
        """
        allowed_values = ["USB_A", "USB_C", "USB_A_AND_USB_C"]  # noqa: E501
        if usb_type not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_type` ({0}), must be one of {1}"
                .format(usb_type, allowed_values)
            )

        self._usb_type = usb_type
