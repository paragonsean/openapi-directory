# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_cabin_amenities_beverage import AircraftCabinAmenitiesBeverage
from openapi_server.models.aircraft_cabin_amenities_entertainment import AircraftCabinAmenitiesEntertainment
from openapi_server.models.aircraft_cabin_amenities_food import AircraftCabinAmenitiesFood
from openapi_server.models.aircraft_cabin_amenities_power import AircraftCabinAmenitiesPower
from openapi_server.models.aircraft_cabin_amenities_wifi import AircraftCabinAmenitiesWifi
from openapi_server.models.amenity_seat import AmenitySeat
from openapi_server import util


class AircraftCabinAmenities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beverage: AircraftCabinAmenitiesBeverage=None, entertainment: List[AircraftCabinAmenitiesEntertainment]=None, food: AircraftCabinAmenitiesFood=None, power: AircraftCabinAmenitiesPower=None, seat: AmenitySeat=None, wifi: AircraftCabinAmenitiesWifi=None):
        """AircraftCabinAmenities - a model defined in OpenAPI

        :param beverage: The beverage of this AircraftCabinAmenities.
        :param entertainment: The entertainment of this AircraftCabinAmenities.
        :param food: The food of this AircraftCabinAmenities.
        :param power: The power of this AircraftCabinAmenities.
        :param seat: The seat of this AircraftCabinAmenities.
        :param wifi: The wifi of this AircraftCabinAmenities.
        """
        self.openapi_types = {
            'beverage': AircraftCabinAmenitiesBeverage,
            'entertainment': List[AircraftCabinAmenitiesEntertainment],
            'food': AircraftCabinAmenitiesFood,
            'power': AircraftCabinAmenitiesPower,
            'seat': AmenitySeat,
            'wifi': AircraftCabinAmenitiesWifi
        }

        self.attribute_map = {
            'beverage': 'beverage',
            'entertainment': 'entertainment',
            'food': 'food',
            'power': 'power',
            'seat': 'seat',
            'wifi': 'wifi'
        }

        self._beverage = beverage
        self._entertainment = entertainment
        self._food = food
        self._power = power
        self._seat = seat
        self._wifi = wifi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AircraftCabinAmenities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AircraftCabinAmenities of this AircraftCabinAmenities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beverage(self):
        """Gets the beverage of this AircraftCabinAmenities.


        :return: The beverage of this AircraftCabinAmenities.
        :rtype: AircraftCabinAmenitiesBeverage
        """
        return self._beverage

    @beverage.setter
    def beverage(self, beverage):
        """Sets the beverage of this AircraftCabinAmenities.


        :param beverage: The beverage of this AircraftCabinAmenities.
        :type beverage: AircraftCabinAmenitiesBeverage
        """

        self._beverage = beverage

    @property
    def entertainment(self):
        """Gets the entertainment of this AircraftCabinAmenities.


        :return: The entertainment of this AircraftCabinAmenities.
        :rtype: List[AircraftCabinAmenitiesEntertainment]
        """
        return self._entertainment

    @entertainment.setter
    def entertainment(self, entertainment):
        """Sets the entertainment of this AircraftCabinAmenities.


        :param entertainment: The entertainment of this AircraftCabinAmenities.
        :type entertainment: List[AircraftCabinAmenitiesEntertainment]
        """

        self._entertainment = entertainment

    @property
    def food(self):
        """Gets the food of this AircraftCabinAmenities.


        :return: The food of this AircraftCabinAmenities.
        :rtype: AircraftCabinAmenitiesFood
        """
        return self._food

    @food.setter
    def food(self, food):
        """Sets the food of this AircraftCabinAmenities.


        :param food: The food of this AircraftCabinAmenities.
        :type food: AircraftCabinAmenitiesFood
        """

        self._food = food

    @property
    def power(self):
        """Gets the power of this AircraftCabinAmenities.


        :return: The power of this AircraftCabinAmenities.
        :rtype: AircraftCabinAmenitiesPower
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this AircraftCabinAmenities.


        :param power: The power of this AircraftCabinAmenities.
        :type power: AircraftCabinAmenitiesPower
        """

        self._power = power

    @property
    def seat(self):
        """Gets the seat of this AircraftCabinAmenities.


        :return: The seat of this AircraftCabinAmenities.
        :rtype: AmenitySeat
        """
        return self._seat

    @seat.setter
    def seat(self, seat):
        """Sets the seat of this AircraftCabinAmenities.


        :param seat: The seat of this AircraftCabinAmenities.
        :type seat: AmenitySeat
        """

        self._seat = seat

    @property
    def wifi(self):
        """Gets the wifi of this AircraftCabinAmenities.


        :return: The wifi of this AircraftCabinAmenities.
        :rtype: AircraftCabinAmenitiesWifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this AircraftCabinAmenities.


        :param wifi: The wifi of this AircraftCabinAmenities.
        :type wifi: AircraftCabinAmenitiesWifi
        """

        self._wifi = wifi
