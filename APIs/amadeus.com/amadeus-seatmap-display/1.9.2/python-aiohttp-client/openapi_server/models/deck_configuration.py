# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeckConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_seat_row: int=None, end_wings_row: int=None, end_wings_x: int=None, exit_rows_x: List[int]=None, length: int=None, start_seat_row: int=None, start_wings_row: int=None, start_wings_x: int=None, width: int=None):
        """DeckConfiguration - a model defined in OpenAPI

        :param end_seat_row: The end_seat_row of this DeckConfiguration.
        :param end_wings_row: The end_wings_row of this DeckConfiguration.
        :param end_wings_x: The end_wings_x of this DeckConfiguration.
        :param exit_rows_x: The exit_rows_x of this DeckConfiguration.
        :param length: The length of this DeckConfiguration.
        :param start_seat_row: The start_seat_row of this DeckConfiguration.
        :param start_wings_row: The start_wings_row of this DeckConfiguration.
        :param start_wings_x: The start_wings_x of this DeckConfiguration.
        :param width: The width of this DeckConfiguration.
        """
        self.openapi_types = {
            'end_seat_row': int,
            'end_wings_row': int,
            'end_wings_x': int,
            'exit_rows_x': List[int],
            'length': int,
            'start_seat_row': int,
            'start_wings_row': int,
            'start_wings_x': int,
            'width': int
        }

        self.attribute_map = {
            'end_seat_row': 'endSeatRow',
            'end_wings_row': 'endWingsRow',
            'end_wings_x': 'endWingsX',
            'exit_rows_x': 'exitRowsX',
            'length': 'length',
            'start_seat_row': 'startSeatRow',
            'start_wings_row': 'startWingsRow',
            'start_wings_x': 'startWingsX',
            'width': 'width'
        }

        self._end_seat_row = end_seat_row
        self._end_wings_row = end_wings_row
        self._end_wings_x = end_wings_x
        self._exit_rows_x = exit_rows_x
        self._length = length
        self._start_seat_row = start_seat_row
        self._start_wings_row = start_wings_row
        self._start_wings_x = start_wings_x
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeckConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeckConfiguration of this DeckConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_seat_row(self):
        """Gets the end_seat_row of this DeckConfiguration.

        seat row where the deck is ending

        :return: The end_seat_row of this DeckConfiguration.
        :rtype: int
        """
        return self._end_seat_row

    @end_seat_row.setter
    def end_seat_row(self, end_seat_row):
        """Sets the end_seat_row of this DeckConfiguration.

        seat row where the deck is ending

        :param end_seat_row: The end_seat_row of this DeckConfiguration.
        :type end_seat_row: int
        """

        self._end_seat_row = end_seat_row

    @property
    def end_wings_row(self):
        """Gets the end_wings_row of this DeckConfiguration.

        seat row where the wing is ending

        :return: The end_wings_row of this DeckConfiguration.
        :rtype: int
        """
        return self._end_wings_row

    @end_wings_row.setter
    def end_wings_row(self, end_wings_row):
        """Sets the end_wings_row of this DeckConfiguration.

        seat row where the wing is ending

        :param end_wings_row: The end_wings_row of this DeckConfiguration.
        :type end_wings_row: int
        """

        self._end_wings_row = end_wings_row

    @property
    def end_wings_x(self):
        """Gets the end_wings_x of this DeckConfiguration.

        End x coordinate of the wings.The wings display ends relatively to the length.

        :return: The end_wings_x of this DeckConfiguration.
        :rtype: int
        """
        return self._end_wings_x

    @end_wings_x.setter
    def end_wings_x(self, end_wings_x):
        """Sets the end_wings_x of this DeckConfiguration.

        End x coordinate of the wings.The wings display ends relatively to the length.

        :param end_wings_x: The end_wings_x of this DeckConfiguration.
        :type end_wings_x: int
        """

        self._end_wings_x = end_wings_x

    @property
    def exit_rows_x(self):
        """Gets the exit_rows_x of this DeckConfiguration.

        X coordinate of the exit rows.The exit rows are displayed relatively to the length.

        :return: The exit_rows_x of this DeckConfiguration.
        :rtype: List[int]
        """
        return self._exit_rows_x

    @exit_rows_x.setter
    def exit_rows_x(self, exit_rows_x):
        """Sets the exit_rows_x of this DeckConfiguration.

        X coordinate of the exit rows.The exit rows are displayed relatively to the length.

        :param exit_rows_x: The exit_rows_x of this DeckConfiguration.
        :type exit_rows_x: List[int]
        """

        self._exit_rows_x = exit_rows_x

    @property
    def length(self):
        """Gets the length of this DeckConfiguration.

        Length (x-axis) of the deck.

        :return: The length of this DeckConfiguration.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this DeckConfiguration.

        Length (x-axis) of the deck.

        :param length: The length of this DeckConfiguration.
        :type length: int
        """

        self._length = length

    @property
    def start_seat_row(self):
        """Gets the start_seat_row of this DeckConfiguration.

        seat row where the deck is starting

        :return: The start_seat_row of this DeckConfiguration.
        :rtype: int
        """
        return self._start_seat_row

    @start_seat_row.setter
    def start_seat_row(self, start_seat_row):
        """Sets the start_seat_row of this DeckConfiguration.

        seat row where the deck is starting

        :param start_seat_row: The start_seat_row of this DeckConfiguration.
        :type start_seat_row: int
        """

        self._start_seat_row = start_seat_row

    @property
    def start_wings_row(self):
        """Gets the start_wings_row of this DeckConfiguration.

        seat row where the wing is starting

        :return: The start_wings_row of this DeckConfiguration.
        :rtype: int
        """
        return self._start_wings_row

    @start_wings_row.setter
    def start_wings_row(self, start_wings_row):
        """Sets the start_wings_row of this DeckConfiguration.

        seat row where the wing is starting

        :param start_wings_row: The start_wings_row of this DeckConfiguration.
        :type start_wings_row: int
        """

        self._start_wings_row = start_wings_row

    @property
    def start_wings_x(self):
        """Gets the start_wings_x of this DeckConfiguration.

        Start x coordinate of the wings.The wings display starts relatively to the length.

        :return: The start_wings_x of this DeckConfiguration.
        :rtype: int
        """
        return self._start_wings_x

    @start_wings_x.setter
    def start_wings_x(self, start_wings_x):
        """Sets the start_wings_x of this DeckConfiguration.

        Start x coordinate of the wings.The wings display starts relatively to the length.

        :param start_wings_x: The start_wings_x of this DeckConfiguration.
        :type start_wings_x: int
        """

        self._start_wings_x = start_wings_x

    @property
    def width(self):
        """Gets the width of this DeckConfiguration.

        Width (y-axis) of the deck.

        :return: The width of this DeckConfiguration.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DeckConfiguration.

        Width (y-axis) of the deck.

        :param width: The width of this DeckConfiguration.
        :type width: int
        """

        self._width = width
