# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_equipment import AircraftEquipment
from openapi_server.models.flight_end_point import FlightEndPoint
from openapi_server.models.flight_stop import FlightStop
from openapi_server.models.operating_flight import OperatingFlight
from openapi_server import util


class FlightSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aircraft: AircraftEquipment=None, arrival: FlightEndPoint=None, carrier_code: str=None, departure: FlightEndPoint=None, duration: str=None, number: str=None, operating: OperatingFlight=None, stops: List[FlightStop]=None):
        """FlightSegment - a model defined in OpenAPI

        :param aircraft: The aircraft of this FlightSegment.
        :param arrival: The arrival of this FlightSegment.
        :param carrier_code: The carrier_code of this FlightSegment.
        :param departure: The departure of this FlightSegment.
        :param duration: The duration of this FlightSegment.
        :param number: The number of this FlightSegment.
        :param operating: The operating of this FlightSegment.
        :param stops: The stops of this FlightSegment.
        """
        self.openapi_types = {
            'aircraft': AircraftEquipment,
            'arrival': FlightEndPoint,
            'carrier_code': str,
            'departure': FlightEndPoint,
            'duration': str,
            'number': str,
            'operating': OperatingFlight,
            'stops': List[FlightStop]
        }

        self.attribute_map = {
            'aircraft': 'aircraft',
            'arrival': 'arrival',
            'carrier_code': 'carrierCode',
            'departure': 'departure',
            'duration': 'duration',
            'number': 'number',
            'operating': 'operating',
            'stops': 'stops'
        }

        self._aircraft = aircraft
        self._arrival = arrival
        self._carrier_code = carrier_code
        self._departure = departure
        self._duration = duration
        self._number = number
        self._operating = operating
        self._stops = stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightSegment of this FlightSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aircraft(self):
        """Gets the aircraft of this FlightSegment.


        :return: The aircraft of this FlightSegment.
        :rtype: AircraftEquipment
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this FlightSegment.


        :param aircraft: The aircraft of this FlightSegment.
        :type aircraft: AircraftEquipment
        """

        self._aircraft = aircraft

    @property
    def arrival(self):
        """Gets the arrival of this FlightSegment.


        :return: The arrival of this FlightSegment.
        :rtype: FlightEndPoint
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this FlightSegment.


        :param arrival: The arrival of this FlightSegment.
        :type arrival: FlightEndPoint
        """

        self._arrival = arrival

    @property
    def carrier_code(self):
        """Gets the carrier_code of this FlightSegment.

        providing the airline / carrier code

        :return: The carrier_code of this FlightSegment.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this FlightSegment.

        providing the airline / carrier code

        :param carrier_code: The carrier_code of this FlightSegment.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 2:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code

    @property
    def departure(self):
        """Gets the departure of this FlightSegment.


        :return: The departure of this FlightSegment.
        :rtype: FlightEndPoint
        """
        return self._departure

    @departure.setter
    def departure(self, departure):
        """Sets the departure of this FlightSegment.


        :param departure: The departure of this FlightSegment.
        :type departure: FlightEndPoint
        """

        self._departure = departure

    @property
    def duration(self):
        """Gets the duration of this FlightSegment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :return: The duration of this FlightSegment.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this FlightSegment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :param duration: The duration of this FlightSegment.
        :type duration: str
        """

        self._duration = duration

    @property
    def number(self):
        """Gets the number of this FlightSegment.

        the flight number as assigned by the carrier

        :return: The number of this FlightSegment.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this FlightSegment.

        the flight number as assigned by the carrier

        :param number: The number of this FlightSegment.
        :type number: str
        """
        if number is not None and len(number) > 4:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `4`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def operating(self):
        """Gets the operating of this FlightSegment.


        :return: The operating of this FlightSegment.
        :rtype: OperatingFlight
        """
        return self._operating

    @operating.setter
    def operating(self, operating):
        """Sets the operating of this FlightSegment.


        :param operating: The operating of this FlightSegment.
        :type operating: OperatingFlight
        """

        self._operating = operating

    @property
    def stops(self):
        """Gets the stops of this FlightSegment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :return: The stops of this FlightSegment.
        :rtype: List[FlightStop]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this FlightSegment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :param stops: The stops of this FlightSegment.
        :type stops: List[FlightStop]
        """

        self._stops = stops
