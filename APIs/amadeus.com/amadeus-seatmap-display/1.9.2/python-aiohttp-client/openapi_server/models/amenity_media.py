# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qualified_free_text import QualifiedFreeText
from openapi_server import util


class AmenityMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: QualifiedFreeText=None, href: str=None, media_type: str=None, title: str=None):
        """AmenityMedia - a model defined in OpenAPI

        :param description: The description of this AmenityMedia.
        :param href: The href of this AmenityMedia.
        :param media_type: The media_type of this AmenityMedia.
        :param title: The title of this AmenityMedia.
        """
        self.openapi_types = {
            'description': QualifiedFreeText,
            'href': str,
            'media_type': str,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'href': 'href',
            'media_type': 'mediaType',
            'title': 'title'
        }

        self._description = description
        self._href = href
        self._media_type = media_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmenityMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Amenity_Media of this AmenityMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AmenityMedia.


        :return: The description of this AmenityMedia.
        :rtype: QualifiedFreeText
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AmenityMedia.


        :param description: The description of this AmenityMedia.
        :type description: QualifiedFreeText
        """

        self._description = description

    @property
    def href(self):
        """Gets the href of this AmenityMedia.

        href to display the original media. 

        :return: The href of this AmenityMedia.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AmenityMedia.

        href to display the original media. 

        :param href: The href of this AmenityMedia.
        :type href: str
        """

        self._href = href

    @property
    def media_type(self):
        """Gets the media_type of this AmenityMedia.

        media type as per IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)

        :return: The media_type of this AmenityMedia.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this AmenityMedia.

        media type as per IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)

        :param media_type: The media_type of this AmenityMedia.
        :type media_type: str
        """
        allowed_values = ["application", "audio", "font", "example", "image", "message", "model", "multipart", "text", "video"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def title(self):
        """Gets the title of this AmenityMedia.

        media title

        :return: The title of this AmenityMedia.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AmenityMedia.

        media title

        :param title: The title of this AmenityMedia.
        :type title: str
        """

        self._title = title
