# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deck_configuration import DeckConfiguration
from openapi_server.models.facility import Facility
from openapi_server.models.seat import Seat
from openapi_server import util


class Deck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deck_configuration: DeckConfiguration=None, deck_type: str=None, facilities: List[Facility]=None, seats: List[Seat]=None):
        """Deck - a model defined in OpenAPI

        :param deck_configuration: The deck_configuration of this Deck.
        :param deck_type: The deck_type of this Deck.
        :param facilities: The facilities of this Deck.
        :param seats: The seats of this Deck.
        """
        self.openapi_types = {
            'deck_configuration': DeckConfiguration,
            'deck_type': str,
            'facilities': List[Facility],
            'seats': List[Seat]
        }

        self.attribute_map = {
            'deck_configuration': 'deckConfiguration',
            'deck_type': 'deckType',
            'facilities': 'facilities',
            'seats': 'seats'
        }

        self._deck_configuration = deck_configuration
        self._deck_type = deck_type
        self._facilities = facilities
        self._seats = seats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deck of this Deck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deck_configuration(self):
        """Gets the deck_configuration of this Deck.


        :return: The deck_configuration of this Deck.
        :rtype: DeckConfiguration
        """
        return self._deck_configuration

    @deck_configuration.setter
    def deck_configuration(self, deck_configuration):
        """Sets the deck_configuration of this Deck.


        :param deck_configuration: The deck_configuration of this Deck.
        :type deck_configuration: DeckConfiguration
        """

        self._deck_configuration = deck_configuration

    @property
    def deck_type(self):
        """Gets the deck_type of this Deck.

        A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.

        :return: The deck_type of this Deck.
        :rtype: str
        """
        return self._deck_type

    @deck_type.setter
    def deck_type(self, deck_type):
        """Sets the deck_type of this Deck.

        A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.

        :param deck_type: The deck_type of this Deck.
        :type deck_type: str
        """
        allowed_values = ["UPPER", "MAIN", "LOWER"]  # noqa: E501
        if deck_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deck_type` ({0}), must be one of {1}"
                .format(deck_type, allowed_values)
            )

        self._deck_type = deck_type

    @property
    def facilities(self):
        """Gets the facilities of this Deck.


        :return: The facilities of this Deck.
        :rtype: List[Facility]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Deck.


        :param facilities: The facilities of this Deck.
        :type facilities: List[Facility]
        """

        self._facilities = facilities

    @property
    def seats(self):
        """Gets the seats of this Deck.


        :return: The seats of this Deck.
        :rtype: List[Seat]
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this Deck.


        :param seats: The seats of this Deck.
        :type seats: List[Seat]
        """

        self._seats = seats
