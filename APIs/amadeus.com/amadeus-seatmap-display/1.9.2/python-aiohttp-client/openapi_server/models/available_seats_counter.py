# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AvailableSeatsCounter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, traveler_id: str=None, value: int=None):
        """AvailableSeatsCounter - a model defined in OpenAPI

        :param traveler_id: The traveler_id of this AvailableSeatsCounter.
        :param value: The value of this AvailableSeatsCounter.
        """
        self.openapi_types = {
            'traveler_id': str,
            'value': int
        }

        self.attribute_map = {
            'traveler_id': 'travelerId',
            'value': 'value'
        }

        self._traveler_id = traveler_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableSeatsCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableSeatsCounter of this AvailableSeatsCounter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def traveler_id(self):
        """Gets the traveler_id of this AvailableSeatsCounter.

        Traveler id

        :return: The traveler_id of this AvailableSeatsCounter.
        :rtype: str
        """
        return self._traveler_id

    @traveler_id.setter
    def traveler_id(self, traveler_id):
        """Sets the traveler_id of this AvailableSeatsCounter.

        Traveler id

        :param traveler_id: The traveler_id of this AvailableSeatsCounter.
        :type traveler_id: str
        """
        if traveler_id is not None and not re.search(r'[a-zA-Z0-9-]{1,20}', traveler_id):
            raise ValueError("Invalid value for `traveler_id`, must be a follow pattern or equal to `/[a-zA-Z0-9-]{1,20}/`")

        self._traveler_id = traveler_id

    @property
    def value(self):
        """Gets the value of this AvailableSeatsCounter.

        Number of Seats with status AVAILABLE

        :return: The value of this AvailableSeatsCounter.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AvailableSeatsCounter.

        Number of Seats with status AVAILABLE

        :param value: The value of this AvailableSeatsCounter.
        :type value: int
        """

        self._value = value
