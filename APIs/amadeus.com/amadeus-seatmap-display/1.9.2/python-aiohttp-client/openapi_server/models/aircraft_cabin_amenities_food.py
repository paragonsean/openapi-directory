# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AircraftCabinAmenitiesFood(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_chargeable: bool=None, food_type: str=None):
        """AircraftCabinAmenitiesFood - a model defined in OpenAPI

        :param is_chargeable: The is_chargeable of this AircraftCabinAmenitiesFood.
        :param food_type: The food_type of this AircraftCabinAmenitiesFood.
        """
        self.openapi_types = {
            'is_chargeable': bool,
            'food_type': str
        }

        self.attribute_map = {
            'is_chargeable': 'isChargeable',
            'food_type': 'foodType'
        }

        self._is_chargeable = is_chargeable
        self._food_type = food_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AircraftCabinAmenitiesFood':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AircraftCabinAmenities_Food of this AircraftCabinAmenitiesFood.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this AircraftCabinAmenitiesFood.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :return: The is_chargeable of this AircraftCabinAmenitiesFood.
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this AircraftCabinAmenitiesFood.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :param is_chargeable: The is_chargeable of this AircraftCabinAmenitiesFood.
        :type is_chargeable: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def food_type(self):
        """Gets the food_type of this AircraftCabinAmenitiesFood.


        :return: The food_type of this AircraftCabinAmenitiesFood.
        :rtype: str
        """
        return self._food_type

    @food_type.setter
    def food_type(self, food_type):
        """Sets the food_type of this AircraftCabinAmenitiesFood.


        :param food_type: The food_type of this AircraftCabinAmenitiesFood.
        :type food_type: str
        """
        allowed_values = ["MEAL", "FRESH_MEAL", "SNACK", "FRESH_SNACK"]  # noqa: E501
        if food_type not in allowed_values:
            raise ValueError(
                "Invalid value for `food_type` ({0}), must be one of {1}"
                .format(food_type, allowed_values)
            )

        self._food_type = food_type
