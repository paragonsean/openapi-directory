# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
import re
from openapi_server import util


class SeatmapTravelerPricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: Price=None, seat_availability_status: str=None, traveler_id: str=None):
        """SeatmapTravelerPricing - a model defined in OpenAPI

        :param price: The price of this SeatmapTravelerPricing.
        :param seat_availability_status: The seat_availability_status of this SeatmapTravelerPricing.
        :param traveler_id: The traveler_id of this SeatmapTravelerPricing.
        """
        self.openapi_types = {
            'price': Price,
            'seat_availability_status': str,
            'traveler_id': str
        }

        self.attribute_map = {
            'price': 'price',
            'seat_availability_status': 'seatAvailabilityStatus',
            'traveler_id': 'travelerId'
        }

        self._price = price
        self._seat_availability_status = seat_availability_status
        self._traveler_id = traveler_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeatmapTravelerPricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeatmapTravelerPricing of this SeatmapTravelerPricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this SeatmapTravelerPricing.


        :return: The price of this SeatmapTravelerPricing.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SeatmapTravelerPricing.


        :param price: The price of this SeatmapTravelerPricing.
        :type price: Price
        """

        self._price = price

    @property
    def seat_availability_status(self):
        """Gets the seat_availability_status of this SeatmapTravelerPricing.

        Seat availability for this specific traveler. Allows better seat choice per traveler

        :return: The seat_availability_status of this SeatmapTravelerPricing.
        :rtype: str
        """
        return self._seat_availability_status

    @seat_availability_status.setter
    def seat_availability_status(self, seat_availability_status):
        """Sets the seat_availability_status of this SeatmapTravelerPricing.

        Seat availability for this specific traveler. Allows better seat choice per traveler

        :param seat_availability_status: The seat_availability_status of this SeatmapTravelerPricing.
        :type seat_availability_status: str
        """
        allowed_values = ["AVAILABLE", "BLOCKED", "OCCUPIED"]  # noqa: E501
        if seat_availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `seat_availability_status` ({0}), must be one of {1}"
                .format(seat_availability_status, allowed_values)
            )

        self._seat_availability_status = seat_availability_status

    @property
    def traveler_id(self):
        """Gets the traveler_id of this SeatmapTravelerPricing.

        Traveler id

        :return: The traveler_id of this SeatmapTravelerPricing.
        :rtype: str
        """
        return self._traveler_id

    @traveler_id.setter
    def traveler_id(self, traveler_id):
        """Sets the traveler_id of this SeatmapTravelerPricing.

        Traveler id

        :param traveler_id: The traveler_id of this SeatmapTravelerPricing.
        :type traveler_id: str
        """
        if traveler_id is not None and not re.search(r'[a-zA-Z0-9-]{1,20}', traveler_id):
            raise ValueError("Invalid value for `traveler_id`, must be a follow pattern or equal to `/[a-zA-Z0-9-]{1,20}/`")

        self._traveler_id = traveler_id
