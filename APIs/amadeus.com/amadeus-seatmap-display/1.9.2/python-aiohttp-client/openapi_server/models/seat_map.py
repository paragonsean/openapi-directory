# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_cabin_amenities import AircraftCabinAmenities
from openapi_server.models.aircraft_equipment import AircraftEquipment
from openapi_server.models.available_seats_counter import AvailableSeatsCounter
from openapi_server.models.deck import Deck
from openapi_server.models.flight_end_point import FlightEndPoint
from openapi_server.models.link import Link
from openapi_server.models.operating_flight import OperatingFlight
from openapi_server import util


class SeatMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aircraft: AircraftEquipment=None, aircraft_cabin_amenities: AircraftCabinAmenities=None, arrival: FlightEndPoint=None, available_seats_counters: List[AvailableSeatsCounter]=None, carrier_code: str=None, _class: str=None, decks: List[Deck]=None, departure: FlightEndPoint=None, flight_offer_id: str=None, id: str=None, number: str=None, operating: OperatingFlight=None, segment_id: str=None, _self: Link=None, type: str=None):
        """SeatMap - a model defined in OpenAPI

        :param aircraft: The aircraft of this SeatMap.
        :param aircraft_cabin_amenities: The aircraft_cabin_amenities of this SeatMap.
        :param arrival: The arrival of this SeatMap.
        :param available_seats_counters: The available_seats_counters of this SeatMap.
        :param carrier_code: The carrier_code of this SeatMap.
        :param _class: The _class of this SeatMap.
        :param decks: The decks of this SeatMap.
        :param departure: The departure of this SeatMap.
        :param flight_offer_id: The flight_offer_id of this SeatMap.
        :param id: The id of this SeatMap.
        :param number: The number of this SeatMap.
        :param operating: The operating of this SeatMap.
        :param segment_id: The segment_id of this SeatMap.
        :param _self: The _self of this SeatMap.
        :param type: The type of this SeatMap.
        """
        self.openapi_types = {
            'aircraft': AircraftEquipment,
            'aircraft_cabin_amenities': AircraftCabinAmenities,
            'arrival': FlightEndPoint,
            'available_seats_counters': List[AvailableSeatsCounter],
            'carrier_code': str,
            '_class': str,
            'decks': List[Deck],
            'departure': FlightEndPoint,
            'flight_offer_id': str,
            'id': str,
            'number': str,
            'operating': OperatingFlight,
            'segment_id': str,
            '_self': Link,
            'type': str
        }

        self.attribute_map = {
            'aircraft': 'aircraft',
            'aircraft_cabin_amenities': 'aircraftCabinAmenities',
            'arrival': 'arrival',
            'available_seats_counters': 'availableSeatsCounters',
            'carrier_code': 'carrierCode',
            '_class': 'class',
            'decks': 'decks',
            'departure': 'departure',
            'flight_offer_id': 'flightOfferId',
            'id': 'id',
            'number': 'number',
            'operating': 'operating',
            'segment_id': 'segmentId',
            '_self': 'self',
            'type': 'type'
        }

        self._aircraft = aircraft
        self._aircraft_cabin_amenities = aircraft_cabin_amenities
        self._arrival = arrival
        self._available_seats_counters = available_seats_counters
        self._carrier_code = carrier_code
        self.__class = _class
        self._decks = decks
        self._departure = departure
        self._flight_offer_id = flight_offer_id
        self._id = id
        self._number = number
        self._operating = operating
        self._segment_id = segment_id
        self.__self = _self
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeatMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeatMap of this SeatMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aircraft(self):
        """Gets the aircraft of this SeatMap.


        :return: The aircraft of this SeatMap.
        :rtype: AircraftEquipment
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this SeatMap.


        :param aircraft: The aircraft of this SeatMap.
        :type aircraft: AircraftEquipment
        """

        self._aircraft = aircraft

    @property
    def aircraft_cabin_amenities(self):
        """Gets the aircraft_cabin_amenities of this SeatMap.


        :return: The aircraft_cabin_amenities of this SeatMap.
        :rtype: AircraftCabinAmenities
        """
        return self._aircraft_cabin_amenities

    @aircraft_cabin_amenities.setter
    def aircraft_cabin_amenities(self, aircraft_cabin_amenities):
        """Sets the aircraft_cabin_amenities of this SeatMap.


        :param aircraft_cabin_amenities: The aircraft_cabin_amenities of this SeatMap.
        :type aircraft_cabin_amenities: AircraftCabinAmenities
        """

        self._aircraft_cabin_amenities = aircraft_cabin_amenities

    @property
    def arrival(self):
        """Gets the arrival of this SeatMap.


        :return: The arrival of this SeatMap.
        :rtype: FlightEndPoint
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this SeatMap.


        :param arrival: The arrival of this SeatMap.
        :type arrival: FlightEndPoint
        """

        self._arrival = arrival

    @property
    def available_seats_counters(self):
        """Gets the available_seats_counters of this SeatMap.

        number of seats available for each passenger

        :return: The available_seats_counters of this SeatMap.
        :rtype: List[AvailableSeatsCounter]
        """
        return self._available_seats_counters

    @available_seats_counters.setter
    def available_seats_counters(self, available_seats_counters):
        """Sets the available_seats_counters of this SeatMap.

        number of seats available for each passenger

        :param available_seats_counters: The available_seats_counters of this SeatMap.
        :type available_seats_counters: List[AvailableSeatsCounter]
        """

        self._available_seats_counters = available_seats_counters

    @property
    def carrier_code(self):
        """Gets the carrier_code of this SeatMap.

        providing the marketing airline carrier code

        :return: The carrier_code of this SeatMap.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this SeatMap.

        providing the marketing airline carrier code

        :param carrier_code: The carrier_code of this SeatMap.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 2:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code

    @property
    def _class(self):
        """Gets the _class of this SeatMap.

        reservation booking designator (RBD) of the carrier

        :return: The _class of this SeatMap.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this SeatMap.

        reservation booking designator (RBD) of the carrier

        :param _class: The _class of this SeatMap.
        :type _class: str
        """
        if _class is not None and len(_class) > 2:
            raise ValueError("Invalid value for `_class`, length must be less than or equal to `2`")
        if _class is not None and len(_class) < 1:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `1`")

        self.__class = _class

    @property
    def decks(self):
        """Gets the decks of this SeatMap.

        decks information

        :return: The decks of this SeatMap.
        :rtype: List[Deck]
        """
        return self._decks

    @decks.setter
    def decks(self, decks):
        """Sets the decks of this SeatMap.

        decks information

        :param decks: The decks of this SeatMap.
        :type decks: List[Deck]
        """

        self._decks = decks

    @property
    def departure(self):
        """Gets the departure of this SeatMap.


        :return: The departure of this SeatMap.
        :rtype: FlightEndPoint
        """
        return self._departure

    @departure.setter
    def departure(self, departure):
        """Sets the departure of this SeatMap.


        :param departure: The departure of this SeatMap.
        :type departure: FlightEndPoint
        """

        self._departure = departure

    @property
    def flight_offer_id(self):
        """Gets the flight_offer_id of this SeatMap.

        Id of the impacted flight offer

        :return: The flight_offer_id of this SeatMap.
        :rtype: str
        """
        return self._flight_offer_id

    @flight_offer_id.setter
    def flight_offer_id(self, flight_offer_id):
        """Sets the flight_offer_id of this SeatMap.

        Id of the impacted flight offer

        :param flight_offer_id: The flight_offer_id of this SeatMap.
        :type flight_offer_id: str
        """

        self._flight_offer_id = flight_offer_id

    @property
    def id(self):
        """Gets the id of this SeatMap.

        item identifier

        :return: The id of this SeatMap.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeatMap.

        item identifier

        :param id: The id of this SeatMap.
        :type id: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this SeatMap.

        the flight number as assigned by the marketing carrier

        :return: The number of this SeatMap.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SeatMap.

        the flight number as assigned by the marketing carrier

        :param number: The number of this SeatMap.
        :type number: str
        """
        if number is not None and len(number) > 4:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `4`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def operating(self):
        """Gets the operating of this SeatMap.


        :return: The operating of this SeatMap.
        :rtype: OperatingFlight
        """
        return self._operating

    @operating.setter
    def operating(self, operating):
        """Sets the operating of this SeatMap.


        :param operating: The operating of this SeatMap.
        :type operating: OperatingFlight
        """

        self._operating = operating

    @property
    def segment_id(self):
        """Gets the segment_id of this SeatMap.

        Id of the impacted segment

        :return: The segment_id of this SeatMap.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this SeatMap.

        Id of the impacted segment

        :param segment_id: The segment_id of this SeatMap.
        :type segment_id: str
        """

        self._segment_id = segment_id

    @property
    def _self(self):
        """Gets the _self of this SeatMap.


        :return: The _self of this SeatMap.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this SeatMap.


        :param _self: The _self of this SeatMap.
        :type _self: Link
        """

        self.__self = _self

    @property
    def type(self):
        """Gets the type of this SeatMap.

        Ressource name

        :return: The type of this SeatMap.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SeatMap.

        Ressource name

        :param type: The type of this SeatMap.
        :type type: str
        """

        self._type = type
