# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identity_document import IdentityDocument
from openapi_server.models.name import Name
from openapi_server.models.stakeholder_gender import StakeholderGender
from openapi_server import util


class Stakeholder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: date=None, documents: List[IdentityDocument]=None, gender: StakeholderGender=None, id: str=None, name: Name=None):
        """Stakeholder - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this Stakeholder.
        :param documents: The documents of this Stakeholder.
        :param gender: The gender of this Stakeholder.
        :param id: The id of this Stakeholder.
        :param name: The name of this Stakeholder.
        """
        self.openapi_types = {
            'date_of_birth': date,
            'documents': List[IdentityDocument],
            'gender': StakeholderGender,
            'id': str,
            'name': Name
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'documents': 'documents',
            'gender': 'gender',
            'id': 'id',
            'name': 'name'
        }

        self._date_of_birth = date_of_birth
        self._documents = documents
        self._gender = gender
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stakeholder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stakeholder of this Stakeholder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Stakeholder.

        The date of birth in ISO 8601 format (yyyy-mm-dd)

        :return: The date_of_birth of this Stakeholder.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Stakeholder.

        The date of birth in ISO 8601 format (yyyy-mm-dd)

        :param date_of_birth: The date_of_birth of this Stakeholder.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def documents(self):
        """Gets the documents of this Stakeholder.

        Advanced Passenger Information - regulatory identity documents - SSR DOCS & DOCO elements

        :return: The documents of this Stakeholder.
        :rtype: List[IdentityDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Stakeholder.

        Advanced Passenger Information - regulatory identity documents - SSR DOCS & DOCO elements

        :param documents: The documents of this Stakeholder.
        :type documents: List[IdentityDocument]
        """

        self._documents = documents

    @property
    def gender(self):
        """Gets the gender of this Stakeholder.


        :return: The gender of this Stakeholder.
        :rtype: StakeholderGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Stakeholder.


        :param gender: The gender of this Stakeholder.
        :type gender: StakeholderGender
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Stakeholder.

        item identifier

        :return: The id of this Stakeholder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stakeholder.

        item identifier

        :param id: The id of this Stakeholder.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Stakeholder.


        :return: The name of this Stakeholder.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stakeholder.


        :param name: The name of this Stakeholder.
        :type name: Name
        """

        self._name = name
