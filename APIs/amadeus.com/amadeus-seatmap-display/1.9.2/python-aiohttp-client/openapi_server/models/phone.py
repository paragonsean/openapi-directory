# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone_device_type import PhoneDeviceType
import re
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addressee_name: str=None, area_code: str=None, category: str=None, country_calling_code: str=None, country_code: str=None, device_type: PhoneDeviceType=None, extension: str=None, number: str=None, text: str=None):
        """Phone - a model defined in OpenAPI

        :param addressee_name: The addressee_name of this Phone.
        :param area_code: The area_code of this Phone.
        :param category: The category of this Phone.
        :param country_calling_code: The country_calling_code of this Phone.
        :param country_code: The country_code of this Phone.
        :param device_type: The device_type of this Phone.
        :param extension: The extension of this Phone.
        :param number: The number of this Phone.
        :param text: The text of this Phone.
        """
        self.openapi_types = {
            'addressee_name': str,
            'area_code': str,
            'category': str,
            'country_calling_code': str,
            'country_code': str,
            'device_type': PhoneDeviceType,
            'extension': str,
            'number': str,
            'text': str
        }

        self.attribute_map = {
            'addressee_name': 'addresseeName',
            'area_code': 'areaCode',
            'category': 'category',
            'country_calling_code': 'countryCallingCode',
            'country_code': 'countryCode',
            'device_type': 'deviceType',
            'extension': 'extension',
            'number': 'number',
            'text': 'text'
        }

        self._addressee_name = addressee_name
        self._area_code = area_code
        self._category = category
        self._country_calling_code = country_calling_code
        self._country_code = country_code
        self._device_type = device_type
        self._extension = extension
        self._number = number
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addressee_name(self):
        """Gets the addressee_name of this Phone.

        Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).

        :return: The addressee_name of this Phone.
        :rtype: str
        """
        return self._addressee_name

    @addressee_name.setter
    def addressee_name(self, addressee_name):
        """Sets the addressee_name of this Phone.

        Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).

        :param addressee_name: The addressee_name of this Phone.
        :type addressee_name: str
        """
        if addressee_name is not None and not re.search(r'[a-zA-Z -]', addressee_name):
            raise ValueError("Invalid value for `addressee_name`, must be a follow pattern or equal to `/[a-zA-Z -]/`")

        self._addressee_name = addressee_name

    @property
    def area_code(self):
        """Gets the area_code of this Phone.

        Corresponds to a regional code or a city code. The length of the field varies depending on the area.

        :return: The area_code of this Phone.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this Phone.

        Corresponds to a regional code or a city code. The length of the field varies depending on the area.

        :param area_code: The area_code of this Phone.
        :type area_code: str
        """
        if area_code is not None and not re.search(r'[0-9]{1,4}', area_code):
            raise ValueError("Invalid value for `area_code`, must be a follow pattern or equal to `/[0-9]{1,4}/`")

        self._area_code = area_code

    @property
    def category(self):
        """Gets the category of this Phone.

        Category of the contact element

        :return: The category of this Phone.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Phone.

        Category of the contact element

        :param category: The category of this Phone.
        :type category: str
        """
        allowed_values = ["BUSINESS", "PERSONAL", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def country_calling_code(self):
        """Gets the country_calling_code of this Phone.

        Country calling code of the phone number, as defined by the International Communication Union. Examples - \"1\" for US, \"371\" for Latvia.

        :return: The country_calling_code of this Phone.
        :rtype: str
        """
        return self._country_calling_code

    @country_calling_code.setter
    def country_calling_code(self, country_calling_code):
        """Sets the country_calling_code of this Phone.

        Country calling code of the phone number, as defined by the International Communication Union. Examples - \"1\" for US, \"371\" for Latvia.

        :param country_calling_code: The country_calling_code of this Phone.
        :type country_calling_code: str
        """
        if country_calling_code is not None and not re.search(r'[0-9+]{2,5}', country_calling_code):
            raise ValueError("Invalid value for `country_calling_code`, must be a follow pattern or equal to `/[0-9+]{2,5}/`")

        self._country_calling_code = country_calling_code

    @property
    def country_code(self):
        """Gets the country_code of this Phone.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :return: The country_code of this Phone.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Phone.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :param country_code: The country_code of this Phone.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def device_type(self):
        """Gets the device_type of this Phone.


        :return: The device_type of this Phone.
        :rtype: PhoneDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Phone.


        :param device_type: The device_type of this Phone.
        :type device_type: PhoneDeviceType
        """

        self._device_type = device_type

    @property
    def extension(self):
        """Gets the extension of this Phone.

        Extension of the phone

        :return: The extension of this Phone.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Phone.

        Extension of the phone

        :param extension: The extension of this Phone.
        :type extension: str
        """

        self._extension = extension

    @property
    def number(self):
        """Gets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :return: The number of this Phone.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :param number: The number of this Phone.
        :type number: str
        """
        if number is not None and not re.search(r'[0-9]{1,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[0-9]{1,15}/`")

        self._number = number

    @property
    def text(self):
        """Gets the text of this Phone.

        String containing the full phone number - applicable only when a structured phone (i.e. countryCallingCode + number) is not provided

        :return: The text of this Phone.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Phone.

        String containing the full phone number - applicable only when a structured phone (i.e. countryCallingCode + number) is not provided

        :param text: The text of this Phone.
        :type text: str
        """

        self._text = text
