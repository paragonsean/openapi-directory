# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Amenity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_chargeable: bool=None):
        """Amenity - a model defined in OpenAPI

        :param is_chargeable: The is_chargeable of this Amenity.
        """
        self.openapi_types = {
            'is_chargeable': bool
        }

        self.attribute_map = {
            'is_chargeable': 'isChargeable'
        }

        self._is_chargeable = is_chargeable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Amenity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Amenity of this Amenity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this Amenity.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :return: The is_chargeable of this Amenity.
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this Amenity.

        Specify if the traveler will need to pay extra in-flight to get the amenity

        :param is_chargeable: The is_chargeable of this Amenity.
        :type is_chargeable: bool
        """

        self._is_chargeable = is_chargeable
