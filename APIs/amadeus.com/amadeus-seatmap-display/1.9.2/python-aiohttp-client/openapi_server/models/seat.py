# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coordinates import Coordinates
from openapi_server.models.seatmap_traveler_pricing import SeatmapTravelerPricing
from openapi_server import util


class Seat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cabin: str=None, characteristics_codes: List[str]=None, coordinates: Coordinates=None, number: str=None, traveler_pricing: List[SeatmapTravelerPricing]=None):
        """Seat - a model defined in OpenAPI

        :param cabin: The cabin of this Seat.
        :param characteristics_codes: The characteristics_codes of this Seat.
        :param coordinates: The coordinates of this Seat.
        :param number: The number of this Seat.
        :param traveler_pricing: The traveler_pricing of this Seat.
        """
        self.openapi_types = {
            'cabin': str,
            'characteristics_codes': List[str],
            'coordinates': Coordinates,
            'number': str,
            'traveler_pricing': List[SeatmapTravelerPricing]
        }

        self.attribute_map = {
            'cabin': 'cabin',
            'characteristics_codes': 'characteristicsCodes',
            'coordinates': 'coordinates',
            'number': 'number',
            'traveler_pricing': 'travelerPricing'
        }

        self._cabin = cabin
        self._characteristics_codes = characteristics_codes
        self._coordinates = coordinates
        self._number = number
        self._traveler_pricing = traveler_pricing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Seat of this Seat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cabin(self):
        """Gets the cabin of this Seat.

        Cabin of the seat.

        :return: The cabin of this Seat.
        :rtype: str
        """
        return self._cabin

    @cabin.setter
    def cabin(self, cabin):
        """Sets the cabin of this Seat.

        Cabin of the seat.

        :param cabin: The cabin of this Seat.
        :type cabin: str
        """

        self._cabin = cabin

    @property
    def characteristics_codes(self):
        """Gets the characteristics_codes of this Seat.

        List of seat characteristics (the characteristic's names can be retrieved in the seat characteristic dictionary) Possible values are part of:    IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825    Amadeus Code: defined as extension, example MV=row with movie screen    Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT=premium seat

        :return: The characteristics_codes of this Seat.
        :rtype: List[str]
        """
        return self._characteristics_codes

    @characteristics_codes.setter
    def characteristics_codes(self, characteristics_codes):
        """Sets the characteristics_codes of this Seat.

        List of seat characteristics (the characteristic's names can be retrieved in the seat characteristic dictionary) Possible values are part of:    IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825    Amadeus Code: defined as extension, example MV=row with movie screen    Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT=premium seat

        :param characteristics_codes: The characteristics_codes of this Seat.
        :type characteristics_codes: List[str]
        """

        self._characteristics_codes = characteristics_codes

    @property
    def coordinates(self):
        """Gets the coordinates of this Seat.


        :return: The coordinates of this Seat.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Seat.


        :param coordinates: The coordinates of this Seat.
        :type coordinates: Coordinates
        """

        self._coordinates = coordinates

    @property
    def number(self):
        """Gets the number of this Seat.

        Concatenation of the row id and the column id, for example 12B

        :return: The number of this Seat.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Seat.

        Concatenation of the row id and the column id, for example 12B

        :param number: The number of this Seat.
        :type number: str
        """

        self._number = number

    @property
    def traveler_pricing(self):
        """Gets the traveler_pricing of this Seat.

        Traveler's information and price

        :return: The traveler_pricing of this Seat.
        :rtype: List[SeatmapTravelerPricing]
        """
        return self._traveler_pricing

    @traveler_pricing.setter
    def traveler_pricing(self, traveler_pricing):
        """Sets the traveler_pricing of this Seat.

        Traveler's information and price

        :param traveler_pricing: The traveler_pricing of this Seat.
        :type traveler_pricing: List[SeatmapTravelerPricing]
        """

        self._traveler_pricing = traveler_pricing
