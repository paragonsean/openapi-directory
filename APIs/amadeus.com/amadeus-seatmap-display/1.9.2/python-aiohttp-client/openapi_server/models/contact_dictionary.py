# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact_purpose import ContactPurpose
from openapi_server.models.name import Name
from openapi_server import util


class ContactDictionary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, addressee_name: Name=None, purpose: ContactPurpose=None):
        """ContactDictionary - a model defined in OpenAPI

        :param address: The address of this ContactDictionary.
        :param addressee_name: The addressee_name of this ContactDictionary.
        :param purpose: The purpose of this ContactDictionary.
        """
        self.openapi_types = {
            'address': Address,
            'addressee_name': Name,
            'purpose': ContactPurpose
        }

        self.attribute_map = {
            'address': 'address',
            'addressee_name': 'addresseeName',
            'purpose': 'purpose'
        }

        self._address = address
        self._addressee_name = addressee_name
        self._purpose = purpose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDictionary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDictionary of this ContactDictionary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ContactDictionary.


        :return: The address of this ContactDictionary.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactDictionary.


        :param address: The address of this ContactDictionary.
        :type address: Address
        """

        self._address = address

    @property
    def addressee_name(self):
        """Gets the addressee_name of this ContactDictionary.


        :return: The addressee_name of this ContactDictionary.
        :rtype: Name
        """
        return self._addressee_name

    @addressee_name.setter
    def addressee_name(self, addressee_name):
        """Sets the addressee_name of this ContactDictionary.


        :param addressee_name: The addressee_name of this ContactDictionary.
        :type addressee_name: Name
        """

        self._addressee_name = addressee_name

    @property
    def purpose(self):
        """Gets the purpose of this ContactDictionary.


        :return: The purpose of this ContactDictionary.
        :rtype: ContactPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ContactDictionary.


        :param purpose: The purpose of this ContactDictionary.
        :type purpose: ContactPurpose
        """

        self._purpose = purpose
