# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amenity_media import AmenityMedia
from openapi_server import util


class AmenitySeat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenity_type: str=None, leg_space: int=None, medias: List[AmenityMedia]=None, space_unit: str=None, tilt: str=None):
        """AmenitySeat - a model defined in OpenAPI

        :param amenity_type: The amenity_type of this AmenitySeat.
        :param leg_space: The leg_space of this AmenitySeat.
        :param medias: The medias of this AmenitySeat.
        :param space_unit: The space_unit of this AmenitySeat.
        :param tilt: The tilt of this AmenitySeat.
        """
        self.openapi_types = {
            'amenity_type': str,
            'leg_space': int,
            'medias': List[AmenityMedia],
            'space_unit': str,
            'tilt': str
        }

        self.attribute_map = {
            'amenity_type': 'amenityType',
            'leg_space': 'legSpace',
            'medias': 'medias',
            'space_unit': 'spaceUnit',
            'tilt': 'tilt'
        }

        self._amenity_type = amenity_type
        self._leg_space = leg_space
        self._medias = medias
        self._space_unit = space_unit
        self._tilt = tilt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmenitySeat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Amenity_Seat of this AmenitySeat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenity_type(self):
        """Gets the amenity_type of this AmenitySeat.


        :return: The amenity_type of this AmenitySeat.
        :rtype: str
        """
        return self._amenity_type

    @amenity_type.setter
    def amenity_type(self, amenity_type):
        """Sets the amenity_type of this AmenitySeat.


        :param amenity_type: The amenity_type of this AmenitySeat.
        :type amenity_type: str
        """
        allowed_values = ["SEAT"]  # noqa: E501
        if amenity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amenity_type` ({0}), must be one of {1}"
                .format(amenity_type, allowed_values)
            )

        self._amenity_type = amenity_type

    @property
    def leg_space(self):
        """Gets the leg_space of this AmenitySeat.

        Space between 2 seats

        :return: The leg_space of this AmenitySeat.
        :rtype: int
        """
        return self._leg_space

    @leg_space.setter
    def leg_space(self, leg_space):
        """Sets the leg_space of this AmenitySeat.

        Space between 2 seats

        :param leg_space: The leg_space of this AmenitySeat.
        :type leg_space: int
        """

        self._leg_space = leg_space

    @property
    def medias(self):
        """Gets the medias of this AmenitySeat.

        list of media associated to the seat (rich content)

        :return: The medias of this AmenitySeat.
        :rtype: List[AmenityMedia]
        """
        return self._medias

    @medias.setter
    def medias(self, medias):
        """Sets the medias of this AmenitySeat.

        list of media associated to the seat (rich content)

        :param medias: The medias of this AmenitySeat.
        :type medias: List[AmenityMedia]
        """

        self._medias = medias

    @property
    def space_unit(self):
        """Gets the space_unit of this AmenitySeat.


        :return: The space_unit of this AmenitySeat.
        :rtype: str
        """
        return self._space_unit

    @space_unit.setter
    def space_unit(self, space_unit):
        """Sets the space_unit of this AmenitySeat.


        :param space_unit: The space_unit of this AmenitySeat.
        :type space_unit: str
        """
        allowed_values = ["INCHES", "CENTIMENTERS"]  # noqa: E501
        if space_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `space_unit` ({0}), must be one of {1}"
                .format(space_unit, allowed_values)
            )

        self._space_unit = space_unit

    @property
    def tilt(self):
        """Gets the tilt of this AmenitySeat.

        Flatness of a seat

        :return: The tilt of this AmenitySeat.
        :rtype: str
        """
        return self._tilt

    @tilt.setter
    def tilt(self, tilt):
        """Sets the tilt of this AmenitySeat.

        Flatness of a seat

        :param tilt: The tilt of this AmenitySeat.
        :type tilt: str
        """
        allowed_values = ["FULL_FLAT", "ANGLE_FLAT", "NORMAL"]  # noqa: E501
        if tilt not in allowed_values:
            raise ValueError(
                "Invalid value for `tilt` ({0}), must be one of {1}"
                .format(tilt, allowed_values)
            )

        self._tilt = tilt
