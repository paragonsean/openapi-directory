# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, city_name: str=None, country_code: str=None, lines: List[str]=None, postal_box: str=None, postal_code: str=None, state_code: str=None, state_name: str=None, text: str=None):
        """Address - a model defined in OpenAPI

        :param category: The category of this Address.
        :param city_name: The city_name of this Address.
        :param country_code: The country_code of this Address.
        :param lines: The lines of this Address.
        :param postal_box: The postal_box of this Address.
        :param postal_code: The postal_code of this Address.
        :param state_code: The state_code of this Address.
        :param state_name: The state_name of this Address.
        :param text: The text of this Address.
        """
        self.openapi_types = {
            'category': str,
            'city_name': str,
            'country_code': str,
            'lines': List[str],
            'postal_box': str,
            'postal_code': str,
            'state_code': str,
            'state_name': str,
            'text': str
        }

        self.attribute_map = {
            'category': 'category',
            'city_name': 'cityName',
            'country_code': 'countryCode',
            'lines': 'lines',
            'postal_box': 'postalBox',
            'postal_code': 'postalCode',
            'state_code': 'stateCode',
            'state_name': 'stateName',
            'text': 'text'
        }

        self._category = category
        self._city_name = city_name
        self._country_code = country_code
        self._lines = lines
        self._postal_box = postal_box
        self._postal_code = postal_code
        self._state_code = state_code
        self._state_name = state_name
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Address.

        Category of the contact element

        :return: The category of this Address.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Address.

        Category of the contact element

        :param category: The category of this Address.
        :type category: str
        """
        allowed_values = ["BUSINESS", "PERSONAL", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def city_name(self):
        """Gets the city_name of this Address.

        Full city name. Example: Dublin

        :return: The city_name of this Address.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this Address.

        Full city name. Example: Dublin

        :param city_name: The city_name of this Address.
        :type city_name: str
        """
        if city_name is not None and not re.search(r'[a-zA-Z -]{1,35}', city_name):
            raise ValueError("Invalid value for `city_name`, must be a follow pattern or equal to `/[a-zA-Z -]{1,35}/`")

        self._city_name = city_name

    @property
    def country_code(self):
        """Gets the country_code of this Address.

        country code [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)

        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        country code [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)

        :param country_code: The country_code of this Address.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[a-zA-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._country_code = country_code

    @property
    def lines(self):
        """Gets the lines of this Address.

        Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc

        :return: The lines of this Address.
        :rtype: List[str]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this Address.

        Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc

        :param lines: The lines of this Address.
        :type lines: List[str]
        """

        self._lines = lines

    @property
    def postal_box(self):
        """Gets the postal_box of this Address.

        E.g. BP 220

        :return: The postal_box of this Address.
        :rtype: str
        """
        return self._postal_box

    @postal_box.setter
    def postal_box(self, postal_box):
        """Sets the postal_box of this Address.

        E.g. BP 220

        :param postal_box: The postal_box of this Address.
        :type postal_box: str
        """

        self._postal_box = postal_box

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Example: 74130

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Example: 74130

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_code(self):
        """Gets the state_code of this Address.

        State code - two character standard [ISO 3166-2 state code](https://en.wikipedia.org/wiki/ISO_3166-2)

        :return: The state_code of this Address.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Address.

        State code - two character standard [ISO 3166-2 state code](https://en.wikipedia.org/wiki/ISO_3166-2)

        :param state_code: The state_code of this Address.
        :type state_code: str
        """
        if state_code is not None and not re.search(r'[a-zA-Z0-9]{1,2}', state_code):
            raise ValueError("Invalid value for `state_code`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1,2}/`")

        self._state_code = state_code

    @property
    def state_name(self):
        """Gets the state_name of this Address.

        Full state name

        :return: The state_name of this Address.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this Address.

        Full state name

        :param state_name: The state_name of this Address.
        :type state_name: str
        """

        self._state_name = state_name

    @property
    def text(self):
        """Gets the text of this Address.

        Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.

        :return: The text of this Address.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Address.

        Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.

        :param text: The text of this Address.
        :type text: str
        """

        self._text = text
