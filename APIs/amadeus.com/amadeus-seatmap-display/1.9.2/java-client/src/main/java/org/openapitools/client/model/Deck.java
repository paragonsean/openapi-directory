/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeckConfiguration;
import org.openapitools.client.model.Facility;
import org.openapitools.client.model.Seat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * deck information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deck {
  public static final String SERIALIZED_NAME_DECK_CONFIGURATION = "deckConfiguration";
  @SerializedName(SERIALIZED_NAME_DECK_CONFIGURATION)
  private DeckConfiguration deckConfiguration;

  /**
   * A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.
   */
  @JsonAdapter(DeckTypeEnum.Adapter.class)
  public enum DeckTypeEnum {
    UPPER("UPPER"),
    
    MAIN("MAIN"),
    
    LOWER("LOWER");

    private String value;

    DeckTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeckTypeEnum fromValue(String value) {
      for (DeckTypeEnum b : DeckTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeckTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeckTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeckTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeckTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeckTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECK_TYPE = "deckType";
  @SerializedName(SERIALIZED_NAME_DECK_TYPE)
  private DeckTypeEnum deckType;

  public static final String SERIALIZED_NAME_FACILITIES = "facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private List<Facility> facilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private List<Seat> seats = new ArrayList<>();

  public Deck() {
  }

  public Deck deckConfiguration(DeckConfiguration deckConfiguration) {
    this.deckConfiguration = deckConfiguration;
    return this;
  }

  /**
   * Get deckConfiguration
   * @return deckConfiguration
   */
  @javax.annotation.Nullable
  public DeckConfiguration getDeckConfiguration() {
    return deckConfiguration;
  }

  public void setDeckConfiguration(DeckConfiguration deckConfiguration) {
    this.deckConfiguration = deckConfiguration;
  }


  public Deck deckType(DeckTypeEnum deckType) {
    this.deckType = deckType;
    return this;
  }

  /**
   * A deck is a level on an aircraft. The deck location of the cabin (current possible values are upper or main) The main deck, where passengers are seated on a passenger flight. Upper deck is above the main deck where more passengers are seated.
   * @return deckType
   */
  @javax.annotation.Nullable
  public DeckTypeEnum getDeckType() {
    return deckType;
  }

  public void setDeckType(DeckTypeEnum deckType) {
    this.deckType = deckType;
  }


  public Deck facilities(List<Facility> facilities) {
    this.facilities = facilities;
    return this;
  }

  public Deck addFacilitiesItem(Facility facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

  /**
   * Get facilities
   * @return facilities
   */
  @javax.annotation.Nullable
  public List<Facility> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<Facility> facilities) {
    this.facilities = facilities;
  }


  public Deck seats(List<Seat> seats) {
    this.seats = seats;
    return this;
  }

  public Deck addSeatsItem(Seat seatsItem) {
    if (this.seats == null) {
      this.seats = new ArrayList<>();
    }
    this.seats.add(seatsItem);
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public List<Seat> getSeats() {
    return seats;
  }

  public void setSeats(List<Seat> seats) {
    this.seats = seats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deck deck = (Deck) o;
    return Objects.equals(this.deckConfiguration, deck.deckConfiguration) &&
        Objects.equals(this.deckType, deck.deckType) &&
        Objects.equals(this.facilities, deck.facilities) &&
        Objects.equals(this.seats, deck.seats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deckConfiguration, deckType, facilities, seats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deck {\n");
    sb.append("    deckConfiguration: ").append(toIndentedString(deckConfiguration)).append("\n");
    sb.append("    deckType: ").append(toIndentedString(deckType)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deckConfiguration");
    openapiFields.add("deckType");
    openapiFields.add("facilities");
    openapiFields.add("seats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deck is not found in the empty JSON string", Deck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deckConfiguration`
      if (jsonObj.get("deckConfiguration") != null && !jsonObj.get("deckConfiguration").isJsonNull()) {
        DeckConfiguration.validateJsonElement(jsonObj.get("deckConfiguration"));
      }
      if ((jsonObj.get("deckType") != null && !jsonObj.get("deckType").isJsonNull()) && !jsonObj.get("deckType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deckType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deckType").toString()));
      }
      // validate the optional field `deckType`
      if (jsonObj.get("deckType") != null && !jsonObj.get("deckType").isJsonNull()) {
        DeckTypeEnum.validateJsonElement(jsonObj.get("deckType"));
      }
      if (jsonObj.get("facilities") != null && !jsonObj.get("facilities").isJsonNull()) {
        JsonArray jsonArrayfacilities = jsonObj.getAsJsonArray("facilities");
        if (jsonArrayfacilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facilities` to be an array in the JSON string but got `%s`", jsonObj.get("facilities").toString()));
          }

          // validate the optional field `facilities` (array)
          for (int i = 0; i < jsonArrayfacilities.size(); i++) {
            Facility.validateJsonElement(jsonArrayfacilities.get(i));
          };
        }
      }
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        JsonArray jsonArrayseats = jsonObj.getAsJsonArray("seats");
        if (jsonArrayseats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seats` to be an array in the JSON string but got `%s`", jsonObj.get("seats").toString()));
          }

          // validate the optional field `seats` (array)
          for (int i = 0; i < jsonArrayseats.size(); i++) {
            Seat.validateJsonElement(jsonArrayseats.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deck.class));

       return (TypeAdapter<T>) new TypeAdapter<Deck>() {
           @Override
           public void write(JsonWriter out, Deck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deck
   * @throws IOException if the JSON string is invalid with respect to Deck
   */
  public static Deck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deck.class);
  }

  /**
   * Convert an instance of Deck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

