/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.FlightOffers;
import org.openapitools.client.model.SeatMapReply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisplaySeatMapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisplaySeatMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisplaySeatMapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSeatmapFromFlightOffer
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 2781    | INVALID LENGHT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeatmapFromFlightOfferCall(String xHTTPMethodOverride, FlightOffers body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/shopping/seatmaps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xHTTPMethodOverride != null) {
            localVarHeaderParams.put("X-HTTP-Method-Override", localVarApiClient.parameterToString(xHTTPMethodOverride));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.amadeus+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeatmapFromFlightOfferValidateBeforeCall(String xHTTPMethodOverride, FlightOffers body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xHTTPMethodOverride' is set
        if (xHTTPMethodOverride == null) {
            throw new ApiException("Missing the required parameter 'xHTTPMethodOverride' when calling getSeatmapFromFlightOffer(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getSeatmapFromFlightOffer(Async)");
        }

        return getSeatmapFromFlightOfferCall(xHTTPMethodOverride, body, _callback);

    }

    /**
     * Returns all the seat maps of a given flightOffer.
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param body  (required)
     * @return SeatMapReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 2781    | INVALID LENGHT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public SeatMapReply getSeatmapFromFlightOffer(String xHTTPMethodOverride, FlightOffers body) throws ApiException {
        ApiResponse<SeatMapReply> localVarResp = getSeatmapFromFlightOfferWithHttpInfo(xHTTPMethodOverride, body);
        return localVarResp.getData();
    }

    /**
     * Returns all the seat maps of a given flightOffer.
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param body  (required)
     * @return ApiResponse&lt;SeatMapReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 2781    | INVALID LENGHT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SeatMapReply> getSeatmapFromFlightOfferWithHttpInfo(String xHTTPMethodOverride, FlightOffers body) throws ApiException {
        okhttp3.Call localVarCall = getSeatmapFromFlightOfferValidateBeforeCall(xHTTPMethodOverride, body, null);
        Type localVarReturnType = new TypeToken<SeatMapReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all the seat maps of a given flightOffer. (asynchronously)
     * 
     * @param xHTTPMethodOverride the HTTP method to apply (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 2781    | INVALID LENGHT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeatmapFromFlightOfferAsync(String xHTTPMethodOverride, FlightOffers body, final ApiCallback<SeatMapReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeatmapFromFlightOfferValidateBeforeCall(xHTTPMethodOverride, body, _callback);
        Type localVarReturnType = new TypeToken<SeatMapReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSeatmapFromOrder
     * @param flightOrderId identifier of the order (optional)
     * @param flightOrderId2 DEPRECATED identifier of the order , kept for backward compatibility (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeatmapFromOrderCall(String flightOrderId, String flightOrderId2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shopping/seatmaps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flightOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flightOrderId", flightOrderId));
        }

        if (flightOrderId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flight-orderId", flightOrderId2));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeatmapFromOrderValidateBeforeCall(String flightOrderId, String flightOrderId2, final ApiCallback _callback) throws ApiException {
        return getSeatmapFromOrderCall(flightOrderId, flightOrderId2, _callback);

    }

    /**
     * Returns all the seat maps of a given order.
     * 
     * @param flightOrderId identifier of the order (optional)
     * @param flightOrderId2 DEPRECATED identifier of the order , kept for backward compatibility (optional)
     * @return SeatMapReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public SeatMapReply getSeatmapFromOrder(String flightOrderId, String flightOrderId2) throws ApiException {
        ApiResponse<SeatMapReply> localVarResp = getSeatmapFromOrderWithHttpInfo(flightOrderId, flightOrderId2);
        return localVarResp.getData();
    }

    /**
     * Returns all the seat maps of a given order.
     * 
     * @param flightOrderId identifier of the order (optional)
     * @param flightOrderId2 DEPRECATED identifier of the order , kept for backward compatibility (optional)
     * @return ApiResponse&lt;SeatMapReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SeatMapReply> getSeatmapFromOrderWithHttpInfo(String flightOrderId, String flightOrderId2) throws ApiException {
        okhttp3.Call localVarCall = getSeatmapFromOrderValidateBeforeCall(flightOrderId, flightOrderId2, null);
        Type localVarReturnType = new TypeToken<SeatMapReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all the seat maps of a given order. (asynchronously)
     * 
     * @param flightOrderId identifier of the order (optional)
     * @param flightOrderId2 DEPRECATED identifier of the order , kept for backward compatibility (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title ------- | ------------------------------------- 477     | INVALID FORMAT 572     | INVALID OPTION 4481    | FLIGHT DOES NOT OPERATE ON DATE REQUESTED 8791    | SEAT MAP DISPLAY REQUEST IS OUTSIDE SYSTEM DATE RANGE 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeatmapFromOrderAsync(String flightOrderId, String flightOrderId2, final ApiCallback<SeatMapReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeatmapFromOrderValidateBeforeCall(flightOrderId, flightOrderId2, _callback);
        Type localVarReturnType = new TypeToken<SeatMapReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
