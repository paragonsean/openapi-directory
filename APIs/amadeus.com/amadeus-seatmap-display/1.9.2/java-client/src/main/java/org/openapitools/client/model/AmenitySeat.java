/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmenityMedia;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Characteristics for a group of seat, such as Distance from one seat to the another in front or behind it or width space
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmenitySeat {
  /**
   * Gets or Sets amenityType
   */
  @JsonAdapter(AmenityTypeEnum.Adapter.class)
  public enum AmenityTypeEnum {
    SEAT("SEAT");

    private String value;

    AmenityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmenityTypeEnum fromValue(String value) {
      for (AmenityTypeEnum b : AmenityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmenityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmenityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmenityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmenityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AmenityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AMENITY_TYPE = "amenityType";
  @SerializedName(SERIALIZED_NAME_AMENITY_TYPE)
  private AmenityTypeEnum amenityType;

  public static final String SERIALIZED_NAME_LEG_SPACE = "legSpace";
  @SerializedName(SERIALIZED_NAME_LEG_SPACE)
  private Integer legSpace;

  public static final String SERIALIZED_NAME_MEDIAS = "medias";
  @SerializedName(SERIALIZED_NAME_MEDIAS)
  private List<AmenityMedia> medias = new ArrayList<>();

  /**
   * Gets or Sets spaceUnit
   */
  @JsonAdapter(SpaceUnitEnum.Adapter.class)
  public enum SpaceUnitEnum {
    INCHES("INCHES"),
    
    CENTIMENTERS("CENTIMENTERS");

    private String value;

    SpaceUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpaceUnitEnum fromValue(String value) {
      for (SpaceUnitEnum b : SpaceUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpaceUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpaceUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpaceUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpaceUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpaceUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPACE_UNIT = "spaceUnit";
  @SerializedName(SERIALIZED_NAME_SPACE_UNIT)
  private SpaceUnitEnum spaceUnit;

  /**
   * Flatness of a seat
   */
  @JsonAdapter(TiltEnum.Adapter.class)
  public enum TiltEnum {
    FULL_FLAT("FULL_FLAT"),
    
    ANGLE_FLAT("ANGLE_FLAT"),
    
    NORMAL("NORMAL");

    private String value;

    TiltEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TiltEnum fromValue(String value) {
      for (TiltEnum b : TiltEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TiltEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TiltEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TiltEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TiltEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TiltEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TILT = "tilt";
  @SerializedName(SERIALIZED_NAME_TILT)
  private TiltEnum tilt;

  public AmenitySeat() {
  }

  public AmenitySeat amenityType(AmenityTypeEnum amenityType) {
    this.amenityType = amenityType;
    return this;
  }

  /**
   * Get amenityType
   * @return amenityType
   */
  @javax.annotation.Nullable
  public AmenityTypeEnum getAmenityType() {
    return amenityType;
  }

  public void setAmenityType(AmenityTypeEnum amenityType) {
    this.amenityType = amenityType;
  }


  public AmenitySeat legSpace(Integer legSpace) {
    this.legSpace = legSpace;
    return this;
  }

  /**
   * Space between 2 seats
   * @return legSpace
   */
  @javax.annotation.Nullable
  public Integer getLegSpace() {
    return legSpace;
  }

  public void setLegSpace(Integer legSpace) {
    this.legSpace = legSpace;
  }


  public AmenitySeat medias(List<AmenityMedia> medias) {
    this.medias = medias;
    return this;
  }

  public AmenitySeat addMediasItem(AmenityMedia mediasItem) {
    if (this.medias == null) {
      this.medias = new ArrayList<>();
    }
    this.medias.add(mediasItem);
    return this;
  }

  /**
   * list of media associated to the seat (rich content)
   * @return medias
   */
  @javax.annotation.Nullable
  public List<AmenityMedia> getMedias() {
    return medias;
  }

  public void setMedias(List<AmenityMedia> medias) {
    this.medias = medias;
  }


  public AmenitySeat spaceUnit(SpaceUnitEnum spaceUnit) {
    this.spaceUnit = spaceUnit;
    return this;
  }

  /**
   * Get spaceUnit
   * @return spaceUnit
   */
  @javax.annotation.Nullable
  public SpaceUnitEnum getSpaceUnit() {
    return spaceUnit;
  }

  public void setSpaceUnit(SpaceUnitEnum spaceUnit) {
    this.spaceUnit = spaceUnit;
  }


  public AmenitySeat tilt(TiltEnum tilt) {
    this.tilt = tilt;
    return this;
  }

  /**
   * Flatness of a seat
   * @return tilt
   */
  @javax.annotation.Nullable
  public TiltEnum getTilt() {
    return tilt;
  }

  public void setTilt(TiltEnum tilt) {
    this.tilt = tilt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmenitySeat amenitySeat = (AmenitySeat) o;
    return Objects.equals(this.amenityType, amenitySeat.amenityType) &&
        Objects.equals(this.legSpace, amenitySeat.legSpace) &&
        Objects.equals(this.medias, amenitySeat.medias) &&
        Objects.equals(this.spaceUnit, amenitySeat.spaceUnit) &&
        Objects.equals(this.tilt, amenitySeat.tilt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenityType, legSpace, medias, spaceUnit, tilt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmenitySeat {\n");
    sb.append("    amenityType: ").append(toIndentedString(amenityType)).append("\n");
    sb.append("    legSpace: ").append(toIndentedString(legSpace)).append("\n");
    sb.append("    medias: ").append(toIndentedString(medias)).append("\n");
    sb.append("    spaceUnit: ").append(toIndentedString(spaceUnit)).append("\n");
    sb.append("    tilt: ").append(toIndentedString(tilt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenityType");
    openapiFields.add("legSpace");
    openapiFields.add("medias");
    openapiFields.add("spaceUnit");
    openapiFields.add("tilt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmenitySeat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmenitySeat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmenitySeat is not found in the empty JSON string", AmenitySeat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmenitySeat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmenitySeat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amenityType") != null && !jsonObj.get("amenityType").isJsonNull()) && !jsonObj.get("amenityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amenityType").toString()));
      }
      // validate the optional field `amenityType`
      if (jsonObj.get("amenityType") != null && !jsonObj.get("amenityType").isJsonNull()) {
        AmenityTypeEnum.validateJsonElement(jsonObj.get("amenityType"));
      }
      if (jsonObj.get("medias") != null && !jsonObj.get("medias").isJsonNull()) {
        JsonArray jsonArraymedias = jsonObj.getAsJsonArray("medias");
        if (jsonArraymedias != null) {
          // ensure the json data is an array
          if (!jsonObj.get("medias").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `medias` to be an array in the JSON string but got `%s`", jsonObj.get("medias").toString()));
          }

          // validate the optional field `medias` (array)
          for (int i = 0; i < jsonArraymedias.size(); i++) {
            AmenityMedia.validateJsonElement(jsonArraymedias.get(i));
          };
        }
      }
      if ((jsonObj.get("spaceUnit") != null && !jsonObj.get("spaceUnit").isJsonNull()) && !jsonObj.get("spaceUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceUnit").toString()));
      }
      // validate the optional field `spaceUnit`
      if (jsonObj.get("spaceUnit") != null && !jsonObj.get("spaceUnit").isJsonNull()) {
        SpaceUnitEnum.validateJsonElement(jsonObj.get("spaceUnit"));
      }
      if ((jsonObj.get("tilt") != null && !jsonObj.get("tilt").isJsonNull()) && !jsonObj.get("tilt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tilt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tilt").toString()));
      }
      // validate the optional field `tilt`
      if (jsonObj.get("tilt") != null && !jsonObj.get("tilt").isJsonNull()) {
        TiltEnum.validateJsonElement(jsonObj.get("tilt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmenitySeat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmenitySeat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmenitySeat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmenitySeat.class));

       return (TypeAdapter<T>) new TypeAdapter<AmenitySeat>() {
           @Override
           public void write(JsonWriter out, AmenitySeat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmenitySeat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmenitySeat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmenitySeat
   * @throws IOException if the JSON string is invalid with respect to AmenitySeat
   */
  public static AmenitySeat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmenitySeat.class);
  }

  /**
   * Convert an instance of AmenitySeat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

