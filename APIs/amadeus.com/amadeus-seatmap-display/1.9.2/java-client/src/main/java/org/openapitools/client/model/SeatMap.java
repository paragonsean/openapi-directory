/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AircraftCabinAmenities;
import org.openapitools.client.model.AircraftEquipment;
import org.openapitools.client.model.AvailableSeatsCounter;
import org.openapitools.client.model.Deck;
import org.openapitools.client.model.FlightEndPoint;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.OperatingFlight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * seat map information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeatMap {
  public static final String SERIALIZED_NAME_AIRCRAFT = "aircraft";
  @SerializedName(SERIALIZED_NAME_AIRCRAFT)
  private AircraftEquipment aircraft;

  public static final String SERIALIZED_NAME_AIRCRAFT_CABIN_AMENITIES = "aircraftCabinAmenities";
  @SerializedName(SERIALIZED_NAME_AIRCRAFT_CABIN_AMENITIES)
  private AircraftCabinAmenities aircraftCabinAmenities;

  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  private FlightEndPoint arrival;

  public static final String SERIALIZED_NAME_AVAILABLE_SEATS_COUNTERS = "availableSeatsCounters";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SEATS_COUNTERS)
  private List<AvailableSeatsCounter> availableSeatsCounters = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrierCode";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_DECKS = "decks";
  @SerializedName(SERIALIZED_NAME_DECKS)
  private List<Deck> decks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  private FlightEndPoint departure;

  public static final String SERIALIZED_NAME_FLIGHT_OFFER_ID = "flightOfferId";
  @SerializedName(SERIALIZED_NAME_FLIGHT_OFFER_ID)
  private String flightOfferId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OPERATING = "operating";
  @SerializedName(SERIALIZED_NAME_OPERATING)
  private OperatingFlight operating;

  public static final String SERIALIZED_NAME_SEGMENT_ID = "segmentId";
  @SerializedName(SERIALIZED_NAME_SEGMENT_ID)
  private String segmentId;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SeatMap() {
  }

  public SeatMap(
     String type
  ) {
    this();
    this.type = type;
  }

  public SeatMap aircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
    return this;
  }

  /**
   * Get aircraft
   * @return aircraft
   */
  @javax.annotation.Nullable
  public AircraftEquipment getAircraft() {
    return aircraft;
  }

  public void setAircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
  }


  public SeatMap aircraftCabinAmenities(AircraftCabinAmenities aircraftCabinAmenities) {
    this.aircraftCabinAmenities = aircraftCabinAmenities;
    return this;
  }

  /**
   * Get aircraftCabinAmenities
   * @return aircraftCabinAmenities
   */
  @javax.annotation.Nullable
  public AircraftCabinAmenities getAircraftCabinAmenities() {
    return aircraftCabinAmenities;
  }

  public void setAircraftCabinAmenities(AircraftCabinAmenities aircraftCabinAmenities) {
    this.aircraftCabinAmenities = aircraftCabinAmenities;
  }


  public SeatMap arrival(FlightEndPoint arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * Get arrival
   * @return arrival
   */
  @javax.annotation.Nullable
  public FlightEndPoint getArrival() {
    return arrival;
  }

  public void setArrival(FlightEndPoint arrival) {
    this.arrival = arrival;
  }


  public SeatMap availableSeatsCounters(List<AvailableSeatsCounter> availableSeatsCounters) {
    this.availableSeatsCounters = availableSeatsCounters;
    return this;
  }

  public SeatMap addAvailableSeatsCountersItem(AvailableSeatsCounter availableSeatsCountersItem) {
    if (this.availableSeatsCounters == null) {
      this.availableSeatsCounters = new ArrayList<>();
    }
    this.availableSeatsCounters.add(availableSeatsCountersItem);
    return this;
  }

  /**
   * number of seats available for each passenger
   * @return availableSeatsCounters
   */
  @javax.annotation.Nullable
  public List<AvailableSeatsCounter> getAvailableSeatsCounters() {
    return availableSeatsCounters;
  }

  public void setAvailableSeatsCounters(List<AvailableSeatsCounter> availableSeatsCounters) {
    this.availableSeatsCounters = availableSeatsCounters;
  }


  public SeatMap carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * providing the marketing airline carrier code
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  public SeatMap propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * reservation booking designator (RBD) of the carrier
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public SeatMap decks(List<Deck> decks) {
    this.decks = decks;
    return this;
  }

  public SeatMap addDecksItem(Deck decksItem) {
    if (this.decks == null) {
      this.decks = new ArrayList<>();
    }
    this.decks.add(decksItem);
    return this;
  }

  /**
   * decks information
   * @return decks
   */
  @javax.annotation.Nullable
  public List<Deck> getDecks() {
    return decks;
  }

  public void setDecks(List<Deck> decks) {
    this.decks = decks;
  }


  public SeatMap departure(FlightEndPoint departure) {
    this.departure = departure;
    return this;
  }

  /**
   * Get departure
   * @return departure
   */
  @javax.annotation.Nullable
  public FlightEndPoint getDeparture() {
    return departure;
  }

  public void setDeparture(FlightEndPoint departure) {
    this.departure = departure;
  }


  public SeatMap flightOfferId(String flightOfferId) {
    this.flightOfferId = flightOfferId;
    return this;
  }

  /**
   * Id of the impacted flight offer
   * @return flightOfferId
   */
  @javax.annotation.Nullable
  public String getFlightOfferId() {
    return flightOfferId;
  }

  public void setFlightOfferId(String flightOfferId) {
    this.flightOfferId = flightOfferId;
  }


  public SeatMap id(String id) {
    this.id = id;
    return this;
  }

  /**
   * item identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SeatMap number(String number) {
    this.number = number;
    return this;
  }

  /**
   * the flight number as assigned by the marketing carrier
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public SeatMap operating(OperatingFlight operating) {
    this.operating = operating;
    return this;
  }

  /**
   * Get operating
   * @return operating
   */
  @javax.annotation.Nullable
  public OperatingFlight getOperating() {
    return operating;
  }

  public void setOperating(OperatingFlight operating) {
    this.operating = operating;
  }


  public SeatMap segmentId(String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

  /**
   * Id of the impacted segment
   * @return segmentId
   */
  @javax.annotation.Nullable
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }


  public SeatMap self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }


  /**
   * Ressource name
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeatMap seatMap = (SeatMap) o;
    return Objects.equals(this.aircraft, seatMap.aircraft) &&
        Objects.equals(this.aircraftCabinAmenities, seatMap.aircraftCabinAmenities) &&
        Objects.equals(this.arrival, seatMap.arrival) &&
        Objects.equals(this.availableSeatsCounters, seatMap.availableSeatsCounters) &&
        Objects.equals(this.carrierCode, seatMap.carrierCode) &&
        Objects.equals(this.propertyClass, seatMap.propertyClass) &&
        Objects.equals(this.decks, seatMap.decks) &&
        Objects.equals(this.departure, seatMap.departure) &&
        Objects.equals(this.flightOfferId, seatMap.flightOfferId) &&
        Objects.equals(this.id, seatMap.id) &&
        Objects.equals(this.number, seatMap.number) &&
        Objects.equals(this.operating, seatMap.operating) &&
        Objects.equals(this.segmentId, seatMap.segmentId) &&
        Objects.equals(this.self, seatMap.self) &&
        Objects.equals(this.type, seatMap.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aircraft, aircraftCabinAmenities, arrival, availableSeatsCounters, carrierCode, propertyClass, decks, departure, flightOfferId, id, number, operating, segmentId, self, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeatMap {\n");
    sb.append("    aircraft: ").append(toIndentedString(aircraft)).append("\n");
    sb.append("    aircraftCabinAmenities: ").append(toIndentedString(aircraftCabinAmenities)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    availableSeatsCounters: ").append(toIndentedString(availableSeatsCounters)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    decks: ").append(toIndentedString(decks)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    flightOfferId: ").append(toIndentedString(flightOfferId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    operating: ").append(toIndentedString(operating)).append("\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aircraft");
    openapiFields.add("aircraftCabinAmenities");
    openapiFields.add("arrival");
    openapiFields.add("availableSeatsCounters");
    openapiFields.add("carrierCode");
    openapiFields.add("class");
    openapiFields.add("decks");
    openapiFields.add("departure");
    openapiFields.add("flightOfferId");
    openapiFields.add("id");
    openapiFields.add("number");
    openapiFields.add("operating");
    openapiFields.add("segmentId");
    openapiFields.add("self");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeatMap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeatMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeatMap is not found in the empty JSON string", SeatMap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeatMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeatMap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aircraft`
      if (jsonObj.get("aircraft") != null && !jsonObj.get("aircraft").isJsonNull()) {
        AircraftEquipment.validateJsonElement(jsonObj.get("aircraft"));
      }
      // validate the optional field `aircraftCabinAmenities`
      if (jsonObj.get("aircraftCabinAmenities") != null && !jsonObj.get("aircraftCabinAmenities").isJsonNull()) {
        AircraftCabinAmenities.validateJsonElement(jsonObj.get("aircraftCabinAmenities"));
      }
      // validate the optional field `arrival`
      if (jsonObj.get("arrival") != null && !jsonObj.get("arrival").isJsonNull()) {
        FlightEndPoint.validateJsonElement(jsonObj.get("arrival"));
      }
      if (jsonObj.get("availableSeatsCounters") != null && !jsonObj.get("availableSeatsCounters").isJsonNull()) {
        JsonArray jsonArrayavailableSeatsCounters = jsonObj.getAsJsonArray("availableSeatsCounters");
        if (jsonArrayavailableSeatsCounters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableSeatsCounters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableSeatsCounters` to be an array in the JSON string but got `%s`", jsonObj.get("availableSeatsCounters").toString()));
          }

          // validate the optional field `availableSeatsCounters` (array)
          for (int i = 0; i < jsonArrayavailableSeatsCounters.size(); i++) {
            AvailableSeatsCounter.validateJsonElement(jsonArrayavailableSeatsCounters.get(i));
          };
        }
      }
      if ((jsonObj.get("carrierCode") != null && !jsonObj.get("carrierCode").isJsonNull()) && !jsonObj.get("carrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierCode").toString()));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if (jsonObj.get("decks") != null && !jsonObj.get("decks").isJsonNull()) {
        JsonArray jsonArraydecks = jsonObj.getAsJsonArray("decks");
        if (jsonArraydecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("decks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `decks` to be an array in the JSON string but got `%s`", jsonObj.get("decks").toString()));
          }

          // validate the optional field `decks` (array)
          for (int i = 0; i < jsonArraydecks.size(); i++) {
            Deck.validateJsonElement(jsonArraydecks.get(i));
          };
        }
      }
      // validate the optional field `departure`
      if (jsonObj.get("departure") != null && !jsonObj.get("departure").isJsonNull()) {
        FlightEndPoint.validateJsonElement(jsonObj.get("departure"));
      }
      if ((jsonObj.get("flightOfferId") != null && !jsonObj.get("flightOfferId").isJsonNull()) && !jsonObj.get("flightOfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightOfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flightOfferId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `operating`
      if (jsonObj.get("operating") != null && !jsonObj.get("operating").isJsonNull()) {
        OperatingFlight.validateJsonElement(jsonObj.get("operating"));
      }
      if ((jsonObj.get("segmentId") != null && !jsonObj.get("segmentId").isJsonNull()) && !jsonObj.get("segmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentId").toString()));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeatMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeatMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeatMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeatMap.class));

       return (TypeAdapter<T>) new TypeAdapter<SeatMap>() {
           @Override
           public void write(JsonWriter out, SeatMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeatMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeatMap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeatMap
   * @throws IOException if the JSON string is invalid with respect to SeatMap
   */
  public static SeatMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeatMap.class);
  }

  /**
   * Convert an instance of SeatMap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

