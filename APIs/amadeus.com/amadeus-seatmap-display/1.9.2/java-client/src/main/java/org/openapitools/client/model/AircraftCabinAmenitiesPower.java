/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AircraftCabinAmenitiesPower
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AircraftCabinAmenitiesPower {
  public static final String SERIALIZED_NAME_IS_CHARGEABLE = "isChargeable";
  @SerializedName(SERIALIZED_NAME_IS_CHARGEABLE)
  private Boolean isChargeable;

  /**
   * Gets or Sets powerType
   */
  @JsonAdapter(PowerTypeEnum.Adapter.class)
  public enum PowerTypeEnum {
    PLUG("PLUG"),
    
    USB_PORT("USB_PORT"),
    
    ADAPTOR("ADAPTOR"),
    
    PLUG_OR_USB_PORT("PLUG_OR_USB_PORT");

    private String value;

    PowerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerTypeEnum fromValue(String value) {
      for (PowerTypeEnum b : PowerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PowerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PowerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PowerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POWER_TYPE = "powerType";
  @SerializedName(SERIALIZED_NAME_POWER_TYPE)
  private PowerTypeEnum powerType;

  /**
   * Gets or Sets usbType
   */
  @JsonAdapter(UsbTypeEnum.Adapter.class)
  public enum UsbTypeEnum {
    A("USB_A"),
    
    C("USB_C"),
    
    A_AND_USB_C("USB_A_AND_USB_C");

    private String value;

    UsbTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsbTypeEnum fromValue(String value) {
      for (UsbTypeEnum b : UsbTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsbTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsbTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsbTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsbTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsbTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USB_TYPE = "usbType";
  @SerializedName(SERIALIZED_NAME_USB_TYPE)
  private UsbTypeEnum usbType;

  public AircraftCabinAmenitiesPower() {
  }

  public AircraftCabinAmenitiesPower isChargeable(Boolean isChargeable) {
    this.isChargeable = isChargeable;
    return this;
  }

  /**
   * Specify if the traveler will need to pay extra in-flight to get the amenity
   * @return isChargeable
   */
  @javax.annotation.Nullable
  public Boolean getIsChargeable() {
    return isChargeable;
  }

  public void setIsChargeable(Boolean isChargeable) {
    this.isChargeable = isChargeable;
  }


  public AircraftCabinAmenitiesPower powerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
    return this;
  }

  /**
   * Get powerType
   * @return powerType
   */
  @javax.annotation.Nullable
  public PowerTypeEnum getPowerType() {
    return powerType;
  }

  public void setPowerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
  }


  public AircraftCabinAmenitiesPower usbType(UsbTypeEnum usbType) {
    this.usbType = usbType;
    return this;
  }

  /**
   * Get usbType
   * @return usbType
   */
  @javax.annotation.Nullable
  public UsbTypeEnum getUsbType() {
    return usbType;
  }

  public void setUsbType(UsbTypeEnum usbType) {
    this.usbType = usbType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AircraftCabinAmenitiesPower aircraftCabinAmenitiesPower = (AircraftCabinAmenitiesPower) o;
    return Objects.equals(this.isChargeable, aircraftCabinAmenitiesPower.isChargeable) &&
        Objects.equals(this.powerType, aircraftCabinAmenitiesPower.powerType) &&
        Objects.equals(this.usbType, aircraftCabinAmenitiesPower.usbType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isChargeable, powerType, usbType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AircraftCabinAmenitiesPower {\n");
    sb.append("    isChargeable: ").append(toIndentedString(isChargeable)).append("\n");
    sb.append("    powerType: ").append(toIndentedString(powerType)).append("\n");
    sb.append("    usbType: ").append(toIndentedString(usbType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isChargeable");
    openapiFields.add("powerType");
    openapiFields.add("usbType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AircraftCabinAmenitiesPower
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AircraftCabinAmenitiesPower.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AircraftCabinAmenitiesPower is not found in the empty JSON string", AircraftCabinAmenitiesPower.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AircraftCabinAmenitiesPower.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AircraftCabinAmenitiesPower` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("powerType") != null && !jsonObj.get("powerType").isJsonNull()) && !jsonObj.get("powerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerType").toString()));
      }
      // validate the optional field `powerType`
      if (jsonObj.get("powerType") != null && !jsonObj.get("powerType").isJsonNull()) {
        PowerTypeEnum.validateJsonElement(jsonObj.get("powerType"));
      }
      if ((jsonObj.get("usbType") != null && !jsonObj.get("usbType").isJsonNull()) && !jsonObj.get("usbType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usbType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usbType").toString()));
      }
      // validate the optional field `usbType`
      if (jsonObj.get("usbType") != null && !jsonObj.get("usbType").isJsonNull()) {
        UsbTypeEnum.validateJsonElement(jsonObj.get("usbType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AircraftCabinAmenitiesPower.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AircraftCabinAmenitiesPower' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AircraftCabinAmenitiesPower> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AircraftCabinAmenitiesPower.class));

       return (TypeAdapter<T>) new TypeAdapter<AircraftCabinAmenitiesPower>() {
           @Override
           public void write(JsonWriter out, AircraftCabinAmenitiesPower value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AircraftCabinAmenitiesPower read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AircraftCabinAmenitiesPower given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AircraftCabinAmenitiesPower
   * @throws IOException if the JSON string is invalid with respect to AircraftCabinAmenitiesPower
   */
  public static AircraftCabinAmenitiesPower fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AircraftCabinAmenitiesPower.class);
  }

  /**
   * Convert an instance of AircraftCabinAmenitiesPower to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

