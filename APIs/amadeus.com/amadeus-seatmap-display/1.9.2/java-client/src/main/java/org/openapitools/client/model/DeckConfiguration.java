/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * deck dimensions are used as a reference to display the entire aircraft or to the section associated to the requested cabin (or set of cabins)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeckConfiguration {
  public static final String SERIALIZED_NAME_END_SEAT_ROW = "endSeatRow";
  @SerializedName(SERIALIZED_NAME_END_SEAT_ROW)
  private Integer endSeatRow;

  public static final String SERIALIZED_NAME_END_WINGS_ROW = "endWingsRow";
  @SerializedName(SERIALIZED_NAME_END_WINGS_ROW)
  private Integer endWingsRow;

  public static final String SERIALIZED_NAME_END_WINGS_X = "endWingsX";
  @SerializedName(SERIALIZED_NAME_END_WINGS_X)
  private Integer endWingsX;

  public static final String SERIALIZED_NAME_EXIT_ROWS_X = "exitRowsX";
  @SerializedName(SERIALIZED_NAME_EXIT_ROWS_X)
  private List<Integer> exitRowsX = new ArrayList<>();

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_START_SEAT_ROW = "startSeatRow";
  @SerializedName(SERIALIZED_NAME_START_SEAT_ROW)
  private Integer startSeatRow;

  public static final String SERIALIZED_NAME_START_WINGS_ROW = "startWingsRow";
  @SerializedName(SERIALIZED_NAME_START_WINGS_ROW)
  private Integer startWingsRow;

  public static final String SERIALIZED_NAME_START_WINGS_X = "startWingsX";
  @SerializedName(SERIALIZED_NAME_START_WINGS_X)
  private Integer startWingsX;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public DeckConfiguration() {
  }

  public DeckConfiguration endSeatRow(Integer endSeatRow) {
    this.endSeatRow = endSeatRow;
    return this;
  }

  /**
   * seat row where the deck is ending
   * @return endSeatRow
   */
  @javax.annotation.Nullable
  public Integer getEndSeatRow() {
    return endSeatRow;
  }

  public void setEndSeatRow(Integer endSeatRow) {
    this.endSeatRow = endSeatRow;
  }


  public DeckConfiguration endWingsRow(Integer endWingsRow) {
    this.endWingsRow = endWingsRow;
    return this;
  }

  /**
   * seat row where the wing is ending
   * @return endWingsRow
   */
  @javax.annotation.Nullable
  public Integer getEndWingsRow() {
    return endWingsRow;
  }

  public void setEndWingsRow(Integer endWingsRow) {
    this.endWingsRow = endWingsRow;
  }


  public DeckConfiguration endWingsX(Integer endWingsX) {
    this.endWingsX = endWingsX;
    return this;
  }

  /**
   * End x coordinate of the wings.The wings display ends relatively to the length.
   * @return endWingsX
   */
  @javax.annotation.Nullable
  public Integer getEndWingsX() {
    return endWingsX;
  }

  public void setEndWingsX(Integer endWingsX) {
    this.endWingsX = endWingsX;
  }


  public DeckConfiguration exitRowsX(List<Integer> exitRowsX) {
    this.exitRowsX = exitRowsX;
    return this;
  }

  public DeckConfiguration addExitRowsXItem(Integer exitRowsXItem) {
    if (this.exitRowsX == null) {
      this.exitRowsX = new ArrayList<>();
    }
    this.exitRowsX.add(exitRowsXItem);
    return this;
  }

  /**
   * X coordinate of the exit rows.The exit rows are displayed relatively to the length.
   * @return exitRowsX
   */
  @javax.annotation.Nullable
  public List<Integer> getExitRowsX() {
    return exitRowsX;
  }

  public void setExitRowsX(List<Integer> exitRowsX) {
    this.exitRowsX = exitRowsX;
  }


  public DeckConfiguration length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Length (x-axis) of the deck.
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public DeckConfiguration startSeatRow(Integer startSeatRow) {
    this.startSeatRow = startSeatRow;
    return this;
  }

  /**
   * seat row where the deck is starting
   * @return startSeatRow
   */
  @javax.annotation.Nullable
  public Integer getStartSeatRow() {
    return startSeatRow;
  }

  public void setStartSeatRow(Integer startSeatRow) {
    this.startSeatRow = startSeatRow;
  }


  public DeckConfiguration startWingsRow(Integer startWingsRow) {
    this.startWingsRow = startWingsRow;
    return this;
  }

  /**
   * seat row where the wing is starting
   * @return startWingsRow
   */
  @javax.annotation.Nullable
  public Integer getStartWingsRow() {
    return startWingsRow;
  }

  public void setStartWingsRow(Integer startWingsRow) {
    this.startWingsRow = startWingsRow;
  }


  public DeckConfiguration startWingsX(Integer startWingsX) {
    this.startWingsX = startWingsX;
    return this;
  }

  /**
   * Start x coordinate of the wings.The wings display starts relatively to the length.
   * @return startWingsX
   */
  @javax.annotation.Nullable
  public Integer getStartWingsX() {
    return startWingsX;
  }

  public void setStartWingsX(Integer startWingsX) {
    this.startWingsX = startWingsX;
  }


  public DeckConfiguration width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Width (y-axis) of the deck.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeckConfiguration deckConfiguration = (DeckConfiguration) o;
    return Objects.equals(this.endSeatRow, deckConfiguration.endSeatRow) &&
        Objects.equals(this.endWingsRow, deckConfiguration.endWingsRow) &&
        Objects.equals(this.endWingsX, deckConfiguration.endWingsX) &&
        Objects.equals(this.exitRowsX, deckConfiguration.exitRowsX) &&
        Objects.equals(this.length, deckConfiguration.length) &&
        Objects.equals(this.startSeatRow, deckConfiguration.startSeatRow) &&
        Objects.equals(this.startWingsRow, deckConfiguration.startWingsRow) &&
        Objects.equals(this.startWingsX, deckConfiguration.startWingsX) &&
        Objects.equals(this.width, deckConfiguration.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endSeatRow, endWingsRow, endWingsX, exitRowsX, length, startSeatRow, startWingsRow, startWingsX, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeckConfiguration {\n");
    sb.append("    endSeatRow: ").append(toIndentedString(endSeatRow)).append("\n");
    sb.append("    endWingsRow: ").append(toIndentedString(endWingsRow)).append("\n");
    sb.append("    endWingsX: ").append(toIndentedString(endWingsX)).append("\n");
    sb.append("    exitRowsX: ").append(toIndentedString(exitRowsX)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    startSeatRow: ").append(toIndentedString(startSeatRow)).append("\n");
    sb.append("    startWingsRow: ").append(toIndentedString(startWingsRow)).append("\n");
    sb.append("    startWingsX: ").append(toIndentedString(startWingsX)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endSeatRow");
    openapiFields.add("endWingsRow");
    openapiFields.add("endWingsX");
    openapiFields.add("exitRowsX");
    openapiFields.add("length");
    openapiFields.add("startSeatRow");
    openapiFields.add("startWingsRow");
    openapiFields.add("startWingsX");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeckConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeckConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeckConfiguration is not found in the empty JSON string", DeckConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeckConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeckConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("exitRowsX") != null && !jsonObj.get("exitRowsX").isJsonNull() && !jsonObj.get("exitRowsX").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exitRowsX` to be an array in the JSON string but got `%s`", jsonObj.get("exitRowsX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeckConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeckConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeckConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeckConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DeckConfiguration>() {
           @Override
           public void write(JsonWriter out, DeckConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeckConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeckConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeckConfiguration
   * @throws IOException if the JSON string is invalid with respect to DeckConfiguration
   */
  public static DeckConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeckConfiguration.class);
  }

  /**
   * Convert an instance of DeckConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

