/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Coordinates;
import org.openapitools.client.model.SeatmapTravelerPricing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Seat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Seat {
  public static final String SERIALIZED_NAME_CABIN = "cabin";
  @SerializedName(SERIALIZED_NAME_CABIN)
  private String cabin;

  public static final String SERIALIZED_NAME_CHARACTERISTICS_CODES = "characteristicsCodes";
  @SerializedName(SERIALIZED_NAME_CHARACTERISTICS_CODES)
  private List<String> characteristicsCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private Coordinates coordinates;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_TRAVELER_PRICING = "travelerPricing";
  @SerializedName(SERIALIZED_NAME_TRAVELER_PRICING)
  private List<SeatmapTravelerPricing> travelerPricing = new ArrayList<>();

  public Seat() {
  }

  public Seat cabin(String cabin) {
    this.cabin = cabin;
    return this;
  }

  /**
   * Cabin of the seat.
   * @return cabin
   */
  @javax.annotation.Nullable
  public String getCabin() {
    return cabin;
  }

  public void setCabin(String cabin) {
    this.cabin = cabin;
  }


  public Seat characteristicsCodes(List<String> characteristicsCodes) {
    this.characteristicsCodes = characteristicsCodes;
    return this;
  }

  public Seat addCharacteristicsCodesItem(String characteristicsCodesItem) {
    if (this.characteristicsCodes == null) {
      this.characteristicsCodes = new ArrayList<>();
    }
    this.characteristicsCodes.add(characteristicsCodesItem);
    return this;
  }

  /**
   * List of seat characteristics (the characteristic&#39;s names can be retrieved in the seat characteristic dictionary) Possible values are part of:    IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825    Amadeus Code: defined as extension, example MV&#x3D;row with movie screen    Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT&#x3D;premium seat
   * @return characteristicsCodes
   */
  @javax.annotation.Nullable
  public List<String> getCharacteristicsCodes() {
    return characteristicsCodes;
  }

  public void setCharacteristicsCodes(List<String> characteristicsCodes) {
    this.characteristicsCodes = characteristicsCodes;
  }


  public Seat coordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public Coordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
  }


  public Seat number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Concatenation of the row id and the column id, for example 12B
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public Seat travelerPricing(List<SeatmapTravelerPricing> travelerPricing) {
    this.travelerPricing = travelerPricing;
    return this;
  }

  public Seat addTravelerPricingItem(SeatmapTravelerPricing travelerPricingItem) {
    if (this.travelerPricing == null) {
      this.travelerPricing = new ArrayList<>();
    }
    this.travelerPricing.add(travelerPricingItem);
    return this;
  }

  /**
   * Traveler&#39;s information and price
   * @return travelerPricing
   */
  @javax.annotation.Nullable
  public List<SeatmapTravelerPricing> getTravelerPricing() {
    return travelerPricing;
  }

  public void setTravelerPricing(List<SeatmapTravelerPricing> travelerPricing) {
    this.travelerPricing = travelerPricing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Seat seat = (Seat) o;
    return Objects.equals(this.cabin, seat.cabin) &&
        Objects.equals(this.characteristicsCodes, seat.characteristicsCodes) &&
        Objects.equals(this.coordinates, seat.coordinates) &&
        Objects.equals(this.number, seat.number) &&
        Objects.equals(this.travelerPricing, seat.travelerPricing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cabin, characteristicsCodes, coordinates, number, travelerPricing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Seat {\n");
    sb.append("    cabin: ").append(toIndentedString(cabin)).append("\n");
    sb.append("    characteristicsCodes: ").append(toIndentedString(characteristicsCodes)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    travelerPricing: ").append(toIndentedString(travelerPricing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cabin");
    openapiFields.add("characteristicsCodes");
    openapiFields.add("coordinates");
    openapiFields.add("number");
    openapiFields.add("travelerPricing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Seat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Seat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Seat is not found in the empty JSON string", Seat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Seat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Seat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cabin") != null && !jsonObj.get("cabin").isJsonNull()) && !jsonObj.get("cabin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cabin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cabin").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("characteristicsCodes") != null && !jsonObj.get("characteristicsCodes").isJsonNull() && !jsonObj.get("characteristicsCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `characteristicsCodes` to be an array in the JSON string but got `%s`", jsonObj.get("characteristicsCodes").toString()));
      }
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        Coordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (jsonObj.get("travelerPricing") != null && !jsonObj.get("travelerPricing").isJsonNull()) {
        JsonArray jsonArraytravelerPricing = jsonObj.getAsJsonArray("travelerPricing");
        if (jsonArraytravelerPricing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("travelerPricing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `travelerPricing` to be an array in the JSON string but got `%s`", jsonObj.get("travelerPricing").toString()));
          }

          // validate the optional field `travelerPricing` (array)
          for (int i = 0; i < jsonArraytravelerPricing.size(); i++) {
            SeatmapTravelerPricing.validateJsonElement(jsonArraytravelerPricing.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Seat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Seat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Seat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Seat.class));

       return (TypeAdapter<T>) new TypeAdapter<Seat>() {
           @Override
           public void write(JsonWriter out, Seat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Seat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Seat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Seat
   * @throws IOException if the JSON string is invalid with respect to Seat
   */
  public static Seat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Seat.class);
  }

  /**
   * Convert an instance of Seat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

