/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.LocationValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dictionaries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dictionaries {
  public static final String SERIALIZED_NAME_FACILITIES = "facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private Map<String, String> facilities = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Map<String, LocationValue> locations = new HashMap<>();

  public static final String SERIALIZED_NAME_SEAT_CHARACTERISTICS = "seatCharacteristics";
  @SerializedName(SERIALIZED_NAME_SEAT_CHARACTERISTICS)
  private Map<String, String> seatCharacteristics = new HashMap<>();

  public Dictionaries() {
  }

  public Dictionaries facilities(Map<String, String> facilities) {
    this.facilities = facilities;
    return this;
  }

  public Dictionaries putFacilitiesItem(String key, String facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new HashMap<>();
    }
    this.facilities.put(key, facilitiesItem);
    return this;
  }

  /**
   * on board facilities map. E.g: bulkhead, closet, exit door, galley, lavatory
   * @return facilities
   */
  @javax.annotation.Nullable
  public Map<String, String> getFacilities() {
    return facilities;
  }

  public void setFacilities(Map<String, String> facilities) {
    this.facilities = facilities;
  }


  public Dictionaries locations(Map<String, LocationValue> locations) {
    this.locations = locations;
    return this;
  }

  public Dictionaries putLocationsItem(String key, LocationValue locationsItem) {
    if (this.locations == null) {
      this.locations = new HashMap<>();
    }
    this.locations.put(key, locationsItem);
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nullable
  public Map<String, LocationValue> getLocations() {
    return locations;
  }

  public void setLocations(Map<String, LocationValue> locations) {
    this.locations = locations;
  }


  public Dictionaries seatCharacteristics(Map<String, String> seatCharacteristics) {
    this.seatCharacteristics = seatCharacteristics;
    return this;
  }

  public Dictionaries putSeatCharacteristicsItem(String key, String seatCharacteristicsItem) {
    if (this.seatCharacteristics == null) {
      this.seatCharacteristics = new HashMap<>();
    }
    this.seatCharacteristics.put(key, seatCharacteristicsItem);
    return this;
  }

  /**
   * seat characteristics dictionary allows mapping a service characteristic to its name. Possible values are part of:   IATA code: Most of the codes are defined by IATA Standard/IATA Code list 9825, Example: CH &#x3D; Chargeable Seat, W &#x3D; Window Seat, A &#x3D; Aisle              Seat, Q &#x3D; Seat in a quiet zone, E &#x3D; Exit Row Seat   Amadeus Code: defined as extension, example MV&#x3D;row with movie screen   Seat map display Code: API specific codes, example 1A_AQC_PREMIUM_SEAT&#x3D;premium seat
   * @return seatCharacteristics
   */
  @javax.annotation.Nullable
  public Map<String, String> getSeatCharacteristics() {
    return seatCharacteristics;
  }

  public void setSeatCharacteristics(Map<String, String> seatCharacteristics) {
    this.seatCharacteristics = seatCharacteristics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dictionaries dictionaries = (Dictionaries) o;
    return Objects.equals(this.facilities, dictionaries.facilities) &&
        Objects.equals(this.locations, dictionaries.locations) &&
        Objects.equals(this.seatCharacteristics, dictionaries.seatCharacteristics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facilities, locations, seatCharacteristics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dictionaries {\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    seatCharacteristics: ").append(toIndentedString(seatCharacteristics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facilities");
    openapiFields.add("locations");
    openapiFields.add("seatCharacteristics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dictionaries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dictionaries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dictionaries is not found in the empty JSON string", Dictionaries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dictionaries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dictionaries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dictionaries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dictionaries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dictionaries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dictionaries.class));

       return (TypeAdapter<T>) new TypeAdapter<Dictionaries>() {
           @Override
           public void write(JsonWriter out, Dictionaries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dictionaries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dictionaries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dictionaries
   * @throws IOException if the JSON string is invalid with respect to Dictionaries
   */
  public static Dictionaries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dictionaries.class);
  }

  /**
   * Convert an instance of Dictionaries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

