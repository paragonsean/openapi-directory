/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AircraftCabinAmenitiesBeverage;
import org.openapitools.client.model.AircraftCabinAmenitiesEntertainment;
import org.openapitools.client.model.AircraftCabinAmenitiesFood;
import org.openapitools.client.model.AircraftCabinAmenitiesPower;
import org.openapitools.client.model.AircraftCabinAmenitiesWifi;
import org.openapitools.client.model.AmenitySeat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Type of available amenities for a given flight
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:06.704916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AircraftCabinAmenities {
  public static final String SERIALIZED_NAME_BEVERAGE = "beverage";
  @SerializedName(SERIALIZED_NAME_BEVERAGE)
  private AircraftCabinAmenitiesBeverage beverage;

  public static final String SERIALIZED_NAME_ENTERTAINMENT = "entertainment";
  @SerializedName(SERIALIZED_NAME_ENTERTAINMENT)
  private List<AircraftCabinAmenitiesEntertainment> entertainment = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOOD = "food";
  @SerializedName(SERIALIZED_NAME_FOOD)
  private AircraftCabinAmenitiesFood food;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private AircraftCabinAmenitiesPower power;

  public static final String SERIALIZED_NAME_SEAT = "seat";
  @SerializedName(SERIALIZED_NAME_SEAT)
  private AmenitySeat seat;

  public static final String SERIALIZED_NAME_WIFI = "wifi";
  @SerializedName(SERIALIZED_NAME_WIFI)
  private AircraftCabinAmenitiesWifi wifi;

  public AircraftCabinAmenities() {
  }

  public AircraftCabinAmenities beverage(AircraftCabinAmenitiesBeverage beverage) {
    this.beverage = beverage;
    return this;
  }

  /**
   * Get beverage
   * @return beverage
   */
  @javax.annotation.Nullable
  public AircraftCabinAmenitiesBeverage getBeverage() {
    return beverage;
  }

  public void setBeverage(AircraftCabinAmenitiesBeverage beverage) {
    this.beverage = beverage;
  }


  public AircraftCabinAmenities entertainment(List<AircraftCabinAmenitiesEntertainment> entertainment) {
    this.entertainment = entertainment;
    return this;
  }

  public AircraftCabinAmenities addEntertainmentItem(AircraftCabinAmenitiesEntertainment entertainmentItem) {
    if (this.entertainment == null) {
      this.entertainment = new ArrayList<>();
    }
    this.entertainment.add(entertainmentItem);
    return this;
  }

  /**
   * Get entertainment
   * @return entertainment
   */
  @javax.annotation.Nullable
  public List<AircraftCabinAmenitiesEntertainment> getEntertainment() {
    return entertainment;
  }

  public void setEntertainment(List<AircraftCabinAmenitiesEntertainment> entertainment) {
    this.entertainment = entertainment;
  }


  public AircraftCabinAmenities food(AircraftCabinAmenitiesFood food) {
    this.food = food;
    return this;
  }

  /**
   * Get food
   * @return food
   */
  @javax.annotation.Nullable
  public AircraftCabinAmenitiesFood getFood() {
    return food;
  }

  public void setFood(AircraftCabinAmenitiesFood food) {
    this.food = food;
  }


  public AircraftCabinAmenities power(AircraftCabinAmenitiesPower power) {
    this.power = power;
    return this;
  }

  /**
   * Get power
   * @return power
   */
  @javax.annotation.Nullable
  public AircraftCabinAmenitiesPower getPower() {
    return power;
  }

  public void setPower(AircraftCabinAmenitiesPower power) {
    this.power = power;
  }


  public AircraftCabinAmenities seat(AmenitySeat seat) {
    this.seat = seat;
    return this;
  }

  /**
   * Get seat
   * @return seat
   */
  @javax.annotation.Nullable
  public AmenitySeat getSeat() {
    return seat;
  }

  public void setSeat(AmenitySeat seat) {
    this.seat = seat;
  }


  public AircraftCabinAmenities wifi(AircraftCabinAmenitiesWifi wifi) {
    this.wifi = wifi;
    return this;
  }

  /**
   * Get wifi
   * @return wifi
   */
  @javax.annotation.Nullable
  public AircraftCabinAmenitiesWifi getWifi() {
    return wifi;
  }

  public void setWifi(AircraftCabinAmenitiesWifi wifi) {
    this.wifi = wifi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AircraftCabinAmenities aircraftCabinAmenities = (AircraftCabinAmenities) o;
    return Objects.equals(this.beverage, aircraftCabinAmenities.beverage) &&
        Objects.equals(this.entertainment, aircraftCabinAmenities.entertainment) &&
        Objects.equals(this.food, aircraftCabinAmenities.food) &&
        Objects.equals(this.power, aircraftCabinAmenities.power) &&
        Objects.equals(this.seat, aircraftCabinAmenities.seat) &&
        Objects.equals(this.wifi, aircraftCabinAmenities.wifi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beverage, entertainment, food, power, seat, wifi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AircraftCabinAmenities {\n");
    sb.append("    beverage: ").append(toIndentedString(beverage)).append("\n");
    sb.append("    entertainment: ").append(toIndentedString(entertainment)).append("\n");
    sb.append("    food: ").append(toIndentedString(food)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    seat: ").append(toIndentedString(seat)).append("\n");
    sb.append("    wifi: ").append(toIndentedString(wifi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beverage");
    openapiFields.add("entertainment");
    openapiFields.add("food");
    openapiFields.add("power");
    openapiFields.add("seat");
    openapiFields.add("wifi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AircraftCabinAmenities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AircraftCabinAmenities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AircraftCabinAmenities is not found in the empty JSON string", AircraftCabinAmenities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AircraftCabinAmenities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AircraftCabinAmenities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `beverage`
      if (jsonObj.get("beverage") != null && !jsonObj.get("beverage").isJsonNull()) {
        AircraftCabinAmenitiesBeverage.validateJsonElement(jsonObj.get("beverage"));
      }
      if (jsonObj.get("entertainment") != null && !jsonObj.get("entertainment").isJsonNull()) {
        JsonArray jsonArrayentertainment = jsonObj.getAsJsonArray("entertainment");
        if (jsonArrayentertainment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entertainment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entertainment` to be an array in the JSON string but got `%s`", jsonObj.get("entertainment").toString()));
          }

          // validate the optional field `entertainment` (array)
          for (int i = 0; i < jsonArrayentertainment.size(); i++) {
            AircraftCabinAmenitiesEntertainment.validateJsonElement(jsonArrayentertainment.get(i));
          };
        }
      }
      // validate the optional field `food`
      if (jsonObj.get("food") != null && !jsonObj.get("food").isJsonNull()) {
        AircraftCabinAmenitiesFood.validateJsonElement(jsonObj.get("food"));
      }
      // validate the optional field `power`
      if (jsonObj.get("power") != null && !jsonObj.get("power").isJsonNull()) {
        AircraftCabinAmenitiesPower.validateJsonElement(jsonObj.get("power"));
      }
      // validate the optional field `seat`
      if (jsonObj.get("seat") != null && !jsonObj.get("seat").isJsonNull()) {
        AmenitySeat.validateJsonElement(jsonObj.get("seat"));
      }
      // validate the optional field `wifi`
      if (jsonObj.get("wifi") != null && !jsonObj.get("wifi").isJsonNull()) {
        AircraftCabinAmenitiesWifi.validateJsonElement(jsonObj.get("wifi"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AircraftCabinAmenities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AircraftCabinAmenities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AircraftCabinAmenities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AircraftCabinAmenities.class));

       return (TypeAdapter<T>) new TypeAdapter<AircraftCabinAmenities>() {
           @Override
           public void write(JsonWriter out, AircraftCabinAmenities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AircraftCabinAmenities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AircraftCabinAmenities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AircraftCabinAmenities
   * @throws IOException if the JSON string is invalid with respect to AircraftCabinAmenities
   */
  public static AircraftCabinAmenities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AircraftCabinAmenities.class);
  }

  /**
   * Convert an instance of AircraftCabinAmenities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

