/*
 * Seatmap Display
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.FlightOffers;
import org.openapitools.client.model.SeatMapReply;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisplaySeatMapsApi
 */
@Disabled
public class DisplaySeatMapsApiTest {

    private final DisplaySeatMapsApi api = new DisplaySeatMapsApi();

    /**
     * Returns all the seat maps of a given flightOffer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSeatmapFromFlightOfferTest() throws ApiException {
        String xHTTPMethodOverride = null;
        FlightOffers body = null;
        SeatMapReply response = api.getSeatmapFromFlightOffer(xHTTPMethodOverride, body);
        // TODO: test validations
    }

    /**
     * Returns all the seat maps of a given order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSeatmapFromOrderTest() throws ApiException {
        String flightOrderId = null;
        String flightOrderId2 = null;
        SeatMapReply response = api.getSeatmapFromOrder(flightOrderId, flightOrderId2);
        // TODO: test validations
    }

}
