/*
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dictionary containing scores for all the available categories.  If a property does not have any category this object will not be present in the response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:38.818955-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelSentimentSentiments {
  public static final String SERIALIZED_NAME_CATERING = "catering";
  @SerializedName(SERIALIZED_NAME_CATERING)
  private Integer catering;

  public static final String SERIALIZED_NAME_FACILITIES = "facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private Integer facilities;

  public static final String SERIALIZED_NAME_INTERNET = "internet";
  @SerializedName(SERIALIZED_NAME_INTERNET)
  private Integer internet;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Integer location;

  public static final String SERIALIZED_NAME_POINTS_OF_INTEREST = "pointsOfInterest";
  @SerializedName(SERIALIZED_NAME_POINTS_OF_INTEREST)
  private Integer pointsOfInterest;

  public static final String SERIALIZED_NAME_ROOM_COMFORTS = "roomComforts";
  @SerializedName(SERIALIZED_NAME_ROOM_COMFORTS)
  private Integer roomComforts;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private Integer service;

  public static final String SERIALIZED_NAME_SLEEP_QUALITY = "sleepQuality";
  @SerializedName(SERIALIZED_NAME_SLEEP_QUALITY)
  private Integer sleepQuality;

  public static final String SERIALIZED_NAME_STAFF = "staff";
  @SerializedName(SERIALIZED_NAME_STAFF)
  private Integer staff;

  public static final String SERIALIZED_NAME_SWIMMING_POOL = "swimmingPool";
  @SerializedName(SERIALIZED_NAME_SWIMMING_POOL)
  private Integer swimmingPool;

  public static final String SERIALIZED_NAME_VALUE_FOR_MONEY = "valueForMoney";
  @SerializedName(SERIALIZED_NAME_VALUE_FOR_MONEY)
  private Integer valueForMoney;

  public HotelSentimentSentiments() {
  }

  public HotelSentimentSentiments catering(Integer catering) {
    this.catering = catering;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return catering
   */
  @javax.annotation.Nullable
  public Integer getCatering() {
    return catering;
  }

  public void setCatering(Integer catering) {
    this.catering = catering;
  }


  public HotelSentimentSentiments facilities(Integer facilities) {
    this.facilities = facilities;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return facilities
   */
  @javax.annotation.Nullable
  public Integer getFacilities() {
    return facilities;
  }

  public void setFacilities(Integer facilities) {
    this.facilities = facilities;
  }


  public HotelSentimentSentiments internet(Integer internet) {
    this.internet = internet;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return internet
   */
  @javax.annotation.Nullable
  public Integer getInternet() {
    return internet;
  }

  public void setInternet(Integer internet) {
    this.internet = internet;
  }


  public HotelSentimentSentiments location(Integer location) {
    this.location = location;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return location
   */
  @javax.annotation.Nullable
  public Integer getLocation() {
    return location;
  }

  public void setLocation(Integer location) {
    this.location = location;
  }


  public HotelSentimentSentiments pointsOfInterest(Integer pointsOfInterest) {
    this.pointsOfInterest = pointsOfInterest;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return pointsOfInterest
   */
  @javax.annotation.Nullable
  public Integer getPointsOfInterest() {
    return pointsOfInterest;
  }

  public void setPointsOfInterest(Integer pointsOfInterest) {
    this.pointsOfInterest = pointsOfInterest;
  }


  public HotelSentimentSentiments roomComforts(Integer roomComforts) {
    this.roomComforts = roomComforts;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return roomComforts
   */
  @javax.annotation.Nullable
  public Integer getRoomComforts() {
    return roomComforts;
  }

  public void setRoomComforts(Integer roomComforts) {
    this.roomComforts = roomComforts;
  }


  public HotelSentimentSentiments service(Integer service) {
    this.service = service;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return service
   */
  @javax.annotation.Nullable
  public Integer getService() {
    return service;
  }

  public void setService(Integer service) {
    this.service = service;
  }


  public HotelSentimentSentiments sleepQuality(Integer sleepQuality) {
    this.sleepQuality = sleepQuality;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return sleepQuality
   */
  @javax.annotation.Nullable
  public Integer getSleepQuality() {
    return sleepQuality;
  }

  public void setSleepQuality(Integer sleepQuality) {
    this.sleepQuality = sleepQuality;
  }


  public HotelSentimentSentiments staff(Integer staff) {
    this.staff = staff;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return staff
   */
  @javax.annotation.Nullable
  public Integer getStaff() {
    return staff;
  }

  public void setStaff(Integer staff) {
    this.staff = staff;
  }


  public HotelSentimentSentiments swimmingPool(Integer swimmingPool) {
    this.swimmingPool = swimmingPool;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return swimmingPool
   */
  @javax.annotation.Nullable
  public Integer getSwimmingPool() {
    return swimmingPool;
  }

  public void setSwimmingPool(Integer swimmingPool) {
    this.swimmingPool = swimmingPool;
  }


  public HotelSentimentSentiments valueForMoney(Integer valueForMoney) {
    this.valueForMoney = valueForMoney;
    return this;
  }

  /**
   * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
   * @return valueForMoney
   */
  @javax.annotation.Nullable
  public Integer getValueForMoney() {
    return valueForMoney;
  }

  public void setValueForMoney(Integer valueForMoney) {
    this.valueForMoney = valueForMoney;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelSentimentSentiments hotelSentimentSentiments = (HotelSentimentSentiments) o;
    return Objects.equals(this.catering, hotelSentimentSentiments.catering) &&
        Objects.equals(this.facilities, hotelSentimentSentiments.facilities) &&
        Objects.equals(this.internet, hotelSentimentSentiments.internet) &&
        Objects.equals(this.location, hotelSentimentSentiments.location) &&
        Objects.equals(this.pointsOfInterest, hotelSentimentSentiments.pointsOfInterest) &&
        Objects.equals(this.roomComforts, hotelSentimentSentiments.roomComforts) &&
        Objects.equals(this.service, hotelSentimentSentiments.service) &&
        Objects.equals(this.sleepQuality, hotelSentimentSentiments.sleepQuality) &&
        Objects.equals(this.staff, hotelSentimentSentiments.staff) &&
        Objects.equals(this.swimmingPool, hotelSentimentSentiments.swimmingPool) &&
        Objects.equals(this.valueForMoney, hotelSentimentSentiments.valueForMoney);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catering, facilities, internet, location, pointsOfInterest, roomComforts, service, sleepQuality, staff, swimmingPool, valueForMoney);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelSentimentSentiments {\n");
    sb.append("    catering: ").append(toIndentedString(catering)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    internet: ").append(toIndentedString(internet)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    pointsOfInterest: ").append(toIndentedString(pointsOfInterest)).append("\n");
    sb.append("    roomComforts: ").append(toIndentedString(roomComforts)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    sleepQuality: ").append(toIndentedString(sleepQuality)).append("\n");
    sb.append("    staff: ").append(toIndentedString(staff)).append("\n");
    sb.append("    swimmingPool: ").append(toIndentedString(swimmingPool)).append("\n");
    sb.append("    valueForMoney: ").append(toIndentedString(valueForMoney)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catering");
    openapiFields.add("facilities");
    openapiFields.add("internet");
    openapiFields.add("location");
    openapiFields.add("pointsOfInterest");
    openapiFields.add("roomComforts");
    openapiFields.add("service");
    openapiFields.add("sleepQuality");
    openapiFields.add("staff");
    openapiFields.add("swimmingPool");
    openapiFields.add("valueForMoney");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelSentimentSentiments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelSentimentSentiments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelSentimentSentiments is not found in the empty JSON string", HotelSentimentSentiments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelSentimentSentiments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelSentimentSentiments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelSentimentSentiments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelSentimentSentiments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelSentimentSentiments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelSentimentSentiments.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelSentimentSentiments>() {
           @Override
           public void write(JsonWriter out, HotelSentimentSentiments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelSentimentSentiments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelSentimentSentiments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelSentimentSentiments
   * @throws IOException if the JSON string is invalid with respect to HotelSentimentSentiments
   */
  public static HotelSentimentSentiments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelSentimentSentiments.class);
  }

  /**
   * Convert an instance of HotelSentimentSentiments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

