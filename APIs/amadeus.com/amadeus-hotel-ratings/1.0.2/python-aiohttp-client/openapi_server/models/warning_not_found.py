# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_source import ErrorSource
from openapi_server import util


class WarningNotFound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, detail: str=None, documentation: str=None, source: ErrorSource=None, title: str=None):
        """WarningNotFound - a model defined in OpenAPI

        :param code: The code of this WarningNotFound.
        :param detail: The detail of this WarningNotFound.
        :param documentation: The documentation of this WarningNotFound.
        :param source: The source of this WarningNotFound.
        :param title: The title of this WarningNotFound.
        """
        self.openapi_types = {
            'code': int,
            'detail': str,
            'documentation': str,
            'source': ErrorSource,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'documentation': 'documentation',
            'source': 'source',
            'title': 'title'
        }

        self._code = code
        self._detail = detail
        self._documentation = documentation
        self._source = source
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarningNotFound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarningNotFound of this WarningNotFound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this WarningNotFound.

        A machine-readable error code from the Canned Messages table, that will enable the API Consumers code to handle this type of error

        :return: The code of this WarningNotFound.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WarningNotFound.

        A machine-readable error code from the Canned Messages table, that will enable the API Consumers code to handle this type of error

        :param code: The code of this WarningNotFound.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this WarningNotFound.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :return: The detail of this WarningNotFound.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this WarningNotFound.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :param detail: The detail of this WarningNotFound.
        :type detail: str
        """

        self._detail = detail

    @property
    def documentation(self):
        """Gets the documentation of this WarningNotFound.

        A link to a web page or file with further documentation to help the API consumer resolve this error

        :return: The documentation of this WarningNotFound.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this WarningNotFound.

        A link to a web page or file with further documentation to help the API consumer resolve this error

        :param documentation: The documentation of this WarningNotFound.
        :type documentation: str
        """

        self._documentation = documentation

    @property
    def source(self):
        """Gets the source of this WarningNotFound.


        :return: The source of this WarningNotFound.
        :rtype: ErrorSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WarningNotFound.


        :param source: The source of this WarningNotFound.
        :type source: ErrorSource
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this WarningNotFound.

        An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :return: The title of this WarningNotFound.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WarningNotFound.

        An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :param title: The title of this WarningNotFound.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
