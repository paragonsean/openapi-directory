# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hotel_sentiment_sentiments import HotelSentimentSentiments
from openapi_server import util


class HotelSentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hotel_id: str=None, number_of_ratings: int=None, number_of_reviews: int=None, overall_rating: int=None, sentiments: HotelSentimentSentiments=None, type: str=None):
        """HotelSentiment - a model defined in OpenAPI

        :param hotel_id: The hotel_id of this HotelSentiment.
        :param number_of_ratings: The number_of_ratings of this HotelSentiment.
        :param number_of_reviews: The number_of_reviews of this HotelSentiment.
        :param overall_rating: The overall_rating of this HotelSentiment.
        :param sentiments: The sentiments of this HotelSentiment.
        :param type: The type of this HotelSentiment.
        """
        self.openapi_types = {
            'hotel_id': str,
            'number_of_ratings': int,
            'number_of_reviews': int,
            'overall_rating': int,
            'sentiments': HotelSentimentSentiments,
            'type': str
        }

        self.attribute_map = {
            'hotel_id': 'hotelId',
            'number_of_ratings': 'numberOfRatings',
            'number_of_reviews': 'numberOfReviews',
            'overall_rating': 'overallRating',
            'sentiments': 'sentiments',
            'type': 'type'
        }

        self._hotel_id = hotel_id
        self._number_of_ratings = number_of_ratings
        self._number_of_reviews = number_of_reviews
        self._overall_rating = overall_rating
        self._sentiments = sentiments
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelSentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelSentiment of this HotelSentiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hotel_id(self):
        """Gets the hotel_id of this HotelSentiment.

        Amadeus Hotel Ids are found in the Hotel Search response (parameter name is 'hotelId')

        :return: The hotel_id of this HotelSentiment.
        :rtype: str
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this HotelSentiment.

        Amadeus Hotel Ids are found in the Hotel Search response (parameter name is 'hotelId')

        :param hotel_id: The hotel_id of this HotelSentiment.
        :type hotel_id: str
        """
        if hotel_id is None:
            raise ValueError("Invalid value for `hotel_id`, must not be `None`")

        self._hotel_id = hotel_id

    @property
    def number_of_ratings(self):
        """Gets the number_of_ratings of this HotelSentiment.


        :return: The number_of_ratings of this HotelSentiment.
        :rtype: int
        """
        return self._number_of_ratings

    @number_of_ratings.setter
    def number_of_ratings(self, number_of_ratings):
        """Sets the number_of_ratings of this HotelSentiment.


        :param number_of_ratings: The number_of_ratings of this HotelSentiment.
        :type number_of_ratings: int
        """
        if number_of_ratings is None:
            raise ValueError("Invalid value for `number_of_ratings`, must not be `None`")

        self._number_of_ratings = number_of_ratings

    @property
    def number_of_reviews(self):
        """Gets the number_of_reviews of this HotelSentiment.


        :return: The number_of_reviews of this HotelSentiment.
        :rtype: int
        """
        return self._number_of_reviews

    @number_of_reviews.setter
    def number_of_reviews(self, number_of_reviews):
        """Sets the number_of_reviews of this HotelSentiment.


        :param number_of_reviews: The number_of_reviews of this HotelSentiment.
        :type number_of_reviews: int
        """
        if number_of_reviews is None:
            raise ValueError("Invalid value for `number_of_reviews`, must not be `None`")

        self._number_of_reviews = number_of_reviews

    @property
    def overall_rating(self):
        """Gets the overall_rating of this HotelSentiment.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The overall_rating of this HotelSentiment.
        :rtype: int
        """
        return self._overall_rating

    @overall_rating.setter
    def overall_rating(self, overall_rating):
        """Sets the overall_rating of this HotelSentiment.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param overall_rating: The overall_rating of this HotelSentiment.
        :type overall_rating: int
        """
        if overall_rating is None:
            raise ValueError("Invalid value for `overall_rating`, must not be `None`")

        self._overall_rating = overall_rating

    @property
    def sentiments(self):
        """Gets the sentiments of this HotelSentiment.


        :return: The sentiments of this HotelSentiment.
        :rtype: HotelSentimentSentiments
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this HotelSentiment.


        :param sentiments: The sentiments of this HotelSentiment.
        :type sentiments: HotelSentimentSentiments
        """

        self._sentiments = sentiments

    @property
    def type(self):
        """Gets the type of this HotelSentiment.


        :return: The type of this HotelSentiment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HotelSentiment.


        :param type: The type of this HotelSentiment.
        :type type: str
        """

        self._type = type
