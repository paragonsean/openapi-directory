# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HotelSentimentSentiments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catering: int=None, facilities: int=None, internet: int=None, location: int=None, points_of_interest: int=None, room_comforts: int=None, service: int=None, sleep_quality: int=None, staff: int=None, swimming_pool: int=None, value_for_money: int=None):
        """HotelSentimentSentiments - a model defined in OpenAPI

        :param catering: The catering of this HotelSentimentSentiments.
        :param facilities: The facilities of this HotelSentimentSentiments.
        :param internet: The internet of this HotelSentimentSentiments.
        :param location: The location of this HotelSentimentSentiments.
        :param points_of_interest: The points_of_interest of this HotelSentimentSentiments.
        :param room_comforts: The room_comforts of this HotelSentimentSentiments.
        :param service: The service of this HotelSentimentSentiments.
        :param sleep_quality: The sleep_quality of this HotelSentimentSentiments.
        :param staff: The staff of this HotelSentimentSentiments.
        :param swimming_pool: The swimming_pool of this HotelSentimentSentiments.
        :param value_for_money: The value_for_money of this HotelSentimentSentiments.
        """
        self.openapi_types = {
            'catering': int,
            'facilities': int,
            'internet': int,
            'location': int,
            'points_of_interest': int,
            'room_comforts': int,
            'service': int,
            'sleep_quality': int,
            'staff': int,
            'swimming_pool': int,
            'value_for_money': int
        }

        self.attribute_map = {
            'catering': 'catering',
            'facilities': 'facilities',
            'internet': 'internet',
            'location': 'location',
            'points_of_interest': 'pointsOfInterest',
            'room_comforts': 'roomComforts',
            'service': 'service',
            'sleep_quality': 'sleepQuality',
            'staff': 'staff',
            'swimming_pool': 'swimmingPool',
            'value_for_money': 'valueForMoney'
        }

        self._catering = catering
        self._facilities = facilities
        self._internet = internet
        self._location = location
        self._points_of_interest = points_of_interest
        self._room_comforts = room_comforts
        self._service = service
        self._sleep_quality = sleep_quality
        self._staff = staff
        self._swimming_pool = swimming_pool
        self._value_for_money = value_for_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelSentimentSentiments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelSentiment_sentiments of this HotelSentimentSentiments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catering(self):
        """Gets the catering of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The catering of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._catering

    @catering.setter
    def catering(self, catering):
        """Sets the catering of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param catering: The catering of this HotelSentimentSentiments.
        :type catering: int
        """

        self._catering = catering

    @property
    def facilities(self):
        """Gets the facilities of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The facilities of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param facilities: The facilities of this HotelSentimentSentiments.
        :type facilities: int
        """

        self._facilities = facilities

    @property
    def internet(self):
        """Gets the internet of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The internet of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param internet: The internet of this HotelSentimentSentiments.
        :type internet: int
        """

        self._internet = internet

    @property
    def location(self):
        """Gets the location of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The location of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param location: The location of this HotelSentimentSentiments.
        :type location: int
        """

        self._location = location

    @property
    def points_of_interest(self):
        """Gets the points_of_interest of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The points_of_interest of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._points_of_interest

    @points_of_interest.setter
    def points_of_interest(self, points_of_interest):
        """Sets the points_of_interest of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param points_of_interest: The points_of_interest of this HotelSentimentSentiments.
        :type points_of_interest: int
        """

        self._points_of_interest = points_of_interest

    @property
    def room_comforts(self):
        """Gets the room_comforts of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The room_comforts of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._room_comforts

    @room_comforts.setter
    def room_comforts(self, room_comforts):
        """Sets the room_comforts of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param room_comforts: The room_comforts of this HotelSentimentSentiments.
        :type room_comforts: int
        """

        self._room_comforts = room_comforts

    @property
    def service(self):
        """Gets the service of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The service of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param service: The service of this HotelSentimentSentiments.
        :type service: int
        """

        self._service = service

    @property
    def sleep_quality(self):
        """Gets the sleep_quality of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The sleep_quality of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._sleep_quality

    @sleep_quality.setter
    def sleep_quality(self, sleep_quality):
        """Sets the sleep_quality of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param sleep_quality: The sleep_quality of this HotelSentimentSentiments.
        :type sleep_quality: int
        """

        self._sleep_quality = sleep_quality

    @property
    def staff(self):
        """Gets the staff of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The staff of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param staff: The staff of this HotelSentimentSentiments.
        :type staff: int
        """

        self._staff = staff

    @property
    def swimming_pool(self):
        """Gets the swimming_pool of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The swimming_pool of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._swimming_pool

    @swimming_pool.setter
    def swimming_pool(self, swimming_pool):
        """Sets the swimming_pool of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param swimming_pool: The swimming_pool of this HotelSentimentSentiments.
        :type swimming_pool: int
        """

        self._swimming_pool = swimming_pool

    @property
    def value_for_money(self):
        """Gets the value_for_money of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :return: The value_for_money of this HotelSentimentSentiments.
        :rtype: int
        """
        return self._value_for_money

    @value_for_money.setter
    def value_for_money(self, value_for_money):
        """Sets the value_for_money of this HotelSentimentSentiments.

        Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.

        :param value_for_money: The value_for_money of this HotelSentimentSentiments.
        :type value_for_money: int
        """

        self._value_for_money = value_for_money
