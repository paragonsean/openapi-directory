/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CollectionLinks from './model/CollectionLinks';
import CollectionMeta from './model/CollectionMeta';
import Error from './model/Error';
import Error400 from './model/Error400';
import Error401 from './model/Error401';
import Error500 from './model/Error500';
import ErrorSource from './model/ErrorSource';
import HotelSentiment from './model/HotelSentiment';
import HotelSentimentSentiments from './model/HotelSentimentSentiments';
import SuccessSentiments from './model/SuccessSentiments';
import Warning from './model/Warning';
import WarningNotFound from './model/WarningNotFound';
import HotelRatingsApi from './api/HotelRatingsApi';


/**
* Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var HotelRatings = require('index'); // See note below*.
* var xxxSvc = new HotelRatings.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new HotelRatings.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new HotelRatings.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new HotelRatings.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CollectionLinks model constructor.
     * @property {module:model/CollectionLinks}
     */
    CollectionLinks,

    /**
     * The CollectionMeta model constructor.
     * @property {module:model/CollectionMeta}
     */
    CollectionMeta,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Error400 model constructor.
     * @property {module:model/Error400}
     */
    Error400,

    /**
     * The Error401 model constructor.
     * @property {module:model/Error401}
     */
    Error401,

    /**
     * The Error500 model constructor.
     * @property {module:model/Error500}
     */
    Error500,

    /**
     * The ErrorSource model constructor.
     * @property {module:model/ErrorSource}
     */
    ErrorSource,

    /**
     * The HotelSentiment model constructor.
     * @property {module:model/HotelSentiment}
     */
    HotelSentiment,

    /**
     * The HotelSentimentSentiments model constructor.
     * @property {module:model/HotelSentimentSentiments}
     */
    HotelSentimentSentiments,

    /**
     * The SuccessSentiments model constructor.
     * @property {module:model/SuccessSentiments}
     */
    SuccessSentiments,

    /**
     * The Warning model constructor.
     * @property {module:model/Warning}
     */
    Warning,

    /**
     * The WarningNotFound model constructor.
     * @property {module:model/WarningNotFound}
     */
    WarningNotFound,

    /**
    * The HotelRatingsApi service constructor.
    * @property {module:api/HotelRatingsApi}
    */
    HotelRatingsApi
};
