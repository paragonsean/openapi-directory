/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HotelSentimentSentiments from './HotelSentimentSentiments';

/**
 * The HotelSentiment model module.
 * @module model/HotelSentiment
 * @version 1.0.2
 */
class HotelSentiment {
    /**
     * Constructs a new <code>HotelSentiment</code>.
     * @alias module:model/HotelSentiment
     * @param hotelId {String} Amadeus Hotel Ids are found in the Hotel Search response (parameter name is 'hotelId')
     * @param numberOfRatings {Number} 
     * @param numberOfReviews {Number} 
     * @param overallRating {Number} Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
     */
    constructor(hotelId, numberOfRatings, numberOfReviews, overallRating) { 
        
        HotelSentiment.initialize(this, hotelId, numberOfRatings, numberOfReviews, overallRating);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hotelId, numberOfRatings, numberOfReviews, overallRating) { 
        obj['hotelId'] = hotelId;
        obj['numberOfRatings'] = numberOfRatings;
        obj['numberOfReviews'] = numberOfReviews;
        obj['overallRating'] = overallRating;
    }

    /**
     * Constructs a <code>HotelSentiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelSentiment} obj Optional instance to populate.
     * @return {module:model/HotelSentiment} The populated <code>HotelSentiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelSentiment();

            if (data.hasOwnProperty('hotelId')) {
                obj['hotelId'] = ApiClient.convertToType(data['hotelId'], 'String');
            }
            if (data.hasOwnProperty('numberOfRatings')) {
                obj['numberOfRatings'] = ApiClient.convertToType(data['numberOfRatings'], 'Number');
            }
            if (data.hasOwnProperty('numberOfReviews')) {
                obj['numberOfReviews'] = ApiClient.convertToType(data['numberOfReviews'], 'Number');
            }
            if (data.hasOwnProperty('overallRating')) {
                obj['overallRating'] = ApiClient.convertToType(data['overallRating'], 'Number');
            }
            if (data.hasOwnProperty('sentiments')) {
                obj['sentiments'] = HotelSentimentSentiments.constructFromObject(data['sentiments']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelSentiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelSentiment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HotelSentiment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hotelId'] && !(typeof data['hotelId'] === 'string' || data['hotelId'] instanceof String)) {
            throw new Error("Expected the field `hotelId` to be a primitive type in the JSON string but got " + data['hotelId']);
        }
        // validate the optional field `sentiments`
        if (data['sentiments']) { // data not null
          HotelSentimentSentiments.validateJSON(data['sentiments']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

HotelSentiment.RequiredProperties = ["hotelId", "numberOfRatings", "numberOfReviews", "overallRating"];

/**
 * Amadeus Hotel Ids are found in the Hotel Search response (parameter name is 'hotelId')
 * @member {String} hotelId
 */
HotelSentiment.prototype['hotelId'] = undefined;

/**
 * @member {Number} numberOfRatings
 */
HotelSentiment.prototype['numberOfRatings'] = undefined;

/**
 * @member {Number} numberOfReviews
 */
HotelSentiment.prototype['numberOfReviews'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} overallRating
 */
HotelSentiment.prototype['overallRating'] = undefined;

/**
 * @member {module:model/HotelSentimentSentiments} sentiments
 */
HotelSentiment.prototype['sentiments'] = undefined;

/**
 * @member {String} type
 */
HotelSentiment.prototype['type'] = undefined;






export default HotelSentiment;

