/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HotelSentimentSentiments model module.
 * @module model/HotelSentimentSentiments
 * @version 1.0.2
 */
class HotelSentimentSentiments {
    /**
     * Constructs a new <code>HotelSentimentSentiments</code>.
     * Dictionary containing scores for all the available categories.  If a property does not have any category this object will not be present in the response.
     * @alias module:model/HotelSentimentSentiments
     */
    constructor() { 
        
        HotelSentimentSentiments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotelSentimentSentiments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelSentimentSentiments} obj Optional instance to populate.
     * @return {module:model/HotelSentimentSentiments} The populated <code>HotelSentimentSentiments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelSentimentSentiments();

            if (data.hasOwnProperty('catering')) {
                obj['catering'] = ApiClient.convertToType(data['catering'], 'Number');
            }
            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], 'Number');
            }
            if (data.hasOwnProperty('internet')) {
                obj['internet'] = ApiClient.convertToType(data['internet'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'Number');
            }
            if (data.hasOwnProperty('pointsOfInterest')) {
                obj['pointsOfInterest'] = ApiClient.convertToType(data['pointsOfInterest'], 'Number');
            }
            if (data.hasOwnProperty('roomComforts')) {
                obj['roomComforts'] = ApiClient.convertToType(data['roomComforts'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'Number');
            }
            if (data.hasOwnProperty('sleepQuality')) {
                obj['sleepQuality'] = ApiClient.convertToType(data['sleepQuality'], 'Number');
            }
            if (data.hasOwnProperty('staff')) {
                obj['staff'] = ApiClient.convertToType(data['staff'], 'Number');
            }
            if (data.hasOwnProperty('swimmingPool')) {
                obj['swimmingPool'] = ApiClient.convertToType(data['swimmingPool'], 'Number');
            }
            if (data.hasOwnProperty('valueForMoney')) {
                obj['valueForMoney'] = ApiClient.convertToType(data['valueForMoney'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelSentimentSentiments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelSentimentSentiments</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} catering
 */
HotelSentimentSentiments.prototype['catering'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} facilities
 */
HotelSentimentSentiments.prototype['facilities'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} internet
 */
HotelSentimentSentiments.prototype['internet'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} location
 */
HotelSentimentSentiments.prototype['location'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} pointsOfInterest
 */
HotelSentimentSentiments.prototype['pointsOfInterest'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} roomComforts
 */
HotelSentimentSentiments.prototype['roomComforts'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} service
 */
HotelSentimentSentiments.prototype['service'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} sleepQuality
 */
HotelSentimentSentiments.prototype['sleepQuality'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} staff
 */
HotelSentimentSentiments.prototype['staff'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} swimmingPool
 */
HotelSentimentSentiments.prototype['swimmingPool'] = undefined;

/**
 * Integer between 0 and 100. It represents the score for a specific category or the overall rating for a given Hotel.
 * @member {Number} valueForMoney
 */
HotelSentimentSentiments.prototype['valueForMoney'] = undefined;






export default HotelSentimentSentiments;

