/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectionMeta from './CollectionMeta';
import HotelSentiment from './HotelSentiment';
import WarningNotFound from './WarningNotFound';

/**
 * The SuccessSentiments model module.
 * @module model/SuccessSentiments
 * @version 1.0.2
 */
class SuccessSentiments {
    /**
     * Constructs a new <code>SuccessSentiments</code>.
     * @alias module:model/SuccessSentiments
     * @param data {Array.<module:model/HotelSentiment>} 
     */
    constructor(data) { 
        
        SuccessSentiments.initialize(this, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data) { 
        obj['data'] = data;
    }

    /**
     * Constructs a <code>SuccessSentiments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessSentiments} obj Optional instance to populate.
     * @return {module:model/SuccessSentiments} The populated <code>SuccessSentiments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessSentiments();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [HotelSentiment]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = CollectionMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [WarningNotFound]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessSentiments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessSentiments</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessSentiments.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                HotelSentiment.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          CollectionMeta.validateJSON(data['meta']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                WarningNotFound.validateJSON(item);
            };
        }

        return true;
    }


}

SuccessSentiments.RequiredProperties = ["data"];

/**
 * @member {Array.<module:model/HotelSentiment>} data
 */
SuccessSentiments.prototype['data'] = undefined;

/**
 * @member {module:model/CollectionMeta} meta
 */
SuccessSentiments.prototype['meta'] = undefined;

/**
 * @member {Array.<module:model/WarningNotFound>} warnings
 */
SuccessSentiments.prototype['warnings'] = undefined;






export default SuccessSentiments;

