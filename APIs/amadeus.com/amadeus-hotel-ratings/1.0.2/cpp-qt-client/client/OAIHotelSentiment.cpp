/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelSentiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelSentiment::OAIHotelSentiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelSentiment::OAIHotelSentiment() {
    this->initializeModel();
}

OAIHotelSentiment::~OAIHotelSentiment() {}

void OAIHotelSentiment::initializeModel() {

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_number_of_ratings_isSet = false;
    m_number_of_ratings_isValid = false;

    m_number_of_reviews_isSet = false;
    m_number_of_reviews_isValid = false;

    m_overall_rating_isSet = false;
    m_overall_rating_isValid = false;

    m_sentiments_isSet = false;
    m_sentiments_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHotelSentiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelSentiment::fromJsonObject(QJsonObject json) {

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_number_of_ratings_isValid = ::OpenAPI::fromJsonValue(m_number_of_ratings, json[QString("numberOfRatings")]);
    m_number_of_ratings_isSet = !json[QString("numberOfRatings")].isNull() && m_number_of_ratings_isValid;

    m_number_of_reviews_isValid = ::OpenAPI::fromJsonValue(m_number_of_reviews, json[QString("numberOfReviews")]);
    m_number_of_reviews_isSet = !json[QString("numberOfReviews")].isNull() && m_number_of_reviews_isValid;

    m_overall_rating_isValid = ::OpenAPI::fromJsonValue(m_overall_rating, json[QString("overallRating")]);
    m_overall_rating_isSet = !json[QString("overallRating")].isNull() && m_overall_rating_isValid;

    m_sentiments_isValid = ::OpenAPI::fromJsonValue(m_sentiments, json[QString("sentiments")]);
    m_sentiments_isSet = !json[QString("sentiments")].isNull() && m_sentiments_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIHotelSentiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelSentiment::asJsonObject() const {
    QJsonObject obj;
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_number_of_ratings_isSet) {
        obj.insert(QString("numberOfRatings"), ::OpenAPI::toJsonValue(m_number_of_ratings));
    }
    if (m_number_of_reviews_isSet) {
        obj.insert(QString("numberOfReviews"), ::OpenAPI::toJsonValue(m_number_of_reviews));
    }
    if (m_overall_rating_isSet) {
        obj.insert(QString("overallRating"), ::OpenAPI::toJsonValue(m_overall_rating));
    }
    if (m_sentiments.isSet()) {
        obj.insert(QString("sentiments"), ::OpenAPI::toJsonValue(m_sentiments));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIHotelSentiment::getHotelId() const {
    return m_hotel_id;
}
void OAIHotelSentiment::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIHotelSentiment::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIHotelSentiment::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

qint32 OAIHotelSentiment::getNumberOfRatings() const {
    return m_number_of_ratings;
}
void OAIHotelSentiment::setNumberOfRatings(const qint32 &number_of_ratings) {
    m_number_of_ratings = number_of_ratings;
    m_number_of_ratings_isSet = true;
}

bool OAIHotelSentiment::is_number_of_ratings_Set() const{
    return m_number_of_ratings_isSet;
}

bool OAIHotelSentiment::is_number_of_ratings_Valid() const{
    return m_number_of_ratings_isValid;
}

qint32 OAIHotelSentiment::getNumberOfReviews() const {
    return m_number_of_reviews;
}
void OAIHotelSentiment::setNumberOfReviews(const qint32 &number_of_reviews) {
    m_number_of_reviews = number_of_reviews;
    m_number_of_reviews_isSet = true;
}

bool OAIHotelSentiment::is_number_of_reviews_Set() const{
    return m_number_of_reviews_isSet;
}

bool OAIHotelSentiment::is_number_of_reviews_Valid() const{
    return m_number_of_reviews_isValid;
}

qint32 OAIHotelSentiment::getOverallRating() const {
    return m_overall_rating;
}
void OAIHotelSentiment::setOverallRating(const qint32 &overall_rating) {
    m_overall_rating = overall_rating;
    m_overall_rating_isSet = true;
}

bool OAIHotelSentiment::is_overall_rating_Set() const{
    return m_overall_rating_isSet;
}

bool OAIHotelSentiment::is_overall_rating_Valid() const{
    return m_overall_rating_isValid;
}

OAIHotelSentiment_sentiments OAIHotelSentiment::getSentiments() const {
    return m_sentiments;
}
void OAIHotelSentiment::setSentiments(const OAIHotelSentiment_sentiments &sentiments) {
    m_sentiments = sentiments;
    m_sentiments_isSet = true;
}

bool OAIHotelSentiment::is_sentiments_Set() const{
    return m_sentiments_isSet;
}

bool OAIHotelSentiment::is_sentiments_Valid() const{
    return m_sentiments_isValid;
}

QString OAIHotelSentiment::getType() const {
    return m_type;
}
void OAIHotelSentiment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHotelSentiment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHotelSentiment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHotelSentiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_ratings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_reviews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelSentiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hotel_id_isValid && m_number_of_ratings_isValid && m_number_of_reviews_isValid && m_overall_rating_isValid && true;
}

} // namespace OpenAPI
