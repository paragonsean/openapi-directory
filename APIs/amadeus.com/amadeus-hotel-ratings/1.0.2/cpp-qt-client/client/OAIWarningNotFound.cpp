/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarningNotFound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarningNotFound::OAIWarningNotFound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarningNotFound::OAIWarningNotFound() {
    this->initializeModel();
}

OAIWarningNotFound::~OAIWarningNotFound() {}

void OAIWarningNotFound::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIWarningNotFound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarningNotFound::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIWarningNotFound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarningNotFound::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIWarningNotFound::getCode() const {
    return m_code;
}
void OAIWarningNotFound::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWarningNotFound::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWarningNotFound::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIWarningNotFound::getDetail() const {
    return m_detail;
}
void OAIWarningNotFound::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIWarningNotFound::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIWarningNotFound::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIWarningNotFound::getDocumentation() const {
    return m_documentation;
}
void OAIWarningNotFound::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIWarningNotFound::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIWarningNotFound::is_documentation_Valid() const{
    return m_documentation_isValid;
}

OAIErrorSource OAIWarningNotFound::getSource() const {
    return m_source;
}
void OAIWarningNotFound::setSource(const OAIErrorSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWarningNotFound::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWarningNotFound::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIWarningNotFound::getTitle() const {
    return m_title;
}
void OAIWarningNotFound::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWarningNotFound::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWarningNotFound::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIWarningNotFound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarningNotFound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
