/**
 * Hotel Ratings
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, this API in test only offers 24 hotels; 10 in London and 14 in New-York. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelSentiment_sentiments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelSentiment_sentiments::OAIHotelSentiment_sentiments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelSentiment_sentiments::OAIHotelSentiment_sentiments() {
    this->initializeModel();
}

OAIHotelSentiment_sentiments::~OAIHotelSentiment_sentiments() {}

void OAIHotelSentiment_sentiments::initializeModel() {

    m_catering_isSet = false;
    m_catering_isValid = false;

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_internet_isSet = false;
    m_internet_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_points_of_interest_isSet = false;
    m_points_of_interest_isValid = false;

    m_room_comforts_isSet = false;
    m_room_comforts_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_sleep_quality_isSet = false;
    m_sleep_quality_isValid = false;

    m_staff_isSet = false;
    m_staff_isValid = false;

    m_swimming_pool_isSet = false;
    m_swimming_pool_isValid = false;

    m_value_for_money_isSet = false;
    m_value_for_money_isValid = false;
}

void OAIHotelSentiment_sentiments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelSentiment_sentiments::fromJsonObject(QJsonObject json) {

    m_catering_isValid = ::OpenAPI::fromJsonValue(m_catering, json[QString("catering")]);
    m_catering_isSet = !json[QString("catering")].isNull() && m_catering_isValid;

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("facilities")]);
    m_facilities_isSet = !json[QString("facilities")].isNull() && m_facilities_isValid;

    m_internet_isValid = ::OpenAPI::fromJsonValue(m_internet, json[QString("internet")]);
    m_internet_isSet = !json[QString("internet")].isNull() && m_internet_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_points_of_interest_isValid = ::OpenAPI::fromJsonValue(m_points_of_interest, json[QString("pointsOfInterest")]);
    m_points_of_interest_isSet = !json[QString("pointsOfInterest")].isNull() && m_points_of_interest_isValid;

    m_room_comforts_isValid = ::OpenAPI::fromJsonValue(m_room_comforts, json[QString("roomComforts")]);
    m_room_comforts_isSet = !json[QString("roomComforts")].isNull() && m_room_comforts_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_sleep_quality_isValid = ::OpenAPI::fromJsonValue(m_sleep_quality, json[QString("sleepQuality")]);
    m_sleep_quality_isSet = !json[QString("sleepQuality")].isNull() && m_sleep_quality_isValid;

    m_staff_isValid = ::OpenAPI::fromJsonValue(m_staff, json[QString("staff")]);
    m_staff_isSet = !json[QString("staff")].isNull() && m_staff_isValid;

    m_swimming_pool_isValid = ::OpenAPI::fromJsonValue(m_swimming_pool, json[QString("swimmingPool")]);
    m_swimming_pool_isSet = !json[QString("swimmingPool")].isNull() && m_swimming_pool_isValid;

    m_value_for_money_isValid = ::OpenAPI::fromJsonValue(m_value_for_money, json[QString("valueForMoney")]);
    m_value_for_money_isSet = !json[QString("valueForMoney")].isNull() && m_value_for_money_isValid;
}

QString OAIHotelSentiment_sentiments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelSentiment_sentiments::asJsonObject() const {
    QJsonObject obj;
    if (m_catering_isSet) {
        obj.insert(QString("catering"), ::OpenAPI::toJsonValue(m_catering));
    }
    if (m_facilities_isSet) {
        obj.insert(QString("facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_internet_isSet) {
        obj.insert(QString("internet"), ::OpenAPI::toJsonValue(m_internet));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_points_of_interest_isSet) {
        obj.insert(QString("pointsOfInterest"), ::OpenAPI::toJsonValue(m_points_of_interest));
    }
    if (m_room_comforts_isSet) {
        obj.insert(QString("roomComforts"), ::OpenAPI::toJsonValue(m_room_comforts));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_sleep_quality_isSet) {
        obj.insert(QString("sleepQuality"), ::OpenAPI::toJsonValue(m_sleep_quality));
    }
    if (m_staff_isSet) {
        obj.insert(QString("staff"), ::OpenAPI::toJsonValue(m_staff));
    }
    if (m_swimming_pool_isSet) {
        obj.insert(QString("swimmingPool"), ::OpenAPI::toJsonValue(m_swimming_pool));
    }
    if (m_value_for_money_isSet) {
        obj.insert(QString("valueForMoney"), ::OpenAPI::toJsonValue(m_value_for_money));
    }
    return obj;
}

qint32 OAIHotelSentiment_sentiments::getCatering() const {
    return m_catering;
}
void OAIHotelSentiment_sentiments::setCatering(const qint32 &catering) {
    m_catering = catering;
    m_catering_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_catering_Set() const{
    return m_catering_isSet;
}

bool OAIHotelSentiment_sentiments::is_catering_Valid() const{
    return m_catering_isValid;
}

qint32 OAIHotelSentiment_sentiments::getFacilities() const {
    return m_facilities;
}
void OAIHotelSentiment_sentiments::setFacilities(const qint32 &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIHotelSentiment_sentiments::is_facilities_Valid() const{
    return m_facilities_isValid;
}

qint32 OAIHotelSentiment_sentiments::getInternet() const {
    return m_internet;
}
void OAIHotelSentiment_sentiments::setInternet(const qint32 &internet) {
    m_internet = internet;
    m_internet_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_internet_Set() const{
    return m_internet_isSet;
}

bool OAIHotelSentiment_sentiments::is_internet_Valid() const{
    return m_internet_isValid;
}

qint32 OAIHotelSentiment_sentiments::getLocation() const {
    return m_location;
}
void OAIHotelSentiment_sentiments::setLocation(const qint32 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_location_Set() const{
    return m_location_isSet;
}

bool OAIHotelSentiment_sentiments::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIHotelSentiment_sentiments::getPointsOfInterest() const {
    return m_points_of_interest;
}
void OAIHotelSentiment_sentiments::setPointsOfInterest(const qint32 &points_of_interest) {
    m_points_of_interest = points_of_interest;
    m_points_of_interest_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_points_of_interest_Set() const{
    return m_points_of_interest_isSet;
}

bool OAIHotelSentiment_sentiments::is_points_of_interest_Valid() const{
    return m_points_of_interest_isValid;
}

qint32 OAIHotelSentiment_sentiments::getRoomComforts() const {
    return m_room_comforts;
}
void OAIHotelSentiment_sentiments::setRoomComforts(const qint32 &room_comforts) {
    m_room_comforts = room_comforts;
    m_room_comforts_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_room_comforts_Set() const{
    return m_room_comforts_isSet;
}

bool OAIHotelSentiment_sentiments::is_room_comforts_Valid() const{
    return m_room_comforts_isValid;
}

qint32 OAIHotelSentiment_sentiments::getService() const {
    return m_service;
}
void OAIHotelSentiment_sentiments::setService(const qint32 &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_service_Set() const{
    return m_service_isSet;
}

bool OAIHotelSentiment_sentiments::is_service_Valid() const{
    return m_service_isValid;
}

qint32 OAIHotelSentiment_sentiments::getSleepQuality() const {
    return m_sleep_quality;
}
void OAIHotelSentiment_sentiments::setSleepQuality(const qint32 &sleep_quality) {
    m_sleep_quality = sleep_quality;
    m_sleep_quality_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_sleep_quality_Set() const{
    return m_sleep_quality_isSet;
}

bool OAIHotelSentiment_sentiments::is_sleep_quality_Valid() const{
    return m_sleep_quality_isValid;
}

qint32 OAIHotelSentiment_sentiments::getStaff() const {
    return m_staff;
}
void OAIHotelSentiment_sentiments::setStaff(const qint32 &staff) {
    m_staff = staff;
    m_staff_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_staff_Set() const{
    return m_staff_isSet;
}

bool OAIHotelSentiment_sentiments::is_staff_Valid() const{
    return m_staff_isValid;
}

qint32 OAIHotelSentiment_sentiments::getSwimmingPool() const {
    return m_swimming_pool;
}
void OAIHotelSentiment_sentiments::setSwimmingPool(const qint32 &swimming_pool) {
    m_swimming_pool = swimming_pool;
    m_swimming_pool_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_swimming_pool_Set() const{
    return m_swimming_pool_isSet;
}

bool OAIHotelSentiment_sentiments::is_swimming_pool_Valid() const{
    return m_swimming_pool_isValid;
}

qint32 OAIHotelSentiment_sentiments::getValueForMoney() const {
    return m_value_for_money;
}
void OAIHotelSentiment_sentiments::setValueForMoney(const qint32 &value_for_money) {
    m_value_for_money = value_for_money;
    m_value_for_money_isSet = true;
}

bool OAIHotelSentiment_sentiments::is_value_for_money_Set() const{
    return m_value_for_money_isSet;
}

bool OAIHotelSentiment_sentiments::is_value_for_money_Valid() const{
    return m_value_for_money_isValid;
}

bool OAIHotelSentiment_sentiments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_of_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_comforts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleep_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swimming_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_for_money_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelSentiment_sentiments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
