/*
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Gate;
import org.openapitools.client.model.Terminal;
import org.openapitools.client.model.Timing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Departure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:22.700449-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Departure {
  public static final String SERIALIZED_NAME_GATE = "gate";
  @SerializedName(SERIALIZED_NAME_GATE)
  private Gate gate;

  public static final String SERIALIZED_NAME_TERMINAL = "terminal";
  @SerializedName(SERIALIZED_NAME_TERMINAL)
  private Terminal terminal;

  public static final String SERIALIZED_NAME_TIMINGS = "timings";
  @SerializedName(SERIALIZED_NAME_TIMINGS)
  private List<Timing> timings = new ArrayList<>();

  public Departure() {
  }

  public Departure gate(Gate gate) {
    this.gate = gate;
    return this;
  }

  /**
   * Get gate
   * @return gate
   */
  @javax.annotation.Nullable
  public Gate getGate() {
    return gate;
  }

  public void setGate(Gate gate) {
    this.gate = gate;
  }


  public Departure terminal(Terminal terminal) {
    this.terminal = terminal;
    return this;
  }

  /**
   * Get terminal
   * @return terminal
   */
  @javax.annotation.Nullable
  public Terminal getTerminal() {
    return terminal;
  }

  public void setTerminal(Terminal terminal) {
    this.terminal = terminal;
  }


  public Departure timings(List<Timing> timings) {
    this.timings = timings;
    return this;
  }

  public Departure addTimingsItem(Timing timingsItem) {
    if (this.timings == null) {
      this.timings = new ArrayList<>();
    }
    this.timings.add(timingsItem);
    return this;
  }

  /**
   * the list of timings
   * @return timings
   */
  @javax.annotation.Nullable
  public List<Timing> getTimings() {
    return timings;
  }

  public void setTimings(List<Timing> timings) {
    this.timings = timings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Departure departure = (Departure) o;
    return Objects.equals(this.gate, departure.gate) &&
        Objects.equals(this.terminal, departure.terminal) &&
        Objects.equals(this.timings, departure.timings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gate, terminal, timings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Departure {\n");
    sb.append("    gate: ").append(toIndentedString(gate)).append("\n");
    sb.append("    terminal: ").append(toIndentedString(terminal)).append("\n");
    sb.append("    timings: ").append(toIndentedString(timings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gate");
    openapiFields.add("terminal");
    openapiFields.add("timings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Departure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Departure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Departure is not found in the empty JSON string", Departure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Departure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Departure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gate`
      if (jsonObj.get("gate") != null && !jsonObj.get("gate").isJsonNull()) {
        Gate.validateJsonElement(jsonObj.get("gate"));
      }
      // validate the optional field `terminal`
      if (jsonObj.get("terminal") != null && !jsonObj.get("terminal").isJsonNull()) {
        Terminal.validateJsonElement(jsonObj.get("terminal"));
      }
      if (jsonObj.get("timings") != null && !jsonObj.get("timings").isJsonNull()) {
        JsonArray jsonArraytimings = jsonObj.getAsJsonArray("timings");
        if (jsonArraytimings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timings` to be an array in the JSON string but got `%s`", jsonObj.get("timings").toString()));
          }

          // validate the optional field `timings` (array)
          for (int i = 0; i < jsonArraytimings.size(); i++) {
            Timing.validateJsonElement(jsonArraytimings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Departure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Departure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Departure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Departure.class));

       return (TypeAdapter<T>) new TypeAdapter<Departure>() {
           @Override
           public void write(JsonWriter out, Departure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Departure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Departure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Departure
   * @throws IOException if the JSON string is invalid with respect to Departure
   */
  public static Departure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Departure.class);
  }

  /**
   * Convert an instance of Departure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

