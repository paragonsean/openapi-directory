/*
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FlightDesignator;
import org.openapitools.client.model.FlightPoint;
import org.openapitools.client.model.Leg;
import org.openapitools.client.model.Segment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatedFlight
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:22.700449-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatedFlight {
  public static final String SERIALIZED_NAME_FLIGHT_DESIGNATOR = "flightDesignator";
  @SerializedName(SERIALIZED_NAME_FLIGHT_DESIGNATOR)
  private FlightDesignator flightDesignator;

  public static final String SERIALIZED_NAME_FLIGHT_POINTS = "flightPoints";
  @SerializedName(SERIALIZED_NAME_FLIGHT_POINTS)
  private List<FlightPoint> flightPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGS = "legs";
  @SerializedName(SERIALIZED_NAME_LEGS)
  private List<Leg> legs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_DEPARTURE_DATE = "scheduledDepartureDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DEPARTURE_DATE)
  private LocalDate scheduledDepartureDate;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<Segment> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public DatedFlight() {
  }

  public DatedFlight(
     String type
  ) {
    this();
    this.type = type;
  }

  public DatedFlight flightDesignator(FlightDesignator flightDesignator) {
    this.flightDesignator = flightDesignator;
    return this;
  }

  /**
   * Get flightDesignator
   * @return flightDesignator
   */
  @javax.annotation.Nullable
  public FlightDesignator getFlightDesignator() {
    return flightDesignator;
  }

  public void setFlightDesignator(FlightDesignator flightDesignator) {
    this.flightDesignator = flightDesignator;
  }


  public DatedFlight flightPoints(List<FlightPoint> flightPoints) {
    this.flightPoints = flightPoints;
    return this;
  }

  public DatedFlight addFlightPointsItem(FlightPoint flightPointsItem) {
    if (this.flightPoints == null) {
      this.flightPoints = new ArrayList<>();
    }
    this.flightPoints.add(flightPointsItem);
    return this;
  }

  /**
   * the flight points of the flight. At least one departure, one arrival 
   * @return flightPoints
   */
  @javax.annotation.Nullable
  public List<FlightPoint> getFlightPoints() {
    return flightPoints;
  }

  public void setFlightPoints(List<FlightPoint> flightPoints) {
    this.flightPoints = flightPoints;
  }


  public DatedFlight legs(List<Leg> legs) {
    this.legs = legs;
    return this;
  }

  public DatedFlight addLegsItem(Leg legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<>();
    }
    this.legs.add(legsItem);
    return this;
  }

  /**
   * the list of legs of the datedFlight. - definition of leg: operation of the aircraft between a departure station and the next arrival station (between take off and landing) 
   * @return legs
   */
  @javax.annotation.Nullable
  public List<Leg> getLegs() {
    return legs;
  }

  public void setLegs(List<Leg> legs) {
    this.legs = legs;
  }


  public DatedFlight scheduledDepartureDate(LocalDate scheduledDepartureDate) {
    this.scheduledDepartureDate = scheduledDepartureDate;
    return this;
  }

  /**
   * the scheduled departure date
   * @return scheduledDepartureDate
   */
  @javax.annotation.Nullable
  public LocalDate getScheduledDepartureDate() {
    return scheduledDepartureDate;
  }

  public void setScheduledDepartureDate(LocalDate scheduledDepartureDate) {
    this.scheduledDepartureDate = scheduledDepartureDate;
  }


  public DatedFlight segments(List<Segment> segments) {
    this.segments = segments;
    return this;
  }

  public DatedFlight addSegmentsItem(Segment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * the list of segments of the datedFlight - definition of segment: the commercial unit corresponding to the passenger journey traveling between two points with the same flight (same flight designator) 
   * @return segments
   */
  @javax.annotation.Nullable
  public List<Segment> getSegments() {
    return segments;
  }

  public void setSegments(List<Segment> segments) {
    this.segments = segments;
  }


  /**
   * the resource name
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatedFlight datedFlight = (DatedFlight) o;
    return Objects.equals(this.flightDesignator, datedFlight.flightDesignator) &&
        Objects.equals(this.flightPoints, datedFlight.flightPoints) &&
        Objects.equals(this.legs, datedFlight.legs) &&
        Objects.equals(this.scheduledDepartureDate, datedFlight.scheduledDepartureDate) &&
        Objects.equals(this.segments, datedFlight.segments) &&
        Objects.equals(this.type, datedFlight.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flightDesignator, flightPoints, legs, scheduledDepartureDate, segments, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatedFlight {\n");
    sb.append("    flightDesignator: ").append(toIndentedString(flightDesignator)).append("\n");
    sb.append("    flightPoints: ").append(toIndentedString(flightPoints)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    scheduledDepartureDate: ").append(toIndentedString(scheduledDepartureDate)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flightDesignator");
    openapiFields.add("flightPoints");
    openapiFields.add("legs");
    openapiFields.add("scheduledDepartureDate");
    openapiFields.add("segments");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatedFlight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatedFlight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatedFlight is not found in the empty JSON string", DatedFlight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatedFlight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatedFlight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flightDesignator`
      if (jsonObj.get("flightDesignator") != null && !jsonObj.get("flightDesignator").isJsonNull()) {
        FlightDesignator.validateJsonElement(jsonObj.get("flightDesignator"));
      }
      if (jsonObj.get("flightPoints") != null && !jsonObj.get("flightPoints").isJsonNull()) {
        JsonArray jsonArrayflightPoints = jsonObj.getAsJsonArray("flightPoints");
        if (jsonArrayflightPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flightPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flightPoints` to be an array in the JSON string but got `%s`", jsonObj.get("flightPoints").toString()));
          }

          // validate the optional field `flightPoints` (array)
          for (int i = 0; i < jsonArrayflightPoints.size(); i++) {
            FlightPoint.validateJsonElement(jsonArrayflightPoints.get(i));
          };
        }
      }
      if (jsonObj.get("legs") != null && !jsonObj.get("legs").isJsonNull()) {
        JsonArray jsonArraylegs = jsonObj.getAsJsonArray("legs");
        if (jsonArraylegs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legs` to be an array in the JSON string but got `%s`", jsonObj.get("legs").toString()));
          }

          // validate the optional field `legs` (array)
          for (int i = 0; i < jsonArraylegs.size(); i++) {
            Leg.validateJsonElement(jsonArraylegs.get(i));
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            Segment.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatedFlight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatedFlight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatedFlight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatedFlight.class));

       return (TypeAdapter<T>) new TypeAdapter<DatedFlight>() {
           @Override
           public void write(JsonWriter out, DatedFlight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatedFlight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatedFlight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatedFlight
   * @throws IOException if the JSON string is invalid with respect to DatedFlight
   */
  public static DatedFlight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatedFlight.class);
  }

  /**
   * Convert an instance of DatedFlight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

