/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlightDesignator from './FlightDesignator';
import FlightPoint from './FlightPoint';
import Leg from './Leg';
import Segment from './Segment';

/**
 * The DatedFlight model module.
 * @module model/DatedFlight
 * @version 2.0.2
 */
class DatedFlight {
    /**
     * Constructs a new <code>DatedFlight</code>.
     * @alias module:model/DatedFlight
     */
    constructor() { 
        
        DatedFlight.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatedFlight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatedFlight} obj Optional instance to populate.
     * @return {module:model/DatedFlight} The populated <code>DatedFlight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatedFlight();

            if (data.hasOwnProperty('flightDesignator')) {
                obj['flightDesignator'] = FlightDesignator.constructFromObject(data['flightDesignator']);
            }
            if (data.hasOwnProperty('flightPoints')) {
                obj['flightPoints'] = ApiClient.convertToType(data['flightPoints'], [FlightPoint]);
            }
            if (data.hasOwnProperty('legs')) {
                obj['legs'] = ApiClient.convertToType(data['legs'], [Leg]);
            }
            if (data.hasOwnProperty('scheduledDepartureDate')) {
                obj['scheduledDepartureDate'] = ApiClient.convertToType(data['scheduledDepartureDate'], 'Date');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [Segment]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatedFlight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatedFlight</code>.
     */
    static validateJSON(data) {
        // validate the optional field `flightDesignator`
        if (data['flightDesignator']) { // data not null
          FlightDesignator.validateJSON(data['flightDesignator']);
        }
        if (data['flightPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flightPoints'])) {
                throw new Error("Expected the field `flightPoints` to be an array in the JSON data but got " + data['flightPoints']);
            }
            // validate the optional field `flightPoints` (array)
            for (const item of data['flightPoints']) {
                FlightPoint.validateJSON(item);
            };
        }
        if (data['legs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legs'])) {
                throw new Error("Expected the field `legs` to be an array in the JSON data but got " + data['legs']);
            }
            // validate the optional field `legs` (array)
            for (const item of data['legs']) {
                Leg.validateJSON(item);
            };
        }
        if (data['segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segments'])) {
                throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
            }
            // validate the optional field `segments` (array)
            for (const item of data['segments']) {
                Segment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/FlightDesignator} flightDesignator
 */
DatedFlight.prototype['flightDesignator'] = undefined;

/**
 * the flight points of the flight. At least one departure, one arrival 
 * @member {Array.<module:model/FlightPoint>} flightPoints
 */
DatedFlight.prototype['flightPoints'] = undefined;

/**
 * the list of legs of the datedFlight. - definition of leg: operation of the aircraft between a departure station and the next arrival station (between take off and landing) 
 * @member {Array.<module:model/Leg>} legs
 */
DatedFlight.prototype['legs'] = undefined;

/**
 * the scheduled departure date
 * @member {Date} scheduledDepartureDate
 */
DatedFlight.prototype['scheduledDepartureDate'] = undefined;

/**
 * the list of segments of the datedFlight - definition of segment: the commercial unit corresponding to the passenger journey traveling between two points with the same flight (same flight designator) 
 * @member {Array.<module:model/Segment>} segments
 */
DatedFlight.prototype['segments'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
DatedFlight.prototype['type'] = undefined;






export default DatedFlight;

