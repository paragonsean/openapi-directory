/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Arrival from './Arrival';
import Departure from './Departure';

/**
 * The FlightPoint model module.
 * @module model/FlightPoint
 * @version 2.0.2
 */
class FlightPoint {
    /**
     * Constructs a new <code>FlightPoint</code>.
     * @alias module:model/FlightPoint
     */
    constructor() { 
        
        FlightPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FlightPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightPoint} obj Optional instance to populate.
     * @return {module:model/FlightPoint} The populated <code>FlightPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightPoint();

            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = Arrival.constructFromObject(data['arrival']);
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = Departure.constructFromObject(data['departure']);
            }
            if (data.hasOwnProperty('iataCode')) {
                obj['iataCode'] = ApiClient.convertToType(data['iataCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightPoint</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrival`
        if (data['arrival']) { // data not null
          Arrival.validateJSON(data['arrival']);
        }
        // validate the optional field `departure`
        if (data['departure']) { // data not null
          Departure.validateJSON(data['departure']);
        }
        // ensure the json data is a string
        if (data['iataCode'] && !(typeof data['iataCode'] === 'string' || data['iataCode'] instanceof String)) {
            throw new Error("Expected the field `iataCode` to be a primitive type in the JSON string but got " + data['iataCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/Arrival} arrival
 */
FlightPoint.prototype['arrival'] = undefined;

/**
 * @member {module:model/Departure} departure
 */
FlightPoint.prototype['departure'] = undefined;

/**
 * 3-letter IATA code of the airport. e.g. CDG
 * @member {String} iataCode
 */
FlightPoint.prototype['iataCode'] = undefined;






export default FlightPoint;

