/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error401 from '../model/Error401';
import Error500 from '../model/Error500';
import SuccessFlights from '../model/SuccessFlights';

/**
* Flights service.
* @module api/FlightsApi
* @version 2.0.2
*/
export default class FlightsApi {

    /**
    * Constructs a new FlightsApi. 
    * @alias module:api/FlightsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFlightsStatus operation.
     * @callback module:api/FlightsApi~getFlightsStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessFlights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a unique flight by search criteria.
     * @param {String} carrierCode 2 to 3-character IATA carrier code ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)). 
     * @param {String} flightNumber 1 to 4-digit number of the flight. e.g. 4537
     * @param {Date} scheduledDepartureDate scheduled departure date of the flight, local to the departure airport, format YYYY-MM-DD.
     * @param {Object} opts Optional parameters
     * @param {String} [operationalSuffix] 1-letter operational suffix assigned by the carrier to differentiate flight in case of delay changing the departure date e.g. A 
     * @param {module:api/FlightsApi~getFlightsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessFlights}
     */
    getFlightsStatus(carrierCode, flightNumber, scheduledDepartureDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'carrierCode' is set
      if (carrierCode === undefined || carrierCode === null) {
        throw new Error("Missing the required parameter 'carrierCode' when calling getFlightsStatus");
      }
      // verify the required parameter 'flightNumber' is set
      if (flightNumber === undefined || flightNumber === null) {
        throw new Error("Missing the required parameter 'flightNumber' when calling getFlightsStatus");
      }
      // verify the required parameter 'scheduledDepartureDate' is set
      if (scheduledDepartureDate === undefined || scheduledDepartureDate === null) {
        throw new Error("Missing the required parameter 'scheduledDepartureDate' when calling getFlightsStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'carrierCode': carrierCode,
        'flightNumber': flightNumber,
        'scheduledDepartureDate': scheduledDepartureDate,
        'operationalSuffix': opts['operationalSuffix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = SuccessFlights;
      return this.apiClient.callApi(
        '/schedule/flights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
