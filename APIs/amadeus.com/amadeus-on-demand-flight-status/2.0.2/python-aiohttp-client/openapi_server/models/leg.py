# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_equipment import AircraftEquipment
import re
from openapi_server import util


class Leg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aircraft_equipment: AircraftEquipment=None, board_point_iata_code: str=None, off_point_iata_code: str=None, scheduled_leg_duration: str=None):
        """Leg - a model defined in OpenAPI

        :param aircraft_equipment: The aircraft_equipment of this Leg.
        :param board_point_iata_code: The board_point_iata_code of this Leg.
        :param off_point_iata_code: The off_point_iata_code of this Leg.
        :param scheduled_leg_duration: The scheduled_leg_duration of this Leg.
        """
        self.openapi_types = {
            'aircraft_equipment': AircraftEquipment,
            'board_point_iata_code': str,
            'off_point_iata_code': str,
            'scheduled_leg_duration': str
        }

        self.attribute_map = {
            'aircraft_equipment': 'aircraftEquipment',
            'board_point_iata_code': 'boardPointIataCode',
            'off_point_iata_code': 'offPointIataCode',
            'scheduled_leg_duration': 'scheduledLegDuration'
        }

        self._aircraft_equipment = aircraft_equipment
        self._board_point_iata_code = board_point_iata_code
        self._off_point_iata_code = off_point_iata_code
        self._scheduled_leg_duration = scheduled_leg_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Leg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Leg of this Leg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aircraft_equipment(self):
        """Gets the aircraft_equipment of this Leg.


        :return: The aircraft_equipment of this Leg.
        :rtype: AircraftEquipment
        """
        return self._aircraft_equipment

    @aircraft_equipment.setter
    def aircraft_equipment(self, aircraft_equipment):
        """Sets the aircraft_equipment of this Leg.


        :param aircraft_equipment: The aircraft_equipment of this Leg.
        :type aircraft_equipment: AircraftEquipment
        """

        self._aircraft_equipment = aircraft_equipment

    @property
    def board_point_iata_code(self):
        """Gets the board_point_iata_code of this Leg.

        3-letter IATA code of the departure airport. e.g. LHR

        :return: The board_point_iata_code of this Leg.
        :rtype: str
        """
        return self._board_point_iata_code

    @board_point_iata_code.setter
    def board_point_iata_code(self, board_point_iata_code):
        """Sets the board_point_iata_code of this Leg.

        3-letter IATA code of the departure airport. e.g. LHR

        :param board_point_iata_code: The board_point_iata_code of this Leg.
        :type board_point_iata_code: str
        """
        if board_point_iata_code is not None and not re.search(r'[a-zA-Z]{3}', board_point_iata_code):
            raise ValueError("Invalid value for `board_point_iata_code`, must be a follow pattern or equal to `/[a-zA-Z]{3}/`")

        self._board_point_iata_code = board_point_iata_code

    @property
    def off_point_iata_code(self):
        """Gets the off_point_iata_code of this Leg.

        3-letter IATA code of the arrival airport. e.g. BKK

        :return: The off_point_iata_code of this Leg.
        :rtype: str
        """
        return self._off_point_iata_code

    @off_point_iata_code.setter
    def off_point_iata_code(self, off_point_iata_code):
        """Sets the off_point_iata_code of this Leg.

        3-letter IATA code of the arrival airport. e.g. BKK

        :param off_point_iata_code: The off_point_iata_code of this Leg.
        :type off_point_iata_code: str
        """
        if off_point_iata_code is not None and not re.search(r'[a-zA-Z]{3}', off_point_iata_code):
            raise ValueError("Invalid value for `off_point_iata_code`, must be a follow pattern or equal to `/[a-zA-Z]{3}/`")

        self._off_point_iata_code = off_point_iata_code

    @property
    def scheduled_leg_duration(self):
        """Gets the scheduled_leg_duration of this Leg.

        duration of the leg following standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)

        :return: The scheduled_leg_duration of this Leg.
        :rtype: str
        """
        return self._scheduled_leg_duration

    @scheduled_leg_duration.setter
    def scheduled_leg_duration(self, scheduled_leg_duration):
        """Sets the scheduled_leg_duration of this Leg.

        duration of the leg following standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)

        :param scheduled_leg_duration: The scheduled_leg_duration of this Leg.
        :type scheduled_leg_duration: str
        """

        self._scheduled_leg_duration = scheduled_leg_duration
