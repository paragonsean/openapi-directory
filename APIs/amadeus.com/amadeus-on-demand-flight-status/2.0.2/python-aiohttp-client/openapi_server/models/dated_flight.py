# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight_designator import FlightDesignator
from openapi_server.models.flight_point import FlightPoint
from openapi_server.models.leg import Leg
from openapi_server.models.segment import Segment
from openapi_server import util


class DatedFlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flight_designator: FlightDesignator=None, flight_points: List[FlightPoint]=None, legs: List[Leg]=None, scheduled_departure_date: date=None, segments: List[Segment]=None, type: str=None):
        """DatedFlight - a model defined in OpenAPI

        :param flight_designator: The flight_designator of this DatedFlight.
        :param flight_points: The flight_points of this DatedFlight.
        :param legs: The legs of this DatedFlight.
        :param scheduled_departure_date: The scheduled_departure_date of this DatedFlight.
        :param segments: The segments of this DatedFlight.
        :param type: The type of this DatedFlight.
        """
        self.openapi_types = {
            'flight_designator': FlightDesignator,
            'flight_points': List[FlightPoint],
            'legs': List[Leg],
            'scheduled_departure_date': date,
            'segments': List[Segment],
            'type': str
        }

        self.attribute_map = {
            'flight_designator': 'flightDesignator',
            'flight_points': 'flightPoints',
            'legs': 'legs',
            'scheduled_departure_date': 'scheduledDepartureDate',
            'segments': 'segments',
            'type': 'type'
        }

        self._flight_designator = flight_designator
        self._flight_points = flight_points
        self._legs = legs
        self._scheduled_departure_date = scheduled_departure_date
        self._segments = segments
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatedFlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatedFlight of this DatedFlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flight_designator(self):
        """Gets the flight_designator of this DatedFlight.


        :return: The flight_designator of this DatedFlight.
        :rtype: FlightDesignator
        """
        return self._flight_designator

    @flight_designator.setter
    def flight_designator(self, flight_designator):
        """Sets the flight_designator of this DatedFlight.


        :param flight_designator: The flight_designator of this DatedFlight.
        :type flight_designator: FlightDesignator
        """

        self._flight_designator = flight_designator

    @property
    def flight_points(self):
        """Gets the flight_points of this DatedFlight.

        the flight points of the flight. At least one departure, one arrival 

        :return: The flight_points of this DatedFlight.
        :rtype: List[FlightPoint]
        """
        return self._flight_points

    @flight_points.setter
    def flight_points(self, flight_points):
        """Sets the flight_points of this DatedFlight.

        the flight points of the flight. At least one departure, one arrival 

        :param flight_points: The flight_points of this DatedFlight.
        :type flight_points: List[FlightPoint]
        """

        self._flight_points = flight_points

    @property
    def legs(self):
        """Gets the legs of this DatedFlight.

        the list of legs of the datedFlight. - definition of leg: operation of the aircraft between a departure station and the next arrival station (between take off and landing) 

        :return: The legs of this DatedFlight.
        :rtype: List[Leg]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this DatedFlight.

        the list of legs of the datedFlight. - definition of leg: operation of the aircraft between a departure station and the next arrival station (between take off and landing) 

        :param legs: The legs of this DatedFlight.
        :type legs: List[Leg]
        """

        self._legs = legs

    @property
    def scheduled_departure_date(self):
        """Gets the scheduled_departure_date of this DatedFlight.

        the scheduled departure date

        :return: The scheduled_departure_date of this DatedFlight.
        :rtype: date
        """
        return self._scheduled_departure_date

    @scheduled_departure_date.setter
    def scheduled_departure_date(self, scheduled_departure_date):
        """Sets the scheduled_departure_date of this DatedFlight.

        the scheduled departure date

        :param scheduled_departure_date: The scheduled_departure_date of this DatedFlight.
        :type scheduled_departure_date: date
        """

        self._scheduled_departure_date = scheduled_departure_date

    @property
    def segments(self):
        """Gets the segments of this DatedFlight.

        the list of segments of the datedFlight - definition of segment: the commercial unit corresponding to the passenger journey traveling between two points with the same flight (same flight designator) 

        :return: The segments of this DatedFlight.
        :rtype: List[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this DatedFlight.

        the list of segments of the datedFlight - definition of segment: the commercial unit corresponding to the passenger journey traveling between two points with the same flight (same flight designator) 

        :param segments: The segments of this DatedFlight.
        :type segments: List[Segment]
        """

        self._segments = segments

    @property
    def type(self):
        """Gets the type of this DatedFlight.

        the resource name

        :return: The type of this DatedFlight.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatedFlight.

        the resource name

        :param type: The type of this DatedFlight.
        :type type: str
        """

        self._type = type
