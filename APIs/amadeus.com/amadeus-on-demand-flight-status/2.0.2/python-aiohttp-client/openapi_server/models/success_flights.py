# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_meta import CollectionMeta
from openapi_server.models.dated_flight import DatedFlight
from openapi_server.models.issue import Issue
from openapi_server import util


class SuccessFlights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[DatedFlight]=None, meta: CollectionMeta=None, warnings: List[Issue]=None):
        """SuccessFlights - a model defined in OpenAPI

        :param data: The data of this SuccessFlights.
        :param meta: The meta of this SuccessFlights.
        :param warnings: The warnings of this SuccessFlights.
        """
        self.openapi_types = {
            'data': List[DatedFlight],
            'meta': CollectionMeta,
            'warnings': List[Issue]
        }

        self.attribute_map = {
            'data': 'data',
            'meta': 'meta',
            'warnings': 'warnings'
        }

        self._data = data
        self._meta = meta
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessFlights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Success_Flights_ of this SuccessFlights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this SuccessFlights.


        :return: The data of this SuccessFlights.
        :rtype: List[DatedFlight]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SuccessFlights.


        :param data: The data of this SuccessFlights.
        :type data: List[DatedFlight]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def meta(self):
        """Gets the meta of this SuccessFlights.


        :return: The meta of this SuccessFlights.
        :rtype: CollectionMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SuccessFlights.


        :param meta: The meta of this SuccessFlights.
        :type meta: CollectionMeta
        """

        self._meta = meta

    @property
    def warnings(self):
        """Gets the warnings of this SuccessFlights.


        :return: The warnings of this SuccessFlights.
        :rtype: List[Issue]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SuccessFlights.


        :param warnings: The warnings of this SuccessFlights.
        :type warnings: List[Issue]
        """

        self._warnings = warnings
