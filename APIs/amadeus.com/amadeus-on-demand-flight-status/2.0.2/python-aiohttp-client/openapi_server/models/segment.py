# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partnership import Partnership
import re
from openapi_server import util


class Segment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board_point_iata_code: str=None, off_point_iata_code: str=None, partnership: Partnership=None, scheduled_segment_duration: str=None):
        """Segment - a model defined in OpenAPI

        :param board_point_iata_code: The board_point_iata_code of this Segment.
        :param off_point_iata_code: The off_point_iata_code of this Segment.
        :param partnership: The partnership of this Segment.
        :param scheduled_segment_duration: The scheduled_segment_duration of this Segment.
        """
        self.openapi_types = {
            'board_point_iata_code': str,
            'off_point_iata_code': str,
            'partnership': Partnership,
            'scheduled_segment_duration': str
        }

        self.attribute_map = {
            'board_point_iata_code': 'boardPointIataCode',
            'off_point_iata_code': 'offPointIataCode',
            'partnership': 'partnership',
            'scheduled_segment_duration': 'scheduledSegmentDuration'
        }

        self._board_point_iata_code = board_point_iata_code
        self._off_point_iata_code = off_point_iata_code
        self._partnership = partnership
        self._scheduled_segment_duration = scheduled_segment_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Segment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Segment of this Segment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_point_iata_code(self):
        """Gets the board_point_iata_code of this Segment.

        3-letter IATA code of the departure airport. e.g. CDG

        :return: The board_point_iata_code of this Segment.
        :rtype: str
        """
        return self._board_point_iata_code

    @board_point_iata_code.setter
    def board_point_iata_code(self, board_point_iata_code):
        """Sets the board_point_iata_code of this Segment.

        3-letter IATA code of the departure airport. e.g. CDG

        :param board_point_iata_code: The board_point_iata_code of this Segment.
        :type board_point_iata_code: str
        """
        if board_point_iata_code is not None and not re.search(r'[a-zA-Z]{3}', board_point_iata_code):
            raise ValueError("Invalid value for `board_point_iata_code`, must be a follow pattern or equal to `/[a-zA-Z]{3}/`")

        self._board_point_iata_code = board_point_iata_code

    @property
    def off_point_iata_code(self):
        """Gets the off_point_iata_code of this Segment.

        3-letter IATA code of the arrival airport. e.g. AMS

        :return: The off_point_iata_code of this Segment.
        :rtype: str
        """
        return self._off_point_iata_code

    @off_point_iata_code.setter
    def off_point_iata_code(self, off_point_iata_code):
        """Sets the off_point_iata_code of this Segment.

        3-letter IATA code of the arrival airport. e.g. AMS

        :param off_point_iata_code: The off_point_iata_code of this Segment.
        :type off_point_iata_code: str
        """
        if off_point_iata_code is not None and not re.search(r'[a-zA-Z]{3}', off_point_iata_code):
            raise ValueError("Invalid value for `off_point_iata_code`, must be a follow pattern or equal to `/[a-zA-Z]{3}/`")

        self._off_point_iata_code = off_point_iata_code

    @property
    def partnership(self):
        """Gets the partnership of this Segment.


        :return: The partnership of this Segment.
        :rtype: Partnership
        """
        return self._partnership

    @partnership.setter
    def partnership(self, partnership):
        """Sets the partnership of this Segment.


        :param partnership: The partnership of this Segment.
        :type partnership: Partnership
        """

        self._partnership = partnership

    @property
    def scheduled_segment_duration(self):
        """Gets the scheduled_segment_duration of this Segment.

        duration of the segment following standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)

        :return: The scheduled_segment_duration of this Segment.
        :rtype: str
        """
        return self._scheduled_segment_duration

    @scheduled_segment_duration.setter
    def scheduled_segment_duration(self, scheduled_segment_duration):
        """Sets the scheduled_segment_duration of this Segment.

        duration of the segment following standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)

        :param scheduled_segment_duration: The scheduled_segment_duration of this Segment.
        :type scheduled_segment_duration: str
        """

        self._scheduled_segment_duration = scheduled_segment_duration
