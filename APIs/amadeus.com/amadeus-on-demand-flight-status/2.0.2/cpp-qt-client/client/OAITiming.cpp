/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITiming.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITiming::OAITiming(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITiming::OAITiming() {
    this->initializeModel();
}

OAITiming::~OAITiming() {}

void OAITiming::initializeModel() {

    m_delays_isSet = false;
    m_delays_isValid = false;

    m_qualifier_isSet = false;
    m_qualifier_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITiming::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITiming::fromJsonObject(QJsonObject json) {

    m_delays_isValid = ::OpenAPI::fromJsonValue(m_delays, json[QString("delays")]);
    m_delays_isSet = !json[QString("delays")].isNull() && m_delays_isValid;

    m_qualifier_isValid = ::OpenAPI::fromJsonValue(m_qualifier, json[QString("qualifier")]);
    m_qualifier_isSet = !json[QString("qualifier")].isNull() && m_qualifier_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITiming::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITiming::asJsonObject() const {
    QJsonObject obj;
    if (m_delays.size() > 0) {
        obj.insert(QString("delays"), ::OpenAPI::toJsonValue(m_delays));
    }
    if (m_qualifier_isSet) {
        obj.insert(QString("qualifier"), ::OpenAPI::toJsonValue(m_qualifier));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIDelay> OAITiming::getDelays() const {
    return m_delays;
}
void OAITiming::setDelays(const QList<OAIDelay> &delays) {
    m_delays = delays;
    m_delays_isSet = true;
}

bool OAITiming::is_delays_Set() const{
    return m_delays_isSet;
}

bool OAITiming::is_delays_Valid() const{
    return m_delays_isValid;
}

QString OAITiming::getQualifier() const {
    return m_qualifier;
}
void OAITiming::setQualifier(const QString &qualifier) {
    m_qualifier = qualifier;
    m_qualifier_isSet = true;
}

bool OAITiming::is_qualifier_Set() const{
    return m_qualifier_isSet;
}

bool OAITiming::is_qualifier_Valid() const{
    return m_qualifier_isValid;
}

QDateTime OAITiming::getValue() const {
    return m_value;
}
void OAITiming::setValue(const QDateTime &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITiming::is_value_Set() const{
    return m_value_isSet;
}

bool OAITiming::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITiming::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITiming::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
