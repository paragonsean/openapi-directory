/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegment::OAISegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegment::OAISegment() {
    this->initializeModel();
}

OAISegment::~OAISegment() {}

void OAISegment::initializeModel() {

    m_board_point_iata_code_isSet = false;
    m_board_point_iata_code_isValid = false;

    m_off_point_iata_code_isSet = false;
    m_off_point_iata_code_isValid = false;

    m_partnership_isSet = false;
    m_partnership_isValid = false;

    m_scheduled_segment_duration_isSet = false;
    m_scheduled_segment_duration_isValid = false;
}

void OAISegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegment::fromJsonObject(QJsonObject json) {

    m_board_point_iata_code_isValid = ::OpenAPI::fromJsonValue(m_board_point_iata_code, json[QString("boardPointIataCode")]);
    m_board_point_iata_code_isSet = !json[QString("boardPointIataCode")].isNull() && m_board_point_iata_code_isValid;

    m_off_point_iata_code_isValid = ::OpenAPI::fromJsonValue(m_off_point_iata_code, json[QString("offPointIataCode")]);
    m_off_point_iata_code_isSet = !json[QString("offPointIataCode")].isNull() && m_off_point_iata_code_isValid;

    m_partnership_isValid = ::OpenAPI::fromJsonValue(m_partnership, json[QString("partnership")]);
    m_partnership_isSet = !json[QString("partnership")].isNull() && m_partnership_isValid;

    m_scheduled_segment_duration_isValid = ::OpenAPI::fromJsonValue(m_scheduled_segment_duration, json[QString("scheduledSegmentDuration")]);
    m_scheduled_segment_duration_isSet = !json[QString("scheduledSegmentDuration")].isNull() && m_scheduled_segment_duration_isValid;
}

QString OAISegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegment::asJsonObject() const {
    QJsonObject obj;
    if (m_board_point_iata_code_isSet) {
        obj.insert(QString("boardPointIataCode"), ::OpenAPI::toJsonValue(m_board_point_iata_code));
    }
    if (m_off_point_iata_code_isSet) {
        obj.insert(QString("offPointIataCode"), ::OpenAPI::toJsonValue(m_off_point_iata_code));
    }
    if (m_partnership.isSet()) {
        obj.insert(QString("partnership"), ::OpenAPI::toJsonValue(m_partnership));
    }
    if (m_scheduled_segment_duration_isSet) {
        obj.insert(QString("scheduledSegmentDuration"), ::OpenAPI::toJsonValue(m_scheduled_segment_duration));
    }
    return obj;
}

QString OAISegment::getBoardPointIataCode() const {
    return m_board_point_iata_code;
}
void OAISegment::setBoardPointIataCode(const QString &board_point_iata_code) {
    m_board_point_iata_code = board_point_iata_code;
    m_board_point_iata_code_isSet = true;
}

bool OAISegment::is_board_point_iata_code_Set() const{
    return m_board_point_iata_code_isSet;
}

bool OAISegment::is_board_point_iata_code_Valid() const{
    return m_board_point_iata_code_isValid;
}

QString OAISegment::getOffPointIataCode() const {
    return m_off_point_iata_code;
}
void OAISegment::setOffPointIataCode(const QString &off_point_iata_code) {
    m_off_point_iata_code = off_point_iata_code;
    m_off_point_iata_code_isSet = true;
}

bool OAISegment::is_off_point_iata_code_Set() const{
    return m_off_point_iata_code_isSet;
}

bool OAISegment::is_off_point_iata_code_Valid() const{
    return m_off_point_iata_code_isValid;
}

OAIPartnership OAISegment::getPartnership() const {
    return m_partnership;
}
void OAISegment::setPartnership(const OAIPartnership &partnership) {
    m_partnership = partnership;
    m_partnership_isSet = true;
}

bool OAISegment::is_partnership_Set() const{
    return m_partnership_isSet;
}

bool OAISegment::is_partnership_Valid() const{
    return m_partnership_isValid;
}

QString OAISegment::getScheduledSegmentDuration() const {
    return m_scheduled_segment_duration;
}
void OAISegment::setScheduledSegmentDuration(const QString &scheduled_segment_duration) {
    m_scheduled_segment_duration = scheduled_segment_duration;
    m_scheduled_segment_duration_isSet = true;
}

bool OAISegment::is_scheduled_segment_duration_Set() const{
    return m_scheduled_segment_duration_isSet;
}

bool OAISegment::is_scheduled_segment_duration_Valid() const{
    return m_scheduled_segment_duration_isValid;
}

bool OAISegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_board_point_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_point_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partnership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_segment_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
