/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeg::OAILeg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeg::OAILeg() {
    this->initializeModel();
}

OAILeg::~OAILeg() {}

void OAILeg::initializeModel() {

    m_aircraft_equipment_isSet = false;
    m_aircraft_equipment_isValid = false;

    m_board_point_iata_code_isSet = false;
    m_board_point_iata_code_isValid = false;

    m_off_point_iata_code_isSet = false;
    m_off_point_iata_code_isValid = false;

    m_scheduled_leg_duration_isSet = false;
    m_scheduled_leg_duration_isValid = false;
}

void OAILeg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeg::fromJsonObject(QJsonObject json) {

    m_aircraft_equipment_isValid = ::OpenAPI::fromJsonValue(m_aircraft_equipment, json[QString("aircraftEquipment")]);
    m_aircraft_equipment_isSet = !json[QString("aircraftEquipment")].isNull() && m_aircraft_equipment_isValid;

    m_board_point_iata_code_isValid = ::OpenAPI::fromJsonValue(m_board_point_iata_code, json[QString("boardPointIataCode")]);
    m_board_point_iata_code_isSet = !json[QString("boardPointIataCode")].isNull() && m_board_point_iata_code_isValid;

    m_off_point_iata_code_isValid = ::OpenAPI::fromJsonValue(m_off_point_iata_code, json[QString("offPointIataCode")]);
    m_off_point_iata_code_isSet = !json[QString("offPointIataCode")].isNull() && m_off_point_iata_code_isValid;

    m_scheduled_leg_duration_isValid = ::OpenAPI::fromJsonValue(m_scheduled_leg_duration, json[QString("scheduledLegDuration")]);
    m_scheduled_leg_duration_isSet = !json[QString("scheduledLegDuration")].isNull() && m_scheduled_leg_duration_isValid;
}

QString OAILeg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeg::asJsonObject() const {
    QJsonObject obj;
    if (m_aircraft_equipment.isSet()) {
        obj.insert(QString("aircraftEquipment"), ::OpenAPI::toJsonValue(m_aircraft_equipment));
    }
    if (m_board_point_iata_code_isSet) {
        obj.insert(QString("boardPointIataCode"), ::OpenAPI::toJsonValue(m_board_point_iata_code));
    }
    if (m_off_point_iata_code_isSet) {
        obj.insert(QString("offPointIataCode"), ::OpenAPI::toJsonValue(m_off_point_iata_code));
    }
    if (m_scheduled_leg_duration_isSet) {
        obj.insert(QString("scheduledLegDuration"), ::OpenAPI::toJsonValue(m_scheduled_leg_duration));
    }
    return obj;
}

OAIAircraftEquipment OAILeg::getAircraftEquipment() const {
    return m_aircraft_equipment;
}
void OAILeg::setAircraftEquipment(const OAIAircraftEquipment &aircraft_equipment) {
    m_aircraft_equipment = aircraft_equipment;
    m_aircraft_equipment_isSet = true;
}

bool OAILeg::is_aircraft_equipment_Set() const{
    return m_aircraft_equipment_isSet;
}

bool OAILeg::is_aircraft_equipment_Valid() const{
    return m_aircraft_equipment_isValid;
}

QString OAILeg::getBoardPointIataCode() const {
    return m_board_point_iata_code;
}
void OAILeg::setBoardPointIataCode(const QString &board_point_iata_code) {
    m_board_point_iata_code = board_point_iata_code;
    m_board_point_iata_code_isSet = true;
}

bool OAILeg::is_board_point_iata_code_Set() const{
    return m_board_point_iata_code_isSet;
}

bool OAILeg::is_board_point_iata_code_Valid() const{
    return m_board_point_iata_code_isValid;
}

QString OAILeg::getOffPointIataCode() const {
    return m_off_point_iata_code;
}
void OAILeg::setOffPointIataCode(const QString &off_point_iata_code) {
    m_off_point_iata_code = off_point_iata_code;
    m_off_point_iata_code_isSet = true;
}

bool OAILeg::is_off_point_iata_code_Set() const{
    return m_off_point_iata_code_isSet;
}

bool OAILeg::is_off_point_iata_code_Valid() const{
    return m_off_point_iata_code_isValid;
}

QString OAILeg::getScheduledLegDuration() const {
    return m_scheduled_leg_duration;
}
void OAILeg::setScheduledLegDuration(const QString &scheduled_leg_duration) {
    m_scheduled_leg_duration = scheduled_leg_duration;
    m_scheduled_leg_duration_isSet = true;
}

bool OAILeg::is_scheduled_leg_duration_Set() const{
    return m_scheduled_leg_duration_isSet;
}

bool OAILeg::is_scheduled_leg_duration_Valid() const{
    return m_scheduled_leg_duration_isValid;
}

bool OAILeg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aircraft_equipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_board_point_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_point_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_leg_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
