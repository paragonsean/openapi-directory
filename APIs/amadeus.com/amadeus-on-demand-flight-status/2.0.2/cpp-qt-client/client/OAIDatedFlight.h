/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatedFlight.h
 *
 * 
 */

#ifndef OAIDatedFlight_H
#define OAIDatedFlight_H

#include <QJsonObject>

#include "OAIFlightDesignator.h"
#include "OAIFlightPoint.h"
#include "OAILeg.h"
#include "OAISegment.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFlightDesignator;
class OAIFlightPoint;
class OAILeg;
class OAISegment;

class OAIDatedFlight : public OAIObject {
public:
    OAIDatedFlight();
    OAIDatedFlight(QString json);
    ~OAIDatedFlight() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFlightDesignator getFlightDesignator() const;
    void setFlightDesignator(const OAIFlightDesignator &flight_designator);
    bool is_flight_designator_Set() const;
    bool is_flight_designator_Valid() const;

    QList<OAIFlightPoint> getFlightPoints() const;
    void setFlightPoints(const QList<OAIFlightPoint> &flight_points);
    bool is_flight_points_Set() const;
    bool is_flight_points_Valid() const;

    QList<OAILeg> getLegs() const;
    void setLegs(const QList<OAILeg> &legs);
    bool is_legs_Set() const;
    bool is_legs_Valid() const;

    QDate getScheduledDepartureDate() const;
    void setScheduledDepartureDate(const QDate &scheduled_departure_date);
    bool is_scheduled_departure_date_Set() const;
    bool is_scheduled_departure_date_Valid() const;

    QList<OAISegment> getSegments() const;
    void setSegments(const QList<OAISegment> &segments);
    bool is_segments_Set() const;
    bool is_segments_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFlightDesignator m_flight_designator;
    bool m_flight_designator_isSet;
    bool m_flight_designator_isValid;

    QList<OAIFlightPoint> m_flight_points;
    bool m_flight_points_isSet;
    bool m_flight_points_isValid;

    QList<OAILeg> m_legs;
    bool m_legs_isSet;
    bool m_legs_isValid;

    QDate m_scheduled_departure_date;
    bool m_scheduled_departure_date_isSet;
    bool m_scheduled_departure_date_isValid;

    QList<OAISegment> m_segments;
    bool m_segments_isSet;
    bool m_segments_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatedFlight)

#endif // OAIDatedFlight_H
