/**
 * On-Demand Flight Status
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeparture.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeparture::OAIDeparture(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeparture::OAIDeparture() {
    this->initializeModel();
}

OAIDeparture::~OAIDeparture() {}

void OAIDeparture::initializeModel() {

    m_gate_isSet = false;
    m_gate_isValid = false;

    m_terminal_isSet = false;
    m_terminal_isValid = false;

    m_timings_isSet = false;
    m_timings_isValid = false;
}

void OAIDeparture::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeparture::fromJsonObject(QJsonObject json) {

    m_gate_isValid = ::OpenAPI::fromJsonValue(m_gate, json[QString("gate")]);
    m_gate_isSet = !json[QString("gate")].isNull() && m_gate_isValid;

    m_terminal_isValid = ::OpenAPI::fromJsonValue(m_terminal, json[QString("terminal")]);
    m_terminal_isSet = !json[QString("terminal")].isNull() && m_terminal_isValid;

    m_timings_isValid = ::OpenAPI::fromJsonValue(m_timings, json[QString("timings")]);
    m_timings_isSet = !json[QString("timings")].isNull() && m_timings_isValid;
}

QString OAIDeparture::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeparture::asJsonObject() const {
    QJsonObject obj;
    if (m_gate.isSet()) {
        obj.insert(QString("gate"), ::OpenAPI::toJsonValue(m_gate));
    }
    if (m_terminal.isSet()) {
        obj.insert(QString("terminal"), ::OpenAPI::toJsonValue(m_terminal));
    }
    if (m_timings.size() > 0) {
        obj.insert(QString("timings"), ::OpenAPI::toJsonValue(m_timings));
    }
    return obj;
}

OAIGate OAIDeparture::getGate() const {
    return m_gate;
}
void OAIDeparture::setGate(const OAIGate &gate) {
    m_gate = gate;
    m_gate_isSet = true;
}

bool OAIDeparture::is_gate_Set() const{
    return m_gate_isSet;
}

bool OAIDeparture::is_gate_Valid() const{
    return m_gate_isValid;
}

OAITerminal OAIDeparture::getTerminal() const {
    return m_terminal;
}
void OAIDeparture::setTerminal(const OAITerminal &terminal) {
    m_terminal = terminal;
    m_terminal_isSet = true;
}

bool OAIDeparture::is_terminal_Set() const{
    return m_terminal_isSet;
}

bool OAIDeparture::is_terminal_Valid() const{
    return m_terminal_isValid;
}

QList<OAITiming> OAIDeparture::getTimings() const {
    return m_timings;
}
void OAIDeparture::setTimings(const QList<OAITiming> &timings) {
    m_timings = timings;
    m_timings_isSet = true;
}

bool OAIDeparture::is_timings_Set() const{
    return m_timings_isSet;
}

bool OAIDeparture::is_timings_Valid() const{
    return m_timings_isValid;
}

bool OAIDeparture::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeparture::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
