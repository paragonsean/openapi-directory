# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo_code import GeoCode
from openapi_server import util


class RecommendedLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geo_code: GeoCode=None, iata_code: str=None, name: str=None, subtype: str=None, relevance: float=None, type: str=None):
        """RecommendedLocation - a model defined in OpenAPI

        :param geo_code: The geo_code of this RecommendedLocation.
        :param iata_code: The iata_code of this RecommendedLocation.
        :param name: The name of this RecommendedLocation.
        :param subtype: The subtype of this RecommendedLocation.
        :param relevance: The relevance of this RecommendedLocation.
        :param type: The type of this RecommendedLocation.
        """
        self.openapi_types = {
            'geo_code': GeoCode,
            'iata_code': str,
            'name': str,
            'subtype': str,
            'relevance': float,
            'type': str
        }

        self.attribute_map = {
            'geo_code': 'geoCode',
            'iata_code': 'iataCode',
            'name': 'name',
            'subtype': 'subtype',
            'relevance': 'relevance',
            'type': 'type'
        }

        self._geo_code = geo_code
        self._iata_code = iata_code
        self._name = name
        self._subtype = subtype
        self._relevance = relevance
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedLocation of this RecommendedLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geo_code(self):
        """Gets the geo_code of this RecommendedLocation.


        :return: The geo_code of this RecommendedLocation.
        :rtype: GeoCode
        """
        return self._geo_code

    @geo_code.setter
    def geo_code(self, geo_code):
        """Sets the geo_code of this RecommendedLocation.


        :param geo_code: The geo_code of this RecommendedLocation.
        :type geo_code: GeoCode
        """

        self._geo_code = geo_code

    @property
    def iata_code(self):
        """Gets the iata_code of this RecommendedLocation.

        IATA location code

        :return: The iata_code of this RecommendedLocation.
        :rtype: str
        """
        return self._iata_code

    @iata_code.setter
    def iata_code(self, iata_code):
        """Sets the iata_code of this RecommendedLocation.

        IATA location code

        :param iata_code: The iata_code of this RecommendedLocation.
        :type iata_code: str
        """

        self._iata_code = iata_code

    @property
    def name(self):
        """Gets the name of this RecommendedLocation.

        Label associated to the location (e.g. Eiffel Tower, Madison Square)

        :return: The name of this RecommendedLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendedLocation.

        Label associated to the location (e.g. Eiffel Tower, Madison Square)

        :param name: The name of this RecommendedLocation.
        :type name: str
        """

        self._name = name

    @property
    def subtype(self):
        """Gets the subtype of this RecommendedLocation.

        Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)

        :return: The subtype of this RecommendedLocation.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this RecommendedLocation.

        Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)

        :param subtype: The subtype of this RecommendedLocation.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def relevance(self):
        """Gets the relevance of this RecommendedLocation.

        percentage of similarity.  0 for not similar to 1 for exactly the same

        :return: The relevance of this RecommendedLocation.
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this RecommendedLocation.

        percentage of similarity.  0 for not similar to 1 for exactly the same

        :param relevance: The relevance of this RecommendedLocation.
        :type relevance: float
        """

        self._relevance = relevance

    @property
    def type(self):
        """Gets the type of this RecommendedLocation.

        Ressource type

        :return: The type of this RecommendedLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendedLocation.

        Ressource type

        :param type: The type of this RecommendedLocation.
        :type type: str
        """

        self._type = type
