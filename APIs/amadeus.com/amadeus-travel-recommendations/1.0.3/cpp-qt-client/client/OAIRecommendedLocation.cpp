/**
 * Travel Recommendations API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedLocation::OAIRecommendedLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedLocation::OAIRecommendedLocation() {
    this->initializeModel();
}

OAIRecommendedLocation::~OAIRecommendedLocation() {}

void OAIRecommendedLocation::initializeModel() {

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecommendedLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedLocation::fromJsonObject(QJsonObject json) {

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecommendedLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIGeoCode OAIRecommendedLocation::getGeoCode() const {
    return m_geo_code;
}
void OAIRecommendedLocation::setGeoCode(const OAIGeoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAIRecommendedLocation::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAIRecommendedLocation::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

QString OAIRecommendedLocation::getIataCode() const {
    return m_iata_code;
}
void OAIRecommendedLocation::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIRecommendedLocation::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIRecommendedLocation::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIRecommendedLocation::getName() const {
    return m_name;
}
void OAIRecommendedLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecommendedLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecommendedLocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecommendedLocation::getSubtype() const {
    return m_subtype;
}
void OAIRecommendedLocation::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIRecommendedLocation::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIRecommendedLocation::is_subtype_Valid() const{
    return m_subtype_isValid;
}

double OAIRecommendedLocation::getRelevance() const {
    return m_relevance;
}
void OAIRecommendedLocation::setRelevance(const double &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAIRecommendedLocation::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAIRecommendedLocation::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAIRecommendedLocation::getType() const {
    return m_type;
}
void OAIRecommendedLocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendedLocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendedLocation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecommendedLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
