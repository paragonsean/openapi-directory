/**
 * Travel Recommendations API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarning::OAIWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarning::OAIWarning() {
    this->initializeModel();
}

OAIWarning::~OAIWarning() {}

void OAIWarning::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarning::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIWarning::getCode() const {
    return m_code;
}
void OAIWarning::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWarning::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWarning::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIWarning::getDetail() const {
    return m_detail;
}
void OAIWarning::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIWarning::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIWarning::is_detail_Valid() const{
    return m_detail_isValid;
}

OAIWarning_Source OAIWarning::getSource() const {
    return m_source;
}
void OAIWarning::setSource(const OAIWarning_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWarning::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWarning::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIWarning::getTitle() const {
    return m_title;
}
void OAIWarning::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWarning::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWarning::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
