/**
 * Flight Choice Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFlightOffer.h
 *
 * 
 */

#ifndef OAIFlightOffer_H
#define OAIFlightOffer_H

#include <QJsonObject>

#include "OAIExtended_Price.h"
#include "OAIFareRules.h"
#include "OAIFlightOfferSource.h"
#include "OAIItineraries.h"
#include "OAIPricingOptions.h"
#include "OAITravelerPricing.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFareRules;
class OAIItineraries;
class OAIExtended_Price;
class OAIPricingOptions;
class OAITravelerPricing;

class OAIFlightOffer : public OAIObject {
public:
    OAIFlightOffer();
    OAIFlightOffer(QString json);
    ~OAIFlightOffer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChoiceProbability() const;
    void setChoiceProbability(const QString &choice_probability);
    bool is_choice_probability_Set() const;
    bool is_choice_probability_Valid() const;

    bool isDisablePricing() const;
    void setDisablePricing(const bool &disable_pricing);
    bool is_disable_pricing_Set() const;
    bool is_disable_pricing_Valid() const;

    OAIFareRules getFareRules() const;
    void setFareRules(const OAIFareRules &fare_rules);
    bool is_fare_rules_Set() const;
    bool is_fare_rules_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInstantTicketingRequired() const;
    void setInstantTicketingRequired(const bool &instant_ticketing_required);
    bool is_instant_ticketing_required_Set() const;
    bool is_instant_ticketing_required_Valid() const;

    QList<OAIItineraries> getItineraries() const;
    void setItineraries(const QList<OAIItineraries> &itineraries);
    bool is_itineraries_Set() const;
    bool is_itineraries_Valid() const;

    QString getLastTicketingDate() const;
    void setLastTicketingDate(const QString &last_ticketing_date);
    bool is_last_ticketing_date_Set() const;
    bool is_last_ticketing_date_Valid() const;

    bool isNonHomogeneous() const;
    void setNonHomogeneous(const bool &non_homogeneous);
    bool is_non_homogeneous_Set() const;
    bool is_non_homogeneous_Valid() const;

    double getNumberOfBookableSeats() const;
    void setNumberOfBookableSeats(const double &number_of_bookable_seats);
    bool is_number_of_bookable_seats_Set() const;
    bool is_number_of_bookable_seats_Valid() const;

    bool isOneWay() const;
    void setOneWay(const bool &one_way);
    bool is_one_way_Set() const;
    bool is_one_way_Valid() const;

    bool isPaymentCardRequired() const;
    void setPaymentCardRequired(const bool &payment_card_required);
    bool is_payment_card_required_Set() const;
    bool is_payment_card_required_Valid() const;

    OAIExtended_Price getPrice() const;
    void setPrice(const OAIExtended_Price &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    OAIPricingOptions getPricingOptions() const;
    void setPricingOptions(const OAIPricingOptions &pricing_options);
    bool is_pricing_options_Set() const;
    bool is_pricing_options_Valid() const;

    OAIFlightOfferSource getSource() const;
    void setSource(const OAIFlightOfferSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QList<OAITravelerPricing> getTravelerPricings() const;
    void setTravelerPricings(const QList<OAITravelerPricing> &traveler_pricings);
    bool is_traveler_pricings_Set() const;
    bool is_traveler_pricings_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<QString> getValidatingAirlineCodes() const;
    void setValidatingAirlineCodes(const QList<QString> &validating_airline_codes);
    bool is_validating_airline_codes_Set() const;
    bool is_validating_airline_codes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_choice_probability;
    bool m_choice_probability_isSet;
    bool m_choice_probability_isValid;

    bool m_disable_pricing;
    bool m_disable_pricing_isSet;
    bool m_disable_pricing_isValid;

    OAIFareRules m_fare_rules;
    bool m_fare_rules_isSet;
    bool m_fare_rules_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_instant_ticketing_required;
    bool m_instant_ticketing_required_isSet;
    bool m_instant_ticketing_required_isValid;

    QList<OAIItineraries> m_itineraries;
    bool m_itineraries_isSet;
    bool m_itineraries_isValid;

    QString m_last_ticketing_date;
    bool m_last_ticketing_date_isSet;
    bool m_last_ticketing_date_isValid;

    bool m_non_homogeneous;
    bool m_non_homogeneous_isSet;
    bool m_non_homogeneous_isValid;

    double m_number_of_bookable_seats;
    bool m_number_of_bookable_seats_isSet;
    bool m_number_of_bookable_seats_isValid;

    bool m_one_way;
    bool m_one_way_isSet;
    bool m_one_way_isValid;

    bool m_payment_card_required;
    bool m_payment_card_required_isSet;
    bool m_payment_card_required_isValid;

    OAIExtended_Price m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    OAIPricingOptions m_pricing_options;
    bool m_pricing_options_isSet;
    bool m_pricing_options_isValid;

    OAIFlightOfferSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QList<OAITravelerPricing> m_traveler_pricings;
    bool m_traveler_pricings_isSet;
    bool m_traveler_pricings_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<QString> m_validating_airline_codes;
    bool m_validating_airline_codes_isSet;
    bool m_validating_airline_codes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFlightOffer)

#endif // OAIFlightOffer_H
