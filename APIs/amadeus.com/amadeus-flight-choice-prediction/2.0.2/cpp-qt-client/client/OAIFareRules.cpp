/**
 * Flight Choice Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFareRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFareRules::OAIFareRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFareRules::OAIFareRules() {
    this->initializeModel();
}

OAIFareRules::~OAIFareRules() {}

void OAIFareRules::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIFareRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFareRules::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIFareRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFareRules::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIFareRules::getCurrency() const {
    return m_currency;
}
void OAIFareRules::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIFareRules::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIFareRules::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAITermAndCondition> OAIFareRules::getRules() const {
    return m_rules;
}
void OAIFareRules::setRules(const QList<OAITermAndCondition> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIFareRules::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIFareRules::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIFareRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFareRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
