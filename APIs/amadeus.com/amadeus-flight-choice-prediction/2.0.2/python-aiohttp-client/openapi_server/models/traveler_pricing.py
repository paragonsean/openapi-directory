# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fare_details_by_segment import FareDetailsBySegment
from openapi_server.models.price import Price
from openapi_server.models.traveler_pricing_fare_option import TravelerPricingFareOption
from openapi_server.models.traveler_type import TravelerType
from openapi_server import util


class TravelerPricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_adult_id: str=None, fare_details_by_segment: List[FareDetailsBySegment]=None, fare_option: TravelerPricingFareOption=None, price: Price=None, traveler_id: str=None, traveler_type: TravelerType=None):
        """TravelerPricing - a model defined in OpenAPI

        :param associated_adult_id: The associated_adult_id of this TravelerPricing.
        :param fare_details_by_segment: The fare_details_by_segment of this TravelerPricing.
        :param fare_option: The fare_option of this TravelerPricing.
        :param price: The price of this TravelerPricing.
        :param traveler_id: The traveler_id of this TravelerPricing.
        :param traveler_type: The traveler_type of this TravelerPricing.
        """
        self.openapi_types = {
            'associated_adult_id': str,
            'fare_details_by_segment': List[FareDetailsBySegment],
            'fare_option': TravelerPricingFareOption,
            'price': Price,
            'traveler_id': str,
            'traveler_type': TravelerType
        }

        self.attribute_map = {
            'associated_adult_id': 'associatedAdultId',
            'fare_details_by_segment': 'fareDetailsBySegment',
            'fare_option': 'fareOption',
            'price': 'price',
            'traveler_id': 'travelerId',
            'traveler_type': 'travelerType'
        }

        self._associated_adult_id = associated_adult_id
        self._fare_details_by_segment = fare_details_by_segment
        self._fare_option = fare_option
        self._price = price
        self._traveler_id = traveler_id
        self._traveler_type = traveler_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TravelerPricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TravelerPricing of this TravelerPricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_adult_id(self):
        """Gets the associated_adult_id of this TravelerPricing.

        if type=\"HELD_INFANT\", corresponds to the adult traveler's id who will share the seat

        :return: The associated_adult_id of this TravelerPricing.
        :rtype: str
        """
        return self._associated_adult_id

    @associated_adult_id.setter
    def associated_adult_id(self, associated_adult_id):
        """Sets the associated_adult_id of this TravelerPricing.

        if type=\"HELD_INFANT\", corresponds to the adult traveler's id who will share the seat

        :param associated_adult_id: The associated_adult_id of this TravelerPricing.
        :type associated_adult_id: str
        """

        self._associated_adult_id = associated_adult_id

    @property
    def fare_details_by_segment(self):
        """Gets the fare_details_by_segment of this TravelerPricing.


        :return: The fare_details_by_segment of this TravelerPricing.
        :rtype: List[FareDetailsBySegment]
        """
        return self._fare_details_by_segment

    @fare_details_by_segment.setter
    def fare_details_by_segment(self, fare_details_by_segment):
        """Sets the fare_details_by_segment of this TravelerPricing.


        :param fare_details_by_segment: The fare_details_by_segment of this TravelerPricing.
        :type fare_details_by_segment: List[FareDetailsBySegment]
        """
        if fare_details_by_segment is None:
            raise ValueError("Invalid value for `fare_details_by_segment`, must not be `None`")
        if fare_details_by_segment is not None and len(fare_details_by_segment) > 18:
            raise ValueError("Invalid value for `fare_details_by_segment`, number of items must be less than or equal to `18`")
        if fare_details_by_segment is not None and len(fare_details_by_segment) < 1:
            raise ValueError("Invalid value for `fare_details_by_segment`, number of items must be greater than or equal to `1`")

        self._fare_details_by_segment = fare_details_by_segment

    @property
    def fare_option(self):
        """Gets the fare_option of this TravelerPricing.


        :return: The fare_option of this TravelerPricing.
        :rtype: TravelerPricingFareOption
        """
        return self._fare_option

    @fare_option.setter
    def fare_option(self, fare_option):
        """Sets the fare_option of this TravelerPricing.


        :param fare_option: The fare_option of this TravelerPricing.
        :type fare_option: TravelerPricingFareOption
        """
        if fare_option is None:
            raise ValueError("Invalid value for `fare_option`, must not be `None`")

        self._fare_option = fare_option

    @property
    def price(self):
        """Gets the price of this TravelerPricing.


        :return: The price of this TravelerPricing.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TravelerPricing.


        :param price: The price of this TravelerPricing.
        :type price: Price
        """

        self._price = price

    @property
    def traveler_id(self):
        """Gets the traveler_id of this TravelerPricing.

        Id of the traveler

        :return: The traveler_id of this TravelerPricing.
        :rtype: str
        """
        return self._traveler_id

    @traveler_id.setter
    def traveler_id(self, traveler_id):
        """Sets the traveler_id of this TravelerPricing.

        Id of the traveler

        :param traveler_id: The traveler_id of this TravelerPricing.
        :type traveler_id: str
        """
        if traveler_id is None:
            raise ValueError("Invalid value for `traveler_id`, must not be `None`")

        self._traveler_id = traveler_id

    @property
    def traveler_type(self):
        """Gets the traveler_type of this TravelerPricing.


        :return: The traveler_type of this TravelerPricing.
        :rtype: TravelerType
        """
        return self._traveler_type

    @traveler_type.setter
    def traveler_type(self, traveler_type):
        """Sets the traveler_type of this TravelerPricing.


        :param traveler_type: The traveler_type of this TravelerPricing.
        :type traveler_type: TravelerType
        """
        if traveler_type is None:
            raise ValueError("Invalid value for `traveler_type`, must not be `None`")

        self._traveler_type = traveler_type
