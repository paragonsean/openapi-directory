# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AircraftEquipment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, configuration_version: str=None):
        """AircraftEquipment - a model defined in OpenAPI

        :param code: The code of this AircraftEquipment.
        :param configuration_version: The configuration_version of this AircraftEquipment.
        """
        self.openapi_types = {
            'code': str,
            'configuration_version': str
        }

        self.attribute_map = {
            'code': 'code',
            'configuration_version': 'configurationVersion'
        }

        self._code = code
        self._configuration_version = configuration_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AircraftEquipment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AircraftEquipment of this AircraftEquipment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AircraftEquipment.

        IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) 

        :return: The code of this AircraftEquipment.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AircraftEquipment.

        IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) 

        :param code: The code of this AircraftEquipment.
        :type code: str
        """
        if code is not None and not re.search(r'[a-zA-Z0-9]{3}', code):
            raise ValueError("Invalid value for `code`, must be a follow pattern or equal to `/[a-zA-Z0-9]{3}/`")

        self._code = code

    @property
    def configuration_version(self):
        """Gets the configuration_version of this AircraftEquipment.

        aircraft Configuration Version code. Physical configuration, also called ACV code (aircraft type + fitted configuration) 

        :return: The configuration_version of this AircraftEquipment.
        :rtype: str
        """
        return self._configuration_version

    @configuration_version.setter
    def configuration_version(self, configuration_version):
        """Sets the configuration_version of this AircraftEquipment.

        aircraft Configuration Version code. Physical configuration, also called ACV code (aircraft type + fitted configuration) 

        :param configuration_version: The configuration_version of this AircraftEquipment.
        :type configuration_version: str
        """
        if configuration_version is not None and not re.search(r'[A-Z0-9]{3}', configuration_version):
            raise ValueError("Invalid value for `configuration_version`, must be a follow pattern or equal to `/[A-Z0-9]{3}/`")

        self._configuration_version = configuration_version
