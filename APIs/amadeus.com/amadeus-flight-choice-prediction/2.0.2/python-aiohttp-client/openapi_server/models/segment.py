# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_equipment import AircraftEquipment
from openapi_server.models.co2_emission import Co2Emission
from openapi_server.models.flight_end_point import FlightEndPoint
from openapi_server.models.flight_stop import FlightStop
from openapi_server.models.operating_flight import OperatingFlight
from openapi_server import util


class Segment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aircraft: AircraftEquipment=None, arrival: FlightEndPoint=None, cabin: str=None, carrier_code: str=None, _class: str=None, departure: FlightEndPoint=None, duration: str=None, number: str=None, operating: OperatingFlight=None, stops: List[FlightStop]=None, suffix: str=None, blacklisted_in_eu: bool=None, co2_emissions: List[Co2Emission]=None, id: str=None, number_of_stops: int=None):
        """Segment - a model defined in OpenAPI

        :param aircraft: The aircraft of this Segment.
        :param arrival: The arrival of this Segment.
        :param cabin: The cabin of this Segment.
        :param carrier_code: The carrier_code of this Segment.
        :param _class: The _class of this Segment.
        :param departure: The departure of this Segment.
        :param duration: The duration of this Segment.
        :param number: The number of this Segment.
        :param operating: The operating of this Segment.
        :param stops: The stops of this Segment.
        :param suffix: The suffix of this Segment.
        :param blacklisted_in_eu: The blacklisted_in_eu of this Segment.
        :param co2_emissions: The co2_emissions of this Segment.
        :param id: The id of this Segment.
        :param number_of_stops: The number_of_stops of this Segment.
        """
        self.openapi_types = {
            'aircraft': AircraftEquipment,
            'arrival': FlightEndPoint,
            'cabin': str,
            'carrier_code': str,
            '_class': str,
            'departure': FlightEndPoint,
            'duration': str,
            'number': str,
            'operating': OperatingFlight,
            'stops': List[FlightStop],
            'suffix': str,
            'blacklisted_in_eu': bool,
            'co2_emissions': List[Co2Emission],
            'id': str,
            'number_of_stops': int
        }

        self.attribute_map = {
            'aircraft': 'aircraft',
            'arrival': 'arrival',
            'cabin': 'cabin',
            'carrier_code': 'carrierCode',
            '_class': 'class',
            'departure': 'departure',
            'duration': 'duration',
            'number': 'number',
            'operating': 'operating',
            'stops': 'stops',
            'suffix': 'suffix',
            'blacklisted_in_eu': 'blacklistedInEU',
            'co2_emissions': 'co2Emissions',
            'id': 'id',
            'number_of_stops': 'numberOfStops'
        }

        self._aircraft = aircraft
        self._arrival = arrival
        self._cabin = cabin
        self._carrier_code = carrier_code
        self.__class = _class
        self._departure = departure
        self._duration = duration
        self._number = number
        self._operating = operating
        self._stops = stops
        self._suffix = suffix
        self._blacklisted_in_eu = blacklisted_in_eu
        self._co2_emissions = co2_emissions
        self._id = id
        self._number_of_stops = number_of_stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Segment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Segment of this Segment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aircraft(self):
        """Gets the aircraft of this Segment.


        :return: The aircraft of this Segment.
        :rtype: AircraftEquipment
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this Segment.


        :param aircraft: The aircraft of this Segment.
        :type aircraft: AircraftEquipment
        """

        self._aircraft = aircraft

    @property
    def arrival(self):
        """Gets the arrival of this Segment.


        :return: The arrival of this Segment.
        :rtype: FlightEndPoint
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this Segment.


        :param arrival: The arrival of this Segment.
        :type arrival: FlightEndPoint
        """

        self._arrival = arrival

    @property
    def cabin(self):
        """Gets the cabin of this Segment.

        booking cabin / class of service of the carrier

        :return: The cabin of this Segment.
        :rtype: str
        """
        return self._cabin

    @cabin.setter
    def cabin(self, cabin):
        """Sets the cabin of this Segment.

        booking cabin / class of service of the carrier

        :param cabin: The cabin of this Segment.
        :type cabin: str
        """

        self._cabin = cabin

    @property
    def carrier_code(self):
        """Gets the carrier_code of this Segment.

        providing the airline / carrier code

        :return: The carrier_code of this Segment.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this Segment.

        providing the airline / carrier code

        :param carrier_code: The carrier_code of this Segment.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 2:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code

    @property
    def _class(self):
        """Gets the _class of this Segment.

        reservation booking designator (RBD) of the carrier

        :return: The _class of this Segment.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Segment.

        reservation booking designator (RBD) of the carrier

        :param _class: The _class of this Segment.
        :type _class: str
        """
        if _class is not None and len(_class) > 2:
            raise ValueError("Invalid value for `_class`, length must be less than or equal to `2`")
        if _class is not None and len(_class) < 1:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `1`")

        self.__class = _class

    @property
    def departure(self):
        """Gets the departure of this Segment.


        :return: The departure of this Segment.
        :rtype: FlightEndPoint
        """
        return self._departure

    @departure.setter
    def departure(self, departure):
        """Sets the departure of this Segment.


        :param departure: The departure of this Segment.
        :type departure: FlightEndPoint
        """

        self._departure = departure

    @property
    def duration(self):
        """Gets the duration of this Segment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :return: The duration of this Segment.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Segment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :param duration: The duration of this Segment.
        :type duration: str
        """

        self._duration = duration

    @property
    def number(self):
        """Gets the number of this Segment.

        the flight number as assigned by the carrier

        :return: The number of this Segment.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Segment.

        the flight number as assigned by the carrier

        :param number: The number of this Segment.
        :type number: str
        """
        if number is not None and len(number) > 4:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `4`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def operating(self):
        """Gets the operating of this Segment.


        :return: The operating of this Segment.
        :rtype: OperatingFlight
        """
        return self._operating

    @operating.setter
    def operating(self, operating):
        """Sets the operating of this Segment.


        :param operating: The operating of this Segment.
        :type operating: OperatingFlight
        """

        self._operating = operating

    @property
    def stops(self):
        """Gets the stops of this Segment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :return: The stops of this Segment.
        :rtype: List[FlightStop]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this Segment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :param stops: The stops of this Segment.
        :type stops: List[FlightStop]
        """

        self._stops = stops

    @property
    def suffix(self):
        """Gets the suffix of this Segment.

        the flight number suffix as assigned by the carrier

        :return: The suffix of this Segment.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Segment.

        the flight number suffix as assigned by the carrier

        :param suffix: The suffix of this Segment.
        :type suffix: str
        """
        if suffix is not None and len(suffix) > 4:
            raise ValueError("Invalid value for `suffix`, length must be less than or equal to `4`")
        if suffix is not None and len(suffix) < 1:
            raise ValueError("Invalid value for `suffix`, length must be greater than or equal to `1`")

        self._suffix = suffix

    @property
    def blacklisted_in_eu(self):
        """Gets the blacklisted_in_eu of this Segment.

        When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    

        :return: The blacklisted_in_eu of this Segment.
        :rtype: bool
        """
        return self._blacklisted_in_eu

    @blacklisted_in_eu.setter
    def blacklisted_in_eu(self, blacklisted_in_eu):
        """Sets the blacklisted_in_eu of this Segment.

        When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    

        :param blacklisted_in_eu: The blacklisted_in_eu of this Segment.
        :type blacklisted_in_eu: bool
        """

        self._blacklisted_in_eu = blacklisted_in_eu

    @property
    def co2_emissions(self):
        """Gets the co2_emissions of this Segment.

        Co2 informations

        :return: The co2_emissions of this Segment.
        :rtype: List[Co2Emission]
        """
        return self._co2_emissions

    @co2_emissions.setter
    def co2_emissions(self, co2_emissions):
        """Sets the co2_emissions of this Segment.

        Co2 informations

        :param co2_emissions: The co2_emissions of this Segment.
        :type co2_emissions: List[Co2Emission]
        """
        if co2_emissions is not None and len(co2_emissions) < 1:
            raise ValueError("Invalid value for `co2_emissions`, number of items must be greater than or equal to `1`")

        self._co2_emissions = co2_emissions

    @property
    def id(self):
        """Gets the id of this Segment.

        Id of the segment

        :return: The id of this Segment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Segment.

        Id of the segment

        :param id: The id of this Segment.
        :type id: str
        """

        self._id = id

    @property
    def number_of_stops(self):
        """Gets the number_of_stops of this Segment.

        Number of stops

        :return: The number_of_stops of this Segment.
        :rtype: int
        """
        return self._number_of_stops

    @number_of_stops.setter
    def number_of_stops(self, number_of_stops):
        """Sets the number_of_stops of this Segment.

        Number of stops

        :param number_of_stops: The number_of_stops of this Segment.
        :type number_of_stops: int
        """

        self._number_of_stops = number_of_stops
