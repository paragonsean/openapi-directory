# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fee import Fee
from openapi_server.models.tax import Tax
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, currency: str=None, fees: List[Fee]=None, taxes: List[Tax]=None, total: str=None):
        """Price - a model defined in OpenAPI

        :param base: The base of this Price.
        :param currency: The currency of this Price.
        :param fees: The fees of this Price.
        :param taxes: The taxes of this Price.
        :param total: The total of this Price.
        """
        self.openapi_types = {
            'base': str,
            'currency': str,
            'fees': List[Fee],
            'taxes': List[Tax],
            'total': str
        }

        self.attribute_map = {
            'base': 'base',
            'currency': 'currency',
            'fees': 'fees',
            'taxes': 'taxes',
            'total': 'total'
        }

        self._base = base
        self._currency = currency
        self._fees = fees
        self._taxes = taxes
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this Price.

        Amount without taxes

        :return: The base of this Price.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Price.

        Amount without taxes

        :param base: The base of this Price.
        :type base: str
        """

        self._base = base

    @property
    def currency(self):
        """Gets the currency of this Price.


        :return: The currency of this Price.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.


        :param currency: The currency of this Price.
        :type currency: str
        """

        self._currency = currency

    @property
    def fees(self):
        """Gets the fees of this Price.

        List of applicable fees

        :return: The fees of this Price.
        :rtype: List[Fee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Price.

        List of applicable fees

        :param fees: The fees of this Price.
        :type fees: List[Fee]
        """

        self._fees = fees

    @property
    def taxes(self):
        """Gets the taxes of this Price.


        :return: The taxes of this Price.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Price.


        :param taxes: The taxes of this Price.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this Price.

        Total amount paid by the user

        :return: The total of this Price.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Price.

        Total amount paid by the user

        :param total: The total of this Price.
        :type total: str
        """

        self._total = total
