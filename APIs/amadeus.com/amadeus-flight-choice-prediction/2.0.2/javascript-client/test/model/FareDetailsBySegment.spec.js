/**
 * Flight Choice Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlightChoicePrediction);
  }
}(this, function(expect, FlightChoicePrediction) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlightChoicePrediction.FareDetailsBySegment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FareDetailsBySegment', function() {
    it('should create an instance of FareDetailsBySegment', function() {
      // uncomment below and update the code to test FareDetailsBySegment
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be.a(FlightChoicePrediction.FareDetailsBySegment);
    });

    it('should have the property additionalServices (base name: "additionalServices")', function() {
      // uncomment below and update the code to test the property additionalServices
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property allotmentDetails (base name: "allotmentDetails")', function() {
      // uncomment below and update the code to test the property allotmentDetails
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property brandedFare (base name: "brandedFare")', function() {
      // uncomment below and update the code to test the property brandedFare
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property cabin (base name: "cabin")', function() {
      // uncomment below and update the code to test the property cabin
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property _class (base name: "class")', function() {
      // uncomment below and update the code to test the property _class
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property fareBasis (base name: "fareBasis")', function() {
      // uncomment below and update the code to test the property fareBasis
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property includedCheckedBags (base name: "includedCheckedBags")', function() {
      // uncomment below and update the code to test the property includedCheckedBags
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property isAllotment (base name: "isAllotment")', function() {
      // uncomment below and update the code to test the property isAllotment
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property segmentId (base name: "segmentId")', function() {
      // uncomment below and update the code to test the property segmentId
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

    it('should have the property sliceDiceIndicator (base name: "sliceDiceIndicator")', function() {
      // uncomment below and update the code to test the property sliceDiceIndicator
      //var instance = new FlightChoicePrediction.FareDetailsBySegment();
      //expect(instance).to.be();
    });

  });

}));
