# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoryRatedAreasAllOfCategoryScoresShopping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, luxury: float=None, overall: float=None):
        """CategoryRatedAreasAllOfCategoryScoresShopping - a model defined in OpenAPI

        :param luxury: The luxury of this CategoryRatedAreasAllOfCategoryScoresShopping.
        :param overall: The overall of this CategoryRatedAreasAllOfCategoryScoresShopping.
        """
        self.openapi_types = {
            'luxury': float,
            'overall': float
        }

        self.attribute_map = {
            'luxury': 'luxury',
            'overall': 'overall'
        }

        self._luxury = luxury
        self._overall = overall

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryRatedAreasAllOfCategoryScoresShopping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category_rated_areas_allOf_categoryScores_shopping of this CategoryRatedAreasAllOfCategoryScoresShopping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def luxury(self):
        """Gets the luxury of this CategoryRatedAreasAllOfCategoryScoresShopping.

        score of luxury shopping possibility from 0 (no luxury shop) to 100 (many luxury shops to enjoy)

        :return: The luxury of this CategoryRatedAreasAllOfCategoryScoresShopping.
        :rtype: float
        """
        return self._luxury

    @luxury.setter
    def luxury(self, luxury):
        """Sets the luxury of this CategoryRatedAreasAllOfCategoryScoresShopping.

        score of luxury shopping possibility from 0 (no luxury shop) to 100 (many luxury shops to enjoy)

        :param luxury: The luxury of this CategoryRatedAreasAllOfCategoryScoresShopping.
        :type luxury: float
        """

        self._luxury = luxury

    @property
    def overall(self):
        """Gets the overall of this CategoryRatedAreasAllOfCategoryScoresShopping.

        score of shopping possibility from 0 (no shop) to 100 (many shops to enjoy)

        :return: The overall of this CategoryRatedAreasAllOfCategoryScoresShopping.
        :rtype: float
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this CategoryRatedAreasAllOfCategoryScoresShopping.

        score of shopping possibility from 0 (no shop) to 100 (many shops to enjoy)

        :param overall: The overall of this CategoryRatedAreasAllOfCategoryScoresShopping.
        :type overall: float
        """

        self._overall = overall
