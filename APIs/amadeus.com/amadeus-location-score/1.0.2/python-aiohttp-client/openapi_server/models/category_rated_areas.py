# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_rated_areas_all_of_category_scores import CategoryRatedAreasAllOfCategoryScores
from openapi_server.models.geo_code import GeoCode
from openapi_server import util


class CategoryRatedAreas(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_scores: CategoryRatedAreasAllOfCategoryScores=None, geo_code: GeoCode=None, radius: int=None, type: str=None):
        """CategoryRatedAreas - a model defined in OpenAPI

        :param category_scores: The category_scores of this CategoryRatedAreas.
        :param geo_code: The geo_code of this CategoryRatedAreas.
        :param radius: The radius of this CategoryRatedAreas.
        :param type: The type of this CategoryRatedAreas.
        """
        self.openapi_types = {
            'category_scores': CategoryRatedAreasAllOfCategoryScores,
            'geo_code': GeoCode,
            'radius': int,
            'type': str
        }

        self.attribute_map = {
            'category_scores': 'categoryScores',
            'geo_code': 'geoCode',
            'radius': 'radius',
            'type': 'type'
        }

        self._category_scores = category_scores
        self._geo_code = geo_code
        self._radius = radius
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryRatedAreas':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category-rated-areas of this CategoryRatedAreas.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_scores(self):
        """Gets the category_scores of this CategoryRatedAreas.


        :return: The category_scores of this CategoryRatedAreas.
        :rtype: CategoryRatedAreasAllOfCategoryScores
        """
        return self._category_scores

    @category_scores.setter
    def category_scores(self, category_scores):
        """Sets the category_scores of this CategoryRatedAreas.


        :param category_scores: The category_scores of this CategoryRatedAreas.
        :type category_scores: CategoryRatedAreasAllOfCategoryScores
        """

        self._category_scores = category_scores

    @property
    def geo_code(self):
        """Gets the geo_code of this CategoryRatedAreas.


        :return: The geo_code of this CategoryRatedAreas.
        :rtype: GeoCode
        """
        return self._geo_code

    @geo_code.setter
    def geo_code(self, geo_code):
        """Sets the geo_code of this CategoryRatedAreas.


        :param geo_code: The geo_code of this CategoryRatedAreas.
        :type geo_code: GeoCode
        """

        self._geo_code = geo_code

    @property
    def radius(self):
        """Gets the radius of this CategoryRatedAreas.

        Radius of the area in meters

        :return: The radius of this CategoryRatedAreas.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this CategoryRatedAreas.

        Radius of the area in meters

        :param radius: The radius of this CategoryRatedAreas.
        :type radius: int
        """

        self._radius = radius

    @property
    def type(self):
        """Gets the type of this CategoryRatedAreas.

        Type of the manipulatd resource

        :return: The type of this CategoryRatedAreas.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CategoryRatedAreas.

        Type of the manipulatd resource

        :param type: The type of this CategoryRatedAreas.
        :type type: str
        """

        self._type = type
