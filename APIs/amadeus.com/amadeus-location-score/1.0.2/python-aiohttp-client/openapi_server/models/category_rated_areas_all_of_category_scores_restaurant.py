# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoryRatedAreasAllOfCategoryScoresRestaurant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overall: float=None, vegetarian: float=None):
        """CategoryRatedAreasAllOfCategoryScoresRestaurant - a model defined in OpenAPI

        :param overall: The overall of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        :param vegetarian: The vegetarian of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        """
        self.openapi_types = {
            'overall': float,
            'vegetarian': float
        }

        self.attribute_map = {
            'overall': 'overall',
            'vegetarian': 'vegetarian'
        }

        self._overall = overall
        self._vegetarian = vegetarian

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryRatedAreasAllOfCategoryScoresRestaurant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category_rated_areas_allOf_categoryScores_restaurant of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overall(self):
        """Gets the overall of this CategoryRatedAreasAllOfCategoryScoresRestaurant.

        score of eating possibility from 0 (no place to eat) to 100 (many restaurants to enjoy)

        :return: The overall of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        :rtype: float
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this CategoryRatedAreasAllOfCategoryScoresRestaurant.

        score of eating possibility from 0 (no place to eat) to 100 (many restaurants to enjoy)

        :param overall: The overall of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        :type overall: float
        """

        self._overall = overall

    @property
    def vegetarian(self):
        """Gets the vegetarian of this CategoryRatedAreasAllOfCategoryScoresRestaurant.

        score of vegetatian eating possibility from 0 (no place to eat vegetatian) to 100 (many restaurants to enjoy)

        :return: The vegetarian of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        :rtype: float
        """
        return self._vegetarian

    @vegetarian.setter
    def vegetarian(self, vegetarian):
        """Sets the vegetarian of this CategoryRatedAreasAllOfCategoryScoresRestaurant.

        score of vegetatian eating possibility from 0 (no place to eat vegetatian) to 100 (many restaurants to enjoy)

        :param vegetarian: The vegetarian of this CategoryRatedAreasAllOfCategoryScoresRestaurant.
        :type vegetarian: float
        """

        self._vegetarian = vegetarian
