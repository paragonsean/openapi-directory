# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latitude: float=None, longitude: float=None):
        """GeoCode - a model defined in OpenAPI

        :param latitude: The latitude of this GeoCode.
        :param longitude: The longitude of this GeoCode.
        """
        self.openapi_types = {
            'latitude': float,
            'longitude': float
        }

        self.attribute_map = {
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoCode of this GeoCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latitude(self):
        """Gets the latitude of this GeoCode.

        Latitude of the position expressed in decimal degrees (WSG 84), e.g. 6.244203. A positive value denotes northern hemisphere or the equator, and a negative value denotes southern hemisphere. The number of digits to represent the precision of the coordinate.

        :return: The latitude of this GeoCode.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeoCode.

        Latitude of the position expressed in decimal degrees (WSG 84), e.g. 6.244203. A positive value denotes northern hemisphere or the equator, and a negative value denotes southern hemisphere. The number of digits to represent the precision of the coordinate.

        :param latitude: The latitude of this GeoCode.
        :type latitude: float
        """
        if latitude is not None and latitude > 90:
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")
        if latitude is not None and latitude < -90:
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeoCode.

        Longitude of the position expressed in decimal degrees (WSG 84), e.g. -75.581211. A positive value denotes east longitude or the prime meridian, and a negative value denotes west longitude.  The number of digits to represent the precision of the coordinate.

        :return: The longitude of this GeoCode.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeoCode.

        Longitude of the position expressed in decimal degrees (WSG 84), e.g. -75.581211. A positive value denotes east longitude or the prime meridian, and a negative value denotes west longitude.  The number of digits to represent the precision of the coordinate.

        :param longitude: The longitude of this GeoCode.
        :type longitude: float
        """
        if longitude is not None and longitude > 180:
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")
        if longitude is not None and longitude < -180:
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")

        self._longitude = longitude
