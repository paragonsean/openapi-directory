/**
 * Location Score
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.     Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory_rated_areas.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory_rated_areas::OAICategory_rated_areas(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory_rated_areas::OAICategory_rated_areas() {
    this->initializeModel();
}

OAICategory_rated_areas::~OAICategory_rated_areas() {}

void OAICategory_rated_areas::initializeModel() {

    m_category_scores_isSet = false;
    m_category_scores_isValid = false;

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICategory_rated_areas::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory_rated_areas::fromJsonObject(QJsonObject json) {

    m_category_scores_isValid = ::OpenAPI::fromJsonValue(m_category_scores, json[QString("categoryScores")]);
    m_category_scores_isSet = !json[QString("categoryScores")].isNull() && m_category_scores_isValid;

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICategory_rated_areas::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory_rated_areas::asJsonObject() const {
    QJsonObject obj;
    if (m_category_scores.isSet()) {
        obj.insert(QString("categoryScores"), ::OpenAPI::toJsonValue(m_category_scores));
    }
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICategory_rated_areas_allOf_categoryScores OAICategory_rated_areas::getCategoryScores() const {
    return m_category_scores;
}
void OAICategory_rated_areas::setCategoryScores(const OAICategory_rated_areas_allOf_categoryScores &category_scores) {
    m_category_scores = category_scores;
    m_category_scores_isSet = true;
}

bool OAICategory_rated_areas::is_category_scores_Set() const{
    return m_category_scores_isSet;
}

bool OAICategory_rated_areas::is_category_scores_Valid() const{
    return m_category_scores_isValid;
}

OAIGeoCode OAICategory_rated_areas::getGeoCode() const {
    return m_geo_code;
}
void OAICategory_rated_areas::setGeoCode(const OAIGeoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAICategory_rated_areas::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAICategory_rated_areas::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

qint32 OAICategory_rated_areas::getRadius() const {
    return m_radius;
}
void OAICategory_rated_areas::setRadius(const qint32 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAICategory_rated_areas::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAICategory_rated_areas::is_radius_Valid() const{
    return m_radius_isValid;
}

QString OAICategory_rated_areas::getType() const {
    return m_type;
}
void OAICategory_rated_areas::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategory_rated_areas::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategory_rated_areas::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICategory_rated_areas::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory_rated_areas::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
