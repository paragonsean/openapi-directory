/*
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Description;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TermAndCondition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:43.662685-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TermAndCondition {
  /**
   * This defines what type of modification is concerned in this rule.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    REFUND("REFUND"),
    
    EXCHANGE("EXCHANGE"),
    
    REVALIDATION("REVALIDATION"),
    
    REISSUE("REISSUE"),
    
    REBOOK("REBOOK"),
    
    CANCELLATION("CANCELLATION");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CIRCUMSTANCES = "circumstances";
  @SerializedName(SERIALIZED_NAME_CIRCUMSTANCES)
  private String circumstances;

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private List<Description> descriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PENALTY_AMOUNT = "maxPenaltyAmount";
  @SerializedName(SERIALIZED_NAME_MAX_PENALTY_AMOUNT)
  private String maxPenaltyAmount;

  public static final String SERIALIZED_NAME_NOT_APPLICABLE = "notApplicable";
  @SerializedName(SERIALIZED_NAME_NOT_APPLICABLE)
  private Boolean notApplicable;

  public TermAndCondition() {
  }

  public TermAndCondition category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * This defines what type of modification is concerned in this rule.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public TermAndCondition circumstances(String circumstances) {
    this.circumstances = circumstances;
    return this;
  }

  /**
   * Get circumstances
   * @return circumstances
   */
  @javax.annotation.Nullable
  public String getCircumstances() {
    return circumstances;
  }

  public void setCircumstances(String circumstances) {
    this.circumstances = circumstances;
  }


  public TermAndCondition descriptions(List<Description> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public TermAndCondition addDescriptionsItem(Description descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new ArrayList<>();
    }
    this.descriptions.add(descriptionsItem);
    return this;
  }

  /**
   * Get descriptions
   * @return descriptions
   */
  @javax.annotation.Nullable
  public List<Description> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(List<Description> descriptions) {
    this.descriptions = descriptions;
  }


  public TermAndCondition maxPenaltyAmount(String maxPenaltyAmount) {
    this.maxPenaltyAmount = maxPenaltyAmount;
    return this;
  }

  /**
   * Get maxPenaltyAmount
   * @return maxPenaltyAmount
   */
  @javax.annotation.Nullable
  public String getMaxPenaltyAmount() {
    return maxPenaltyAmount;
  }

  public void setMaxPenaltyAmount(String maxPenaltyAmount) {
    this.maxPenaltyAmount = maxPenaltyAmount;
  }


  public TermAndCondition notApplicable(Boolean notApplicable) {
    this.notApplicable = notApplicable;
    return this;
  }

  /**
   * Get notApplicable
   * @return notApplicable
   */
  @javax.annotation.Nullable
  public Boolean getNotApplicable() {
    return notApplicable;
  }

  public void setNotApplicable(Boolean notApplicable) {
    this.notApplicable = notApplicable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TermAndCondition termAndCondition = (TermAndCondition) o;
    return Objects.equals(this.category, termAndCondition.category) &&
        Objects.equals(this.circumstances, termAndCondition.circumstances) &&
        Objects.equals(this.descriptions, termAndCondition.descriptions) &&
        Objects.equals(this.maxPenaltyAmount, termAndCondition.maxPenaltyAmount) &&
        Objects.equals(this.notApplicable, termAndCondition.notApplicable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, circumstances, descriptions, maxPenaltyAmount, notApplicable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TermAndCondition {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    circumstances: ").append(toIndentedString(circumstances)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    maxPenaltyAmount: ").append(toIndentedString(maxPenaltyAmount)).append("\n");
    sb.append("    notApplicable: ").append(toIndentedString(notApplicable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("circumstances");
    openapiFields.add("descriptions");
    openapiFields.add("maxPenaltyAmount");
    openapiFields.add("notApplicable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TermAndCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TermAndCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TermAndCondition is not found in the empty JSON string", TermAndCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TermAndCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TermAndCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("circumstances") != null && !jsonObj.get("circumstances").isJsonNull()) && !jsonObj.get("circumstances").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `circumstances` to be a primitive type in the JSON string but got `%s`", jsonObj.get("circumstances").toString()));
      }
      if (jsonObj.get("descriptions") != null && !jsonObj.get("descriptions").isJsonNull()) {
        JsonArray jsonArraydescriptions = jsonObj.getAsJsonArray("descriptions");
        if (jsonArraydescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("descriptions").toString()));
          }

          // validate the optional field `descriptions` (array)
          for (int i = 0; i < jsonArraydescriptions.size(); i++) {
            Description.validateJsonElement(jsonArraydescriptions.get(i));
          };
        }
      }
      if ((jsonObj.get("maxPenaltyAmount") != null && !jsonObj.get("maxPenaltyAmount").isJsonNull()) && !jsonObj.get("maxPenaltyAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPenaltyAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPenaltyAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TermAndCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TermAndCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TermAndCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TermAndCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<TermAndCondition>() {
           @Override
           public void write(JsonWriter out, TermAndCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TermAndCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TermAndCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TermAndCondition
   * @throws IOException if the JSON string is invalid with respect to TermAndCondition
   */
  public static TermAndCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TermAndCondition.class);
  }

  /**
   * Convert an instance of TermAndCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

