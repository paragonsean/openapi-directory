/*
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElementaryPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * checked bag
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:43.662685-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bags {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_WEIGHT_UNIT = "weightUnit";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UNIT)
  private String weightUnit;

  public static final String SERIALIZED_NAME_BOOKABLE_BY_ITINERARY = "bookableByItinerary";
  @SerializedName(SERIALIZED_NAME_BOOKABLE_BY_ITINERARY)
  private Boolean bookableByItinerary;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ElementaryPrice price;

  public static final String SERIALIZED_NAME_SEGMENT_IDS = "segmentIds";
  @SerializedName(SERIALIZED_NAME_SEGMENT_IDS)
  private List<String> segmentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAVELER_IDS = "travelerIds";
  @SerializedName(SERIALIZED_NAME_TRAVELER_IDS)
  private List<String> travelerIds = new ArrayList<>();

  public Bags() {
  }

  public Bags quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Total number of units
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Bags weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of the baggage allowance
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Bags weightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * Code to qualify unit as pounds or kilos
   * @return weightUnit
   */
  @javax.annotation.Nullable
  public String getWeightUnit() {
    return weightUnit;
  }

  public void setWeightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
  }


  public Bags bookableByItinerary(Boolean bookableByItinerary) {
    this.bookableByItinerary = bookableByItinerary;
    return this;
  }

  /**
   * Specify if the service is bookable by itinerary  or for all itineraries
   * @return bookableByItinerary
   */
  @javax.annotation.Nullable
  public Boolean getBookableByItinerary() {
    return bookableByItinerary;
  }

  public void setBookableByItinerary(Boolean bookableByItinerary) {
    this.bookableByItinerary = bookableByItinerary;
  }


  public Bags name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Type of service
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Bags price(ElementaryPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ElementaryPrice getPrice() {
    return price;
  }

  public void setPrice(ElementaryPrice price) {
    this.price = price;
  }


  public Bags segmentIds(List<String> segmentIds) {
    this.segmentIds = segmentIds;
    return this;
  }

  public Bags addSegmentIdsItem(String segmentIdsItem) {
    if (this.segmentIds == null) {
      this.segmentIds = new ArrayList<>();
    }
    this.segmentIds.add(segmentIdsItem);
    return this;
  }

  /**
   * Id of the segment concerned by the service
   * @return segmentIds
   */
  @javax.annotation.Nullable
  public List<String> getSegmentIds() {
    return segmentIds;
  }

  public void setSegmentIds(List<String> segmentIds) {
    this.segmentIds = segmentIds;
  }


  public Bags travelerIds(List<String> travelerIds) {
    this.travelerIds = travelerIds;
    return this;
  }

  public Bags addTravelerIdsItem(String travelerIdsItem) {
    if (this.travelerIds == null) {
      this.travelerIds = new ArrayList<>();
    }
    this.travelerIds.add(travelerIdsItem);
    return this;
  }

  /**
   * Id of the traveler concerned by the service
   * @return travelerIds
   */
  @javax.annotation.Nullable
  public List<String> getTravelerIds() {
    return travelerIds;
  }

  public void setTravelerIds(List<String> travelerIds) {
    this.travelerIds = travelerIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bags bags = (Bags) o;
    return Objects.equals(this.quantity, bags.quantity) &&
        Objects.equals(this.weight, bags.weight) &&
        Objects.equals(this.weightUnit, bags.weightUnit) &&
        Objects.equals(this.bookableByItinerary, bags.bookableByItinerary) &&
        Objects.equals(this.name, bags.name) &&
        Objects.equals(this.price, bags.price) &&
        Objects.equals(this.segmentIds, bags.segmentIds) &&
        Objects.equals(this.travelerIds, bags.travelerIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, weight, weightUnit, bookableByItinerary, name, price, segmentIds, travelerIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bags {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("    bookableByItinerary: ").append(toIndentedString(bookableByItinerary)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    segmentIds: ").append(toIndentedString(segmentIds)).append("\n");
    sb.append("    travelerIds: ").append(toIndentedString(travelerIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("weight");
    openapiFields.add("weightUnit");
    openapiFields.add("bookableByItinerary");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("segmentIds");
    openapiFields.add("travelerIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bags
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bags.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bags is not found in the empty JSON string", Bags.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bags.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bags` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("weightUnit") != null && !jsonObj.get("weightUnit").isJsonNull()) && !jsonObj.get("weightUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weightUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weightUnit").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ElementaryPrice.validateJsonElement(jsonObj.get("price"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentIds") != null && !jsonObj.get("segmentIds").isJsonNull() && !jsonObj.get("segmentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentIds` to be an array in the JSON string but got `%s`", jsonObj.get("segmentIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("travelerIds") != null && !jsonObj.get("travelerIds").isJsonNull() && !jsonObj.get("travelerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `travelerIds` to be an array in the JSON string but got `%s`", jsonObj.get("travelerIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bags.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bags' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bags> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bags.class));

       return (TypeAdapter<T>) new TypeAdapter<Bags>() {
           @Override
           public void write(JsonWriter out, Bags value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bags read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bags given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bags
   * @throws IOException if the JSON string is invalid with respect to Bags
   */
  public static Bags fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bags.class);
  }

  /**
   * Convert an instance of Bags to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

