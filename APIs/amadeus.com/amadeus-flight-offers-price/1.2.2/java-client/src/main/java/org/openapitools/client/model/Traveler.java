/*
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Discount;
import org.openapitools.client.model.EmergencyContact;
import org.openapitools.client.model.IdentityDocument;
import org.openapitools.client.model.LoyaltyProgram;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.StakeholderGender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the traveler of the trip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:43.662685-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Traveler {
  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<IdentityDocument> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private StakeholderGender gender;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_DISCOUNT_ELIGIBILITY = "discountEligibility";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ELIGIBILITY)
  private List<Discount> discountEligibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT = "emergencyContact";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT)
  private EmergencyContact emergencyContact;

  public static final String SERIALIZED_NAME_LOYALTY_PROGRAMS = "loyaltyPrograms";
  @SerializedName(SERIALIZED_NAME_LOYALTY_PROGRAMS)
  private List<LoyaltyProgram> loyaltyPrograms = new ArrayList<>();

  public Traveler() {
  }

  public Traveler dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The date of birth in ISO 8601 format (yyyy-mm-dd)
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Traveler documents(List<IdentityDocument> documents) {
    this.documents = documents;
    return this;
  }

  public Traveler addDocumentsItem(IdentityDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Advanced Passenger Information - regulatory identity documents - SSR DOCS &amp; DOCO elements
   * @return documents
   */
  @javax.annotation.Nullable
  public List<IdentityDocument> getDocuments() {
    return documents;
  }

  public void setDocuments(List<IdentityDocument> documents) {
    this.documents = documents;
  }


  public Traveler gender(StakeholderGender gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public StakeholderGender getGender() {
    return gender;
  }

  public void setGender(StakeholderGender gender) {
    this.gender = gender;
  }


  public Traveler id(String id) {
    this.id = id;
    return this;
  }

  /**
   * item identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Traveler name(Name name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }


  public Traveler contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Traveler discountEligibility(List<Discount> discountEligibility) {
    this.discountEligibility = discountEligibility;
    return this;
  }

  public Traveler addDiscountEligibilityItem(Discount discountEligibilityItem) {
    if (this.discountEligibility == null) {
      this.discountEligibility = new ArrayList<>();
    }
    this.discountEligibility.add(discountEligibilityItem);
    return this;
  }

  /**
   * list of element that allow a discount.
   * @return discountEligibility
   */
  @javax.annotation.Nullable
  public List<Discount> getDiscountEligibility() {
    return discountEligibility;
  }

  public void setDiscountEligibility(List<Discount> discountEligibility) {
    this.discountEligibility = discountEligibility;
  }


  public Traveler emergencyContact(EmergencyContact emergencyContact) {
    this.emergencyContact = emergencyContact;
    return this;
  }

  /**
   * Get emergencyContact
   * @return emergencyContact
   */
  @javax.annotation.Nullable
  public EmergencyContact getEmergencyContact() {
    return emergencyContact;
  }

  public void setEmergencyContact(EmergencyContact emergencyContact) {
    this.emergencyContact = emergencyContact;
  }


  public Traveler loyaltyPrograms(List<LoyaltyProgram> loyaltyPrograms) {
    this.loyaltyPrograms = loyaltyPrograms;
    return this;
  }

  public Traveler addLoyaltyProgramsItem(LoyaltyProgram loyaltyProgramsItem) {
    if (this.loyaltyPrograms == null) {
      this.loyaltyPrograms = new ArrayList<>();
    }
    this.loyaltyPrograms.add(loyaltyProgramsItem);
    return this;
  }

  /**
   * list of loyalty program followed by the traveler
   * @return loyaltyPrograms
   */
  @javax.annotation.Nullable
  public List<LoyaltyProgram> getLoyaltyPrograms() {
    return loyaltyPrograms;
  }

  public void setLoyaltyPrograms(List<LoyaltyProgram> loyaltyPrograms) {
    this.loyaltyPrograms = loyaltyPrograms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Traveler traveler = (Traveler) o;
    return Objects.equals(this.dateOfBirth, traveler.dateOfBirth) &&
        Objects.equals(this.documents, traveler.documents) &&
        Objects.equals(this.gender, traveler.gender) &&
        Objects.equals(this.id, traveler.id) &&
        Objects.equals(this.name, traveler.name) &&
        Objects.equals(this.contact, traveler.contact) &&
        Objects.equals(this.discountEligibility, traveler.discountEligibility) &&
        Objects.equals(this.emergencyContact, traveler.emergencyContact) &&
        Objects.equals(this.loyaltyPrograms, traveler.loyaltyPrograms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOfBirth, documents, gender, id, name, contact, discountEligibility, emergencyContact, loyaltyPrograms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Traveler {\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    discountEligibility: ").append(toIndentedString(discountEligibility)).append("\n");
    sb.append("    emergencyContact: ").append(toIndentedString(emergencyContact)).append("\n");
    sb.append("    loyaltyPrograms: ").append(toIndentedString(loyaltyPrograms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateOfBirth");
    openapiFields.add("documents");
    openapiFields.add("gender");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("contact");
    openapiFields.add("discountEligibility");
    openapiFields.add("emergencyContact");
    openapiFields.add("loyaltyPrograms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Traveler
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Traveler.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Traveler is not found in the empty JSON string", Traveler.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Traveler.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Traveler` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            IdentityDocument.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        StakeholderGender.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("contact"));
      }
      if (jsonObj.get("discountEligibility") != null && !jsonObj.get("discountEligibility").isJsonNull()) {
        JsonArray jsonArraydiscountEligibility = jsonObj.getAsJsonArray("discountEligibility");
        if (jsonArraydiscountEligibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountEligibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountEligibility` to be an array in the JSON string but got `%s`", jsonObj.get("discountEligibility").toString()));
          }

          // validate the optional field `discountEligibility` (array)
          for (int i = 0; i < jsonArraydiscountEligibility.size(); i++) {
            Discount.validateJsonElement(jsonArraydiscountEligibility.get(i));
          };
        }
      }
      // validate the optional field `emergencyContact`
      if (jsonObj.get("emergencyContact") != null && !jsonObj.get("emergencyContact").isJsonNull()) {
        EmergencyContact.validateJsonElement(jsonObj.get("emergencyContact"));
      }
      if (jsonObj.get("loyaltyPrograms") != null && !jsonObj.get("loyaltyPrograms").isJsonNull()) {
        JsonArray jsonArrayloyaltyPrograms = jsonObj.getAsJsonArray("loyaltyPrograms");
        if (jsonArrayloyaltyPrograms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loyaltyPrograms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loyaltyPrograms` to be an array in the JSON string but got `%s`", jsonObj.get("loyaltyPrograms").toString()));
          }

          // validate the optional field `loyaltyPrograms` (array)
          for (int i = 0; i < jsonArrayloyaltyPrograms.size(); i++) {
            LoyaltyProgram.validateJsonElement(jsonArrayloyaltyPrograms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Traveler.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Traveler' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Traveler> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Traveler.class));

       return (TypeAdapter<T>) new TypeAdapter<Traveler>() {
           @Override
           public void write(JsonWriter out, Traveler value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Traveler read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Traveler given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Traveler
   * @throws IOException if the JSON string is invalid with respect to Traveler
   */
  public static Traveler fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Traveler.class);
  }

  /**
   * Convert an instance of Traveler to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

