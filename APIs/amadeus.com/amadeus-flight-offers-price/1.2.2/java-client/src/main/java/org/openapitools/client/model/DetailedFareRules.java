/*
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TermAndCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetailedFareRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:43.662685-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedFareRules {
  public static final String SERIALIZED_NAME_FARE_BASIS = "fareBasis";
  @SerializedName(SERIALIZED_NAME_FARE_BASIS)
  private String fareBasis;

  public static final String SERIALIZED_NAME_FARE_NOTES = "fareNotes";
  @SerializedName(SERIALIZED_NAME_FARE_NOTES)
  private TermAndCondition fareNotes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEGMENT_ID = "segmentId";
  @SerializedName(SERIALIZED_NAME_SEGMENT_ID)
  private String segmentId;

  public DetailedFareRules() {
  }

  public DetailedFareRules fareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
    return this;
  }

  /**
   * Get fareBasis
   * @return fareBasis
   */
  @javax.annotation.Nullable
  public String getFareBasis() {
    return fareBasis;
  }

  public void setFareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
  }


  public DetailedFareRules fareNotes(TermAndCondition fareNotes) {
    this.fareNotes = fareNotes;
    return this;
  }

  /**
   * Get fareNotes
   * @return fareNotes
   */
  @javax.annotation.Nullable
  public TermAndCondition getFareNotes() {
    return fareNotes;
  }

  public void setFareNotes(TermAndCondition fareNotes) {
    this.fareNotes = fareNotes;
  }


  public DetailedFareRules name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DetailedFareRules segmentId(String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

  /**
   * Id of the segment concerned by the fare rule
   * @return segmentId
   */
  @javax.annotation.Nullable
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedFareRules detailedFareRules = (DetailedFareRules) o;
    return Objects.equals(this.fareBasis, detailedFareRules.fareBasis) &&
        Objects.equals(this.fareNotes, detailedFareRules.fareNotes) &&
        Objects.equals(this.name, detailedFareRules.name) &&
        Objects.equals(this.segmentId, detailedFareRules.segmentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fareBasis, fareNotes, name, segmentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedFareRules {\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    fareNotes: ").append(toIndentedString(fareNotes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fareBasis");
    openapiFields.add("fareNotes");
    openapiFields.add("name");
    openapiFields.add("segmentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedFareRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedFareRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedFareRules is not found in the empty JSON string", DetailedFareRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedFareRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedFareRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fareBasis") != null && !jsonObj.get("fareBasis").isJsonNull()) && !jsonObj.get("fareBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fareBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fareBasis").toString()));
      }
      // validate the optional field `fareNotes`
      if (jsonObj.get("fareNotes") != null && !jsonObj.get("fareNotes").isJsonNull()) {
        TermAndCondition.validateJsonElement(jsonObj.get("fareNotes"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("segmentId") != null && !jsonObj.get("segmentId").isJsonNull()) && !jsonObj.get("segmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedFareRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedFareRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedFareRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedFareRules.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedFareRules>() {
           @Override
           public void write(JsonWriter out, DetailedFareRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedFareRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedFareRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedFareRules
   * @throws IOException if the JSON string is invalid with respect to DetailedFareRules
   */
  public static DetailedFareRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedFareRules.class);
  }

  /**
   * Convert an instance of DetailedFareRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

