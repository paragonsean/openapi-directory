/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhone::OAIPhone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhone::OAIPhone() {
    this->initializeModel();
}

OAIPhone::~OAIPhone() {}

void OAIPhone::initializeModel() {

    m_country_calling_code_isSet = false;
    m_country_calling_code_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAIPhone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhone::fromJsonObject(QJsonObject json) {

    m_country_calling_code_isValid = ::OpenAPI::fromJsonValue(m_country_calling_code, json[QString("countryCallingCode")]);
    m_country_calling_code_isSet = !json[QString("countryCallingCode")].isNull() && m_country_calling_code_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAIPhone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhone::asJsonObject() const {
    QJsonObject obj;
    if (m_country_calling_code_isSet) {
        obj.insert(QString("countryCallingCode"), ::OpenAPI::toJsonValue(m_country_calling_code));
    }
    if (m_device_type.isSet()) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAIPhone::getCountryCallingCode() const {
    return m_country_calling_code;
}
void OAIPhone::setCountryCallingCode(const QString &country_calling_code) {
    m_country_calling_code = country_calling_code;
    m_country_calling_code_isSet = true;
}

bool OAIPhone::is_country_calling_code_Set() const{
    return m_country_calling_code_isSet;
}

bool OAIPhone::is_country_calling_code_Valid() const{
    return m_country_calling_code_isValid;
}

OAIPhoneDeviceType OAIPhone::getDeviceType() const {
    return m_device_type;
}
void OAIPhone::setDeviceType(const OAIPhoneDeviceType &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIPhone::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIPhone::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIPhone::getNumber() const {
    return m_number;
}
void OAIPhone::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPhone::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPhone::is_number_Valid() const{
    return m_number_isValid;
}

bool OAIPhone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_calling_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
