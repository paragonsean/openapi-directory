/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherServices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtherServices::OAIOtherServices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtherServices::OAIOtherServices() {
    this->initializeModel();
}

OAIOtherServices::~OAIOtherServices() {}

void OAIOtherServices::initializeModel() {

    m_bookable_by_itinerary_isSet = false;
    m_bookable_by_itinerary_isValid = false;

    m_bookable_by_traveler_isSet = false;
    m_bookable_by_traveler_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_segment_ids_isSet = false;
    m_segment_ids_isValid = false;

    m_traveler_ids_isSet = false;
    m_traveler_ids_isValid = false;
}

void OAIOtherServices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtherServices::fromJsonObject(QJsonObject json) {

    m_bookable_by_itinerary_isValid = ::OpenAPI::fromJsonValue(m_bookable_by_itinerary, json[QString("bookableByItinerary")]);
    m_bookable_by_itinerary_isSet = !json[QString("bookableByItinerary")].isNull() && m_bookable_by_itinerary_isValid;

    m_bookable_by_traveler_isValid = ::OpenAPI::fromJsonValue(m_bookable_by_traveler, json[QString("bookableByTraveler")]);
    m_bookable_by_traveler_isSet = !json[QString("bookableByTraveler")].isNull() && m_bookable_by_traveler_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_segment_ids_isValid = ::OpenAPI::fromJsonValue(m_segment_ids, json[QString("segmentIds")]);
    m_segment_ids_isSet = !json[QString("segmentIds")].isNull() && m_segment_ids_isValid;

    m_traveler_ids_isValid = ::OpenAPI::fromJsonValue(m_traveler_ids, json[QString("travelerIds")]);
    m_traveler_ids_isSet = !json[QString("travelerIds")].isNull() && m_traveler_ids_isValid;
}

QString OAIOtherServices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtherServices::asJsonObject() const {
    QJsonObject obj;
    if (m_bookable_by_itinerary_isSet) {
        obj.insert(QString("bookableByItinerary"), ::OpenAPI::toJsonValue(m_bookable_by_itinerary));
    }
    if (m_bookable_by_traveler_isSet) {
        obj.insert(QString("bookableByTraveler"), ::OpenAPI::toJsonValue(m_bookable_by_traveler));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_segment_ids.size() > 0) {
        obj.insert(QString("segmentIds"), ::OpenAPI::toJsonValue(m_segment_ids));
    }
    if (m_traveler_ids.size() > 0) {
        obj.insert(QString("travelerIds"), ::OpenAPI::toJsonValue(m_traveler_ids));
    }
    return obj;
}

bool OAIOtherServices::isBookableByItinerary() const {
    return m_bookable_by_itinerary;
}
void OAIOtherServices::setBookableByItinerary(const bool &bookable_by_itinerary) {
    m_bookable_by_itinerary = bookable_by_itinerary;
    m_bookable_by_itinerary_isSet = true;
}

bool OAIOtherServices::is_bookable_by_itinerary_Set() const{
    return m_bookable_by_itinerary_isSet;
}

bool OAIOtherServices::is_bookable_by_itinerary_Valid() const{
    return m_bookable_by_itinerary_isValid;
}

bool OAIOtherServices::isBookableByTraveler() const {
    return m_bookable_by_traveler;
}
void OAIOtherServices::setBookableByTraveler(const bool &bookable_by_traveler) {
    m_bookable_by_traveler = bookable_by_traveler;
    m_bookable_by_traveler_isSet = true;
}

bool OAIOtherServices::is_bookable_by_traveler_Set() const{
    return m_bookable_by_traveler_isSet;
}

bool OAIOtherServices::is_bookable_by_traveler_Valid() const{
    return m_bookable_by_traveler_isValid;
}

OAIServiceName OAIOtherServices::getName() const {
    return m_name;
}
void OAIOtherServices::setName(const OAIServiceName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOtherServices::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOtherServices::is_name_Valid() const{
    return m_name_isValid;
}

OAIElementaryPrice OAIOtherServices::getPrice() const {
    return m_price;
}
void OAIOtherServices::setPrice(const OAIElementaryPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOtherServices::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOtherServices::is_price_Valid() const{
    return m_price_isValid;
}

QList<QString> OAIOtherServices::getSegmentIds() const {
    return m_segment_ids;
}
void OAIOtherServices::setSegmentIds(const QList<QString> &segment_ids) {
    m_segment_ids = segment_ids;
    m_segment_ids_isSet = true;
}

bool OAIOtherServices::is_segment_ids_Set() const{
    return m_segment_ids_isSet;
}

bool OAIOtherServices::is_segment_ids_Valid() const{
    return m_segment_ids_isValid;
}

QList<QString> OAIOtherServices::getTravelerIds() const {
    return m_traveler_ids;
}
void OAIOtherServices::setTravelerIds(const QList<QString> &traveler_ids) {
    m_traveler_ids = traveler_ids;
    m_traveler_ids_isSet = true;
}

bool OAIOtherServices::is_traveler_ids_Set() const{
    return m_traveler_ids_isSet;
}

bool OAIOtherServices::is_traveler_ids_Valid() const{
    return m_traveler_ids_isValid;
}

bool OAIOtherServices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bookable_by_itinerary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookable_by_traveler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtherServices::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
