/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPassengerConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPassengerConditions::OAIPassengerConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPassengerConditions::OAIPassengerConditions() {
    this->initializeModel();
}

OAIPassengerConditions::~OAIPassengerConditions() {}

void OAIPassengerConditions::initializeModel() {

    m_air_france_discount_required_isSet = false;
    m_air_france_discount_required_isValid = false;

    m_date_of_birth_required_isSet = false;
    m_date_of_birth_required_isValid = false;

    m_document_issuance_city_required_isSet = false;
    m_document_issuance_city_required_isValid = false;

    m_document_required_isSet = false;
    m_document_required_isValid = false;

    m_gender_required_isSet = false;
    m_gender_required_isValid = false;

    m_redress_required_if_any_isSet = false;
    m_redress_required_if_any_isValid = false;

    m_residence_required_isSet = false;
    m_residence_required_isValid = false;

    m_spanish_resident_discount_required_isSet = false;
    m_spanish_resident_discount_required_isValid = false;

    m_traveler_id_isSet = false;
    m_traveler_id_isValid = false;
}

void OAIPassengerConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPassengerConditions::fromJsonObject(QJsonObject json) {

    m_air_france_discount_required_isValid = ::OpenAPI::fromJsonValue(m_air_france_discount_required, json[QString("airFranceDiscountRequired")]);
    m_air_france_discount_required_isSet = !json[QString("airFranceDiscountRequired")].isNull() && m_air_france_discount_required_isValid;

    m_date_of_birth_required_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth_required, json[QString("dateOfBirthRequired")]);
    m_date_of_birth_required_isSet = !json[QString("dateOfBirthRequired")].isNull() && m_date_of_birth_required_isValid;

    m_document_issuance_city_required_isValid = ::OpenAPI::fromJsonValue(m_document_issuance_city_required, json[QString("documentIssuanceCityRequired")]);
    m_document_issuance_city_required_isSet = !json[QString("documentIssuanceCityRequired")].isNull() && m_document_issuance_city_required_isValid;

    m_document_required_isValid = ::OpenAPI::fromJsonValue(m_document_required, json[QString("documentRequired")]);
    m_document_required_isSet = !json[QString("documentRequired")].isNull() && m_document_required_isValid;

    m_gender_required_isValid = ::OpenAPI::fromJsonValue(m_gender_required, json[QString("genderRequired")]);
    m_gender_required_isSet = !json[QString("genderRequired")].isNull() && m_gender_required_isValid;

    m_redress_required_if_any_isValid = ::OpenAPI::fromJsonValue(m_redress_required_if_any, json[QString("redressRequiredIfAny")]);
    m_redress_required_if_any_isSet = !json[QString("redressRequiredIfAny")].isNull() && m_redress_required_if_any_isValid;

    m_residence_required_isValid = ::OpenAPI::fromJsonValue(m_residence_required, json[QString("residenceRequired")]);
    m_residence_required_isSet = !json[QString("residenceRequired")].isNull() && m_residence_required_isValid;

    m_spanish_resident_discount_required_isValid = ::OpenAPI::fromJsonValue(m_spanish_resident_discount_required, json[QString("spanishResidentDiscountRequired")]);
    m_spanish_resident_discount_required_isSet = !json[QString("spanishResidentDiscountRequired")].isNull() && m_spanish_resident_discount_required_isValid;

    m_traveler_id_isValid = ::OpenAPI::fromJsonValue(m_traveler_id, json[QString("travelerId")]);
    m_traveler_id_isSet = !json[QString("travelerId")].isNull() && m_traveler_id_isValid;
}

QString OAIPassengerConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPassengerConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_air_france_discount_required_isSet) {
        obj.insert(QString("airFranceDiscountRequired"), ::OpenAPI::toJsonValue(m_air_france_discount_required));
    }
    if (m_date_of_birth_required_isSet) {
        obj.insert(QString("dateOfBirthRequired"), ::OpenAPI::toJsonValue(m_date_of_birth_required));
    }
    if (m_document_issuance_city_required_isSet) {
        obj.insert(QString("documentIssuanceCityRequired"), ::OpenAPI::toJsonValue(m_document_issuance_city_required));
    }
    if (m_document_required_isSet) {
        obj.insert(QString("documentRequired"), ::OpenAPI::toJsonValue(m_document_required));
    }
    if (m_gender_required_isSet) {
        obj.insert(QString("genderRequired"), ::OpenAPI::toJsonValue(m_gender_required));
    }
    if (m_redress_required_if_any_isSet) {
        obj.insert(QString("redressRequiredIfAny"), ::OpenAPI::toJsonValue(m_redress_required_if_any));
    }
    if (m_residence_required_isSet) {
        obj.insert(QString("residenceRequired"), ::OpenAPI::toJsonValue(m_residence_required));
    }
    if (m_spanish_resident_discount_required_isSet) {
        obj.insert(QString("spanishResidentDiscountRequired"), ::OpenAPI::toJsonValue(m_spanish_resident_discount_required));
    }
    if (m_traveler_id_isSet) {
        obj.insert(QString("travelerId"), ::OpenAPI::toJsonValue(m_traveler_id));
    }
    return obj;
}

bool OAIPassengerConditions::isAirFranceDiscountRequired() const {
    return m_air_france_discount_required;
}
void OAIPassengerConditions::setAirFranceDiscountRequired(const bool &air_france_discount_required) {
    m_air_france_discount_required = air_france_discount_required;
    m_air_france_discount_required_isSet = true;
}

bool OAIPassengerConditions::is_air_france_discount_required_Set() const{
    return m_air_france_discount_required_isSet;
}

bool OAIPassengerConditions::is_air_france_discount_required_Valid() const{
    return m_air_france_discount_required_isValid;
}

bool OAIPassengerConditions::isDateOfBirthRequired() const {
    return m_date_of_birth_required;
}
void OAIPassengerConditions::setDateOfBirthRequired(const bool &date_of_birth_required) {
    m_date_of_birth_required = date_of_birth_required;
    m_date_of_birth_required_isSet = true;
}

bool OAIPassengerConditions::is_date_of_birth_required_Set() const{
    return m_date_of_birth_required_isSet;
}

bool OAIPassengerConditions::is_date_of_birth_required_Valid() const{
    return m_date_of_birth_required_isValid;
}

bool OAIPassengerConditions::isDocumentIssuanceCityRequired() const {
    return m_document_issuance_city_required;
}
void OAIPassengerConditions::setDocumentIssuanceCityRequired(const bool &document_issuance_city_required) {
    m_document_issuance_city_required = document_issuance_city_required;
    m_document_issuance_city_required_isSet = true;
}

bool OAIPassengerConditions::is_document_issuance_city_required_Set() const{
    return m_document_issuance_city_required_isSet;
}

bool OAIPassengerConditions::is_document_issuance_city_required_Valid() const{
    return m_document_issuance_city_required_isValid;
}

bool OAIPassengerConditions::isDocumentRequired() const {
    return m_document_required;
}
void OAIPassengerConditions::setDocumentRequired(const bool &document_required) {
    m_document_required = document_required;
    m_document_required_isSet = true;
}

bool OAIPassengerConditions::is_document_required_Set() const{
    return m_document_required_isSet;
}

bool OAIPassengerConditions::is_document_required_Valid() const{
    return m_document_required_isValid;
}

bool OAIPassengerConditions::isGenderRequired() const {
    return m_gender_required;
}
void OAIPassengerConditions::setGenderRequired(const bool &gender_required) {
    m_gender_required = gender_required;
    m_gender_required_isSet = true;
}

bool OAIPassengerConditions::is_gender_required_Set() const{
    return m_gender_required_isSet;
}

bool OAIPassengerConditions::is_gender_required_Valid() const{
    return m_gender_required_isValid;
}

bool OAIPassengerConditions::isRedressRequiredIfAny() const {
    return m_redress_required_if_any;
}
void OAIPassengerConditions::setRedressRequiredIfAny(const bool &redress_required_if_any) {
    m_redress_required_if_any = redress_required_if_any;
    m_redress_required_if_any_isSet = true;
}

bool OAIPassengerConditions::is_redress_required_if_any_Set() const{
    return m_redress_required_if_any_isSet;
}

bool OAIPassengerConditions::is_redress_required_if_any_Valid() const{
    return m_redress_required_if_any_isValid;
}

bool OAIPassengerConditions::isResidenceRequired() const {
    return m_residence_required;
}
void OAIPassengerConditions::setResidenceRequired(const bool &residence_required) {
    m_residence_required = residence_required;
    m_residence_required_isSet = true;
}

bool OAIPassengerConditions::is_residence_required_Set() const{
    return m_residence_required_isSet;
}

bool OAIPassengerConditions::is_residence_required_Valid() const{
    return m_residence_required_isValid;
}

bool OAIPassengerConditions::isSpanishResidentDiscountRequired() const {
    return m_spanish_resident_discount_required;
}
void OAIPassengerConditions::setSpanishResidentDiscountRequired(const bool &spanish_resident_discount_required) {
    m_spanish_resident_discount_required = spanish_resident_discount_required;
    m_spanish_resident_discount_required_isSet = true;
}

bool OAIPassengerConditions::is_spanish_resident_discount_required_Set() const{
    return m_spanish_resident_discount_required_isSet;
}

bool OAIPassengerConditions::is_spanish_resident_discount_required_Valid() const{
    return m_spanish_resident_discount_required_isValid;
}

QString OAIPassengerConditions::getTravelerId() const {
    return m_traveler_id;
}
void OAIPassengerConditions::setTravelerId(const QString &traveler_id) {
    m_traveler_id = traveler_id;
    m_traveler_id_isSet = true;
}

bool OAIPassengerConditions::is_traveler_id_Set() const{
    return m_traveler_id_isSet;
}

bool OAIPassengerConditions::is_traveler_id_Valid() const{
    return m_traveler_id_isValid;
}

bool OAIPassengerConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_france_discount_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_issuance_city_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redress_required_if_any_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residence_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spanish_resident_discount_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPassengerConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
