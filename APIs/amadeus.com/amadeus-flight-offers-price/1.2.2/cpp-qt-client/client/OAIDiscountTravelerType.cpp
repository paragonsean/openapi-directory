/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscountTravelerType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscountTravelerType::OAIDiscountTravelerType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscountTravelerType::OAIDiscountTravelerType() {
    this->initializeModel();
}

OAIDiscountTravelerType::~OAIDiscountTravelerType() {}

void OAIDiscountTravelerType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDiscountTravelerType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDiscountTravelerType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SPANISH_CITIZEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscountTravelerType::SPANISH_CITIZEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EUROPEAN_CITIZEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscountTravelerType::EUROPEAN_CITIZEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOVERNMENT_WORKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscountTravelerType::GOVERNMENT_WORKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MILITARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscountTravelerType::MILITARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MINOR_WITHOUT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscountTravelerType::MINOR_WITHOUT_ID;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDiscountTravelerType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDiscountTravelerType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDiscountTravelerType::SPANISH_CITIZEN:
            val = "SPANISH_CITIZEN";
            break;
        case eOAIDiscountTravelerType::EUROPEAN_CITIZEN:
            val = "EUROPEAN_CITIZEN";
            break;
        case eOAIDiscountTravelerType::GOVERNMENT_WORKER:
            val = "GOVERNMENT_WORKER";
            break;
        case eOAIDiscountTravelerType::MILITARY:
            val = "MILITARY";
            break;
        case eOAIDiscountTravelerType::MINOR_WITHOUT_ID:
            val = "MINOR_WITHOUT_ID";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDiscountTravelerType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDiscountTravelerType::eOAIDiscountTravelerType OAIDiscountTravelerType::getValue() const {
    return m_value;
}

void OAIDiscountTravelerType::setValue(const OAIDiscountTravelerType::eOAIDiscountTravelerType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDiscountTravelerType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDiscountTravelerType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
