/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncluded_resources_map.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncluded_resources_map::OAIIncluded_resources_map(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncluded_resources_map::OAIIncluded_resources_map() {
    this->initializeModel();
}

OAIIncluded_resources_map::~OAIIncluded_resources_map() {}

void OAIIncluded_resources_map::initializeModel() {

    m_bags_isSet = false;
    m_bags_isValid = false;

    m_credit_card_fees_isSet = false;
    m_credit_card_fees_isValid = false;

    m_detailed_fare_rules_isSet = false;
    m_detailed_fare_rules_isValid = false;

    m_other_services_isSet = false;
    m_other_services_isValid = false;
}

void OAIIncluded_resources_map::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncluded_resources_map::fromJsonObject(QJsonObject json) {

    m_bags_isValid = ::OpenAPI::fromJsonValue(m_bags, json[QString("bags")]);
    m_bags_isSet = !json[QString("bags")].isNull() && m_bags_isValid;

    m_credit_card_fees_isValid = ::OpenAPI::fromJsonValue(m_credit_card_fees, json[QString("credit-card-fees")]);
    m_credit_card_fees_isSet = !json[QString("credit-card-fees")].isNull() && m_credit_card_fees_isValid;

    m_detailed_fare_rules_isValid = ::OpenAPI::fromJsonValue(m_detailed_fare_rules, json[QString("detailed-fare-rules")]);
    m_detailed_fare_rules_isSet = !json[QString("detailed-fare-rules")].isNull() && m_detailed_fare_rules_isValid;

    m_other_services_isValid = ::OpenAPI::fromJsonValue(m_other_services, json[QString("other-services")]);
    m_other_services_isSet = !json[QString("other-services")].isNull() && m_other_services_isValid;
}

QString OAIIncluded_resources_map::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncluded_resources_map::asJsonObject() const {
    QJsonObject obj;
    if (m_bags_isSet) {
        obj.insert(QString("bags"), ::OpenAPI::toJsonValue(m_bags));
    }
    if (m_credit_card_fees_isSet) {
        obj.insert(QString("credit-card-fees"), ::OpenAPI::toJsonValue(m_credit_card_fees));
    }
    if (m_detailed_fare_rules_isSet) {
        obj.insert(QString("detailed-fare-rules"), ::OpenAPI::toJsonValue(m_detailed_fare_rules));
    }
    if (m_other_services_isSet) {
        obj.insert(QString("other-services"), ::OpenAPI::toJsonValue(m_other_services));
    }
    return obj;
}

OAIObject OAIIncluded_resources_map::getBags() const {
    return m_bags;
}
void OAIIncluded_resources_map::setBags(const OAIObject &bags) {
    m_bags = bags;
    m_bags_isSet = true;
}

bool OAIIncluded_resources_map::is_bags_Set() const{
    return m_bags_isSet;
}

bool OAIIncluded_resources_map::is_bags_Valid() const{
    return m_bags_isValid;
}

OAIObject OAIIncluded_resources_map::getCreditCardFees() const {
    return m_credit_card_fees;
}
void OAIIncluded_resources_map::setCreditCardFees(const OAIObject &credit_card_fees) {
    m_credit_card_fees = credit_card_fees;
    m_credit_card_fees_isSet = true;
}

bool OAIIncluded_resources_map::is_credit_card_fees_Set() const{
    return m_credit_card_fees_isSet;
}

bool OAIIncluded_resources_map::is_credit_card_fees_Valid() const{
    return m_credit_card_fees_isValid;
}

OAIObject OAIIncluded_resources_map::getDetailedFareRules() const {
    return m_detailed_fare_rules;
}
void OAIIncluded_resources_map::setDetailedFareRules(const OAIObject &detailed_fare_rules) {
    m_detailed_fare_rules = detailed_fare_rules;
    m_detailed_fare_rules_isSet = true;
}

bool OAIIncluded_resources_map::is_detailed_fare_rules_Set() const{
    return m_detailed_fare_rules_isSet;
}

bool OAIIncluded_resources_map::is_detailed_fare_rules_Valid() const{
    return m_detailed_fare_rules_isValid;
}

OAIObject OAIIncluded_resources_map::getOtherServices() const {
    return m_other_services;
}
void OAIIncluded_resources_map::setOtherServices(const OAIObject &other_services) {
    m_other_services = other_services;
    m_other_services_isSet = true;
}

bool OAIIncluded_resources_map::is_other_services_Set() const{
    return m_other_services_isSet;
}

bool OAIIncluded_resources_map::is_other_services_Valid() const{
    return m_other_services_isValid;
}

bool OAIIncluded_resources_map::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_card_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_fare_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncluded_resources_map::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
