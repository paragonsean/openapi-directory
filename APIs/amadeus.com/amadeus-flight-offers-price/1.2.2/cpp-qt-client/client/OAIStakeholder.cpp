/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStakeholder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStakeholder::OAIStakeholder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStakeholder::OAIStakeholder() {
    this->initializeModel();
}

OAIStakeholder::~OAIStakeholder() {}

void OAIStakeholder::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIStakeholder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStakeholder::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIStakeholder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStakeholder::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_gender.isSet()) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QDate OAIStakeholder::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIStakeholder::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIStakeholder::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIStakeholder::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QList<OAIIdentityDocument> OAIStakeholder::getDocuments() const {
    return m_documents;
}
void OAIStakeholder::setDocuments(const QList<OAIIdentityDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIStakeholder::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIStakeholder::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIStakeholderGender OAIStakeholder::getGender() const {
    return m_gender;
}
void OAIStakeholder::setGender(const OAIStakeholderGender &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIStakeholder::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIStakeholder::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIStakeholder::getId() const {
    return m_id;
}
void OAIStakeholder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStakeholder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStakeholder::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAIStakeholder::getName() const {
    return m_name;
}
void OAIStakeholder::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStakeholder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStakeholder::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIStakeholder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStakeholder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
