/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import ContactDictionary from './ContactDictionary';
import ContactPurpose from './ContactPurpose';
import Name from './Name';
import Phone from './Phone';

/**
 * The Contact model module.
 * @module model/Contact
 * @version 1.2.2
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * contact information
     * @alias module:model/Contact
     * @implements module:model/ContactDictionary
     */
    constructor() { 
        ContactDictionary.initialize(this);
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();
            ContactDictionary.constructFromObject(data, obj);

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('addresseeName')) {
                obj['addresseeName'] = Name.constructFromObject(data['addresseeName']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ContactPurpose.constructFromObject(data['purpose']);
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], [Phone]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `addresseeName`
        if (data['addresseeName']) { // data not null
          Name.validateJSON(data['addresseeName']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        if (data['phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phones'])) {
                throw new Error("Expected the field `phones` to be an array in the JSON data but got " + data['phones']);
            }
            // validate the optional field `phones` (array)
            for (const item of data['phones']) {
                Phone.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
Contact.prototype['address'] = undefined;

/**
 * @member {module:model/Name} addresseeName
 */
Contact.prototype['addresseeName'] = undefined;

/**
 * the preferred language of communication with this Contact
 * @member {String} language
 */
Contact.prototype['language'] = undefined;

/**
 * @member {module:model/ContactPurpose} purpose
 */
Contact.prototype['purpose'] = undefined;

/**
 * Name of the company
 * @member {String} companyName
 */
Contact.prototype['companyName'] = undefined;

/**
 * Email address (e.g. john@smith.com)
 * @member {String} emailAddress
 */
Contact.prototype['emailAddress'] = undefined;

/**
 * Phone numbers
 * @member {Array.<module:model/Phone>} phones
 */
Contact.prototype['phones'] = undefined;


// Implement ContactDictionary interface:
/**
 * @member {module:model/Address} address
 */
ContactDictionary.prototype['address'] = undefined;
/**
 * @member {module:model/Name} addresseeName
 */
ContactDictionary.prototype['addresseeName'] = undefined;
/**
 * the preferred language of communication with this Contact
 * @member {String} language
 */
ContactDictionary.prototype['language'] = undefined;
/**
 * @member {module:model/ContactPurpose} purpose
 */
ContactDictionary.prototype['purpose'] = undefined;




export default Contact;

