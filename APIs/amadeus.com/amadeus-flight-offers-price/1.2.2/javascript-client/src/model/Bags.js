/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaggageAllowance from './BaggageAllowance';
import ElementaryPrice from './ElementaryPrice';

/**
 * The Bags model module.
 * @module model/Bags
 * @version 1.2.2
 */
class Bags {
    /**
     * Constructs a new <code>Bags</code>.
     * checked bag
     * @alias module:model/Bags
     * @implements module:model/BaggageAllowance
     */
    constructor() { 
        BaggageAllowance.initialize(this);
        Bags.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bags</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bags} obj Optional instance to populate.
     * @return {module:model/Bags} The populated <code>Bags</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bags();
            BaggageAllowance.constructFromObject(data, obj);

            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('weightUnit')) {
                obj['weightUnit'] = ApiClient.convertToType(data['weightUnit'], 'String');
            }
            if (data.hasOwnProperty('bookableByItinerary')) {
                obj['bookableByItinerary'] = ApiClient.convertToType(data['bookableByItinerary'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ElementaryPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('segmentIds')) {
                obj['segmentIds'] = ApiClient.convertToType(data['segmentIds'], ['String']);
            }
            if (data.hasOwnProperty('travelerIds')) {
                obj['travelerIds'] = ApiClient.convertToType(data['travelerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bags</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bags</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['weightUnit'] && !(typeof data['weightUnit'] === 'string' || data['weightUnit'] instanceof String)) {
            throw new Error("Expected the field `weightUnit` to be a primitive type in the JSON string but got " + data['weightUnit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ElementaryPrice.validateJSON(data['price']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segmentIds'])) {
            throw new Error("Expected the field `segmentIds` to be an array in the JSON data but got " + data['segmentIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['travelerIds'])) {
            throw new Error("Expected the field `travelerIds` to be an array in the JSON data but got " + data['travelerIds']);
        }

        return true;
    }


}



/**
 * Total number of units
 * @member {Number} quantity
 */
Bags.prototype['quantity'] = undefined;

/**
 * Weight of the baggage allowance
 * @member {Number} weight
 */
Bags.prototype['weight'] = undefined;

/**
 * Code to qualify unit as pounds or kilos
 * @member {String} weightUnit
 */
Bags.prototype['weightUnit'] = undefined;

/**
 * Specify if the service is bookable by itinerary  or for all itineraries
 * @member {Boolean} bookableByItinerary
 */
Bags.prototype['bookableByItinerary'] = undefined;

/**
 * Type of service
 * @member {String} name
 */
Bags.prototype['name'] = undefined;

/**
 * @member {module:model/ElementaryPrice} price
 */
Bags.prototype['price'] = undefined;

/**
 * Id of the segment concerned by the service
 * @member {Array.<String>} segmentIds
 */
Bags.prototype['segmentIds'] = undefined;

/**
 * Id of the traveler concerned by the service
 * @member {Array.<String>} travelerIds
 */
Bags.prototype['travelerIds'] = undefined;


// Implement BaggageAllowance interface:
/**
 * Total number of units
 * @member {Number} quantity
 */
BaggageAllowance.prototype['quantity'] = undefined;
/**
 * Weight of the baggage allowance
 * @member {Number} weight
 */
BaggageAllowance.prototype['weight'] = undefined;
/**
 * Code to qualify unit as pounds or kilos
 * @member {String} weightUnit
 */
BaggageAllowance.prototype['weightUnit'] = undefined;




export default Bags;

