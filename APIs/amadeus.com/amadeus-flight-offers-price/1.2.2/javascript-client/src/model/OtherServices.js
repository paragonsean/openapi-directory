/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElementaryPrice from './ElementaryPrice';
import ServiceName from './ServiceName';

/**
 * The OtherServices model module.
 * @module model/OtherServices
 * @version 1.2.2
 */
class OtherServices {
    /**
     * Constructs a new <code>OtherServices</code>.
     * @alias module:model/OtherServices
     */
    constructor() { 
        
        OtherServices.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OtherServices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OtherServices} obj Optional instance to populate.
     * @return {module:model/OtherServices} The populated <code>OtherServices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OtherServices();

            if (data.hasOwnProperty('bookableByItinerary')) {
                obj['bookableByItinerary'] = ApiClient.convertToType(data['bookableByItinerary'], 'Boolean');
            }
            if (data.hasOwnProperty('bookableByTraveler')) {
                obj['bookableByTraveler'] = ApiClient.convertToType(data['bookableByTraveler'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ServiceName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ElementaryPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('segmentIds')) {
                obj['segmentIds'] = ApiClient.convertToType(data['segmentIds'], ['String']);
            }
            if (data.hasOwnProperty('travelerIds')) {
                obj['travelerIds'] = ApiClient.convertToType(data['travelerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OtherServices</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OtherServices</code>.
     */
    static validateJSON(data) {
        // validate the optional field `price`
        if (data['price']) { // data not null
          ElementaryPrice.validateJSON(data['price']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segmentIds'])) {
            throw new Error("Expected the field `segmentIds` to be an array in the JSON data but got " + data['segmentIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['travelerIds'])) {
            throw new Error("Expected the field `travelerIds` to be an array in the JSON data but got " + data['travelerIds']);
        }

        return true;
    }


}



/**
 * Specify if the service is bookable by itinerary or for all itineraries
 * @member {Boolean} bookableByItinerary
 */
OtherServices.prototype['bookableByItinerary'] = undefined;

/**
 * Specify if the service is bookable by traveler or for all travelers
 * @member {Boolean} bookableByTraveler
 */
OtherServices.prototype['bookableByTraveler'] = undefined;

/**
 * @member {module:model/ServiceName} name
 */
OtherServices.prototype['name'] = undefined;

/**
 * @member {module:model/ElementaryPrice} price
 */
OtherServices.prototype['price'] = undefined;

/**
 * Id of the segment concerned by the service
 * @member {Array.<String>} segmentIds
 */
OtherServices.prototype['segmentIds'] = undefined;

/**
 * Id of the traveler concerned by the service
 * @member {Array.<String>} travelerIds
 */
OtherServices.prototype['travelerIds'] = undefined;






export default OtherServices;

