/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookingRequirements from './BookingRequirements';
import FlightOffer from './FlightOffer';

/**
 * The FlightOfferPricingOut model module.
 * @module model/FlightOfferPricingOut
 * @version 1.2.2
 */
class FlightOfferPricingOut {
    /**
     * Constructs a new <code>FlightOfferPricingOut</code>.
     * priced flight Offers and conditions
     * @alias module:model/FlightOfferPricingOut
     * @param flightOffers {Array.<module:model/FlightOffer>} list of flight offer to price
     * @param type {String} the resource name
     */
    constructor(flightOffers, type) { 
        
        FlightOfferPricingOut.initialize(this, flightOffers, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flightOffers, type) { 
        obj['flightOffers'] = flightOffers;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FlightOfferPricingOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightOfferPricingOut} obj Optional instance to populate.
     * @return {module:model/FlightOfferPricingOut} The populated <code>FlightOfferPricingOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightOfferPricingOut();

            if (data.hasOwnProperty('bookingRequirements')) {
                obj['bookingRequirements'] = BookingRequirements.constructFromObject(data['bookingRequirements']);
            }
            if (data.hasOwnProperty('flightOffers')) {
                obj['flightOffers'] = ApiClient.convertToType(data['flightOffers'], [FlightOffer]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightOfferPricingOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightOfferPricingOut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlightOfferPricingOut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bookingRequirements`
        if (data['bookingRequirements']) { // data not null
          BookingRequirements.validateJSON(data['bookingRequirements']);
        }
        if (data['flightOffers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flightOffers'])) {
                throw new Error("Expected the field `flightOffers` to be an array in the JSON data but got " + data['flightOffers']);
            }
            // validate the optional field `flightOffers` (array)
            for (const item of data['flightOffers']) {
                FlightOffer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FlightOfferPricingOut.RequiredProperties = ["flightOffers", "type"];

/**
 * @member {module:model/BookingRequirements} bookingRequirements
 */
FlightOfferPricingOut.prototype['bookingRequirements'] = undefined;

/**
 * list of flight offer to price
 * @member {Array.<module:model/FlightOffer>} flightOffers
 */
FlightOfferPricingOut.prototype['flightOffers'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
FlightOfferPricingOut.prototype['type'] = undefined;






export default FlightOfferPricingOut;

