/**
 * Flight Offers Price
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error500 from '../model/Error500';
import GetPriceQuery from '../model/GetPriceQuery';
import SuccessPricing from '../model/SuccessPricing';

/**
* Shopping service.
* @module api/ShoppingApi
* @version 1.2.2
*/
export default class ShoppingApi {

    /**
    * Constructs a new ShoppingApi. 
    * @alias module:api/ShoppingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteAirOffers operation.
     * @callback module:api/ShoppingApi~quoteAirOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessPricing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm pricing of given flightOffers.
     * @param {String} xHTTPMethodOverride the HTTP method to apply
     * @param {module:model/GetPriceQuery} priceFlightOffersBody list of criteria to confirm the price of a dedicated flight-offers
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [include] Sub-resources to be included:  * **credit-card-fees** to get the credit card fee applied on the booking  * **bags** to get extra bag options  * **other-services** to get services options  * **detailed-fare-rules** to get detailed fare rules options 
     * @param {Boolean} [forceClass = false)] parameter to force the usage of booking class for pricing - **true**, to for pricing with the specified booking class - **false**, to get the best available price 
     * @param {module:api/ShoppingApi~quoteAirOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessPricing}
     */
    quoteAirOffers(xHTTPMethodOverride, priceFlightOffersBody, opts, callback) {
      opts = opts || {};
      let postBody = priceFlightOffersBody;
      // verify the required parameter 'xHTTPMethodOverride' is set
      if (xHTTPMethodOverride === undefined || xHTTPMethodOverride === null) {
        throw new Error("Missing the required parameter 'xHTTPMethodOverride' when calling quoteAirOffers");
      }
      // verify the required parameter 'priceFlightOffersBody' is set
      if (priceFlightOffersBody === undefined || priceFlightOffersBody === null) {
        throw new Error("Missing the required parameter 'priceFlightOffersBody' when calling quoteAirOffers");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'forceClass': opts['forceClass']
      };
      let headerParams = {
        'X-HTTP-Method-Override': xHTTPMethodOverride
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.amadeus+json'];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = SuccessPricing;
      return this.apiClient.callApi(
        '/shopping/flight-offers/pricing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
