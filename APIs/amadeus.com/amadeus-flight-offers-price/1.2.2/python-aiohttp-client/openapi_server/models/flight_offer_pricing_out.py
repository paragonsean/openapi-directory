# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_requirements import BookingRequirements
from openapi_server.models.flight_offer import FlightOffer
from openapi_server import util


class FlightOfferPricingOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_requirements: BookingRequirements=None, flight_offers: List[FlightOffer]=None, type: str=None):
        """FlightOfferPricingOut - a model defined in OpenAPI

        :param booking_requirements: The booking_requirements of this FlightOfferPricingOut.
        :param flight_offers: The flight_offers of this FlightOfferPricingOut.
        :param type: The type of this FlightOfferPricingOut.
        """
        self.openapi_types = {
            'booking_requirements': BookingRequirements,
            'flight_offers': List[FlightOffer],
            'type': str
        }

        self.attribute_map = {
            'booking_requirements': 'bookingRequirements',
            'flight_offers': 'flightOffers',
            'type': 'type'
        }

        self._booking_requirements = booking_requirements
        self._flight_offers = flight_offers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightOfferPricingOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightOfferPricingOut of this FlightOfferPricingOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_requirements(self):
        """Gets the booking_requirements of this FlightOfferPricingOut.


        :return: The booking_requirements of this FlightOfferPricingOut.
        :rtype: BookingRequirements
        """
        return self._booking_requirements

    @booking_requirements.setter
    def booking_requirements(self, booking_requirements):
        """Sets the booking_requirements of this FlightOfferPricingOut.


        :param booking_requirements: The booking_requirements of this FlightOfferPricingOut.
        :type booking_requirements: BookingRequirements
        """

        self._booking_requirements = booking_requirements

    @property
    def flight_offers(self):
        """Gets the flight_offers of this FlightOfferPricingOut.

        list of flight offer to price

        :return: The flight_offers of this FlightOfferPricingOut.
        :rtype: List[FlightOffer]
        """
        return self._flight_offers

    @flight_offers.setter
    def flight_offers(self, flight_offers):
        """Sets the flight_offers of this FlightOfferPricingOut.

        list of flight offer to price

        :param flight_offers: The flight_offers of this FlightOfferPricingOut.
        :type flight_offers: List[FlightOffer]
        """
        if flight_offers is None:
            raise ValueError("Invalid value for `flight_offers`, must not be `None`")
        if flight_offers is not None and len(flight_offers) > 6:
            raise ValueError("Invalid value for `flight_offers`, number of items must be less than or equal to `6`")
        if flight_offers is not None and len(flight_offers) < 1:
            raise ValueError("Invalid value for `flight_offers`, number of items must be greater than or equal to `1`")

        self._flight_offers = flight_offers

    @property
    def type(self):
        """Gets the type of this FlightOfferPricingOut.

        the resource name

        :return: The type of this FlightOfferPricingOut.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlightOfferPricingOut.

        the resource name

        :param type: The type of this FlightOfferPricingOut.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
