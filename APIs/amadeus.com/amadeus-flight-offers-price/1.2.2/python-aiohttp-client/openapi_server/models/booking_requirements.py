# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.passenger_conditions import PassengerConditions
from openapi_server import util


class BookingRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address_required: bool=None, invoice_address_required: bool=None, mailing_address_required: bool=None, mobile_phone_number_required: bool=None, phone_country_code_required: bool=None, phone_number_required: bool=None, postal_code_required: bool=None, traveler_requirements: List[PassengerConditions]=None):
        """BookingRequirements - a model defined in OpenAPI

        :param email_address_required: The email_address_required of this BookingRequirements.
        :param invoice_address_required: The invoice_address_required of this BookingRequirements.
        :param mailing_address_required: The mailing_address_required of this BookingRequirements.
        :param mobile_phone_number_required: The mobile_phone_number_required of this BookingRequirements.
        :param phone_country_code_required: The phone_country_code_required of this BookingRequirements.
        :param phone_number_required: The phone_number_required of this BookingRequirements.
        :param postal_code_required: The postal_code_required of this BookingRequirements.
        :param traveler_requirements: The traveler_requirements of this BookingRequirements.
        """
        self.openapi_types = {
            'email_address_required': bool,
            'invoice_address_required': bool,
            'mailing_address_required': bool,
            'mobile_phone_number_required': bool,
            'phone_country_code_required': bool,
            'phone_number_required': bool,
            'postal_code_required': bool,
            'traveler_requirements': List[PassengerConditions]
        }

        self.attribute_map = {
            'email_address_required': 'emailAddressRequired',
            'invoice_address_required': 'invoiceAddressRequired',
            'mailing_address_required': 'mailingAddressRequired',
            'mobile_phone_number_required': 'mobilePhoneNumberRequired',
            'phone_country_code_required': 'phoneCountryCodeRequired',
            'phone_number_required': 'phoneNumberRequired',
            'postal_code_required': 'postalCodeRequired',
            'traveler_requirements': 'travelerRequirements'
        }

        self._email_address_required = email_address_required
        self._invoice_address_required = invoice_address_required
        self._mailing_address_required = mailing_address_required
        self._mobile_phone_number_required = mobile_phone_number_required
        self._phone_country_code_required = phone_country_code_required
        self._phone_number_required = phone_number_required
        self._postal_code_required = postal_code_required
        self._traveler_requirements = traveler_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookingRequirements of this BookingRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address_required(self):
        """Gets the email_address_required of this BookingRequirements.

        If true, an email address is required for the creation of the flight-order

        :return: The email_address_required of this BookingRequirements.
        :rtype: bool
        """
        return self._email_address_required

    @email_address_required.setter
    def email_address_required(self, email_address_required):
        """Sets the email_address_required of this BookingRequirements.

        If true, an email address is required for the creation of the flight-order

        :param email_address_required: The email_address_required of this BookingRequirements.
        :type email_address_required: bool
        """

        self._email_address_required = email_address_required

    @property
    def invoice_address_required(self):
        """Gets the invoice_address_required of this BookingRequirements.

        If true, an invoice address is required for the creation of the flight-order

        :return: The invoice_address_required of this BookingRequirements.
        :rtype: bool
        """
        return self._invoice_address_required

    @invoice_address_required.setter
    def invoice_address_required(self, invoice_address_required):
        """Sets the invoice_address_required of this BookingRequirements.

        If true, an invoice address is required for the creation of the flight-order

        :param invoice_address_required: The invoice_address_required of this BookingRequirements.
        :type invoice_address_required: bool
        """

        self._invoice_address_required = invoice_address_required

    @property
    def mailing_address_required(self):
        """Gets the mailing_address_required of this BookingRequirements.

        If true, a postal address is required for the creation of the flight-order

        :return: The mailing_address_required of this BookingRequirements.
        :rtype: bool
        """
        return self._mailing_address_required

    @mailing_address_required.setter
    def mailing_address_required(self, mailing_address_required):
        """Sets the mailing_address_required of this BookingRequirements.

        If true, a postal address is required for the creation of the flight-order

        :param mailing_address_required: The mailing_address_required of this BookingRequirements.
        :type mailing_address_required: bool
        """

        self._mailing_address_required = mailing_address_required

    @property
    def mobile_phone_number_required(self):
        """Gets the mobile_phone_number_required of this BookingRequirements.

        If true, a mobile phone number is required for the creation of the flight-order

        :return: The mobile_phone_number_required of this BookingRequirements.
        :rtype: bool
        """
        return self._mobile_phone_number_required

    @mobile_phone_number_required.setter
    def mobile_phone_number_required(self, mobile_phone_number_required):
        """Sets the mobile_phone_number_required of this BookingRequirements.

        If true, a mobile phone number is required for the creation of the flight-order

        :param mobile_phone_number_required: The mobile_phone_number_required of this BookingRequirements.
        :type mobile_phone_number_required: bool
        """

        self._mobile_phone_number_required = mobile_phone_number_required

    @property
    def phone_country_code_required(self):
        """Gets the phone_country_code_required of this BookingRequirements.

        If true, the phone country code (e.g. '33') associated for each phone number is required for the creation of the flight-order

        :return: The phone_country_code_required of this BookingRequirements.
        :rtype: bool
        """
        return self._phone_country_code_required

    @phone_country_code_required.setter
    def phone_country_code_required(self, phone_country_code_required):
        """Sets the phone_country_code_required of this BookingRequirements.

        If true, the phone country code (e.g. '33') associated for each phone number is required for the creation of the flight-order

        :param phone_country_code_required: The phone_country_code_required of this BookingRequirements.
        :type phone_country_code_required: bool
        """

        self._phone_country_code_required = phone_country_code_required

    @property
    def phone_number_required(self):
        """Gets the phone_number_required of this BookingRequirements.

        If true, a phone number is required for the creation of the flight-order

        :return: The phone_number_required of this BookingRequirements.
        :rtype: bool
        """
        return self._phone_number_required

    @phone_number_required.setter
    def phone_number_required(self, phone_number_required):
        """Sets the phone_number_required of this BookingRequirements.

        If true, a phone number is required for the creation of the flight-order

        :param phone_number_required: The phone_number_required of this BookingRequirements.
        :type phone_number_required: bool
        """

        self._phone_number_required = phone_number_required

    @property
    def postal_code_required(self):
        """Gets the postal_code_required of this BookingRequirements.

        If true, a postal code is required for the creation of the flight-order

        :return: The postal_code_required of this BookingRequirements.
        :rtype: bool
        """
        return self._postal_code_required

    @postal_code_required.setter
    def postal_code_required(self, postal_code_required):
        """Sets the postal_code_required of this BookingRequirements.

        If true, a postal code is required for the creation of the flight-order

        :param postal_code_required: The postal_code_required of this BookingRequirements.
        :type postal_code_required: bool
        """

        self._postal_code_required = postal_code_required

    @property
    def traveler_requirements(self):
        """Gets the traveler_requirements of this BookingRequirements.

        traveler pricing condition

        :return: The traveler_requirements of this BookingRequirements.
        :rtype: List[PassengerConditions]
        """
        return self._traveler_requirements

    @traveler_requirements.setter
    def traveler_requirements(self, traveler_requirements):
        """Sets the traveler_requirements of this BookingRequirements.

        traveler pricing condition

        :param traveler_requirements: The traveler_requirements of this BookingRequirements.
        :type traveler_requirements: List[PassengerConditions]
        """

        self._traveler_requirements = traveler_requirements
