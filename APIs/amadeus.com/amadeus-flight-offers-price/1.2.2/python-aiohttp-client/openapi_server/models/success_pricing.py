# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dictionaries import Dictionaries
from openapi_server.models.flight_offer_pricing_out import FlightOfferPricingOut
from openapi_server.models.included_resources_map import IncludedResourcesMap
from openapi_server.models.issue import Issue
from openapi_server import util


class SuccessPricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: FlightOfferPricingOut=None, dictionaries: Dictionaries=None, included: IncludedResourcesMap=None, warnings: List[Issue]=None):
        """SuccessPricing - a model defined in OpenAPI

        :param data: The data of this SuccessPricing.
        :param dictionaries: The dictionaries of this SuccessPricing.
        :param included: The included of this SuccessPricing.
        :param warnings: The warnings of this SuccessPricing.
        """
        self.openapi_types = {
            'data': FlightOfferPricingOut,
            'dictionaries': Dictionaries,
            'included': IncludedResourcesMap,
            'warnings': List[Issue]
        }

        self.attribute_map = {
            'data': 'data',
            'dictionaries': 'dictionaries',
            'included': 'included',
            'warnings': 'warnings'
        }

        self._data = data
        self._dictionaries = dictionaries
        self._included = included
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessPricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Success_Pricing of this SuccessPricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this SuccessPricing.


        :return: The data of this SuccessPricing.
        :rtype: FlightOfferPricingOut
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SuccessPricing.


        :param data: The data of this SuccessPricing.
        :type data: FlightOfferPricingOut
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def dictionaries(self):
        """Gets the dictionaries of this SuccessPricing.


        :return: The dictionaries of this SuccessPricing.
        :rtype: Dictionaries
        """
        return self._dictionaries

    @dictionaries.setter
    def dictionaries(self, dictionaries):
        """Sets the dictionaries of this SuccessPricing.


        :param dictionaries: The dictionaries of this SuccessPricing.
        :type dictionaries: Dictionaries
        """

        self._dictionaries = dictionaries

    @property
    def included(self):
        """Gets the included of this SuccessPricing.


        :return: The included of this SuccessPricing.
        :rtype: IncludedResourcesMap
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this SuccessPricing.


        :param included: The included of this SuccessPricing.
        :type included: IncludedResourcesMap
        """

        self._included = included

    @property
    def warnings(self):
        """Gets the warnings of this SuccessPricing.


        :return: The warnings of this SuccessPricing.
        :rtype: List[Issue]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SuccessPricing.


        :param warnings: The warnings of this SuccessPricing.
        :type warnings: List[Issue]
        """

        self._warnings = warnings
