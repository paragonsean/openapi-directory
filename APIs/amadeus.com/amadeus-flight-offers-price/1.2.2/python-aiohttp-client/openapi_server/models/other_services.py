# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elementary_price import ElementaryPrice
from openapi_server.models.service_name import ServiceName
from openapi_server import util


class OtherServices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bookable_by_itinerary: bool=None, bookable_by_traveler: bool=None, name: ServiceName=None, price: ElementaryPrice=None, segment_ids: List[str]=None, traveler_ids: List[str]=None):
        """OtherServices - a model defined in OpenAPI

        :param bookable_by_itinerary: The bookable_by_itinerary of this OtherServices.
        :param bookable_by_traveler: The bookable_by_traveler of this OtherServices.
        :param name: The name of this OtherServices.
        :param price: The price of this OtherServices.
        :param segment_ids: The segment_ids of this OtherServices.
        :param traveler_ids: The traveler_ids of this OtherServices.
        """
        self.openapi_types = {
            'bookable_by_itinerary': bool,
            'bookable_by_traveler': bool,
            'name': ServiceName,
            'price': ElementaryPrice,
            'segment_ids': List[str],
            'traveler_ids': List[str]
        }

        self.attribute_map = {
            'bookable_by_itinerary': 'bookableByItinerary',
            'bookable_by_traveler': 'bookableByTraveler',
            'name': 'name',
            'price': 'price',
            'segment_ids': 'segmentIds',
            'traveler_ids': 'travelerIds'
        }

        self._bookable_by_itinerary = bookable_by_itinerary
        self._bookable_by_traveler = bookable_by_traveler
        self._name = name
        self._price = price
        self._segment_ids = segment_ids
        self._traveler_ids = traveler_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherServices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherServices of this OtherServices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bookable_by_itinerary(self):
        """Gets the bookable_by_itinerary of this OtherServices.

        Specify if the service is bookable by itinerary or for all itineraries

        :return: The bookable_by_itinerary of this OtherServices.
        :rtype: bool
        """
        return self._bookable_by_itinerary

    @bookable_by_itinerary.setter
    def bookable_by_itinerary(self, bookable_by_itinerary):
        """Sets the bookable_by_itinerary of this OtherServices.

        Specify if the service is bookable by itinerary or for all itineraries

        :param bookable_by_itinerary: The bookable_by_itinerary of this OtherServices.
        :type bookable_by_itinerary: bool
        """

        self._bookable_by_itinerary = bookable_by_itinerary

    @property
    def bookable_by_traveler(self):
        """Gets the bookable_by_traveler of this OtherServices.

        Specify if the service is bookable by traveler or for all travelers

        :return: The bookable_by_traveler of this OtherServices.
        :rtype: bool
        """
        return self._bookable_by_traveler

    @bookable_by_traveler.setter
    def bookable_by_traveler(self, bookable_by_traveler):
        """Sets the bookable_by_traveler of this OtherServices.

        Specify if the service is bookable by traveler or for all travelers

        :param bookable_by_traveler: The bookable_by_traveler of this OtherServices.
        :type bookable_by_traveler: bool
        """

        self._bookable_by_traveler = bookable_by_traveler

    @property
    def name(self):
        """Gets the name of this OtherServices.


        :return: The name of this OtherServices.
        :rtype: ServiceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OtherServices.


        :param name: The name of this OtherServices.
        :type name: ServiceName
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this OtherServices.


        :return: The price of this OtherServices.
        :rtype: ElementaryPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OtherServices.


        :param price: The price of this OtherServices.
        :type price: ElementaryPrice
        """

        self._price = price

    @property
    def segment_ids(self):
        """Gets the segment_ids of this OtherServices.

        Id of the segment concerned by the service

        :return: The segment_ids of this OtherServices.
        :rtype: List[str]
        """
        return self._segment_ids

    @segment_ids.setter
    def segment_ids(self, segment_ids):
        """Sets the segment_ids of this OtherServices.

        Id of the segment concerned by the service

        :param segment_ids: The segment_ids of this OtherServices.
        :type segment_ids: List[str]
        """

        self._segment_ids = segment_ids

    @property
    def traveler_ids(self):
        """Gets the traveler_ids of this OtherServices.

        Id of the traveler concerned by the service

        :return: The traveler_ids of this OtherServices.
        :rtype: List[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """Sets the traveler_ids of this OtherServices.

        Id of the traveler concerned by the service

        :param traveler_ids: The traveler_ids of this OtherServices.
        :type traveler_ids: List[str]
        """

        self._traveler_ids = traveler_ids
