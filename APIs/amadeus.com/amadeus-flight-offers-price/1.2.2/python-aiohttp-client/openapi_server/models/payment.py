# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_brand import PaymentBrand
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin_number: int=None, brand: PaymentBrand=None, flight_offer_ids: List[str]=None):
        """Payment - a model defined in OpenAPI

        :param bin_number: The bin_number of this Payment.
        :param brand: The brand of this Payment.
        :param flight_offer_ids: The flight_offer_ids of this Payment.
        """
        self.openapi_types = {
            'bin_number': int,
            'brand': PaymentBrand,
            'flight_offer_ids': List[str]
        }

        self.attribute_map = {
            'bin_number': 'binNumber',
            'brand': 'brand',
            'flight_offer_ids': 'flightOfferIds'
        }

        self._bin_number = bin_number
        self._brand = brand
        self._flight_offer_ids = flight_offer_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin_number(self):
        """Gets the bin_number of this Payment.

        The first 6 digits of the credit card

        :return: The bin_number of this Payment.
        :rtype: int
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this Payment.

        The first 6 digits of the credit card

        :param bin_number: The bin_number of this Payment.
        :type bin_number: int
        """

        self._bin_number = bin_number

    @property
    def brand(self):
        """Gets the brand of this Payment.


        :return: The brand of this Payment.
        :rtype: PaymentBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Payment.


        :param brand: The brand of this Payment.
        :type brand: PaymentBrand
        """

        self._brand = brand

    @property
    def flight_offer_ids(self):
        """Gets the flight_offer_ids of this Payment.

        Id of the flightOffers to pay

        :return: The flight_offer_ids of this Payment.
        :rtype: List[str]
        """
        return self._flight_offer_ids

    @flight_offer_ids.setter
    def flight_offer_ids(self, flight_offer_ids):
        """Sets the flight_offer_ids of this Payment.

        Id of the flightOffers to pay

        :param flight_offer_ids: The flight_offer_ids of this Payment.
        :type flight_offer_ids: List[str]
        """
        if flight_offer_ids is not None and len(flight_offer_ids) > 6:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be less than or equal to `6`")
        if flight_offer_ids is not None and len(flight_offer_ids) < 1:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be greater than or equal to `1`")

        self._flight_offer_ids = flight_offer_ids
