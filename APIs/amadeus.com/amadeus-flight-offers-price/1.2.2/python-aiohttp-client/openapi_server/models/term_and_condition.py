# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.description import Description
from openapi_server import util


class TermAndCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, circumstances: str=None, descriptions: List[Description]=None, max_penalty_amount: str=None, not_applicable: bool=None):
        """TermAndCondition - a model defined in OpenAPI

        :param category: The category of this TermAndCondition.
        :param circumstances: The circumstances of this TermAndCondition.
        :param descriptions: The descriptions of this TermAndCondition.
        :param max_penalty_amount: The max_penalty_amount of this TermAndCondition.
        :param not_applicable: The not_applicable of this TermAndCondition.
        """
        self.openapi_types = {
            'category': str,
            'circumstances': str,
            'descriptions': List[Description],
            'max_penalty_amount': str,
            'not_applicable': bool
        }

        self.attribute_map = {
            'category': 'category',
            'circumstances': 'circumstances',
            'descriptions': 'descriptions',
            'max_penalty_amount': 'maxPenaltyAmount',
            'not_applicable': 'notApplicable'
        }

        self._category = category
        self._circumstances = circumstances
        self._descriptions = descriptions
        self._max_penalty_amount = max_penalty_amount
        self._not_applicable = not_applicable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TermAndCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TermAndCondition of this TermAndCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TermAndCondition.

        This defines what type of modification is concerned in this rule.

        :return: The category of this TermAndCondition.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TermAndCondition.

        This defines what type of modification is concerned in this rule.

        :param category: The category of this TermAndCondition.
        :type category: str
        """
        allowed_values = ["REFUND", "EXCHANGE", "REVALIDATION", "REISSUE", "REBOOK", "CANCELLATION"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def circumstances(self):
        """Gets the circumstances of this TermAndCondition.


        :return: The circumstances of this TermAndCondition.
        :rtype: str
        """
        return self._circumstances

    @circumstances.setter
    def circumstances(self, circumstances):
        """Sets the circumstances of this TermAndCondition.


        :param circumstances: The circumstances of this TermAndCondition.
        :type circumstances: str
        """

        self._circumstances = circumstances

    @property
    def descriptions(self):
        """Gets the descriptions of this TermAndCondition.


        :return: The descriptions of this TermAndCondition.
        :rtype: List[Description]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this TermAndCondition.


        :param descriptions: The descriptions of this TermAndCondition.
        :type descriptions: List[Description]
        """

        self._descriptions = descriptions

    @property
    def max_penalty_amount(self):
        """Gets the max_penalty_amount of this TermAndCondition.


        :return: The max_penalty_amount of this TermAndCondition.
        :rtype: str
        """
        return self._max_penalty_amount

    @max_penalty_amount.setter
    def max_penalty_amount(self, max_penalty_amount):
        """Sets the max_penalty_amount of this TermAndCondition.


        :param max_penalty_amount: The max_penalty_amount of this TermAndCondition.
        :type max_penalty_amount: str
        """

        self._max_penalty_amount = max_penalty_amount

    @property
    def not_applicable(self):
        """Gets the not_applicable of this TermAndCondition.


        :return: The not_applicable of this TermAndCondition.
        :rtype: bool
        """
        return self._not_applicable

    @not_applicable.setter
    def not_applicable(self, not_applicable):
        """Sets the not_applicable of this TermAndCondition.


        :param not_applicable: The not_applicable of this TermAndCondition.
        :type not_applicable: bool
        """

        self._not_applicable = not_applicable
