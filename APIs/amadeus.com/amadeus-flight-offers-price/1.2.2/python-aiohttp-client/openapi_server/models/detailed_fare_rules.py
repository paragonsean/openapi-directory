# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.term_and_condition import TermAndCondition
from openapi_server import util


class DetailedFareRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fare_basis: str=None, fare_notes: TermAndCondition=None, name: str=None, segment_id: str=None):
        """DetailedFareRules - a model defined in OpenAPI

        :param fare_basis: The fare_basis of this DetailedFareRules.
        :param fare_notes: The fare_notes of this DetailedFareRules.
        :param name: The name of this DetailedFareRules.
        :param segment_id: The segment_id of this DetailedFareRules.
        """
        self.openapi_types = {
            'fare_basis': str,
            'fare_notes': TermAndCondition,
            'name': str,
            'segment_id': str
        }

        self.attribute_map = {
            'fare_basis': 'fareBasis',
            'fare_notes': 'fareNotes',
            'name': 'name',
            'segment_id': 'segmentId'
        }

        self._fare_basis = fare_basis
        self._fare_notes = fare_notes
        self._name = name
        self._segment_id = segment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetailedFareRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetailedFareRules of this DetailedFareRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fare_basis(self):
        """Gets the fare_basis of this DetailedFareRules.


        :return: The fare_basis of this DetailedFareRules.
        :rtype: str
        """
        return self._fare_basis

    @fare_basis.setter
    def fare_basis(self, fare_basis):
        """Sets the fare_basis of this DetailedFareRules.


        :param fare_basis: The fare_basis of this DetailedFareRules.
        :type fare_basis: str
        """

        self._fare_basis = fare_basis

    @property
    def fare_notes(self):
        """Gets the fare_notes of this DetailedFareRules.


        :return: The fare_notes of this DetailedFareRules.
        :rtype: TermAndCondition
        """
        return self._fare_notes

    @fare_notes.setter
    def fare_notes(self, fare_notes):
        """Sets the fare_notes of this DetailedFareRules.


        :param fare_notes: The fare_notes of this DetailedFareRules.
        :type fare_notes: TermAndCondition
        """

        self._fare_notes = fare_notes

    @property
    def name(self):
        """Gets the name of this DetailedFareRules.


        :return: The name of this DetailedFareRules.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetailedFareRules.


        :param name: The name of this DetailedFareRules.
        :type name: str
        """

        self._name = name

    @property
    def segment_id(self):
        """Gets the segment_id of this DetailedFareRules.

        Id of the segment concerned by the fare rule

        :return: The segment_id of this DetailedFareRules.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this DetailedFareRules.

        Id of the segment concerned by the fare rule

        :param segment_id: The segment_id of this DetailedFareRules.
        :type segment_id: str
        """

        self._segment_id = segment_id
