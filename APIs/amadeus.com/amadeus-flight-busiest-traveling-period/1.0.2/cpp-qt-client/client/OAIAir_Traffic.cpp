/**
 * Flight Busiest Traveling Period
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAir_Traffic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAir_Traffic::OAIAir_Traffic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAir_Traffic::OAIAir_Traffic() {
    this->initializeModel();
}

OAIAir_Traffic::~OAIAir_Traffic() {}

void OAIAir_Traffic::initializeModel() {

    m_analytics_isSet = false;
    m_analytics_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAir_Traffic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAir_Traffic::fromJsonObject(QJsonObject json) {

    m_analytics_isValid = ::OpenAPI::fromJsonValue(m_analytics, json[QString("analytics")]);
    m_analytics_isSet = !json[QString("analytics")].isNull() && m_analytics_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAir_Traffic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAir_Traffic::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics.isSet()) {
        obj.insert(QString("analytics"), ::OpenAPI::toJsonValue(m_analytics));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAnalytics OAIAir_Traffic::getAnalytics() const {
    return m_analytics;
}
void OAIAir_Traffic::setAnalytics(const OAIAnalytics &analytics) {
    m_analytics = analytics;
    m_analytics_isSet = true;
}

bool OAIAir_Traffic::is_analytics_Set() const{
    return m_analytics_isSet;
}

bool OAIAir_Traffic::is_analytics_Valid() const{
    return m_analytics_isValid;
}

QString OAIAir_Traffic::getPeriod() const {
    return m_period;
}
void OAIAir_Traffic::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIAir_Traffic::is_period_Set() const{
    return m_period_isSet;
}

bool OAIAir_Traffic::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIAir_Traffic::getType() const {
    return m_type;
}
void OAIAir_Traffic::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAir_Traffic::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAir_Traffic::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAir_Traffic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAir_Traffic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
