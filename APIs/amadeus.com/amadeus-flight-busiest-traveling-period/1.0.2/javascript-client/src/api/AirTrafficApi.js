/**
 * Flight Busiest Traveling Period
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error500 from '../model/Error500';
import Success from '../model/Success';

/**
* AirTraffic service.
* @module api/AirTrafficApi
* @version 1.0.2
*/
export default class AirTrafficApi {

    /**
    * Constructs a new AirTrafficApi. 
    * @alias module:api/AirTrafficApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAirTraffic operation.
     * @callback module:api/AirTrafficApi~getAirTrafficCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of air traffic reports.
     * @param {String} cityCode Code for the city following IATA standard. [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) - e.g. BOS for Boston
     * @param {String} period time period (year) of the statistics.  Year for which the statistic are requested following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'ARRIVING')] Use ARRIVING to have statistics on travelers coming to the city or DEPARTING for statistics on travelers leaving the city.  By default, statistics are given on travelers ARRIVING the city. 
     * @param {module:api/AirTrafficApi~getAirTrafficCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    getAirTraffic(cityCode, period, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cityCode' is set
      if (cityCode === undefined || cityCode === null) {
        throw new Error("Missing the required parameter 'cityCode' when calling getAirTraffic");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getAirTraffic");
      }

      let pathParams = {
      };
      let queryParams = {
        'cityCode': cityCode,
        'period': period,
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/travel/analytics/air-traffic/busiest-period', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
