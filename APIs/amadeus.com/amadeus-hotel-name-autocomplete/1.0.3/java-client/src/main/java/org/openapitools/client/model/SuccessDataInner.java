/*
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.SuccessDataInnerAddress;
import org.openapitools.client.model.SuccessDataInnerGeoCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuccessDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:58.200829-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuccessDataInner {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private SuccessDataInnerAddress address;

  public static final String SERIALIZED_NAME_GEO_CODE = "geoCode";
  @SerializedName(SERIALIZED_NAME_GEO_CODE)
  private SuccessDataInnerGeoCode geoCode;

  public static final String SERIALIZED_NAME_HOTEL_IDS = "hotelIds";
  @SerializedName(SERIALIZED_NAME_HOTEL_IDS)
  private Set<String> hotelIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_IATA_CODE = "iataCode";
  @SerializedName(SERIALIZED_NAME_IATA_CODE)
  private String iataCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEVANCE = "relevance";
  @SerializedName(SERIALIZED_NAME_RELEVANCE)
  private Integer relevance;

  /**
   * The category of the location or Point of reference (HOTEL_LEISURE,HOTEL_GDS).
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    GDS("HOTEL_GDS"),
    
    LEISURE("HOTEL_LEISURE");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private SubTypeEnum subType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SuccessDataInner() {
  }

  public SuccessDataInner address(SuccessDataInnerAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public SuccessDataInnerAddress getAddress() {
    return address;
  }

  public void setAddress(SuccessDataInnerAddress address) {
    this.address = address;
  }


  public SuccessDataInner geoCode(SuccessDataInnerGeoCode geoCode) {
    this.geoCode = geoCode;
    return this;
  }

  /**
   * Get geoCode
   * @return geoCode
   */
  @javax.annotation.Nullable
  public SuccessDataInnerGeoCode getGeoCode() {
    return geoCode;
  }

  public void setGeoCode(SuccessDataInnerGeoCode geoCode) {
    this.geoCode = geoCode;
  }


  public SuccessDataInner hotelIds(Set<String> hotelIds) {
    this.hotelIds = hotelIds;
    return this;
  }

  public SuccessDataInner addHotelIdsItem(String hotelIdsItem) {
    if (this.hotelIds == null) {
      this.hotelIds = new LinkedHashSet<>();
    }
    this.hotelIds.add(hotelIdsItem);
    return this;
  }

  /**
   * HotelIDs associated with the location only if it&#39;s a hotel. For leisure property dupes ID are listed as well. 
   * @return hotelIds
   */
  @javax.annotation.Nonnull
  public Set<String> getHotelIds() {
    return hotelIds;
  }

  public void setHotelIds(Set<String> hotelIds) {
    this.hotelIds = hotelIds;
  }


  public SuccessDataInner iataCode(String iataCode) {
    this.iataCode = iataCode;
    return this;
  }

  /**
   * [IATA codes](http://www.iata.org/publications/Pages/code-search.aspx) associated with the location.
   * @return iataCode
   */
  @javax.annotation.Nonnull
  public String getIataCode() {
    return iataCode;
  }

  public void setIataCode(String iataCode) {
    this.iataCode = iataCode;
  }


  public SuccessDataInner id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the resource.
   * minimum: 1
   * maximum: 1E+1
   * @return id
   */
  @javax.annotation.Nonnull
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public SuccessDataInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the location (Hotel Name)
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SuccessDataInner relevance(Integer relevance) {
    this.relevance = relevance;
    return this;
  }

  /**
   * A no. between 1-100. The higher the number better is the relevant search for that location.
   * @return relevance
   */
  @javax.annotation.Nullable
  public Integer getRelevance() {
    return relevance;
  }

  public void setRelevance(Integer relevance) {
    this.relevance = relevance;
  }


  public SuccessDataInner subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

  /**
   * The category of the location or Point of reference (HOTEL_LEISURE,HOTEL_GDS).
   * @return subType
   */
  @javax.annotation.Nonnull
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }


  public SuccessDataInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of resource or the resource name.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessDataInner successDataInner = (SuccessDataInner) o;
    return Objects.equals(this.address, successDataInner.address) &&
        Objects.equals(this.geoCode, successDataInner.geoCode) &&
        Objects.equals(this.hotelIds, successDataInner.hotelIds) &&
        Objects.equals(this.iataCode, successDataInner.iataCode) &&
        Objects.equals(this.id, successDataInner.id) &&
        Objects.equals(this.name, successDataInner.name) &&
        Objects.equals(this.relevance, successDataInner.relevance) &&
        Objects.equals(this.subType, successDataInner.subType) &&
        Objects.equals(this.type, successDataInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, geoCode, hotelIds, iataCode, id, name, relevance, subType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessDataInner {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    geoCode: ").append(toIndentedString(geoCode)).append("\n");
    sb.append("    hotelIds: ").append(toIndentedString(hotelIds)).append("\n");
    sb.append("    iataCode: ").append(toIndentedString(iataCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    relevance: ").append(toIndentedString(relevance)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("geoCode");
    openapiFields.add("hotelIds");
    openapiFields.add("iataCode");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("relevance");
    openapiFields.add("subType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hotelIds");
    openapiRequiredFields.add("iataCode");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("subType");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuccessDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuccessDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessDataInner is not found in the empty JSON string", SuccessDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuccessDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuccessDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuccessDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        SuccessDataInnerAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `geoCode`
      if (jsonObj.get("geoCode") != null && !jsonObj.get("geoCode").isJsonNull()) {
        SuccessDataInnerGeoCode.validateJsonElement(jsonObj.get("geoCode"));
      }
      // ensure the required json array is present
      if (jsonObj.get("hotelIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hotelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelIds` to be an array in the JSON string but got `%s`", jsonObj.get("hotelIds").toString()));
      }
      if (!jsonObj.get("iataCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iataCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iataCode").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      // validate the required field `subType`
      SubTypeEnum.validateJsonElement(jsonObj.get("subType"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessDataInner>() {
           @Override
           public void write(JsonWriter out, SuccessDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuccessDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuccessDataInner
   * @throws IOException if the JSON string is invalid with respect to SuccessDataInner
   */
  public static SuccessDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessDataInner.class);
  }

  /**
   * Convert an instance of SuccessDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

