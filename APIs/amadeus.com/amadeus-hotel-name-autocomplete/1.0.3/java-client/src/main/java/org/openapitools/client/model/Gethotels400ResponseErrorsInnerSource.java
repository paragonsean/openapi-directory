/*
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * an object containing references to the source of the error
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:58.200829-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gethotels400ResponseErrorsInnerSource {
  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private String example;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private String parameter;

  public static final String SERIALIZED_NAME_POINTER = "pointer";
  @SerializedName(SERIALIZED_NAME_POINTER)
  private String pointer;

  public Gethotels400ResponseErrorsInnerSource() {
  }

  public Gethotels400ResponseErrorsInnerSource example(String example) {
    this.example = example;
    return this;
  }

  /**
   * a string indicating an example of the right value
   * @return example
   */
  @javax.annotation.Nullable
  public String getExample() {
    return example;
  }

  public void setExample(String example) {
    this.example = example;
  }


  public Gethotels400ResponseErrorsInnerSource parameter(String parameter) {
    this.parameter = parameter;
    return this;
  }

  /**
   * a string indicating which URI query parameter caused the issue
   * @return parameter
   */
  @javax.annotation.Nullable
  public String getParameter() {
    return parameter;
  }

  public void setParameter(String parameter) {
    this.parameter = parameter;
  }


  public Gethotels400ResponseErrorsInnerSource pointer(String pointer) {
    this.pointer = pointer;
    return this;
  }

  /**
   * a JSON Pointer [RFC6901] to the associated entity in the request document
   * @return pointer
   */
  @javax.annotation.Nullable
  public String getPointer() {
    return pointer;
  }

  public void setPointer(String pointer) {
    this.pointer = pointer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gethotels400ResponseErrorsInnerSource gethotels400ResponseErrorsInnerSource = (Gethotels400ResponseErrorsInnerSource) o;
    return Objects.equals(this.example, gethotels400ResponseErrorsInnerSource.example) &&
        Objects.equals(this.parameter, gethotels400ResponseErrorsInnerSource.parameter) &&
        Objects.equals(this.pointer, gethotels400ResponseErrorsInnerSource.pointer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(example, parameter, pointer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gethotels400ResponseErrorsInnerSource {\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    pointer: ").append(toIndentedString(pointer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("example");
    openapiFields.add("parameter");
    openapiFields.add("pointer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gethotels400ResponseErrorsInnerSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gethotels400ResponseErrorsInnerSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gethotels400ResponseErrorsInnerSource is not found in the empty JSON string", Gethotels400ResponseErrorsInnerSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gethotels400ResponseErrorsInnerSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gethotels400ResponseErrorsInnerSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("example") != null && !jsonObj.get("example").isJsonNull()) && !jsonObj.get("example").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `example` to be a primitive type in the JSON string but got `%s`", jsonObj.get("example").toString()));
      }
      if ((jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) && !jsonObj.get("parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
      }
      if ((jsonObj.get("pointer") != null && !jsonObj.get("pointer").isJsonNull()) && !jsonObj.get("pointer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gethotels400ResponseErrorsInnerSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gethotels400ResponseErrorsInnerSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gethotels400ResponseErrorsInnerSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gethotels400ResponseErrorsInnerSource.class));

       return (TypeAdapter<T>) new TypeAdapter<Gethotels400ResponseErrorsInnerSource>() {
           @Override
           public void write(JsonWriter out, Gethotels400ResponseErrorsInnerSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gethotels400ResponseErrorsInnerSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gethotels400ResponseErrorsInnerSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gethotels400ResponseErrorsInnerSource
   * @throws IOException if the JSON string is invalid with respect to Gethotels400ResponseErrorsInnerSource
   */
  public static Gethotels400ResponseErrorsInnerSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gethotels400ResponseErrorsInnerSource.class);
  }

  /**
   * Convert an instance of Gethotels400ResponseErrorsInnerSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

