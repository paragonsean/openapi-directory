/**
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuccessDataInnerAddress model module.
 * @module model/SuccessDataInnerAddress
 * @version 1.0.3
 */
class SuccessDataInnerAddress {
    /**
     * Constructs a new <code>SuccessDataInnerAddress</code>.
     * Address of the location containing Cityname, Statecode and countrycode respectively.
     * @alias module:model/SuccessDataInnerAddress
     * @param cityName {String} The name of the city to which the location belongs to.
     * @param countryCode {String} The countrycode to which the location belongs to.
     */
    constructor(cityName, countryCode) { 
        
        SuccessDataInnerAddress.initialize(this, cityName, countryCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cityName, countryCode) { 
        obj['cityName'] = cityName;
        obj['countryCode'] = countryCode;
    }

    /**
     * Constructs a <code>SuccessDataInnerAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessDataInnerAddress} obj Optional instance to populate.
     * @return {module:model/SuccessDataInnerAddress} The populated <code>SuccessDataInnerAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessDataInnerAddress();

            if (data.hasOwnProperty('cityName')) {
                obj['cityName'] = ApiClient.convertToType(data['cityName'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessDataInnerAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessDataInnerAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessDataInnerAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cityName'] && !(typeof data['cityName'] === 'string' || data['cityName'] instanceof String)) {
            throw new Error("Expected the field `cityName` to be a primitive type in the JSON string but got " + data['cityName']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }

        return true;
    }


}

SuccessDataInnerAddress.RequiredProperties = ["cityName", "countryCode"];

/**
 * The name of the city to which the location belongs to.
 * @member {String} cityName
 */
SuccessDataInnerAddress.prototype['cityName'] = undefined;

/**
 * The countrycode to which the location belongs to.
 * @member {String} countryCode
 */
SuccessDataInnerAddress.prototype['countryCode'] = undefined;

/**
 * The statecode to which the location belongs to.
 * @member {String} stateCode
 */
SuccessDataInnerAddress.prototype['stateCode'] = undefined;






export default SuccessDataInnerAddress;

