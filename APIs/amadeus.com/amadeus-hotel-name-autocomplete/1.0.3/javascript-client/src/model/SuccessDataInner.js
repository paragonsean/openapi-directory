/**
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SuccessDataInnerAddress from './SuccessDataInnerAddress';
import SuccessDataInnerGeoCode from './SuccessDataInnerGeoCode';

/**
 * The SuccessDataInner model module.
 * @module model/SuccessDataInner
 * @version 1.0.3
 */
class SuccessDataInner {
    /**
     * Constructs a new <code>SuccessDataInner</code>.
     * @alias module:model/SuccessDataInner
     * @param hotelIds {Array.<String>} HotelIDs associated with the location only if it's a hotel. For leisure property dupes ID are listed as well. 
     * @param iataCode {String} [IATA codes](http://www.iata.org/publications/Pages/code-search.aspx) associated with the location.
     * @param id {Number} ID of the resource.
     * @param name {String} Name of the location (Hotel Name)
     * @param subType {module:model/SuccessDataInner.SubTypeEnum} The category of the location or Point of reference (HOTEL_LEISURE,HOTEL_GDS).
     * @param type {String} Type of resource or the resource name.
     */
    constructor(hotelIds, iataCode, id, name, subType, type) { 
        
        SuccessDataInner.initialize(this, hotelIds, iataCode, id, name, subType, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hotelIds, iataCode, id, name, subType, type) { 
        obj['hotelIds'] = hotelIds;
        obj['iataCode'] = iataCode;
        obj['id'] = id;
        obj['name'] = name;
        obj['subType'] = subType;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SuccessDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessDataInner} obj Optional instance to populate.
     * @return {module:model/SuccessDataInner} The populated <code>SuccessDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessDataInner();

            if (data.hasOwnProperty('address')) {
                obj['address'] = SuccessDataInnerAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('geoCode')) {
                obj['geoCode'] = SuccessDataInnerGeoCode.constructFromObject(data['geoCode']);
            }
            if (data.hasOwnProperty('hotelIds')) {
                obj['hotelIds'] = ApiClient.convertToType(data['hotelIds'], ['String']);
            }
            if (data.hasOwnProperty('iataCode')) {
                obj['iataCode'] = ApiClient.convertToType(data['iataCode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('relevance')) {
                obj['relevance'] = ApiClient.convertToType(data['relevance'], 'Number');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessDataInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessDataInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          SuccessDataInnerAddress.validateJSON(data['address']);
        }
        // validate the optional field `geoCode`
        if (data['geoCode']) { // data not null
          SuccessDataInnerGeoCode.validateJSON(data['geoCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hotelIds'])) {
            throw new Error("Expected the field `hotelIds` to be an array in the JSON data but got " + data['hotelIds']);
        }
        // ensure the json data is a string
        if (data['iataCode'] && !(typeof data['iataCode'] === 'string' || data['iataCode'] instanceof String)) {
            throw new Error("Expected the field `iataCode` to be a primitive type in the JSON string but got " + data['iataCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SuccessDataInner.RequiredProperties = ["hotelIds", "iataCode", "id", "name", "subType", "type"];

/**
 * @member {module:model/SuccessDataInnerAddress} address
 */
SuccessDataInner.prototype['address'] = undefined;

/**
 * @member {module:model/SuccessDataInnerGeoCode} geoCode
 */
SuccessDataInner.prototype['geoCode'] = undefined;

/**
 * HotelIDs associated with the location only if it's a hotel. For leisure property dupes ID are listed as well. 
 * @member {Array.<String>} hotelIds
 */
SuccessDataInner.prototype['hotelIds'] = undefined;

/**
 * [IATA codes](http://www.iata.org/publications/Pages/code-search.aspx) associated with the location.
 * @member {String} iataCode
 */
SuccessDataInner.prototype['iataCode'] = undefined;

/**
 * ID of the resource.
 * @member {Number} id
 */
SuccessDataInner.prototype['id'] = undefined;

/**
 * Name of the location (Hotel Name)
 * @member {String} name
 */
SuccessDataInner.prototype['name'] = undefined;

/**
 * A no. between 1-100. The higher the number better is the relevant search for that location.
 * @member {Number} relevance
 */
SuccessDataInner.prototype['relevance'] = undefined;

/**
 * The category of the location or Point of reference (HOTEL_LEISURE,HOTEL_GDS).
 * @member {module:model/SuccessDataInner.SubTypeEnum} subType
 */
SuccessDataInner.prototype['subType'] = undefined;

/**
 * Type of resource or the resource name.
 * @member {String} type
 */
SuccessDataInner.prototype['type'] = undefined;





/**
 * Allowed values for the <code>subType</code> property.
 * @enum {String}
 * @readonly
 */
SuccessDataInner['SubTypeEnum'] = {

    /**
     * value: "HOTEL_GDS"
     * @const
     */
    "GDS": "HOTEL_GDS",

    /**
     * value: "HOTEL_LEISURE"
     * @const
     */
    "LEISURE": "HOTEL_LEISURE"
};



export default SuccessDataInner;

