/**
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuccessDataInnerGeoCode model module.
 * @module model/SuccessDataInnerGeoCode
 * @version 1.0.3
 */
class SuccessDataInnerGeoCode {
    /**
     * Constructs a new <code>SuccessDataInnerGeoCode</code>.
     * Geocode of the location containing latitude and longitude respectively.
     * @alias module:model/SuccessDataInnerGeoCode
     * @param latitude {Number} Latitude of the location on Earth.
     * @param longitude {Number} Longitude of the location on Earth.
     */
    constructor(latitude, longitude) { 
        
        SuccessDataInnerGeoCode.initialize(this, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, latitude, longitude) { 
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>SuccessDataInnerGeoCode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessDataInnerGeoCode} obj Optional instance to populate.
     * @return {module:model/SuccessDataInnerGeoCode} The populated <code>SuccessDataInnerGeoCode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessDataInnerGeoCode();

            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessDataInnerGeoCode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessDataInnerGeoCode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessDataInnerGeoCode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SuccessDataInnerGeoCode.RequiredProperties = ["latitude", "longitude"];

/**
 * Latitude of the location on Earth.
 * @member {Number} latitude
 */
SuccessDataInnerGeoCode.prototype['latitude'] = undefined;

/**
 * Longitude of the location on Earth.
 * @member {Number} longitude
 */
SuccessDataInnerGeoCode.prototype['longitude'] = undefined;






export default SuccessDataInnerGeoCode;

