/**
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuccess_data_inner.h
 *
 * 
 */

#ifndef OAISuccess_data_inner_H
#define OAISuccess_data_inner_H

#include <QJsonObject>

#include "OAISuccess_data_inner_address.h"
#include "OAISuccess_data_inner_geoCode.h"
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISuccess_data_inner_address;
class OAISuccess_data_inner_geoCode;

class OAISuccess_data_inner : public OAIObject {
public:
    OAISuccess_data_inner();
    OAISuccess_data_inner(QString json);
    ~OAISuccess_data_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISuccess_data_inner_address getAddress() const;
    void setAddress(const OAISuccess_data_inner_address &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OAISuccess_data_inner_geoCode getGeoCode() const;
    void setGeoCode(const OAISuccess_data_inner_geoCode &geo_code);
    bool is_geo_code_Set() const;
    bool is_geo_code_Valid() const;

    QSet<QString> getHotelIds() const;
    void setHotelIds(const QSet<QString> &hotel_ids);
    bool is_hotel_ids_Set() const;
    bool is_hotel_ids_Valid() const;

    QString getIataCode() const;
    void setIataCode(const QString &iata_code);
    bool is_iata_code_Set() const;
    bool is_iata_code_Valid() const;

    double getId() const;
    void setId(const double &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getRelevance() const;
    void setRelevance(const qint32 &relevance);
    bool is_relevance_Set() const;
    bool is_relevance_Valid() const;

    QString getSubType() const;
    void setSubType(const QString &sub_type);
    bool is_sub_type_Set() const;
    bool is_sub_type_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISuccess_data_inner_address m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OAISuccess_data_inner_geoCode m_geo_code;
    bool m_geo_code_isSet;
    bool m_geo_code_isValid;

    QSet<QString> m_hotel_ids;
    bool m_hotel_ids_isSet;
    bool m_hotel_ids_isValid;

    QString m_iata_code;
    bool m_iata_code_isSet;
    bool m_iata_code_isValid;

    double m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_relevance;
    bool m_relevance_isSet;
    bool m_relevance_isValid;

    QString m_sub_type;
    bool m_sub_type_isSet;
    bool m_sub_type_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuccess_data_inner)

#endif // OAISuccess_data_inner_H
