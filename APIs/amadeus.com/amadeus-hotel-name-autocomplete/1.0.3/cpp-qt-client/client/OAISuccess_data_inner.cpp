/**
 * Hotel Name Autocomplete
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccess_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccess_data_inner::OAISuccess_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccess_data_inner::OAISuccess_data_inner() {
    this->initializeModel();
}

OAISuccess_data_inner::~OAISuccess_data_inner() {}

void OAISuccess_data_inner::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_geo_code_isSet = false;
    m_geo_code_isValid = false;

    m_hotel_ids_isSet = false;
    m_hotel_ids_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISuccess_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccess_data_inner::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_geo_code_isValid = ::OpenAPI::fromJsonValue(m_geo_code, json[QString("geoCode")]);
    m_geo_code_isSet = !json[QString("geoCode")].isNull() && m_geo_code_isValid;

    m_hotel_ids_isValid = ::OpenAPI::fromJsonValue(m_hotel_ids, json[QString("hotelIds")]);
    m_hotel_ids_isSet = !json[QString("hotelIds")].isNull() && m_hotel_ids_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISuccess_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccess_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_geo_code.isSet()) {
        obj.insert(QString("geoCode"), ::OpenAPI::toJsonValue(m_geo_code));
    }
    if (m_hotel_ids.size() > 0) {
        obj.insert(QString("hotelIds"), ::OpenAPI::toJsonValue(m_hotel_ids));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISuccess_data_inner_address OAISuccess_data_inner::getAddress() const {
    return m_address;
}
void OAISuccess_data_inner::setAddress(const OAISuccess_data_inner_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISuccess_data_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAISuccess_data_inner::is_address_Valid() const{
    return m_address_isValid;
}

OAISuccess_data_inner_geoCode OAISuccess_data_inner::getGeoCode() const {
    return m_geo_code;
}
void OAISuccess_data_inner::setGeoCode(const OAISuccess_data_inner_geoCode &geo_code) {
    m_geo_code = geo_code;
    m_geo_code_isSet = true;
}

bool OAISuccess_data_inner::is_geo_code_Set() const{
    return m_geo_code_isSet;
}

bool OAISuccess_data_inner::is_geo_code_Valid() const{
    return m_geo_code_isValid;
}

QSet<QString> OAISuccess_data_inner::getHotelIds() const {
    return m_hotel_ids;
}
void OAISuccess_data_inner::setHotelIds(const QSet<QString> &hotel_ids) {
    m_hotel_ids = hotel_ids;
    m_hotel_ids_isSet = true;
}

bool OAISuccess_data_inner::is_hotel_ids_Set() const{
    return m_hotel_ids_isSet;
}

bool OAISuccess_data_inner::is_hotel_ids_Valid() const{
    return m_hotel_ids_isValid;
}

QString OAISuccess_data_inner::getIataCode() const {
    return m_iata_code;
}
void OAISuccess_data_inner::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAISuccess_data_inner::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAISuccess_data_inner::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

double OAISuccess_data_inner::getId() const {
    return m_id;
}
void OAISuccess_data_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISuccess_data_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISuccess_data_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISuccess_data_inner::getName() const {
    return m_name;
}
void OAISuccess_data_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISuccess_data_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISuccess_data_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISuccess_data_inner::getRelevance() const {
    return m_relevance;
}
void OAISuccess_data_inner::setRelevance(const qint32 &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAISuccess_data_inner::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAISuccess_data_inner::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAISuccess_data_inner::getSubType() const {
    return m_sub_type;
}
void OAISuccess_data_inner::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAISuccess_data_inner::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAISuccess_data_inner::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAISuccess_data_inner::getType() const {
    return m_type;
}
void OAISuccess_data_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISuccess_data_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAISuccess_data_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISuccess_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccess_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hotel_ids_isValid && m_iata_code_isValid && m_id_isValid && m_name_isValid && m_sub_type_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
