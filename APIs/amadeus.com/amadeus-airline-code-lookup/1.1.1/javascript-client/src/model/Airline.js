/**
 * Airline Code Lookup API
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Airline model module.
 * @module model/Airline
 * @version 1.1.1
 */
class Airline {
    /**
     * Constructs a new <code>Airline</code>.
     * @alias module:model/Airline
     */
    constructor() { 
        
        Airline.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Airline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Airline} obj Optional instance to populate.
     * @return {module:model/Airline} The populated <code>Airline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Airline();

            if (data.hasOwnProperty('businessName')) {
                obj['businessName'] = ApiClient.convertToType(data['businessName'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('iataCode')) {
                obj['iataCode'] = ApiClient.convertToType(data['iataCode'], 'String');
            }
            if (data.hasOwnProperty('icaoCode')) {
                obj['icaoCode'] = ApiClient.convertToType(data['icaoCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Airline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Airline</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['businessName'] && !(typeof data['businessName'] === 'string' || data['businessName'] instanceof String)) {
            throw new Error("Expected the field `businessName` to be a primitive type in the JSON string but got " + data['businessName']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['iataCode'] && !(typeof data['iataCode'] === 'string' || data['iataCode'] instanceof String)) {
            throw new Error("Expected the field `iataCode` to be a primitive type in the JSON string but got " + data['iataCode']);
        }
        // ensure the json data is a string
        if (data['icaoCode'] && !(typeof data['icaoCode'] === 'string' || data['icaoCode'] instanceof String)) {
            throw new Error("Expected the field `icaoCode` to be a primitive type in the JSON string but got " + data['icaoCode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * airline business name
 * @member {String} businessName
 */
Airline.prototype['businessName'] = undefined;

/**
 * airline common name
 * @member {String} commonName
 */
Airline.prototype['commonName'] = undefined;

/**
 * IATA airline code. see [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)
 * @member {String} iataCode
 */
Airline.prototype['iataCode'] = undefined;

/**
 * IATA airline code. see [ICAO airlines table codes](https://en.wikipedia.org/wiki/List_of_airline_codes)
 * @member {String} icaoCode
 */
Airline.prototype['icaoCode'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
Airline.prototype['type'] = undefined;






export default Airline;

