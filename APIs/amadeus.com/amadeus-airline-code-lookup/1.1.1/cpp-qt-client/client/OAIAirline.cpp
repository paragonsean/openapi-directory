/**
 * Airline Code Lookup API
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirline::OAIAirline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirline::OAIAirline() {
    this->initializeModel();
}

OAIAirline::~OAIAirline() {}

void OAIAirline::initializeModel() {

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_icao_code_isSet = false;
    m_icao_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAirline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirline::fromJsonObject(QJsonObject json) {

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("businessName")]);
    m_business_name_isSet = !json[QString("businessName")].isNull() && m_business_name_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_icao_code_isValid = ::OpenAPI::fromJsonValue(m_icao_code, json[QString("icaoCode")]);
    m_icao_code_isSet = !json[QString("icaoCode")].isNull() && m_icao_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAirline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirline::asJsonObject() const {
    QJsonObject obj;
    if (m_business_name_isSet) {
        obj.insert(QString("businessName"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_icao_code_isSet) {
        obj.insert(QString("icaoCode"), ::OpenAPI::toJsonValue(m_icao_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAirline::getBusinessName() const {
    return m_business_name;
}
void OAIAirline::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIAirline::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIAirline::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIAirline::getCommonName() const {
    return m_common_name;
}
void OAIAirline::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAIAirline::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAIAirline::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAIAirline::getIataCode() const {
    return m_iata_code;
}
void OAIAirline::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIAirline::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIAirline::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIAirline::getIcaoCode() const {
    return m_icao_code;
}
void OAIAirline::setIcaoCode(const QString &icao_code) {
    m_icao_code = icao_code;
    m_icao_code_isSet = true;
}

bool OAIAirline::is_icao_code_Set() const{
    return m_icao_code_isSet;
}

bool OAIAirline::is_icao_code_Valid() const{
    return m_icao_code_isValid;
}

QString OAIAirline::getType() const {
    return m_type;
}
void OAIAirline::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAirline::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAirline::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAirline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icao_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
