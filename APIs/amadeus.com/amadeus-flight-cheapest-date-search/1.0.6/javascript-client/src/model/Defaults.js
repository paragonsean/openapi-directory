/**
 * Flight Cheapest Date Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Defaults model module.
 * @module model/Defaults
 * @version 1.0.6
 */
class Defaults {
    /**
     * Constructs a new <code>Defaults</code>.
     * the query parameters for which default values were used are returned here
     * @alias module:model/Defaults
     */
    constructor() { 
        
        Defaults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Defaults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Defaults} obj Optional instance to populate.
     * @return {module:model/Defaults} The populated <code>Defaults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Defaults();

            if (data.hasOwnProperty('departureDate')) {
                obj['departureDate'] = ApiClient.convertToType(data['departureDate'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('nonStop')) {
                obj['nonStop'] = ApiClient.convertToType(data['nonStop'], 'Boolean');
            }
            if (data.hasOwnProperty('oneWay')) {
                obj['oneWay'] = ApiClient.convertToType(data['oneWay'], 'Boolean');
            }
            if (data.hasOwnProperty('viewBy')) {
                obj['viewBy'] = ApiClient.convertToType(data['viewBy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Defaults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Defaults</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['departureDate'] && !(typeof data['departureDate'] === 'string' || data['departureDate'] instanceof String)) {
            throw new Error("Expected the field `departureDate` to be a primitive type in the JSON string but got " + data['departureDate']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['viewBy'] && !(typeof data['viewBy'] === 'string' || data['viewBy'] instanceof String)) {
            throw new Error("Expected the field `viewBy` to be a primitive type in the JSON string but got " + data['viewBy']);
        }

        return true;
    }


}



/**
 * the date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25. Ranges are specified with a comma and are inclusive
 * @member {String} departureDate
 */
Defaults.prototype['departureDate'] = undefined;

/**
 * exact duration or range of durations of the travel, in days. This parameter must not be set if oneWay is true. Ranges are specified with a comma and are inclusive, e.g. 2,8
 * @member {String} duration
 */
Defaults.prototype['duration'] = undefined;

/**
 * if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered
 * @member {Boolean} nonStop
 */
Defaults.prototype['nonStop'] = undefined;

/**
 * if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered
 * @member {Boolean} oneWay
 */
Defaults.prototype['oneWay'] = undefined;

/**
 * view the flight dates by DATE, DURATION, or WEEK. View by DATE to get the cheapest flight dates for every departure date in the given range. View by DURATION to get the cheapest flight dates for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight date for every week in the given range of departure dates
 * @member {module:model/Defaults.ViewByEnum} viewBy
 */
Defaults.prototype['viewBy'] = undefined;





/**
 * Allowed values for the <code>viewBy</code> property.
 * @enum {String}
 * @readonly
 */
Defaults['ViewByEnum'] = {

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "DURATION"
     * @const
     */
    "DURATION": "DURATION",

    /**
     * value: "WEEK"
     * @const
     */
    "WEEK": "WEEK"
};



export default Defaults;

