/**
 * Flight Cheapest Date Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightDate::OAIFlightDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightDate::OAIFlightDate() {
    this->initializeModel();
}

OAIFlightDate::~OAIFlightDate() {}

void OAIFlightDate::initializeModel() {

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_return_date_isSet = false;
    m_return_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlightDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightDate::fromJsonObject(QJsonObject json) {

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departureDate")]);
    m_departure_date_isSet = !json[QString("departureDate")].isNull() && m_departure_date_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_return_date_isValid = ::OpenAPI::fromJsonValue(m_return_date, json[QString("returnDate")]);
    m_return_date_isSet = !json[QString("returnDate")].isNull() && m_return_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlightDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightDate::asJsonObject() const {
    QJsonObject obj;
    if (m_departure_date_isSet) {
        obj.insert(QString("departureDate"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_return_date_isSet) {
        obj.insert(QString("returnDate"), ::OpenAPI::toJsonValue(m_return_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFlightDate::getDepartureDate() const {
    return m_departure_date;
}
void OAIFlightDate::setDepartureDate(const QString &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIFlightDate::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIFlightDate::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

QString OAIFlightDate::getDestination() const {
    return m_destination;
}
void OAIFlightDate::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIFlightDate::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIFlightDate::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIFlightDate_links OAIFlightDate::getLinks() const {
    return m_links;
}
void OAIFlightDate::setLinks(const OAIFlightDate_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIFlightDate::is_links_Set() const{
    return m_links_isSet;
}

bool OAIFlightDate::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIFlightDate::getOrigin() const {
    return m_origin;
}
void OAIFlightDate::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIFlightDate::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIFlightDate::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPrice OAIFlightDate::getPrice() const {
    return m_price;
}
void OAIFlightDate::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFlightDate::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFlightDate::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIFlightDate::getReturnDate() const {
    return m_return_date;
}
void OAIFlightDate::setReturnDate(const QString &return_date) {
    m_return_date = return_date;
    m_return_date_isSet = true;
}

bool OAIFlightDate::is_return_date_Set() const{
    return m_return_date_isSet;
}

bool OAIFlightDate::is_return_date_Valid() const{
    return m_return_date_isValid;
}

QString OAIFlightDate::getType() const {
    return m_type;
}
void OAIFlightDate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlightDate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlightDate::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlightDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
