# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detailed_name: str=None, sub_type: str=None):
        """LocationValue - a model defined in OpenAPI

        :param detailed_name: The detailed_name of this LocationValue.
        :param sub_type: The sub_type of this LocationValue.
        """
        self.openapi_types = {
            'detailed_name': str,
            'sub_type': str
        }

        self.attribute_map = {
            'detailed_name': 'detailedName',
            'sub_type': 'subType'
        }

        self._detailed_name = detailed_name
        self._sub_type = sub_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationValue of this LocationValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detailed_name(self):
        """Gets the detailed_name of this LocationValue.

        name of the location

        :return: The detailed_name of this LocationValue.
        :rtype: str
        """
        return self._detailed_name

    @detailed_name.setter
    def detailed_name(self, detailed_name):
        """Sets the detailed_name of this LocationValue.

        name of the location

        :param detailed_name: The detailed_name of this LocationValue.
        :type detailed_name: str
        """

        self._detailed_name = detailed_name

    @property
    def sub_type(self):
        """Gets the sub_type of this LocationValue.

        location type: airport or city

        :return: The sub_type of this LocationValue.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this LocationValue.

        location type: airport or city

        :param sub_type: The sub_type of this LocationValue.
        :type sub_type: str
        """
        allowed_values = ["AIRPORT", "CITY"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type
