# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.defaults import Defaults
from openapi_server.models.links import Links
import re
from openapi_server import util


class Meta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, defaults: Defaults=None, links: Links=None):
        """Meta - a model defined in OpenAPI

        :param currency: The currency of this Meta.
        :param defaults: The defaults of this Meta.
        :param links: The links of this Meta.
        """
        self.openapi_types = {
            'currency': str,
            'defaults': Defaults,
            'links': Links
        }

        self.attribute_map = {
            'currency': 'currency',
            'defaults': 'defaults',
            'links': 'links'
        }

        self._currency = currency
        self._defaults = defaults
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta of this Meta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this Meta.

        the currency in which the prices of the flight offers are returned. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro

        :return: The currency of this Meta.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Meta.

        the currency in which the prices of the flight offers are returned. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro

        :param currency: The currency of this Meta.
        :type currency: str
        """
        if currency is not None and not re.search(r'[A-Z]{3}', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._currency = currency

    @property
    def defaults(self):
        """Gets the defaults of this Meta.


        :return: The defaults of this Meta.
        :rtype: Defaults
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this Meta.


        :param defaults: The defaults of this Meta.
        :type defaults: Defaults
        """

        self._defaults = defaults

    @property
    def links(self):
        """Gets the links of this Meta.


        :return: The links of this Meta.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Meta.


        :param links: The links of this Meta.
        :type links: Links
        """

        self._links = links
