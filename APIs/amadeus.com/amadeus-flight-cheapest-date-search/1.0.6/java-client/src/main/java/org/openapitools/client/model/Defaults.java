/*
 * Flight Cheapest Date Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the query parameters for which default values were used are returned here
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:20.773098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Defaults {
  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departureDate";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private String departureDate;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_NON_STOP = "nonStop";
  @SerializedName(SERIALIZED_NAME_NON_STOP)
  private Boolean nonStop;

  public static final String SERIALIZED_NAME_ONE_WAY = "oneWay";
  @SerializedName(SERIALIZED_NAME_ONE_WAY)
  private Boolean oneWay;

  /**
   * view the flight dates by DATE, DURATION, or WEEK. View by DATE to get the cheapest flight dates for every departure date in the given range. View by DURATION to get the cheapest flight dates for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight date for every week in the given range of departure dates
   */
  @JsonAdapter(ViewByEnum.Adapter.class)
  public enum ViewByEnum {
    DATE("DATE"),
    
    DURATION("DURATION"),
    
    WEEK("WEEK");

    private String value;

    ViewByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewByEnum fromValue(String value) {
      for (ViewByEnum b : ViewByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_BY = "viewBy";
  @SerializedName(SERIALIZED_NAME_VIEW_BY)
  private ViewByEnum viewBy;

  public Defaults() {
  }

  public Defaults departureDate(String departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * the date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25. Ranges are specified with a comma and are inclusive
   * @return departureDate
   */
  @javax.annotation.Nullable
  public String getDepartureDate() {
    return departureDate;
  }

  public void setDepartureDate(String departureDate) {
    this.departureDate = departureDate;
  }


  public Defaults duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * exact duration or range of durations of the travel, in days. This parameter must not be set if oneWay is true. Ranges are specified with a comma and are inclusive, e.g. 2,8
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public Defaults nonStop(Boolean nonStop) {
    this.nonStop = nonStop;
    return this;
  }

  /**
   * if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered
   * @return nonStop
   */
  @javax.annotation.Nullable
  public Boolean getNonStop() {
    return nonStop;
  }

  public void setNonStop(Boolean nonStop) {
    this.nonStop = nonStop;
  }


  public Defaults oneWay(Boolean oneWay) {
    this.oneWay = oneWay;
    return this;
  }

  /**
   * if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered
   * @return oneWay
   */
  @javax.annotation.Nullable
  public Boolean getOneWay() {
    return oneWay;
  }

  public void setOneWay(Boolean oneWay) {
    this.oneWay = oneWay;
  }


  public Defaults viewBy(ViewByEnum viewBy) {
    this.viewBy = viewBy;
    return this;
  }

  /**
   * view the flight dates by DATE, DURATION, or WEEK. View by DATE to get the cheapest flight dates for every departure date in the given range. View by DURATION to get the cheapest flight dates for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight date for every week in the given range of departure dates
   * @return viewBy
   */
  @javax.annotation.Nullable
  public ViewByEnum getViewBy() {
    return viewBy;
  }

  public void setViewBy(ViewByEnum viewBy) {
    this.viewBy = viewBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Defaults defaults = (Defaults) o;
    return Objects.equals(this.departureDate, defaults.departureDate) &&
        Objects.equals(this.duration, defaults.duration) &&
        Objects.equals(this.nonStop, defaults.nonStop) &&
        Objects.equals(this.oneWay, defaults.oneWay) &&
        Objects.equals(this.viewBy, defaults.viewBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(departureDate, duration, nonStop, oneWay, viewBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Defaults {\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    nonStop: ").append(toIndentedString(nonStop)).append("\n");
    sb.append("    oneWay: ").append(toIndentedString(oneWay)).append("\n");
    sb.append("    viewBy: ").append(toIndentedString(viewBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("departureDate");
    openapiFields.add("duration");
    openapiFields.add("nonStop");
    openapiFields.add("oneWay");
    openapiFields.add("viewBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Defaults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Defaults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Defaults is not found in the empty JSON string", Defaults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Defaults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Defaults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("departureDate") != null && !jsonObj.get("departureDate").isJsonNull()) && !jsonObj.get("departureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departureDate").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("viewBy") != null && !jsonObj.get("viewBy").isJsonNull()) && !jsonObj.get("viewBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewBy").toString()));
      }
      // validate the optional field `viewBy`
      if (jsonObj.get("viewBy") != null && !jsonObj.get("viewBy").isJsonNull()) {
        ViewByEnum.validateJsonElement(jsonObj.get("viewBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Defaults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Defaults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Defaults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Defaults.class));

       return (TypeAdapter<T>) new TypeAdapter<Defaults>() {
           @Override
           public void write(JsonWriter out, Defaults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Defaults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Defaults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Defaults
   * @throws IOException if the JSON string is invalid with respect to Defaults
   */
  public static Defaults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Defaults.class);
  }

  /**
   * Convert an instance of Defaults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

