/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelProduct_Guests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelProduct_Guests::OAIHotelProduct_Guests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelProduct_Guests::OAIHotelProduct_Guests() {
    this->initializeModel();
}

OAIHotelProduct_Guests::~OAIHotelProduct_Guests() {}

void OAIHotelProduct_Guests::initializeModel() {

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_child_ages_isSet = false;
    m_child_ages_isValid = false;
}

void OAIHotelProduct_Guests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelProduct_Guests::fromJsonObject(QJsonObject json) {

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_child_ages_isValid = ::OpenAPI::fromJsonValue(m_child_ages, json[QString("childAges")]);
    m_child_ages_isSet = !json[QString("childAges")].isNull() && m_child_ages_isValid;
}

QString OAIHotelProduct_Guests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelProduct_Guests::asJsonObject() const {
    QJsonObject obj;
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_child_ages.size() > 0) {
        obj.insert(QString("childAges"), ::OpenAPI::toJsonValue(m_child_ages));
    }
    return obj;
}

qint32 OAIHotelProduct_Guests::getAdults() const {
    return m_adults;
}
void OAIHotelProduct_Guests::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIHotelProduct_Guests::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIHotelProduct_Guests::is_adults_Valid() const{
    return m_adults_isValid;
}

QList<qint32> OAIHotelProduct_Guests::getChildAges() const {
    return m_child_ages;
}
void OAIHotelProduct_Guests::setChildAges(const QList<qint32> &child_ages) {
    m_child_ages = child_ages;
    m_child_ages_isSet = true;
}

bool OAIHotelProduct_Guests::is_child_ages_Set() const{
    return m_child_ages_isSet;
}

bool OAIHotelProduct_Guests::is_child_ages_Valid() const{
    return m_child_ages_isValid;
}

bool OAIHotelProduct_Guests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_ages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelProduct_Guests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
