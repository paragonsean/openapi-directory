/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelOffers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelOffers::OAIHotelOffers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelOffers::OAIHotelOffers() {
    this->initializeModel();
}

OAIHotelOffers::~OAIHotelOffers() {}

void OAIHotelOffers::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_hotel_isSet = false;
    m_hotel_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHotelOffers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelOffers::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_hotel_isValid = ::OpenAPI::fromJsonValue(m_hotel, json[QString("hotel")]);
    m_hotel_isSet = !json[QString("hotel")].isNull() && m_hotel_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIHotelOffers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelOffers::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_hotel.isSet()) {
        obj.insert(QString("hotel"), ::OpenAPI::toJsonValue(m_hotel));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIHotelOffers::isAvailable() const {
    return m_available;
}
void OAIHotelOffers::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIHotelOffers::is_available_Set() const{
    return m_available_isSet;
}

bool OAIHotelOffers::is_available_Valid() const{
    return m_available_isValid;
}

OAIHotel OAIHotelOffers::getHotel() const {
    return m_hotel;
}
void OAIHotelOffers::setHotel(const OAIHotel &hotel) {
    m_hotel = hotel;
    m_hotel_isSet = true;
}

bool OAIHotelOffers::is_hotel_Set() const{
    return m_hotel_isSet;
}

bool OAIHotelOffers::is_hotel_Valid() const{
    return m_hotel_isValid;
}

QList<OAIHotelOffer> OAIHotelOffers::getOffers() const {
    return m_offers;
}
void OAIHotelOffers::setOffers(const QList<OAIHotelOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIHotelOffers::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIHotelOffers::is_offers_Valid() const{
    return m_offers_isValid;
}

QString OAIHotelOffers::getSelf() const {
    return m_self;
}
void OAIHotelOffers::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIHotelOffers::is_self_Set() const{
    return m_self_isSet;
}

bool OAIHotelOffers::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIHotelOffers::getType() const {
    return m_type;
}
void OAIHotelOffers::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHotelOffers::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHotelOffers::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHotelOffers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelOffers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
