/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotel::OAIHotel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotel::OAIHotel() {
    this->initializeModel();
}

OAIHotel::~OAIHotel() {}

void OAIHotel::initializeModel() {

    m_brand_code_isSet = false;
    m_brand_code_isValid = false;

    m_chain_code_isSet = false;
    m_chain_code_isValid = false;

    m_city_code_isSet = false;
    m_city_code_isValid = false;

    m_dupe_id_isSet = false;
    m_dupe_id_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIHotel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotel::fromJsonObject(QJsonObject json) {

    m_brand_code_isValid = ::OpenAPI::fromJsonValue(m_brand_code, json[QString("brandCode")]);
    m_brand_code_isSet = !json[QString("brandCode")].isNull() && m_brand_code_isValid;

    m_chain_code_isValid = ::OpenAPI::fromJsonValue(m_chain_code, json[QString("chainCode")]);
    m_chain_code_isSet = !json[QString("chainCode")].isNull() && m_chain_code_isValid;

    m_city_code_isValid = ::OpenAPI::fromJsonValue(m_city_code, json[QString("cityCode")]);
    m_city_code_isSet = !json[QString("cityCode")].isNull() && m_city_code_isValid;

    m_dupe_id_isValid = ::OpenAPI::fromJsonValue(m_dupe_id, json[QString("dupeId")]);
    m_dupe_id_isSet = !json[QString("dupeId")].isNull() && m_dupe_id_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIHotel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotel::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_code_isSet) {
        obj.insert(QString("brandCode"), ::OpenAPI::toJsonValue(m_brand_code));
    }
    if (m_chain_code_isSet) {
        obj.insert(QString("chainCode"), ::OpenAPI::toJsonValue(m_chain_code));
    }
    if (m_city_code_isSet) {
        obj.insert(QString("cityCode"), ::OpenAPI::toJsonValue(m_city_code));
    }
    if (m_dupe_id_isSet) {
        obj.insert(QString("dupeId"), ::OpenAPI::toJsonValue(m_dupe_id));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIHotel::getBrandCode() const {
    return m_brand_code;
}
void OAIHotel::setBrandCode(const QString &brand_code) {
    m_brand_code = brand_code;
    m_brand_code_isSet = true;
}

bool OAIHotel::is_brand_code_Set() const{
    return m_brand_code_isSet;
}

bool OAIHotel::is_brand_code_Valid() const{
    return m_brand_code_isValid;
}

QString OAIHotel::getChainCode() const {
    return m_chain_code;
}
void OAIHotel::setChainCode(const QString &chain_code) {
    m_chain_code = chain_code;
    m_chain_code_isSet = true;
}

bool OAIHotel::is_chain_code_Set() const{
    return m_chain_code_isSet;
}

bool OAIHotel::is_chain_code_Valid() const{
    return m_chain_code_isValid;
}

QString OAIHotel::getCityCode() const {
    return m_city_code;
}
void OAIHotel::setCityCode(const QString &city_code) {
    m_city_code = city_code;
    m_city_code_isSet = true;
}

bool OAIHotel::is_city_code_Set() const{
    return m_city_code_isSet;
}

bool OAIHotel::is_city_code_Valid() const{
    return m_city_code_isValid;
}

QString OAIHotel::getDupeId() const {
    return m_dupe_id;
}
void OAIHotel::setDupeId(const QString &dupe_id) {
    m_dupe_id = dupe_id;
    m_dupe_id_isSet = true;
}

bool OAIHotel::is_dupe_id_Set() const{
    return m_dupe_id_isSet;
}

bool OAIHotel::is_dupe_id_Valid() const{
    return m_dupe_id_isValid;
}

QString OAIHotel::getHotelId() const {
    return m_hotel_id;
}
void OAIHotel::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIHotel::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIHotel::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QString OAIHotel::getName() const {
    return m_name;
}
void OAIHotel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHotel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHotel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIHotel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dupe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
