/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethod::OAIMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethod::OAIMethod() {
    this->initializeModel();
}

OAIMethod::~OAIMethod() {}

void OAIMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREDIT_CARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::CREDIT_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AGENCY_ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::AGENCY_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRAVEL_AGENT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::TRAVEL_AGENT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CORPORATE_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::CORPORATE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOTEL_GUEST_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::HOTEL_GUEST_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::CHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISC_CHARGE_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::MISC_CHARGE_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADVANCE_DEPOSIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::ADVANCE_DEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPANY_ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::COMPANY_ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCC_BILLBACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::VCC_BILLBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCC_B2B_WALLET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::VCC_B2B_WALLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEFERED_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::DEFERED_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRAVEL_AGENT_IMMEDIATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::TRAVEL_AGENT_IMMEDIATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMethod::CREDIT_CARD:
            val = "CREDIT_CARD";
            break;
        case eOAIMethod::AGENCY_ACCOUNT:
            val = "AGENCY_ACCOUNT";
            break;
        case eOAIMethod::TRAVEL_AGENT_ID:
            val = "TRAVEL_AGENT_ID";
            break;
        case eOAIMethod::CORPORATE_ID:
            val = "CORPORATE_ID";
            break;
        case eOAIMethod::HOTEL_GUEST_ID:
            val = "HOTEL_GUEST_ID";
            break;
        case eOAIMethod::CHECK:
            val = "CHECK";
            break;
        case eOAIMethod::MISC_CHARGE_ORDER:
            val = "MISC_CHARGE_ORDER";
            break;
        case eOAIMethod::ADVANCE_DEPOSIT:
            val = "ADVANCE_DEPOSIT";
            break;
        case eOAIMethod::COMPANY_ADDRESS:
            val = "COMPANY_ADDRESS";
            break;
        case eOAIMethod::VCC_BILLBACK:
            val = "VCC_BILLBACK";
            break;
        case eOAIMethod::VCC_B2B_WALLET:
            val = "VCC_B2B_WALLET";
            break;
        case eOAIMethod::DEFERED_PAYMENT:
            val = "DEFERED_PAYMENT";
            break;
        case eOAIMethod::TRAVEL_AGENT_IMMEDIATE:
            val = "TRAVEL_AGENT_IMMEDIATE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMethod::eOAIMethod OAIMethod::getValue() const {
    return m_value;
}

void OAIMethod::setValue(const OAIMethod::eOAIMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
