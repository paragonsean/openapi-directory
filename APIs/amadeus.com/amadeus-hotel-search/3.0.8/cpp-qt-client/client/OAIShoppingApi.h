/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShoppingApi_H
#define OAI_OAIShoppingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIMultiResponse.h"
#include "OAIPricingResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShoppingApi : public QObject {
    Q_OBJECT

public:
    OAIShoppingApi(const int timeOut = 0);
    ~OAIShoppingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  hotel_ids QList<QString> [required]
    * @param[in]  adults qint32 [optional]
    * @param[in]  check_in_date QDate [optional]
    * @param[in]  check_out_date QDate [optional]
    * @param[in]  country_of_residence QString [optional]
    * @param[in]  room_quantity qint32 [optional]
    * @param[in]  price_range QString [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  payment_policy QString [optional]
    * @param[in]  board_type QString [optional]
    * @param[in]  include_closed bool [optional]
    * @param[in]  best_rate_only bool [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getMultiHotelOffers(const QList<QString> &hotel_ids, const ::OpenAPI::OptionalParam<qint32> &adults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &check_in_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &check_out_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &country_of_residence = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &room_quantity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &price_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_policy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &board_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &best_rate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offer_id QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getOfferPricing(const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMultiHotelOffersCallback(OAIHttpRequestWorker *worker);
    void getOfferPricingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMultiHotelOffersSignal(OAIMultiResponse summary);
    void getOfferPricingSignal(OAIPricingResponse summary);


    void getMultiHotelOffersSignalFull(OAIHttpRequestWorker *worker, OAIMultiResponse summary);
    void getOfferPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricingResponse summary);

    Q_DECL_DEPRECATED_X("Use getMultiHotelOffersSignalError() instead")
    void getMultiHotelOffersSignalE(OAIMultiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiHotelOffersSignalError(OAIMultiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferPricingSignalError() instead")
    void getOfferPricingSignalE(OAIPricingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferPricingSignalError(OAIPricingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMultiHotelOffersSignalErrorFull() instead")
    void getMultiHotelOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiHotelOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOfferPricingSignalErrorFull() instead")
    void getOfferPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOfferPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
