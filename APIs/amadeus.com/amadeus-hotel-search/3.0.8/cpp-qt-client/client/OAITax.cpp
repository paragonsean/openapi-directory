/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITax::OAITax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITax::OAITax() {
    this->initializeModel();
}

OAITax::~OAITax() {}

void OAITax::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_pricing_frequency_isSet = false;
    m_pricing_frequency_isValid = false;

    m_pricing_mode_isSet = false;
    m_pricing_mode_isValid = false;
}

void OAITax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITax::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_pricing_frequency_isValid = ::OpenAPI::fromJsonValue(m_pricing_frequency, json[QString("pricingFrequency")]);
    m_pricing_frequency_isSet = !json[QString("pricingFrequency")].isNull() && m_pricing_frequency_isValid;

    m_pricing_mode_isValid = ::OpenAPI::fromJsonValue(m_pricing_mode, json[QString("pricingMode")]);
    m_pricing_mode_isSet = !json[QString("pricingMode")].isNull() && m_pricing_mode_isValid;
}

QString OAITax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITax::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_included_isSet) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_pricing_frequency_isSet) {
        obj.insert(QString("pricingFrequency"), ::OpenAPI::toJsonValue(m_pricing_frequency));
    }
    if (m_pricing_mode_isSet) {
        obj.insert(QString("pricingMode"), ::OpenAPI::toJsonValue(m_pricing_mode));
    }
    return obj;
}

QString OAITax::getAmount() const {
    return m_amount;
}
void OAITax::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITax::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITax::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITax::getCode() const {
    return m_code;
}
void OAITax::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITax::is_code_Set() const{
    return m_code_isSet;
}

bool OAITax::is_code_Valid() const{
    return m_code_isValid;
}

QString OAITax::getCurrency() const {
    return m_currency;
}
void OAITax::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAITax::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAITax::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAITax::getDescription() const {
    return m_description;
}
void OAITax::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITax::is_description_Set() const{
    return m_description_isSet;
}

bool OAITax::is_description_Valid() const{
    return m_description_isValid;
}

bool OAITax::isIncluded() const {
    return m_included;
}
void OAITax::setIncluded(const bool &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAITax::is_included_Set() const{
    return m_included_isSet;
}

bool OAITax::is_included_Valid() const{
    return m_included_isValid;
}

QString OAITax::getPercentage() const {
    return m_percentage;
}
void OAITax::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAITax::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAITax::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAITax::getPricingFrequency() const {
    return m_pricing_frequency;
}
void OAITax::setPricingFrequency(const QString &pricing_frequency) {
    m_pricing_frequency = pricing_frequency;
    m_pricing_frequency_isSet = true;
}

bool OAITax::is_pricing_frequency_Set() const{
    return m_pricing_frequency_isSet;
}

bool OAITax::is_pricing_frequency_Valid() const{
    return m_pricing_frequency_isValid;
}

QString OAITax::getPricingMode() const {
    return m_pricing_mode;
}
void OAITax::setPricingMode(const QString &pricing_mode) {
    m_pricing_mode = pricing_mode;
    m_pricing_mode_isSet = true;
}

bool OAITax::is_pricing_mode_Set() const{
    return m_pricing_mode_isSet;
}

bool OAITax::is_pricing_mode_Valid() const{
    return m_pricing_mode_isValid;
}

bool OAITax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
