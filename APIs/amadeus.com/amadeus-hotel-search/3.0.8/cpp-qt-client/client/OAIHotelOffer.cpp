/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelOffer::OAIHotelOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelOffer::OAIHotelOffer() {
    this->initializeModel();
}

OAIHotelOffer::~OAIHotelOffer() {}

void OAIHotelOffer::initializeModel() {

    m_board_type_isSet = false;
    m_board_type_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_check_in_date_isSet = false;
    m_check_in_date_isValid = false;

    m_check_out_date_isSet = false;
    m_check_out_date_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rate_code_isSet = false;
    m_rate_code_isValid = false;

    m_rate_family_estimated_isSet = false;
    m_rate_family_estimated_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_room_quantity_isSet = false;
    m_room_quantity_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHotelOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelOffer::fromJsonObject(QJsonObject json) {

    m_board_type_isValid = ::OpenAPI::fromJsonValue(m_board_type, json[QString("boardType")]);
    m_board_type_isSet = !json[QString("boardType")].isNull() && m_board_type_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_check_in_date_isValid = ::OpenAPI::fromJsonValue(m_check_in_date, json[QString("checkInDate")]);
    m_check_in_date_isSet = !json[QString("checkInDate")].isNull() && m_check_in_date_isValid;

    m_check_out_date_isValid = ::OpenAPI::fromJsonValue(m_check_out_date, json[QString("checkOutDate")]);
    m_check_out_date_isSet = !json[QString("checkOutDate")].isNull() && m_check_out_date_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rate_code_isValid = ::OpenAPI::fromJsonValue(m_rate_code, json[QString("rateCode")]);
    m_rate_code_isSet = !json[QString("rateCode")].isNull() && m_rate_code_isValid;

    m_rate_family_estimated_isValid = ::OpenAPI::fromJsonValue(m_rate_family_estimated, json[QString("rateFamilyEstimated")]);
    m_rate_family_estimated_isSet = !json[QString("rateFamilyEstimated")].isNull() && m_rate_family_estimated_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_room_quantity_isValid = ::OpenAPI::fromJsonValue(m_room_quantity, json[QString("roomQuantity")]);
    m_room_quantity_isSet = !json[QString("roomQuantity")].isNull() && m_room_quantity_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIHotelOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_board_type.isSet()) {
        obj.insert(QString("boardType"), ::OpenAPI::toJsonValue(m_board_type));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_check_in_date_isSet) {
        obj.insert(QString("checkInDate"), ::OpenAPI::toJsonValue(m_check_in_date));
    }
    if (m_check_out_date_isSet) {
        obj.insert(QString("checkOutDate"), ::OpenAPI::toJsonValue(m_check_out_date));
    }
    if (m_commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_guests.isSet()) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rate_code_isSet) {
        obj.insert(QString("rateCode"), ::OpenAPI::toJsonValue(m_rate_code));
    }
    if (m_rate_family_estimated.isSet()) {
        obj.insert(QString("rateFamilyEstimated"), ::OpenAPI::toJsonValue(m_rate_family_estimated));
    }
    if (m_room.isSet()) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_room_quantity_isSet) {
        obj.insert(QString("roomQuantity"), ::OpenAPI::toJsonValue(m_room_quantity));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIBoardType OAIHotelOffer::getBoardType() const {
    return m_board_type;
}
void OAIHotelOffer::setBoardType(const OAIBoardType &board_type) {
    m_board_type = board_type;
    m_board_type_isSet = true;
}

bool OAIHotelOffer::is_board_type_Set() const{
    return m_board_type_isSet;
}

bool OAIHotelOffer::is_board_type_Valid() const{
    return m_board_type_isValid;
}

QString OAIHotelOffer::getCategory() const {
    return m_category;
}
void OAIHotelOffer::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIHotelOffer::is_category_Set() const{
    return m_category_isSet;
}

bool OAIHotelOffer::is_category_Valid() const{
    return m_category_isValid;
}

QDate OAIHotelOffer::getCheckInDate() const {
    return m_check_in_date;
}
void OAIHotelOffer::setCheckInDate(const QDate &check_in_date) {
    m_check_in_date = check_in_date;
    m_check_in_date_isSet = true;
}

bool OAIHotelOffer::is_check_in_date_Set() const{
    return m_check_in_date_isSet;
}

bool OAIHotelOffer::is_check_in_date_Valid() const{
    return m_check_in_date_isValid;
}

QDate OAIHotelOffer::getCheckOutDate() const {
    return m_check_out_date;
}
void OAIHotelOffer::setCheckOutDate(const QDate &check_out_date) {
    m_check_out_date = check_out_date;
    m_check_out_date_isSet = true;
}

bool OAIHotelOffer::is_check_out_date_Set() const{
    return m_check_out_date_isSet;
}

bool OAIHotelOffer::is_check_out_date_Valid() const{
    return m_check_out_date_isValid;
}

OAIHotelProduct_Commission OAIHotelOffer::getCommission() const {
    return m_commission;
}
void OAIHotelOffer::setCommission(const OAIHotelProduct_Commission &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIHotelOffer::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIHotelOffer::is_commission_Valid() const{
    return m_commission_isValid;
}

OAIQualifiedFreeText OAIHotelOffer::getDescription() const {
    return m_description;
}
void OAIHotelOffer::setDescription(const OAIQualifiedFreeText &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHotelOffer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHotelOffer::is_description_Valid() const{
    return m_description_isValid;
}

OAIHotelProduct_Guests OAIHotelOffer::getGuests() const {
    return m_guests;
}
void OAIHotelOffer::setGuests(const OAIHotelProduct_Guests &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIHotelOffer::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIHotelOffer::is_guests_Valid() const{
    return m_guests_isValid;
}

QString OAIHotelOffer::getId() const {
    return m_id;
}
void OAIHotelOffer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHotelOffer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHotelOffer::is_id_Valid() const{
    return m_id_isValid;
}

OAIHotelProduct_PolicyDetails OAIHotelOffer::getPolicies() const {
    return m_policies;
}
void OAIHotelOffer::setPolicies(const OAIHotelProduct_PolicyDetails &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIHotelOffer::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIHotelOffer::is_policies_Valid() const{
    return m_policies_isValid;
}

OAIHotelProduct_HotelPrice OAIHotelOffer::getPrice() const {
    return m_price;
}
void OAIHotelOffer::setPrice(const OAIHotelProduct_HotelPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIHotelOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAIHotelOffer::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIHotelOffer::getRateCode() const {
    return m_rate_code;
}
void OAIHotelOffer::setRateCode(const QString &rate_code) {
    m_rate_code = rate_code;
    m_rate_code_isSet = true;
}

bool OAIHotelOffer::is_rate_code_Set() const{
    return m_rate_code_isSet;
}

bool OAIHotelOffer::is_rate_code_Valid() const{
    return m_rate_code_isValid;
}

OAIHotelProduct_RateFamily OAIHotelOffer::getRateFamilyEstimated() const {
    return m_rate_family_estimated;
}
void OAIHotelOffer::setRateFamilyEstimated(const OAIHotelProduct_RateFamily &rate_family_estimated) {
    m_rate_family_estimated = rate_family_estimated;
    m_rate_family_estimated_isSet = true;
}

bool OAIHotelOffer::is_rate_family_estimated_Set() const{
    return m_rate_family_estimated_isSet;
}

bool OAIHotelOffer::is_rate_family_estimated_Valid() const{
    return m_rate_family_estimated_isValid;
}

OAIHotelProduct_RoomDetails OAIHotelOffer::getRoom() const {
    return m_room;
}
void OAIHotelOffer::setRoom(const OAIHotelProduct_RoomDetails &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAIHotelOffer::is_room_Set() const{
    return m_room_isSet;
}

bool OAIHotelOffer::is_room_Valid() const{
    return m_room_isValid;
}

QString OAIHotelOffer::getRoomQuantity() const {
    return m_room_quantity;
}
void OAIHotelOffer::setRoomQuantity(const QString &room_quantity) {
    m_room_quantity = room_quantity;
    m_room_quantity_isSet = true;
}

bool OAIHotelOffer::is_room_quantity_Set() const{
    return m_room_quantity_isSet;
}

bool OAIHotelOffer::is_room_quantity_Valid() const{
    return m_room_quantity_isValid;
}

QString OAIHotelOffer::getSelf() const {
    return m_self;
}
void OAIHotelOffer::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIHotelOffer::is_self_Set() const{
    return m_self_isSet;
}

bool OAIHotelOffer::is_self_Valid() const{
    return m_self_isValid;
}

OAIType OAIHotelOffer::getType() const {
    return m_type;
}
void OAIHotelOffer::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHotelOffer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHotelOffer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHotelOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_board_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_out_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_family_estimated.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_price_isValid && m_rate_code_isValid && m_room_isValid && true;
}

} // namespace OpenAPI
