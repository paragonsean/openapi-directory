/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelProduct_PolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelProduct_PolicyDetails::OAIHotelProduct_PolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelProduct_PolicyDetails::OAIHotelProduct_PolicyDetails() {
    this->initializeModel();
}

OAIHotelProduct_PolicyDetails::~OAIHotelProduct_PolicyDetails() {}

void OAIHotelProduct_PolicyDetails::initializeModel() {

    m_cancellation_isSet = false;
    m_cancellation_isValid = false;

    m_check_in_out_isSet = false;
    m_check_in_out_isValid = false;

    m_deposit_isSet = false;
    m_deposit_isValid = false;

    m_guarantee_isSet = false;
    m_guarantee_isValid = false;

    m_hold_time_isSet = false;
    m_hold_time_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_prepay_isSet = false;
    m_prepay_isValid = false;
}

void OAIHotelProduct_PolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelProduct_PolicyDetails::fromJsonObject(QJsonObject json) {

    m_cancellation_isValid = ::OpenAPI::fromJsonValue(m_cancellation, json[QString("cancellation")]);
    m_cancellation_isSet = !json[QString("cancellation")].isNull() && m_cancellation_isValid;

    m_check_in_out_isValid = ::OpenAPI::fromJsonValue(m_check_in_out, json[QString("checkInOut")]);
    m_check_in_out_isSet = !json[QString("checkInOut")].isNull() && m_check_in_out_isValid;

    m_deposit_isValid = ::OpenAPI::fromJsonValue(m_deposit, json[QString("deposit")]);
    m_deposit_isSet = !json[QString("deposit")].isNull() && m_deposit_isValid;

    m_guarantee_isValid = ::OpenAPI::fromJsonValue(m_guarantee, json[QString("guarantee")]);
    m_guarantee_isSet = !json[QString("guarantee")].isNull() && m_guarantee_isValid;

    m_hold_time_isValid = ::OpenAPI::fromJsonValue(m_hold_time, json[QString("holdTime")]);
    m_hold_time_isSet = !json[QString("holdTime")].isNull() && m_hold_time_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_prepay_isValid = ::OpenAPI::fromJsonValue(m_prepay, json[QString("prepay")]);
    m_prepay_isSet = !json[QString("prepay")].isNull() && m_prepay_isValid;
}

QString OAIHotelProduct_PolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelProduct_PolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation.isSet()) {
        obj.insert(QString("cancellation"), ::OpenAPI::toJsonValue(m_cancellation));
    }
    if (m_check_in_out.isSet()) {
        obj.insert(QString("checkInOut"), ::OpenAPI::toJsonValue(m_check_in_out));
    }
    if (m_deposit.isSet()) {
        obj.insert(QString("deposit"), ::OpenAPI::toJsonValue(m_deposit));
    }
    if (m_guarantee.isSet()) {
        obj.insert(QString("guarantee"), ::OpenAPI::toJsonValue(m_guarantee));
    }
    if (m_hold_time.isSet()) {
        obj.insert(QString("holdTime"), ::OpenAPI::toJsonValue(m_hold_time));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_prepay.isSet()) {
        obj.insert(QString("prepay"), ::OpenAPI::toJsonValue(m_prepay));
    }
    return obj;
}

OAIHotelProduct_CancellationPolicy OAIHotelProduct_PolicyDetails::getCancellation() const {
    return m_cancellation;
}
void OAIHotelProduct_PolicyDetails::setCancellation(const OAIHotelProduct_CancellationPolicy &cancellation) {
    m_cancellation = cancellation;
    m_cancellation_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_cancellation_Set() const{
    return m_cancellation_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_cancellation_Valid() const{
    return m_cancellation_isValid;
}

OAIHotelProduct_CheckInOutPolicy OAIHotelProduct_PolicyDetails::getCheckInOut() const {
    return m_check_in_out;
}
void OAIHotelProduct_PolicyDetails::setCheckInOut(const OAIHotelProduct_CheckInOutPolicy &check_in_out) {
    m_check_in_out = check_in_out;
    m_check_in_out_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_check_in_out_Set() const{
    return m_check_in_out_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_check_in_out_Valid() const{
    return m_check_in_out_isValid;
}

OAIHotelProduct_DepositPolicy OAIHotelProduct_PolicyDetails::getDeposit() const {
    return m_deposit;
}
void OAIHotelProduct_PolicyDetails::setDeposit(const OAIHotelProduct_DepositPolicy &deposit) {
    m_deposit = deposit;
    m_deposit_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_deposit_Set() const{
    return m_deposit_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_deposit_Valid() const{
    return m_deposit_isValid;
}

OAIHotelProduct_GuaranteePolicy OAIHotelProduct_PolicyDetails::getGuarantee() const {
    return m_guarantee;
}
void OAIHotelProduct_PolicyDetails::setGuarantee(const OAIHotelProduct_GuaranteePolicy &guarantee) {
    m_guarantee = guarantee;
    m_guarantee_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_guarantee_Set() const{
    return m_guarantee_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_guarantee_Valid() const{
    return m_guarantee_isValid;
}

OAIHotelProduct_HoldPolicy OAIHotelProduct_PolicyDetails::getHoldTime() const {
    return m_hold_time;
}
void OAIHotelProduct_PolicyDetails::setHoldTime(const OAIHotelProduct_HoldPolicy &hold_time) {
    m_hold_time = hold_time;
    m_hold_time_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_hold_time_Set() const{
    return m_hold_time_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_hold_time_Valid() const{
    return m_hold_time_isValid;
}

OAIPaymentType OAIHotelProduct_PolicyDetails::getPaymentType() const {
    return m_payment_type;
}
void OAIHotelProduct_PolicyDetails::setPaymentType(const OAIPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIHotelProduct_DepositPolicy OAIHotelProduct_PolicyDetails::getPrepay() const {
    return m_prepay;
}
void OAIHotelProduct_PolicyDetails::setPrepay(const OAIHotelProduct_DepositPolicy &prepay) {
    m_prepay = prepay;
    m_prepay_isSet = true;
}

bool OAIHotelProduct_PolicyDetails::is_prepay_Set() const{
    return m_prepay_isSet;
}

bool OAIHotelProduct_PolicyDetails::is_prepay_Valid() const{
    return m_prepay_isValid;
}

bool OAIHotelProduct_PolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_in_out.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepay.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelProduct_PolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
