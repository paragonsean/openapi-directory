/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelProduct_RoomDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelProduct_RoomDetails::OAIHotelProduct_RoomDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelProduct_RoomDetails::OAIHotelProduct_RoomDetails() {
    this->initializeModel();
}

OAIHotelProduct_RoomDetails::~OAIHotelProduct_RoomDetails() {}

void OAIHotelProduct_RoomDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_estimated_isSet = false;
    m_type_estimated_isValid = false;
}

void OAIHotelProduct_RoomDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelProduct_RoomDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_estimated_isValid = ::OpenAPI::fromJsonValue(m_type_estimated, json[QString("typeEstimated")]);
    m_type_estimated_isSet = !json[QString("typeEstimated")].isNull() && m_type_estimated_isValid;
}

QString OAIHotelProduct_RoomDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelProduct_RoomDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_estimated.isSet()) {
        obj.insert(QString("typeEstimated"), ::OpenAPI::toJsonValue(m_type_estimated));
    }
    return obj;
}

OAIQualifiedFreeText OAIHotelProduct_RoomDetails::getDescription() const {
    return m_description;
}
void OAIHotelProduct_RoomDetails::setDescription(const OAIQualifiedFreeText &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHotelProduct_RoomDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHotelProduct_RoomDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIHotelProduct_RoomDetails::getType() const {
    return m_type;
}
void OAIHotelProduct_RoomDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHotelProduct_RoomDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHotelProduct_RoomDetails::is_type_Valid() const{
    return m_type_isValid;
}

OAIHotelProduct_EstimatedRoomType OAIHotelProduct_RoomDetails::getTypeEstimated() const {
    return m_type_estimated;
}
void OAIHotelProduct_RoomDetails::setTypeEstimated(const OAIHotelProduct_EstimatedRoomType &type_estimated) {
    m_type_estimated = type_estimated;
    m_type_estimated_isSet = true;
}

bool OAIHotelProduct_RoomDetails::is_type_estimated_Set() const{
    return m_type_estimated_isSet;
}

bool OAIHotelProduct_RoomDetails::is_type_estimated_Valid() const{
    return m_type_estimated_isValid;
}

bool OAIHotelProduct_RoomDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_estimated.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelProduct_RoomDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
