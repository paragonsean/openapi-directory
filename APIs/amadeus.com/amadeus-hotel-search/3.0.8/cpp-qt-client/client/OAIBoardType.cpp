/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoardType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoardType::OAIBoardType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoardType::OAIBoardType() {
    this->initializeModel();
}

OAIBoardType::~OAIBoardType() {}

void OAIBoardType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBoardType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBoardType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ROOM_ONLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::ROOM_ONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HALF_BOARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::HALF_BOARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL_BOARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::FULL_BOARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALL_INCLUSIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::ALL_INCLUSIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUFFET_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::BUFFET_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARIBBEAN_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::CARIBBEAN_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTINENTAL_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::CONTINENTAL_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENGLISH_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::ENGLISH_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::FULL_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DINNER_BED_AND_BREAKFAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::DINNER_BED_AND_BREAKFAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUNCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::LUNCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DINNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::DINNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAMILY_PLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::FAMILY_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AS_BROCHURED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::AS_BROCHURED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELF_CATERING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::SELF_CATERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BERMUDA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::BERMUDA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMERICAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::AMERICAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAMILY_AMERICAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::FAMILY_AMERICAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MODIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBoardType::MODIFIED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBoardType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBoardType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBoardType::ROOM_ONLY:
            val = "ROOM_ONLY";
            break;
        case eOAIBoardType::BREAKFAST:
            val = "BREAKFAST";
            break;
        case eOAIBoardType::HALF_BOARD:
            val = "HALF_BOARD";
            break;
        case eOAIBoardType::FULL_BOARD:
            val = "FULL_BOARD";
            break;
        case eOAIBoardType::ALL_INCLUSIVE:
            val = "ALL_INCLUSIVE";
            break;
        case eOAIBoardType::BUFFET_BREAKFAST:
            val = "BUFFET_BREAKFAST";
            break;
        case eOAIBoardType::CARIBBEAN_BREAKFAST:
            val = "CARIBBEAN_BREAKFAST";
            break;
        case eOAIBoardType::CONTINENTAL_BREAKFAST:
            val = "CONTINENTAL_BREAKFAST";
            break;
        case eOAIBoardType::ENGLISH_BREAKFAST:
            val = "ENGLISH_BREAKFAST";
            break;
        case eOAIBoardType::FULL_BREAKFAST:
            val = "FULL_BREAKFAST";
            break;
        case eOAIBoardType::DINNER_BED_AND_BREAKFAST:
            val = "DINNER_BED_AND_BREAKFAST";
            break;
        case eOAIBoardType::LUNCH:
            val = "LUNCH";
            break;
        case eOAIBoardType::DINNER:
            val = "DINNER";
            break;
        case eOAIBoardType::FAMILY_PLAN:
            val = "FAMILY_PLAN";
            break;
        case eOAIBoardType::AS_BROCHURED:
            val = "AS_BROCHURED";
            break;
        case eOAIBoardType::SELF_CATERING:
            val = "SELF_CATERING";
            break;
        case eOAIBoardType::BERMUDA:
            val = "BERMUDA";
            break;
        case eOAIBoardType::AMERICAN:
            val = "AMERICAN";
            break;
        case eOAIBoardType::FAMILY_AMERICAN:
            val = "FAMILY_AMERICAN";
            break;
        case eOAIBoardType::MODIFIED:
            val = "MODIFIED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBoardType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBoardType::eOAIBoardType OAIBoardType::getValue() const {
    return m_value;
}

void OAIBoardType::setValue(const OAIBoardType::eOAIBoardType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBoardType::isSet() const {
    
    return m_value_isSet;
}

bool OAIBoardType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
