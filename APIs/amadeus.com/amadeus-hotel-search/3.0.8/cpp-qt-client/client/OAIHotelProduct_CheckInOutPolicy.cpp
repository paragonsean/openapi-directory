/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelProduct_CheckInOutPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelProduct_CheckInOutPolicy::OAIHotelProduct_CheckInOutPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelProduct_CheckInOutPolicy::OAIHotelProduct_CheckInOutPolicy() {
    this->initializeModel();
}

OAIHotelProduct_CheckInOutPolicy::~OAIHotelProduct_CheckInOutPolicy() {}

void OAIHotelProduct_CheckInOutPolicy::initializeModel() {

    m_check_in_isSet = false;
    m_check_in_isValid = false;

    m_check_in_description_isSet = false;
    m_check_in_description_isValid = false;

    m_check_out_isSet = false;
    m_check_out_isValid = false;

    m_check_out_description_isSet = false;
    m_check_out_description_isValid = false;
}

void OAIHotelProduct_CheckInOutPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelProduct_CheckInOutPolicy::fromJsonObject(QJsonObject json) {

    m_check_in_isValid = ::OpenAPI::fromJsonValue(m_check_in, json[QString("checkIn")]);
    m_check_in_isSet = !json[QString("checkIn")].isNull() && m_check_in_isValid;

    m_check_in_description_isValid = ::OpenAPI::fromJsonValue(m_check_in_description, json[QString("checkInDescription")]);
    m_check_in_description_isSet = !json[QString("checkInDescription")].isNull() && m_check_in_description_isValid;

    m_check_out_isValid = ::OpenAPI::fromJsonValue(m_check_out, json[QString("checkOut")]);
    m_check_out_isSet = !json[QString("checkOut")].isNull() && m_check_out_isValid;

    m_check_out_description_isValid = ::OpenAPI::fromJsonValue(m_check_out_description, json[QString("checkOutDescription")]);
    m_check_out_description_isSet = !json[QString("checkOutDescription")].isNull() && m_check_out_description_isValid;
}

QString OAIHotelProduct_CheckInOutPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelProduct_CheckInOutPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_check_in_isSet) {
        obj.insert(QString("checkIn"), ::OpenAPI::toJsonValue(m_check_in));
    }
    if (m_check_in_description.isSet()) {
        obj.insert(QString("checkInDescription"), ::OpenAPI::toJsonValue(m_check_in_description));
    }
    if (m_check_out_isSet) {
        obj.insert(QString("checkOut"), ::OpenAPI::toJsonValue(m_check_out));
    }
    if (m_check_out_description.isSet()) {
        obj.insert(QString("checkOutDescription"), ::OpenAPI::toJsonValue(m_check_out_description));
    }
    return obj;
}

QString OAIHotelProduct_CheckInOutPolicy::getCheckIn() const {
    return m_check_in;
}
void OAIHotelProduct_CheckInOutPolicy::setCheckIn(const QString &check_in) {
    m_check_in = check_in;
    m_check_in_isSet = true;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_in_Set() const{
    return m_check_in_isSet;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_in_Valid() const{
    return m_check_in_isValid;
}

OAIQualifiedFreeText OAIHotelProduct_CheckInOutPolicy::getCheckInDescription() const {
    return m_check_in_description;
}
void OAIHotelProduct_CheckInOutPolicy::setCheckInDescription(const OAIQualifiedFreeText &check_in_description) {
    m_check_in_description = check_in_description;
    m_check_in_description_isSet = true;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_in_description_Set() const{
    return m_check_in_description_isSet;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_in_description_Valid() const{
    return m_check_in_description_isValid;
}

QString OAIHotelProduct_CheckInOutPolicy::getCheckOut() const {
    return m_check_out;
}
void OAIHotelProduct_CheckInOutPolicy::setCheckOut(const QString &check_out) {
    m_check_out = check_out;
    m_check_out_isSet = true;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_out_Set() const{
    return m_check_out_isSet;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_out_Valid() const{
    return m_check_out_isValid;
}

OAIQualifiedFreeText OAIHotelProduct_CheckInOutPolicy::getCheckOutDescription() const {
    return m_check_out_description;
}
void OAIHotelProduct_CheckInOutPolicy::setCheckOutDescription(const OAIQualifiedFreeText &check_out_description) {
    m_check_out_description = check_out_description;
    m_check_out_description_isSet = true;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_out_description_Set() const{
    return m_check_out_description_isSet;
}

bool OAIHotelProduct_CheckInOutPolicy::is_check_out_description_Valid() const{
    return m_check_out_description_isValid;
}

bool OAIHotelProduct_CheckInOutPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_in_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_out_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelProduct_CheckInOutPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
