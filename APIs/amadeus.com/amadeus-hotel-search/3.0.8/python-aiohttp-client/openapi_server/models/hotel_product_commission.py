# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qualified_free_text import QualifiedFreeText
import re
from openapi_server import util


class HotelProductCommission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, description: QualifiedFreeText=None, percentage: str=None):
        """HotelProductCommission - a model defined in OpenAPI

        :param amount: The amount of this HotelProductCommission.
        :param description: The description of this HotelProductCommission.
        :param percentage: The percentage of this HotelProductCommission.
        """
        self.openapi_types = {
            'amount': str,
            'description': QualifiedFreeText,
            'percentage': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'percentage': 'percentage'
        }

        self._amount = amount
        self._description = description
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelProductCommission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelProduct_Commission of this HotelProductCommission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this HotelProductCommission.

        Amount of the commission paid to the travel seller. The amount is always linked to the currency code of the offer

        :return: The amount of this HotelProductCommission.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this HotelProductCommission.

        Amount of the commission paid to the travel seller. The amount is always linked to the currency code of the offer

        :param amount: The amount of this HotelProductCommission.
        :type amount: str
        """
        if amount is not None and not re.search(r'^\\d+(\\.\\d+)?$', amount):
            raise ValueError("Invalid value for `amount`, must be a follow pattern or equal to `/^\\d+(\\.\\d+)?$/`")

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this HotelProductCommission.


        :return: The description of this HotelProductCommission.
        :rtype: QualifiedFreeText
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HotelProductCommission.


        :param description: The description of this HotelProductCommission.
        :type description: QualifiedFreeText
        """

        self._description = description

    @property
    def percentage(self):
        """Gets the percentage of this HotelProductCommission.

        Percentage of the commission paid to the travel seller. Value is between 0 and 100

        :return: The percentage of this HotelProductCommission.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this HotelProductCommission.

        Percentage of the commission paid to the travel seller. Value is between 0 and 100

        :param percentage: The percentage of this HotelProductCommission.
        :type percentage: str
        """
        if percentage is not None and not re.search(r'^\\d+(\\.\\d+)?$', percentage):
            raise ValueError("Invalid value for `percentage`, must be a follow pattern or equal to `/^\\d+(\\.\\d+)?$/`")

        self._percentage = percentage
