# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hotel import Hotel
from openapi_server.models.hotel_offer import HotelOffer
from openapi_server import util


class HotelOffers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, hotel: Hotel=None, offers: List[HotelOffer]=None, _self: str=None, type: str=None):
        """HotelOffers - a model defined in OpenAPI

        :param available: The available of this HotelOffers.
        :param hotel: The hotel of this HotelOffers.
        :param offers: The offers of this HotelOffers.
        :param _self: The _self of this HotelOffers.
        :param type: The type of this HotelOffers.
        """
        self.openapi_types = {
            'available': bool,
            'hotel': Hotel,
            'offers': List[HotelOffer],
            '_self': str,
            'type': str
        }

        self.attribute_map = {
            'available': 'available',
            'hotel': 'hotel',
            'offers': 'offers',
            '_self': 'self',
            'type': 'type'
        }

        self._available = available
        self._hotel = hotel
        self._offers = offers
        self.__self = _self
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelOffers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelOffers of this HotelOffers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this HotelOffers.


        :return: The available of this HotelOffers.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this HotelOffers.


        :param available: The available of this HotelOffers.
        :type available: bool
        """

        self._available = available

    @property
    def hotel(self):
        """Gets the hotel of this HotelOffers.


        :return: The hotel of this HotelOffers.
        :rtype: Hotel
        """
        return self._hotel

    @hotel.setter
    def hotel(self, hotel):
        """Sets the hotel of this HotelOffers.


        :param hotel: The hotel of this HotelOffers.
        :type hotel: Hotel
        """

        self._hotel = hotel

    @property
    def offers(self):
        """Gets the offers of this HotelOffers.


        :return: The offers of this HotelOffers.
        :rtype: List[HotelOffer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this HotelOffers.


        :param offers: The offers of this HotelOffers.
        :type offers: List[HotelOffer]
        """

        self._offers = offers

    @property
    def _self(self):
        """Gets the _self of this HotelOffers.


        :return: The _self of this HotelOffers.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this HotelOffers.


        :param _self: The _self of this HotelOffers.
        :type _self: str
        """

        self.__self = _self

    @property
    def type(self):
        """Gets the type of this HotelOffers.

        the type of the object (hotel-offers)

        :return: The type of this HotelOffers.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HotelOffers.

        the type of the object (hotel-offers)

        :param type: The type of this HotelOffers.
        :type type: str
        """

        self._type = type
