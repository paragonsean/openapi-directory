# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.board_type import BoardType
from openapi_server.models.hotel_product_commission import HotelProductCommission
from openapi_server.models.hotel_product_guests import HotelProductGuests
from openapi_server.models.hotel_product_hotel_price import HotelProductHotelPrice
from openapi_server.models.hotel_product_policy_details import HotelProductPolicyDetails
from openapi_server.models.hotel_product_rate_family import HotelProductRateFamily
from openapi_server.models.hotel_product_room_details import HotelProductRoomDetails
from openapi_server.models.qualified_free_text import QualifiedFreeText
from openapi_server.models.type import Type
import re
from openapi_server import util


class HotelOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board_type: BoardType=None, category: str=None, check_in_date: date=None, check_out_date: date=None, commission: HotelProductCommission=None, description: QualifiedFreeText=None, guests: HotelProductGuests=None, id: str=None, policies: HotelProductPolicyDetails=None, price: HotelProductHotelPrice=None, rate_code: str=None, rate_family_estimated: HotelProductRateFamily=None, room: HotelProductRoomDetails=None, room_quantity: str=None, _self: str=None, type: Type=None):
        """HotelOffer - a model defined in OpenAPI

        :param board_type: The board_type of this HotelOffer.
        :param category: The category of this HotelOffer.
        :param check_in_date: The check_in_date of this HotelOffer.
        :param check_out_date: The check_out_date of this HotelOffer.
        :param commission: The commission of this HotelOffer.
        :param description: The description of this HotelOffer.
        :param guests: The guests of this HotelOffer.
        :param id: The id of this HotelOffer.
        :param policies: The policies of this HotelOffer.
        :param price: The price of this HotelOffer.
        :param rate_code: The rate_code of this HotelOffer.
        :param rate_family_estimated: The rate_family_estimated of this HotelOffer.
        :param room: The room of this HotelOffer.
        :param room_quantity: The room_quantity of this HotelOffer.
        :param _self: The _self of this HotelOffer.
        :param type: The type of this HotelOffer.
        """
        self.openapi_types = {
            'board_type': BoardType,
            'category': str,
            'check_in_date': date,
            'check_out_date': date,
            'commission': HotelProductCommission,
            'description': QualifiedFreeText,
            'guests': HotelProductGuests,
            'id': str,
            'policies': HotelProductPolicyDetails,
            'price': HotelProductHotelPrice,
            'rate_code': str,
            'rate_family_estimated': HotelProductRateFamily,
            'room': HotelProductRoomDetails,
            'room_quantity': str,
            '_self': str,
            'type': Type
        }

        self.attribute_map = {
            'board_type': 'boardType',
            'category': 'category',
            'check_in_date': 'checkInDate',
            'check_out_date': 'checkOutDate',
            'commission': 'commission',
            'description': 'description',
            'guests': 'guests',
            'id': 'id',
            'policies': 'policies',
            'price': 'price',
            'rate_code': 'rateCode',
            'rate_family_estimated': 'rateFamilyEstimated',
            'room': 'room',
            'room_quantity': 'roomQuantity',
            '_self': 'self',
            'type': 'type'
        }

        self._board_type = board_type
        self._category = category
        self._check_in_date = check_in_date
        self._check_out_date = check_out_date
        self._commission = commission
        self._description = description
        self._guests = guests
        self._id = id
        self._policies = policies
        self._price = price
        self._rate_code = rate_code
        self._rate_family_estimated = rate_family_estimated
        self._room = room
        self._room_quantity = room_quantity
        self.__self = _self
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelOffer of this HotelOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_type(self):
        """Gets the board_type of this HotelOffer.


        :return: The board_type of this HotelOffer.
        :rtype: BoardType
        """
        return self._board_type

    @board_type.setter
    def board_type(self, board_type):
        """Sets the board_type of this HotelOffer.


        :param board_type: The board_type of this HotelOffer.
        :type board_type: BoardType
        """

        self._board_type = board_type

    @property
    def category(self):
        """Gets the category of this HotelOffer.

        Special Rate Category Examples:   ASSOCIATION   FAMILY_PLAN

        :return: The category of this HotelOffer.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HotelOffer.

        Special Rate Category Examples:   ASSOCIATION   FAMILY_PLAN

        :param category: The category of this HotelOffer.
        :type category: str
        """

        self._category = category

    @property
    def check_in_date(self):
        """Gets the check_in_date of this HotelOffer.

        check-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).

        :return: The check_in_date of this HotelOffer.
        :rtype: date
        """
        return self._check_in_date

    @check_in_date.setter
    def check_in_date(self, check_in_date):
        """Sets the check_in_date of this HotelOffer.

        check-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).

        :param check_in_date: The check_in_date of this HotelOffer.
        :type check_in_date: date
        """

        self._check_in_date = check_in_date

    @property
    def check_out_date(self):
        """Gets the check_out_date of this HotelOffer.

        check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is `checkInDate`+1.

        :return: The check_out_date of this HotelOffer.
        :rtype: date
        """
        return self._check_out_date

    @check_out_date.setter
    def check_out_date(self, check_out_date):
        """Sets the check_out_date of this HotelOffer.

        check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is `checkInDate`+1.

        :param check_out_date: The check_out_date of this HotelOffer.
        :type check_out_date: date
        """

        self._check_out_date = check_out_date

    @property
    def commission(self):
        """Gets the commission of this HotelOffer.


        :return: The commission of this HotelOffer.
        :rtype: HotelProductCommission
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this HotelOffer.


        :param commission: The commission of this HotelOffer.
        :type commission: HotelProductCommission
        """

        self._commission = commission

    @property
    def description(self):
        """Gets the description of this HotelOffer.


        :return: The description of this HotelOffer.
        :rtype: QualifiedFreeText
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HotelOffer.


        :param description: The description of this HotelOffer.
        :type description: QualifiedFreeText
        """

        self._description = description

    @property
    def guests(self):
        """Gets the guests of this HotelOffer.


        :return: The guests of this HotelOffer.
        :rtype: HotelProductGuests
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this HotelOffer.


        :param guests: The guests of this HotelOffer.
        :type guests: HotelProductGuests
        """

        self._guests = guests

    @property
    def id(self):
        """Gets the id of this HotelOffer.

        Unique identifier of this offer. Might be valid for a temporary period only.

        :return: The id of this HotelOffer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HotelOffer.

        Unique identifier of this offer. Might be valid for a temporary period only.

        :param id: The id of this HotelOffer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 100:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `100`")
        if id is not None and len(id) < 2:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `2`")
        if id is not None and not re.search(r'^[A-Z0-9]*$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Z0-9]*$/`")

        self._id = id

    @property
    def policies(self):
        """Gets the policies of this HotelOffer.


        :return: The policies of this HotelOffer.
        :rtype: HotelProductPolicyDetails
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this HotelOffer.


        :param policies: The policies of this HotelOffer.
        :type policies: HotelProductPolicyDetails
        """

        self._policies = policies

    @property
    def price(self):
        """Gets the price of this HotelOffer.


        :return: The price of this HotelOffer.
        :rtype: HotelProductHotelPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this HotelOffer.


        :param price: The price of this HotelOffer.
        :type price: HotelProductHotelPrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def rate_code(self):
        """Gets the rate_code of this HotelOffer.

        Special Rate - Provider Response Code (3 chars) Examples    * RAC - Rack    * BAR - Best Available Rate    * PRO - Promotional    * COR - Corporate    * GOV - Government (qualified)    * AAA - AAA (qualified)    * BNB - Bed and Breakfast    * PKG - Package    * TVL - Travel Industry    * SPC - Special Promo Rate    * WKD - Weekend    * CON - Convention    * SNR - Senior (Europe) (qualified)    * ARP - AARP - American Association of Retired People (50+) (qualified)    * SRS - Senior (qualified)    * ROR - Room Only Rate (no breakfast)    * FAM - Family    * DAY - Day rate

        :return: The rate_code of this HotelOffer.
        :rtype: str
        """
        return self._rate_code

    @rate_code.setter
    def rate_code(self, rate_code):
        """Sets the rate_code of this HotelOffer.

        Special Rate - Provider Response Code (3 chars) Examples    * RAC - Rack    * BAR - Best Available Rate    * PRO - Promotional    * COR - Corporate    * GOV - Government (qualified)    * AAA - AAA (qualified)    * BNB - Bed and Breakfast    * PKG - Package    * TVL - Travel Industry    * SPC - Special Promo Rate    * WKD - Weekend    * CON - Convention    * SNR - Senior (Europe) (qualified)    * ARP - AARP - American Association of Retired People (50+) (qualified)    * SRS - Senior (qualified)    * ROR - Room Only Rate (no breakfast)    * FAM - Family    * DAY - Day rate

        :param rate_code: The rate_code of this HotelOffer.
        :type rate_code: str
        """
        if rate_code is None:
            raise ValueError("Invalid value for `rate_code`, must not be `None`")
        if rate_code is not None and len(rate_code) > 3:
            raise ValueError("Invalid value for `rate_code`, length must be less than or equal to `3`")
        if rate_code is not None and len(rate_code) < 3:
            raise ValueError("Invalid value for `rate_code`, length must be greater than or equal to `3`")
        if rate_code is not None and not re.search(r'^[A-Z0-9*]{3}$', rate_code):
            raise ValueError("Invalid value for `rate_code`, must be a follow pattern or equal to `/^[A-Z0-9*]{3}$/`")

        self._rate_code = rate_code

    @property
    def rate_family_estimated(self):
        """Gets the rate_family_estimated of this HotelOffer.


        :return: The rate_family_estimated of this HotelOffer.
        :rtype: HotelProductRateFamily
        """
        return self._rate_family_estimated

    @rate_family_estimated.setter
    def rate_family_estimated(self, rate_family_estimated):
        """Sets the rate_family_estimated of this HotelOffer.


        :param rate_family_estimated: The rate_family_estimated of this HotelOffer.
        :type rate_family_estimated: HotelProductRateFamily
        """

        self._rate_family_estimated = rate_family_estimated

    @property
    def room(self):
        """Gets the room of this HotelOffer.


        :return: The room of this HotelOffer.
        :rtype: HotelProductRoomDetails
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this HotelOffer.


        :param room: The room of this HotelOffer.
        :type room: HotelProductRoomDetails
        """
        if room is None:
            raise ValueError("Invalid value for `room`, must not be `None`")

        self._room = room

    @property
    def room_quantity(self):
        """Gets the room_quantity of this HotelOffer.

        number of rooms (1-9)

        :return: The room_quantity of this HotelOffer.
        :rtype: str
        """
        return self._room_quantity

    @room_quantity.setter
    def room_quantity(self, room_quantity):
        """Sets the room_quantity of this HotelOffer.

        number of rooms (1-9)

        :param room_quantity: The room_quantity of this HotelOffer.
        :type room_quantity: str
        """

        self._room_quantity = room_quantity

    @property
    def _self(self):
        """Gets the _self of this HotelOffer.

        A self link to the object. Use this to refresh the Offer price

        :return: The _self of this HotelOffer.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this HotelOffer.

        A self link to the object. Use this to refresh the Offer price

        :param _self: The _self of this HotelOffer.
        :type _self: str
        """

        self.__self = _self

    @property
    def type(self):
        """Gets the type of this HotelOffer.


        :return: The type of this HotelOffer.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HotelOffer.


        :param type: The type of this HotelOffer.
        :type type: Type
        """

        self._type = type
