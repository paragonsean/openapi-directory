# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Hotel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_code: str=None, chain_code: str=None, city_code: str=None, dupe_id: str=None, hotel_id: str=None, name: str=None):
        """Hotel - a model defined in OpenAPI

        :param brand_code: The brand_code of this Hotel.
        :param chain_code: The chain_code of this Hotel.
        :param city_code: The city_code of this Hotel.
        :param dupe_id: The dupe_id of this Hotel.
        :param hotel_id: The hotel_id of this Hotel.
        :param name: The name of this Hotel.
        """
        self.openapi_types = {
            'brand_code': str,
            'chain_code': str,
            'city_code': str,
            'dupe_id': str,
            'hotel_id': str,
            'name': str
        }

        self.attribute_map = {
            'brand_code': 'brandCode',
            'chain_code': 'chainCode',
            'city_code': 'cityCode',
            'dupe_id': 'dupeId',
            'hotel_id': 'hotelId',
            'name': 'name'
        }

        self._brand_code = brand_code
        self._chain_code = chain_code
        self._city_code = city_code
        self._dupe_id = dupe_id
        self._hotel_id = hotel_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hotel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hotel of this Hotel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_code(self):
        """Gets the brand_code of this Hotel.

        Brand (RT...) (Amadeus 2 chars Code). Small Properties distributed by Merchants may not have a Brand. Example - AD (Value Hotels) is the Provider/Merchant, and RT (Accor) is the Brand of the Property

        :return: The brand_code of this Hotel.
        :rtype: str
        """
        return self._brand_code

    @brand_code.setter
    def brand_code(self, brand_code):
        """Sets the brand_code of this Hotel.

        Brand (RT...) (Amadeus 2 chars Code). Small Properties distributed by Merchants may not have a Brand. Example - AD (Value Hotels) is the Provider/Merchant, and RT (Accor) is the Brand of the Property

        :param brand_code: The brand_code of this Hotel.
        :type brand_code: str
        """
        if brand_code is not None and not re.search(r'^[A-Z]{2}$', brand_code):
            raise ValueError("Invalid value for `brand_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._brand_code = brand_code

    @property
    def chain_code(self):
        """Gets the chain_code of this Hotel.

        Brand (RT...) or Merchant (AD...) (Amadeus 2 chars Code)

        :return: The chain_code of this Hotel.
        :rtype: str
        """
        return self._chain_code

    @chain_code.setter
    def chain_code(self, chain_code):
        """Sets the chain_code of this Hotel.

        Brand (RT...) or Merchant (AD...) (Amadeus 2 chars Code)

        :param chain_code: The chain_code of this Hotel.
        :type chain_code: str
        """
        if chain_code is not None and not re.search(r'^[A-Z]{2}$', chain_code):
            raise ValueError("Invalid value for `chain_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._chain_code = chain_code

    @property
    def city_code(self):
        """Gets the city_code of this Hotel.

        Warning: The IATA city code associated to the hotel (not necessary the real Hotel City)

        :return: The city_code of this Hotel.
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this Hotel.

        Warning: The IATA city code associated to the hotel (not necessary the real Hotel City)

        :param city_code: The city_code of this Hotel.
        :type city_code: str
        """
        if city_code is not None and not re.search(r'^[A-Z]{3}$', city_code):
            raise ValueError("Invalid value for `city_code`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._city_code = city_code

    @property
    def dupe_id(self):
        """Gets the dupe_id of this Hotel.

        Unique Property identifier of the physical hotel. One physical hotel can be represented by different Providers, each one having its own `hotelID`. This attribute allows a client application to group together hotels that are actually the same.

        :return: The dupe_id of this Hotel.
        :rtype: str
        """
        return self._dupe_id

    @dupe_id.setter
    def dupe_id(self, dupe_id):
        """Sets the dupe_id of this Hotel.

        Unique Property identifier of the physical hotel. One physical hotel can be represented by different Providers, each one having its own `hotelID`. This attribute allows a client application to group together hotels that are actually the same.

        :param dupe_id: The dupe_id of this Hotel.
        :type dupe_id: str
        """

        self._dupe_id = dupe_id

    @property
    def hotel_id(self):
        """Gets the hotel_id of this Hotel.

        Amadeus Property Code (8 chars)

        :return: The hotel_id of this Hotel.
        :rtype: str
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this Hotel.

        Amadeus Property Code (8 chars)

        :param hotel_id: The hotel_id of this Hotel.
        :type hotel_id: str
        """
        if hotel_id is not None and not re.search(r'^[A-Z0-9]{8}$', hotel_id):
            raise ValueError("Invalid value for `hotel_id`, must be a follow pattern or equal to `/^[A-Z0-9]{8}$/`")

        self._hotel_id = hotel_id

    @property
    def name(self):
        """Gets the name of this Hotel.

        Hotel Name

        :return: The name of this Hotel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hotel.

        Hotel Name

        :param name: The name of this Hotel.
        :type name: str
        """

        self._name = name
