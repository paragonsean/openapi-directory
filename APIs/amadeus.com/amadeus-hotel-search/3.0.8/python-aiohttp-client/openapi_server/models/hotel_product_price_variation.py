# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.markup import Markup
from openapi_server import util


class HotelProductPriceVariation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, currency: str=None, end_date: date=None, markups: List[Markup]=None, selling_total: str=None, start_date: date=None, total: str=None):
        """HotelProductPriceVariation - a model defined in OpenAPI

        :param base: The base of this HotelProductPriceVariation.
        :param currency: The currency of this HotelProductPriceVariation.
        :param end_date: The end_date of this HotelProductPriceVariation.
        :param markups: The markups of this HotelProductPriceVariation.
        :param selling_total: The selling_total of this HotelProductPriceVariation.
        :param start_date: The start_date of this HotelProductPriceVariation.
        :param total: The total of this HotelProductPriceVariation.
        """
        self.openapi_types = {
            'base': str,
            'currency': str,
            'end_date': date,
            'markups': List[Markup],
            'selling_total': str,
            'start_date': date,
            'total': str
        }

        self.attribute_map = {
            'base': 'base',
            'currency': 'currency',
            'end_date': 'endDate',
            'markups': 'markups',
            'selling_total': 'sellingTotal',
            'start_date': 'startDate',
            'total': 'total'
        }

        self._base = base
        self._currency = currency
        self._end_date = end_date
        self._markups = markups
        self._selling_total = selling_total
        self._start_date = start_date
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelProductPriceVariation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelProduct_PriceVariation of this HotelProductPriceVariation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this HotelProductPriceVariation.


        :return: The base of this HotelProductPriceVariation.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this HotelProductPriceVariation.


        :param base: The base of this HotelProductPriceVariation.
        :type base: str
        """

        self._base = base

    @property
    def currency(self):
        """Gets the currency of this HotelProductPriceVariation.

        currency Code apply to all elements of the price

        :return: The currency of this HotelProductPriceVariation.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this HotelProductPriceVariation.

        currency Code apply to all elements of the price

        :param currency: The currency of this HotelProductPriceVariation.
        :type currency: str
        """

        self._currency = currency

    @property
    def end_date(self):
        """Gets the end_date of this HotelProductPriceVariation.

        End date of the period Format: YYYY-MM-DD

        :return: The end_date of this HotelProductPriceVariation.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this HotelProductPriceVariation.

        End date of the period Format: YYYY-MM-DD

        :param end_date: The end_date of this HotelProductPriceVariation.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def markups(self):
        """Gets the markups of this HotelProductPriceVariation.


        :return: The markups of this HotelProductPriceVariation.
        :rtype: List[Markup]
        """
        return self._markups

    @markups.setter
    def markups(self, markups):
        """Sets the markups of this HotelProductPriceVariation.


        :param markups: The markups of this HotelProductPriceVariation.
        :type markups: List[Markup]
        """

        self._markups = markups

    @property
    def selling_total(self):
        """Gets the selling_total of this HotelProductPriceVariation.

        sellingTotal = Total + margins + markup + totalFees - discounts

        :return: The selling_total of this HotelProductPriceVariation.
        :rtype: str
        """
        return self._selling_total

    @selling_total.setter
    def selling_total(self, selling_total):
        """Sets the selling_total of this HotelProductPriceVariation.

        sellingTotal = Total + margins + markup + totalFees - discounts

        :param selling_total: The selling_total of this HotelProductPriceVariation.
        :type selling_total: str
        """

        self._selling_total = selling_total

    @property
    def start_date(self):
        """Gets the start_date of this HotelProductPriceVariation.

        Begin date of the period Format: YYYY-MM-DD

        :return: The start_date of this HotelProductPriceVariation.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this HotelProductPriceVariation.

        Begin date of the period Format: YYYY-MM-DD

        :param start_date: The start_date of this HotelProductPriceVariation.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def total(self):
        """Gets the total of this HotelProductPriceVariation.

        total = base + totalTaxes

        :return: The total of this HotelProductPriceVariation.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this HotelProductPriceVariation.

        total = base + totalTaxes

        :param total: The total of this HotelProductPriceVariation.
        :type total: str
        """

        self._total = total
