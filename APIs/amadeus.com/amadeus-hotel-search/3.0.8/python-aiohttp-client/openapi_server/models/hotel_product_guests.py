# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HotelProductGuests(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: int=None, child_ages: List[int]=None):
        """HotelProductGuests - a model defined in OpenAPI

        :param adults: The adults of this HotelProductGuests.
        :param child_ages: The child_ages of this HotelProductGuests.
        """
        self.openapi_types = {
            'adults': int,
            'child_ages': List[int]
        }

        self.attribute_map = {
            'adults': 'adults',
            'child_ages': 'childAges'
        }

        self._adults = adults
        self._child_ages = child_ages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelProductGuests':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelProduct_Guests of this HotelProductGuests.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this HotelProductGuests.

        number of adult guests (1-9) per room

        :return: The adults of this HotelProductGuests.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this HotelProductGuests.

        number of adult guests (1-9) per room

        :param adults: The adults of this HotelProductGuests.
        :type adults: int
        """
        if adults is not None and adults > 9:
            raise ValueError("Invalid value for `adults`, must be a value less than or equal to `9`")
        if adults is not None and adults < 1:
            raise ValueError("Invalid value for `adults`, must be a value greater than or equal to `1`")

        self._adults = adults

    @property
    def child_ages(self):
        """Gets the child_ages of this HotelProductGuests.

        Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.

        :return: The child_ages of this HotelProductGuests.
        :rtype: List[int]
        """
        return self._child_ages

    @child_ages.setter
    def child_ages(self, child_ages):
        """Sets the child_ages of this HotelProductGuests.

        Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.

        :param child_ages: The child_ages of this HotelProductGuests.
        :type child_ages: List[int]
        """

        self._child_ages = child_ages
