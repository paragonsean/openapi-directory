# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, code: str=None, currency: str=None, description: str=None, included: bool=None, percentage: str=None, pricing_frequency: str=None, pricing_mode: str=None):
        """Tax - a model defined in OpenAPI

        :param amount: The amount of this Tax.
        :param code: The code of this Tax.
        :param currency: The currency of this Tax.
        :param description: The description of this Tax.
        :param included: The included of this Tax.
        :param percentage: The percentage of this Tax.
        :param pricing_frequency: The pricing_frequency of this Tax.
        :param pricing_mode: The pricing_mode of this Tax.
        """
        self.openapi_types = {
            'amount': str,
            'code': str,
            'currency': str,
            'description': str,
            'included': bool,
            'percentage': str,
            'pricing_frequency': str,
            'pricing_mode': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'code': 'code',
            'currency': 'currency',
            'description': 'description',
            'included': 'included',
            'percentage': 'percentage',
            'pricing_frequency': 'pricingFrequency',
            'pricing_mode': 'pricingMode'
        }

        self._amount = amount
        self._code = code
        self._currency = currency
        self._description = description
        self._included = included
        self._percentage = percentage
        self._pricing_frequency = pricing_frequency
        self._pricing_mode = pricing_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tax of this Tax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Tax.

        Defines amount with decimal separator.

        :return: The amount of this Tax.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Tax.

        Defines amount with decimal separator.

        :param amount: The amount of this Tax.
        :type amount: str
        """

        self._amount = amount

    @property
    def code(self):
        """Gets the code of this Tax.

        International Standards Organization (ISO) Tax code.It is a two-letter country code.

        :return: The code of this Tax.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Tax.

        International Standards Organization (ISO) Tax code.It is a two-letter country code.

        :param code: The code of this Tax.
        :type code: str
        """

        self._code = code

    @property
    def currency(self):
        """Gets the currency of this Tax.

        Defines a monetary unit. It is a three alpha code (iata code). Example: EUR for Euros, USD for US dollar, etc.

        :return: The currency of this Tax.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Tax.

        Defines a monetary unit. It is a three alpha code (iata code). Example: EUR for Euros, USD for US dollar, etc.

        :param currency: The currency of this Tax.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Tax.

        Example - \"Governement tax\"

        :return: The description of this Tax.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tax.

        Example - \"Governement tax\"

        :param description: The description of this Tax.
        :type description: str
        """

        self._description = description

    @property
    def included(self):
        """Gets the included of this Tax.

        Indicates if tax is included or not

        :return: The included of this Tax.
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this Tax.

        Indicates if tax is included or not

        :param included: The included of this Tax.
        :type included: bool
        """

        self._included = included

    @property
    def percentage(self):
        """Gets the percentage of this Tax.

        In the case of a tax on TST value, the percentage of the tax will be indicated in this field.

        :return: The percentage of this Tax.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Tax.

        In the case of a tax on TST value, the percentage of the tax will be indicated in this field.

        :param percentage: The percentage of this Tax.
        :type percentage: str
        """

        self._percentage = percentage

    @property
    def pricing_frequency(self):
        """Gets the pricing_frequency of this Tax.

        Specifies if the tax applies per stay or per night   - PER_STAY   - PER_NIGHT

        :return: The pricing_frequency of this Tax.
        :rtype: str
        """
        return self._pricing_frequency

    @pricing_frequency.setter
    def pricing_frequency(self, pricing_frequency):
        """Sets the pricing_frequency of this Tax.

        Specifies if the tax applies per stay or per night   - PER_STAY   - PER_NIGHT

        :param pricing_frequency: The pricing_frequency of this Tax.
        :type pricing_frequency: str
        """

        self._pricing_frequency = pricing_frequency

    @property
    def pricing_mode(self):
        """Gets the pricing_mode of this Tax.

        Specifies if the tax applies per occupant or per room   - PER_OCCUPANT   - PER_PRODUCT

        :return: The pricing_mode of this Tax.
        :rtype: str
        """
        return self._pricing_mode

    @pricing_mode.setter
    def pricing_mode(self, pricing_mode):
        """Sets the pricing_mode of this Tax.

        Specifies if the tax applies per occupant or per room   - PER_OCCUPANT   - PER_PRODUCT

        :param pricing_mode: The pricing_mode of this Tax.
        :type pricing_mode: str
        """

        self._pricing_mode = pricing_mode
