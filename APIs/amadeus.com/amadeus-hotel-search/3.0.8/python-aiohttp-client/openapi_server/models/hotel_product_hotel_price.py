# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hotel_product_price_variations import HotelProductPriceVariations
from openapi_server.models.markup import Markup
from openapi_server.models.tax import Tax
from openapi_server import util


class HotelProductHotelPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, currency: str=None, markups: List[Markup]=None, selling_total: str=None, taxes: List[Tax]=None, total: str=None, variations: HotelProductPriceVariations=None):
        """HotelProductHotelPrice - a model defined in OpenAPI

        :param base: The base of this HotelProductHotelPrice.
        :param currency: The currency of this HotelProductHotelPrice.
        :param markups: The markups of this HotelProductHotelPrice.
        :param selling_total: The selling_total of this HotelProductHotelPrice.
        :param taxes: The taxes of this HotelProductHotelPrice.
        :param total: The total of this HotelProductHotelPrice.
        :param variations: The variations of this HotelProductHotelPrice.
        """
        self.openapi_types = {
            'base': str,
            'currency': str,
            'markups': List[Markup],
            'selling_total': str,
            'taxes': List[Tax],
            'total': str,
            'variations': HotelProductPriceVariations
        }

        self.attribute_map = {
            'base': 'base',
            'currency': 'currency',
            'markups': 'markups',
            'selling_total': 'sellingTotal',
            'taxes': 'taxes',
            'total': 'total',
            'variations': 'variations'
        }

        self._base = base
        self._currency = currency
        self._markups = markups
        self._selling_total = selling_total
        self._taxes = taxes
        self._total = total
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelProductHotelPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelProduct_HotelPrice of this HotelProductHotelPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this HotelProductHotelPrice.


        :return: The base of this HotelProductHotelPrice.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this HotelProductHotelPrice.


        :param base: The base of this HotelProductHotelPrice.
        :type base: str
        """

        self._base = base

    @property
    def currency(self):
        """Gets the currency of this HotelProductHotelPrice.

        currency Code apply to all elements of the price

        :return: The currency of this HotelProductHotelPrice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this HotelProductHotelPrice.

        currency Code apply to all elements of the price

        :param currency: The currency of this HotelProductHotelPrice.
        :type currency: str
        """

        self._currency = currency

    @property
    def markups(self):
        """Gets the markups of this HotelProductHotelPrice.


        :return: The markups of this HotelProductHotelPrice.
        :rtype: List[Markup]
        """
        return self._markups

    @markups.setter
    def markups(self, markups):
        """Sets the markups of this HotelProductHotelPrice.


        :param markups: The markups of this HotelProductHotelPrice.
        :type markups: List[Markup]
        """

        self._markups = markups

    @property
    def selling_total(self):
        """Gets the selling_total of this HotelProductHotelPrice.

        sellingTotal = Total + margins + markup + totalFees - discounts

        :return: The selling_total of this HotelProductHotelPrice.
        :rtype: str
        """
        return self._selling_total

    @selling_total.setter
    def selling_total(self, selling_total):
        """Sets the selling_total of this HotelProductHotelPrice.

        sellingTotal = Total + margins + markup + totalFees - discounts

        :param selling_total: The selling_total of this HotelProductHotelPrice.
        :type selling_total: str
        """

        self._selling_total = selling_total

    @property
    def taxes(self):
        """Gets the taxes of this HotelProductHotelPrice.


        :return: The taxes of this HotelProductHotelPrice.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this HotelProductHotelPrice.


        :param taxes: The taxes of this HotelProductHotelPrice.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this HotelProductHotelPrice.

        total = base + totalTaxes

        :return: The total of this HotelProductHotelPrice.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this HotelProductHotelPrice.

        total = base + totalTaxes

        :param total: The total of this HotelProductHotelPrice.
        :type total: str
        """

        self._total = total

    @property
    def variations(self):
        """Gets the variations of this HotelProductHotelPrice.


        :return: The variations of this HotelProductHotelPrice.
        :rtype: HotelProductPriceVariations
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this HotelProductHotelPrice.


        :param variations: The variations of this HotelProductHotelPrice.
        :type variations: HotelProductPriceVariations
        """

        self._variations = variations
