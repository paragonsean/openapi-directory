# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hotel_product_price_variation import HotelProductPriceVariation
from openapi_server.models.price import Price
from openapi_server import util


class HotelProductPriceVariations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: Price=None, changes: List[HotelProductPriceVariation]=None):
        """HotelProductPriceVariations - a model defined in OpenAPI

        :param average: The average of this HotelProductPriceVariations.
        :param changes: The changes of this HotelProductPriceVariations.
        """
        self.openapi_types = {
            'average': Price,
            'changes': List[HotelProductPriceVariation]
        }

        self.attribute_map = {
            'average': 'average',
            'changes': 'changes'
        }

        self._average = average
        self._changes = changes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelProductPriceVariations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelProduct_PriceVariations of this HotelProductPriceVariations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this HotelProductPriceVariations.


        :return: The average of this HotelProductPriceVariations.
        :rtype: Price
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this HotelProductPriceVariations.


        :param average: The average of this HotelProductPriceVariations.
        :type average: Price
        """

        self._average = average

    @property
    def changes(self):
        """Gets the changes of this HotelProductPriceVariations.

        A collection of price periods if the daily price changes during the stay

        :return: The changes of this HotelProductPriceVariations.
        :rtype: List[HotelProductPriceVariation]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this HotelProductPriceVariations.

        A collection of price periods if the daily price changes during the stay

        :param changes: The changes of this HotelProductPriceVariations.
        :type changes: List[HotelProductPriceVariation]
        """

        self._changes = changes
