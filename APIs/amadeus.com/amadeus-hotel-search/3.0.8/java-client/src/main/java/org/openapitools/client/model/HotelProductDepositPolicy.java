/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.HotelProductPaymentPolicy;
import org.openapitools.client.model.QualifiedFreeText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the deposit/prepay policy information applicable to the offer. It includes accepted payments, deadline and the amount due
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:09.974193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelProductDepositPolicy {
  public static final String SERIALIZED_NAME_ACCEPTED_PAYMENTS = "acceptedPayments";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PAYMENTS)
  private HotelProductPaymentPolicy acceptedPayments;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private OffsetDateTime deadline;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private QualifiedFreeText description;

  public HotelProductDepositPolicy() {
  }

  public HotelProductDepositPolicy acceptedPayments(HotelProductPaymentPolicy acceptedPayments) {
    this.acceptedPayments = acceptedPayments;
    return this;
  }

  /**
   * Get acceptedPayments
   * @return acceptedPayments
   */
  @javax.annotation.Nullable
  public HotelProductPaymentPolicy getAcceptedPayments() {
    return acceptedPayments;
  }

  public void setAcceptedPayments(HotelProductPaymentPolicy acceptedPayments) {
    this.acceptedPayments = acceptedPayments;
  }


  public HotelProductDepositPolicy amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Deposit-Prepay amount
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public HotelProductDepositPolicy deadline(OffsetDateTime deadline) {
    this.deadline = deadline;
    return this;
  }

  /**
   * The date and time of the deadline in ISO 8601[https://www.w3.org/TR/NOTE-datetime].   Example: 2010-08-14T13:00:00  Please note that this value is expressed in the hotels local time zone
   * @return deadline
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeadline() {
    return deadline;
  }

  public void setDeadline(OffsetDateTime deadline) {
    this.deadline = deadline;
  }


  public HotelProductDepositPolicy description(QualifiedFreeText description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public QualifiedFreeText getDescription() {
    return description;
  }

  public void setDescription(QualifiedFreeText description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelProductDepositPolicy hotelProductDepositPolicy = (HotelProductDepositPolicy) o;
    return Objects.equals(this.acceptedPayments, hotelProductDepositPolicy.acceptedPayments) &&
        Objects.equals(this.amount, hotelProductDepositPolicy.amount) &&
        Objects.equals(this.deadline, hotelProductDepositPolicy.deadline) &&
        Objects.equals(this.description, hotelProductDepositPolicy.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedPayments, amount, deadline, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelProductDepositPolicy {\n");
    sb.append("    acceptedPayments: ").append(toIndentedString(acceptedPayments)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedPayments");
    openapiFields.add("amount");
    openapiFields.add("deadline");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelProductDepositPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelProductDepositPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelProductDepositPolicy is not found in the empty JSON string", HotelProductDepositPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelProductDepositPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelProductDepositPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceptedPayments`
      if (jsonObj.get("acceptedPayments") != null && !jsonObj.get("acceptedPayments").isJsonNull()) {
        HotelProductPaymentPolicy.validateJsonElement(jsonObj.get("acceptedPayments"));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        QualifiedFreeText.validateJsonElement(jsonObj.get("description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelProductDepositPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelProductDepositPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelProductDepositPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelProductDepositPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelProductDepositPolicy>() {
           @Override
           public void write(JsonWriter out, HotelProductDepositPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelProductDepositPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelProductDepositPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelProductDepositPolicy
   * @throws IOException if the JSON string is invalid with respect to HotelProductDepositPolicy
   */
  public static HotelProductDepositPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelProductDepositPolicy.class);
  }

  /**
   * Convert an instance of HotelProductDepositPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

