/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hotel Content
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:09.974193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hotel {
  public static final String SERIALIZED_NAME_BRAND_CODE = "brandCode";
  @SerializedName(SERIALIZED_NAME_BRAND_CODE)
  private String brandCode;

  public static final String SERIALIZED_NAME_CHAIN_CODE = "chainCode";
  @SerializedName(SERIALIZED_NAME_CHAIN_CODE)
  private String chainCode;

  public static final String SERIALIZED_NAME_CITY_CODE = "cityCode";
  @SerializedName(SERIALIZED_NAME_CITY_CODE)
  private String cityCode;

  public static final String SERIALIZED_NAME_DUPE_ID = "dupeId";
  @SerializedName(SERIALIZED_NAME_DUPE_ID)
  private String dupeId;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private String hotelId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Hotel() {
  }

  public Hotel brandCode(String brandCode) {
    this.brandCode = brandCode;
    return this;
  }

  /**
   * Brand (RT...) (Amadeus 2 chars Code). Small Properties distributed by Merchants may not have a Brand. Example - AD (Value Hotels) is the Provider/Merchant, and RT (Accor) is the Brand of the Property
   * @return brandCode
   */
  @javax.annotation.Nullable
  public String getBrandCode() {
    return brandCode;
  }

  public void setBrandCode(String brandCode) {
    this.brandCode = brandCode;
  }


  public Hotel chainCode(String chainCode) {
    this.chainCode = chainCode;
    return this;
  }

  /**
   * Brand (RT...) or Merchant (AD...) (Amadeus 2 chars Code)
   * @return chainCode
   */
  @javax.annotation.Nullable
  public String getChainCode() {
    return chainCode;
  }

  public void setChainCode(String chainCode) {
    this.chainCode = chainCode;
  }


  public Hotel cityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  /**
   * Warning: The IATA city code associated to the hotel (not necessary the real Hotel City)
   * @return cityCode
   */
  @javax.annotation.Nullable
  public String getCityCode() {
    return cityCode;
  }

  public void setCityCode(String cityCode) {
    this.cityCode = cityCode;
  }


  public Hotel dupeId(String dupeId) {
    this.dupeId = dupeId;
    return this;
  }

  /**
   * Unique Property identifier of the physical hotel. One physical hotel can be represented by different Providers, each one having its own &#x60;hotelID&#x60;. This attribute allows a client application to group together hotels that are actually the same.
   * @return dupeId
   */
  @javax.annotation.Nullable
  public String getDupeId() {
    return dupeId;
  }

  public void setDupeId(String dupeId) {
    this.dupeId = dupeId;
  }


  public Hotel hotelId(String hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * Amadeus Property Code (8 chars)
   * @return hotelId
   */
  @javax.annotation.Nullable
  public String getHotelId() {
    return hotelId;
  }

  public void setHotelId(String hotelId) {
    this.hotelId = hotelId;
  }


  public Hotel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Hotel Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hotel hotel = (Hotel) o;
    return Objects.equals(this.brandCode, hotel.brandCode) &&
        Objects.equals(this.chainCode, hotel.chainCode) &&
        Objects.equals(this.cityCode, hotel.cityCode) &&
        Objects.equals(this.dupeId, hotel.dupeId) &&
        Objects.equals(this.hotelId, hotel.hotelId) &&
        Objects.equals(this.name, hotel.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandCode, chainCode, cityCode, dupeId, hotelId, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hotel {\n");
    sb.append("    brandCode: ").append(toIndentedString(brandCode)).append("\n");
    sb.append("    chainCode: ").append(toIndentedString(chainCode)).append("\n");
    sb.append("    cityCode: ").append(toIndentedString(cityCode)).append("\n");
    sb.append("    dupeId: ").append(toIndentedString(dupeId)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandCode");
    openapiFields.add("chainCode");
    openapiFields.add("cityCode");
    openapiFields.add("dupeId");
    openapiFields.add("hotelId");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hotel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hotel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hotel is not found in the empty JSON string", Hotel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hotel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hotel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brandCode") != null && !jsonObj.get("brandCode").isJsonNull()) && !jsonObj.get("brandCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandCode").toString()));
      }
      if ((jsonObj.get("chainCode") != null && !jsonObj.get("chainCode").isJsonNull()) && !jsonObj.get("chainCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainCode").toString()));
      }
      if ((jsonObj.get("cityCode") != null && !jsonObj.get("cityCode").isJsonNull()) && !jsonObj.get("cityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityCode").toString()));
      }
      if ((jsonObj.get("dupeId") != null && !jsonObj.get("dupeId").isJsonNull()) && !jsonObj.get("dupeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dupeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dupeId").toString()));
      }
      if ((jsonObj.get("hotelId") != null && !jsonObj.get("hotelId").isJsonNull()) && !jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hotel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hotel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hotel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hotel.class));

       return (TypeAdapter<T>) new TypeAdapter<Hotel>() {
           @Override
           public void write(JsonWriter out, Hotel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hotel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hotel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hotel
   * @throws IOException if the JSON string is invalid with respect to Hotel
   */
  public static Hotel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hotel.class);
  }

  /**
   * Convert an instance of Hotel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

