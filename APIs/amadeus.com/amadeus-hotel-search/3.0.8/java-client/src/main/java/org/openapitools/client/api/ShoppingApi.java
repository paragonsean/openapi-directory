/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Errors;
import java.time.LocalDate;
import org.openapitools.client.model.MultiResponse;
import org.openapitools.client.model.PricingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShoppingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShoppingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShoppingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMultiHotelOffers
     * @param hotelIds Amadeus property codes on 8 chars. Mandatory parameter for a search by predefined list of hotels. (required)
     * @param adults Number of adult guests (1-9) per room. (optional, default to 1)
     * @param checkInDate Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today&#39;s date in the GMT time zone. (optional)
     * @param checkOutDate Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1. (optional)
     * @param countryOfResidence Code of the country of residence of the traveler expressed using ISO 3166-1 format. (optional)
     * @param roomQuantity Number of rooms requested (1-9). (optional, default to 1)
     * @param priceRange Filter hotel offers by price per night interval (ex: 200-300 or -300 or 100). It is mandatory to include a currency when this field is set. (optional)
     * @param currency Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel. (optional)
     * @param paymentPolicy Filter the response based on a specific payment type. NONE means all types (default). (optional, default to NONE)
     * @param boardType Filter response based on available meals:         * ROOM_ONLY &#x3D; Room Only         * BREAKFAST &#x3D; Breakfast         * HALF_BOARD &#x3D; Diner &amp; Breakfast (only for Aggregators)         * FULL_BOARD &#x3D; Full Board (only for Aggregators)         * ALL_INCLUSIVE &#x3D; All Inclusive (only for Aggregators) (optional)
     * @param includeClosed Show all properties (include sold out) or available only. For sold out properties, please check availability on other dates. (optional)
     * @param bestRateOnly Used to return only the cheapest offer per hotel or all available offers. (optional, default to true)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request:  | Code | Title  | |-----|-----| | 23   | PASSENGER TYPE NOT SUPPORTED   | | 61 | INVALID CURRENCY CODE| | 137 | INVALID ADULTS OCCUPANCY REQUESTED| | 145 | DURATION PERIOD OR DATES INCORRECT| | 195 | SERVICE RESTRICTION| | 249 | INVALID RATE CODE| | 377 | MAX STAY DURATION IS EXCEEDED| | 381 | INVALID CHECK-IN DATE| | 382 | INVALID CHECK-OUT DATE| | 383 | INVALID CITY CODE| | 392 | INVALID HOTEL CODE| | 397 | INVALID NUMBER OF ADULTS| | 400 | INVALID PROPERTY CODE| | 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE| | 450 | INVALID PROVIDER RESPONSE| | 451 | INVALID CREDENTIALS| | 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS| | 784 | PROVIDER TIME OUT| | 790 | RATE SECURITY NOT LOADED|  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiHotelOffersCall(List<String> hotelIds, Integer adults, LocalDate checkInDate, LocalDate checkOutDate, String countryOfResidence, Integer roomQuantity, String priceRange, String currency, String paymentPolicy, String boardType, Boolean includeClosed, Boolean bestRateOnly, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shopping/hotel-offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hotelIds", hotelIds));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (checkInDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkInDate", checkInDate));
        }

        if (checkOutDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkOutDate", checkOutDate));
        }

        if (countryOfResidence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryOfResidence", countryOfResidence));
        }

        if (roomQuantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomQuantity", roomQuantity));
        }

        if (priceRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priceRange", priceRange));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (paymentPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentPolicy", paymentPolicy));
        }

        if (boardType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardType", boardType));
        }

        if (includeClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeClosed", includeClosed));
        }

        if (bestRateOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bestRateOnly", bestRateOnly));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiHotelOffersValidateBeforeCall(List<String> hotelIds, Integer adults, LocalDate checkInDate, LocalDate checkOutDate, String countryOfResidence, Integer roomQuantity, String priceRange, String currency, String paymentPolicy, String boardType, Boolean includeClosed, Boolean bestRateOnly, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelIds' is set
        if (hotelIds == null) {
            throw new ApiException("Missing the required parameter 'hotelIds' when calling getMultiHotelOffers(Async)");
        }

        return getMultiHotelOffersCall(hotelIds, adults, checkInDate, checkOutDate, countryOfResidence, roomQuantity, priceRange, currency, paymentPolicy, boardType, includeClosed, bestRateOnly, lang, _callback);

    }

    /**
     * getMultiHotelOffers
     * 
     * @param hotelIds Amadeus property codes on 8 chars. Mandatory parameter for a search by predefined list of hotels. (required)
     * @param adults Number of adult guests (1-9) per room. (optional, default to 1)
     * @param checkInDate Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today&#39;s date in the GMT time zone. (optional)
     * @param checkOutDate Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1. (optional)
     * @param countryOfResidence Code of the country of residence of the traveler expressed using ISO 3166-1 format. (optional)
     * @param roomQuantity Number of rooms requested (1-9). (optional, default to 1)
     * @param priceRange Filter hotel offers by price per night interval (ex: 200-300 or -300 or 100). It is mandatory to include a currency when this field is set. (optional)
     * @param currency Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel. (optional)
     * @param paymentPolicy Filter the response based on a specific payment type. NONE means all types (default). (optional, default to NONE)
     * @param boardType Filter response based on available meals:         * ROOM_ONLY &#x3D; Room Only         * BREAKFAST &#x3D; Breakfast         * HALF_BOARD &#x3D; Diner &amp; Breakfast (only for Aggregators)         * FULL_BOARD &#x3D; Full Board (only for Aggregators)         * ALL_INCLUSIVE &#x3D; All Inclusive (only for Aggregators) (optional)
     * @param includeClosed Show all properties (include sold out) or available only. For sold out properties, please check availability on other dates. (optional)
     * @param bestRateOnly Used to return only the cheapest offer per hotel or all available offers. (optional, default to true)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @return MultiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request:  | Code | Title  | |-----|-----| | 23   | PASSENGER TYPE NOT SUPPORTED   | | 61 | INVALID CURRENCY CODE| | 137 | INVALID ADULTS OCCUPANCY REQUESTED| | 145 | DURATION PERIOD OR DATES INCORRECT| | 195 | SERVICE RESTRICTION| | 249 | INVALID RATE CODE| | 377 | MAX STAY DURATION IS EXCEEDED| | 381 | INVALID CHECK-IN DATE| | 382 | INVALID CHECK-OUT DATE| | 383 | INVALID CITY CODE| | 392 | INVALID HOTEL CODE| | 397 | INVALID NUMBER OF ADULTS| | 400 | INVALID PROPERTY CODE| | 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE| | 450 | INVALID PROVIDER RESPONSE| | 451 | INVALID CREDENTIALS| | 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS| | 784 | PROVIDER TIME OUT| | 790 | RATE SECURITY NOT LOADED|  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public MultiResponse getMultiHotelOffers(List<String> hotelIds, Integer adults, LocalDate checkInDate, LocalDate checkOutDate, String countryOfResidence, Integer roomQuantity, String priceRange, String currency, String paymentPolicy, String boardType, Boolean includeClosed, Boolean bestRateOnly, String lang) throws ApiException {
        ApiResponse<MultiResponse> localVarResp = getMultiHotelOffersWithHttpInfo(hotelIds, adults, checkInDate, checkOutDate, countryOfResidence, roomQuantity, priceRange, currency, paymentPolicy, boardType, includeClosed, bestRateOnly, lang);
        return localVarResp.getData();
    }

    /**
     * getMultiHotelOffers
     * 
     * @param hotelIds Amadeus property codes on 8 chars. Mandatory parameter for a search by predefined list of hotels. (required)
     * @param adults Number of adult guests (1-9) per room. (optional, default to 1)
     * @param checkInDate Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today&#39;s date in the GMT time zone. (optional)
     * @param checkOutDate Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1. (optional)
     * @param countryOfResidence Code of the country of residence of the traveler expressed using ISO 3166-1 format. (optional)
     * @param roomQuantity Number of rooms requested (1-9). (optional, default to 1)
     * @param priceRange Filter hotel offers by price per night interval (ex: 200-300 or -300 or 100). It is mandatory to include a currency when this field is set. (optional)
     * @param currency Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel. (optional)
     * @param paymentPolicy Filter the response based on a specific payment type. NONE means all types (default). (optional, default to NONE)
     * @param boardType Filter response based on available meals:         * ROOM_ONLY &#x3D; Room Only         * BREAKFAST &#x3D; Breakfast         * HALF_BOARD &#x3D; Diner &amp; Breakfast (only for Aggregators)         * FULL_BOARD &#x3D; Full Board (only for Aggregators)         * ALL_INCLUSIVE &#x3D; All Inclusive (only for Aggregators) (optional)
     * @param includeClosed Show all properties (include sold out) or available only. For sold out properties, please check availability on other dates. (optional)
     * @param bestRateOnly Used to return only the cheapest offer per hotel or all available offers. (optional, default to true)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @return ApiResponse&lt;MultiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request:  | Code | Title  | |-----|-----| | 23   | PASSENGER TYPE NOT SUPPORTED   | | 61 | INVALID CURRENCY CODE| | 137 | INVALID ADULTS OCCUPANCY REQUESTED| | 145 | DURATION PERIOD OR DATES INCORRECT| | 195 | SERVICE RESTRICTION| | 249 | INVALID RATE CODE| | 377 | MAX STAY DURATION IS EXCEEDED| | 381 | INVALID CHECK-IN DATE| | 382 | INVALID CHECK-OUT DATE| | 383 | INVALID CITY CODE| | 392 | INVALID HOTEL CODE| | 397 | INVALID NUMBER OF ADULTS| | 400 | INVALID PROPERTY CODE| | 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE| | 450 | INVALID PROVIDER RESPONSE| | 451 | INVALID CREDENTIALS| | 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS| | 784 | PROVIDER TIME OUT| | 790 | RATE SECURITY NOT LOADED|  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiResponse> getMultiHotelOffersWithHttpInfo(List<String> hotelIds, Integer adults, LocalDate checkInDate, LocalDate checkOutDate, String countryOfResidence, Integer roomQuantity, String priceRange, String currency, String paymentPolicy, String boardType, Boolean includeClosed, Boolean bestRateOnly, String lang) throws ApiException {
        okhttp3.Call localVarCall = getMultiHotelOffersValidateBeforeCall(hotelIds, adults, checkInDate, checkOutDate, countryOfResidence, roomQuantity, priceRange, currency, paymentPolicy, boardType, includeClosed, bestRateOnly, lang, null);
        Type localVarReturnType = new TypeToken<MultiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getMultiHotelOffers (asynchronously)
     * 
     * @param hotelIds Amadeus property codes on 8 chars. Mandatory parameter for a search by predefined list of hotels. (required)
     * @param adults Number of adult guests (1-9) per room. (optional, default to 1)
     * @param checkInDate Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today&#39;s date in the GMT time zone. (optional)
     * @param checkOutDate Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1. (optional)
     * @param countryOfResidence Code of the country of residence of the traveler expressed using ISO 3166-1 format. (optional)
     * @param roomQuantity Number of rooms requested (1-9). (optional, default to 1)
     * @param priceRange Filter hotel offers by price per night interval (ex: 200-300 or -300 or 100). It is mandatory to include a currency when this field is set. (optional)
     * @param currency Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel. (optional)
     * @param paymentPolicy Filter the response based on a specific payment type. NONE means all types (default). (optional, default to NONE)
     * @param boardType Filter response based on available meals:         * ROOM_ONLY &#x3D; Room Only         * BREAKFAST &#x3D; Breakfast         * HALF_BOARD &#x3D; Diner &amp; Breakfast (only for Aggregators)         * FULL_BOARD &#x3D; Full Board (only for Aggregators)         * ALL_INCLUSIVE &#x3D; All Inclusive (only for Aggregators) (optional)
     * @param includeClosed Show all properties (include sold out) or available only. For sold out properties, please check availability on other dates. (optional)
     * @param bestRateOnly Used to return only the cheapest offer per hotel or all available offers. (optional, default to true)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request:  | Code | Title  | |-----|-----| | 23   | PASSENGER TYPE NOT SUPPORTED   | | 61 | INVALID CURRENCY CODE| | 137 | INVALID ADULTS OCCUPANCY REQUESTED| | 145 | DURATION PERIOD OR DATES INCORRECT| | 195 | SERVICE RESTRICTION| | 249 | INVALID RATE CODE| | 377 | MAX STAY DURATION IS EXCEEDED| | 381 | INVALID CHECK-IN DATE| | 382 | INVALID CHECK-OUT DATE| | 383 | INVALID CITY CODE| | 392 | INVALID HOTEL CODE| | 397 | INVALID NUMBER OF ADULTS| | 400 | INVALID PROPERTY CODE| | 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE THAN CHECK-IN DATE| | 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT| | 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE| | 450 | INVALID PROVIDER RESPONSE| | 451 | INVALID CREDENTIALS| | 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS| | 784 | PROVIDER TIME OUT| | 790 | RATE SECURITY NOT LOADED|  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiHotelOffersAsync(List<String> hotelIds, Integer adults, LocalDate checkInDate, LocalDate checkOutDate, String countryOfResidence, Integer roomQuantity, String priceRange, String currency, String paymentPolicy, String boardType, Boolean includeClosed, Boolean bestRateOnly, String lang, final ApiCallback<MultiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultiHotelOffersValidateBeforeCall(hotelIds, adults, checkInDate, checkOutDate, countryOfResidence, roomQuantity, priceRange, currency, paymentPolicy, boardType, includeClosed, bestRateOnly, lang, _callback);
        Type localVarReturnType = new TypeToken<MultiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferPricing
     * @param offerId Unique identifier of an offer. Either the GDS booking code or the aggregator offerId with a limited lifetime. (required)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: code| title ------- | ------------------------------------- 23 | PASSENGER TYPE NOT SUPPORTED 61 |INVALID CURRENCY CODE 137 | INVALID ADULTS OCCUPANCY REQUESTED 145 | DURATION PERIOD OR DATES INCORRECT 195 | SERVICE RESTRICTION 249 | INVALID RATE CODE 377 | MAX STAY DURATION IS EXCEEDED 381 | INVALID CHECK-IN DATE 382 | INVALID CHECK-OUT DATE 383 | INVALID CITY CODE 392 | INVALID HOTEL CODE 397 | INVALID NUMBER OF ADULTS 400 | INVALID PROPERTY CODE 402 | INVALID ROOM TYPE 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450 | INVALID PROVIDER RESPONSE 451 | INVALID CREDENTIAL 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784 | PROVIDER TIME OUT 790 | NO PROPERTIES FOUND WITHIN THIS RADIUS 795 | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842 | RATE SECURITY NOT LOADED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hotel or offer not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferPricingCall(String offerId, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shopping/hotel-offers/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferPricingValidateBeforeCall(String offerId, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getOfferPricing(Async)");
        }

        return getOfferPricingCall(offerId, lang, _callback);

    }

    /**
     * getOfferPricing
     * 
     * @param offerId Unique identifier of an offer. Either the GDS booking code or the aggregator offerId with a limited lifetime. (required)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @return PricingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: code| title ------- | ------------------------------------- 23 | PASSENGER TYPE NOT SUPPORTED 61 |INVALID CURRENCY CODE 137 | INVALID ADULTS OCCUPANCY REQUESTED 145 | DURATION PERIOD OR DATES INCORRECT 195 | SERVICE RESTRICTION 249 | INVALID RATE CODE 377 | MAX STAY DURATION IS EXCEEDED 381 | INVALID CHECK-IN DATE 382 | INVALID CHECK-OUT DATE 383 | INVALID CITY CODE 392 | INVALID HOTEL CODE 397 | INVALID NUMBER OF ADULTS 400 | INVALID PROPERTY CODE 402 | INVALID ROOM TYPE 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450 | INVALID PROVIDER RESPONSE 451 | INVALID CREDENTIAL 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784 | PROVIDER TIME OUT 790 | NO PROPERTIES FOUND WITHIN THIS RADIUS 795 | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842 | RATE SECURITY NOT LOADED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hotel or offer not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public PricingResponse getOfferPricing(String offerId, String lang) throws ApiException {
        ApiResponse<PricingResponse> localVarResp = getOfferPricingWithHttpInfo(offerId, lang);
        return localVarResp.getData();
    }

    /**
     * getOfferPricing
     * 
     * @param offerId Unique identifier of an offer. Either the GDS booking code or the aggregator offerId with a limited lifetime. (required)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @return ApiResponse&lt;PricingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: code| title ------- | ------------------------------------- 23 | PASSENGER TYPE NOT SUPPORTED 61 |INVALID CURRENCY CODE 137 | INVALID ADULTS OCCUPANCY REQUESTED 145 | DURATION PERIOD OR DATES INCORRECT 195 | SERVICE RESTRICTION 249 | INVALID RATE CODE 377 | MAX STAY DURATION IS EXCEEDED 381 | INVALID CHECK-IN DATE 382 | INVALID CHECK-OUT DATE 383 | INVALID CITY CODE 392 | INVALID HOTEL CODE 397 | INVALID NUMBER OF ADULTS 400 | INVALID PROPERTY CODE 402 | INVALID ROOM TYPE 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450 | INVALID PROVIDER RESPONSE 451 | INVALID CREDENTIAL 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784 | PROVIDER TIME OUT 790 | NO PROPERTIES FOUND WITHIN THIS RADIUS 795 | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842 | RATE SECURITY NOT LOADED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hotel or offer not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingResponse> getOfferPricingWithHttpInfo(String offerId, String lang) throws ApiException {
        okhttp3.Call localVarCall = getOfferPricingValidateBeforeCall(offerId, lang, null);
        Type localVarReturnType = new TypeToken<PricingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getOfferPricing (asynchronously)
     * 
     * @param offerId Unique identifier of an offer. Either the GDS booking code or the aggregator offerId with a limited lifetime. (required)
     * @param lang Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: code| title ------- | ------------------------------------- 23 | PASSENGER TYPE NOT SUPPORTED 61 |INVALID CURRENCY CODE 137 | INVALID ADULTS OCCUPANCY REQUESTED 145 | DURATION PERIOD OR DATES INCORRECT 195 | SERVICE RESTRICTION 249 | INVALID RATE CODE 377 | MAX STAY DURATION IS EXCEEDED 381 | INVALID CHECK-IN DATE 382 | INVALID CHECK-OUT DATE 383 | INVALID CITY CODE 392 | INVALID HOTEL CODE 397 | INVALID NUMBER OF ADULTS 400 | INVALID PROPERTY CODE 402 | INVALID ROOM TYPE 404 | CHECK_OUT DATE MUST BE FURTHER IN THE FUTURE THAN CHECK-IN DATE 424 | NO HOTELS FOUND WHICH MATCH THIS INPUT 431 | CHECK-OUT DATE IS TOO FAR IN THE FUTURE 450 | INVALID PROVIDER RESPONSE 451 | INVALID CREDENTIAL 562 | RESTRICTED ACCESS FOR THE REQUESTED RATES AND CHAINS 784 | PROVIDER TIME OUT 790 | NO PROPERTIES FOUND WITHIN THIS RADIUS 795 | NO SIMILAR NAME FOUND, PLEASE ENLARGE YOUR SEARCH CRITERIA 842 | RATE SECURITY NOT LOADED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hotel or offer not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferPricingAsync(String offerId, String lang, final ApiCallback<PricingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferPricingValidateBeforeCall(offerId, lang, _callback);
        Type localVarReturnType = new TypeToken<PricingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
