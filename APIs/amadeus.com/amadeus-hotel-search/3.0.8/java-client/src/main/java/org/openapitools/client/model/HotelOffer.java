/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.BoardType;
import org.openapitools.client.model.HotelProductCommission;
import org.openapitools.client.model.HotelProductGuests;
import org.openapitools.client.model.HotelProductHotelPrice;
import org.openapitools.client.model.HotelProductPolicyDetails;
import org.openapitools.client.model.HotelProductRateFamily;
import org.openapitools.client.model.HotelProductRoomDetails;
import org.openapitools.client.model.QualifiedFreeText;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hotel Offer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:09.974193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelOffer {
  public static final String SERIALIZED_NAME_BOARD_TYPE = "boardType";
  @SerializedName(SERIALIZED_NAME_BOARD_TYPE)
  private BoardType boardType;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CHECK_IN_DATE = "checkInDate";
  @SerializedName(SERIALIZED_NAME_CHECK_IN_DATE)
  private LocalDate checkInDate;

  public static final String SERIALIZED_NAME_CHECK_OUT_DATE = "checkOutDate";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT_DATE)
  private LocalDate checkOutDate;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private HotelProductCommission commission;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private QualifiedFreeText description;

  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private HotelProductGuests guests;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private HotelProductPolicyDetails policies;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private HotelProductHotelPrice price;

  public static final String SERIALIZED_NAME_RATE_CODE = "rateCode";
  @SerializedName(SERIALIZED_NAME_RATE_CODE)
  private String rateCode;

  public static final String SERIALIZED_NAME_RATE_FAMILY_ESTIMATED = "rateFamilyEstimated";
  @SerializedName(SERIALIZED_NAME_RATE_FAMILY_ESTIMATED)
  private HotelProductRateFamily rateFamilyEstimated;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private HotelProductRoomDetails room;

  public static final String SERIALIZED_NAME_ROOM_QUANTITY = "roomQuantity";
  @SerializedName(SERIALIZED_NAME_ROOM_QUANTITY)
  private String roomQuantity;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public HotelOffer() {
  }

  public HotelOffer boardType(BoardType boardType) {
    this.boardType = boardType;
    return this;
  }

  /**
   * Get boardType
   * @return boardType
   */
  @javax.annotation.Nullable
  public BoardType getBoardType() {
    return boardType;
  }

  public void setBoardType(BoardType boardType) {
    this.boardType = boardType;
  }


  public HotelOffer category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Special Rate Category Examples:   ASSOCIATION   FAMILY_PLAN
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public HotelOffer checkInDate(LocalDate checkInDate) {
    this.checkInDate = checkInDate;
    return this;
  }

  /**
   * check-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).
   * @return checkInDate
   */
  @javax.annotation.Nullable
  public LocalDate getCheckInDate() {
    return checkInDate;
  }

  public void setCheckInDate(LocalDate checkInDate) {
    this.checkInDate = checkInDate;
  }


  public HotelOffer checkOutDate(LocalDate checkOutDate) {
    this.checkOutDate = checkOutDate;
    return this;
  }

  /**
   * check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is &#x60;checkInDate&#x60;+1.
   * @return checkOutDate
   */
  @javax.annotation.Nullable
  public LocalDate getCheckOutDate() {
    return checkOutDate;
  }

  public void setCheckOutDate(LocalDate checkOutDate) {
    this.checkOutDate = checkOutDate;
  }


  public HotelOffer commission(HotelProductCommission commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public HotelProductCommission getCommission() {
    return commission;
  }

  public void setCommission(HotelProductCommission commission) {
    this.commission = commission;
  }


  public HotelOffer description(QualifiedFreeText description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public QualifiedFreeText getDescription() {
    return description;
  }

  public void setDescription(QualifiedFreeText description) {
    this.description = description;
  }


  public HotelOffer guests(HotelProductGuests guests) {
    this.guests = guests;
    return this;
  }

  /**
   * Get guests
   * @return guests
   */
  @javax.annotation.Nullable
  public HotelProductGuests getGuests() {
    return guests;
  }

  public void setGuests(HotelProductGuests guests) {
    this.guests = guests;
  }


  public HotelOffer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this offer. Might be valid for a temporary period only.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HotelOffer policies(HotelProductPolicyDetails policies) {
    this.policies = policies;
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public HotelProductPolicyDetails getPolicies() {
    return policies;
  }

  public void setPolicies(HotelProductPolicyDetails policies) {
    this.policies = policies;
  }


  public HotelOffer price(HotelProductHotelPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public HotelProductHotelPrice getPrice() {
    return price;
  }

  public void setPrice(HotelProductHotelPrice price) {
    this.price = price;
  }


  public HotelOffer rateCode(String rateCode) {
    this.rateCode = rateCode;
    return this;
  }

  /**
   * Special Rate - Provider Response Code (3 chars) Examples    * RAC - Rack    * BAR - Best Available Rate    * PRO - Promotional    * COR - Corporate    * GOV - Government (qualified)    * AAA - AAA (qualified)    * BNB - Bed and Breakfast    * PKG - Package    * TVL - Travel Industry    * SPC - Special Promo Rate    * WKD - Weekend    * CON - Convention    * SNR - Senior (Europe) (qualified)    * ARP - AARP - American Association of Retired People (50+) (qualified)    * SRS - Senior (qualified)    * ROR - Room Only Rate (no breakfast)    * FAM - Family    * DAY - Day rate
   * @return rateCode
   */
  @javax.annotation.Nonnull
  public String getRateCode() {
    return rateCode;
  }

  public void setRateCode(String rateCode) {
    this.rateCode = rateCode;
  }


  public HotelOffer rateFamilyEstimated(HotelProductRateFamily rateFamilyEstimated) {
    this.rateFamilyEstimated = rateFamilyEstimated;
    return this;
  }

  /**
   * Get rateFamilyEstimated
   * @return rateFamilyEstimated
   */
  @javax.annotation.Nullable
  public HotelProductRateFamily getRateFamilyEstimated() {
    return rateFamilyEstimated;
  }

  public void setRateFamilyEstimated(HotelProductRateFamily rateFamilyEstimated) {
    this.rateFamilyEstimated = rateFamilyEstimated;
  }


  public HotelOffer room(HotelProductRoomDetails room) {
    this.room = room;
    return this;
  }

  /**
   * Get room
   * @return room
   */
  @javax.annotation.Nonnull
  public HotelProductRoomDetails getRoom() {
    return room;
  }

  public void setRoom(HotelProductRoomDetails room) {
    this.room = room;
  }


  public HotelOffer roomQuantity(String roomQuantity) {
    this.roomQuantity = roomQuantity;
    return this;
  }

  /**
   * number of rooms (1-9)
   * @return roomQuantity
   */
  @javax.annotation.Nullable
  public String getRoomQuantity() {
    return roomQuantity;
  }

  public void setRoomQuantity(String roomQuantity) {
    this.roomQuantity = roomQuantity;
  }


  public HotelOffer self(String self) {
    this.self = self;
    return this;
  }

  /**
   * A self link to the object. Use this to refresh the Offer price
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public HotelOffer type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelOffer hotelOffer = (HotelOffer) o;
    return Objects.equals(this.boardType, hotelOffer.boardType) &&
        Objects.equals(this.category, hotelOffer.category) &&
        Objects.equals(this.checkInDate, hotelOffer.checkInDate) &&
        Objects.equals(this.checkOutDate, hotelOffer.checkOutDate) &&
        Objects.equals(this.commission, hotelOffer.commission) &&
        Objects.equals(this.description, hotelOffer.description) &&
        Objects.equals(this.guests, hotelOffer.guests) &&
        Objects.equals(this.id, hotelOffer.id) &&
        Objects.equals(this.policies, hotelOffer.policies) &&
        Objects.equals(this.price, hotelOffer.price) &&
        Objects.equals(this.rateCode, hotelOffer.rateCode) &&
        Objects.equals(this.rateFamilyEstimated, hotelOffer.rateFamilyEstimated) &&
        Objects.equals(this.room, hotelOffer.room) &&
        Objects.equals(this.roomQuantity, hotelOffer.roomQuantity) &&
        Objects.equals(this.self, hotelOffer.self) &&
        Objects.equals(this.type, hotelOffer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardType, category, checkInDate, checkOutDate, commission, description, guests, id, policies, price, rateCode, rateFamilyEstimated, room, roomQuantity, self, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelOffer {\n");
    sb.append("    boardType: ").append(toIndentedString(boardType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    checkInDate: ").append(toIndentedString(checkInDate)).append("\n");
    sb.append("    checkOutDate: ").append(toIndentedString(checkOutDate)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rateCode: ").append(toIndentedString(rateCode)).append("\n");
    sb.append("    rateFamilyEstimated: ").append(toIndentedString(rateFamilyEstimated)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    roomQuantity: ").append(toIndentedString(roomQuantity)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardType");
    openapiFields.add("category");
    openapiFields.add("checkInDate");
    openapiFields.add("checkOutDate");
    openapiFields.add("commission");
    openapiFields.add("description");
    openapiFields.add("guests");
    openapiFields.add("id");
    openapiFields.add("policies");
    openapiFields.add("price");
    openapiFields.add("rateCode");
    openapiFields.add("rateFamilyEstimated");
    openapiFields.add("room");
    openapiFields.add("roomQuantity");
    openapiFields.add("self");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("rateCode");
    openapiRequiredFields.add("room");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelOffer is not found in the empty JSON string", HotelOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelOffer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boardType`
      if (jsonObj.get("boardType") != null && !jsonObj.get("boardType").isJsonNull()) {
        BoardType.validateJsonElement(jsonObj.get("boardType"));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `commission`
      if (jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull()) {
        HotelProductCommission.validateJsonElement(jsonObj.get("commission"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        QualifiedFreeText.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `guests`
      if (jsonObj.get("guests") != null && !jsonObj.get("guests").isJsonNull()) {
        HotelProductGuests.validateJsonElement(jsonObj.get("guests"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        HotelProductPolicyDetails.validateJsonElement(jsonObj.get("policies"));
      }
      // validate the required field `price`
      HotelProductHotelPrice.validateJsonElement(jsonObj.get("price"));
      if (!jsonObj.get("rateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateCode").toString()));
      }
      // validate the optional field `rateFamilyEstimated`
      if (jsonObj.get("rateFamilyEstimated") != null && !jsonObj.get("rateFamilyEstimated").isJsonNull()) {
        HotelProductRateFamily.validateJsonElement(jsonObj.get("rateFamilyEstimated"));
      }
      // validate the required field `room`
      HotelProductRoomDetails.validateJsonElement(jsonObj.get("room"));
      if ((jsonObj.get("roomQuantity") != null && !jsonObj.get("roomQuantity").isJsonNull()) && !jsonObj.get("roomQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomQuantity").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelOffer>() {
           @Override
           public void write(JsonWriter out, HotelOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelOffer
   * @throws IOException if the JSON string is invalid with respect to HotelOffer
   */
  public static HotelOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelOffer.class);
  }

  /**
   * Convert an instance of HotelOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

