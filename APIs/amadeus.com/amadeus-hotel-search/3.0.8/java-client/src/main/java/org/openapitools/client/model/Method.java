/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The Payment Methods  * CREDIT_CARD (CC) - Payment Cards in &#x60;creditCards&#x60; are accepted  * AGENCY_ACCOUNT - Agency Account (Credit Line) is accepted. Agency is Charged at CheckOut  * TRAVEL_AGENT_ID - Agency IATA/ARC Number is accepted to Guarantee the booking  * CORPORATE_ID (COR-ID) - Corporate Account is accepted to Guarantee the booking  * HOTEL_GUEST_ID - Hotel Chain Rewards Card Number is accepted to Guarantee the booking  * CHECK - Checks are accepted  * MISC_CHARGE_ORDER - Miscellaneous Charge Order is accepted  * ADVANCE_DEPOSIT - Cash is accepted for Deposit/PrePay  * COMPANY_ADDRESS - Company Billing Address is accepted to Guarantee the booking
 */
@JsonAdapter(Method.Adapter.class)
public enum Method {
  
  CREDIT_CARD("CREDIT_CARD"),
  
  AGENCY_ACCOUNT("AGENCY_ACCOUNT"),
  
  TRAVEL_AGENT_ID("TRAVEL_AGENT_ID"),
  
  CORPORATE_ID("CORPORATE_ID"),
  
  HOTEL_GUEST_ID("HOTEL_GUEST_ID"),
  
  CHECK("CHECK"),
  
  MISC_CHARGE_ORDER("MISC_CHARGE_ORDER"),
  
  ADVANCE_DEPOSIT("ADVANCE_DEPOSIT"),
  
  COMPANY_ADDRESS("COMPANY_ADDRESS"),
  
  VCC_BILLBACK("VCC_BILLBACK"),
  
  VCC_B2_B_WALLET("VCC_B2B_WALLET"),
  
  DEFERED_PAYMENT("DEFERED_PAYMENT"),
  
  TRAVEL_AGENT_IMMEDIATE("TRAVEL_AGENT_IMMEDIATE");

  private String value;

  Method(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Method fromValue(String value) {
    for (Method b : Method.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Method> {
    @Override
    public void write(final JsonWriter jsonWriter, final Method enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Method read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Method.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Method.fromValue(value);
  }
}

