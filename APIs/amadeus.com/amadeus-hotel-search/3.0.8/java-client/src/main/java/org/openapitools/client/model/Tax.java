/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IATA Tax definition: An impost for raising revenue for the general treasury and which will be used for general public purposes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:09.974193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tax {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCLUDED = "included";
  @SerializedName(SERIALIZED_NAME_INCLUDED)
  private Boolean included;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_PRICING_FREQUENCY = "pricingFrequency";
  @SerializedName(SERIALIZED_NAME_PRICING_FREQUENCY)
  private String pricingFrequency;

  public static final String SERIALIZED_NAME_PRICING_MODE = "pricingMode";
  @SerializedName(SERIALIZED_NAME_PRICING_MODE)
  private String pricingMode;

  public Tax() {
  }

  public Tax amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Defines amount with decimal separator.
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public Tax code(String code) {
    this.code = code;
    return this;
  }

  /**
   * International Standards Organization (ISO) Tax code.It is a two-letter country code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Tax currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Defines a monetary unit. It is a three alpha code (iata code). Example: EUR for Euros, USD for US dollar, etc.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Tax description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Example - \&quot;Governement tax\&quot;
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Tax included(Boolean included) {
    this.included = included;
    return this;
  }

  /**
   * Indicates if tax is included or not
   * @return included
   */
  @javax.annotation.Nullable
  public Boolean getIncluded() {
    return included;
  }

  public void setIncluded(Boolean included) {
    this.included = included;
  }


  public Tax percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * In the case of a tax on TST value, the percentage of the tax will be indicated in this field.
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public Tax pricingFrequency(String pricingFrequency) {
    this.pricingFrequency = pricingFrequency;
    return this;
  }

  /**
   * Specifies if the tax applies per stay or per night   - PER_STAY   - PER_NIGHT
   * @return pricingFrequency
   */
  @javax.annotation.Nullable
  public String getPricingFrequency() {
    return pricingFrequency;
  }

  public void setPricingFrequency(String pricingFrequency) {
    this.pricingFrequency = pricingFrequency;
  }


  public Tax pricingMode(String pricingMode) {
    this.pricingMode = pricingMode;
    return this;
  }

  /**
   * Specifies if the tax applies per occupant or per room   - PER_OCCUPANT   - PER_PRODUCT
   * @return pricingMode
   */
  @javax.annotation.Nullable
  public String getPricingMode() {
    return pricingMode;
  }

  public void setPricingMode(String pricingMode) {
    this.pricingMode = pricingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tax tax = (Tax) o;
    return Objects.equals(this.amount, tax.amount) &&
        Objects.equals(this.code, tax.code) &&
        Objects.equals(this.currency, tax.currency) &&
        Objects.equals(this.description, tax.description) &&
        Objects.equals(this.included, tax.included) &&
        Objects.equals(this.percentage, tax.percentage) &&
        Objects.equals(this.pricingFrequency, tax.pricingFrequency) &&
        Objects.equals(this.pricingMode, tax.pricingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, code, currency, description, included, percentage, pricingFrequency, pricingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tax {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    included: ").append(toIndentedString(included)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pricingFrequency: ").append(toIndentedString(pricingFrequency)).append("\n");
    sb.append("    pricingMode: ").append(toIndentedString(pricingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("code");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("included");
    openapiFields.add("percentage");
    openapiFields.add("pricingFrequency");
    openapiFields.add("pricingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tax is not found in the empty JSON string", Tax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      if ((jsonObj.get("pricingFrequency") != null && !jsonObj.get("pricingFrequency").isJsonNull()) && !jsonObj.get("pricingFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingFrequency").toString()));
      }
      if ((jsonObj.get("pricingMode") != null && !jsonObj.get("pricingMode").isJsonNull()) && !jsonObj.get("pricingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tax.class));

       return (TypeAdapter<T>) new TypeAdapter<Tax>() {
           @Override
           public void write(JsonWriter out, Tax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tax
   * @throws IOException if the JSON string is invalid with respect to Tax
   */
  public static Tax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tax.class);
  }

  /**
   * Convert an instance of Tax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

