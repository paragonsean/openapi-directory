/*
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Markup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Some prices may vary during a stay, thus here you can see the daily price per period of the stay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:09.974193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelProductPriceVariation {
  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private String base;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_MARKUPS = "markups";
  @SerializedName(SERIALIZED_NAME_MARKUPS)
  private List<Markup> markups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLING_TOTAL = "sellingTotal";
  @SerializedName(SERIALIZED_NAME_SELLING_TOTAL)
  private String sellingTotal;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private String total;

  public HotelProductPriceVariation() {
  }

  public HotelProductPriceVariation base(String base) {
    this.base = base;
    return this;
  }

  /**
   * Get base
   * @return base
   */
  @javax.annotation.Nullable
  public String getBase() {
    return base;
  }

  public void setBase(String base) {
    this.base = base;
  }


  public HotelProductPriceVariation currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * currency Code apply to all elements of the price
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public HotelProductPriceVariation endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date of the period Format: YYYY-MM-DD
   * @return endDate
   */
  @javax.annotation.Nonnull
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public HotelProductPriceVariation markups(List<Markup> markups) {
    this.markups = markups;
    return this;
  }

  public HotelProductPriceVariation addMarkupsItem(Markup markupsItem) {
    if (this.markups == null) {
      this.markups = new ArrayList<>();
    }
    this.markups.add(markupsItem);
    return this;
  }

  /**
   * Get markups
   * @return markups
   */
  @javax.annotation.Nullable
  public List<Markup> getMarkups() {
    return markups;
  }

  public void setMarkups(List<Markup> markups) {
    this.markups = markups;
  }


  public HotelProductPriceVariation sellingTotal(String sellingTotal) {
    this.sellingTotal = sellingTotal;
    return this;
  }

  /**
   * sellingTotal &#x3D; Total + margins + markup + totalFees - discounts
   * @return sellingTotal
   */
  @javax.annotation.Nullable
  public String getSellingTotal() {
    return sellingTotal;
  }

  public void setSellingTotal(String sellingTotal) {
    this.sellingTotal = sellingTotal;
  }


  public HotelProductPriceVariation startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Begin date of the period Format: YYYY-MM-DD
   * @return startDate
   */
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public HotelProductPriceVariation total(String total) {
    this.total = total;
    return this;
  }

  /**
   * total &#x3D; base + totalTaxes
   * @return total
   */
  @javax.annotation.Nullable
  public String getTotal() {
    return total;
  }

  public void setTotal(String total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelProductPriceVariation hotelProductPriceVariation = (HotelProductPriceVariation) o;
    return Objects.equals(this.base, hotelProductPriceVariation.base) &&
        Objects.equals(this.currency, hotelProductPriceVariation.currency) &&
        Objects.equals(this.endDate, hotelProductPriceVariation.endDate) &&
        Objects.equals(this.markups, hotelProductPriceVariation.markups) &&
        Objects.equals(this.sellingTotal, hotelProductPriceVariation.sellingTotal) &&
        Objects.equals(this.startDate, hotelProductPriceVariation.startDate) &&
        Objects.equals(this.total, hotelProductPriceVariation.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base, currency, endDate, markups, sellingTotal, startDate, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelProductPriceVariation {\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    markups: ").append(toIndentedString(markups)).append("\n");
    sb.append("    sellingTotal: ").append(toIndentedString(sellingTotal)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base");
    openapiFields.add("currency");
    openapiFields.add("endDate");
    openapiFields.add("markups");
    openapiFields.add("sellingTotal");
    openapiFields.add("startDate");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("startDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelProductPriceVariation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelProductPriceVariation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelProductPriceVariation is not found in the empty JSON string", HotelProductPriceVariation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelProductPriceVariation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelProductPriceVariation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelProductPriceVariation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base") != null && !jsonObj.get("base").isJsonNull()) && !jsonObj.get("base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("markups") != null && !jsonObj.get("markups").isJsonNull()) {
        JsonArray jsonArraymarkups = jsonObj.getAsJsonArray("markups");
        if (jsonArraymarkups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markups` to be an array in the JSON string but got `%s`", jsonObj.get("markups").toString()));
          }

          // validate the optional field `markups` (array)
          for (int i = 0; i < jsonArraymarkups.size(); i++) {
            Markup.validateJsonElement(jsonArraymarkups.get(i));
          };
        }
      }
      if ((jsonObj.get("sellingTotal") != null && !jsonObj.get("sellingTotal").isJsonNull()) && !jsonObj.get("sellingTotal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellingTotal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellingTotal").toString()));
      }
      if ((jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelProductPriceVariation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelProductPriceVariation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelProductPriceVariation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelProductPriceVariation.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelProductPriceVariation>() {
           @Override
           public void write(JsonWriter out, HotelProductPriceVariation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelProductPriceVariation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelProductPriceVariation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelProductPriceVariation
   * @throws IOException if the JSON string is invalid with respect to HotelProductPriceVariation
   */
  public static HotelProductPriceVariation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelProductPriceVariation.class);
  }

  /**
   * Convert an instance of HotelProductPriceVariation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

