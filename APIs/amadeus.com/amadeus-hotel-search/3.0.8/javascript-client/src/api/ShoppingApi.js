/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import MultiResponse from '../model/MultiResponse';
import PricingResponse from '../model/PricingResponse';

/**
* Shopping service.
* @module api/ShoppingApi
* @version 3.0.8
*/
export default class ShoppingApi {

    /**
    * Constructs a new ShoppingApi. 
    * @alias module:api/ShoppingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMultiHotelOffers operation.
     * @callback module:api/ShoppingApi~getMultiHotelOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMultiHotelOffers
     * @param {Array.<String>} hotelIds Amadeus property codes on 8 chars. Mandatory parameter for a search by predefined list of hotels.
     * @param {Object} opts Optional parameters
     * @param {Number} [adults = 1)] Number of adult guests (1-9) per room.
     * @param {Date} [checkInDate] Check-in date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is the present date (no dates in the past). If not present, the default value will be today's date in the GMT time zone.
     * @param {Date} [checkOutDate] Check-out date of the stay (hotel local date). Format YYYY-MM-DD. The lowest accepted value is checkInDate+1. If not present, it will default to checkInDate +1.
     * @param {String} [countryOfResidence] Code of the country of residence of the traveler expressed using ISO 3166-1 format.
     * @param {Number} [roomQuantity = 1)] Number of rooms requested (1-9).
     * @param {String} [priceRange] Filter hotel offers by price per night interval (ex: 200-300 or -300 or 100). It is mandatory to include a currency when this field is set.
     * @param {String} [currency] Use this parameter to request a specific currency. ISO currency code (http://www.iso.org/iso/home/standards/currency_codes.htm). If a hotel does not support the requested currency, the prices for the hotel will be returned in the local currency of the hotel.
     * @param {module:model/String} [paymentPolicy = 'NONE')] Filter the response based on a specific payment type. NONE means all types (default).
     * @param {module:model/String} [boardType] Filter response based on available meals:         * ROOM_ONLY = Room Only         * BREAKFAST = Breakfast         * HALF_BOARD = Diner & Breakfast (only for Aggregators)         * FULL_BOARD = Full Board (only for Aggregators)         * ALL_INCLUSIVE = All Inclusive (only for Aggregators)
     * @param {Boolean} [includeClosed] Show all properties (include sold out) or available only. For sold out properties, please check availability on other dates.
     * @param {Boolean} [bestRateOnly = true)] Used to return only the cheapest offer per hotel or all available offers.
     * @param {String} [lang] Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html).
     * @param {module:api/ShoppingApi~getMultiHotelOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiResponse}
     */
    getMultiHotelOffers(hotelIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hotelIds' is set
      if (hotelIds === undefined || hotelIds === null) {
        throw new Error("Missing the required parameter 'hotelIds' when calling getMultiHotelOffers");
      }

      let pathParams = {
      };
      let queryParams = {
        'hotelIds': this.apiClient.buildCollectionParam(hotelIds, 'csv'),
        'adults': opts['adults'],
        'checkInDate': opts['checkInDate'],
        'checkOutDate': opts['checkOutDate'],
        'countryOfResidence': opts['countryOfResidence'],
        'roomQuantity': opts['roomQuantity'],
        'priceRange': opts['priceRange'],
        'currency': opts['currency'],
        'paymentPolicy': opts['paymentPolicy'],
        'boardType': opts['boardType'],
        'includeClosed': opts['includeClosed'],
        'bestRateOnly': opts['bestRateOnly'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = MultiResponse;
      return this.apiClient.callApi(
        '/shopping/hotel-offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOfferPricing operation.
     * @callback module:api/ShoppingApi~getOfferPricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOfferPricing
     * @param {String} offerId Unique identifier of an offer. Either the GDS booking code or the aggregator offerId with a limited lifetime.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Requested language of descriptive texts.  Examples: FR , fr , fr-FR. If a language is not available the text will be returned in english. ISO language code (https://www.iso.org/iso-639-language-codes.html).
     * @param {module:api/ShoppingApi~getOfferPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingResponse}
     */
    getOfferPricing(offerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling getOfferPricing");
      }

      let pathParams = {
        'offerId': offerId
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = PricingResponse;
      return this.apiClient.callApi(
        '/shopping/hotel-offers/{offerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
