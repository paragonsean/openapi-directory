/**
 * Hotel Search API
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 3.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Hotel model module.
 * @module model/Hotel
 * @version 3.0.8
 */
class Hotel {
    /**
     * Constructs a new <code>Hotel</code>.
     * Hotel Content
     * @alias module:model/Hotel
     */
    constructor() { 
        
        Hotel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hotel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hotel} obj Optional instance to populate.
     * @return {module:model/Hotel} The populated <code>Hotel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hotel();

            if (data.hasOwnProperty('brandCode')) {
                obj['brandCode'] = ApiClient.convertToType(data['brandCode'], 'String');
            }
            if (data.hasOwnProperty('chainCode')) {
                obj['chainCode'] = ApiClient.convertToType(data['chainCode'], 'String');
            }
            if (data.hasOwnProperty('cityCode')) {
                obj['cityCode'] = ApiClient.convertToType(data['cityCode'], 'String');
            }
            if (data.hasOwnProperty('dupeId')) {
                obj['dupeId'] = ApiClient.convertToType(data['dupeId'], 'String');
            }
            if (data.hasOwnProperty('hotelId')) {
                obj['hotelId'] = ApiClient.convertToType(data['hotelId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hotel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hotel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandCode'] && !(typeof data['brandCode'] === 'string' || data['brandCode'] instanceof String)) {
            throw new Error("Expected the field `brandCode` to be a primitive type in the JSON string but got " + data['brandCode']);
        }
        // ensure the json data is a string
        if (data['chainCode'] && !(typeof data['chainCode'] === 'string' || data['chainCode'] instanceof String)) {
            throw new Error("Expected the field `chainCode` to be a primitive type in the JSON string but got " + data['chainCode']);
        }
        // ensure the json data is a string
        if (data['cityCode'] && !(typeof data['cityCode'] === 'string' || data['cityCode'] instanceof String)) {
            throw new Error("Expected the field `cityCode` to be a primitive type in the JSON string but got " + data['cityCode']);
        }
        // ensure the json data is a string
        if (data['dupeId'] && !(typeof data['dupeId'] === 'string' || data['dupeId'] instanceof String)) {
            throw new Error("Expected the field `dupeId` to be a primitive type in the JSON string but got " + data['dupeId']);
        }
        // ensure the json data is a string
        if (data['hotelId'] && !(typeof data['hotelId'] === 'string' || data['hotelId'] instanceof String)) {
            throw new Error("Expected the field `hotelId` to be a primitive type in the JSON string but got " + data['hotelId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Brand (RT...) (Amadeus 2 chars Code). Small Properties distributed by Merchants may not have a Brand. Example - AD (Value Hotels) is the Provider/Merchant, and RT (Accor) is the Brand of the Property
 * @member {String} brandCode
 */
Hotel.prototype['brandCode'] = undefined;

/**
 * Brand (RT...) or Merchant (AD...) (Amadeus 2 chars Code)
 * @member {String} chainCode
 */
Hotel.prototype['chainCode'] = undefined;

/**
 * Warning: The IATA city code associated to the hotel (not necessary the real Hotel City)
 * @member {String} cityCode
 */
Hotel.prototype['cityCode'] = undefined;

/**
 * Unique Property identifier of the physical hotel. One physical hotel can be represented by different Providers, each one having its own `hotelID`. This attribute allows a client application to group together hotels that are actually the same.
 * @member {String} dupeId
 */
Hotel.prototype['dupeId'] = undefined;

/**
 * Amadeus Property Code (8 chars)
 * @member {String} hotelId
 */
Hotel.prototype['hotelId'] = undefined;

/**
 * Hotel Name
 * @member {String} name
 */
Hotel.prototype['name'] = undefined;






export default Hotel;

