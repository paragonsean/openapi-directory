/*
 * Flight Inspiration Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.FlightDestinations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlightDestinationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlightDestinationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlightDestinationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFlightDestinations
     * @param origin IATA code of the city from which the flight will depart  [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) - e.g. MAD for Madrid  (required)
     * @param departureDate The date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25.   Ranges are specified with a comma and are inclusive  Departure date can not be more than 180 days in the future.  (optional)
     * @param oneWay if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered (optional, default to false)
     * @param duration Exact duration or range of durations of the travel, in days.  This parameter must not be set if oneWay is true.   Ranges are specified with a comma and are inclusive, e.g. 2,8  Duration can not be lower than 1 days or higher than 15 days  (optional)
     * @param nonStop if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered (optional, default to false)
     * @param maxPrice defines the price limit for each offer returned. The value should be a positive number, without decimals (optional)
     * @param viewBy view the flight destinations by DATE, DESTINATION, DURATION, WEEK, or COUNTRY. View by DATE (default when oneWay is true) to get the cheapest flight destination for every departure date in the given range. View by DURATION (default when oneWay is false) to get the cheapest flight destination for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates. View by COUNTRY to get the cheapest flight destination by country. Note that specifying a detailed view but large ranges may result in a huge number of flight destinations being returned. For some very large numbers of flight destinations, the API may refuse to provide a response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> code    | title                                  ------- | -------------------------------------  6003    | ITEM/DATA NOT FOUND OR DATA NOT EXISTING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightDestinationsCall(String origin, String departureDate, Boolean oneWay, String duration, Boolean nonStop, Long maxPrice, String viewBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shopping/flight-destinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureDate", departureDate));
        }

        if (oneWay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oneWay", oneWay));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (nonStop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonStop", nonStop));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPrice", maxPrice));
        }

        if (viewBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewBy", viewBy));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlightDestinationsValidateBeforeCall(String origin, String departureDate, Boolean oneWay, String duration, Boolean nonStop, Long maxPrice, String viewBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling getFlightDestinations(Async)");
        }

        return getFlightDestinationsCall(origin, departureDate, oneWay, duration, nonStop, maxPrice, viewBy, _callback);

    }

    /**
     * Find the cheapest destinations where you can fly to.
     * 
     * @param origin IATA code of the city from which the flight will depart  [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) - e.g. MAD for Madrid  (required)
     * @param departureDate The date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25.   Ranges are specified with a comma and are inclusive  Departure date can not be more than 180 days in the future.  (optional)
     * @param oneWay if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered (optional, default to false)
     * @param duration Exact duration or range of durations of the travel, in days.  This parameter must not be set if oneWay is true.   Ranges are specified with a comma and are inclusive, e.g. 2,8  Duration can not be lower than 1 days or higher than 15 days  (optional)
     * @param nonStop if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered (optional, default to false)
     * @param maxPrice defines the price limit for each offer returned. The value should be a positive number, without decimals (optional)
     * @param viewBy view the flight destinations by DATE, DESTINATION, DURATION, WEEK, or COUNTRY. View by DATE (default when oneWay is true) to get the cheapest flight destination for every departure date in the given range. View by DURATION (default when oneWay is false) to get the cheapest flight destination for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates. View by COUNTRY to get the cheapest flight destination by country. Note that specifying a detailed view but large ranges may result in a huge number of flight destinations being returned. For some very large numbers of flight destinations, the API may refuse to provide a response (optional)
     * @return FlightDestinations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> code    | title                                  ------- | -------------------------------------  6003    | ITEM/DATA NOT FOUND OR DATA NOT EXISTING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public FlightDestinations getFlightDestinations(String origin, String departureDate, Boolean oneWay, String duration, Boolean nonStop, Long maxPrice, String viewBy) throws ApiException {
        ApiResponse<FlightDestinations> localVarResp = getFlightDestinationsWithHttpInfo(origin, departureDate, oneWay, duration, nonStop, maxPrice, viewBy);
        return localVarResp.getData();
    }

    /**
     * Find the cheapest destinations where you can fly to.
     * 
     * @param origin IATA code of the city from which the flight will depart  [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) - e.g. MAD for Madrid  (required)
     * @param departureDate The date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25.   Ranges are specified with a comma and are inclusive  Departure date can not be more than 180 days in the future.  (optional)
     * @param oneWay if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered (optional, default to false)
     * @param duration Exact duration or range of durations of the travel, in days.  This parameter must not be set if oneWay is true.   Ranges are specified with a comma and are inclusive, e.g. 2,8  Duration can not be lower than 1 days or higher than 15 days  (optional)
     * @param nonStop if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered (optional, default to false)
     * @param maxPrice defines the price limit for each offer returned. The value should be a positive number, without decimals (optional)
     * @param viewBy view the flight destinations by DATE, DESTINATION, DURATION, WEEK, or COUNTRY. View by DATE (default when oneWay is true) to get the cheapest flight destination for every departure date in the given range. View by DURATION (default when oneWay is false) to get the cheapest flight destination for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates. View by COUNTRY to get the cheapest flight destination by country. Note that specifying a detailed view but large ranges may result in a huge number of flight destinations being returned. For some very large numbers of flight destinations, the API may refuse to provide a response (optional)
     * @return ApiResponse&lt;FlightDestinations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> code    | title                                  ------- | -------------------------------------  6003    | ITEM/DATA NOT FOUND OR DATA NOT EXISTING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlightDestinations> getFlightDestinationsWithHttpInfo(String origin, String departureDate, Boolean oneWay, String duration, Boolean nonStop, Long maxPrice, String viewBy) throws ApiException {
        okhttp3.Call localVarCall = getFlightDestinationsValidateBeforeCall(origin, departureDate, oneWay, duration, nonStop, maxPrice, viewBy, null);
        Type localVarReturnType = new TypeToken<FlightDestinations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find the cheapest destinations where you can fly to. (asynchronously)
     * 
     * @param origin IATA code of the city from which the flight will depart  [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx) - e.g. MAD for Madrid  (required)
     * @param departureDate The date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25.   Ranges are specified with a comma and are inclusive  Departure date can not be more than 180 days in the future.  (optional)
     * @param oneWay if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered (optional, default to false)
     * @param duration Exact duration or range of durations of the travel, in days.  This parameter must not be set if oneWay is true.   Ranges are specified with a comma and are inclusive, e.g. 2,8  Duration can not be lower than 1 days or higher than 15 days  (optional)
     * @param nonStop if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered (optional, default to false)
     * @param maxPrice defines the price limit for each offer returned. The value should be a positive number, without decimals (optional)
     * @param viewBy view the flight destinations by DATE, DESTINATION, DURATION, WEEK, or COUNTRY. View by DATE (default when oneWay is true) to get the cheapest flight destination for every departure date in the given range. View by DURATION (default when oneWay is false) to get the cheapest flight destination for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates. View by COUNTRY to get the cheapest flight destination by country. Note that specifying a detailed view but large ranges may result in a huge number of flight destinations being returned. For some very large numbers of flight destinations, the API may refuse to provide a response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  425     | INVALID DATE 477     | INVALID FORMAT 2668    | PARAMETER COMBINATION INVALID/RESTRICTED 4926    | INVALID DATA RECEIVED 32171   | MANDATORY DATA MISSING  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> code    | title                                  ------- | -------------------------------------  6003    | ITEM/DATA NOT FOUND OR DATA NOT EXISTING  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightDestinationsAsync(String origin, String departureDate, Boolean oneWay, String duration, Boolean nonStop, Long maxPrice, String viewBy, final ApiCallback<FlightDestinations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlightDestinationsValidateBeforeCall(origin, departureDate, oneWay, duration, nonStop, maxPrice, viewBy, _callback);
        Type localVarReturnType = new TypeToken<FlightDestinations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
