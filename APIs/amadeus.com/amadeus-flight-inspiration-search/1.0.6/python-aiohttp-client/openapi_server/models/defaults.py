# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Defaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, departure_date: str=None, duration: str=None, non_stop: bool=None, one_way: bool=None, view_by: str=None):
        """Defaults - a model defined in OpenAPI

        :param departure_date: The departure_date of this Defaults.
        :param duration: The duration of this Defaults.
        :param non_stop: The non_stop of this Defaults.
        :param one_way: The one_way of this Defaults.
        :param view_by: The view_by of this Defaults.
        """
        self.openapi_types = {
            'departure_date': str,
            'duration': str,
            'non_stop': bool,
            'one_way': bool,
            'view_by': str
        }

        self.attribute_map = {
            'departure_date': 'departureDate',
            'duration': 'duration',
            'non_stop': 'nonStop',
            'one_way': 'oneWay',
            'view_by': 'viewBy'
        }

        self._departure_date = departure_date
        self._duration = duration
        self._non_stop = non_stop
        self._one_way = one_way
        self._view_by = view_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Defaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Defaults of this Defaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def departure_date(self):
        """Gets the departure_date of this Defaults.

        the date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25. Ranges are specified with a comma and are inclusive

        :return: The departure_date of this Defaults.
        :rtype: str
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this Defaults.

        the date, or range of dates, on which the flight will depart from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25. Ranges are specified with a comma and are inclusive

        :param departure_date: The departure_date of this Defaults.
        :type departure_date: str
        """

        self._departure_date = departure_date

    @property
    def duration(self):
        """Gets the duration of this Defaults.

        exact duration or range of durations of the travel, in days. This parameter must not be set if oneWay is true. Ranges are specified with a comma and are inclusive, e.g. 2,8

        :return: The duration of this Defaults.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Defaults.

        exact duration or range of durations of the travel, in days. This parameter must not be set if oneWay is true. Ranges are specified with a comma and are inclusive, e.g. 2,8

        :param duration: The duration of this Defaults.
        :type duration: str
        """

        self._duration = duration

    @property
    def non_stop(self):
        """Gets the non_stop of this Defaults.

        if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered

        :return: The non_stop of this Defaults.
        :rtype: bool
        """
        return self._non_stop

    @non_stop.setter
    def non_stop(self, non_stop):
        """Sets the non_stop of this Defaults.

        if this parameter is set to true, only flights going from the origin to the destination with no stop in-between are considered

        :param non_stop: The non_stop of this Defaults.
        :type non_stop: bool
        """

        self._non_stop = non_stop

    @property
    def one_way(self):
        """Gets the one_way of this Defaults.

        if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered

        :return: The one_way of this Defaults.
        :rtype: bool
        """
        return self._one_way

    @one_way.setter
    def one_way(self, one_way):
        """Sets the one_way of this Defaults.

        if this parameter is set to true, only one-way flights are considered. If this parameter is not set or set to false, only round-trip flights are considered

        :param one_way: The one_way of this Defaults.
        :type one_way: bool
        """

        self._one_way = one_way

    @property
    def view_by(self):
        """Gets the view_by of this Defaults.

        view the flight destinations by COUNTRY, DATE, DESTINATION, DURATION, or WEEK. View by COUNTRY to get the cheapest flight dates for every country in the given range. View by DATE to get the cheapest flight dates for every departure date in the given range. View by DURATION to get the cheapest flight dates for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates

        :return: The view_by of this Defaults.
        :rtype: str
        """
        return self._view_by

    @view_by.setter
    def view_by(self, view_by):
        """Sets the view_by of this Defaults.

        view the flight destinations by COUNTRY, DATE, DESTINATION, DURATION, or WEEK. View by COUNTRY to get the cheapest flight dates for every country in the given range. View by DATE to get the cheapest flight dates for every departure date in the given range. View by DURATION to get the cheapest flight dates for every departure date and for every duration in the given ranges. View by WEEK to get the cheapest flight destination for every week in the given range of departure dates

        :param view_by: The view_by of this Defaults.
        :type view_by: str
        """
        allowed_values = ["COUNTRY", "DATE", "DESTINATION", "DURATION", "WEEK"]  # noqa: E501
        if view_by not in allowed_values:
            raise ValueError(
                "Invalid value for `view_by` ({0}), must be one of {1}"
                .format(view_by, allowed_values)
            )

        self._view_by = view_by
