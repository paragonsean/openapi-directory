/**
 * Flight Inspiration Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationValue model module.
 * @module model/LocationValue
 * @version 1.0.6
 */
class LocationValue {
    /**
     * Constructs a new <code>LocationValue</code>.
     * @alias module:model/LocationValue
     */
    constructor() { 
        
        LocationValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationValue} obj Optional instance to populate.
     * @return {module:model/LocationValue} The populated <code>LocationValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationValue();

            if (data.hasOwnProperty('detailedName')) {
                obj['detailedName'] = ApiClient.convertToType(data['detailedName'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detailedName'] && !(typeof data['detailedName'] === 'string' || data['detailedName'] instanceof String)) {
            throw new Error("Expected the field `detailedName` to be a primitive type in the JSON string but got " + data['detailedName']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }

        return true;
    }


}



/**
 * name of the location
 * @member {String} detailedName
 */
LocationValue.prototype['detailedName'] = undefined;

/**
 * location type: airport or city
 * @member {module:model/LocationValue.SubTypeEnum} subType
 */
LocationValue.prototype['subType'] = undefined;





/**
 * Allowed values for the <code>subType</code> property.
 * @enum {String}
 * @readonly
 */
LocationValue['SubTypeEnum'] = {

    /**
     * value: "AIRPORT"
     * @const
     */
    "AIRPORT": "AIRPORT",

    /**
     * value: "CITY"
     * @const
     */
    "CITY": "CITY"
};



export default LocationValue;

