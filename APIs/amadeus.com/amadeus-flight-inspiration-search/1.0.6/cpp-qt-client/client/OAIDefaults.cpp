/**
 * Flight Inspiration Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaults::OAIDefaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaults::OAIDefaults() {
    this->initializeModel();
}

OAIDefaults::~OAIDefaults() {}

void OAIDefaults::initializeModel() {

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_non_stop_isSet = false;
    m_non_stop_isValid = false;

    m_one_way_isSet = false;
    m_one_way_isValid = false;

    m_view_by_isSet = false;
    m_view_by_isValid = false;
}

void OAIDefaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaults::fromJsonObject(QJsonObject json) {

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departureDate")]);
    m_departure_date_isSet = !json[QString("departureDate")].isNull() && m_departure_date_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_non_stop_isValid = ::OpenAPI::fromJsonValue(m_non_stop, json[QString("nonStop")]);
    m_non_stop_isSet = !json[QString("nonStop")].isNull() && m_non_stop_isValid;

    m_one_way_isValid = ::OpenAPI::fromJsonValue(m_one_way, json[QString("oneWay")]);
    m_one_way_isSet = !json[QString("oneWay")].isNull() && m_one_way_isValid;

    m_view_by_isValid = ::OpenAPI::fromJsonValue(m_view_by, json[QString("viewBy")]);
    m_view_by_isSet = !json[QString("viewBy")].isNull() && m_view_by_isValid;
}

QString OAIDefaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaults::asJsonObject() const {
    QJsonObject obj;
    if (m_departure_date_isSet) {
        obj.insert(QString("departureDate"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_non_stop_isSet) {
        obj.insert(QString("nonStop"), ::OpenAPI::toJsonValue(m_non_stop));
    }
    if (m_one_way_isSet) {
        obj.insert(QString("oneWay"), ::OpenAPI::toJsonValue(m_one_way));
    }
    if (m_view_by_isSet) {
        obj.insert(QString("viewBy"), ::OpenAPI::toJsonValue(m_view_by));
    }
    return obj;
}

QString OAIDefaults::getDepartureDate() const {
    return m_departure_date;
}
void OAIDefaults::setDepartureDate(const QString &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIDefaults::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIDefaults::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

QString OAIDefaults::getDuration() const {
    return m_duration;
}
void OAIDefaults::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDefaults::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDefaults::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIDefaults::isNonStop() const {
    return m_non_stop;
}
void OAIDefaults::setNonStop(const bool &non_stop) {
    m_non_stop = non_stop;
    m_non_stop_isSet = true;
}

bool OAIDefaults::is_non_stop_Set() const{
    return m_non_stop_isSet;
}

bool OAIDefaults::is_non_stop_Valid() const{
    return m_non_stop_isValid;
}

bool OAIDefaults::isOneWay() const {
    return m_one_way;
}
void OAIDefaults::setOneWay(const bool &one_way) {
    m_one_way = one_way;
    m_one_way_isSet = true;
}

bool OAIDefaults::is_one_way_Set() const{
    return m_one_way_isSet;
}

bool OAIDefaults::is_one_way_Valid() const{
    return m_one_way_isValid;
}

QString OAIDefaults::getViewBy() const {
    return m_view_by;
}
void OAIDefaults::setViewBy(const QString &view_by) {
    m_view_by = view_by;
    m_view_by_isSet = true;
}

bool OAIDefaults::is_view_by_Set() const{
    return m_view_by_isSet;
}

bool OAIDefaults::is_view_by_Valid() const{
    return m_view_by_isValid;
}

bool OAIDefaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_departure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
