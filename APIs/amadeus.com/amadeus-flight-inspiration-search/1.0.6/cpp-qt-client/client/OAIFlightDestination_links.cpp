/**
 * Flight Inspiration Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, to see what is included in test please refer to our **[data collection](https://github.com/amadeus4dev/data-collection)**. 
 *
 * The version of the OpenAPI document: 1.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightDestination_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightDestination_links::OAIFlightDestination_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightDestination_links::OAIFlightDestination_links() {
    this->initializeModel();
}

OAIFlightDestination_links::~OAIFlightDestination_links() {}

void OAIFlightDestination_links::initializeModel() {

    m_flight_dates_isSet = false;
    m_flight_dates_isValid = false;

    m_flight_offers_isSet = false;
    m_flight_offers_isValid = false;
}

void OAIFlightDestination_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightDestination_links::fromJsonObject(QJsonObject json) {

    m_flight_dates_isValid = ::OpenAPI::fromJsonValue(m_flight_dates, json[QString("flightDates")]);
    m_flight_dates_isSet = !json[QString("flightDates")].isNull() && m_flight_dates_isValid;

    m_flight_offers_isValid = ::OpenAPI::fromJsonValue(m_flight_offers, json[QString("flightOffers")]);
    m_flight_offers_isSet = !json[QString("flightOffers")].isNull() && m_flight_offers_isValid;
}

QString OAIFlightDestination_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightDestination_links::asJsonObject() const {
    QJsonObject obj;
    if (m_flight_dates_isSet) {
        obj.insert(QString("flightDates"), ::OpenAPI::toJsonValue(m_flight_dates));
    }
    if (m_flight_offers_isSet) {
        obj.insert(QString("flightOffers"), ::OpenAPI::toJsonValue(m_flight_offers));
    }
    return obj;
}

QString OAIFlightDestination_links::getFlightDates() const {
    return m_flight_dates;
}
void OAIFlightDestination_links::setFlightDates(const QString &flight_dates) {
    m_flight_dates = flight_dates;
    m_flight_dates_isSet = true;
}

bool OAIFlightDestination_links::is_flight_dates_Set() const{
    return m_flight_dates_isSet;
}

bool OAIFlightDestination_links::is_flight_dates_Valid() const{
    return m_flight_dates_isValid;
}

QString OAIFlightDestination_links::getFlightOffers() const {
    return m_flight_offers;
}
void OAIFlightDestination_links::setFlightOffers(const QString &flight_offers) {
    m_flight_offers = flight_offers;
    m_flight_offers_isSet = true;
}

bool OAIFlightDestination_links::is_flight_offers_Set() const{
    return m_flight_offers_isSet;
}

bool OAIFlightDestination_links::is_flight_offers_Valid() const{
    return m_flight_offers_isValid;
}

bool OAIFlightDestination_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flight_dates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_offers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightDestination_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
