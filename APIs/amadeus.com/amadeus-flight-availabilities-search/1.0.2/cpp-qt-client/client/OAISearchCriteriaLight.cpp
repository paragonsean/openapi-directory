/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchCriteriaLight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchCriteriaLight::OAISearchCriteriaLight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchCriteriaLight::OAISearchCriteriaLight() {
    this->initializeModel();
}

OAISearchCriteriaLight::~OAISearchCriteriaLight() {}

void OAISearchCriteriaLight::initializeModel() {

    m_exclude_allotments_isSet = false;
    m_exclude_allotments_isValid = false;

    m_flight_filters_isSet = false;
    m_flight_filters_isValid = false;
}

void OAISearchCriteriaLight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchCriteriaLight::fromJsonObject(QJsonObject json) {

    m_exclude_allotments_isValid = ::OpenAPI::fromJsonValue(m_exclude_allotments, json[QString("excludeAllotments")]);
    m_exclude_allotments_isSet = !json[QString("excludeAllotments")].isNull() && m_exclude_allotments_isValid;

    m_flight_filters_isValid = ::OpenAPI::fromJsonValue(m_flight_filters, json[QString("flightFilters")]);
    m_flight_filters_isSet = !json[QString("flightFilters")].isNull() && m_flight_filters_isValid;
}

QString OAISearchCriteriaLight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchCriteriaLight::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_allotments_isSet) {
        obj.insert(QString("excludeAllotments"), ::OpenAPI::toJsonValue(m_exclude_allotments));
    }
    if (m_flight_filters.isSet()) {
        obj.insert(QString("flightFilters"), ::OpenAPI::toJsonValue(m_flight_filters));
    }
    return obj;
}

bool OAISearchCriteriaLight::isExcludeAllotments() const {
    return m_exclude_allotments;
}
void OAISearchCriteriaLight::setExcludeAllotments(const bool &exclude_allotments) {
    m_exclude_allotments = exclude_allotments;
    m_exclude_allotments_isSet = true;
}

bool OAISearchCriteriaLight::is_exclude_allotments_Set() const{
    return m_exclude_allotments_isSet;
}

bool OAISearchCriteriaLight::is_exclude_allotments_Valid() const{
    return m_exclude_allotments_isValid;
}

OAIFlightFiltersLight OAISearchCriteriaLight::getFlightFilters() const {
    return m_flight_filters;
}
void OAISearchCriteriaLight::setFlightFilters(const OAIFlightFiltersLight &flight_filters) {
    m_flight_filters = flight_filters;
    m_flight_filters_isSet = true;
}

bool OAISearchCriteriaLight::is_flight_filters_Set() const{
    return m_flight_filters_isSet;
}

bool OAISearchCriteriaLight::is_flight_filters_Valid() const{
    return m_flight_filters_isValid;
}

bool OAISearchCriteriaLight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_allotments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchCriteriaLight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
