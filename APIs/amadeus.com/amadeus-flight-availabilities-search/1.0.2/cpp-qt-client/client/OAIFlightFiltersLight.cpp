/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightFiltersLight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightFiltersLight::OAIFlightFiltersLight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightFiltersLight::OAIFlightFiltersLight() {
    this->initializeModel();
}

OAIFlightFiltersLight::~OAIFlightFiltersLight() {}

void OAIFlightFiltersLight::initializeModel() {

    m_cabin_restrictions_isSet = false;
    m_cabin_restrictions_isValid = false;

    m_carrier_restrictions_isSet = false;
    m_carrier_restrictions_isValid = false;

    m_connection_restriction_isSet = false;
    m_connection_restriction_isValid = false;
}

void OAIFlightFiltersLight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightFiltersLight::fromJsonObject(QJsonObject json) {

    m_cabin_restrictions_isValid = ::OpenAPI::fromJsonValue(m_cabin_restrictions, json[QString("cabinRestrictions")]);
    m_cabin_restrictions_isSet = !json[QString("cabinRestrictions")].isNull() && m_cabin_restrictions_isValid;

    m_carrier_restrictions_isValid = ::OpenAPI::fromJsonValue(m_carrier_restrictions, json[QString("carrierRestrictions")]);
    m_carrier_restrictions_isSet = !json[QString("carrierRestrictions")].isNull() && m_carrier_restrictions_isValid;

    m_connection_restriction_isValid = ::OpenAPI::fromJsonValue(m_connection_restriction, json[QString("connectionRestriction")]);
    m_connection_restriction_isSet = !json[QString("connectionRestriction")].isNull() && m_connection_restriction_isValid;
}

QString OAIFlightFiltersLight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightFiltersLight::asJsonObject() const {
    QJsonObject obj;
    if (m_cabin_restrictions.size() > 0) {
        obj.insert(QString("cabinRestrictions"), ::OpenAPI::toJsonValue(m_cabin_restrictions));
    }
    if (m_carrier_restrictions.isSet()) {
        obj.insert(QString("carrierRestrictions"), ::OpenAPI::toJsonValue(m_carrier_restrictions));
    }
    if (m_connection_restriction.isSet()) {
        obj.insert(QString("connectionRestriction"), ::OpenAPI::toJsonValue(m_connection_restriction));
    }
    return obj;
}

QList<OAICabinRestriction> OAIFlightFiltersLight::getCabinRestrictions() const {
    return m_cabin_restrictions;
}
void OAIFlightFiltersLight::setCabinRestrictions(const QList<OAICabinRestriction> &cabin_restrictions) {
    m_cabin_restrictions = cabin_restrictions;
    m_cabin_restrictions_isSet = true;
}

bool OAIFlightFiltersLight::is_cabin_restrictions_Set() const{
    return m_cabin_restrictions_isSet;
}

bool OAIFlightFiltersLight::is_cabin_restrictions_Valid() const{
    return m_cabin_restrictions_isValid;
}

OAICarrierRestrictions OAIFlightFiltersLight::getCarrierRestrictions() const {
    return m_carrier_restrictions;
}
void OAIFlightFiltersLight::setCarrierRestrictions(const OAICarrierRestrictions &carrier_restrictions) {
    m_carrier_restrictions = carrier_restrictions;
    m_carrier_restrictions_isSet = true;
}

bool OAIFlightFiltersLight::is_carrier_restrictions_Set() const{
    return m_carrier_restrictions_isSet;
}

bool OAIFlightFiltersLight::is_carrier_restrictions_Valid() const{
    return m_carrier_restrictions_isValid;
}

OAIConnectionRestriction OAIFlightFiltersLight::getConnectionRestriction() const {
    return m_connection_restriction;
}
void OAIFlightFiltersLight::setConnectionRestriction(const OAIConnectionRestriction &connection_restriction) {
    m_connection_restriction = connection_restriction;
    m_connection_restriction_isSet = true;
}

bool OAIFlightFiltersLight::is_connection_restriction_Set() const{
    return m_connection_restriction_isSet;
}

bool OAIFlightFiltersLight::is_connection_restriction_Valid() const{
    return m_connection_restriction_isValid;
}

bool OAIFlightFiltersLight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cabin_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightFiltersLight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
