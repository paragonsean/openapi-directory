/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtended_Segment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtended_Segment::OAIExtended_Segment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtended_Segment::OAIExtended_Segment() {
    this->initializeModel();
}

OAIExtended_Segment::~OAIExtended_Segment() {}

void OAIExtended_Segment::initializeModel() {

    m_blacklisted_in_eu_isSet = false;
    m_blacklisted_in_eu_isValid = false;

    m_co2_emissions_isSet = false;
    m_co2_emissions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_of_stops_isSet = false;
    m_number_of_stops_isValid = false;

    m_aircraft_isSet = false;
    m_aircraft_isValid = false;

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_operating_isSet = false;
    m_operating_isValid = false;

    m_stops_isSet = false;
    m_stops_isValid = false;

    m_availability_classes_isSet = false;
    m_availability_classes_isValid = false;

    m_closed_status_isSet = false;
    m_closed_status_isValid = false;
}

void OAIExtended_Segment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtended_Segment::fromJsonObject(QJsonObject json) {

    m_blacklisted_in_eu_isValid = ::OpenAPI::fromJsonValue(m_blacklisted_in_eu, json[QString("blacklistedInEU")]);
    m_blacklisted_in_eu_isSet = !json[QString("blacklistedInEU")].isNull() && m_blacklisted_in_eu_isValid;

    m_co2_emissions_isValid = ::OpenAPI::fromJsonValue(m_co2_emissions, json[QString("co2Emissions")]);
    m_co2_emissions_isSet = !json[QString("co2Emissions")].isNull() && m_co2_emissions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_of_stops_isValid = ::OpenAPI::fromJsonValue(m_number_of_stops, json[QString("numberOfStops")]);
    m_number_of_stops_isSet = !json[QString("numberOfStops")].isNull() && m_number_of_stops_isValid;

    m_aircraft_isValid = ::OpenAPI::fromJsonValue(m_aircraft, json[QString("aircraft")]);
    m_aircraft_isSet = !json[QString("aircraft")].isNull() && m_aircraft_isValid;

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrierCode")]);
    m_carrier_code_isSet = !json[QString("carrierCode")].isNull() && m_carrier_code_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_operating_isValid = ::OpenAPI::fromJsonValue(m_operating, json[QString("operating")]);
    m_operating_isSet = !json[QString("operating")].isNull() && m_operating_isValid;

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("stops")]);
    m_stops_isSet = !json[QString("stops")].isNull() && m_stops_isValid;

    m_availability_classes_isValid = ::OpenAPI::fromJsonValue(m_availability_classes, json[QString("availabilityClasses")]);
    m_availability_classes_isSet = !json[QString("availabilityClasses")].isNull() && m_availability_classes_isValid;

    m_closed_status_isValid = ::OpenAPI::fromJsonValue(m_closed_status, json[QString("closedStatus")]);
    m_closed_status_isSet = !json[QString("closedStatus")].isNull() && m_closed_status_isValid;
}

QString OAIExtended_Segment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtended_Segment::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklisted_in_eu_isSet) {
        obj.insert(QString("blacklistedInEU"), ::OpenAPI::toJsonValue(m_blacklisted_in_eu));
    }
    if (m_co2_emissions.size() > 0) {
        obj.insert(QString("co2Emissions"), ::OpenAPI::toJsonValue(m_co2_emissions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_of_stops_isSet) {
        obj.insert(QString("numberOfStops"), ::OpenAPI::toJsonValue(m_number_of_stops));
    }
    if (m_aircraft.isSet()) {
        obj.insert(QString("aircraft"), ::OpenAPI::toJsonValue(m_aircraft));
    }
    if (m_arrival.isSet()) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrierCode"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_departure.isSet()) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_operating.isSet()) {
        obj.insert(QString("operating"), ::OpenAPI::toJsonValue(m_operating));
    }
    if (m_stops.size() > 0) {
        obj.insert(QString("stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    if (m_availability_classes.size() > 0) {
        obj.insert(QString("availabilityClasses"), ::OpenAPI::toJsonValue(m_availability_classes));
    }
    if (m_closed_status_isSet) {
        obj.insert(QString("closedStatus"), ::OpenAPI::toJsonValue(m_closed_status));
    }
    return obj;
}

bool OAIExtended_Segment::isBlacklistedInEu() const {
    return m_blacklisted_in_eu;
}
void OAIExtended_Segment::setBlacklistedInEu(const bool &blacklisted_in_eu) {
    m_blacklisted_in_eu = blacklisted_in_eu;
    m_blacklisted_in_eu_isSet = true;
}

bool OAIExtended_Segment::is_blacklisted_in_eu_Set() const{
    return m_blacklisted_in_eu_isSet;
}

bool OAIExtended_Segment::is_blacklisted_in_eu_Valid() const{
    return m_blacklisted_in_eu_isValid;
}

QList<OAICo2Emission> OAIExtended_Segment::getCo2Emissions() const {
    return m_co2_emissions;
}
void OAIExtended_Segment::setCo2Emissions(const QList<OAICo2Emission> &co2_emissions) {
    m_co2_emissions = co2_emissions;
    m_co2_emissions_isSet = true;
}

bool OAIExtended_Segment::is_co2_emissions_Set() const{
    return m_co2_emissions_isSet;
}

bool OAIExtended_Segment::is_co2_emissions_Valid() const{
    return m_co2_emissions_isValid;
}

QString OAIExtended_Segment::getId() const {
    return m_id;
}
void OAIExtended_Segment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExtended_Segment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExtended_Segment::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIExtended_Segment::getNumberOfStops() const {
    return m_number_of_stops;
}
void OAIExtended_Segment::setNumberOfStops(const qint32 &number_of_stops) {
    m_number_of_stops = number_of_stops;
    m_number_of_stops_isSet = true;
}

bool OAIExtended_Segment::is_number_of_stops_Set() const{
    return m_number_of_stops_isSet;
}

bool OAIExtended_Segment::is_number_of_stops_Valid() const{
    return m_number_of_stops_isValid;
}

OAIAircraftEquipment OAIExtended_Segment::getAircraft() const {
    return m_aircraft;
}
void OAIExtended_Segment::setAircraft(const OAIAircraftEquipment &aircraft) {
    m_aircraft = aircraft;
    m_aircraft_isSet = true;
}

bool OAIExtended_Segment::is_aircraft_Set() const{
    return m_aircraft_isSet;
}

bool OAIExtended_Segment::is_aircraft_Valid() const{
    return m_aircraft_isValid;
}

OAIFlightEndPoint OAIExtended_Segment::getArrival() const {
    return m_arrival;
}
void OAIExtended_Segment::setArrival(const OAIFlightEndPoint &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAIExtended_Segment::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAIExtended_Segment::is_arrival_Valid() const{
    return m_arrival_isValid;
}

QString OAIExtended_Segment::getCarrierCode() const {
    return m_carrier_code;
}
void OAIExtended_Segment::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAIExtended_Segment::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAIExtended_Segment::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

OAIFlightEndPoint OAIExtended_Segment::getDeparture() const {
    return m_departure;
}
void OAIExtended_Segment::setDeparture(const OAIFlightEndPoint &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAIExtended_Segment::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAIExtended_Segment::is_departure_Valid() const{
    return m_departure_isValid;
}

QString OAIExtended_Segment::getDuration() const {
    return m_duration;
}
void OAIExtended_Segment::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIExtended_Segment::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIExtended_Segment::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIExtended_Segment::getNumber() const {
    return m_number;
}
void OAIExtended_Segment::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIExtended_Segment::is_number_Set() const{
    return m_number_isSet;
}

bool OAIExtended_Segment::is_number_Valid() const{
    return m_number_isValid;
}

OAIOperatingFlight OAIExtended_Segment::getOperating() const {
    return m_operating;
}
void OAIExtended_Segment::setOperating(const OAIOperatingFlight &operating) {
    m_operating = operating;
    m_operating_isSet = true;
}

bool OAIExtended_Segment::is_operating_Set() const{
    return m_operating_isSet;
}

bool OAIExtended_Segment::is_operating_Valid() const{
    return m_operating_isValid;
}

QList<OAIFlightStop> OAIExtended_Segment::getStops() const {
    return m_stops;
}
void OAIExtended_Segment::setStops(const QList<OAIFlightStop> &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAIExtended_Segment::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAIExtended_Segment::is_stops_Valid() const{
    return m_stops_isValid;
}

QList<OAIAvailabilityClass> OAIExtended_Segment::getAvailabilityClasses() const {
    return m_availability_classes;
}
void OAIExtended_Segment::setAvailabilityClasses(const QList<OAIAvailabilityClass> &availability_classes) {
    m_availability_classes = availability_classes;
    m_availability_classes_isSet = true;
}

bool OAIExtended_Segment::is_availability_classes_Set() const{
    return m_availability_classes_isSet;
}

bool OAIExtended_Segment::is_availability_classes_Valid() const{
    return m_availability_classes_isValid;
}

QString OAIExtended_Segment::getClosedStatus() const {
    return m_closed_status;
}
void OAIExtended_Segment::setClosedStatus(const QString &closed_status) {
    m_closed_status = closed_status;
    m_closed_status_isSet = true;
}

bool OAIExtended_Segment::is_closed_status_Set() const{
    return m_closed_status_isSet;
}

bool OAIExtended_Segment::is_closed_status_Valid() const{
    return m_closed_status_isValid;
}

bool OAIExtended_Segment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklisted_in_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_emissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_stops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aircraft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtended_Segment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
