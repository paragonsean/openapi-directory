/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightAvailability::OAIFlightAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightAvailability::OAIFlightAvailability() {
    this->initializeModel();
}

OAIFlightAvailability::~OAIFlightAvailability() {}

void OAIFlightAvailability::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instant_ticketing_required_isSet = false;
    m_instant_ticketing_required_isValid = false;

    m_origin_destination_id_isSet = false;
    m_origin_destination_id_isValid = false;

    m_payment_card_required_isSet = false;
    m_payment_card_required_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlightAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightAvailability::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instant_ticketing_required_isValid = ::OpenAPI::fromJsonValue(m_instant_ticketing_required, json[QString("instantTicketingRequired")]);
    m_instant_ticketing_required_isSet = !json[QString("instantTicketingRequired")].isNull() && m_instant_ticketing_required_isValid;

    m_origin_destination_id_isValid = ::OpenAPI::fromJsonValue(m_origin_destination_id, json[QString("originDestinationId")]);
    m_origin_destination_id_isSet = !json[QString("originDestinationId")].isNull() && m_origin_destination_id_isValid;

    m_payment_card_required_isValid = ::OpenAPI::fromJsonValue(m_payment_card_required, json[QString("paymentCardRequired")]);
    m_payment_card_required_isSet = !json[QString("paymentCardRequired")].isNull() && m_payment_card_required_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlightAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instant_ticketing_required_isSet) {
        obj.insert(QString("instantTicketingRequired"), ::OpenAPI::toJsonValue(m_instant_ticketing_required));
    }
    if (m_origin_destination_id_isSet) {
        obj.insert(QString("originDestinationId"), ::OpenAPI::toJsonValue(m_origin_destination_id));
    }
    if (m_payment_card_required_isSet) {
        obj.insert(QString("paymentCardRequired"), ::OpenAPI::toJsonValue(m_payment_card_required));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFlightAvailability::getDuration() const {
    return m_duration;
}
void OAIFlightAvailability::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIFlightAvailability::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIFlightAvailability::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIFlightAvailability::getId() const {
    return m_id;
}
void OAIFlightAvailability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlightAvailability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlightAvailability::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFlightAvailability::isInstantTicketingRequired() const {
    return m_instant_ticketing_required;
}
void OAIFlightAvailability::setInstantTicketingRequired(const bool &instant_ticketing_required) {
    m_instant_ticketing_required = instant_ticketing_required;
    m_instant_ticketing_required_isSet = true;
}

bool OAIFlightAvailability::is_instant_ticketing_required_Set() const{
    return m_instant_ticketing_required_isSet;
}

bool OAIFlightAvailability::is_instant_ticketing_required_Valid() const{
    return m_instant_ticketing_required_isValid;
}

QString OAIFlightAvailability::getOriginDestinationId() const {
    return m_origin_destination_id;
}
void OAIFlightAvailability::setOriginDestinationId(const QString &origin_destination_id) {
    m_origin_destination_id = origin_destination_id;
    m_origin_destination_id_isSet = true;
}

bool OAIFlightAvailability::is_origin_destination_id_Set() const{
    return m_origin_destination_id_isSet;
}

bool OAIFlightAvailability::is_origin_destination_id_Valid() const{
    return m_origin_destination_id_isValid;
}

bool OAIFlightAvailability::isPaymentCardRequired() const {
    return m_payment_card_required;
}
void OAIFlightAvailability::setPaymentCardRequired(const bool &payment_card_required) {
    m_payment_card_required = payment_card_required;
    m_payment_card_required_isSet = true;
}

bool OAIFlightAvailability::is_payment_card_required_Set() const{
    return m_payment_card_required_isSet;
}

bool OAIFlightAvailability::is_payment_card_required_Valid() const{
    return m_payment_card_required_isValid;
}

QList<OAIExtended_Segment> OAIFlightAvailability::getSegments() const {
    return m_segments;
}
void OAIFlightAvailability::setSegments(const QList<OAIExtended_Segment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIFlightAvailability::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIFlightAvailability::is_segments_Valid() const{
    return m_segments_isValid;
}

OAIFlightOfferSource OAIFlightAvailability::getSource() const {
    return m_source;
}
void OAIFlightAvailability::setSource(const OAIFlightOfferSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIFlightAvailability::is_source_Set() const{
    return m_source_isSet;
}

bool OAIFlightAvailability::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIFlightAvailability::getType() const {
    return m_type;
}
void OAIFlightAvailability::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlightAvailability::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlightAvailability::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlightAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instant_ticketing_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_card_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_segments_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
