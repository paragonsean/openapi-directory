/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarrierRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarrierRestrictions::OAICarrierRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarrierRestrictions::OAICarrierRestrictions() {
    this->initializeModel();
}

OAICarrierRestrictions::~OAICarrierRestrictions() {}

void OAICarrierRestrictions::initializeModel() {

    m_blacklisted_in_eu_allowed_isSet = false;
    m_blacklisted_in_eu_allowed_isValid = false;

    m_excluded_carrier_codes_isSet = false;
    m_excluded_carrier_codes_isValid = false;

    m_included_carrier_codes_isSet = false;
    m_included_carrier_codes_isValid = false;
}

void OAICarrierRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarrierRestrictions::fromJsonObject(QJsonObject json) {

    m_blacklisted_in_eu_allowed_isValid = ::OpenAPI::fromJsonValue(m_blacklisted_in_eu_allowed, json[QString("blacklistedInEUAllowed")]);
    m_blacklisted_in_eu_allowed_isSet = !json[QString("blacklistedInEUAllowed")].isNull() && m_blacklisted_in_eu_allowed_isValid;

    m_excluded_carrier_codes_isValid = ::OpenAPI::fromJsonValue(m_excluded_carrier_codes, json[QString("excludedCarrierCodes")]);
    m_excluded_carrier_codes_isSet = !json[QString("excludedCarrierCodes")].isNull() && m_excluded_carrier_codes_isValid;

    m_included_carrier_codes_isValid = ::OpenAPI::fromJsonValue(m_included_carrier_codes, json[QString("includedCarrierCodes")]);
    m_included_carrier_codes_isSet = !json[QString("includedCarrierCodes")].isNull() && m_included_carrier_codes_isValid;
}

QString OAICarrierRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarrierRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklisted_in_eu_allowed_isSet) {
        obj.insert(QString("blacklistedInEUAllowed"), ::OpenAPI::toJsonValue(m_blacklisted_in_eu_allowed));
    }
    if (m_excluded_carrier_codes.size() > 0) {
        obj.insert(QString("excludedCarrierCodes"), ::OpenAPI::toJsonValue(m_excluded_carrier_codes));
    }
    if (m_included_carrier_codes.size() > 0) {
        obj.insert(QString("includedCarrierCodes"), ::OpenAPI::toJsonValue(m_included_carrier_codes));
    }
    return obj;
}

bool OAICarrierRestrictions::isBlacklistedInEuAllowed() const {
    return m_blacklisted_in_eu_allowed;
}
void OAICarrierRestrictions::setBlacklistedInEuAllowed(const bool &blacklisted_in_eu_allowed) {
    m_blacklisted_in_eu_allowed = blacklisted_in_eu_allowed;
    m_blacklisted_in_eu_allowed_isSet = true;
}

bool OAICarrierRestrictions::is_blacklisted_in_eu_allowed_Set() const{
    return m_blacklisted_in_eu_allowed_isSet;
}

bool OAICarrierRestrictions::is_blacklisted_in_eu_allowed_Valid() const{
    return m_blacklisted_in_eu_allowed_isValid;
}

QList<QString> OAICarrierRestrictions::getExcludedCarrierCodes() const {
    return m_excluded_carrier_codes;
}
void OAICarrierRestrictions::setExcludedCarrierCodes(const QList<QString> &excluded_carrier_codes) {
    m_excluded_carrier_codes = excluded_carrier_codes;
    m_excluded_carrier_codes_isSet = true;
}

bool OAICarrierRestrictions::is_excluded_carrier_codes_Set() const{
    return m_excluded_carrier_codes_isSet;
}

bool OAICarrierRestrictions::is_excluded_carrier_codes_Valid() const{
    return m_excluded_carrier_codes_isValid;
}

QList<QString> OAICarrierRestrictions::getIncludedCarrierCodes() const {
    return m_included_carrier_codes;
}
void OAICarrierRestrictions::setIncludedCarrierCodes(const QList<QString> &included_carrier_codes) {
    m_included_carrier_codes = included_carrier_codes;
    m_included_carrier_codes_isSet = true;
}

bool OAICarrierRestrictions::is_included_carrier_codes_Set() const{
    return m_included_carrier_codes_isSet;
}

bool OAICarrierRestrictions::is_included_carrier_codes_Valid() const{
    return m_included_carrier_codes_isValid;
}

bool OAICarrierRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklisted_in_eu_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_carrier_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_carrier_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarrierRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
