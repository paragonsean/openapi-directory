/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExtended_Segment.h
 *
 * 
 */

#ifndef OAIExtended_Segment_H
#define OAIExtended_Segment_H

#include <QJsonObject>

#include "OAIAircraftEquipment.h"
#include "OAIAvailabilityClass.h"
#include "OAICo2Emission.h"
#include "OAIFlightEndPoint.h"
#include "OAIFlightStop.h"
#include "OAIOperatingFlight.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICo2Emission;
class OAIAircraftEquipment;
class OAIFlightEndPoint;
class OAIOperatingFlight;
class OAIFlightStop;
class OAIAvailabilityClass;

class OAIExtended_Segment : public OAIObject {
public:
    OAIExtended_Segment();
    OAIExtended_Segment(QString json);
    ~OAIExtended_Segment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBlacklistedInEu() const;
    void setBlacklistedInEu(const bool &blacklisted_in_eu);
    bool is_blacklisted_in_eu_Set() const;
    bool is_blacklisted_in_eu_Valid() const;

    QList<OAICo2Emission> getCo2Emissions() const;
    void setCo2Emissions(const QList<OAICo2Emission> &co2_emissions);
    bool is_co2_emissions_Set() const;
    bool is_co2_emissions_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getNumberOfStops() const;
    void setNumberOfStops(const qint32 &number_of_stops);
    bool is_number_of_stops_Set() const;
    bool is_number_of_stops_Valid() const;

    OAIAircraftEquipment getAircraft() const;
    void setAircraft(const OAIAircraftEquipment &aircraft);
    bool is_aircraft_Set() const;
    bool is_aircraft_Valid() const;

    OAIFlightEndPoint getArrival() const;
    void setArrival(const OAIFlightEndPoint &arrival);
    bool is_arrival_Set() const;
    bool is_arrival_Valid() const;

    QString getCarrierCode() const;
    void setCarrierCode(const QString &carrier_code);
    bool is_carrier_code_Set() const;
    bool is_carrier_code_Valid() const;

    OAIFlightEndPoint getDeparture() const;
    void setDeparture(const OAIFlightEndPoint &departure);
    bool is_departure_Set() const;
    bool is_departure_Valid() const;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    OAIOperatingFlight getOperating() const;
    void setOperating(const OAIOperatingFlight &operating);
    bool is_operating_Set() const;
    bool is_operating_Valid() const;

    QList<OAIFlightStop> getStops() const;
    void setStops(const QList<OAIFlightStop> &stops);
    bool is_stops_Set() const;
    bool is_stops_Valid() const;

    QList<OAIAvailabilityClass> getAvailabilityClasses() const;
    void setAvailabilityClasses(const QList<OAIAvailabilityClass> &availability_classes);
    bool is_availability_classes_Set() const;
    bool is_availability_classes_Valid() const;

    QString getClosedStatus() const;
    void setClosedStatus(const QString &closed_status);
    bool is_closed_status_Set() const;
    bool is_closed_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_blacklisted_in_eu;
    bool m_blacklisted_in_eu_isSet;
    bool m_blacklisted_in_eu_isValid;

    QList<OAICo2Emission> m_co2_emissions;
    bool m_co2_emissions_isSet;
    bool m_co2_emissions_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_number_of_stops;
    bool m_number_of_stops_isSet;
    bool m_number_of_stops_isValid;

    OAIAircraftEquipment m_aircraft;
    bool m_aircraft_isSet;
    bool m_aircraft_isValid;

    OAIFlightEndPoint m_arrival;
    bool m_arrival_isSet;
    bool m_arrival_isValid;

    QString m_carrier_code;
    bool m_carrier_code_isSet;
    bool m_carrier_code_isValid;

    OAIFlightEndPoint m_departure;
    bool m_departure_isSet;
    bool m_departure_isValid;

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    OAIOperatingFlight m_operating;
    bool m_operating_isSet;
    bool m_operating_isValid;

    QList<OAIFlightStop> m_stops;
    bool m_stops_isSet;
    bool m_stops_isValid;

    QList<OAIAvailabilityClass> m_availability_classes;
    bool m_availability_classes_isSet;
    bool m_availability_classes_isValid;

    QString m_closed_status;
    bool m_closed_status_isSet;
    bool m_closed_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExtended_Segment)

#endif // OAIExtended_Segment_H
