/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionRestriction::OAIConnectionRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionRestriction::OAIConnectionRestriction() {
    this->initializeModel();
}

OAIConnectionRestriction::~OAIConnectionRestriction() {}

void OAIConnectionRestriction::initializeModel() {

    m_airport_change_allowed_isSet = false;
    m_airport_change_allowed_isValid = false;

    m_max_number_of_connections_isSet = false;
    m_max_number_of_connections_isValid = false;

    m_technical_stops_allowed_isSet = false;
    m_technical_stops_allowed_isValid = false;
}

void OAIConnectionRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionRestriction::fromJsonObject(QJsonObject json) {

    m_airport_change_allowed_isValid = ::OpenAPI::fromJsonValue(m_airport_change_allowed, json[QString("airportChangeAllowed")]);
    m_airport_change_allowed_isSet = !json[QString("airportChangeAllowed")].isNull() && m_airport_change_allowed_isValid;

    m_max_number_of_connections_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_connections, json[QString("maxNumberOfConnections")]);
    m_max_number_of_connections_isSet = !json[QString("maxNumberOfConnections")].isNull() && m_max_number_of_connections_isValid;

    m_technical_stops_allowed_isValid = ::OpenAPI::fromJsonValue(m_technical_stops_allowed, json[QString("technicalStopsAllowed")]);
    m_technical_stops_allowed_isSet = !json[QString("technicalStopsAllowed")].isNull() && m_technical_stops_allowed_isValid;
}

QString OAIConnectionRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_change_allowed_isSet) {
        obj.insert(QString("airportChangeAllowed"), ::OpenAPI::toJsonValue(m_airport_change_allowed));
    }
    if (m_max_number_of_connections_isSet) {
        obj.insert(QString("maxNumberOfConnections"), ::OpenAPI::toJsonValue(m_max_number_of_connections));
    }
    if (m_technical_stops_allowed_isSet) {
        obj.insert(QString("technicalStopsAllowed"), ::OpenAPI::toJsonValue(m_technical_stops_allowed));
    }
    return obj;
}

bool OAIConnectionRestriction::isAirportChangeAllowed() const {
    return m_airport_change_allowed;
}
void OAIConnectionRestriction::setAirportChangeAllowed(const bool &airport_change_allowed) {
    m_airport_change_allowed = airport_change_allowed;
    m_airport_change_allowed_isSet = true;
}

bool OAIConnectionRestriction::is_airport_change_allowed_Set() const{
    return m_airport_change_allowed_isSet;
}

bool OAIConnectionRestriction::is_airport_change_allowed_Valid() const{
    return m_airport_change_allowed_isValid;
}

double OAIConnectionRestriction::getMaxNumberOfConnections() const {
    return m_max_number_of_connections;
}
void OAIConnectionRestriction::setMaxNumberOfConnections(const double &max_number_of_connections) {
    m_max_number_of_connections = max_number_of_connections;
    m_max_number_of_connections_isSet = true;
}

bool OAIConnectionRestriction::is_max_number_of_connections_Set() const{
    return m_max_number_of_connections_isSet;
}

bool OAIConnectionRestriction::is_max_number_of_connections_Valid() const{
    return m_max_number_of_connections_isValid;
}

bool OAIConnectionRestriction::isTechnicalStopsAllowed() const {
    return m_technical_stops_allowed;
}
void OAIConnectionRestriction::setTechnicalStopsAllowed(const bool &technical_stops_allowed) {
    m_technical_stops_allowed = technical_stops_allowed;
    m_technical_stops_allowed_isSet = true;
}

bool OAIConnectionRestriction::is_technical_stops_allowed_Set() const{
    return m_technical_stops_allowed_isSet;
}

bool OAIConnectionRestriction::is_technical_stops_allowed_Valid() const{
    return m_technical_stops_allowed_isValid;
}

bool OAIConnectionRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_change_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technical_stops_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
