/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICabinRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICabinRestriction::OAICabinRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICabinRestriction::OAICabinRestriction() {
    this->initializeModel();
}

OAICabinRestriction::~OAICabinRestriction() {}

void OAICabinRestriction::initializeModel() {

    m_cabin_isSet = false;
    m_cabin_isValid = false;

    m_origin_destination_ids_isSet = false;
    m_origin_destination_ids_isValid = false;
}

void OAICabinRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICabinRestriction::fromJsonObject(QJsonObject json) {

    m_cabin_isValid = ::OpenAPI::fromJsonValue(m_cabin, json[QString("cabin")]);
    m_cabin_isSet = !json[QString("cabin")].isNull() && m_cabin_isValid;

    m_origin_destination_ids_isValid = ::OpenAPI::fromJsonValue(m_origin_destination_ids, json[QString("originDestinationIds")]);
    m_origin_destination_ids_isSet = !json[QString("originDestinationIds")].isNull() && m_origin_destination_ids_isValid;
}

QString OAICabinRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICabinRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_cabin.isSet()) {
        obj.insert(QString("cabin"), ::OpenAPI::toJsonValue(m_cabin));
    }
    if (m_origin_destination_ids.size() > 0) {
        obj.insert(QString("originDestinationIds"), ::OpenAPI::toJsonValue(m_origin_destination_ids));
    }
    return obj;
}

OAITravelClass OAICabinRestriction::getCabin() const {
    return m_cabin;
}
void OAICabinRestriction::setCabin(const OAITravelClass &cabin) {
    m_cabin = cabin;
    m_cabin_isSet = true;
}

bool OAICabinRestriction::is_cabin_Set() const{
    return m_cabin_isSet;
}

bool OAICabinRestriction::is_cabin_Valid() const{
    return m_cabin_isValid;
}

QList<QString> OAICabinRestriction::getOriginDestinationIds() const {
    return m_origin_destination_ids;
}
void OAICabinRestriction::setOriginDestinationIds(const QList<QString> &origin_destination_ids) {
    m_origin_destination_ids = origin_destination_ids;
    m_origin_destination_ids_isSet = true;
}

bool OAICabinRestriction::is_origin_destination_ids_Set() const{
    return m_origin_destination_ids_isSet;
}

bool OAICabinRestriction::is_origin_destination_ids_Valid() const{
    return m_origin_destination_ids_isValid;
}

bool OAICabinRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cabin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_destination_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICabinRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
