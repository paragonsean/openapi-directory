/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITourAllotment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITourAllotment::OAITourAllotment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITourAllotment::OAITourAllotment() {
    this->initializeModel();
}

OAITourAllotment::~OAITourAllotment() {}

void OAITourAllotment::initializeModel() {

    m_tour_name_isSet = false;
    m_tour_name_isValid = false;

    m_tour_reference_isSet = false;
    m_tour_reference_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_remaining_seats_isSet = false;
    m_remaining_seats_isValid = false;
}

void OAITourAllotment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITourAllotment::fromJsonObject(QJsonObject json) {

    m_tour_name_isValid = ::OpenAPI::fromJsonValue(m_tour_name, json[QString("tourName")]);
    m_tour_name_isSet = !json[QString("tourName")].isNull() && m_tour_name_isValid;

    m_tour_reference_isValid = ::OpenAPI::fromJsonValue(m_tour_reference, json[QString("tourReference")]);
    m_tour_reference_isSet = !json[QString("tourReference")].isNull() && m_tour_reference_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_remaining_seats_isValid = ::OpenAPI::fromJsonValue(m_remaining_seats, json[QString("remainingSeats")]);
    m_remaining_seats_isSet = !json[QString("remainingSeats")].isNull() && m_remaining_seats_isValid;
}

QString OAITourAllotment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITourAllotment::asJsonObject() const {
    QJsonObject obj;
    if (m_tour_name_isSet) {
        obj.insert(QString("tourName"), ::OpenAPI::toJsonValue(m_tour_name));
    }
    if (m_tour_reference_isSet) {
        obj.insert(QString("tourReference"), ::OpenAPI::toJsonValue(m_tour_reference));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_remaining_seats_isSet) {
        obj.insert(QString("remainingSeats"), ::OpenAPI::toJsonValue(m_remaining_seats));
    }
    return obj;
}

QString OAITourAllotment::getTourName() const {
    return m_tour_name;
}
void OAITourAllotment::setTourName(const QString &tour_name) {
    m_tour_name = tour_name;
    m_tour_name_isSet = true;
}

bool OAITourAllotment::is_tour_name_Set() const{
    return m_tour_name_isSet;
}

bool OAITourAllotment::is_tour_name_Valid() const{
    return m_tour_name_isValid;
}

QString OAITourAllotment::getTourReference() const {
    return m_tour_reference;
}
void OAITourAllotment::setTourReference(const QString &tour_reference) {
    m_tour_reference = tour_reference;
    m_tour_reference_isSet = true;
}

bool OAITourAllotment::is_tour_reference_Set() const{
    return m_tour_reference_isSet;
}

bool OAITourAllotment::is_tour_reference_Valid() const{
    return m_tour_reference_isValid;
}

QString OAITourAllotment::getMode() const {
    return m_mode;
}
void OAITourAllotment::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITourAllotment::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITourAllotment::is_mode_Valid() const{
    return m_mode_isValid;
}

double OAITourAllotment::getRemainingSeats() const {
    return m_remaining_seats;
}
void OAITourAllotment::setRemainingSeats(const double &remaining_seats) {
    m_remaining_seats = remaining_seats;
    m_remaining_seats_isSet = true;
}

bool OAITourAllotment::is_remaining_seats_Set() const{
    return m_remaining_seats_isSet;
}

bool OAITourAllotment::is_remaining_seats_Valid() const{
    return m_remaining_seats_isValid;
}

bool OAITourAllotment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tour_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tour_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_seats_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITourAllotment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
