/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtended_SearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtended_SearchCriteria::OAIExtended_SearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtended_SearchCriteria::OAIExtended_SearchCriteria() {
    this->initializeModel();
}

OAIExtended_SearchCriteria::~OAIExtended_SearchCriteria() {}

void OAIExtended_SearchCriteria::initializeModel() {

    m_exclude_allotments_isSet = false;
    m_exclude_allotments_isValid = false;

    m_flight_filters_isSet = false;
    m_flight_filters_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_include_closed_content_isSet = false;
    m_include_closed_content_isValid = false;
}

void OAIExtended_SearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtended_SearchCriteria::fromJsonObject(QJsonObject json) {

    m_exclude_allotments_isValid = ::OpenAPI::fromJsonValue(m_exclude_allotments, json[QString("excludeAllotments")]);
    m_exclude_allotments_isSet = !json[QString("excludeAllotments")].isNull() && m_exclude_allotments_isValid;

    m_flight_filters_isValid = ::OpenAPI::fromJsonValue(m_flight_filters, json[QString("flightFilters")]);
    m_flight_filters_isSet = !json[QString("flightFilters")].isNull() && m_flight_filters_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_include_closed_content_isValid = ::OpenAPI::fromJsonValue(m_include_closed_content, json[QString("includeClosedContent")]);
    m_include_closed_content_isSet = !json[QString("includeClosedContent")].isNull() && m_include_closed_content_isValid;
}

QString OAIExtended_SearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtended_SearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_allotments_isSet) {
        obj.insert(QString("excludeAllotments"), ::OpenAPI::toJsonValue(m_exclude_allotments));
    }
    if (m_flight_filters.isSet()) {
        obj.insert(QString("flightFilters"), ::OpenAPI::toJsonValue(m_flight_filters));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_include_closed_content_isSet) {
        obj.insert(QString("includeClosedContent"), ::OpenAPI::toJsonValue(m_include_closed_content));
    }
    return obj;
}

bool OAIExtended_SearchCriteria::isExcludeAllotments() const {
    return m_exclude_allotments;
}
void OAIExtended_SearchCriteria::setExcludeAllotments(const bool &exclude_allotments) {
    m_exclude_allotments = exclude_allotments;
    m_exclude_allotments_isSet = true;
}

bool OAIExtended_SearchCriteria::is_exclude_allotments_Set() const{
    return m_exclude_allotments_isSet;
}

bool OAIExtended_SearchCriteria::is_exclude_allotments_Valid() const{
    return m_exclude_allotments_isValid;
}

OAIFlightFiltersLight OAIExtended_SearchCriteria::getFlightFilters() const {
    return m_flight_filters;
}
void OAIExtended_SearchCriteria::setFlightFilters(const OAIFlightFiltersLight &flight_filters) {
    m_flight_filters = flight_filters;
    m_flight_filters_isSet = true;
}

bool OAIExtended_SearchCriteria::is_flight_filters_Set() const{
    return m_flight_filters_isSet;
}

bool OAIExtended_SearchCriteria::is_flight_filters_Valid() const{
    return m_flight_filters_isValid;
}

QString OAIExtended_SearchCriteria::getRClass() const {
    return m_r_class;
}
void OAIExtended_SearchCriteria::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIExtended_SearchCriteria::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIExtended_SearchCriteria::is_r_class_Valid() const{
    return m_r_class_isValid;
}

bool OAIExtended_SearchCriteria::isIncludeClosedContent() const {
    return m_include_closed_content;
}
void OAIExtended_SearchCriteria::setIncludeClosedContent(const bool &include_closed_content) {
    m_include_closed_content = include_closed_content;
    m_include_closed_content_isSet = true;
}

bool OAIExtended_SearchCriteria::is_include_closed_content_Set() const{
    return m_include_closed_content_isSet;
}

bool OAIExtended_SearchCriteria::is_include_closed_content_Valid() const{
    return m_include_closed_content_isValid;
}

bool OAIExtended_SearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_allotments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_closed_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtended_SearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
