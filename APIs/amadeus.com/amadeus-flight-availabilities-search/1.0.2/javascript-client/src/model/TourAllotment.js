/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllotmentDetails from './AllotmentDetails';

/**
 * The TourAllotment model module.
 * @module model/TourAllotment
 * @version 1.0.2
 */
class TourAllotment {
    /**
     * Constructs a new <code>TourAllotment</code>.
     * @alias module:model/TourAllotment
     * @implements module:model/AllotmentDetails
     */
    constructor() { 
        AllotmentDetails.initialize(this);
        TourAllotment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TourAllotment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TourAllotment} obj Optional instance to populate.
     * @return {module:model/TourAllotment} The populated <code>TourAllotment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TourAllotment();
            AllotmentDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('tourName')) {
                obj['tourName'] = ApiClient.convertToType(data['tourName'], 'String');
            }
            if (data.hasOwnProperty('tourReference')) {
                obj['tourReference'] = ApiClient.convertToType(data['tourReference'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('remainingSeats')) {
                obj['remainingSeats'] = ApiClient.convertToType(data['remainingSeats'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TourAllotment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TourAllotment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tourName'] && !(typeof data['tourName'] === 'string' || data['tourName'] instanceof String)) {
            throw new Error("Expected the field `tourName` to be a primitive type in the JSON string but got " + data['tourName']);
        }
        // ensure the json data is a string
        if (data['tourReference'] && !(typeof data['tourReference'] === 'string' || data['tourReference'] instanceof String)) {
            throw new Error("Expected the field `tourReference` to be a primitive type in the JSON string but got " + data['tourReference']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * The tour name agreed for this specific allotment.
 * @member {String} tourName
 */
TourAllotment.prototype['tourName'] = undefined;

/**
 * The tour reference agreed for this specific allotment.
 * @member {String} tourReference
 */
TourAllotment.prototype['tourReference'] = undefined;

/**
 * How the allotment can be booked by the Travel Agency.
 * @member {module:model/TourAllotment.ModeEnum} mode
 */
TourAllotment.prototype['mode'] = undefined;

/**
 * Number of remaining seats in the allotment.
 * @member {Number} remainingSeats
 */
TourAllotment.prototype['remainingSeats'] = undefined;


// Implement AllotmentDetails interface:
/**
 * The tour name agreed for this specific allotment.
 * @member {String} tourName
 */
AllotmentDetails.prototype['tourName'] = undefined;
/**
 * The tour reference agreed for this specific allotment.
 * @member {String} tourReference
 */
AllotmentDetails.prototype['tourReference'] = undefined;



/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
TourAllotment['ModeEnum'] = {

    /**
     * value: "FREE"
     * @const
     */
    "FREE": "FREE",

    /**
     * value: "FORCED"
     * @const
     */
    "FORCED": "FORCED"
};



export default TourAllotment;

