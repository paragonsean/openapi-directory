/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AircraftEquipment from './AircraftEquipment';
import AvailabilityClass from './AvailabilityClass';
import Co2Emission from './Co2Emission';
import FlightEndPoint from './FlightEndPoint';
import FlightStop from './FlightStop';
import OperatingFlight from './OperatingFlight';
import Segment from './Segment';

/**
 * The ExtendedSegment model module.
 * @module model/ExtendedSegment
 * @version 1.0.2
 */
class ExtendedSegment {
    /**
     * Constructs a new <code>ExtendedSegment</code>.
     * @alias module:model/ExtendedSegment
     * @implements module:model/Segment
     */
    constructor() { 
        Segment.initialize(this);
        ExtendedSegment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedSegment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedSegment} obj Optional instance to populate.
     * @return {module:model/ExtendedSegment} The populated <code>ExtendedSegment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedSegment();
            Segment.constructFromObject(data, obj);

            if (data.hasOwnProperty('blacklistedInEU')) {
                obj['blacklistedInEU'] = ApiClient.convertToType(data['blacklistedInEU'], 'Boolean');
            }
            if (data.hasOwnProperty('co2Emissions')) {
                obj['co2Emissions'] = ApiClient.convertToType(data['co2Emissions'], [Co2Emission]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('numberOfStops')) {
                obj['numberOfStops'] = ApiClient.convertToType(data['numberOfStops'], 'Number');
            }
            if (data.hasOwnProperty('aircraft')) {
                obj['aircraft'] = AircraftEquipment.constructFromObject(data['aircraft']);
            }
            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = FlightEndPoint.constructFromObject(data['arrival']);
            }
            if (data.hasOwnProperty('carrierCode')) {
                obj['carrierCode'] = ApiClient.convertToType(data['carrierCode'], 'String');
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = FlightEndPoint.constructFromObject(data['departure']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('operating')) {
                obj['operating'] = OperatingFlight.constructFromObject(data['operating']);
            }
            if (data.hasOwnProperty('stops')) {
                obj['stops'] = ApiClient.convertToType(data['stops'], [FlightStop]);
            }
            if (data.hasOwnProperty('availabilityClasses')) {
                obj['availabilityClasses'] = ApiClient.convertToType(data['availabilityClasses'], [AvailabilityClass]);
            }
            if (data.hasOwnProperty('closedStatus')) {
                obj['closedStatus'] = ApiClient.convertToType(data['closedStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedSegment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedSegment</code>.
     */
    static validateJSON(data) {
        if (data['co2Emissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['co2Emissions'])) {
                throw new Error("Expected the field `co2Emissions` to be an array in the JSON data but got " + data['co2Emissions']);
            }
            // validate the optional field `co2Emissions` (array)
            for (const item of data['co2Emissions']) {
                Co2Emission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `aircraft`
        if (data['aircraft']) { // data not null
          AircraftEquipment.validateJSON(data['aircraft']);
        }
        // validate the optional field `arrival`
        if (data['arrival']) { // data not null
          FlightEndPoint.validateJSON(data['arrival']);
        }
        // ensure the json data is a string
        if (data['carrierCode'] && !(typeof data['carrierCode'] === 'string' || data['carrierCode'] instanceof String)) {
            throw new Error("Expected the field `carrierCode` to be a primitive type in the JSON string but got " + data['carrierCode']);
        }
        // validate the optional field `departure`
        if (data['departure']) { // data not null
          FlightEndPoint.validateJSON(data['departure']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // validate the optional field `operating`
        if (data['operating']) { // data not null
          OperatingFlight.validateJSON(data['operating']);
        }
        if (data['stops']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stops'])) {
                throw new Error("Expected the field `stops` to be an array in the JSON data but got " + data['stops']);
            }
            // validate the optional field `stops` (array)
            for (const item of data['stops']) {
                FlightStop.validateJSON(item);
            };
        }
        if (data['availabilityClasses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availabilityClasses'])) {
                throw new Error("Expected the field `availabilityClasses` to be an array in the JSON data but got " + data['availabilityClasses']);
            }
            // validate the optional field `availabilityClasses` (array)
            for (const item of data['availabilityClasses']) {
                AvailabilityClass.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['closedStatus'] && !(typeof data['closedStatus'] === 'string' || data['closedStatus'] instanceof String)) {
            throw new Error("Expected the field `closedStatus` to be a primitive type in the JSON string but got " + data['closedStatus']);
        }

        return true;
    }


}



/**
 * When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    
 * @member {Boolean} blacklistedInEU
 */
ExtendedSegment.prototype['blacklistedInEU'] = undefined;

/**
 * Co2 informations
 * @member {Array.<module:model/Co2Emission>} co2Emissions
 */
ExtendedSegment.prototype['co2Emissions'] = undefined;

/**
 * Id of the segment
 * @member {String} id
 */
ExtendedSegment.prototype['id'] = undefined;

/**
 * Number of stops
 * @member {Number} numberOfStops
 */
ExtendedSegment.prototype['numberOfStops'] = undefined;

/**
 * @member {module:model/AircraftEquipment} aircraft
 */
ExtendedSegment.prototype['aircraft'] = undefined;

/**
 * @member {module:model/FlightEndPoint} arrival
 */
ExtendedSegment.prototype['arrival'] = undefined;

/**
 * providing the airline / carrier code
 * @member {String} carrierCode
 */
ExtendedSegment.prototype['carrierCode'] = undefined;

/**
 * @member {module:model/FlightEndPoint} departure
 */
ExtendedSegment.prototype['departure'] = undefined;

/**
 * stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
 * @member {String} duration
 */
ExtendedSegment.prototype['duration'] = undefined;

/**
 * the flight number as assigned by the carrier
 * @member {String} number
 */
ExtendedSegment.prototype['number'] = undefined;

/**
 * @member {module:model/OperatingFlight} operating
 */
ExtendedSegment.prototype['operating'] = undefined;

/**
 * information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
 * @member {Array.<module:model/FlightStop>} stops
 */
ExtendedSegment.prototype['stops'] = undefined;

/**
 * List of booking classes for the segment
 * @member {Array.<module:model/AvailabilityClass>} availabilityClasses
 */
ExtendedSegment.prototype['availabilityClasses'] = undefined;

/**
 * Status of the segment when it is closed.
 * @member {module:model/ExtendedSegment.ClosedStatusEnum} closedStatus
 */
ExtendedSegment.prototype['closedStatus'] = undefined;


// Implement Segment interface:
/**
 * @member {module:model/AircraftEquipment} aircraft
 */
Segment.prototype['aircraft'] = undefined;
/**
 * @member {module:model/FlightEndPoint} arrival
 */
Segment.prototype['arrival'] = undefined;
/**
 * providing the airline / carrier code
 * @member {String} carrierCode
 */
Segment.prototype['carrierCode'] = undefined;
/**
 * @member {module:model/FlightEndPoint} departure
 */
Segment.prototype['departure'] = undefined;
/**
 * stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
 * @member {String} duration
 */
Segment.prototype['duration'] = undefined;
/**
 * the flight number as assigned by the carrier
 * @member {String} number
 */
Segment.prototype['number'] = undefined;
/**
 * @member {module:model/OperatingFlight} operating
 */
Segment.prototype['operating'] = undefined;
/**
 * information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
 * @member {Array.<module:model/FlightStop>} stops
 */
Segment.prototype['stops'] = undefined;
/**
 * When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    
 * @member {Boolean} blacklistedInEU
 */
Segment.prototype['blacklistedInEU'] = undefined;
/**
 * Co2 informations
 * @member {Array.<module:model/Co2Emission>} co2Emissions
 */
Segment.prototype['co2Emissions'] = undefined;
/**
 * Id of the segment
 * @member {String} id
 */
Segment.prototype['id'] = undefined;
/**
 * Number of stops
 * @member {Number} numberOfStops
 */
Segment.prototype['numberOfStops'] = undefined;



/**
 * Allowed values for the <code>closedStatus</code> property.
 * @enum {String}
 * @readonly
 */
ExtendedSegment['ClosedStatusEnum'] = {

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "DEPARTED"
     * @const
     */
    "DEPARTED": "DEPARTED",

    /**
     * value: "NOT_AVAILABLE"
     * @const
     */
    "NOT_AVAILABLE": "NOT_AVAILABLE"
};



export default ExtendedSegment;

