/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TourAllotment from './TourAllotment';

/**
 * The AvailabilityClass model module.
 * @module model/AvailabilityClass
 * @version 1.0.2
 */
class AvailabilityClass {
    /**
     * Constructs a new <code>AvailabilityClass</code>.
     * @alias module:model/AvailabilityClass
     */
    constructor() { 
        
        AvailabilityClass.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailabilityClass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityClass} obj Optional instance to populate.
     * @return {module:model/AvailabilityClass} The populated <code>AvailabilityClass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityClass();

            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('closedStatus')) {
                obj['closedStatus'] = ApiClient.convertToType(data['closedStatus'], 'String');
            }
            if (data.hasOwnProperty('numberOfBookableSeats')) {
                obj['numberOfBookableSeats'] = ApiClient.convertToType(data['numberOfBookableSeats'], 'Number');
            }
            if (data.hasOwnProperty('tourAllotment')) {
                obj['tourAllotment'] = TourAllotment.constructFromObject(data['tourAllotment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityClass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityClass</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['closedStatus'] && !(typeof data['closedStatus'] === 'string' || data['closedStatus'] instanceof String)) {
            throw new Error("Expected the field `closedStatus` to be a primitive type in the JSON string but got " + data['closedStatus']);
        }
        // validate the optional field `tourAllotment`
        if (data['tourAllotment']) { // data not null
          TourAllotment.validateJSON(data['tourAllotment']);
        }

        return true;
    }


}



/**
 * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
 * @member {String} class
 */
AvailabilityClass.prototype['class'] = undefined;

/**
 * Status of the booking class when it is closed.
 * @member {module:model/AvailabilityClass.ClosedStatusEnum} closedStatus
 */
AvailabilityClass.prototype['closedStatus'] = undefined;

/**
 * Number of seats bookable in a single request. Can not be higher than 9.
 * @member {Number} numberOfBookableSeats
 */
AvailabilityClass.prototype['numberOfBookableSeats'] = undefined;

/**
 * @member {module:model/TourAllotment} tourAllotment
 */
AvailabilityClass.prototype['tourAllotment'] = undefined;





/**
 * Allowed values for the <code>closedStatus</code> property.
 * @enum {String}
 * @readonly
 */
AvailabilityClass['ClosedStatusEnum'] = {

    /**
     * value: "WAITLIST_OPEN"
     * @const
     */
    "WAITLIST_OPEN": "WAITLIST_OPEN",

    /**
     * value: "WAITLIST_CLOSED"
     * @const
     */
    "WAITLIST_CLOSED": "WAITLIST_CLOSED",

    /**
     * value: "ON_REQUEST"
     * @const
     */
    "ON_REQUEST": "ON_REQUEST"
};



export default AvailabilityClass;

