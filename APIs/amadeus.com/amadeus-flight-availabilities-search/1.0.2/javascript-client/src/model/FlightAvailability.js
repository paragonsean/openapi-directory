/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedSegment from './ExtendedSegment';
import FlightOfferSource from './FlightOfferSource';

/**
 * The FlightAvailability model module.
 * @module model/FlightAvailability
 * @version 1.0.2
 */
class FlightAvailability {
    /**
     * Constructs a new <code>FlightAvailability</code>.
     * @alias module:model/FlightAvailability
     * @param id {String} Id of the flight availability
     * @param segments {Array.<module:model/ExtendedSegment>} 
     * @param source {module:model/FlightOfferSource} 
     * @param type {String} the resource name
     */
    constructor(id, segments, source, type) { 
        
        FlightAvailability.initialize(this, id, segments, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, segments, source, type) { 
        obj['id'] = id;
        obj['segments'] = segments;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FlightAvailability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightAvailability} obj Optional instance to populate.
     * @return {module:model/FlightAvailability} The populated <code>FlightAvailability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightAvailability();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instantTicketingRequired')) {
                obj['instantTicketingRequired'] = ApiClient.convertToType(data['instantTicketingRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('originDestinationId')) {
                obj['originDestinationId'] = ApiClient.convertToType(data['originDestinationId'], 'String');
            }
            if (data.hasOwnProperty('paymentCardRequired')) {
                obj['paymentCardRequired'] = ApiClient.convertToType(data['paymentCardRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [ExtendedSegment]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = FlightOfferSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightAvailability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightAvailability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlightAvailability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['originDestinationId'] && !(typeof data['originDestinationId'] === 'string' || data['originDestinationId'] instanceof String)) {
            throw new Error("Expected the field `originDestinationId` to be a primitive type in the JSON string but got " + data['originDestinationId']);
        }
        if (data['segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segments'])) {
                throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
            }
            // validate the optional field `segments` (array)
            for (const item of data['segments']) {
                ExtendedSegment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FlightAvailability.RequiredProperties = ["id", "segments", "source", "type"];

/**
 * duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m
 * @member {String} duration
 */
FlightAvailability.prototype['duration'] = undefined;

/**
 * Id of the flight availability
 * @member {String} id
 */
FlightAvailability.prototype['id'] = undefined;

/**
 * If true, inform that a ticketing will be required at booking step.
 * @member {Boolean} instantTicketingRequired
 */
FlightAvailability.prototype['instantTicketingRequired'] = undefined;

/**
 * Id of the originDestination in query
 * @member {String} originDestinationId
 */
FlightAvailability.prototype['originDestinationId'] = undefined;

/**
 * If true, a payment card is mandatory to book this flight offer
 * @member {Boolean} paymentCardRequired
 */
FlightAvailability.prototype['paymentCardRequired'] = undefined;

/**
 * @member {Array.<module:model/ExtendedSegment>} segments
 */
FlightAvailability.prototype['segments'] = undefined;

/**
 * @member {module:model/FlightOfferSource} source
 */
FlightAvailability.prototype['source'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
FlightAvailability.prototype['type'] = undefined;






export default FlightAvailability;

