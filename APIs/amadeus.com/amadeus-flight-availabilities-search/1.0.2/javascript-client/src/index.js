/**
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AircraftEquipment from './model/AircraftEquipment';
import AllotmentDetails from './model/AllotmentDetails';
import AvailabilityClass from './model/AvailabilityClass';
import CabinRestriction from './model/CabinRestriction';
import CarrierRestrictions from './model/CarrierRestrictions';
import Co2Emission from './model/Co2Emission';
import CollectionMetaAvailSearch from './model/CollectionMetaAvailSearch';
import ConnectionRestriction from './model/ConnectionRestriction';
import DateTimeType from './model/DateTimeType';
import Dictionaries from './model/Dictionaries';
import Error400 from './model/Error400';
import Error500 from './model/Error500';
import ExtendedOriginDestinationLight from './model/ExtendedOriginDestinationLight';
import ExtendedSearchCriteria from './model/ExtendedSearchCriteria';
import ExtendedSegment from './model/ExtendedSegment';
import FlightAvailability from './model/FlightAvailability';
import FlightEndPoint from './model/FlightEndPoint';
import FlightFiltersLight from './model/FlightFiltersLight';
import FlightOfferSource from './model/FlightOfferSource';
import FlightSegment from './model/FlightSegment';
import FlightStop from './model/FlightStop';
import GetFlightAvailabilitiesQuery from './model/GetFlightAvailabilitiesQuery';
import Issue from './model/Issue';
import IssueSource from './model/IssueSource';
import LocationValue from './model/LocationValue';
import OperatingFlight from './model/OperatingFlight';
import OriginDestinationLight from './model/OriginDestinationLight';
import OriginalFlightEndPoint from './model/OriginalFlightEndPoint';
import OriginalFlightStop from './model/OriginalFlightStop';
import SearchCriteriaLight from './model/SearchCriteriaLight';
import Segment from './model/Segment';
import SuccessAvailability from './model/SuccessAvailability';
import TourAllotment from './model/TourAllotment';
import TravelClass from './model/TravelClass';
import TravelerInfo from './model/TravelerInfo';
import TravelerType from './model/TravelerType';
import AvailibilityApi from './api/AvailibilityApi';


/**
*  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FlightAvailibilitiesSearch = require('index'); // See note below*.
* var xxxSvc = new FlightAvailibilitiesSearch.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FlightAvailibilitiesSearch.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FlightAvailibilitiesSearch.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FlightAvailibilitiesSearch.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AircraftEquipment model constructor.
     * @property {module:model/AircraftEquipment}
     */
    AircraftEquipment,

    /**
     * The AllotmentDetails model constructor.
     * @property {module:model/AllotmentDetails}
     */
    AllotmentDetails,

    /**
     * The AvailabilityClass model constructor.
     * @property {module:model/AvailabilityClass}
     */
    AvailabilityClass,

    /**
     * The CabinRestriction model constructor.
     * @property {module:model/CabinRestriction}
     */
    CabinRestriction,

    /**
     * The CarrierRestrictions model constructor.
     * @property {module:model/CarrierRestrictions}
     */
    CarrierRestrictions,

    /**
     * The Co2Emission model constructor.
     * @property {module:model/Co2Emission}
     */
    Co2Emission,

    /**
     * The CollectionMetaAvailSearch model constructor.
     * @property {module:model/CollectionMetaAvailSearch}
     */
    CollectionMetaAvailSearch,

    /**
     * The ConnectionRestriction model constructor.
     * @property {module:model/ConnectionRestriction}
     */
    ConnectionRestriction,

    /**
     * The DateTimeType model constructor.
     * @property {module:model/DateTimeType}
     */
    DateTimeType,

    /**
     * The Dictionaries model constructor.
     * @property {module:model/Dictionaries}
     */
    Dictionaries,

    /**
     * The Error400 model constructor.
     * @property {module:model/Error400}
     */
    Error400,

    /**
     * The Error500 model constructor.
     * @property {module:model/Error500}
     */
    Error500,

    /**
     * The ExtendedOriginDestinationLight model constructor.
     * @property {module:model/ExtendedOriginDestinationLight}
     */
    ExtendedOriginDestinationLight,

    /**
     * The ExtendedSearchCriteria model constructor.
     * @property {module:model/ExtendedSearchCriteria}
     */
    ExtendedSearchCriteria,

    /**
     * The ExtendedSegment model constructor.
     * @property {module:model/ExtendedSegment}
     */
    ExtendedSegment,

    /**
     * The FlightAvailability model constructor.
     * @property {module:model/FlightAvailability}
     */
    FlightAvailability,

    /**
     * The FlightEndPoint model constructor.
     * @property {module:model/FlightEndPoint}
     */
    FlightEndPoint,

    /**
     * The FlightFiltersLight model constructor.
     * @property {module:model/FlightFiltersLight}
     */
    FlightFiltersLight,

    /**
     * The FlightOfferSource model constructor.
     * @property {module:model/FlightOfferSource}
     */
    FlightOfferSource,

    /**
     * The FlightSegment model constructor.
     * @property {module:model/FlightSegment}
     */
    FlightSegment,

    /**
     * The FlightStop model constructor.
     * @property {module:model/FlightStop}
     */
    FlightStop,

    /**
     * The GetFlightAvailabilitiesQuery model constructor.
     * @property {module:model/GetFlightAvailabilitiesQuery}
     */
    GetFlightAvailabilitiesQuery,

    /**
     * The Issue model constructor.
     * @property {module:model/Issue}
     */
    Issue,

    /**
     * The IssueSource model constructor.
     * @property {module:model/IssueSource}
     */
    IssueSource,

    /**
     * The LocationValue model constructor.
     * @property {module:model/LocationValue}
     */
    LocationValue,

    /**
     * The OperatingFlight model constructor.
     * @property {module:model/OperatingFlight}
     */
    OperatingFlight,

    /**
     * The OriginDestinationLight model constructor.
     * @property {module:model/OriginDestinationLight}
     */
    OriginDestinationLight,

    /**
     * The OriginalFlightEndPoint model constructor.
     * @property {module:model/OriginalFlightEndPoint}
     */
    OriginalFlightEndPoint,

    /**
     * The OriginalFlightStop model constructor.
     * @property {module:model/OriginalFlightStop}
     */
    OriginalFlightStop,

    /**
     * The SearchCriteriaLight model constructor.
     * @property {module:model/SearchCriteriaLight}
     */
    SearchCriteriaLight,

    /**
     * The Segment model constructor.
     * @property {module:model/Segment}
     */
    Segment,

    /**
     * The SuccessAvailability model constructor.
     * @property {module:model/SuccessAvailability}
     */
    SuccessAvailability,

    /**
     * The TourAllotment model constructor.
     * @property {module:model/TourAllotment}
     */
    TourAllotment,

    /**
     * The TravelClass model constructor.
     * @property {module:model/TravelClass}
     */
    TravelClass,

    /**
     * The TravelerInfo model constructor.
     * @property {module:model/TravelerInfo}
     */
    TravelerInfo,

    /**
     * The TravelerType model constructor.
     * @property {module:model/TravelerType}
     */
    TravelerType,

    /**
    * The AvailibilityApi service constructor.
    * @property {module:api/AvailibilityApi}
    */
    AvailibilityApi
};
