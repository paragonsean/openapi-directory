# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cabin_restriction import CabinRestriction
from openapi_server.models.carrier_restrictions import CarrierRestrictions
from openapi_server.models.connection_restriction import ConnectionRestriction
from openapi_server import util


class FlightFiltersLight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cabin_restrictions: List[CabinRestriction]=None, carrier_restrictions: CarrierRestrictions=None, connection_restriction: ConnectionRestriction=None):
        """FlightFiltersLight - a model defined in OpenAPI

        :param cabin_restrictions: The cabin_restrictions of this FlightFiltersLight.
        :param carrier_restrictions: The carrier_restrictions of this FlightFiltersLight.
        :param connection_restriction: The connection_restriction of this FlightFiltersLight.
        """
        self.openapi_types = {
            'cabin_restrictions': List[CabinRestriction],
            'carrier_restrictions': CarrierRestrictions,
            'connection_restriction': ConnectionRestriction
        }

        self.attribute_map = {
            'cabin_restrictions': 'cabinRestrictions',
            'carrier_restrictions': 'carrierRestrictions',
            'connection_restriction': 'connectionRestriction'
        }

        self._cabin_restrictions = cabin_restrictions
        self._carrier_restrictions = carrier_restrictions
        self._connection_restriction = connection_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightFiltersLight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightFiltersLight of this FlightFiltersLight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cabin_restrictions(self):
        """Gets the cabin_restrictions of this FlightFiltersLight.

        Restriction towards cabins.

        :return: The cabin_restrictions of this FlightFiltersLight.
        :rtype: List[CabinRestriction]
        """
        return self._cabin_restrictions

    @cabin_restrictions.setter
    def cabin_restrictions(self, cabin_restrictions):
        """Sets the cabin_restrictions of this FlightFiltersLight.

        Restriction towards cabins.

        :param cabin_restrictions: The cabin_restrictions of this FlightFiltersLight.
        :type cabin_restrictions: List[CabinRestriction]
        """
        if cabin_restrictions is not None and len(cabin_restrictions) > 6:
            raise ValueError("Invalid value for `cabin_restrictions`, number of items must be less than or equal to `6`")
        if cabin_restrictions is not None and len(cabin_restrictions) < 1:
            raise ValueError("Invalid value for `cabin_restrictions`, number of items must be greater than or equal to `1`")

        self._cabin_restrictions = cabin_restrictions

    @property
    def carrier_restrictions(self):
        """Gets the carrier_restrictions of this FlightFiltersLight.


        :return: The carrier_restrictions of this FlightFiltersLight.
        :rtype: CarrierRestrictions
        """
        return self._carrier_restrictions

    @carrier_restrictions.setter
    def carrier_restrictions(self, carrier_restrictions):
        """Sets the carrier_restrictions of this FlightFiltersLight.


        :param carrier_restrictions: The carrier_restrictions of this FlightFiltersLight.
        :type carrier_restrictions: CarrierRestrictions
        """

        self._carrier_restrictions = carrier_restrictions

    @property
    def connection_restriction(self):
        """Gets the connection_restriction of this FlightFiltersLight.


        :return: The connection_restriction of this FlightFiltersLight.
        :rtype: ConnectionRestriction
        """
        return self._connection_restriction

    @connection_restriction.setter
    def connection_restriction(self, connection_restriction):
        """Sets the connection_restriction of this FlightFiltersLight.


        :param connection_restriction: The connection_restriction of this FlightFiltersLight.
        :type connection_restriction: ConnectionRestriction
        """

        self._connection_restriction = connection_restriction
