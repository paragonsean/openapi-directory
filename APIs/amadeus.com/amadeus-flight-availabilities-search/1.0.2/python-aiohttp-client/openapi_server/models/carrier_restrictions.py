# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CarrierRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklisted_in_eu_allowed: bool=None, excluded_carrier_codes: List[str]=None, included_carrier_codes: List[str]=None):
        """CarrierRestrictions - a model defined in OpenAPI

        :param blacklisted_in_eu_allowed: The blacklisted_in_eu_allowed of this CarrierRestrictions.
        :param excluded_carrier_codes: The excluded_carrier_codes of this CarrierRestrictions.
        :param included_carrier_codes: The included_carrier_codes of this CarrierRestrictions.
        """
        self.openapi_types = {
            'blacklisted_in_eu_allowed': bool,
            'excluded_carrier_codes': List[str],
            'included_carrier_codes': List[str]
        }

        self.attribute_map = {
            'blacklisted_in_eu_allowed': 'blacklistedInEUAllowed',
            'excluded_carrier_codes': 'excludedCarrierCodes',
            'included_carrier_codes': 'includedCarrierCodes'
        }

        self._blacklisted_in_eu_allowed = blacklisted_in_eu_allowed
        self._excluded_carrier_codes = excluded_carrier_codes
        self._included_carrier_codes = included_carrier_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarrierRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CarrierRestrictions of this CarrierRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklisted_in_eu_allowed(self):
        """Gets the blacklisted_in_eu_allowed of this CarrierRestrictions.

        This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline

        :return: The blacklisted_in_eu_allowed of this CarrierRestrictions.
        :rtype: bool
        """
        return self._blacklisted_in_eu_allowed

    @blacklisted_in_eu_allowed.setter
    def blacklisted_in_eu_allowed(self, blacklisted_in_eu_allowed):
        """Sets the blacklisted_in_eu_allowed of this CarrierRestrictions.

        This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline

        :param blacklisted_in_eu_allowed: The blacklisted_in_eu_allowed of this CarrierRestrictions.
        :type blacklisted_in_eu_allowed: bool
        """

        self._blacklisted_in_eu_allowed = blacklisted_in_eu_allowed

    @property
    def excluded_carrier_codes(self):
        """Gets the excluded_carrier_codes of this CarrierRestrictions.

        This option ensures that the system will only consider these airlines.

        :return: The excluded_carrier_codes of this CarrierRestrictions.
        :rtype: List[str]
        """
        return self._excluded_carrier_codes

    @excluded_carrier_codes.setter
    def excluded_carrier_codes(self, excluded_carrier_codes):
        """Sets the excluded_carrier_codes of this CarrierRestrictions.

        This option ensures that the system will only consider these airlines.

        :param excluded_carrier_codes: The excluded_carrier_codes of this CarrierRestrictions.
        :type excluded_carrier_codes: List[str]
        """
        if excluded_carrier_codes is not None and len(excluded_carrier_codes) > 99:
            raise ValueError("Invalid value for `excluded_carrier_codes`, number of items must be less than or equal to `99`")
        if excluded_carrier_codes is not None and len(excluded_carrier_codes) < 1:
            raise ValueError("Invalid value for `excluded_carrier_codes`, number of items must be greater than or equal to `1`")

        self._excluded_carrier_codes = excluded_carrier_codes

    @property
    def included_carrier_codes(self):
        """Gets the included_carrier_codes of this CarrierRestrictions.

        This option ensures that the system will only consider these airlines.

        :return: The included_carrier_codes of this CarrierRestrictions.
        :rtype: List[str]
        """
        return self._included_carrier_codes

    @included_carrier_codes.setter
    def included_carrier_codes(self, included_carrier_codes):
        """Sets the included_carrier_codes of this CarrierRestrictions.

        This option ensures that the system will only consider these airlines.

        :param included_carrier_codes: The included_carrier_codes of this CarrierRestrictions.
        :type included_carrier_codes: List[str]
        """
        if included_carrier_codes is not None and len(included_carrier_codes) > 99:
            raise ValueError("Invalid value for `included_carrier_codes`, number of items must be less than or equal to `99`")
        if included_carrier_codes is not None and len(included_carrier_codes) < 1:
            raise ValueError("Invalid value for `included_carrier_codes`, number of items must be greater than or equal to `1`")

        self._included_carrier_codes = included_carrier_codes
