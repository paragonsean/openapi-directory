# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aircraft_equipment import AircraftEquipment
from openapi_server.models.availability_class import AvailabilityClass
from openapi_server.models.co2_emission import Co2Emission
from openapi_server.models.flight_end_point import FlightEndPoint
from openapi_server.models.flight_stop import FlightStop
from openapi_server.models.operating_flight import OperatingFlight
from openapi_server import util


class ExtendedSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklisted_in_eu: bool=None, co2_emissions: List[Co2Emission]=None, id: str=None, number_of_stops: int=None, aircraft: AircraftEquipment=None, arrival: FlightEndPoint=None, carrier_code: str=None, departure: FlightEndPoint=None, duration: str=None, number: str=None, operating: OperatingFlight=None, stops: List[FlightStop]=None, availability_classes: List[AvailabilityClass]=None, closed_status: str=None):
        """ExtendedSegment - a model defined in OpenAPI

        :param blacklisted_in_eu: The blacklisted_in_eu of this ExtendedSegment.
        :param co2_emissions: The co2_emissions of this ExtendedSegment.
        :param id: The id of this ExtendedSegment.
        :param number_of_stops: The number_of_stops of this ExtendedSegment.
        :param aircraft: The aircraft of this ExtendedSegment.
        :param arrival: The arrival of this ExtendedSegment.
        :param carrier_code: The carrier_code of this ExtendedSegment.
        :param departure: The departure of this ExtendedSegment.
        :param duration: The duration of this ExtendedSegment.
        :param number: The number of this ExtendedSegment.
        :param operating: The operating of this ExtendedSegment.
        :param stops: The stops of this ExtendedSegment.
        :param availability_classes: The availability_classes of this ExtendedSegment.
        :param closed_status: The closed_status of this ExtendedSegment.
        """
        self.openapi_types = {
            'blacklisted_in_eu': bool,
            'co2_emissions': List[Co2Emission],
            'id': str,
            'number_of_stops': int,
            'aircraft': AircraftEquipment,
            'arrival': FlightEndPoint,
            'carrier_code': str,
            'departure': FlightEndPoint,
            'duration': str,
            'number': str,
            'operating': OperatingFlight,
            'stops': List[FlightStop],
            'availability_classes': List[AvailabilityClass],
            'closed_status': str
        }

        self.attribute_map = {
            'blacklisted_in_eu': 'blacklistedInEU',
            'co2_emissions': 'co2Emissions',
            'id': 'id',
            'number_of_stops': 'numberOfStops',
            'aircraft': 'aircraft',
            'arrival': 'arrival',
            'carrier_code': 'carrierCode',
            'departure': 'departure',
            'duration': 'duration',
            'number': 'number',
            'operating': 'operating',
            'stops': 'stops',
            'availability_classes': 'availabilityClasses',
            'closed_status': 'closedStatus'
        }

        self._blacklisted_in_eu = blacklisted_in_eu
        self._co2_emissions = co2_emissions
        self._id = id
        self._number_of_stops = number_of_stops
        self._aircraft = aircraft
        self._arrival = arrival
        self._carrier_code = carrier_code
        self._departure = departure
        self._duration = duration
        self._number = number
        self._operating = operating
        self._stops = stops
        self._availability_classes = availability_classes
        self._closed_status = closed_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extended_Segment of this ExtendedSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklisted_in_eu(self):
        """Gets the blacklisted_in_eu of this ExtendedSegment.

        When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    

        :return: The blacklisted_in_eu of this ExtendedSegment.
        :rtype: bool
        """
        return self._blacklisted_in_eu

    @blacklisted_in_eu.setter
    def blacklisted_in_eu(self, blacklisted_in_eu):
        """Sets the blacklisted_in_eu of this ExtendedSegment.

        When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    

        :param blacklisted_in_eu: The blacklisted_in_eu of this ExtendedSegment.
        :type blacklisted_in_eu: bool
        """

        self._blacklisted_in_eu = blacklisted_in_eu

    @property
    def co2_emissions(self):
        """Gets the co2_emissions of this ExtendedSegment.

        Co2 informations

        :return: The co2_emissions of this ExtendedSegment.
        :rtype: List[Co2Emission]
        """
        return self._co2_emissions

    @co2_emissions.setter
    def co2_emissions(self, co2_emissions):
        """Sets the co2_emissions of this ExtendedSegment.

        Co2 informations

        :param co2_emissions: The co2_emissions of this ExtendedSegment.
        :type co2_emissions: List[Co2Emission]
        """
        if co2_emissions is not None and len(co2_emissions) < 1:
            raise ValueError("Invalid value for `co2_emissions`, number of items must be greater than or equal to `1`")

        self._co2_emissions = co2_emissions

    @property
    def id(self):
        """Gets the id of this ExtendedSegment.

        Id of the segment

        :return: The id of this ExtendedSegment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedSegment.

        Id of the segment

        :param id: The id of this ExtendedSegment.
        :type id: str
        """

        self._id = id

    @property
    def number_of_stops(self):
        """Gets the number_of_stops of this ExtendedSegment.

        Number of stops

        :return: The number_of_stops of this ExtendedSegment.
        :rtype: int
        """
        return self._number_of_stops

    @number_of_stops.setter
    def number_of_stops(self, number_of_stops):
        """Sets the number_of_stops of this ExtendedSegment.

        Number of stops

        :param number_of_stops: The number_of_stops of this ExtendedSegment.
        :type number_of_stops: int
        """

        self._number_of_stops = number_of_stops

    @property
    def aircraft(self):
        """Gets the aircraft of this ExtendedSegment.


        :return: The aircraft of this ExtendedSegment.
        :rtype: AircraftEquipment
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """Sets the aircraft of this ExtendedSegment.


        :param aircraft: The aircraft of this ExtendedSegment.
        :type aircraft: AircraftEquipment
        """

        self._aircraft = aircraft

    @property
    def arrival(self):
        """Gets the arrival of this ExtendedSegment.


        :return: The arrival of this ExtendedSegment.
        :rtype: FlightEndPoint
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this ExtendedSegment.


        :param arrival: The arrival of this ExtendedSegment.
        :type arrival: FlightEndPoint
        """

        self._arrival = arrival

    @property
    def carrier_code(self):
        """Gets the carrier_code of this ExtendedSegment.

        providing the airline / carrier code

        :return: The carrier_code of this ExtendedSegment.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this ExtendedSegment.

        providing the airline / carrier code

        :param carrier_code: The carrier_code of this ExtendedSegment.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 2:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `2`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")

        self._carrier_code = carrier_code

    @property
    def departure(self):
        """Gets the departure of this ExtendedSegment.


        :return: The departure of this ExtendedSegment.
        :rtype: FlightEndPoint
        """
        return self._departure

    @departure.setter
    def departure(self, departure):
        """Sets the departure of this ExtendedSegment.


        :param departure: The departure of this ExtendedSegment.
        :type departure: FlightEndPoint
        """

        self._departure = departure

    @property
    def duration(self):
        """Gets the duration of this ExtendedSegment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :return: The duration of this ExtendedSegment.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ExtendedSegment.

        stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M

        :param duration: The duration of this ExtendedSegment.
        :type duration: str
        """

        self._duration = duration

    @property
    def number(self):
        """Gets the number of this ExtendedSegment.

        the flight number as assigned by the carrier

        :return: The number of this ExtendedSegment.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ExtendedSegment.

        the flight number as assigned by the carrier

        :param number: The number of this ExtendedSegment.
        :type number: str
        """
        if number is not None and len(number) > 4:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `4`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def operating(self):
        """Gets the operating of this ExtendedSegment.


        :return: The operating of this ExtendedSegment.
        :rtype: OperatingFlight
        """
        return self._operating

    @operating.setter
    def operating(self, operating):
        """Sets the operating of this ExtendedSegment.


        :param operating: The operating of this ExtendedSegment.
        :type operating: OperatingFlight
        """

        self._operating = operating

    @property
    def stops(self):
        """Gets the stops of this ExtendedSegment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :return: The stops of this ExtendedSegment.
        :rtype: List[FlightStop]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this ExtendedSegment.

        information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...

        :param stops: The stops of this ExtendedSegment.
        :type stops: List[FlightStop]
        """

        self._stops = stops

    @property
    def availability_classes(self):
        """Gets the availability_classes of this ExtendedSegment.

        List of booking classes for the segment

        :return: The availability_classes of this ExtendedSegment.
        :rtype: List[AvailabilityClass]
        """
        return self._availability_classes

    @availability_classes.setter
    def availability_classes(self, availability_classes):
        """Sets the availability_classes of this ExtendedSegment.

        List of booking classes for the segment

        :param availability_classes: The availability_classes of this ExtendedSegment.
        :type availability_classes: List[AvailabilityClass]
        """
        if availability_classes is not None and len(availability_classes) > 50:
            raise ValueError("Invalid value for `availability_classes`, number of items must be less than or equal to `50`")
        if availability_classes is not None and len(availability_classes) < 1:
            raise ValueError("Invalid value for `availability_classes`, number of items must be greater than or equal to `1`")

        self._availability_classes = availability_classes

    @property
    def closed_status(self):
        """Gets the closed_status of this ExtendedSegment.

        Status of the segment when it is closed.

        :return: The closed_status of this ExtendedSegment.
        :rtype: str
        """
        return self._closed_status

    @closed_status.setter
    def closed_status(self, closed_status):
        """Sets the closed_status of this ExtendedSegment.

        Status of the segment when it is closed.

        :param closed_status: The closed_status of this ExtendedSegment.
        :type closed_status: str
        """
        allowed_values = ["CANCELLED", "DEPARTED", "NOT_AVAILABLE"]  # noqa: E501
        if closed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_status` ({0}), must be one of {1}"
                .format(closed_status, allowed_values)
            )

        self._closed_status = closed_status
