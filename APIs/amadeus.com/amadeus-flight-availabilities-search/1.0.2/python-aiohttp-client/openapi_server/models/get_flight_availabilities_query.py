# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_origin_destination_light import ExtendedOriginDestinationLight
from openapi_server.models.extended_search_criteria import ExtendedSearchCriteria
from openapi_server.models.flight_offer_source import FlightOfferSource
from openapi_server.models.traveler_info import TravelerInfo
from openapi_server import util


class GetFlightAvailabilitiesQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origin_destinations: List[ExtendedOriginDestinationLight]=None, search_criteria: ExtendedSearchCriteria=None, sources: List[FlightOfferSource]=None, travelers: List[TravelerInfo]=None):
        """GetFlightAvailabilitiesQuery - a model defined in OpenAPI

        :param origin_destinations: The origin_destinations of this GetFlightAvailabilitiesQuery.
        :param search_criteria: The search_criteria of this GetFlightAvailabilitiesQuery.
        :param sources: The sources of this GetFlightAvailabilitiesQuery.
        :param travelers: The travelers of this GetFlightAvailabilitiesQuery.
        """
        self.openapi_types = {
            'origin_destinations': List[ExtendedOriginDestinationLight],
            'search_criteria': ExtendedSearchCriteria,
            'sources': List[FlightOfferSource],
            'travelers': List[TravelerInfo]
        }

        self.attribute_map = {
            'origin_destinations': 'originDestinations',
            'search_criteria': 'searchCriteria',
            'sources': 'sources',
            'travelers': 'travelers'
        }

        self._origin_destinations = origin_destinations
        self._search_criteria = search_criteria
        self._sources = sources
        self._travelers = travelers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFlightAvailabilitiesQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFlightAvailabilitiesQuery of this GetFlightAvailabilitiesQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin_destinations(self):
        """Gets the origin_destinations of this GetFlightAvailabilitiesQuery.

        Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.

        :return: The origin_destinations of this GetFlightAvailabilitiesQuery.
        :rtype: List[ExtendedOriginDestinationLight]
        """
        return self._origin_destinations

    @origin_destinations.setter
    def origin_destinations(self, origin_destinations):
        """Sets the origin_destinations of this GetFlightAvailabilitiesQuery.

        Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.

        :param origin_destinations: The origin_destinations of this GetFlightAvailabilitiesQuery.
        :type origin_destinations: List[ExtendedOriginDestinationLight]
        """
        if origin_destinations is None:
            raise ValueError("Invalid value for `origin_destinations`, must not be `None`")
        if origin_destinations is not None and len(origin_destinations) > 6:
            raise ValueError("Invalid value for `origin_destinations`, number of items must be less than or equal to `6`")
        if origin_destinations is not None and len(origin_destinations) < 1:
            raise ValueError("Invalid value for `origin_destinations`, number of items must be greater than or equal to `1`")

        self._origin_destinations = origin_destinations

    @property
    def search_criteria(self):
        """Gets the search_criteria of this GetFlightAvailabilitiesQuery.


        :return: The search_criteria of this GetFlightAvailabilitiesQuery.
        :rtype: ExtendedSearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this GetFlightAvailabilitiesQuery.


        :param search_criteria: The search_criteria of this GetFlightAvailabilitiesQuery.
        :type search_criteria: ExtendedSearchCriteria
        """

        self._search_criteria = search_criteria

    @property
    def sources(self):
        """Gets the sources of this GetFlightAvailabilitiesQuery.

        Allows enable one or more sources. If present in the list, these sources will be called by the system.  GDS : Full service carriers

        :return: The sources of this GetFlightAvailabilitiesQuery.
        :rtype: List[FlightOfferSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this GetFlightAvailabilitiesQuery.

        Allows enable one or more sources. If present in the list, these sources will be called by the system.  GDS : Full service carriers

        :param sources: The sources of this GetFlightAvailabilitiesQuery.
        :type sources: List[FlightOfferSource]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")
        if sources is not None and len(sources) < 1:
            raise ValueError("Invalid value for `sources`, number of items must be greater than or equal to `1`")

        self._sources = sources

    @property
    def travelers(self):
        """Gets the travelers of this GetFlightAvailabilitiesQuery.

        List of travelers composing the travel

        :return: The travelers of this GetFlightAvailabilitiesQuery.
        :rtype: List[TravelerInfo]
        """
        return self._travelers

    @travelers.setter
    def travelers(self, travelers):
        """Sets the travelers of this GetFlightAvailabilitiesQuery.

        List of travelers composing the travel

        :param travelers: The travelers of this GetFlightAvailabilitiesQuery.
        :type travelers: List[TravelerInfo]
        """
        if travelers is None:
            raise ValueError("Invalid value for `travelers`, must not be `None`")
        if travelers is not None and len(travelers) > 18:
            raise ValueError("Invalid value for `travelers`, number of items must be less than or equal to `18`")
        if travelers is not None and len(travelers) < 1:
            raise ValueError("Invalid value for `travelers`, number of items must be greater than or equal to `1`")

        self._travelers = travelers
