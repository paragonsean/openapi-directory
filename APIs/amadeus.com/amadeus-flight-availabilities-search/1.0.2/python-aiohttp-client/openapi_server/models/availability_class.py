# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tour_allotment import TourAllotment
import re
from openapi_server import util


class AvailabilityClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, closed_status: str=None, number_of_bookable_seats: float=None, tour_allotment: TourAllotment=None):
        """AvailabilityClass - a model defined in OpenAPI

        :param _class: The _class of this AvailabilityClass.
        :param closed_status: The closed_status of this AvailabilityClass.
        :param number_of_bookable_seats: The number_of_bookable_seats of this AvailabilityClass.
        :param tour_allotment: The tour_allotment of this AvailabilityClass.
        """
        self.openapi_types = {
            '_class': str,
            'closed_status': str,
            'number_of_bookable_seats': float,
            'tour_allotment': TourAllotment
        }

        self.attribute_map = {
            '_class': 'class',
            'closed_status': 'closedStatus',
            'number_of_bookable_seats': 'numberOfBookableSeats',
            'tour_allotment': 'tourAllotment'
        }

        self.__class = _class
        self._closed_status = closed_status
        self._number_of_bookable_seats = number_of_bookable_seats
        self._tour_allotment = tour_allotment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityClass of this AvailabilityClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this AvailabilityClass.

        The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)

        :return: The _class of this AvailabilityClass.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this AvailabilityClass.

        The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)

        :param _class: The _class of this AvailabilityClass.
        :type _class: str
        """
        if _class is not None and not re.search(r'[A-Z]{1}', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/[A-Z]{1}/`")

        self.__class = _class

    @property
    def closed_status(self):
        """Gets the closed_status of this AvailabilityClass.

        Status of the booking class when it is closed.

        :return: The closed_status of this AvailabilityClass.
        :rtype: str
        """
        return self._closed_status

    @closed_status.setter
    def closed_status(self, closed_status):
        """Sets the closed_status of this AvailabilityClass.

        Status of the booking class when it is closed.

        :param closed_status: The closed_status of this AvailabilityClass.
        :type closed_status: str
        """
        allowed_values = ["WAITLIST_OPEN", "WAITLIST_CLOSED", "ON_REQUEST"]  # noqa: E501
        if closed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_status` ({0}), must be one of {1}"
                .format(closed_status, allowed_values)
            )

        self._closed_status = closed_status

    @property
    def number_of_bookable_seats(self):
        """Gets the number_of_bookable_seats of this AvailabilityClass.

        Number of seats bookable in a single request. Can not be higher than 9.

        :return: The number_of_bookable_seats of this AvailabilityClass.
        :rtype: float
        """
        return self._number_of_bookable_seats

    @number_of_bookable_seats.setter
    def number_of_bookable_seats(self, number_of_bookable_seats):
        """Sets the number_of_bookable_seats of this AvailabilityClass.

        Number of seats bookable in a single request. Can not be higher than 9.

        :param number_of_bookable_seats: The number_of_bookable_seats of this AvailabilityClass.
        :type number_of_bookable_seats: float
        """
        if number_of_bookable_seats is not None and number_of_bookable_seats > 9:
            raise ValueError("Invalid value for `number_of_bookable_seats`, must be a value less than or equal to `9`")
        if number_of_bookable_seats is not None and number_of_bookable_seats < 1:
            raise ValueError("Invalid value for `number_of_bookable_seats`, must be a value greater than or equal to `1`")

        self._number_of_bookable_seats = number_of_bookable_seats

    @property
    def tour_allotment(self):
        """Gets the tour_allotment of this AvailabilityClass.


        :return: The tour_allotment of this AvailabilityClass.
        :rtype: TourAllotment
        """
        return self._tour_allotment

    @tour_allotment.setter
    def tour_allotment(self, tour_allotment):
        """Sets the tour_allotment of this AvailabilityClass.


        :param tour_allotment: The tour_allotment of this AvailabilityClass.
        :type tour_allotment: TourAllotment
        """

        self._tour_allotment = tour_allotment
