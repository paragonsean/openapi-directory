# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_type import DateTimeType
from openapi_server import util


class ExtendedOriginDestinationLight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_location_code: str=None, excluded_connection_points: List[str]=None, id: str=None, included_connection_points: List[str]=None, origin_location_code: str=None, arrival_date_time: DateTimeType=None, departure_date_time: DateTimeType=None):
        """ExtendedOriginDestinationLight - a model defined in OpenAPI

        :param destination_location_code: The destination_location_code of this ExtendedOriginDestinationLight.
        :param excluded_connection_points: The excluded_connection_points of this ExtendedOriginDestinationLight.
        :param id: The id of this ExtendedOriginDestinationLight.
        :param included_connection_points: The included_connection_points of this ExtendedOriginDestinationLight.
        :param origin_location_code: The origin_location_code of this ExtendedOriginDestinationLight.
        :param arrival_date_time: The arrival_date_time of this ExtendedOriginDestinationLight.
        :param departure_date_time: The departure_date_time of this ExtendedOriginDestinationLight.
        """
        self.openapi_types = {
            'destination_location_code': str,
            'excluded_connection_points': List[str],
            'id': str,
            'included_connection_points': List[str],
            'origin_location_code': str,
            'arrival_date_time': DateTimeType,
            'departure_date_time': DateTimeType
        }

        self.attribute_map = {
            'destination_location_code': 'destinationLocationCode',
            'excluded_connection_points': 'excludedConnectionPoints',
            'id': 'id',
            'included_connection_points': 'includedConnectionPoints',
            'origin_location_code': 'originLocationCode',
            'arrival_date_time': 'arrivalDateTime',
            'departure_date_time': 'departureDateTime'
        }

        self._destination_location_code = destination_location_code
        self._excluded_connection_points = excluded_connection_points
        self._id = id
        self._included_connection_points = included_connection_points
        self._origin_location_code = origin_location_code
        self._arrival_date_time = arrival_date_time
        self._departure_date_time = departure_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedOriginDestinationLight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extended_OriginDestinationLight of this ExtendedOriginDestinationLight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_location_code(self):
        """Gets the destination_location_code of this ExtendedOriginDestinationLight.

        Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The destination_location_code of this ExtendedOriginDestinationLight.
        :rtype: str
        """
        return self._destination_location_code

    @destination_location_code.setter
    def destination_location_code(self, destination_location_code):
        """Sets the destination_location_code of this ExtendedOriginDestinationLight.

        Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param destination_location_code: The destination_location_code of this ExtendedOriginDestinationLight.
        :type destination_location_code: str
        """

        self._destination_location_code = destination_location_code

    @property
    def excluded_connection_points(self):
        """Gets the excluded_connection_points of this ExtendedOriginDestinationLight.

        List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :return: The excluded_connection_points of this ExtendedOriginDestinationLight.
        :rtype: List[str]
        """
        return self._excluded_connection_points

    @excluded_connection_points.setter
    def excluded_connection_points(self, excluded_connection_points):
        """Sets the excluded_connection_points of this ExtendedOriginDestinationLight.

        List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :param excluded_connection_points: The excluded_connection_points of this ExtendedOriginDestinationLight.
        :type excluded_connection_points: List[str]
        """
        if excluded_connection_points is not None and len(excluded_connection_points) > 3:
            raise ValueError("Invalid value for `excluded_connection_points`, number of items must be less than or equal to `3`")
        if excluded_connection_points is not None and len(excluded_connection_points) < 1:
            raise ValueError("Invalid value for `excluded_connection_points`, number of items must be greater than or equal to `1`")

        self._excluded_connection_points = excluded_connection_points

    @property
    def id(self):
        """Gets the id of this ExtendedOriginDestinationLight.


        :return: The id of this ExtendedOriginDestinationLight.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedOriginDestinationLight.


        :param id: The id of this ExtendedOriginDestinationLight.
        :type id: str
        """

        self._id = id

    @property
    def included_connection_points(self):
        """Gets the included_connection_points of this ExtendedOriginDestinationLight.

        List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :return: The included_connection_points of this ExtendedOriginDestinationLight.
        :rtype: List[str]
        """
        return self._included_connection_points

    @included_connection_points.setter
    def included_connection_points(self, included_connection_points):
        """Sets the included_connection_points of this ExtendedOriginDestinationLight.

        List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider

        :param included_connection_points: The included_connection_points of this ExtendedOriginDestinationLight.
        :type included_connection_points: List[str]
        """
        if included_connection_points is not None and len(included_connection_points) > 2:
            raise ValueError("Invalid value for `included_connection_points`, number of items must be less than or equal to `2`")
        if included_connection_points is not None and len(included_connection_points) < 1:
            raise ValueError("Invalid value for `included_connection_points`, number of items must be greater than or equal to `1`")

        self._included_connection_points = included_connection_points

    @property
    def origin_location_code(self):
        """Gets the origin_location_code of this ExtendedOriginDestinationLight.

        Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :return: The origin_location_code of this ExtendedOriginDestinationLight.
        :rtype: str
        """
        return self._origin_location_code

    @origin_location_code.setter
    def origin_location_code(self, origin_location_code):
        """Sets the origin_location_code of this ExtendedOriginDestinationLight.

        Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.

        :param origin_location_code: The origin_location_code of this ExtendedOriginDestinationLight.
        :type origin_location_code: str
        """

        self._origin_location_code = origin_location_code

    @property
    def arrival_date_time(self):
        """Gets the arrival_date_time of this ExtendedOriginDestinationLight.


        :return: The arrival_date_time of this ExtendedOriginDestinationLight.
        :rtype: DateTimeType
        """
        return self._arrival_date_time

    @arrival_date_time.setter
    def arrival_date_time(self, arrival_date_time):
        """Sets the arrival_date_time of this ExtendedOriginDestinationLight.


        :param arrival_date_time: The arrival_date_time of this ExtendedOriginDestinationLight.
        :type arrival_date_time: DateTimeType
        """

        self._arrival_date_time = arrival_date_time

    @property
    def departure_date_time(self):
        """Gets the departure_date_time of this ExtendedOriginDestinationLight.


        :return: The departure_date_time of this ExtendedOriginDestinationLight.
        :rtype: DateTimeType
        """
        return self._departure_date_time

    @departure_date_time.setter
    def departure_date_time(self, departure_date_time):
        """Sets the departure_date_time of this ExtendedOriginDestinationLight.


        :param departure_date_time: The departure_date_time of this ExtendedOriginDestinationLight.
        :type departure_date_time: DateTimeType
        """

        self._departure_date_time = departure_date_time
