# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airport_change_allowed: bool=None, max_number_of_connections: float=None, technical_stops_allowed: bool=None):
        """ConnectionRestriction - a model defined in OpenAPI

        :param airport_change_allowed: The airport_change_allowed of this ConnectionRestriction.
        :param max_number_of_connections: The max_number_of_connections of this ConnectionRestriction.
        :param technical_stops_allowed: The technical_stops_allowed of this ConnectionRestriction.
        """
        self.openapi_types = {
            'airport_change_allowed': bool,
            'max_number_of_connections': float,
            'technical_stops_allowed': bool
        }

        self.attribute_map = {
            'airport_change_allowed': 'airportChangeAllowed',
            'max_number_of_connections': 'maxNumberOfConnections',
            'technical_stops_allowed': 'technicalStopsAllowed'
        }

        self._airport_change_allowed = airport_change_allowed
        self._max_number_of_connections = max_number_of_connections
        self._technical_stops_allowed = technical_stops_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionRestriction of this ConnectionRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airport_change_allowed(self):
        """Gets the airport_change_allowed of this ConnectionRestriction.

        Allow to change airport during connection

        :return: The airport_change_allowed of this ConnectionRestriction.
        :rtype: bool
        """
        return self._airport_change_allowed

    @airport_change_allowed.setter
    def airport_change_allowed(self, airport_change_allowed):
        """Sets the airport_change_allowed of this ConnectionRestriction.

        Allow to change airport during connection

        :param airport_change_allowed: The airport_change_allowed of this ConnectionRestriction.
        :type airport_change_allowed: bool
        """

        self._airport_change_allowed = airport_change_allowed

    @property
    def max_number_of_connections(self):
        """Gets the max_number_of_connections of this ConnectionRestriction.

        The maximal number of connections for each itinerary. Value can be 0, 1 or 2.

        :return: The max_number_of_connections of this ConnectionRestriction.
        :rtype: float
        """
        return self._max_number_of_connections

    @max_number_of_connections.setter
    def max_number_of_connections(self, max_number_of_connections):
        """Sets the max_number_of_connections of this ConnectionRestriction.

        The maximal number of connections for each itinerary. Value can be 0, 1 or 2.

        :param max_number_of_connections: The max_number_of_connections of this ConnectionRestriction.
        :type max_number_of_connections: float
        """

        self._max_number_of_connections = max_number_of_connections

    @property
    def technical_stops_allowed(self):
        """Gets the technical_stops_allowed of this ConnectionRestriction.

        This option allows the single segment to have one or more intermediate stops (technical stops).

        :return: The technical_stops_allowed of this ConnectionRestriction.
        :rtype: bool
        """
        return self._technical_stops_allowed

    @technical_stops_allowed.setter
    def technical_stops_allowed(self, technical_stops_allowed):
        """Sets the technical_stops_allowed of this ConnectionRestriction.

        This option allows the single segment to have one or more intermediate stops (technical stops).

        :param technical_stops_allowed: The technical_stops_allowed of this ConnectionRestriction.
        :type technical_stops_allowed: bool
        """

        self._technical_stops_allowed = technical_stops_allowed
