# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_segment import ExtendedSegment
from openapi_server.models.flight_offer_source import FlightOfferSource
from openapi_server import util


class FlightAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, id: str=None, instant_ticketing_required: bool=None, origin_destination_id: str=None, payment_card_required: bool=None, segments: List[ExtendedSegment]=None, source: FlightOfferSource=None, type: str=None):
        """FlightAvailability - a model defined in OpenAPI

        :param duration: The duration of this FlightAvailability.
        :param id: The id of this FlightAvailability.
        :param instant_ticketing_required: The instant_ticketing_required of this FlightAvailability.
        :param origin_destination_id: The origin_destination_id of this FlightAvailability.
        :param payment_card_required: The payment_card_required of this FlightAvailability.
        :param segments: The segments of this FlightAvailability.
        :param source: The source of this FlightAvailability.
        :param type: The type of this FlightAvailability.
        """
        self.openapi_types = {
            'duration': str,
            'id': str,
            'instant_ticketing_required': bool,
            'origin_destination_id': str,
            'payment_card_required': bool,
            'segments': List[ExtendedSegment],
            'source': FlightOfferSource,
            'type': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'id': 'id',
            'instant_ticketing_required': 'instantTicketingRequired',
            'origin_destination_id': 'originDestinationId',
            'payment_card_required': 'paymentCardRequired',
            'segments': 'segments',
            'source': 'source',
            'type': 'type'
        }

        self._duration = duration
        self._id = id
        self._instant_ticketing_required = instant_ticketing_required
        self._origin_destination_id = origin_destination_id
        self._payment_card_required = payment_card_required
        self._segments = segments
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightAvailability of this FlightAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this FlightAvailability.

        duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m

        :return: The duration of this FlightAvailability.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this FlightAvailability.

        duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m

        :param duration: The duration of this FlightAvailability.
        :type duration: str
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this FlightAvailability.

        Id of the flight availability

        :return: The id of this FlightAvailability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlightAvailability.

        Id of the flight availability

        :param id: The id of this FlightAvailability.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instant_ticketing_required(self):
        """Gets the instant_ticketing_required of this FlightAvailability.

        If true, inform that a ticketing will be required at booking step.

        :return: The instant_ticketing_required of this FlightAvailability.
        :rtype: bool
        """
        return self._instant_ticketing_required

    @instant_ticketing_required.setter
    def instant_ticketing_required(self, instant_ticketing_required):
        """Sets the instant_ticketing_required of this FlightAvailability.

        If true, inform that a ticketing will be required at booking step.

        :param instant_ticketing_required: The instant_ticketing_required of this FlightAvailability.
        :type instant_ticketing_required: bool
        """

        self._instant_ticketing_required = instant_ticketing_required

    @property
    def origin_destination_id(self):
        """Gets the origin_destination_id of this FlightAvailability.

        Id of the originDestination in query

        :return: The origin_destination_id of this FlightAvailability.
        :rtype: str
        """
        return self._origin_destination_id

    @origin_destination_id.setter
    def origin_destination_id(self, origin_destination_id):
        """Sets the origin_destination_id of this FlightAvailability.

        Id of the originDestination in query

        :param origin_destination_id: The origin_destination_id of this FlightAvailability.
        :type origin_destination_id: str
        """

        self._origin_destination_id = origin_destination_id

    @property
    def payment_card_required(self):
        """Gets the payment_card_required of this FlightAvailability.

        If true, a payment card is mandatory to book this flight offer

        :return: The payment_card_required of this FlightAvailability.
        :rtype: bool
        """
        return self._payment_card_required

    @payment_card_required.setter
    def payment_card_required(self, payment_card_required):
        """Sets the payment_card_required of this FlightAvailability.

        If true, a payment card is mandatory to book this flight offer

        :param payment_card_required: The payment_card_required of this FlightAvailability.
        :type payment_card_required: bool
        """

        self._payment_card_required = payment_card_required

    @property
    def segments(self):
        """Gets the segments of this FlightAvailability.


        :return: The segments of this FlightAvailability.
        :rtype: List[ExtendedSegment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this FlightAvailability.


        :param segments: The segments of this FlightAvailability.
        :type segments: List[ExtendedSegment]
        """
        if segments is None:
            raise ValueError("Invalid value for `segments`, must not be `None`")
        if segments is not None and len(segments) > 9:
            raise ValueError("Invalid value for `segments`, number of items must be less than or equal to `9`")
        if segments is not None and len(segments) < 1:
            raise ValueError("Invalid value for `segments`, number of items must be greater than or equal to `1`")

        self._segments = segments

    @property
    def source(self):
        """Gets the source of this FlightAvailability.


        :return: The source of this FlightAvailability.
        :rtype: FlightOfferSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FlightAvailability.


        :param source: The source of this FlightAvailability.
        :type source: FlightOfferSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this FlightAvailability.

        the resource name

        :return: The type of this FlightAvailability.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FlightAvailability.

        the resource name

        :param type: The type of this FlightAvailability.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
