# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight_filters_light import FlightFiltersLight
from openapi_server import util


class SearchCriteriaLight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_allotments: bool=None, flight_filters: FlightFiltersLight=None):
        """SearchCriteriaLight - a model defined in OpenAPI

        :param exclude_allotments: The exclude_allotments of this SearchCriteriaLight.
        :param flight_filters: The flight_filters of this SearchCriteriaLight.
        """
        self.openapi_types = {
            'exclude_allotments': bool,
            'flight_filters': FlightFiltersLight
        }

        self.attribute_map = {
            'exclude_allotments': 'excludeAllotments',
            'flight_filters': 'flightFilters'
        }

        self._exclude_allotments = exclude_allotments
        self._flight_filters = flight_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchCriteriaLight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchCriteriaLight of this SearchCriteriaLight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_allotments(self):
        """Gets the exclude_allotments of this SearchCriteriaLight.

        This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.

        :return: The exclude_allotments of this SearchCriteriaLight.
        :rtype: bool
        """
        return self._exclude_allotments

    @exclude_allotments.setter
    def exclude_allotments(self, exclude_allotments):
        """Sets the exclude_allotments of this SearchCriteriaLight.

        This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.

        :param exclude_allotments: The exclude_allotments of this SearchCriteriaLight.
        :type exclude_allotments: bool
        """

        self._exclude_allotments = exclude_allotments

    @property
    def flight_filters(self):
        """Gets the flight_filters of this SearchCriteriaLight.


        :return: The flight_filters of this SearchCriteriaLight.
        :rtype: FlightFiltersLight
        """
        return self._flight_filters

    @flight_filters.setter
    def flight_filters(self, flight_filters):
        """Sets the flight_filters of this SearchCriteriaLight.


        :param flight_filters: The flight_filters of this SearchCriteriaLight.
        :type flight_filters: FlightFiltersLight
        """

        self._flight_filters = flight_filters
