# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TourAllotment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tour_name: str=None, tour_reference: str=None, mode: str=None, remaining_seats: float=None):
        """TourAllotment - a model defined in OpenAPI

        :param tour_name: The tour_name of this TourAllotment.
        :param tour_reference: The tour_reference of this TourAllotment.
        :param mode: The mode of this TourAllotment.
        :param remaining_seats: The remaining_seats of this TourAllotment.
        """
        self.openapi_types = {
            'tour_name': str,
            'tour_reference': str,
            'mode': str,
            'remaining_seats': float
        }

        self.attribute_map = {
            'tour_name': 'tourName',
            'tour_reference': 'tourReference',
            'mode': 'mode',
            'remaining_seats': 'remainingSeats'
        }

        self._tour_name = tour_name
        self._tour_reference = tour_reference
        self._mode = mode
        self._remaining_seats = remaining_seats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TourAllotment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TourAllotment of this TourAllotment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tour_name(self):
        """Gets the tour_name of this TourAllotment.

        The tour name agreed for this specific allotment.

        :return: The tour_name of this TourAllotment.
        :rtype: str
        """
        return self._tour_name

    @tour_name.setter
    def tour_name(self, tour_name):
        """Sets the tour_name of this TourAllotment.

        The tour name agreed for this specific allotment.

        :param tour_name: The tour_name of this TourAllotment.
        :type tour_name: str
        """

        self._tour_name = tour_name

    @property
    def tour_reference(self):
        """Gets the tour_reference of this TourAllotment.

        The tour reference agreed for this specific allotment.

        :return: The tour_reference of this TourAllotment.
        :rtype: str
        """
        return self._tour_reference

    @tour_reference.setter
    def tour_reference(self, tour_reference):
        """Sets the tour_reference of this TourAllotment.

        The tour reference agreed for this specific allotment.

        :param tour_reference: The tour_reference of this TourAllotment.
        :type tour_reference: str
        """

        self._tour_reference = tour_reference

    @property
    def mode(self):
        """Gets the mode of this TourAllotment.

        How the allotment can be booked by the Travel Agency.

        :return: The mode of this TourAllotment.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TourAllotment.

        How the allotment can be booked by the Travel Agency.

        :param mode: The mode of this TourAllotment.
        :type mode: str
        """
        allowed_values = ["FREE", "FORCED"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def remaining_seats(self):
        """Gets the remaining_seats of this TourAllotment.

        Number of remaining seats in the allotment.

        :return: The remaining_seats of this TourAllotment.
        :rtype: float
        """
        return self._remaining_seats

    @remaining_seats.setter
    def remaining_seats(self, remaining_seats):
        """Sets the remaining_seats of this TourAllotment.

        Number of remaining seats in the allotment.

        :param remaining_seats: The remaining_seats of this TourAllotment.
        :type remaining_seats: float
        """

        self._remaining_seats = remaining_seats
