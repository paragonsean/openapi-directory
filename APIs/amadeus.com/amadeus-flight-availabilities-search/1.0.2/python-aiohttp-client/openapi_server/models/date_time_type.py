# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateTimeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, time: str=None):
        """DateTimeType - a model defined in OpenAPI

        :param _date: The _date of this DateTimeType.
        :param time: The time of this DateTimeType.
        """
        self.openapi_types = {
            '_date': date,
            'time': str
        }

        self.attribute_map = {
            '_date': 'date',
            'time': 'time'
        }

        self.__date = _date
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeType of this DateTimeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this DateTimeType.

        Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25

        :return: The _date of this DateTimeType.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DateTimeType.

        Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25

        :param _date: The _date of this DateTimeType.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this DateTimeType.

        Local time. hh:mm:ss format, e.g 10:30:00

        :return: The time of this DateTimeType.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DateTimeType.

        Local time. hh:mm:ss format, e.g 10:30:00

        :param time: The time of this DateTimeType.
        :type time: str
        """

        self._time = time
