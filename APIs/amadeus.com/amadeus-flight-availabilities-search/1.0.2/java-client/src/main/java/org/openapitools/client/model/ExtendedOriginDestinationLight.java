/*
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtendedOriginDestinationLight
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:18.707859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedOriginDestinationLight {
  public static final String SERIALIZED_NAME_DESTINATION_LOCATION_CODE = "destinationLocationCode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_LOCATION_CODE)
  private String destinationLocationCode;

  public static final String SERIALIZED_NAME_EXCLUDED_CONNECTION_POINTS = "excludedConnectionPoints";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CONNECTION_POINTS)
  private List<String> excludedConnectionPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUDED_CONNECTION_POINTS = "includedConnectionPoints";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CONNECTION_POINTS)
  private List<String> includedConnectionPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGIN_LOCATION_CODE = "originLocationCode";
  @SerializedName(SERIALIZED_NAME_ORIGIN_LOCATION_CODE)
  private String originLocationCode;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE_TIME = "arrivalDateTime";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE_TIME)
  private DateTimeType arrivalDateTime;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE_TIME = "departureDateTime";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE_TIME)
  private DateTimeType departureDateTime;

  public ExtendedOriginDestinationLight() {
  }

  public ExtendedOriginDestinationLight destinationLocationCode(String destinationLocationCode) {
    this.destinationLocationCode = destinationLocationCode;
    return this;
  }

  /**
   * Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return destinationLocationCode
   */
  @javax.annotation.Nullable
  public String getDestinationLocationCode() {
    return destinationLocationCode;
  }

  public void setDestinationLocationCode(String destinationLocationCode) {
    this.destinationLocationCode = destinationLocationCode;
  }


  public ExtendedOriginDestinationLight excludedConnectionPoints(List<String> excludedConnectionPoints) {
    this.excludedConnectionPoints = excludedConnectionPoints;
    return this;
  }

  public ExtendedOriginDestinationLight addExcludedConnectionPointsItem(String excludedConnectionPointsItem) {
    if (this.excludedConnectionPoints == null) {
      this.excludedConnectionPoints = new ArrayList<>();
    }
    this.excludedConnectionPoints.add(excludedConnectionPointsItem);
    return this;
  }

  /**
   * List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
   * @return excludedConnectionPoints
   */
  @javax.annotation.Nullable
  public List<String> getExcludedConnectionPoints() {
    return excludedConnectionPoints;
  }

  public void setExcludedConnectionPoints(List<String> excludedConnectionPoints) {
    this.excludedConnectionPoints = excludedConnectionPoints;
  }


  public ExtendedOriginDestinationLight id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExtendedOriginDestinationLight includedConnectionPoints(List<String> includedConnectionPoints) {
    this.includedConnectionPoints = includedConnectionPoints;
    return this;
  }

  public ExtendedOriginDestinationLight addIncludedConnectionPointsItem(String includedConnectionPointsItem) {
    if (this.includedConnectionPoints == null) {
      this.includedConnectionPoints = new ArrayList<>();
    }
    this.includedConnectionPoints.add(includedConnectionPointsItem);
    return this;
  }

  /**
   * List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
   * @return includedConnectionPoints
   */
  @javax.annotation.Nullable
  public List<String> getIncludedConnectionPoints() {
    return includedConnectionPoints;
  }

  public void setIncludedConnectionPoints(List<String> includedConnectionPoints) {
    this.includedConnectionPoints = includedConnectionPoints;
  }


  public ExtendedOriginDestinationLight originLocationCode(String originLocationCode) {
    this.originLocationCode = originLocationCode;
    return this;
  }

  /**
   * Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
   * @return originLocationCode
   */
  @javax.annotation.Nullable
  public String getOriginLocationCode() {
    return originLocationCode;
  }

  public void setOriginLocationCode(String originLocationCode) {
    this.originLocationCode = originLocationCode;
  }


  public ExtendedOriginDestinationLight arrivalDateTime(DateTimeType arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

  /**
   * Get arrivalDateTime
   * @return arrivalDateTime
   */
  @javax.annotation.Nullable
  public DateTimeType getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(DateTimeType arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }


  public ExtendedOriginDestinationLight departureDateTime(DateTimeType departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

  /**
   * Get departureDateTime
   * @return departureDateTime
   */
  @javax.annotation.Nullable
  public DateTimeType getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(DateTimeType departureDateTime) {
    this.departureDateTime = departureDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedOriginDestinationLight extendedOriginDestinationLight = (ExtendedOriginDestinationLight) o;
    return Objects.equals(this.destinationLocationCode, extendedOriginDestinationLight.destinationLocationCode) &&
        Objects.equals(this.excludedConnectionPoints, extendedOriginDestinationLight.excludedConnectionPoints) &&
        Objects.equals(this.id, extendedOriginDestinationLight.id) &&
        Objects.equals(this.includedConnectionPoints, extendedOriginDestinationLight.includedConnectionPoints) &&
        Objects.equals(this.originLocationCode, extendedOriginDestinationLight.originLocationCode) &&
        Objects.equals(this.arrivalDateTime, extendedOriginDestinationLight.arrivalDateTime) &&
        Objects.equals(this.departureDateTime, extendedOriginDestinationLight.departureDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationLocationCode, excludedConnectionPoints, id, includedConnectionPoints, originLocationCode, arrivalDateTime, departureDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedOriginDestinationLight {\n");
    sb.append("    destinationLocationCode: ").append(toIndentedString(destinationLocationCode)).append("\n");
    sb.append("    excludedConnectionPoints: ").append(toIndentedString(excludedConnectionPoints)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includedConnectionPoints: ").append(toIndentedString(includedConnectionPoints)).append("\n");
    sb.append("    originLocationCode: ").append(toIndentedString(originLocationCode)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationLocationCode");
    openapiFields.add("excludedConnectionPoints");
    openapiFields.add("id");
    openapiFields.add("includedConnectionPoints");
    openapiFields.add("originLocationCode");
    openapiFields.add("arrivalDateTime");
    openapiFields.add("departureDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedOriginDestinationLight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedOriginDestinationLight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedOriginDestinationLight is not found in the empty JSON string", ExtendedOriginDestinationLight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedOriginDestinationLight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedOriginDestinationLight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationLocationCode") != null && !jsonObj.get("destinationLocationCode").isJsonNull()) && !jsonObj.get("destinationLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationLocationCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedConnectionPoints") != null && !jsonObj.get("excludedConnectionPoints").isJsonNull() && !jsonObj.get("excludedConnectionPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedConnectionPoints` to be an array in the JSON string but got `%s`", jsonObj.get("excludedConnectionPoints").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedConnectionPoints") != null && !jsonObj.get("includedConnectionPoints").isJsonNull() && !jsonObj.get("includedConnectionPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedConnectionPoints` to be an array in the JSON string but got `%s`", jsonObj.get("includedConnectionPoints").toString()));
      }
      if ((jsonObj.get("originLocationCode") != null && !jsonObj.get("originLocationCode").isJsonNull()) && !jsonObj.get("originLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originLocationCode").toString()));
      }
      // validate the optional field `arrivalDateTime`
      if (jsonObj.get("arrivalDateTime") != null && !jsonObj.get("arrivalDateTime").isJsonNull()) {
        DateTimeType.validateJsonElement(jsonObj.get("arrivalDateTime"));
      }
      // validate the optional field `departureDateTime`
      if (jsonObj.get("departureDateTime") != null && !jsonObj.get("departureDateTime").isJsonNull()) {
        DateTimeType.validateJsonElement(jsonObj.get("departureDateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedOriginDestinationLight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedOriginDestinationLight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedOriginDestinationLight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedOriginDestinationLight.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedOriginDestinationLight>() {
           @Override
           public void write(JsonWriter out, ExtendedOriginDestinationLight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedOriginDestinationLight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedOriginDestinationLight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedOriginDestinationLight
   * @throws IOException if the JSON string is invalid with respect to ExtendedOriginDestinationLight
   */
  public static ExtendedOriginDestinationLight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedOriginDestinationLight.class);
  }

  /**
   * Convert an instance of ExtendedOriginDestinationLight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

