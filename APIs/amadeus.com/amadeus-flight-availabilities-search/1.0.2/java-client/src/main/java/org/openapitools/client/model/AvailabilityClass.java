/*
 * Flight Availibilities Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TourAllotment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailabilityClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:18.707859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilityClass {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  /**
   * Status of the booking class when it is closed.
   */
  @JsonAdapter(ClosedStatusEnum.Adapter.class)
  public enum ClosedStatusEnum {
    WAITLIST_OPEN("WAITLIST_OPEN"),
    
    WAITLIST_CLOSED("WAITLIST_CLOSED"),
    
    ON_REQUEST("ON_REQUEST");

    private String value;

    ClosedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedStatusEnum fromValue(String value) {
      for (ClosedStatusEnum b : ClosedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_STATUS = "closedStatus";
  @SerializedName(SERIALIZED_NAME_CLOSED_STATUS)
  private ClosedStatusEnum closedStatus;

  public static final String SERIALIZED_NAME_NUMBER_OF_BOOKABLE_SEATS = "numberOfBookableSeats";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BOOKABLE_SEATS)
  private BigDecimal numberOfBookableSeats;

  public static final String SERIALIZED_NAME_TOUR_ALLOTMENT = "tourAllotment";
  @SerializedName(SERIALIZED_NAME_TOUR_ALLOTMENT)
  private TourAllotment tourAllotment;

  public AvailabilityClass() {
  }

  public AvailabilityClass propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public AvailabilityClass closedStatus(ClosedStatusEnum closedStatus) {
    this.closedStatus = closedStatus;
    return this;
  }

  /**
   * Status of the booking class when it is closed.
   * @return closedStatus
   */
  @javax.annotation.Nullable
  public ClosedStatusEnum getClosedStatus() {
    return closedStatus;
  }

  public void setClosedStatus(ClosedStatusEnum closedStatus) {
    this.closedStatus = closedStatus;
  }


  public AvailabilityClass numberOfBookableSeats(BigDecimal numberOfBookableSeats) {
    this.numberOfBookableSeats = numberOfBookableSeats;
    return this;
  }

  /**
   * Number of seats bookable in a single request. Can not be higher than 9.
   * minimum: 1
   * maximum: 9
   * @return numberOfBookableSeats
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfBookableSeats() {
    return numberOfBookableSeats;
  }

  public void setNumberOfBookableSeats(BigDecimal numberOfBookableSeats) {
    this.numberOfBookableSeats = numberOfBookableSeats;
  }


  public AvailabilityClass tourAllotment(TourAllotment tourAllotment) {
    this.tourAllotment = tourAllotment;
    return this;
  }

  /**
   * Get tourAllotment
   * @return tourAllotment
   */
  @javax.annotation.Nullable
  public TourAllotment getTourAllotment() {
    return tourAllotment;
  }

  public void setTourAllotment(TourAllotment tourAllotment) {
    this.tourAllotment = tourAllotment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityClass availabilityClass = (AvailabilityClass) o;
    return Objects.equals(this.propertyClass, availabilityClass.propertyClass) &&
        Objects.equals(this.closedStatus, availabilityClass.closedStatus) &&
        Objects.equals(this.numberOfBookableSeats, availabilityClass.numberOfBookableSeats) &&
        Objects.equals(this.tourAllotment, availabilityClass.tourAllotment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, closedStatus, numberOfBookableSeats, tourAllotment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityClass {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    closedStatus: ").append(toIndentedString(closedStatus)).append("\n");
    sb.append("    numberOfBookableSeats: ").append(toIndentedString(numberOfBookableSeats)).append("\n");
    sb.append("    tourAllotment: ").append(toIndentedString(tourAllotment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class");
    openapiFields.add("closedStatus");
    openapiFields.add("numberOfBookableSeats");
    openapiFields.add("tourAllotment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilityClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilityClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityClass is not found in the empty JSON string", AvailabilityClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilityClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilityClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("closedStatus") != null && !jsonObj.get("closedStatus").isJsonNull()) && !jsonObj.get("closedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedStatus").toString()));
      }
      // validate the optional field `closedStatus`
      if (jsonObj.get("closedStatus") != null && !jsonObj.get("closedStatus").isJsonNull()) {
        ClosedStatusEnum.validateJsonElement(jsonObj.get("closedStatus"));
      }
      // validate the optional field `tourAllotment`
      if (jsonObj.get("tourAllotment") != null && !jsonObj.get("tourAllotment").isJsonNull()) {
        TourAllotment.validateJsonElement(jsonObj.get("tourAllotment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityClass.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityClass>() {
           @Override
           public void write(JsonWriter out, AvailabilityClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilityClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilityClass
   * @throws IOException if the JSON string is invalid with respect to AvailabilityClass
   */
  public static AvailabilityClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityClass.class);
  }

  /**
   * Convert an instance of AvailabilityClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

