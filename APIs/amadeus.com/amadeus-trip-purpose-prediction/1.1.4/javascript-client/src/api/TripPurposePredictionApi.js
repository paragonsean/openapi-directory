/**
 * Trip Purpose Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error400 from '../model/Error400';
import Error500 from '../model/Error500';
import Prediction from '../model/Prediction';

/**
* TripPurposePrediction service.
* @module api/TripPurposePredictionApi
* @version 1.1.4
*/
export default class TripPurposePredictionApi {

    /**
    * Constructs a new TripPurposePredictionApi. 
    * @alias module:api/TripPurposePredictionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTripPurposePrediction operation.
     * @callback module:api/TripPurposePredictionApi~getTripPurposePredictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the forecast purpose of a trip
     * @param {String} originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston
     * @param {String} destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris
     * @param {String} departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25
     * @param {String} returnDate the date on which the traveler will depart from the destination to return to the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28
     * @param {Object} opts Optional parameters
     * @param {String} [searchDate] the date on which the traveler is performing the search. If this parameter is not specified, current date will be used. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28
     * @param {module:api/TripPurposePredictionApi~getTripPurposePredictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prediction}
     */
    getTripPurposePrediction(originLocationCode, destinationLocationCode, departureDate, returnDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'originLocationCode' is set
      if (originLocationCode === undefined || originLocationCode === null) {
        throw new Error("Missing the required parameter 'originLocationCode' when calling getTripPurposePrediction");
      }
      // verify the required parameter 'destinationLocationCode' is set
      if (destinationLocationCode === undefined || destinationLocationCode === null) {
        throw new Error("Missing the required parameter 'destinationLocationCode' when calling getTripPurposePrediction");
      }
      // verify the required parameter 'departureDate' is set
      if (departureDate === undefined || departureDate === null) {
        throw new Error("Missing the required parameter 'departureDate' when calling getTripPurposePrediction");
      }
      // verify the required parameter 'returnDate' is set
      if (returnDate === undefined || returnDate === null) {
        throw new Error("Missing the required parameter 'returnDate' when calling getTripPurposePrediction");
      }

      let pathParams = {
      };
      let queryParams = {
        'originLocationCode': originLocationCode,
        'destinationLocationCode': destinationLocationCode,
        'departureDate': departureDate,
        'returnDate': returnDate,
        'searchDate': opts['searchDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.amadeus+json'];
      let returnType = Prediction;
      return this.apiClient.callApi(
        '/travel/predictions/trip-purpose', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
