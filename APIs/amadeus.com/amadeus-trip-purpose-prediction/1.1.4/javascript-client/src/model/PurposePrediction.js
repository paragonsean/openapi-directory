/**
 * Trip Purpose Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PredictionResultType from './PredictionResultType';

/**
 * The PurposePrediction model module.
 * @module model/PurposePrediction
 * @version 1.1.4
 */
class PurposePrediction {
    /**
     * Constructs a new <code>PurposePrediction</code>.
     * @alias module:model/PurposePrediction
     */
    constructor() { 
        
        PurposePrediction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurposePrediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurposePrediction} obj Optional instance to populate.
     * @return {module:model/PurposePrediction} The populated <code>PurposePrediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurposePrediction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('probability')) {
                obj['probability'] = ApiClient.convertToType(data['probability'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = PredictionResultType.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurposePrediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurposePrediction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['probability'] && !(typeof data['probability'] === 'string' || data['probability'] instanceof String)) {
            throw new Error("Expected the field `probability` to be a primitive type in the JSON string but got " + data['probability']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * item identifier
 * @member {String} id
 */
PurposePrediction.prototype['id'] = undefined;

/**
 * probability of the forecast (between 0 and 1)
 * @member {String} probability
 */
PurposePrediction.prototype['probability'] = undefined;

/**
 * @member {module:model/PredictionResultType} result
 */
PurposePrediction.prototype['result'] = undefined;

/**
 * @member {String} subType
 */
PurposePrediction.prototype['subType'] = undefined;

/**
 * the resource name (`prediction`)
 * @member {String} type
 */
PurposePrediction.prototype['type'] = undefined;






export default PurposePrediction;

