/**
 * Trip Purpose Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaults::OAIDefaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaults::OAIDefaults() {
    this->initializeModel();
}

OAIDefaults::~OAIDefaults() {}

void OAIDefaults::initializeModel() {

    m_search_date_isSet = false;
    m_search_date_isValid = false;
}

void OAIDefaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaults::fromJsonObject(QJsonObject json) {

    m_search_date_isValid = ::OpenAPI::fromJsonValue(m_search_date, json[QString("searchDate")]);
    m_search_date_isSet = !json[QString("searchDate")].isNull() && m_search_date_isValid;
}

QString OAIDefaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaults::asJsonObject() const {
    QJsonObject obj;
    if (m_search_date_isSet) {
        obj.insert(QString("searchDate"), ::OpenAPI::toJsonValue(m_search_date));
    }
    return obj;
}

QString OAIDefaults::getSearchDate() const {
    return m_search_date;
}
void OAIDefaults::setSearchDate(const QString &search_date) {
    m_search_date = search_date;
    m_search_date_isSet = true;
}

bool OAIDefaults::is_search_date_Set() const{
    return m_search_date_isSet;
}

bool OAIDefaults::is_search_date_Valid() const{
    return m_search_date_isValid;
}

bool OAIDefaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
