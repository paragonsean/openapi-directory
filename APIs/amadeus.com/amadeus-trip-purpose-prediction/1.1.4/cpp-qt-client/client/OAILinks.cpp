/**
 * Trip Purpose Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinks::OAILinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinks::OAILinks() {
    this->initializeModel();
}

OAILinks::~OAILinks() {}

void OAILinks::initializeModel() {

    m_related_isSet = false;
    m_related_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinks::fromJsonObject(QJsonObject json) {

    m_related_isValid = ::OpenAPI::fromJsonValue(m_related, json[QString("related")]);
    m_related_isSet = !json[QString("related")].isNull() && m_related_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinks::asJsonObject() const {
    QJsonObject obj;
    if (m_related_isSet) {
        obj.insert(QString("related"), ::OpenAPI::toJsonValue(m_related));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILinks::getRelated() const {
    return m_related;
}
void OAILinks::setRelated(const QString &related) {
    m_related = related;
    m_related_isSet = true;
}

bool OAILinks::is_related_Set() const{
    return m_related_isSet;
}

bool OAILinks::is_related_Valid() const{
    return m_related_isValid;
}

QString OAILinks::getSelf() const {
    return m_self;
}
void OAILinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAILinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAILinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAILinks::getType() const {
    return m_type;
}
void OAILinks::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILinks::is_type_Set() const{
    return m_type_isSet;
}

bool OAILinks::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_related_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
