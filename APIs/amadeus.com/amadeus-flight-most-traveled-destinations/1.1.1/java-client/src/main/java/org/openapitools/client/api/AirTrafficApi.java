/*
 * Flight Most Traveled Destinations
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AirTrafficApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AirTrafficApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AirTrafficApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAirTraffic
     * @param originCityCode Code for the origin city following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)). - e.g. BOS for Boston (required)
     * @param period period when consumers are traveling. * It can be a month only.  * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format must be used - e.g. 2015-05.  * Period ranges are not supported.  * Only periods from 2011-01 up to previous month are valid.  * Future dates are not supported.  (required)
     * @param max maximum number of destinations in the response. Default value is **10** and maximum value is 50. (optional, default to 10.0)
     * @param fields list of attributes desired in the response or list of attributes to remove from the response (with \&quot;-\&quot; before fields)  * The attributes names must contain the whole path (except resource name) e.g. travelers (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * **analytics.flights.score** - sort destination by flights score (decreasing) * **analytics.travelers.score** - sort destination by traveler&#39;s score (decreasing)  (optional, default to analytics.travelers.score)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirTrafficCall(String originCityCode, String period, BigDecimal max, String fields, Integer pageLimit, Integer pageOffset, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/travel/analytics/air-traffic/traveled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originCityCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originCityCode", originCityCode));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (pageLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[limit]", pageLimit));
        }

        if (pageOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[offset]", pageOffset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAirTrafficValidateBeforeCall(String originCityCode, String period, BigDecimal max, String fields, Integer pageLimit, Integer pageOffset, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originCityCode' is set
        if (originCityCode == null) {
            throw new ApiException("Missing the required parameter 'originCityCode' when calling getAirTraffic(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getAirTraffic(Async)");
        }

        return getAirTrafficCall(originCityCode, period, max, fields, pageLimit, pageOffset, sort, _callback);

    }

    /**
     * Returns a list of air traffic reports.
     * 
     * @param originCityCode Code for the origin city following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)). - e.g. BOS for Boston (required)
     * @param period period when consumers are traveling. * It can be a month only.  * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format must be used - e.g. 2015-05.  * Period ranges are not supported.  * Only periods from 2011-01 up to previous month are valid.  * Future dates are not supported.  (required)
     * @param max maximum number of destinations in the response. Default value is **10** and maximum value is 50. (optional, default to 10.0)
     * @param fields list of attributes desired in the response or list of attributes to remove from the response (with \&quot;-\&quot; before fields)  * The attributes names must contain the whole path (except resource name) e.g. travelers (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * **analytics.flights.score** - sort destination by flights score (decreasing) * **analytics.travelers.score** - sort destination by traveler&#39;s score (decreasing)  (optional, default to analytics.travelers.score)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Success getAirTraffic(String originCityCode, String period, BigDecimal max, String fields, Integer pageLimit, Integer pageOffset, String sort) throws ApiException {
        ApiResponse<Success> localVarResp = getAirTrafficWithHttpInfo(originCityCode, period, max, fields, pageLimit, pageOffset, sort);
        return localVarResp.getData();
    }

    /**
     * Returns a list of air traffic reports.
     * 
     * @param originCityCode Code for the origin city following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)). - e.g. BOS for Boston (required)
     * @param period period when consumers are traveling. * It can be a month only.  * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format must be used - e.g. 2015-05.  * Period ranges are not supported.  * Only periods from 2011-01 up to previous month are valid.  * Future dates are not supported.  (required)
     * @param max maximum number of destinations in the response. Default value is **10** and maximum value is 50. (optional, default to 10.0)
     * @param fields list of attributes desired in the response or list of attributes to remove from the response (with \&quot;-\&quot; before fields)  * The attributes names must contain the whole path (except resource name) e.g. travelers (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * **analytics.flights.score** - sort destination by flights score (decreasing) * **analytics.travelers.score** - sort destination by traveler&#39;s score (decreasing)  (optional, default to analytics.travelers.score)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> getAirTrafficWithHttpInfo(String originCityCode, String period, BigDecimal max, String fields, Integer pageLimit, Integer pageOffset, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAirTrafficValidateBeforeCall(originCityCode, period, max, fields, pageLimit, pageOffset, sort, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of air traffic reports. (asynchronously)
     * 
     * @param originCityCode Code for the origin city following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)). - e.g. BOS for Boston (required)
     * @param period period when consumers are traveling. * It can be a month only.  * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format must be used - e.g. 2015-05.  * Period ranges are not supported.  * Only periods from 2011-01 up to previous month are valid.  * Future dates are not supported.  (required)
     * @param max maximum number of destinations in the response. Default value is **10** and maximum value is 50. (optional, default to 10.0)
     * @param fields list of attributes desired in the response or list of attributes to remove from the response (with \&quot;-\&quot; before fields)  * The attributes names must contain the whole path (except resource name) e.g. travelers (optional)
     * @param pageLimit maximum items in one page (optional, default to 10)
     * @param pageOffset start index of the requested page (optional, default to 0)
     * @param sort defines on which attribute the sorting will be done: * **analytics.flights.score** - sort destination by flights score (decreasing) * **analytics.travelers.score** - sort destination by traveler&#39;s score (decreasing)  (optional, default to analytics.travelers.score)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 2781    | INVALID LENGTH 4926    | INVALID DATA RECEIVED                                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirTrafficAsync(String originCityCode, String period, BigDecimal max, String fields, Integer pageLimit, Integer pageOffset, String sort, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAirTrafficValidateBeforeCall(originCityCode, period, max, fields, pageLimit, pageOffset, sort, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
