# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics import Analytics
from openapi_server import util


class AirTraffic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics: Analytics=None, destination: str=None, sub_type: str=None, type: str=None):
        """AirTraffic - a model defined in OpenAPI

        :param analytics: The analytics of this AirTraffic.
        :param destination: The destination of this AirTraffic.
        :param sub_type: The sub_type of this AirTraffic.
        :param type: The type of this AirTraffic.
        """
        self.openapi_types = {
            'analytics': Analytics,
            'destination': str,
            'sub_type': str,
            'type': str
        }

        self.attribute_map = {
            'analytics': 'analytics',
            'destination': 'destination',
            'sub_type': 'subType',
            'type': 'type'
        }

        self._analytics = analytics
        self._destination = destination
        self._sub_type = sub_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirTraffic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Air_Traffic of this AirTraffic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics(self):
        """Gets the analytics of this AirTraffic.


        :return: The analytics of this AirTraffic.
        :rtype: Analytics
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this AirTraffic.


        :param analytics: The analytics of this AirTraffic.
        :type analytics: Analytics
        """

        self._analytics = analytics

    @property
    def destination(self):
        """Gets the destination of this AirTraffic.

        IATA code of the destination city - [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)

        :return: The destination of this AirTraffic.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this AirTraffic.

        IATA code of the destination city - [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)

        :param destination: The destination of this AirTraffic.
        :type destination: str
        """

        self._destination = destination

    @property
    def sub_type(self):
        """Gets the sub_type of this AirTraffic.


        :return: The sub_type of this AirTraffic.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this AirTraffic.


        :param sub_type: The sub_type of this AirTraffic.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this AirTraffic.


        :return: The type of this AirTraffic.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AirTraffic.


        :param type: The type of this AirTraffic.
        :type type: str
        """

        self._type = type
