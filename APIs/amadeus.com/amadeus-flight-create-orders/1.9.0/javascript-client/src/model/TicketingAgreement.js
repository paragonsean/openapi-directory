/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TicketingAgreementOption from './TicketingAgreementOption';

/**
 * The TicketingAgreement model module.
 * @module model/TicketingAgreement
 * @version 1.9.0
 */
class TicketingAgreement {
    /**
     * Constructs a new <code>TicketingAgreement</code>.
     * ticketing agreement
     * @alias module:model/TicketingAgreement
     */
    constructor() { 
        
        TicketingAgreement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TicketingAgreement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TicketingAgreement} obj Optional instance to populate.
     * @return {module:model/TicketingAgreement} The populated <code>TicketingAgreement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TicketingAgreement();

            if (data.hasOwnProperty('dateTime')) {
                obj['dateTime'] = ApiClient.convertToType(data['dateTime'], 'String');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'String');
            }
            if (data.hasOwnProperty('option')) {
                obj['option'] = TicketingAgreementOption.constructFromObject(data['option']);
            }
            if (data.hasOwnProperty('segmentIds')) {
                obj['segmentIds'] = ApiClient.convertToType(data['segmentIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TicketingAgreement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TicketingAgreement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dateTime'] && !(typeof data['dateTime'] === 'string' || data['dateTime'] instanceof String)) {
            throw new Error("Expected the field `dateTime` to be a primitive type in the JSON string but got " + data['dateTime']);
        }
        // ensure the json data is a string
        if (data['delay'] && !(typeof data['delay'] === 'string' || data['delay'] instanceof String)) {
            throw new Error("Expected the field `delay` to be a primitive type in the JSON string but got " + data['delay']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segmentIds'])) {
            throw new Error("Expected the field `segmentIds` to be an array in the JSON data but got " + data['segmentIds']);
        }

        return true;
    }


}



/**
 * Exact date to apply automatic process if no issuance. YYYY-MM-DD format, e.g. 2019-06-07
 * @member {String} dateTime
 */
TicketingAgreement.prototype['dateTime'] = undefined;

/**
 * Delay before applying automatic process if no issuance in days
 * @member {String} delay
 */
TicketingAgreement.prototype['delay'] = undefined;

/**
 * @member {module:model/TicketingAgreementOption} option
 */
TicketingAgreement.prototype['option'] = undefined;

/**
 * Ids of the impacted segments
 * @member {Array.<String>} segmentIds
 */
TicketingAgreement.prototype['segmentIds'] = undefined;






export default TicketingAgreement;

