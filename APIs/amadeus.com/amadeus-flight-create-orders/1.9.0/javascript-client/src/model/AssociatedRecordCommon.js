/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssociatedRecordCommon model module.
 * @module model/AssociatedRecordCommon
 * @version 1.9.0
 */
class AssociatedRecordCommon {
    /**
     * Constructs a new <code>AssociatedRecordCommon</code>.
     * describes the relation between the current reservation and another one
     * @alias module:model/AssociatedRecordCommon
     */
    constructor() { 
        
        AssociatedRecordCommon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssociatedRecordCommon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssociatedRecordCommon} obj Optional instance to populate.
     * @return {module:model/AssociatedRecordCommon} The populated <code>AssociatedRecordCommon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssociatedRecordCommon();

            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('originSystemCode')) {
                obj['originSystemCode'] = ApiClient.convertToType(data['originSystemCode'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssociatedRecordCommon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssociatedRecordCommon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['originSystemCode'] && !(typeof data['originSystemCode'] === 'string' || data['originSystemCode'] instanceof String)) {
            throw new Error("Expected the field `originSystemCode` to be a primitive type in the JSON string but got " + data['originSystemCode']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }

        return true;
    }


}



/**
 * Creation date of the referenced reservation. Date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss.sss format, e.g. 2019-07-09T12:30:00.000
 * @member {String} creationDate
 */
AssociatedRecordCommon.prototype['creationDate'] = undefined;

/**
 * Designates the system which has originated the referenced reservation.
 * @member {String} originSystemCode
 */
AssociatedRecordCommon.prototype['originSystemCode'] = undefined;

/**
 * Record locator [Amadeus or OA] with which the current reservation is related. In case of a codeshare relation, it enables to identify the operating PNR.
 * @member {String} reference
 */
AssociatedRecordCommon.prototype['reference'] = undefined;






export default AssociatedRecordCommon;

