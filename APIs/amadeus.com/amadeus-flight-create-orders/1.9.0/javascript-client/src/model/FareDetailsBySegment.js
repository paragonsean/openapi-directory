/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalServicesRequest from './AdditionalServicesRequest';
import AllotmentDetails from './AllotmentDetails';
import BaggageAllowance from './BaggageAllowance';
import SliceDiceIndicator from './SliceDiceIndicator';
import TravelClass from './TravelClass';

/**
 * The FareDetailsBySegment model module.
 * @module model/FareDetailsBySegment
 * @version 1.9.0
 */
class FareDetailsBySegment {
    /**
     * Constructs a new <code>FareDetailsBySegment</code>.
     * Fare details of the segment
     * @alias module:model/FareDetailsBySegment
     * @param segmentId {String} Id of the segment
     */
    constructor(segmentId) { 
        
        FareDetailsBySegment.initialize(this, segmentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, segmentId) { 
        obj['segmentId'] = segmentId;
    }

    /**
     * Constructs a <code>FareDetailsBySegment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FareDetailsBySegment} obj Optional instance to populate.
     * @return {module:model/FareDetailsBySegment} The populated <code>FareDetailsBySegment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FareDetailsBySegment();

            if (data.hasOwnProperty('additionalServices')) {
                obj['additionalServices'] = AdditionalServicesRequest.constructFromObject(data['additionalServices']);
            }
            if (data.hasOwnProperty('allotmentDetails')) {
                obj['allotmentDetails'] = AllotmentDetails.constructFromObject(data['allotmentDetails']);
            }
            if (data.hasOwnProperty('brandedFare')) {
                obj['brandedFare'] = ApiClient.convertToType(data['brandedFare'], 'String');
            }
            if (data.hasOwnProperty('cabin')) {
                obj['cabin'] = TravelClass.constructFromObject(data['cabin']);
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('fareBasis')) {
                obj['fareBasis'] = ApiClient.convertToType(data['fareBasis'], 'String');
            }
            if (data.hasOwnProperty('includedCheckedBags')) {
                obj['includedCheckedBags'] = BaggageAllowance.constructFromObject(data['includedCheckedBags']);
            }
            if (data.hasOwnProperty('isAllotment')) {
                obj['isAllotment'] = ApiClient.convertToType(data['isAllotment'], 'Boolean');
            }
            if (data.hasOwnProperty('segmentId')) {
                obj['segmentId'] = ApiClient.convertToType(data['segmentId'], 'String');
            }
            if (data.hasOwnProperty('sliceDiceIndicator')) {
                obj['sliceDiceIndicator'] = SliceDiceIndicator.constructFromObject(data['sliceDiceIndicator']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FareDetailsBySegment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FareDetailsBySegment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FareDetailsBySegment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `additionalServices`
        if (data['additionalServices']) { // data not null
          AdditionalServicesRequest.validateJSON(data['additionalServices']);
        }
        // validate the optional field `allotmentDetails`
        if (data['allotmentDetails']) { // data not null
          AllotmentDetails.validateJSON(data['allotmentDetails']);
        }
        // ensure the json data is a string
        if (data['brandedFare'] && !(typeof data['brandedFare'] === 'string' || data['brandedFare'] instanceof String)) {
            throw new Error("Expected the field `brandedFare` to be a primitive type in the JSON string but got " + data['brandedFare']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['fareBasis'] && !(typeof data['fareBasis'] === 'string' || data['fareBasis'] instanceof String)) {
            throw new Error("Expected the field `fareBasis` to be a primitive type in the JSON string but got " + data['fareBasis']);
        }
        // validate the optional field `includedCheckedBags`
        if (data['includedCheckedBags']) { // data not null
          BaggageAllowance.validateJSON(data['includedCheckedBags']);
        }
        // ensure the json data is a string
        if (data['segmentId'] && !(typeof data['segmentId'] === 'string' || data['segmentId'] instanceof String)) {
            throw new Error("Expected the field `segmentId` to be a primitive type in the JSON string but got " + data['segmentId']);
        }

        return true;
    }


}

FareDetailsBySegment.RequiredProperties = ["segmentId"];

/**
 * @member {module:model/AdditionalServicesRequest} additionalServices
 */
FareDetailsBySegment.prototype['additionalServices'] = undefined;

/**
 * @member {module:model/AllotmentDetails} allotmentDetails
 */
FareDetailsBySegment.prototype['allotmentDetails'] = undefined;

/**
 * The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
 * @member {String} brandedFare
 */
FareDetailsBySegment.prototype['brandedFare'] = undefined;

/**
 * @member {module:model/TravelClass} cabin
 */
FareDetailsBySegment.prototype['cabin'] = undefined;

/**
 * The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
 * @member {String} class
 */
FareDetailsBySegment.prototype['class'] = undefined;

/**
 * Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
 * @member {String} fareBasis
 */
FareDetailsBySegment.prototype['fareBasis'] = undefined;

/**
 * @member {module:model/BaggageAllowance} includedCheckedBags
 */
FareDetailsBySegment.prototype['includedCheckedBags'] = undefined;

/**
 * True if the corresponding booking class is in an allotment
 * @member {Boolean} isAllotment
 */
FareDetailsBySegment.prototype['isAllotment'] = undefined;

/**
 * Id of the segment
 * @member {String} segmentId
 */
FareDetailsBySegment.prototype['segmentId'] = undefined;

/**
 * @member {module:model/SliceDiceIndicator} sliceDiceIndicator
 */
FareDetailsBySegment.prototype['sliceDiceIndicator'] = undefined;






export default FareDetailsBySegment;

