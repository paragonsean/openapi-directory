/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedPrice from './ExtendedPrice';
import FlightOfferSource from './FlightOfferSource';
import Itineraries from './Itineraries';
import PricingOptions from './PricingOptions';
import TravelerPricing from './TravelerPricing';

/**
 * The FlightOffer model module.
 * @module model/FlightOffer
 * @version 1.9.0
 */
class FlightOffer {
    /**
     * Constructs a new <code>FlightOffer</code>.
     * @alias module:model/FlightOffer
     * @param id {String} Id of the flight offer
     * @param type {String} the resource name
     */
    constructor(id, type) { 
        
        FlightOffer.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FlightOffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightOffer} obj Optional instance to populate.
     * @return {module:model/FlightOffer} The populated <code>FlightOffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightOffer();

            if (data.hasOwnProperty('disablePricing')) {
                obj['disablePricing'] = ApiClient.convertToType(data['disablePricing'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instantTicketingRequired')) {
                obj['instantTicketingRequired'] = ApiClient.convertToType(data['instantTicketingRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('itineraries')) {
                obj['itineraries'] = ApiClient.convertToType(data['itineraries'], [Itineraries]);
            }
            if (data.hasOwnProperty('lastTicketingDate')) {
                obj['lastTicketingDate'] = ApiClient.convertToType(data['lastTicketingDate'], 'String');
            }
            if (data.hasOwnProperty('nonHomogeneous')) {
                obj['nonHomogeneous'] = ApiClient.convertToType(data['nonHomogeneous'], 'Boolean');
            }
            if (data.hasOwnProperty('numberOfBookableSeats')) {
                obj['numberOfBookableSeats'] = ApiClient.convertToType(data['numberOfBookableSeats'], 'Number');
            }
            if (data.hasOwnProperty('oneWay')) {
                obj['oneWay'] = ApiClient.convertToType(data['oneWay'], 'Boolean');
            }
            if (data.hasOwnProperty('paymentCardRequired')) {
                obj['paymentCardRequired'] = ApiClient.convertToType(data['paymentCardRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ExtendedPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('pricingOptions')) {
                obj['pricingOptions'] = PricingOptions.constructFromObject(data['pricingOptions']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = FlightOfferSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('travelerPricings')) {
                obj['travelerPricings'] = ApiClient.convertToType(data['travelerPricings'], [TravelerPricing]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validatingAirlineCodes')) {
                obj['validatingAirlineCodes'] = ApiClient.convertToType(data['validatingAirlineCodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightOffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightOffer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlightOffer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['itineraries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itineraries'])) {
                throw new Error("Expected the field `itineraries` to be an array in the JSON data but got " + data['itineraries']);
            }
            // validate the optional field `itineraries` (array)
            for (const item of data['itineraries']) {
                Itineraries.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastTicketingDate'] && !(typeof data['lastTicketingDate'] === 'string' || data['lastTicketingDate'] instanceof String)) {
            throw new Error("Expected the field `lastTicketingDate` to be a primitive type in the JSON string but got " + data['lastTicketingDate']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ExtendedPrice.validateJSON(data['price']);
        }
        // validate the optional field `pricingOptions`
        if (data['pricingOptions']) { // data not null
          PricingOptions.validateJSON(data['pricingOptions']);
        }
        if (data['travelerPricings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['travelerPricings'])) {
                throw new Error("Expected the field `travelerPricings` to be an array in the JSON data but got " + data['travelerPricings']);
            }
            // validate the optional field `travelerPricings` (array)
            for (const item of data['travelerPricings']) {
                TravelerPricing.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validatingAirlineCodes'])) {
            throw new Error("Expected the field `validatingAirlineCodes` to be an array in the JSON data but got " + data['validatingAirlineCodes']);
        }

        return true;
    }


}

FlightOffer.RequiredProperties = ["id", "type"];

/**
 * BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \"GDS\"
 * @member {Boolean} disablePricing
 */
FlightOffer.prototype['disablePricing'] = undefined;

/**
 * Id of the flight offer
 * @member {String} id
 */
FlightOffer.prototype['id'] = undefined;

/**
 * If true, inform that a ticketing will be required at booking step.
 * @member {Boolean} instantTicketingRequired
 */
FlightOffer.prototype['instantTicketingRequired'] = undefined;

/**
 * @member {Array.<module:model/Itineraries>} itineraries
 */
FlightOffer.prototype['itineraries'] = undefined;

/**
 * If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07
 * @member {String} lastTicketingDate
 */
FlightOffer.prototype['lastTicketingDate'] = undefined;

/**
 * If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)
 * @member {Boolean} nonHomogeneous
 */
FlightOffer.prototype['nonHomogeneous'] = undefined;

/**
 * Number of seats bookable in a single request. Can not be higher than 9.
 * @member {Number} numberOfBookableSeats
 */
FlightOffer.prototype['numberOfBookableSeats'] = undefined;

/**
 * If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.
 * @member {Boolean} oneWay
 */
FlightOffer.prototype['oneWay'] = undefined;

/**
 * If true, a payment card is mandatory to book this flight offer
 * @member {Boolean} paymentCardRequired
 */
FlightOffer.prototype['paymentCardRequired'] = undefined;

/**
 * @member {module:model/ExtendedPrice} price
 */
FlightOffer.prototype['price'] = undefined;

/**
 * @member {module:model/PricingOptions} pricingOptions
 */
FlightOffer.prototype['pricingOptions'] = undefined;

/**
 * @member {module:model/FlightOfferSource} source
 */
FlightOffer.prototype['source'] = undefined;

/**
 * Fare information for each traveler/segment
 * @member {Array.<module:model/TravelerPricing>} travelerPricings
 */
FlightOffer.prototype['travelerPricings'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
FlightOffer.prototype['type'] = undefined;

/**
 * This option ensures that the system will only consider these airlines.
 * @member {Array.<String>} validatingAirlineCodes
 */
FlightOffer.prototype['validatingAirlineCodes'] = undefined;






export default FlightOffer;

