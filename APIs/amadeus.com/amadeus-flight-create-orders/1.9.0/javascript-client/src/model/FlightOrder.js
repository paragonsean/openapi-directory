/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirTravelDocument from './AirTravelDocument';
import AssociatedRecord from './AssociatedRecord';
import AutomatedProcess from './AutomatedProcess';
import Contact from './Contact';
import FlightOffer from './FlightOffer';
import FormOfIdentification from './FormOfIdentification';
import FormOfPayment from './FormOfPayment';
import Remarks from './Remarks';
import TicketingAgreement from './TicketingAgreement';
import Traveler from './Traveler';

/**
 * The FlightOrder model module.
 * @module model/FlightOrder
 * @version 1.9.0
 */
class FlightOrder {
    /**
     * Constructs a new <code>FlightOrder</code>.
     * input parameter to create a flight order
     * @alias module:model/FlightOrder
     * @param flightOffers {Array.<module:model/FlightOffer>} list of flight offer
     * @param type {String} the resource name
     */
    constructor(flightOffers, type) { 
        
        FlightOrder.initialize(this, flightOffers, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flightOffers, type) { 
        obj['flightOffers'] = flightOffers;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FlightOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlightOrder} obj Optional instance to populate.
     * @return {module:model/FlightOrder} The populated <code>FlightOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlightOrder();

            if (data.hasOwnProperty('associatedRecords')) {
                obj['associatedRecords'] = ApiClient.convertToType(data['associatedRecords'], [AssociatedRecord]);
            }
            if (data.hasOwnProperty('automatedProcess')) {
                obj['automatedProcess'] = ApiClient.convertToType(data['automatedProcess'], [AutomatedProcess]);
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('flightOffers')) {
                obj['flightOffers'] = ApiClient.convertToType(data['flightOffers'], [FlightOffer]);
            }
            if (data.hasOwnProperty('formOfIdentifications')) {
                obj['formOfIdentifications'] = ApiClient.convertToType(data['formOfIdentifications'], [FormOfIdentification]);
            }
            if (data.hasOwnProperty('formOfPayments')) {
                obj['formOfPayments'] = ApiClient.convertToType(data['formOfPayments'], [FormOfPayment]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ownerOfficeId')) {
                obj['ownerOfficeId'] = ApiClient.convertToType(data['ownerOfficeId'], 'String');
            }
            if (data.hasOwnProperty('queuingOfficeId')) {
                obj['queuingOfficeId'] = ApiClient.convertToType(data['queuingOfficeId'], 'String');
            }
            if (data.hasOwnProperty('remarks')) {
                obj['remarks'] = Remarks.constructFromObject(data['remarks']);
            }
            if (data.hasOwnProperty('ticketingAgreement')) {
                obj['ticketingAgreement'] = TicketingAgreement.constructFromObject(data['ticketingAgreement']);
            }
            if (data.hasOwnProperty('tickets')) {
                obj['tickets'] = ApiClient.convertToType(data['tickets'], [AirTravelDocument]);
            }
            if (data.hasOwnProperty('travelers')) {
                obj['travelers'] = ApiClient.convertToType(data['travelers'], [Traveler]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlightOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlightOrder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlightOrder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['associatedRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associatedRecords'])) {
                throw new Error("Expected the field `associatedRecords` to be an array in the JSON data but got " + data['associatedRecords']);
            }
            // validate the optional field `associatedRecords` (array)
            for (const item of data['associatedRecords']) {
                AssociatedRecord.validateJSON(item);
            };
        }
        if (data['automatedProcess']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['automatedProcess'])) {
                throw new Error("Expected the field `automatedProcess` to be an array in the JSON data but got " + data['automatedProcess']);
            }
            // validate the optional field `automatedProcess` (array)
            for (const item of data['automatedProcess']) {
                AutomatedProcess.validateJSON(item);
            };
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }
        if (data['flightOffers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flightOffers'])) {
                throw new Error("Expected the field `flightOffers` to be an array in the JSON data but got " + data['flightOffers']);
            }
            // validate the optional field `flightOffers` (array)
            for (const item of data['flightOffers']) {
                FlightOffer.validateJSON(item);
            };
        }
        if (data['formOfIdentifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formOfIdentifications'])) {
                throw new Error("Expected the field `formOfIdentifications` to be an array in the JSON data but got " + data['formOfIdentifications']);
            }
            // validate the optional field `formOfIdentifications` (array)
            for (const item of data['formOfIdentifications']) {
                FormOfIdentification.validateJSON(item);
            };
        }
        if (data['formOfPayments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formOfPayments'])) {
                throw new Error("Expected the field `formOfPayments` to be an array in the JSON data but got " + data['formOfPayments']);
            }
            // validate the optional field `formOfPayments` (array)
            for (const item of data['formOfPayments']) {
                FormOfPayment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ownerOfficeId'] && !(typeof data['ownerOfficeId'] === 'string' || data['ownerOfficeId'] instanceof String)) {
            throw new Error("Expected the field `ownerOfficeId` to be a primitive type in the JSON string but got " + data['ownerOfficeId']);
        }
        // ensure the json data is a string
        if (data['queuingOfficeId'] && !(typeof data['queuingOfficeId'] === 'string' || data['queuingOfficeId'] instanceof String)) {
            throw new Error("Expected the field `queuingOfficeId` to be a primitive type in the JSON string but got " + data['queuingOfficeId']);
        }
        // validate the optional field `remarks`
        if (data['remarks']) { // data not null
          Remarks.validateJSON(data['remarks']);
        }
        // validate the optional field `ticketingAgreement`
        if (data['ticketingAgreement']) { // data not null
          TicketingAgreement.validateJSON(data['ticketingAgreement']);
        }
        if (data['tickets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tickets'])) {
                throw new Error("Expected the field `tickets` to be an array in the JSON data but got " + data['tickets']);
            }
            // validate the optional field `tickets` (array)
            for (const item of data['tickets']) {
                AirTravelDocument.validateJSON(item);
            };
        }
        if (data['travelers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['travelers'])) {
                throw new Error("Expected the field `travelers` to be an array in the JSON data but got " + data['travelers']);
            }
            // validate the optional field `travelers` (array)
            for (const item of data['travelers']) {
                Traveler.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FlightOrder.RequiredProperties = ["flightOffers", "type"];

/**
 * list of associated record
 * @member {Array.<module:model/AssociatedRecord>} associatedRecords
 */
FlightOrder.prototype['associatedRecords'] = undefined;

/**
 * list of automatic queuing
 * @member {Array.<module:model/AutomatedProcess>} automatedProcess
 */
FlightOrder.prototype['automatedProcess'] = undefined;

/**
 * list of general contact information
 * @member {Array.<module:model/Contact>} contacts
 */
FlightOrder.prototype['contacts'] = undefined;

/**
 * list of flight offer
 * @member {Array.<module:model/FlightOffer>} flightOffers
 */
FlightOrder.prototype['flightOffers'] = undefined;

/**
 * list of forms of identifications applicable to travelers by airline
 * @member {Array.<module:model/FormOfIdentification>} formOfIdentifications
 */
FlightOrder.prototype['formOfIdentifications'] = undefined;

/**
 * list of form of payments
 * @member {Array.<module:model/FormOfPayment>} formOfPayments
 */
FlightOrder.prototype['formOfPayments'] = undefined;

/**
 * unique identifier of the flight order
 * @member {String} id
 */
FlightOrder.prototype['id'] = undefined;

/**
 * office Id where will be transfered the ownership of the order
 * @member {String} ownerOfficeId
 */
FlightOrder.prototype['ownerOfficeId'] = undefined;

/**
 * office Id where to queue the order
 * @member {String} queuingOfficeId
 */
FlightOrder.prototype['queuingOfficeId'] = undefined;

/**
 * @member {module:model/Remarks} remarks
 */
FlightOrder.prototype['remarks'] = undefined;

/**
 * @member {module:model/TicketingAgreement} ticketingAgreement
 */
FlightOrder.prototype['ticketingAgreement'] = undefined;

/**
 * list of tickets
 * @member {Array.<module:model/AirTravelDocument>} tickets
 */
FlightOrder.prototype['tickets'] = undefined;

/**
 * list of travelers
 * @member {Array.<module:model/Traveler>} travelers
 */
FlightOrder.prototype['travelers'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
FlightOrder.prototype['type'] = undefined;






export default FlightOrder;

