# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fare_type: List[str]=None, included_checked_bags_only: bool=None, no_penalty_fare: bool=None, no_restriction_fare: bool=None, refundable_fare: bool=None):
        """PricingOptions - a model defined in OpenAPI

        :param fare_type: The fare_type of this PricingOptions.
        :param included_checked_bags_only: The included_checked_bags_only of this PricingOptions.
        :param no_penalty_fare: The no_penalty_fare of this PricingOptions.
        :param no_restriction_fare: The no_restriction_fare of this PricingOptions.
        :param refundable_fare: The refundable_fare of this PricingOptions.
        """
        self.openapi_types = {
            'fare_type': List[str],
            'included_checked_bags_only': bool,
            'no_penalty_fare': bool,
            'no_restriction_fare': bool,
            'refundable_fare': bool
        }

        self.attribute_map = {
            'fare_type': 'fareType',
            'included_checked_bags_only': 'includedCheckedBagsOnly',
            'no_penalty_fare': 'noPenaltyFare',
            'no_restriction_fare': 'noRestrictionFare',
            'refundable_fare': 'refundableFare'
        }

        self._fare_type = fare_type
        self._included_checked_bags_only = included_checked_bags_only
        self._no_penalty_fare = no_penalty_fare
        self._no_restriction_fare = no_restriction_fare
        self._refundable_fare = refundable_fare

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingOptions of this PricingOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fare_type(self):
        """Gets the fare_type of this PricingOptions.

        type of fare of the flight-offer

        :return: The fare_type of this PricingOptions.
        :rtype: List[str]
        """
        return self._fare_type

    @fare_type.setter
    def fare_type(self, fare_type):
        """Sets the fare_type of this PricingOptions.

        type of fare of the flight-offer

        :param fare_type: The fare_type of this PricingOptions.
        :type fare_type: List[str]
        """
        allowed_values = ["PUBLISHED"]  # noqa: E501
        if not set(fare_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `fare_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(fare_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._fare_type = fare_type

    @property
    def included_checked_bags_only(self):
        """Gets the included_checked_bags_only of this PricingOptions.

        If true, returns the flight-offers with included checked bags only

        :return: The included_checked_bags_only of this PricingOptions.
        :rtype: bool
        """
        return self._included_checked_bags_only

    @included_checked_bags_only.setter
    def included_checked_bags_only(self, included_checked_bags_only):
        """Sets the included_checked_bags_only of this PricingOptions.

        If true, returns the flight-offers with included checked bags only

        :param included_checked_bags_only: The included_checked_bags_only of this PricingOptions.
        :type included_checked_bags_only: bool
        """

        self._included_checked_bags_only = included_checked_bags_only

    @property
    def no_penalty_fare(self):
        """Gets the no_penalty_fare of this PricingOptions.

        If true, returns the flight-offers with no penalty fares only

        :return: The no_penalty_fare of this PricingOptions.
        :rtype: bool
        """
        return self._no_penalty_fare

    @no_penalty_fare.setter
    def no_penalty_fare(self, no_penalty_fare):
        """Sets the no_penalty_fare of this PricingOptions.

        If true, returns the flight-offers with no penalty fares only

        :param no_penalty_fare: The no_penalty_fare of this PricingOptions.
        :type no_penalty_fare: bool
        """

        self._no_penalty_fare = no_penalty_fare

    @property
    def no_restriction_fare(self):
        """Gets the no_restriction_fare of this PricingOptions.

        If true, returns the flight-offers with no restriction fares only

        :return: The no_restriction_fare of this PricingOptions.
        :rtype: bool
        """
        return self._no_restriction_fare

    @no_restriction_fare.setter
    def no_restriction_fare(self, no_restriction_fare):
        """Sets the no_restriction_fare of this PricingOptions.

        If true, returns the flight-offers with no restriction fares only

        :param no_restriction_fare: The no_restriction_fare of this PricingOptions.
        :type no_restriction_fare: bool
        """

        self._no_restriction_fare = no_restriction_fare

    @property
    def refundable_fare(self):
        """Gets the refundable_fare of this PricingOptions.

        If true, returns the flight-offers with refundable fares only

        :return: The refundable_fare of this PricingOptions.
        :rtype: bool
        """
        return self._refundable_fare

    @refundable_fare.setter
    def refundable_fare(self, refundable_fare):
        """Sets the refundable_fare of this PricingOptions.

        If true, returns the flight-offers with refundable fares only

        :param refundable_fare: The refundable_fare of this PricingOptions.
        :type refundable_fare: bool
        """

        self._refundable_fare = refundable_fare
