# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticketing_agreement_option import TicketingAgreementOption
from openapi_server import util


class TicketingAgreement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time: str=None, delay: str=None, option: TicketingAgreementOption=None, segment_ids: List[str]=None):
        """TicketingAgreement - a model defined in OpenAPI

        :param date_time: The date_time of this TicketingAgreement.
        :param delay: The delay of this TicketingAgreement.
        :param option: The option of this TicketingAgreement.
        :param segment_ids: The segment_ids of this TicketingAgreement.
        """
        self.openapi_types = {
            'date_time': str,
            'delay': str,
            'option': TicketingAgreementOption,
            'segment_ids': List[str]
        }

        self.attribute_map = {
            'date_time': 'dateTime',
            'delay': 'delay',
            'option': 'option',
            'segment_ids': 'segmentIds'
        }

        self._date_time = date_time
        self._delay = delay
        self._option = option
        self._segment_ids = segment_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketingAgreement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketingAgreement of this TicketingAgreement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time(self):
        """Gets the date_time of this TicketingAgreement.

        Exact date to apply automatic process if no issuance. YYYY-MM-DD format, e.g. 2019-06-07

        :return: The date_time of this TicketingAgreement.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this TicketingAgreement.

        Exact date to apply automatic process if no issuance. YYYY-MM-DD format, e.g. 2019-06-07

        :param date_time: The date_time of this TicketingAgreement.
        :type date_time: str
        """

        self._date_time = date_time

    @property
    def delay(self):
        """Gets the delay of this TicketingAgreement.

        Delay before applying automatic process if no issuance in days

        :return: The delay of this TicketingAgreement.
        :rtype: str
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this TicketingAgreement.

        Delay before applying automatic process if no issuance in days

        :param delay: The delay of this TicketingAgreement.
        :type delay: str
        """

        self._delay = delay

    @property
    def option(self):
        """Gets the option of this TicketingAgreement.


        :return: The option of this TicketingAgreement.
        :rtype: TicketingAgreementOption
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this TicketingAgreement.


        :param option: The option of this TicketingAgreement.
        :type option: TicketingAgreementOption
        """

        self._option = option

    @property
    def segment_ids(self):
        """Gets the segment_ids of this TicketingAgreement.

        Ids of the impacted segments

        :return: The segment_ids of this TicketingAgreement.
        :rtype: List[str]
        """
        return self._segment_ids

    @segment_ids.setter
    def segment_ids(self, segment_ids):
        """Sets the segment_ids of this TicketingAgreement.

        Ids of the impacted segments

        :param segment_ids: The segment_ids of this TicketingAgreement.
        :type segment_ids: List[str]
        """

        self._segment_ids = segment_ids
