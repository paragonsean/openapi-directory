# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_payment_method import OtherPaymentMethod
from openapi_server import util


class OtherMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flight_offer_ids: List[str]=None, method: OtherPaymentMethod=None):
        """OtherMethod - a model defined in OpenAPI

        :param flight_offer_ids: The flight_offer_ids of this OtherMethod.
        :param method: The method of this OtherMethod.
        """
        self.openapi_types = {
            'flight_offer_ids': List[str],
            'method': OtherPaymentMethod
        }

        self.attribute_map = {
            'flight_offer_ids': 'flightOfferIds',
            'method': 'method'
        }

        self._flight_offer_ids = flight_offer_ids
        self._method = method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherMethod of this OtherMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flight_offer_ids(self):
        """Gets the flight_offer_ids of this OtherMethod.

        Id of the concern flightOffers

        :return: The flight_offer_ids of this OtherMethod.
        :rtype: List[str]
        """
        return self._flight_offer_ids

    @flight_offer_ids.setter
    def flight_offer_ids(self, flight_offer_ids):
        """Sets the flight_offer_ids of this OtherMethod.

        Id of the concern flightOffers

        :param flight_offer_ids: The flight_offer_ids of this OtherMethod.
        :type flight_offer_ids: List[str]
        """
        if flight_offer_ids is not None and len(flight_offer_ids) > 6:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be less than or equal to `6`")
        if flight_offer_ids is not None and len(flight_offer_ids) < 1:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be greater than or equal to `1`")

        self._flight_offer_ids = flight_offer_ids

    @property
    def method(self):
        """Gets the method of this OtherMethod.


        :return: The method of this OtherMethod.
        :rtype: OtherPaymentMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this OtherMethod.


        :param method: The method of this OtherMethod.
        :type method: OtherPaymentMethod
        """

        self._method = method
