# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.general_remark_type import GeneralRemarkType
import re
from openapi_server import util


class GeneralRemark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, flight_offer_ids: List[str]=None, sub_type: GeneralRemarkType=None, text: str=None, traveler_ids: List[str]=None):
        """GeneralRemark - a model defined in OpenAPI

        :param category: The category of this GeneralRemark.
        :param flight_offer_ids: The flight_offer_ids of this GeneralRemark.
        :param sub_type: The sub_type of this GeneralRemark.
        :param text: The text of this GeneralRemark.
        :param traveler_ids: The traveler_ids of this GeneralRemark.
        """
        self.openapi_types = {
            'category': str,
            'flight_offer_ids': List[str],
            'sub_type': GeneralRemarkType,
            'text': str,
            'traveler_ids': List[str]
        }

        self.attribute_map = {
            'category': 'category',
            'flight_offer_ids': 'flightOfferIds',
            'sub_type': 'subType',
            'text': 'text',
            'traveler_ids': 'travelerIds'
        }

        self._category = category
        self._flight_offer_ids = flight_offer_ids
        self._sub_type = sub_type
        self._text = text
        self._traveler_ids = traveler_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeneralRemark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeneralRemark of this GeneralRemark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this GeneralRemark.

        remark category

        :return: The category of this GeneralRemark.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GeneralRemark.

        remark category

        :param category: The category of this GeneralRemark.
        :type category: str
        """
        if category is not None and not re.search(r'[A-Z]{1}', category):
            raise ValueError("Invalid value for `category`, must be a follow pattern or equal to `/[A-Z]{1}/`")

        self._category = category

    @property
    def flight_offer_ids(self):
        """Gets the flight_offer_ids of this GeneralRemark.

        Id of the concern flightOffers

        :return: The flight_offer_ids of this GeneralRemark.
        :rtype: List[str]
        """
        return self._flight_offer_ids

    @flight_offer_ids.setter
    def flight_offer_ids(self, flight_offer_ids):
        """Sets the flight_offer_ids of this GeneralRemark.

        Id of the concern flightOffers

        :param flight_offer_ids: The flight_offer_ids of this GeneralRemark.
        :type flight_offer_ids: List[str]
        """
        if flight_offer_ids is not None and len(flight_offer_ids) > 6:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be less than or equal to `6`")
        if flight_offer_ids is not None and len(flight_offer_ids) < 1:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be greater than or equal to `1`")

        self._flight_offer_ids = flight_offer_ids

    @property
    def sub_type(self):
        """Gets the sub_type of this GeneralRemark.


        :return: The sub_type of this GeneralRemark.
        :rtype: GeneralRemarkType
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this GeneralRemark.


        :param sub_type: The sub_type of this GeneralRemark.
        :type sub_type: GeneralRemarkType
        """
        if sub_type is None:
            raise ValueError("Invalid value for `sub_type`, must not be `None`")

        self._sub_type = sub_type

    @property
    def text(self):
        """Gets the text of this GeneralRemark.

        remark free text

        :return: The text of this GeneralRemark.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GeneralRemark.

        remark free text

        :param text: The text of this GeneralRemark.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def traveler_ids(self):
        """Gets the traveler_ids of this GeneralRemark.

        Id of the concerned traveler

        :return: The traveler_ids of this GeneralRemark.
        :rtype: List[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """Sets the traveler_ids of this GeneralRemark.

        Id of the concerned traveler

        :param traveler_ids: The traveler_ids of this GeneralRemark.
        :type traveler_ids: List[str]
        """

        self._traveler_ids = traveler_ids
