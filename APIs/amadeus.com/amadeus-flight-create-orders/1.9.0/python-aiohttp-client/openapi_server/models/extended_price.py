# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_service import AdditionalService
from openapi_server.models.fee import Fee
from openapi_server.models.tax import Tax
from openapi_server import util


class ExtendedPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, currency: str=None, fees: List[Fee]=None, refundable_taxes: str=None, taxes: List[Tax]=None, total: str=None, additional_services: List[AdditionalService]=None, billing_currency: str=None, grand_total: str=None, margin: str=None):
        """ExtendedPrice - a model defined in OpenAPI

        :param base: The base of this ExtendedPrice.
        :param currency: The currency of this ExtendedPrice.
        :param fees: The fees of this ExtendedPrice.
        :param refundable_taxes: The refundable_taxes of this ExtendedPrice.
        :param taxes: The taxes of this ExtendedPrice.
        :param total: The total of this ExtendedPrice.
        :param additional_services: The additional_services of this ExtendedPrice.
        :param billing_currency: The billing_currency of this ExtendedPrice.
        :param grand_total: The grand_total of this ExtendedPrice.
        :param margin: The margin of this ExtendedPrice.
        """
        self.openapi_types = {
            'base': str,
            'currency': str,
            'fees': List[Fee],
            'refundable_taxes': str,
            'taxes': List[Tax],
            'total': str,
            'additional_services': List[AdditionalService],
            'billing_currency': str,
            'grand_total': str,
            'margin': str
        }

        self.attribute_map = {
            'base': 'base',
            'currency': 'currency',
            'fees': 'fees',
            'refundable_taxes': 'refundableTaxes',
            'taxes': 'taxes',
            'total': 'total',
            'additional_services': 'additionalServices',
            'billing_currency': 'billingCurrency',
            'grand_total': 'grandTotal',
            'margin': 'margin'
        }

        self._base = base
        self._currency = currency
        self._fees = fees
        self._refundable_taxes = refundable_taxes
        self._taxes = taxes
        self._total = total
        self._additional_services = additional_services
        self._billing_currency = billing_currency
        self._grand_total = grand_total
        self._margin = margin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extended_Price of this ExtendedPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this ExtendedPrice.

        Amount without taxes

        :return: The base of this ExtendedPrice.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ExtendedPrice.

        Amount without taxes

        :param base: The base of this ExtendedPrice.
        :type base: str
        """

        self._base = base

    @property
    def currency(self):
        """Gets the currency of this ExtendedPrice.


        :return: The currency of this ExtendedPrice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ExtendedPrice.


        :param currency: The currency of this ExtendedPrice.
        :type currency: str
        """

        self._currency = currency

    @property
    def fees(self):
        """Gets the fees of this ExtendedPrice.

        List of applicable fees

        :return: The fees of this ExtendedPrice.
        :rtype: List[Fee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ExtendedPrice.

        List of applicable fees

        :param fees: The fees of this ExtendedPrice.
        :type fees: List[Fee]
        """

        self._fees = fees

    @property
    def refundable_taxes(self):
        """Gets the refundable_taxes of this ExtendedPrice.

        The amount of taxes which are refundable

        :return: The refundable_taxes of this ExtendedPrice.
        :rtype: str
        """
        return self._refundable_taxes

    @refundable_taxes.setter
    def refundable_taxes(self, refundable_taxes):
        """Sets the refundable_taxes of this ExtendedPrice.

        The amount of taxes which are refundable

        :param refundable_taxes: The refundable_taxes of this ExtendedPrice.
        :type refundable_taxes: str
        """

        self._refundable_taxes = refundable_taxes

    @property
    def taxes(self):
        """Gets the taxes of this ExtendedPrice.


        :return: The taxes of this ExtendedPrice.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ExtendedPrice.


        :param taxes: The taxes of this ExtendedPrice.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this ExtendedPrice.

        Total amount paid by the user

        :return: The total of this ExtendedPrice.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ExtendedPrice.

        Total amount paid by the user

        :param total: The total of this ExtendedPrice.
        :type total: str
        """

        self._total = total

    @property
    def additional_services(self):
        """Gets the additional_services of this ExtendedPrice.


        :return: The additional_services of this ExtendedPrice.
        :rtype: List[AdditionalService]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this ExtendedPrice.


        :param additional_services: The additional_services of this ExtendedPrice.
        :type additional_services: List[AdditionalService]
        """

        self._additional_services = additional_services

    @property
    def billing_currency(self):
        """Gets the billing_currency of this ExtendedPrice.

        Currency of the payment. It may be different than the requested currency

        :return: The billing_currency of this ExtendedPrice.
        :rtype: str
        """
        return self._billing_currency

    @billing_currency.setter
    def billing_currency(self, billing_currency):
        """Sets the billing_currency of this ExtendedPrice.

        Currency of the payment. It may be different than the requested currency

        :param billing_currency: The billing_currency of this ExtendedPrice.
        :type billing_currency: str
        """

        self._billing_currency = billing_currency

    @property
    def grand_total(self):
        """Gets the grand_total of this ExtendedPrice.

        Total amount paid by the user (including fees and selected additional services).

        :return: The grand_total of this ExtendedPrice.
        :rtype: str
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this ExtendedPrice.

        Total amount paid by the user (including fees and selected additional services).

        :param grand_total: The grand_total of this ExtendedPrice.
        :type grand_total: str
        """

        self._grand_total = grand_total

    @property
    def margin(self):
        """Gets the margin of this ExtendedPrice.

        BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.

        :return: The margin of this ExtendedPrice.
        :rtype: str
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this ExtendedPrice.

        BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.

        :param margin: The margin of this ExtendedPrice.
        :type margin: str
        """

        self._margin = margin
