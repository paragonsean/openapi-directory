# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airline_remark import AirlineRemark
from openapi_server.models.general_remark import GeneralRemark
from openapi_server import util


class Remarks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airline: List[AirlineRemark]=None, general: List[GeneralRemark]=None):
        """Remarks - a model defined in OpenAPI

        :param airline: The airline of this Remarks.
        :param general: The general of this Remarks.
        """
        self.openapi_types = {
            'airline': List[AirlineRemark],
            'general': List[GeneralRemark]
        }

        self.attribute_map = {
            'airline': 'airline',
            'general': 'general'
        }

        self._airline = airline
        self._general = general

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Remarks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Remarks of this Remarks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airline(self):
        """Gets the airline of this Remarks.

        list of airline remarks

        :return: The airline of this Remarks.
        :rtype: List[AirlineRemark]
        """
        return self._airline

    @airline.setter
    def airline(self, airline):
        """Sets the airline of this Remarks.

        list of airline remarks

        :param airline: The airline of this Remarks.
        :type airline: List[AirlineRemark]
        """
        if airline is not None and len(airline) > 200:
            raise ValueError("Invalid value for `airline`, number of items must be less than or equal to `200`")
        if airline is not None and len(airline) < 0:
            raise ValueError("Invalid value for `airline`, number of items must be greater than or equal to `0`")

        self._airline = airline

    @property
    def general(self):
        """Gets the general of this Remarks.

        list of general remarks

        :return: The general of this Remarks.
        :rtype: List[GeneralRemark]
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this Remarks.

        list of general remarks

        :param general: The general of this Remarks.
        :type general: List[GeneralRemark]
        """
        if general is not None and len(general) > 200:
            raise ValueError("Invalid value for `general`, number of items must be less than or equal to `200`")
        if general is not None and len(general) < 0:
            raise ValueError("Invalid value for `general`, number of items must be greater than or equal to `0`")

        self._general = general
