/*
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TicketingAgreementOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ticketing agreement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:44.468167-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TicketingAgreement {
  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private String delay;

  public static final String SERIALIZED_NAME_OPTION = "option";
  @SerializedName(SERIALIZED_NAME_OPTION)
  private TicketingAgreementOption option;

  public static final String SERIALIZED_NAME_SEGMENT_IDS = "segmentIds";
  @SerializedName(SERIALIZED_NAME_SEGMENT_IDS)
  private List<String> segmentIds = new ArrayList<>();

  public TicketingAgreement() {
  }

  public TicketingAgreement(
     String dateTime, 
     List<String> segmentIds
  ) {
    this();
    this.dateTime = dateTime;
    this.segmentIds = segmentIds;
  }

  /**
   * Exact date to apply automatic process if no issuance. YYYY-MM-DD format, e.g. 2019-06-07
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }



  public TicketingAgreement delay(String delay) {
    this.delay = delay;
    return this;
  }

  /**
   * Delay before applying automatic process if no issuance in days
   * @return delay
   */
  @javax.annotation.Nullable
  public String getDelay() {
    return delay;
  }

  public void setDelay(String delay) {
    this.delay = delay;
  }


  public TicketingAgreement option(TicketingAgreementOption option) {
    this.option = option;
    return this;
  }

  /**
   * Get option
   * @return option
   */
  @javax.annotation.Nullable
  public TicketingAgreementOption getOption() {
    return option;
  }

  public void setOption(TicketingAgreementOption option) {
    this.option = option;
  }


  /**
   * Ids of the impacted segments
   * @return segmentIds
   */
  @javax.annotation.Nullable
  public List<String> getSegmentIds() {
    return segmentIds;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketingAgreement ticketingAgreement = (TicketingAgreement) o;
    return Objects.equals(this.dateTime, ticketingAgreement.dateTime) &&
        Objects.equals(this.delay, ticketingAgreement.delay) &&
        Objects.equals(this.option, ticketingAgreement.option) &&
        Objects.equals(this.segmentIds, ticketingAgreement.segmentIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTime, delay, option, segmentIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketingAgreement {\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("    segmentIds: ").append(toIndentedString(segmentIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateTime");
    openapiFields.add("delay");
    openapiFields.add("option");
    openapiFields.add("segmentIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TicketingAgreement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TicketingAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TicketingAgreement is not found in the empty JSON string", TicketingAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TicketingAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TicketingAgreement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateTime") != null && !jsonObj.get("dateTime").isJsonNull()) && !jsonObj.get("dateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTime").toString()));
      }
      if ((jsonObj.get("delay") != null && !jsonObj.get("delay").isJsonNull()) && !jsonObj.get("delay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay").toString()));
      }
      // validate the optional field `option`
      if (jsonObj.get("option") != null && !jsonObj.get("option").isJsonNull()) {
        TicketingAgreementOption.validateJsonElement(jsonObj.get("option"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentIds") != null && !jsonObj.get("segmentIds").isJsonNull() && !jsonObj.get("segmentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentIds` to be an array in the JSON string but got `%s`", jsonObj.get("segmentIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TicketingAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TicketingAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TicketingAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TicketingAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<TicketingAgreement>() {
           @Override
           public void write(JsonWriter out, TicketingAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TicketingAgreement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TicketingAgreement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TicketingAgreement
   * @throws IOException if the JSON string is invalid with respect to TicketingAgreement
   */
  public static TicketingAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TicketingAgreement.class);
  }

  /**
   * Convert an instance of TicketingAgreement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

