/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirlineRemarkType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirlineRemarkType::OAIAirlineRemarkType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirlineRemarkType::OAIAirlineRemarkType() {
    this->initializeModel();
}

OAIAirlineRemarkType::~OAIAirlineRemarkType() {}

void OAIAirlineRemarkType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAirlineRemarkType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAirlineRemarkType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OTHER_SERVICE_INFORMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAirlineRemarkType::OTHER_SERVICE_INFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KEYWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAirlineRemarkType::KEYWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAirlineRemarkType::OTHER_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLIENT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAirlineRemarkType::CLIENT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADVANCED_TICKET_TIME_LIMIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAirlineRemarkType::ADVANCED_TICKET_TIME_LIMIT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAirlineRemarkType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAirlineRemarkType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAirlineRemarkType::OTHER_SERVICE_INFORMATION:
            val = "OTHER_SERVICE_INFORMATION";
            break;
        case eOAIAirlineRemarkType::KEYWORD:
            val = "KEYWORD";
            break;
        case eOAIAirlineRemarkType::OTHER_SERVICE:
            val = "OTHER_SERVICE";
            break;
        case eOAIAirlineRemarkType::CLIENT_ID:
            val = "CLIENT_ID";
            break;
        case eOAIAirlineRemarkType::ADVANCED_TICKET_TIME_LIMIT:
            val = "ADVANCED_TICKET_TIME_LIMIT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAirlineRemarkType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAirlineRemarkType::eOAIAirlineRemarkType OAIAirlineRemarkType::getValue() const {
    return m_value;
}

void OAIAirlineRemarkType::setValue(const OAIAirlineRemarkType::eOAIAirlineRemarkType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAirlineRemarkType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAirlineRemarkType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
