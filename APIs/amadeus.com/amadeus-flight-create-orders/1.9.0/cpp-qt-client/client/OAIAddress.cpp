/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_city_name_isSet = false;
    m_city_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_postal_box_isSet = false;
    m_postal_box_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_name_isSet = false;
    m_state_name_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_city_name_isValid = ::OpenAPI::fromJsonValue(m_city_name, json[QString("cityName")]);
    m_city_name_isSet = !json[QString("cityName")].isNull() && m_city_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_postal_box_isValid = ::OpenAPI::fromJsonValue(m_postal_box, json[QString("postalBox")]);
    m_postal_box_isSet = !json[QString("postalBox")].isNull() && m_postal_box_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_name_isSet) {
        obj.insert(QString("cityName"), ::OpenAPI::toJsonValue(m_city_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_postal_box_isSet) {
        obj.insert(QString("postalBox"), ::OpenAPI::toJsonValue(m_postal_box));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    return obj;
}

QString OAIAddress::getCityName() const {
    return m_city_name;
}
void OAIAddress::setCityName(const QString &city_name) {
    m_city_name = city_name;
    m_city_name_isSet = true;
}

bool OAIAddress::is_city_name_Set() const{
    return m_city_name_isSet;
}

bool OAIAddress::is_city_name_Valid() const{
    return m_city_name_isValid;
}

QString OAIAddress::getCountryCode() const {
    return m_country_code;
}
void OAIAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList<QString> OAIAddress::getLines() const {
    return m_lines;
}
void OAIAddress::setLines(const QList<QString> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIAddress::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIAddress::is_lines_Valid() const{
    return m_lines_isValid;
}

QString OAIAddress::getPostalBox() const {
    return m_postal_box;
}
void OAIAddress::setPostalBox(const QString &postal_box) {
    m_postal_box = postal_box;
    m_postal_box_isSet = true;
}

bool OAIAddress::is_postal_box_Set() const{
    return m_postal_box_isSet;
}

bool OAIAddress::is_postal_box_Valid() const{
    return m_postal_box_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getStateName() const {
    return m_state_name;
}
void OAIAddress::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIAddress::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIAddress::is_state_name_Valid() const{
    return m_state_name_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
