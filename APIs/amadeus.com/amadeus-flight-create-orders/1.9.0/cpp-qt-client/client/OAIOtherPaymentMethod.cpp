/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtherPaymentMethod::OAIOtherPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtherPaymentMethod::OAIOtherPaymentMethod() {
    this->initializeModel();
}

OAIOtherPaymentMethod::~OAIOtherPaymentMethod() {}

void OAIOtherPaymentMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOtherPaymentMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOtherPaymentMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOtherPaymentMethod::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOtherPaymentMethod::CHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CASH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOtherPaymentMethod::CASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONREFUNDABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOtherPaymentMethod::NONREFUNDABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOtherPaymentMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOtherPaymentMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOtherPaymentMethod::ACCOUNT:
            val = "ACCOUNT";
            break;
        case eOAIOtherPaymentMethod::CHECK:
            val = "CHECK";
            break;
        case eOAIOtherPaymentMethod::CASH:
            val = "CASH";
            break;
        case eOAIOtherPaymentMethod::NONREFUNDABLE:
            val = "NONREFUNDABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOtherPaymentMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOtherPaymentMethod::eOAIOtherPaymentMethod OAIOtherPaymentMethod::getValue() const {
    return m_value;
}

void OAIOtherPaymentMethod::setValue(const OAIOtherPaymentMethod::eOAIOtherPaymentMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOtherPaymentMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIOtherPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
