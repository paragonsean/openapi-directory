/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFareDetailsBySegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFareDetailsBySegment::OAIFareDetailsBySegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFareDetailsBySegment::OAIFareDetailsBySegment() {
    this->initializeModel();
}

OAIFareDetailsBySegment::~OAIFareDetailsBySegment() {}

void OAIFareDetailsBySegment::initializeModel() {

    m_additional_services_isSet = false;
    m_additional_services_isValid = false;

    m_allotment_details_isSet = false;
    m_allotment_details_isValid = false;

    m_branded_fare_isSet = false;
    m_branded_fare_isValid = false;

    m_cabin_isSet = false;
    m_cabin_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_fare_basis_isSet = false;
    m_fare_basis_isValid = false;

    m_included_checked_bags_isSet = false;
    m_included_checked_bags_isValid = false;

    m_is_allotment_isSet = false;
    m_is_allotment_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_slice_dice_indicator_isSet = false;
    m_slice_dice_indicator_isValid = false;
}

void OAIFareDetailsBySegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFareDetailsBySegment::fromJsonObject(QJsonObject json) {

    m_additional_services_isValid = ::OpenAPI::fromJsonValue(m_additional_services, json[QString("additionalServices")]);
    m_additional_services_isSet = !json[QString("additionalServices")].isNull() && m_additional_services_isValid;

    m_allotment_details_isValid = ::OpenAPI::fromJsonValue(m_allotment_details, json[QString("allotmentDetails")]);
    m_allotment_details_isSet = !json[QString("allotmentDetails")].isNull() && m_allotment_details_isValid;

    m_branded_fare_isValid = ::OpenAPI::fromJsonValue(m_branded_fare, json[QString("brandedFare")]);
    m_branded_fare_isSet = !json[QString("brandedFare")].isNull() && m_branded_fare_isValid;

    m_cabin_isValid = ::OpenAPI::fromJsonValue(m_cabin, json[QString("cabin")]);
    m_cabin_isSet = !json[QString("cabin")].isNull() && m_cabin_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_fare_basis_isValid = ::OpenAPI::fromJsonValue(m_fare_basis, json[QString("fareBasis")]);
    m_fare_basis_isSet = !json[QString("fareBasis")].isNull() && m_fare_basis_isValid;

    m_included_checked_bags_isValid = ::OpenAPI::fromJsonValue(m_included_checked_bags, json[QString("includedCheckedBags")]);
    m_included_checked_bags_isSet = !json[QString("includedCheckedBags")].isNull() && m_included_checked_bags_isValid;

    m_is_allotment_isValid = ::OpenAPI::fromJsonValue(m_is_allotment, json[QString("isAllotment")]);
    m_is_allotment_isSet = !json[QString("isAllotment")].isNull() && m_is_allotment_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_slice_dice_indicator_isValid = ::OpenAPI::fromJsonValue(m_slice_dice_indicator, json[QString("sliceDiceIndicator")]);
    m_slice_dice_indicator_isSet = !json[QString("sliceDiceIndicator")].isNull() && m_slice_dice_indicator_isValid;
}

QString OAIFareDetailsBySegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFareDetailsBySegment::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_services.isSet()) {
        obj.insert(QString("additionalServices"), ::OpenAPI::toJsonValue(m_additional_services));
    }
    if (m_allotment_details.isSet()) {
        obj.insert(QString("allotmentDetails"), ::OpenAPI::toJsonValue(m_allotment_details));
    }
    if (m_branded_fare_isSet) {
        obj.insert(QString("brandedFare"), ::OpenAPI::toJsonValue(m_branded_fare));
    }
    if (m_cabin.isSet()) {
        obj.insert(QString("cabin"), ::OpenAPI::toJsonValue(m_cabin));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_fare_basis_isSet) {
        obj.insert(QString("fareBasis"), ::OpenAPI::toJsonValue(m_fare_basis));
    }
    if (m_included_checked_bags.isSet()) {
        obj.insert(QString("includedCheckedBags"), ::OpenAPI::toJsonValue(m_included_checked_bags));
    }
    if (m_is_allotment_isSet) {
        obj.insert(QString("isAllotment"), ::OpenAPI::toJsonValue(m_is_allotment));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_slice_dice_indicator.isSet()) {
        obj.insert(QString("sliceDiceIndicator"), ::OpenAPI::toJsonValue(m_slice_dice_indicator));
    }
    return obj;
}

OAIAdditionalServicesRequest OAIFareDetailsBySegment::getAdditionalServices() const {
    return m_additional_services;
}
void OAIFareDetailsBySegment::setAdditionalServices(const OAIAdditionalServicesRequest &additional_services) {
    m_additional_services = additional_services;
    m_additional_services_isSet = true;
}

bool OAIFareDetailsBySegment::is_additional_services_Set() const{
    return m_additional_services_isSet;
}

bool OAIFareDetailsBySegment::is_additional_services_Valid() const{
    return m_additional_services_isValid;
}

OAIAllotmentDetails OAIFareDetailsBySegment::getAllotmentDetails() const {
    return m_allotment_details;
}
void OAIFareDetailsBySegment::setAllotmentDetails(const OAIAllotmentDetails &allotment_details) {
    m_allotment_details = allotment_details;
    m_allotment_details_isSet = true;
}

bool OAIFareDetailsBySegment::is_allotment_details_Set() const{
    return m_allotment_details_isSet;
}

bool OAIFareDetailsBySegment::is_allotment_details_Valid() const{
    return m_allotment_details_isValid;
}

QString OAIFareDetailsBySegment::getBrandedFare() const {
    return m_branded_fare;
}
void OAIFareDetailsBySegment::setBrandedFare(const QString &branded_fare) {
    m_branded_fare = branded_fare;
    m_branded_fare_isSet = true;
}

bool OAIFareDetailsBySegment::is_branded_fare_Set() const{
    return m_branded_fare_isSet;
}

bool OAIFareDetailsBySegment::is_branded_fare_Valid() const{
    return m_branded_fare_isValid;
}

OAITravelClass OAIFareDetailsBySegment::getCabin() const {
    return m_cabin;
}
void OAIFareDetailsBySegment::setCabin(const OAITravelClass &cabin) {
    m_cabin = cabin;
    m_cabin_isSet = true;
}

bool OAIFareDetailsBySegment::is_cabin_Set() const{
    return m_cabin_isSet;
}

bool OAIFareDetailsBySegment::is_cabin_Valid() const{
    return m_cabin_isValid;
}

QString OAIFareDetailsBySegment::getRClass() const {
    return m_r_class;
}
void OAIFareDetailsBySegment::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIFareDetailsBySegment::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIFareDetailsBySegment::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIFareDetailsBySegment::getFareBasis() const {
    return m_fare_basis;
}
void OAIFareDetailsBySegment::setFareBasis(const QString &fare_basis) {
    m_fare_basis = fare_basis;
    m_fare_basis_isSet = true;
}

bool OAIFareDetailsBySegment::is_fare_basis_Set() const{
    return m_fare_basis_isSet;
}

bool OAIFareDetailsBySegment::is_fare_basis_Valid() const{
    return m_fare_basis_isValid;
}

OAIBaggageAllowance OAIFareDetailsBySegment::getIncludedCheckedBags() const {
    return m_included_checked_bags;
}
void OAIFareDetailsBySegment::setIncludedCheckedBags(const OAIBaggageAllowance &included_checked_bags) {
    m_included_checked_bags = included_checked_bags;
    m_included_checked_bags_isSet = true;
}

bool OAIFareDetailsBySegment::is_included_checked_bags_Set() const{
    return m_included_checked_bags_isSet;
}

bool OAIFareDetailsBySegment::is_included_checked_bags_Valid() const{
    return m_included_checked_bags_isValid;
}

bool OAIFareDetailsBySegment::isIsAllotment() const {
    return m_is_allotment;
}
void OAIFareDetailsBySegment::setIsAllotment(const bool &is_allotment) {
    m_is_allotment = is_allotment;
    m_is_allotment_isSet = true;
}

bool OAIFareDetailsBySegment::is_is_allotment_Set() const{
    return m_is_allotment_isSet;
}

bool OAIFareDetailsBySegment::is_is_allotment_Valid() const{
    return m_is_allotment_isValid;
}

QString OAIFareDetailsBySegment::getSegmentId() const {
    return m_segment_id;
}
void OAIFareDetailsBySegment::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIFareDetailsBySegment::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIFareDetailsBySegment::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

OAISliceDiceIndicator OAIFareDetailsBySegment::getSliceDiceIndicator() const {
    return m_slice_dice_indicator;
}
void OAIFareDetailsBySegment::setSliceDiceIndicator(const OAISliceDiceIndicator &slice_dice_indicator) {
    m_slice_dice_indicator = slice_dice_indicator;
    m_slice_dice_indicator_isSet = true;
}

bool OAIFareDetailsBySegment::is_slice_dice_indicator_Set() const{
    return m_slice_dice_indicator_isSet;
}

bool OAIFareDetailsBySegment::is_slice_dice_indicator_Valid() const{
    return m_slice_dice_indicator_isValid;
}

bool OAIFareDetailsBySegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allotment_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branded_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cabin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_checked_bags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_allotment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_dice_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFareDetailsBySegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_segment_id_isValid && true;
}

} // namespace OpenAPI
