/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalServiceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalServiceType::OAIAdditionalServiceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalServiceType::OAIAdditionalServiceType() {
    this->initializeModel();
}

OAIAdditionalServiceType::~OAIAdditionalServiceType() {}

void OAIAdditionalServiceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAdditionalServiceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAdditionalServiceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CHECKED_BAGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdditionalServiceType::CHECKED_BAGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEALS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdditionalServiceType::MEALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEATS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdditionalServiceType::SEATS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER_SERVICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdditionalServiceType::OTHER_SERVICES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAdditionalServiceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAdditionalServiceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAdditionalServiceType::CHECKED_BAGS:
            val = "CHECKED_BAGS";
            break;
        case eOAIAdditionalServiceType::MEALS:
            val = "MEALS";
            break;
        case eOAIAdditionalServiceType::SEATS:
            val = "SEATS";
            break;
        case eOAIAdditionalServiceType::OTHER_SERVICES:
            val = "OTHER_SERVICES";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAdditionalServiceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAdditionalServiceType::eOAIAdditionalServiceType OAIAdditionalServiceType::getValue() const {
    return m_value;
}

void OAIAdditionalServiceType::setValue(const OAIAdditionalServiceType::eOAIAdditionalServiceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAdditionalServiceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAdditionalServiceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
