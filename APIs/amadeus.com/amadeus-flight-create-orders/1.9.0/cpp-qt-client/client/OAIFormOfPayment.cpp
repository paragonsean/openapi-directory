/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormOfPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormOfPayment::OAIFormOfPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormOfPayment::OAIFormOfPayment() {
    this->initializeModel();
}

OAIFormOfPayment::~OAIFormOfPayment() {}

void OAIFormOfPayment::initializeModel() {

    m_b2b_wallet_isSet = false;
    m_b2b_wallet_isValid = false;

    m_credit_card_isSet = false;
    m_credit_card_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;
}

void OAIFormOfPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormOfPayment::fromJsonObject(QJsonObject json) {

    m_b2b_wallet_isValid = ::OpenAPI::fromJsonValue(m_b2b_wallet, json[QString("b2bWallet")]);
    m_b2b_wallet_isSet = !json[QString("b2bWallet")].isNull() && m_b2b_wallet_isValid;

    m_credit_card_isValid = ::OpenAPI::fromJsonValue(m_credit_card, json[QString("creditCard")]);
    m_credit_card_isSet = !json[QString("creditCard")].isNull() && m_credit_card_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;
}

QString OAIFormOfPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormOfPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_b2b_wallet.isSet()) {
        obj.insert(QString("b2bWallet"), ::OpenAPI::toJsonValue(m_b2b_wallet));
    }
    if (m_credit_card.isSet()) {
        obj.insert(QString("creditCard"), ::OpenAPI::toJsonValue(m_credit_card));
    }
    if (m_other.isSet()) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    return obj;
}

OAIB2bWallet OAIFormOfPayment::getB2bWallet() const {
    return m_b2b_wallet;
}
void OAIFormOfPayment::setB2bWallet(const OAIB2bWallet &b2b_wallet) {
    m_b2b_wallet = b2b_wallet;
    m_b2b_wallet_isSet = true;
}

bool OAIFormOfPayment::is_b2b_wallet_Set() const{
    return m_b2b_wallet_isSet;
}

bool OAIFormOfPayment::is_b2b_wallet_Valid() const{
    return m_b2b_wallet_isValid;
}

OAICreditCard OAIFormOfPayment::getCreditCard() const {
    return m_credit_card;
}
void OAIFormOfPayment::setCreditCard(const OAICreditCard &credit_card) {
    m_credit_card = credit_card;
    m_credit_card_isSet = true;
}

bool OAIFormOfPayment::is_credit_card_Set() const{
    return m_credit_card_isSet;
}

bool OAIFormOfPayment::is_credit_card_Valid() const{
    return m_credit_card_isValid;
}

OAIOtherMethod OAIFormOfPayment::getOther() const {
    return m_other;
}
void OAIFormOfPayment::setOther(const OAIOtherMethod &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAIFormOfPayment::is_other_Set() const{
    return m_other_isSet;
}

bool OAIFormOfPayment::is_other_Valid() const{
    return m_other_isValid;
}

bool OAIFormOfPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b2b_wallet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormOfPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
