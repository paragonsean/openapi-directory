/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditCardBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditCardBrand::OAICreditCardBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditCardBrand::OAICreditCardBrand() {
    this->initializeModel();
}

OAICreditCardBrand::~OAICreditCardBrand() {}

void OAICreditCardBrand::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICreditCardBrand::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICreditCardBrand::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VISA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::VISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMERICAN_EXPRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::AMERICAN_EXPRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASTERCARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::MASTERCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VISA_ELECTRON", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::VISA_ELECTRON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VISA_DEBIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::VISA_DEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASTERCARD_DEBIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::MASTERCARD_DEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAESTRO", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::MAESTRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DINERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::DINERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EASYPAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditCardBrand::EASYPAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICreditCardBrand::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICreditCardBrand::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICreditCardBrand::VISA:
            val = "VISA";
            break;
        case eOAICreditCardBrand::AMERICAN_EXPRESS:
            val = "AMERICAN_EXPRESS";
            break;
        case eOAICreditCardBrand::MASTERCARD:
            val = "MASTERCARD";
            break;
        case eOAICreditCardBrand::VISA_ELECTRON:
            val = "VISA_ELECTRON";
            break;
        case eOAICreditCardBrand::VISA_DEBIT:
            val = "VISA_DEBIT";
            break;
        case eOAICreditCardBrand::MASTERCARD_DEBIT:
            val = "MASTERCARD_DEBIT";
            break;
        case eOAICreditCardBrand::MAESTRO:
            val = "MAESTRO";
            break;
        case eOAICreditCardBrand::DINERS:
            val = "DINERS";
            break;
        case eOAICreditCardBrand::EASYPAY:
            val = "EASYPAY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICreditCardBrand::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICreditCardBrand::eOAICreditCardBrand OAICreditCardBrand::getValue() const {
    return m_value;
}

void OAICreditCardBrand::setValue(const OAICreditCardBrand::eOAICreditCardBrand& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICreditCardBrand::isSet() const {
    
    return m_value_isSet;
}

bool OAICreditCardBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
