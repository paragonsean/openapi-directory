/**
 * Flight Create Orders
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightOrder::OAIFlightOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightOrder::OAIFlightOrder() {
    this->initializeModel();
}

OAIFlightOrder::~OAIFlightOrder() {}

void OAIFlightOrder::initializeModel() {

    m_associated_records_isSet = false;
    m_associated_records_isValid = false;

    m_automated_process_isSet = false;
    m_automated_process_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_flight_offers_isSet = false;
    m_flight_offers_isValid = false;

    m_form_of_identifications_isSet = false;
    m_form_of_identifications_isValid = false;

    m_form_of_payments_isSet = false;
    m_form_of_payments_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_office_id_isSet = false;
    m_owner_office_id_isValid = false;

    m_queuing_office_id_isSet = false;
    m_queuing_office_id_isValid = false;

    m_remarks_isSet = false;
    m_remarks_isValid = false;

    m_ticketing_agreement_isSet = false;
    m_ticketing_agreement_isValid = false;

    m_tickets_isSet = false;
    m_tickets_isValid = false;

    m_travelers_isSet = false;
    m_travelers_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlightOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightOrder::fromJsonObject(QJsonObject json) {

    m_associated_records_isValid = ::OpenAPI::fromJsonValue(m_associated_records, json[QString("associatedRecords")]);
    m_associated_records_isSet = !json[QString("associatedRecords")].isNull() && m_associated_records_isValid;

    m_automated_process_isValid = ::OpenAPI::fromJsonValue(m_automated_process, json[QString("automatedProcess")]);
    m_automated_process_isSet = !json[QString("automatedProcess")].isNull() && m_automated_process_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_flight_offers_isValid = ::OpenAPI::fromJsonValue(m_flight_offers, json[QString("flightOffers")]);
    m_flight_offers_isSet = !json[QString("flightOffers")].isNull() && m_flight_offers_isValid;

    m_form_of_identifications_isValid = ::OpenAPI::fromJsonValue(m_form_of_identifications, json[QString("formOfIdentifications")]);
    m_form_of_identifications_isSet = !json[QString("formOfIdentifications")].isNull() && m_form_of_identifications_isValid;

    m_form_of_payments_isValid = ::OpenAPI::fromJsonValue(m_form_of_payments, json[QString("formOfPayments")]);
    m_form_of_payments_isSet = !json[QString("formOfPayments")].isNull() && m_form_of_payments_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_office_id_isValid = ::OpenAPI::fromJsonValue(m_owner_office_id, json[QString("ownerOfficeId")]);
    m_owner_office_id_isSet = !json[QString("ownerOfficeId")].isNull() && m_owner_office_id_isValid;

    m_queuing_office_id_isValid = ::OpenAPI::fromJsonValue(m_queuing_office_id, json[QString("queuingOfficeId")]);
    m_queuing_office_id_isSet = !json[QString("queuingOfficeId")].isNull() && m_queuing_office_id_isValid;

    m_remarks_isValid = ::OpenAPI::fromJsonValue(m_remarks, json[QString("remarks")]);
    m_remarks_isSet = !json[QString("remarks")].isNull() && m_remarks_isValid;

    m_ticketing_agreement_isValid = ::OpenAPI::fromJsonValue(m_ticketing_agreement, json[QString("ticketingAgreement")]);
    m_ticketing_agreement_isSet = !json[QString("ticketingAgreement")].isNull() && m_ticketing_agreement_isValid;

    m_tickets_isValid = ::OpenAPI::fromJsonValue(m_tickets, json[QString("tickets")]);
    m_tickets_isSet = !json[QString("tickets")].isNull() && m_tickets_isValid;

    m_travelers_isValid = ::OpenAPI::fromJsonValue(m_travelers, json[QString("travelers")]);
    m_travelers_isSet = !json[QString("travelers")].isNull() && m_travelers_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlightOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_records.size() > 0) {
        obj.insert(QString("associatedRecords"), ::OpenAPI::toJsonValue(m_associated_records));
    }
    if (m_automated_process.size() > 0) {
        obj.insert(QString("automatedProcess"), ::OpenAPI::toJsonValue(m_automated_process));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_flight_offers.size() > 0) {
        obj.insert(QString("flightOffers"), ::OpenAPI::toJsonValue(m_flight_offers));
    }
    if (m_form_of_identifications.size() > 0) {
        obj.insert(QString("formOfIdentifications"), ::OpenAPI::toJsonValue(m_form_of_identifications));
    }
    if (m_form_of_payments.size() > 0) {
        obj.insert(QString("formOfPayments"), ::OpenAPI::toJsonValue(m_form_of_payments));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_office_id_isSet) {
        obj.insert(QString("ownerOfficeId"), ::OpenAPI::toJsonValue(m_owner_office_id));
    }
    if (m_queuing_office_id_isSet) {
        obj.insert(QString("queuingOfficeId"), ::OpenAPI::toJsonValue(m_queuing_office_id));
    }
    if (m_remarks.isSet()) {
        obj.insert(QString("remarks"), ::OpenAPI::toJsonValue(m_remarks));
    }
    if (m_ticketing_agreement.isSet()) {
        obj.insert(QString("ticketingAgreement"), ::OpenAPI::toJsonValue(m_ticketing_agreement));
    }
    if (m_tickets.size() > 0) {
        obj.insert(QString("tickets"), ::OpenAPI::toJsonValue(m_tickets));
    }
    if (m_travelers.size() > 0) {
        obj.insert(QString("travelers"), ::OpenAPI::toJsonValue(m_travelers));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAssociatedRecord> OAIFlightOrder::getAssociatedRecords() const {
    return m_associated_records;
}
void OAIFlightOrder::setAssociatedRecords(const QList<OAIAssociatedRecord> &associated_records) {
    m_associated_records = associated_records;
    m_associated_records_isSet = true;
}

bool OAIFlightOrder::is_associated_records_Set() const{
    return m_associated_records_isSet;
}

bool OAIFlightOrder::is_associated_records_Valid() const{
    return m_associated_records_isValid;
}

QList<OAIAutomatedProcess> OAIFlightOrder::getAutomatedProcess() const {
    return m_automated_process;
}
void OAIFlightOrder::setAutomatedProcess(const QList<OAIAutomatedProcess> &automated_process) {
    m_automated_process = automated_process;
    m_automated_process_isSet = true;
}

bool OAIFlightOrder::is_automated_process_Set() const{
    return m_automated_process_isSet;
}

bool OAIFlightOrder::is_automated_process_Valid() const{
    return m_automated_process_isValid;
}

QList<OAIContact> OAIFlightOrder::getContacts() const {
    return m_contacts;
}
void OAIFlightOrder::setContacts(const QList<OAIContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIFlightOrder::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIFlightOrder::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QList<OAIFlightOffer> OAIFlightOrder::getFlightOffers() const {
    return m_flight_offers;
}
void OAIFlightOrder::setFlightOffers(const QList<OAIFlightOffer> &flight_offers) {
    m_flight_offers = flight_offers;
    m_flight_offers_isSet = true;
}

bool OAIFlightOrder::is_flight_offers_Set() const{
    return m_flight_offers_isSet;
}

bool OAIFlightOrder::is_flight_offers_Valid() const{
    return m_flight_offers_isValid;
}

QList<OAIFormOfIdentification> OAIFlightOrder::getFormOfIdentifications() const {
    return m_form_of_identifications;
}
void OAIFlightOrder::setFormOfIdentifications(const QList<OAIFormOfIdentification> &form_of_identifications) {
    m_form_of_identifications = form_of_identifications;
    m_form_of_identifications_isSet = true;
}

bool OAIFlightOrder::is_form_of_identifications_Set() const{
    return m_form_of_identifications_isSet;
}

bool OAIFlightOrder::is_form_of_identifications_Valid() const{
    return m_form_of_identifications_isValid;
}

QList<OAIFormOfPayment> OAIFlightOrder::getFormOfPayments() const {
    return m_form_of_payments;
}
void OAIFlightOrder::setFormOfPayments(const QList<OAIFormOfPayment> &form_of_payments) {
    m_form_of_payments = form_of_payments;
    m_form_of_payments_isSet = true;
}

bool OAIFlightOrder::is_form_of_payments_Set() const{
    return m_form_of_payments_isSet;
}

bool OAIFlightOrder::is_form_of_payments_Valid() const{
    return m_form_of_payments_isValid;
}

QString OAIFlightOrder::getId() const {
    return m_id;
}
void OAIFlightOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlightOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlightOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFlightOrder::getOwnerOfficeId() const {
    return m_owner_office_id;
}
void OAIFlightOrder::setOwnerOfficeId(const QString &owner_office_id) {
    m_owner_office_id = owner_office_id;
    m_owner_office_id_isSet = true;
}

bool OAIFlightOrder::is_owner_office_id_Set() const{
    return m_owner_office_id_isSet;
}

bool OAIFlightOrder::is_owner_office_id_Valid() const{
    return m_owner_office_id_isValid;
}

QString OAIFlightOrder::getQueuingOfficeId() const {
    return m_queuing_office_id;
}
void OAIFlightOrder::setQueuingOfficeId(const QString &queuing_office_id) {
    m_queuing_office_id = queuing_office_id;
    m_queuing_office_id_isSet = true;
}

bool OAIFlightOrder::is_queuing_office_id_Set() const{
    return m_queuing_office_id_isSet;
}

bool OAIFlightOrder::is_queuing_office_id_Valid() const{
    return m_queuing_office_id_isValid;
}

OAIRemarks OAIFlightOrder::getRemarks() const {
    return m_remarks;
}
void OAIFlightOrder::setRemarks(const OAIRemarks &remarks) {
    m_remarks = remarks;
    m_remarks_isSet = true;
}

bool OAIFlightOrder::is_remarks_Set() const{
    return m_remarks_isSet;
}

bool OAIFlightOrder::is_remarks_Valid() const{
    return m_remarks_isValid;
}

OAITicketingAgreement OAIFlightOrder::getTicketingAgreement() const {
    return m_ticketing_agreement;
}
void OAIFlightOrder::setTicketingAgreement(const OAITicketingAgreement &ticketing_agreement) {
    m_ticketing_agreement = ticketing_agreement;
    m_ticketing_agreement_isSet = true;
}

bool OAIFlightOrder::is_ticketing_agreement_Set() const{
    return m_ticketing_agreement_isSet;
}

bool OAIFlightOrder::is_ticketing_agreement_Valid() const{
    return m_ticketing_agreement_isValid;
}

QList<OAIAirTravelDocument> OAIFlightOrder::getTickets() const {
    return m_tickets;
}
void OAIFlightOrder::setTickets(const QList<OAIAirTravelDocument> &tickets) {
    m_tickets = tickets;
    m_tickets_isSet = true;
}

bool OAIFlightOrder::is_tickets_Set() const{
    return m_tickets_isSet;
}

bool OAIFlightOrder::is_tickets_Valid() const{
    return m_tickets_isValid;
}

QList<OAITraveler> OAIFlightOrder::getTravelers() const {
    return m_travelers;
}
void OAIFlightOrder::setTravelers(const QList<OAITraveler> &travelers) {
    m_travelers = travelers;
    m_travelers_isSet = true;
}

bool OAIFlightOrder::is_travelers_Set() const{
    return m_travelers_isSet;
}

bool OAIFlightOrder::is_travelers_Valid() const{
    return m_travelers_isValid;
}

QString OAIFlightOrder::getType() const {
    return m_type;
}
void OAIFlightOrder::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlightOrder::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlightOrder::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlightOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_process.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_of_identifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_of_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_office_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queuing_office_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remarks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticketing_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tickets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_travelers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flight_offers_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
