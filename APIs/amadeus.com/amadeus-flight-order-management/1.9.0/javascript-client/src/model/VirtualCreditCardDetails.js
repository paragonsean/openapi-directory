/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditCardBrand from './CreditCardBrand';
import CreditCardCommon from './CreditCardCommon';
import ElementaryPrice from './ElementaryPrice';

/**
 * The VirtualCreditCardDetails model module.
 * @module model/VirtualCreditCardDetails
 * @version 1.9.0
 */
class VirtualCreditCardDetails {
    /**
     * Constructs a new <code>VirtualCreditCardDetails</code>.
     * detail information of the virtual card
     * @alias module:model/VirtualCreditCardDetails
     * @implements module:model/CreditCardCommon
     * @implements module:model/ElementaryPrice
     */
    constructor() { 
        CreditCardCommon.initialize(this);ElementaryPrice.initialize(this);
        VirtualCreditCardDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualCreditCardDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualCreditCardDetails} obj Optional instance to populate.
     * @return {module:model/VirtualCreditCardDetails} The populated <code>VirtualCreditCardDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualCreditCardDetails();
            CreditCardCommon.constructFromObject(data, obj);
            ElementaryPrice.constructFromObject(data, obj);

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = CreditCardBrand.constructFromObject(data['brand']);
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('holder')) {
                obj['holder'] = ApiClient.convertToType(data['holder'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualCreditCardDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualCreditCardDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['holder'] && !(typeof data['holder'] === 'string' || data['holder'] instanceof String)) {
            throw new Error("Expected the field `holder` to be a primitive type in the JSON string but got " + data['holder']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreditCardBrand} brand
 */
VirtualCreditCardDetails.prototype['brand'] = undefined;

/**
 * credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)
 * @member {String} expiryDate
 */
VirtualCreditCardDetails.prototype['expiryDate'] = undefined;

/**
 * card holder as on the card
 * @member {String} holder
 */
VirtualCreditCardDetails.prototype['holder'] = undefined;

/**
 * card number
 * @member {String} number
 */
VirtualCreditCardDetails.prototype['number'] = undefined;

/**
 * Amount of the fare. could be alpha numeric. Ex- 500.20 or 514.13A, 'A'signifies additional collection.
 * @member {String} amount
 */
VirtualCreditCardDetails.prototype['amount'] = undefined;

/**
 * Currency type of the fare.
 * @member {String} currencyCode
 */
VirtualCreditCardDetails.prototype['currencyCode'] = undefined;


// Implement CreditCardCommon interface:
/**
 * @member {module:model/CreditCardBrand} brand
 */
CreditCardCommon.prototype['brand'] = undefined;
/**
 * credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)
 * @member {String} expiryDate
 */
CreditCardCommon.prototype['expiryDate'] = undefined;
/**
 * card holder as on the card
 * @member {String} holder
 */
CreditCardCommon.prototype['holder'] = undefined;
/**
 * card number
 * @member {String} number
 */
CreditCardCommon.prototype['number'] = undefined;
// Implement ElementaryPrice interface:
/**
 * Amount of the fare. could be alpha numeric. Ex- 500.20 or 514.13A, 'A'signifies additional collection.
 * @member {String} amount
 */
ElementaryPrice.prototype['amount'] = undefined;
/**
 * Currency type of the fare.
 * @member {String} currencyCode
 */
ElementaryPrice.prototype['currencyCode'] = undefined;




export default VirtualCreditCardDetails;

