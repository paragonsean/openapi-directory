/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeneralRemarkType from './GeneralRemarkType';

/**
 * The GeneralRemark model module.
 * @module model/GeneralRemark
 * @version 1.9.0
 */
class GeneralRemark {
    /**
     * Constructs a new <code>GeneralRemark</code>.
     * @alias module:model/GeneralRemark
     * @param subType {module:model/GeneralRemarkType} 
     * @param text {String} remark free text
     */
    constructor(subType, text) { 
        
        GeneralRemark.initialize(this, subType, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subType, text) { 
        obj['subType'] = subType;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>GeneralRemark</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeneralRemark} obj Optional instance to populate.
     * @return {module:model/GeneralRemark} The populated <code>GeneralRemark</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeneralRemark();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('flightOfferIds')) {
                obj['flightOfferIds'] = ApiClient.convertToType(data['flightOfferIds'], ['String']);
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = GeneralRemarkType.constructFromObject(data['subType']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('travelerIds')) {
                obj['travelerIds'] = ApiClient.convertToType(data['travelerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeneralRemark</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeneralRemark</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeneralRemark.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flightOfferIds'])) {
            throw new Error("Expected the field `flightOfferIds` to be an array in the JSON data but got " + data['flightOfferIds']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['travelerIds'])) {
            throw new Error("Expected the field `travelerIds` to be an array in the JSON data but got " + data['travelerIds']);
        }

        return true;
    }


}

GeneralRemark.RequiredProperties = ["subType", "text"];

/**
 * remark category
 * @member {String} category
 */
GeneralRemark.prototype['category'] = undefined;

/**
 * Id of the concern flightOffers
 * @member {Array.<String>} flightOfferIds
 */
GeneralRemark.prototype['flightOfferIds'] = undefined;

/**
 * @member {module:model/GeneralRemarkType} subType
 */
GeneralRemark.prototype['subType'] = undefined;

/**
 * remark free text
 * @member {String} text
 */
GeneralRemark.prototype['text'] = undefined;

/**
 * Id of the concerned traveler
 * @member {Array.<String>} travelerIds
 */
GeneralRemark.prototype['travelerIds'] = undefined;






export default GeneralRemark;

