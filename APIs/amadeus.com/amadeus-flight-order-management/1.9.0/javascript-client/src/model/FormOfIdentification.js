/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormOfIdentification model module.
 * @module model/FormOfIdentification
 * @version 1.9.0
 */
class FormOfIdentification {
    /**
     * Constructs a new <code>FormOfIdentification</code>.
     * alternative means of identifying stakeholders for eTicket.
     * @alias module:model/FormOfIdentification
     */
    constructor() { 
        
        FormOfIdentification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormOfIdentification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormOfIdentification} obj Optional instance to populate.
     * @return {module:model/FormOfIdentification} The populated <code>FormOfIdentification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormOfIdentification();

            if (data.hasOwnProperty('carrierCode')) {
                obj['carrierCode'] = ApiClient.convertToType(data['carrierCode'], 'String');
            }
            if (data.hasOwnProperty('flightOfferIds')) {
                obj['flightOfferIds'] = ApiClient.convertToType(data['flightOfferIds'], ['String']);
            }
            if (data.hasOwnProperty('identificationType')) {
                obj['identificationType'] = ApiClient.convertToType(data['identificationType'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('travelerIds')) {
                obj['travelerIds'] = ApiClient.convertToType(data['travelerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormOfIdentification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormOfIdentification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrierCode'] && !(typeof data['carrierCode'] === 'string' || data['carrierCode'] instanceof String)) {
            throw new Error("Expected the field `carrierCode` to be a primitive type in the JSON string but got " + data['carrierCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flightOfferIds'])) {
            throw new Error("Expected the field `flightOfferIds` to be an array in the JSON data but got " + data['flightOfferIds']);
        }
        // ensure the json data is a string
        if (data['identificationType'] && !(typeof data['identificationType'] === 'string' || data['identificationType'] instanceof String)) {
            throw new Error("Expected the field `identificationType` to be a primitive type in the JSON string but got " + data['identificationType']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['travelerIds'])) {
            throw new Error("Expected the field `travelerIds` to be an array in the JSON data but got " + data['travelerIds']);
        }

        return true;
    }


}



/**
 * providing the airline / carrier code
 * @member {String} carrierCode
 */
FormOfIdentification.prototype['carrierCode'] = undefined;

/**
 * Id of the concerned flightOffers
 * @member {Array.<String>} flightOfferIds
 */
FormOfIdentification.prototype['flightOfferIds'] = undefined;

/**
 * Type of identification
 * @member {module:model/FormOfIdentification.IdentificationTypeEnum} identificationType
 */
FormOfIdentification.prototype['identificationType'] = undefined;

/**
 * identification number relative to the type of identification either ticket number, booking number, passport number, identity card number, drivers licence number, other ID
 * @member {String} number
 */
FormOfIdentification.prototype['number'] = undefined;

/**
 * Ids of the concerned travelers
 * @member {Array.<String>} travelerIds
 */
FormOfIdentification.prototype['travelerIds'] = undefined;





/**
 * Allowed values for the <code>identificationType</code> property.
 * @enum {String}
 * @readonly
 */
FormOfIdentification['IdentificationTypeEnum'] = {

    /**
     * value: "DRIVERS_LICENSE"
     * @const
     */
    "DRIVERS_LICENSE": "DRIVERS_LICENSE",

    /**
     * value: "PASSPORT"
     * @const
     */
    "PASSPORT": "PASSPORT",

    /**
     * value: "NATIONAL_IDENTITY_CARD"
     * @const
     */
    "NATIONAL_IDENTITY_CARD": "NATIONAL_IDENTITY_CARD",

    /**
     * value: "BOOKING_CONFIRMATION"
     * @const
     */
    "BOOKING_CONFIRMATION": "BOOKING_CONFIRMATION",

    /**
     * value: "TICKET"
     * @const
     */
    "TICKET": "TICKET",

    /**
     * value: "OTHER_ID"
     * @const
     */
    "OTHER_ID": "OTHER_ID"
};



export default FormOfIdentification;

