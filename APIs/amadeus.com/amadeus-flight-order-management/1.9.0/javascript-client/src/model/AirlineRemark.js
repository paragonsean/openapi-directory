/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirlineRemarkType from './AirlineRemarkType';

/**
 * The AirlineRemark model module.
 * @module model/AirlineRemark
 * @version 1.9.0
 */
class AirlineRemark {
    /**
     * Constructs a new <code>AirlineRemark</code>.
     * @alias module:model/AirlineRemark
     * @param airlineCode {String} Code of the airline following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx))  When it apply to any airline, value is YY. 
     * @param subType {module:model/AirlineRemarkType} 
     * @param text {String} remark free text
     */
    constructor(airlineCode, subType, text) { 
        
        AirlineRemark.initialize(this, airlineCode, subType, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, airlineCode, subType, text) { 
        obj['airlineCode'] = airlineCode;
        obj['subType'] = subType;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>AirlineRemark</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirlineRemark} obj Optional instance to populate.
     * @return {module:model/AirlineRemark} The populated <code>AirlineRemark</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirlineRemark();

            if (data.hasOwnProperty('airlineCode')) {
                obj['airlineCode'] = ApiClient.convertToType(data['airlineCode'], 'String');
            }
            if (data.hasOwnProperty('flightOfferIds')) {
                obj['flightOfferIds'] = ApiClient.convertToType(data['flightOfferIds'], ['String']);
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = AirlineRemarkType.constructFromObject(data['subType']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('travelerIds')) {
                obj['travelerIds'] = ApiClient.convertToType(data['travelerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirlineRemark</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirlineRemark</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirlineRemark.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['airlineCode'] && !(typeof data['airlineCode'] === 'string' || data['airlineCode'] instanceof String)) {
            throw new Error("Expected the field `airlineCode` to be a primitive type in the JSON string but got " + data['airlineCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flightOfferIds'])) {
            throw new Error("Expected the field `flightOfferIds` to be an array in the JSON data but got " + data['flightOfferIds']);
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['travelerIds'])) {
            throw new Error("Expected the field `travelerIds` to be an array in the JSON data but got " + data['travelerIds']);
        }

        return true;
    }


}

AirlineRemark.RequiredProperties = ["airlineCode", "subType", "text"];

/**
 * Code of the airline following IATA standard ([IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx))  When it apply to any airline, value is YY. 
 * @member {String} airlineCode
 */
AirlineRemark.prototype['airlineCode'] = undefined;

/**
 * Id of the concern flightOffers
 * @member {Array.<String>} flightOfferIds
 */
AirlineRemark.prototype['flightOfferIds'] = undefined;

/**
 * keyword code - only applicable for subType Keyword
 * @member {String} keyword
 */
AirlineRemark.prototype['keyword'] = undefined;

/**
 * @member {module:model/AirlineRemarkType} subType
 */
AirlineRemark.prototype['subType'] = undefined;

/**
 * remark free text
 * @member {String} text
 */
AirlineRemark.prototype['text'] = undefined;

/**
 * Id of the concerned traveler
 * @member {Array.<String>} travelerIds
 */
AirlineRemark.prototype['travelerIds'] = undefined;






export default AirlineRemark;

