/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseName from './BaseName';

/**
 * The Name model module.
 * @module model/Name
 * @version 1.9.0
 */
class Name {
    /**
     * Constructs a new <code>Name</code>.
     * name
     * @alias module:model/Name
     * @implements module:model/BaseName
     */
    constructor() { 
        BaseName.initialize(this);
        Name.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Name();
            BaseName.constructFromObject(data, obj);

            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('secondLastName')) {
                obj['secondLastName'] = ApiClient.convertToType(data['secondLastName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Name</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Name</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['secondLastName'] && !(typeof data['secondLastName'] === 'string' || data['secondLastName'] instanceof String)) {
            throw new Error("Expected the field `secondLastName` to be a primitive type in the JSON string but got " + data['secondLastName']);
        }

        return true;
    }


}



/**
 * First name.
 * @member {String} firstName
 */
Name.prototype['firstName'] = undefined;

/**
 * Last name.
 * @member {String} lastName
 */
Name.prototype['lastName'] = undefined;

/**
 * Middle name(s), for example \"Lee\" in \"John Lee Smith\".
 * @member {String} middleName
 */
Name.prototype['middleName'] = undefined;

/**
 * second last name
 * @member {String} secondLastName
 */
Name.prototype['secondLastName'] = undefined;


// Implement BaseName interface:
/**
 * First name.
 * @member {String} firstName
 */
BaseName.prototype['firstName'] = undefined;
/**
 * Last name.
 * @member {String} lastName
 */
BaseName.prototype['lastName'] = undefined;
/**
 * Middle name(s), for example \"Lee\" in \"John Lee Smith\".
 * @member {String} middleName
 */
BaseName.prototype['middleName'] = undefined;




export default Name;

