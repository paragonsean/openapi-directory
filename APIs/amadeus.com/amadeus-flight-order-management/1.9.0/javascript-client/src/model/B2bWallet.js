/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportingData from './ReportingData';
import VirtualCreditCardDetails from './VirtualCreditCardDetails';

/**
 * The B2bWallet model module.
 * @module model/B2bWallet
 * @version 1.9.0
 */
class B2bWallet {
    /**
     * Constructs a new <code>B2bWallet</code>.
     * b2b wallet
     * @alias module:model/B2bWallet
     */
    constructor() { 
        
        B2bWallet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>B2bWallet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/B2bWallet} obj Optional instance to populate.
     * @return {module:model/B2bWallet} The populated <code>B2bWallet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new B2bWallet();

            if (data.hasOwnProperty('cardFriendlyName')) {
                obj['cardFriendlyName'] = ApiClient.convertToType(data['cardFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('cardId')) {
                obj['cardId'] = ApiClient.convertToType(data['cardId'], 'String');
            }
            if (data.hasOwnProperty('cardUsageName')) {
                obj['cardUsageName'] = ApiClient.convertToType(data['cardUsageName'], 'String');
            }
            if (data.hasOwnProperty('flightOfferIds')) {
                obj['flightOfferIds'] = ApiClient.convertToType(data['flightOfferIds'], ['String']);
            }
            if (data.hasOwnProperty('reportingData')) {
                obj['reportingData'] = ApiClient.convertToType(data['reportingData'], [ReportingData]);
            }
            if (data.hasOwnProperty('virtualCreditCardDetails')) {
                obj['virtualCreditCardDetails'] = VirtualCreditCardDetails.constructFromObject(data['virtualCreditCardDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>B2bWallet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>B2bWallet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardFriendlyName'] && !(typeof data['cardFriendlyName'] === 'string' || data['cardFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `cardFriendlyName` to be a primitive type in the JSON string but got " + data['cardFriendlyName']);
        }
        // ensure the json data is a string
        if (data['cardId'] && !(typeof data['cardId'] === 'string' || data['cardId'] instanceof String)) {
            throw new Error("Expected the field `cardId` to be a primitive type in the JSON string but got " + data['cardId']);
        }
        // ensure the json data is a string
        if (data['cardUsageName'] && !(typeof data['cardUsageName'] === 'string' || data['cardUsageName'] instanceof String)) {
            throw new Error("Expected the field `cardUsageName` to be a primitive type in the JSON string but got " + data['cardUsageName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flightOfferIds'])) {
            throw new Error("Expected the field `flightOfferIds` to be an array in the JSON data but got " + data['flightOfferIds']);
        }
        if (data['reportingData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reportingData'])) {
                throw new Error("Expected the field `reportingData` to be an array in the JSON data but got " + data['reportingData']);
            }
            // validate the optional field `reportingData` (array)
            for (const item of data['reportingData']) {
                ReportingData.validateJSON(item);
            };
        }
        // validate the optional field `virtualCreditCardDetails`
        if (data['virtualCreditCardDetails']) { // data not null
          VirtualCreditCardDetails.validateJSON(data['virtualCreditCardDetails']);
        }

        return true;
    }


}



/**
 * card name
 * @member {String} cardFriendlyName
 */
B2bWallet.prototype['cardFriendlyName'] = undefined;

/**
 * card identifier
 * @member {String} cardId
 */
B2bWallet.prototype['cardId'] = undefined;

/**
 * card usage name
 * @member {String} cardUsageName
 */
B2bWallet.prototype['cardUsageName'] = undefined;

/**
 * Id of the concern flightOffers
 * @member {Array.<String>} flightOfferIds
 */
B2bWallet.prototype['flightOfferIds'] = undefined;

/**
 * @member {Array.<module:model/ReportingData>} reportingData
 */
B2bWallet.prototype['reportingData'] = undefined;

/**
 * @member {module:model/VirtualCreditCardDetails} virtualCreditCardDetails
 */
B2bWallet.prototype['virtualCreditCardDetails'] = undefined;






export default B2bWallet;

