/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirTravelDocumentCommon from './AirTravelDocumentCommon';

/**
 * The AirTravelDocument model module.
 * @module model/AirTravelDocument
 * @version 1.9.0
 */
class AirTravelDocument {
    /**
     * Constructs a new <code>AirTravelDocument</code>.
     * ticket information
     * @alias module:model/AirTravelDocument
     * @implements module:model/AirTravelDocumentCommon
     */
    constructor() { 
        AirTravelDocumentCommon.initialize(this);
        AirTravelDocument.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirTravelDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirTravelDocument} obj Optional instance to populate.
     * @return {module:model/AirTravelDocument} The populated <code>AirTravelDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirTravelDocument();
            AirTravelDocumentCommon.constructFromObject(data, obj);

            if (data.hasOwnProperty('documentNumber')) {
                obj['documentNumber'] = ApiClient.convertToType(data['documentNumber'], 'String');
            }
            if (data.hasOwnProperty('documentStatus')) {
                obj['documentStatus'] = ApiClient.convertToType(data['documentStatus'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('segmentIds')) {
                obj['segmentIds'] = ApiClient.convertToType(data['segmentIds'], ['String']);
            }
            if (data.hasOwnProperty('travelerId')) {
                obj['travelerId'] = ApiClient.convertToType(data['travelerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirTravelDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirTravelDocument</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['documentNumber'] && !(typeof data['documentNumber'] === 'string' || data['documentNumber'] instanceof String)) {
            throw new Error("Expected the field `documentNumber` to be a primitive type in the JSON string but got " + data['documentNumber']);
        }
        // ensure the json data is a string
        if (data['documentStatus'] && !(typeof data['documentStatus'] === 'string' || data['documentStatus'] instanceof String)) {
            throw new Error("Expected the field `documentStatus` to be a primitive type in the JSON string but got " + data['documentStatus']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segmentIds'])) {
            throw new Error("Expected the field `segmentIds` to be an array in the JSON data but got " + data['segmentIds']);
        }
        // ensure the json data is a string
        if (data['travelerId'] && !(typeof data['travelerId'] === 'string' || data['travelerId'] instanceof String)) {
            throw new Error("Expected the field `travelerId` to be a primitive type in the JSON string but got " + data['travelerId']);
        }

        return true;
    }


}



/**
 * Identifier of the travel document prefixed by its owner code [NALC - 3 digits]. Can either be a primary or a conjunctive document number. Necessary for TicketingReference definition.
 * @member {String} documentNumber
 */
AirTravelDocument.prototype['documentNumber'] = undefined;

/**
 * Status of the travel document contained in the fare element
 * @member {module:model/AirTravelDocument.DocumentStatusEnum} documentStatus
 */
AirTravelDocument.prototype['documentStatus'] = undefined;

/**
 * Type of the travel document
 * @member {module:model/AirTravelDocument.DocumentTypeEnum} documentType
 */
AirTravelDocument.prototype['documentType'] = undefined;

/**
 * Ids of the impacted segments
 * @member {Array.<String>} segmentIds
 */
AirTravelDocument.prototype['segmentIds'] = undefined;

/**
 * id of the impacted traveler
 * @member {String} travelerId
 */
AirTravelDocument.prototype['travelerId'] = undefined;


// Implement AirTravelDocumentCommon interface:
/**
 * Identifier of the travel document prefixed by its owner code [NALC - 3 digits]. Can either be a primary or a conjunctive document number. Necessary for TicketingReference definition.
 * @member {String} documentNumber
 */
AirTravelDocumentCommon.prototype['documentNumber'] = undefined;
/**
 * Status of the travel document contained in the fare element
 * @member {module:model/AirTravelDocumentCommon.DocumentStatusEnum} documentStatus
 */
AirTravelDocumentCommon.prototype['documentStatus'] = undefined;
/**
 * Type of the travel document
 * @member {module:model/AirTravelDocumentCommon.DocumentTypeEnum} documentType
 */
AirTravelDocumentCommon.prototype['documentType'] = undefined;



/**
 * Allowed values for the <code>documentStatus</code> property.
 * @enum {String}
 * @readonly
 */
AirTravelDocument['DocumentStatusEnum'] = {

    /**
     * value: "ISSUED"
     * @const
     */
    "ISSUED": "ISSUED",

    /**
     * value: "REFUNDED"
     * @const
     */
    "REFUNDED": "REFUNDED",

    /**
     * value: "VOID"
     * @const
     */
    "VOID": "VOID",

    /**
     * value: "ORIGINAL"
     * @const
     */
    "ORIGINAL": "ORIGINAL",

    /**
     * value: "EXCHANGED"
     * @const
     */
    "EXCHANGED": "EXCHANGED"
};


/**
 * Allowed values for the <code>documentType</code> property.
 * @enum {String}
 * @readonly
 */
AirTravelDocument['DocumentTypeEnum'] = {

    /**
     * value: "ETICKET"
     * @const
     */
    "ETICKET": "ETICKET",

    /**
     * value: "PTICKET"
     * @const
     */
    "PTICKET": "PTICKET",

    /**
     * value: "EMD"
     * @const
     */
    "EMD": "EMD",

    /**
     * value: "MCO"
     * @const
     */
    "MCO": "MCO"
};



export default AirTravelDocument;

