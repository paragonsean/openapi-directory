/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyProgram::OAILoyaltyProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyProgram::OAILoyaltyProgram() {
    this->initializeModel();
}

OAILoyaltyProgram::~OAILoyaltyProgram() {}

void OAILoyaltyProgram::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_program_owner_isSet = false;
    m_program_owner_isValid = false;
}

void OAILoyaltyProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyProgram::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_program_owner_isValid = ::OpenAPI::fromJsonValue(m_program_owner, json[QString("programOwner")]);
    m_program_owner_isSet = !json[QString("programOwner")].isNull() && m_program_owner_isValid;
}

QString OAILoyaltyProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_program_owner_isSet) {
        obj.insert(QString("programOwner"), ::OpenAPI::toJsonValue(m_program_owner));
    }
    return obj;
}

QString OAILoyaltyProgram::getId() const {
    return m_id;
}
void OAILoyaltyProgram::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoyaltyProgram::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoyaltyProgram::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILoyaltyProgram::getProgramOwner() const {
    return m_program_owner;
}
void OAILoyaltyProgram::setProgramOwner(const QString &program_owner) {
    m_program_owner = program_owner;
    m_program_owner_isSet = true;
}

bool OAILoyaltyProgram::is_program_owner_Set() const{
    return m_program_owner_isSet;
}

bool OAILoyaltyProgram::is_program_owner_Valid() const{
    return m_program_owner_isValid;
}

bool OAILoyaltyProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
