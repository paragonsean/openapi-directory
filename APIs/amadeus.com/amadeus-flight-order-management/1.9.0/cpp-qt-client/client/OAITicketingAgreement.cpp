/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketingAgreement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketingAgreement::OAITicketingAgreement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketingAgreement::OAITicketingAgreement() {
    this->initializeModel();
}

OAITicketingAgreement::~OAITicketingAgreement() {}

void OAITicketingAgreement::initializeModel() {

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_option_isSet = false;
    m_option_isValid = false;

    m_segment_ids_isSet = false;
    m_segment_ids_isValid = false;
}

void OAITicketingAgreement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketingAgreement::fromJsonObject(QJsonObject json) {

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_segment_ids_isValid = ::OpenAPI::fromJsonValue(m_segment_ids, json[QString("segmentIds")]);
    m_segment_ids_isSet = !json[QString("segmentIds")].isNull() && m_segment_ids_isValid;
}

QString OAITicketingAgreement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketingAgreement::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_option.isSet()) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_segment_ids.size() > 0) {
        obj.insert(QString("segmentIds"), ::OpenAPI::toJsonValue(m_segment_ids));
    }
    return obj;
}

QString OAITicketingAgreement::getDateTime() const {
    return m_date_time;
}
void OAITicketingAgreement::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAITicketingAgreement::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAITicketingAgreement::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAITicketingAgreement::getDelay() const {
    return m_delay;
}
void OAITicketingAgreement::setDelay(const QString &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAITicketingAgreement::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAITicketingAgreement::is_delay_Valid() const{
    return m_delay_isValid;
}

OAITicketingAgreementOption OAITicketingAgreement::getOption() const {
    return m_option;
}
void OAITicketingAgreement::setOption(const OAITicketingAgreementOption &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAITicketingAgreement::is_option_Set() const{
    return m_option_isSet;
}

bool OAITicketingAgreement::is_option_Valid() const{
    return m_option_isValid;
}

QList<QString> OAITicketingAgreement::getSegmentIds() const {
    return m_segment_ids;
}
void OAITicketingAgreement::setSegmentIds(const QList<QString> &segment_ids) {
    m_segment_ids = segment_ids;
    m_segment_ids_isSet = true;
}

bool OAITicketingAgreement::is_segment_ids_Set() const{
    return m_segment_ids_isSet;
}

bool OAITicketingAgreement::is_segment_ids_Valid() const{
    return m_segment_ids_isValid;
}

bool OAITicketingAgreement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketingAgreement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
