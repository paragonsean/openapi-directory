/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemarks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemarks::OAIRemarks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemarks::OAIRemarks() {
    this->initializeModel();
}

OAIRemarks::~OAIRemarks() {}

void OAIRemarks::initializeModel() {

    m_airline_isSet = false;
    m_airline_isValid = false;

    m_general_isSet = false;
    m_general_isValid = false;
}

void OAIRemarks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemarks::fromJsonObject(QJsonObject json) {

    m_airline_isValid = ::OpenAPI::fromJsonValue(m_airline, json[QString("airline")]);
    m_airline_isSet = !json[QString("airline")].isNull() && m_airline_isValid;

    m_general_isValid = ::OpenAPI::fromJsonValue(m_general, json[QString("general")]);
    m_general_isSet = !json[QString("general")].isNull() && m_general_isValid;
}

QString OAIRemarks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemarks::asJsonObject() const {
    QJsonObject obj;
    if (m_airline.size() > 0) {
        obj.insert(QString("airline"), ::OpenAPI::toJsonValue(m_airline));
    }
    if (m_general.size() > 0) {
        obj.insert(QString("general"), ::OpenAPI::toJsonValue(m_general));
    }
    return obj;
}

QList<OAIAirlineRemark> OAIRemarks::getAirline() const {
    return m_airline;
}
void OAIRemarks::setAirline(const QList<OAIAirlineRemark> &airline) {
    m_airline = airline;
    m_airline_isSet = true;
}

bool OAIRemarks::is_airline_Set() const{
    return m_airline_isSet;
}

bool OAIRemarks::is_airline_Valid() const{
    return m_airline_isValid;
}

QList<OAIGeneralRemark> OAIRemarks::getGeneral() const {
    return m_general;
}
void OAIRemarks::setGeneral(const QList<OAIGeneralRemark> &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OAIRemarks::is_general_Set() const{
    return m_general_isSet;
}

bool OAIRemarks::is_general_Valid() const{
    return m_general_isValid;
}

bool OAIRemarks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airline.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemarks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
