/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirTravelDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirTravelDocument::OAIAirTravelDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirTravelDocument::OAIAirTravelDocument() {
    this->initializeModel();
}

OAIAirTravelDocument::~OAIAirTravelDocument() {}

void OAIAirTravelDocument::initializeModel() {

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_document_status_isSet = false;
    m_document_status_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_segment_ids_isSet = false;
    m_segment_ids_isValid = false;

    m_traveler_id_isSet = false;
    m_traveler_id_isValid = false;
}

void OAIAirTravelDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirTravelDocument::fromJsonObject(QJsonObject json) {

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("documentNumber")]);
    m_document_number_isSet = !json[QString("documentNumber")].isNull() && m_document_number_isValid;

    m_document_status_isValid = ::OpenAPI::fromJsonValue(m_document_status, json[QString("documentStatus")]);
    m_document_status_isSet = !json[QString("documentStatus")].isNull() && m_document_status_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_segment_ids_isValid = ::OpenAPI::fromJsonValue(m_segment_ids, json[QString("segmentIds")]);
    m_segment_ids_isSet = !json[QString("segmentIds")].isNull() && m_segment_ids_isValid;

    m_traveler_id_isValid = ::OpenAPI::fromJsonValue(m_traveler_id, json[QString("travelerId")]);
    m_traveler_id_isSet = !json[QString("travelerId")].isNull() && m_traveler_id_isValid;
}

QString OAIAirTravelDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirTravelDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_number_isSet) {
        obj.insert(QString("documentNumber"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_document_status_isSet) {
        obj.insert(QString("documentStatus"), ::OpenAPI::toJsonValue(m_document_status));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_segment_ids.size() > 0) {
        obj.insert(QString("segmentIds"), ::OpenAPI::toJsonValue(m_segment_ids));
    }
    if (m_traveler_id_isSet) {
        obj.insert(QString("travelerId"), ::OpenAPI::toJsonValue(m_traveler_id));
    }
    return obj;
}

QString OAIAirTravelDocument::getDocumentNumber() const {
    return m_document_number;
}
void OAIAirTravelDocument::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAIAirTravelDocument::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAIAirTravelDocument::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAIAirTravelDocument::getDocumentStatus() const {
    return m_document_status;
}
void OAIAirTravelDocument::setDocumentStatus(const QString &document_status) {
    m_document_status = document_status;
    m_document_status_isSet = true;
}

bool OAIAirTravelDocument::is_document_status_Set() const{
    return m_document_status_isSet;
}

bool OAIAirTravelDocument::is_document_status_Valid() const{
    return m_document_status_isValid;
}

QString OAIAirTravelDocument::getDocumentType() const {
    return m_document_type;
}
void OAIAirTravelDocument::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIAirTravelDocument::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIAirTravelDocument::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QList<QString> OAIAirTravelDocument::getSegmentIds() const {
    return m_segment_ids;
}
void OAIAirTravelDocument::setSegmentIds(const QList<QString> &segment_ids) {
    m_segment_ids = segment_ids;
    m_segment_ids_isSet = true;
}

bool OAIAirTravelDocument::is_segment_ids_Set() const{
    return m_segment_ids_isSet;
}

bool OAIAirTravelDocument::is_segment_ids_Valid() const{
    return m_segment_ids_isValid;
}

QString OAIAirTravelDocument::getTravelerId() const {
    return m_traveler_id;
}
void OAIAirTravelDocument::setTravelerId(const QString &traveler_id) {
    m_traveler_id = traveler_id;
    m_traveler_id_isSet = true;
}

bool OAIAirTravelDocument::is_traveler_id_Set() const{
    return m_traveler_id_isSet;
}

bool OAIAirTravelDocument::is_traveler_id_Valid() const{
    return m_traveler_id_isValid;
}

bool OAIAirTravelDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirTravelDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
