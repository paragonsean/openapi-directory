/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralRemark.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralRemark::OAIGeneralRemark(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralRemark::OAIGeneralRemark() {
    this->initializeModel();
}

OAIGeneralRemark::~OAIGeneralRemark() {}

void OAIGeneralRemark::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_flight_offer_ids_isSet = false;
    m_flight_offer_ids_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_traveler_ids_isSet = false;
    m_traveler_ids_isValid = false;
}

void OAIGeneralRemark::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralRemark::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_flight_offer_ids_isValid = ::OpenAPI::fromJsonValue(m_flight_offer_ids, json[QString("flightOfferIds")]);
    m_flight_offer_ids_isSet = !json[QString("flightOfferIds")].isNull() && m_flight_offer_ids_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_traveler_ids_isValid = ::OpenAPI::fromJsonValue(m_traveler_ids, json[QString("travelerIds")]);
    m_traveler_ids_isSet = !json[QString("travelerIds")].isNull() && m_traveler_ids_isValid;
}

QString OAIGeneralRemark::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralRemark::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_flight_offer_ids.size() > 0) {
        obj.insert(QString("flightOfferIds"), ::OpenAPI::toJsonValue(m_flight_offer_ids));
    }
    if (m_sub_type.isSet()) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_traveler_ids.size() > 0) {
        obj.insert(QString("travelerIds"), ::OpenAPI::toJsonValue(m_traveler_ids));
    }
    return obj;
}

QString OAIGeneralRemark::getCategory() const {
    return m_category;
}
void OAIGeneralRemark::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGeneralRemark::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGeneralRemark::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIGeneralRemark::getFlightOfferIds() const {
    return m_flight_offer_ids;
}
void OAIGeneralRemark::setFlightOfferIds(const QList<QString> &flight_offer_ids) {
    m_flight_offer_ids = flight_offer_ids;
    m_flight_offer_ids_isSet = true;
}

bool OAIGeneralRemark::is_flight_offer_ids_Set() const{
    return m_flight_offer_ids_isSet;
}

bool OAIGeneralRemark::is_flight_offer_ids_Valid() const{
    return m_flight_offer_ids_isValid;
}

OAIGeneralRemarkType OAIGeneralRemark::getSubType() const {
    return m_sub_type;
}
void OAIGeneralRemark::setSubType(const OAIGeneralRemarkType &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIGeneralRemark::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIGeneralRemark::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAIGeneralRemark::getText() const {
    return m_text;
}
void OAIGeneralRemark::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGeneralRemark::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGeneralRemark::is_text_Valid() const{
    return m_text_isValid;
}

QList<QString> OAIGeneralRemark::getTravelerIds() const {
    return m_traveler_ids;
}
void OAIGeneralRemark::setTravelerIds(const QList<QString> &traveler_ids) {
    m_traveler_ids = traveler_ids;
    m_traveler_ids_isSet = true;
}

bool OAIGeneralRemark::is_traveler_ids_Set() const{
    return m_traveler_ids_isSet;
}

bool OAIGeneralRemark::is_traveler_ids_Valid() const{
    return m_traveler_ids_isValid;
}

bool OAIGeneralRemark::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_offer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traveler_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralRemark::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sub_type_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
