/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketingAgreementOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketingAgreementOption::OAITicketingAgreementOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketingAgreementOption::OAITicketingAgreementOption() {
    this->initializeModel();
}

OAITicketingAgreementOption::~OAITicketingAgreementOption() {}

void OAITicketingAgreementOption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITicketingAgreementOption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITicketingAgreementOption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CONFIRM", Qt::CaseInsensitive) == 0) {
        m_value = eOAITicketingAgreementOption::CONFIRM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAY_TO_QUEUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITicketingAgreementOption::DELAY_TO_QUEUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELAY_TO_CANCEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITicketingAgreementOption::DELAY_TO_CANCEL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITicketingAgreementOption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITicketingAgreementOption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITicketingAgreementOption::CONFIRM:
            val = "CONFIRM";
            break;
        case eOAITicketingAgreementOption::DELAY_TO_QUEUE:
            val = "DELAY_TO_QUEUE";
            break;
        case eOAITicketingAgreementOption::DELAY_TO_CANCEL:
            val = "DELAY_TO_CANCEL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITicketingAgreementOption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITicketingAgreementOption::eOAITicketingAgreementOption OAITicketingAgreementOption::getValue() const {
    return m_value;
}

void OAITicketingAgreementOption::setValue(const OAITicketingAgreementOption::eOAITicketingAgreementOption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITicketingAgreementOption::isSet() const {
    
    return m_value_isSet;
}

bool OAITicketingAgreementOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
