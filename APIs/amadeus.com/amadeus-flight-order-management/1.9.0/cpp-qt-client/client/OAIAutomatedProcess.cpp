/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomatedProcess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomatedProcess::OAIAutomatedProcess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomatedProcess::OAIAutomatedProcess() {
    this->initializeModel();
}

OAIAutomatedProcess::~OAIAutomatedProcess() {}

void OAIAutomatedProcess::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_office_id_isSet = false;
    m_office_id_isValid = false;
}

void OAIAutomatedProcess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomatedProcess::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_office_id_isValid = ::OpenAPI::fromJsonValue(m_office_id, json[QString("officeId")]);
    m_office_id_isSet = !json[QString("officeId")].isNull() && m_office_id_isValid;
}

QString OAIAutomatedProcess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomatedProcess::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_queue.isSet()) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_office_id_isSet) {
        obj.insert(QString("officeId"), ::OpenAPI::toJsonValue(m_office_id));
    }
    return obj;
}

OAIAutomatedProcessCode OAIAutomatedProcess::getCode() const {
    return m_code;
}
void OAIAutomatedProcess::setCode(const OAIAutomatedProcessCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAutomatedProcess::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAutomatedProcess::is_code_Valid() const{
    return m_code_isValid;
}

OAIQueue OAIAutomatedProcess::getQueue() const {
    return m_queue;
}
void OAIAutomatedProcess::setQueue(const OAIQueue &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIAutomatedProcess::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIAutomatedProcess::is_queue_Valid() const{
    return m_queue_isValid;
}

QString OAIAutomatedProcess::getText() const {
    return m_text;
}
void OAIAutomatedProcess::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAutomatedProcess::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAutomatedProcess::is_text_Valid() const{
    return m_text_isValid;
}

QDateTime OAIAutomatedProcess::getDateTime() const {
    return m_date_time;
}
void OAIAutomatedProcess::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIAutomatedProcess::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIAutomatedProcess::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIAutomatedProcess::getDelay() const {
    return m_delay;
}
void OAIAutomatedProcess::setDelay(const QString &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIAutomatedProcess::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIAutomatedProcess::is_delay_Valid() const{
    return m_delay_isValid;
}

QString OAIAutomatedProcess::getOfficeId() const {
    return m_office_id;
}
void OAIAutomatedProcess::setOfficeId(const QString &office_id) {
    m_office_id = office_id;
    m_office_id_isSet = true;
}

bool OAIAutomatedProcess::is_office_id_Set() const{
    return m_office_id_isSet;
}

bool OAIAutomatedProcess::is_office_id_Valid() const{
    return m_office_id_isValid;
}

bool OAIAutomatedProcess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomatedProcess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
