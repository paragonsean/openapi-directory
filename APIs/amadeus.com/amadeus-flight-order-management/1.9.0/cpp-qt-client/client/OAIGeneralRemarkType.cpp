/**
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralRemarkType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralRemarkType::OAIGeneralRemarkType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralRemarkType::OAIGeneralRemarkType() {
    this->initializeModel();
}

OAIGeneralRemarkType::~OAIGeneralRemarkType() {}

void OAIGeneralRemarkType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIGeneralRemarkType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIGeneralRemarkType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GENERAL_MISCELLANEOUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::GENERAL_MISCELLANEOUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIDENTIAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::CONFIDENTIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVOICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::INVOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY_CONTROL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::QUALITY_CONTROL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKOFFICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::BACKOFFICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULFILLMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::FULFILLMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITINERARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::ITINERARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TICKETING_MISCELLANEOUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::TICKETING_MISCELLANEOUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOUR_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralRemarkType::TOUR_CODE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIGeneralRemarkType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIGeneralRemarkType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIGeneralRemarkType::GENERAL_MISCELLANEOUS:
            val = "GENERAL_MISCELLANEOUS";
            break;
        case eOAIGeneralRemarkType::CONFIDENTIAL:
            val = "CONFIDENTIAL";
            break;
        case eOAIGeneralRemarkType::INVOICE:
            val = "INVOICE";
            break;
        case eOAIGeneralRemarkType::QUALITY_CONTROL:
            val = "QUALITY_CONTROL";
            break;
        case eOAIGeneralRemarkType::BACKOFFICE:
            val = "BACKOFFICE";
            break;
        case eOAIGeneralRemarkType::FULFILLMENT:
            val = "FULFILLMENT";
            break;
        case eOAIGeneralRemarkType::ITINERARY:
            val = "ITINERARY";
            break;
        case eOAIGeneralRemarkType::TICKETING_MISCELLANEOUS:
            val = "TICKETING_MISCELLANEOUS";
            break;
        case eOAIGeneralRemarkType::TOUR_CODE:
            val = "TOUR_CODE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIGeneralRemarkType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIGeneralRemarkType::eOAIGeneralRemarkType OAIGeneralRemarkType::getValue() const {
    return m_value;
}

void OAIGeneralRemarkType::setValue(const OAIGeneralRemarkType::eOAIGeneralRemarkType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIGeneralRemarkType::isSet() const {
    
    return m_value_isSet;
}

bool OAIGeneralRemarkType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
