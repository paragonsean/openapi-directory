/*
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AircraftEquipment;
import org.openapitools.client.model.Co2Emission;
import org.openapitools.client.model.FlightEndPoint;
import org.openapitools.client.model.FlightStop;
import org.openapitools.client.model.OperatingFlight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Segment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:54.608298-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Segment {
  public static final String SERIALIZED_NAME_AIRCRAFT = "aircraft";
  @SerializedName(SERIALIZED_NAME_AIRCRAFT)
  private AircraftEquipment aircraft;

  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  private FlightEndPoint arrival;

  /**
   * booking status of the segment
   */
  @JsonAdapter(BookingStatusEnum.Adapter.class)
  public enum BookingStatusEnum {
    CONFIRMED("CONFIRMED"),
    
    WAITLISTED("WAITLISTED"),
    
    CANCELLED("CANCELLED"),
    
    PENDING("PENDING"),
    
    DENIED("DENIED");

    private String value;

    BookingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BookingStatusEnum fromValue(String value) {
      for (BookingStatusEnum b : BookingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BookingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BookingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BookingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BookingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BookingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOKING_STATUS = "bookingStatus";
  @SerializedName(SERIALIZED_NAME_BOOKING_STATUS)
  private BookingStatusEnum bookingStatus;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrierCode";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  private FlightEndPoint departure;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_IS_FLOWN = "isFlown";
  @SerializedName(SERIALIZED_NAME_IS_FLOWN)
  private Boolean isFlown;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OPERATING = "operating";
  @SerializedName(SERIALIZED_NAME_OPERATING)
  private OperatingFlight operating;

  /**
   * type of the segment
   */
  @JsonAdapter(SegmentTypeEnum.Adapter.class)
  public enum SegmentTypeEnum {
    ACTIVE("ACTIVE"),
    
    PASSIVE("PASSIVE"),
    
    GHOST("GHOST"),
    
    STAFF("STAFF");

    private String value;

    SegmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentTypeEnum fromValue(String value) {
      for (SegmentTypeEnum b : SegmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT_TYPE = "segmentType";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TYPE)
  private SegmentTypeEnum segmentType;

  public static final String SERIALIZED_NAME_STOPS = "stops";
  @SerializedName(SERIALIZED_NAME_STOPS)
  private List<FlightStop> stops = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLACKLISTED_IN_E_U = "blacklistedInEU";
  @SerializedName(SERIALIZED_NAME_BLACKLISTED_IN_E_U)
  private Boolean blacklistedInEU;

  public static final String SERIALIZED_NAME_CO2_EMISSIONS = "co2Emissions";
  @SerializedName(SERIALIZED_NAME_CO2_EMISSIONS)
  private List<Co2Emission> co2Emissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER_OF_STOPS = "numberOfStops";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_STOPS)
  private Integer numberOfStops;

  public Segment() {
  }

  public Segment aircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
    return this;
  }

  /**
   * Get aircraft
   * @return aircraft
   */
  @javax.annotation.Nullable
  public AircraftEquipment getAircraft() {
    return aircraft;
  }

  public void setAircraft(AircraftEquipment aircraft) {
    this.aircraft = aircraft;
  }


  public Segment arrival(FlightEndPoint arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * Get arrival
   * @return arrival
   */
  @javax.annotation.Nullable
  public FlightEndPoint getArrival() {
    return arrival;
  }

  public void setArrival(FlightEndPoint arrival) {
    this.arrival = arrival;
  }


  public Segment bookingStatus(BookingStatusEnum bookingStatus) {
    this.bookingStatus = bookingStatus;
    return this;
  }

  /**
   * booking status of the segment
   * @return bookingStatus
   */
  @javax.annotation.Nullable
  public BookingStatusEnum getBookingStatus() {
    return bookingStatus;
  }

  public void setBookingStatus(BookingStatusEnum bookingStatus) {
    this.bookingStatus = bookingStatus;
  }


  public Segment carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * providing the airline / carrier code
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  public Segment departure(FlightEndPoint departure) {
    this.departure = departure;
    return this;
  }

  /**
   * Get departure
   * @return departure
   */
  @javax.annotation.Nullable
  public FlightEndPoint getDeparture() {
    return departure;
  }

  public void setDeparture(FlightEndPoint departure) {
    this.departure = departure;
  }


  public Segment duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public Segment isFlown(Boolean isFlown) {
    this.isFlown = isFlown;
    return this;
  }

  /**
   * indicator set to true if segment is flown
   * @return isFlown
   */
  @javax.annotation.Nullable
  public Boolean getIsFlown() {
    return isFlown;
  }

  public void setIsFlown(Boolean isFlown) {
    this.isFlown = isFlown;
  }


  public Segment number(String number) {
    this.number = number;
    return this;
  }

  /**
   * the flight number as assigned by the carrier
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public Segment operating(OperatingFlight operating) {
    this.operating = operating;
    return this;
  }

  /**
   * Get operating
   * @return operating
   */
  @javax.annotation.Nullable
  public OperatingFlight getOperating() {
    return operating;
  }

  public void setOperating(OperatingFlight operating) {
    this.operating = operating;
  }


  public Segment segmentType(SegmentTypeEnum segmentType) {
    this.segmentType = segmentType;
    return this;
  }

  /**
   * type of the segment
   * @return segmentType
   */
  @javax.annotation.Nullable
  public SegmentTypeEnum getSegmentType() {
    return segmentType;
  }

  public void setSegmentType(SegmentTypeEnum segmentType) {
    this.segmentType = segmentType;
  }


  public Segment stops(List<FlightStop> stops) {
    this.stops = stops;
    return this;
  }

  public Segment addStopsItem(FlightStop stopsItem) {
    if (this.stops == null) {
      this.stops = new ArrayList<>();
    }
    this.stops.add(stopsItem);
    return this;
  }

  /**
   * information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
   * @return stops
   */
  @javax.annotation.Nullable
  public List<FlightStop> getStops() {
    return stops;
  }

  public void setStops(List<FlightStop> stops) {
    this.stops = stops;
  }


  public Segment blacklistedInEU(Boolean blacklistedInEU) {
    this.blacklistedInEU = blacklistedInEU;
    return this;
  }

  /**
   * When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.   To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines.  The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline    
   * @return blacklistedInEU
   */
  @javax.annotation.Nullable
  public Boolean getBlacklistedInEU() {
    return blacklistedInEU;
  }

  public void setBlacklistedInEU(Boolean blacklistedInEU) {
    this.blacklistedInEU = blacklistedInEU;
  }


  public Segment co2Emissions(List<Co2Emission> co2Emissions) {
    this.co2Emissions = co2Emissions;
    return this;
  }

  public Segment addCo2EmissionsItem(Co2Emission co2EmissionsItem) {
    if (this.co2Emissions == null) {
      this.co2Emissions = new ArrayList<>();
    }
    this.co2Emissions.add(co2EmissionsItem);
    return this;
  }

  /**
   * Co2 informations
   * @return co2Emissions
   */
  @javax.annotation.Nullable
  public List<Co2Emission> getCo2Emissions() {
    return co2Emissions;
  }

  public void setCo2Emissions(List<Co2Emission> co2Emissions) {
    this.co2Emissions = co2Emissions;
  }


  public Segment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the segment
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Segment numberOfStops(Integer numberOfStops) {
    this.numberOfStops = numberOfStops;
    return this;
  }

  /**
   * Number of stops
   * @return numberOfStops
   */
  @javax.annotation.Nullable
  public Integer getNumberOfStops() {
    return numberOfStops;
  }

  public void setNumberOfStops(Integer numberOfStops) {
    this.numberOfStops = numberOfStops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.aircraft, segment.aircraft) &&
        Objects.equals(this.arrival, segment.arrival) &&
        Objects.equals(this.bookingStatus, segment.bookingStatus) &&
        Objects.equals(this.carrierCode, segment.carrierCode) &&
        Objects.equals(this.departure, segment.departure) &&
        Objects.equals(this.duration, segment.duration) &&
        Objects.equals(this.isFlown, segment.isFlown) &&
        Objects.equals(this.number, segment.number) &&
        Objects.equals(this.operating, segment.operating) &&
        Objects.equals(this.segmentType, segment.segmentType) &&
        Objects.equals(this.stops, segment.stops) &&
        Objects.equals(this.blacklistedInEU, segment.blacklistedInEU) &&
        Objects.equals(this.co2Emissions, segment.co2Emissions) &&
        Objects.equals(this.id, segment.id) &&
        Objects.equals(this.numberOfStops, segment.numberOfStops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aircraft, arrival, bookingStatus, carrierCode, departure, duration, isFlown, number, operating, segmentType, stops, blacklistedInEU, co2Emissions, id, numberOfStops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    sb.append("    aircraft: ").append(toIndentedString(aircraft)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    bookingStatus: ").append(toIndentedString(bookingStatus)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    isFlown: ").append(toIndentedString(isFlown)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    operating: ").append(toIndentedString(operating)).append("\n");
    sb.append("    segmentType: ").append(toIndentedString(segmentType)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    blacklistedInEU: ").append(toIndentedString(blacklistedInEU)).append("\n");
    sb.append("    co2Emissions: ").append(toIndentedString(co2Emissions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    numberOfStops: ").append(toIndentedString(numberOfStops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aircraft");
    openapiFields.add("arrival");
    openapiFields.add("bookingStatus");
    openapiFields.add("carrierCode");
    openapiFields.add("departure");
    openapiFields.add("duration");
    openapiFields.add("isFlown");
    openapiFields.add("number");
    openapiFields.add("operating");
    openapiFields.add("segmentType");
    openapiFields.add("stops");
    openapiFields.add("blacklistedInEU");
    openapiFields.add("co2Emissions");
    openapiFields.add("id");
    openapiFields.add("numberOfStops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Segment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Segment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Segment is not found in the empty JSON string", Segment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Segment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Segment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aircraft`
      if (jsonObj.get("aircraft") != null && !jsonObj.get("aircraft").isJsonNull()) {
        AircraftEquipment.validateJsonElement(jsonObj.get("aircraft"));
      }
      // validate the optional field `arrival`
      if (jsonObj.get("arrival") != null && !jsonObj.get("arrival").isJsonNull()) {
        FlightEndPoint.validateJsonElement(jsonObj.get("arrival"));
      }
      if ((jsonObj.get("bookingStatus") != null && !jsonObj.get("bookingStatus").isJsonNull()) && !jsonObj.get("bookingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingStatus").toString()));
      }
      // validate the optional field `bookingStatus`
      if (jsonObj.get("bookingStatus") != null && !jsonObj.get("bookingStatus").isJsonNull()) {
        BookingStatusEnum.validateJsonElement(jsonObj.get("bookingStatus"));
      }
      if ((jsonObj.get("carrierCode") != null && !jsonObj.get("carrierCode").isJsonNull()) && !jsonObj.get("carrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierCode").toString()));
      }
      // validate the optional field `departure`
      if (jsonObj.get("departure") != null && !jsonObj.get("departure").isJsonNull()) {
        FlightEndPoint.validateJsonElement(jsonObj.get("departure"));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // validate the optional field `operating`
      if (jsonObj.get("operating") != null && !jsonObj.get("operating").isJsonNull()) {
        OperatingFlight.validateJsonElement(jsonObj.get("operating"));
      }
      if ((jsonObj.get("segmentType") != null && !jsonObj.get("segmentType").isJsonNull()) && !jsonObj.get("segmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentType").toString()));
      }
      // validate the optional field `segmentType`
      if (jsonObj.get("segmentType") != null && !jsonObj.get("segmentType").isJsonNull()) {
        SegmentTypeEnum.validateJsonElement(jsonObj.get("segmentType"));
      }
      if (jsonObj.get("stops") != null && !jsonObj.get("stops").isJsonNull()) {
        JsonArray jsonArraystops = jsonObj.getAsJsonArray("stops");
        if (jsonArraystops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stops` to be an array in the JSON string but got `%s`", jsonObj.get("stops").toString()));
          }

          // validate the optional field `stops` (array)
          for (int i = 0; i < jsonArraystops.size(); i++) {
            FlightStop.validateJsonElement(jsonArraystops.get(i));
          };
        }
      }
      if (jsonObj.get("co2Emissions") != null && !jsonObj.get("co2Emissions").isJsonNull()) {
        JsonArray jsonArrayco2Emissions = jsonObj.getAsJsonArray("co2Emissions");
        if (jsonArrayco2Emissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("co2Emissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `co2Emissions` to be an array in the JSON string but got `%s`", jsonObj.get("co2Emissions").toString()));
          }

          // validate the optional field `co2Emissions` (array)
          for (int i = 0; i < jsonArrayco2Emissions.size(); i++) {
            Co2Emission.validateJsonElement(jsonArrayco2Emissions.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Segment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Segment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Segment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Segment.class));

       return (TypeAdapter<T>) new TypeAdapter<Segment>() {
           @Override
           public void write(JsonWriter out, Segment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Segment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Segment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Segment
   * @throws IOException if the JSON string is invalid with respect to Segment
   */
  public static Segment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Segment.class);
  }

  /**
   * Convert an instance of Segment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

