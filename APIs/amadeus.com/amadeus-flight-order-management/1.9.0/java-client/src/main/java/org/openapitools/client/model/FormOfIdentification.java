/*
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * alternative means of identifying stakeholders for eTicket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:54.608298-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormOfIdentification {
  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrierCode";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_FLIGHT_OFFER_IDS = "flightOfferIds";
  @SerializedName(SERIALIZED_NAME_FLIGHT_OFFER_IDS)
  private List<String> flightOfferIds = new ArrayList<>();

  /**
   * Type of identification
   */
  @JsonAdapter(IdentificationTypeEnum.Adapter.class)
  public enum IdentificationTypeEnum {
    DRIVERS_LICENSE("DRIVERS_LICENSE"),
    
    PASSPORT("PASSPORT"),
    
    NATIONAL_IDENTITY_CARD("NATIONAL_IDENTITY_CARD"),
    
    BOOKING_CONFIRMATION("BOOKING_CONFIRMATION"),
    
    TICKET("TICKET"),
    
    OTHER_ID("OTHER_ID");

    private String value;

    IdentificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentificationTypeEnum fromValue(String value) {
      for (IdentificationTypeEnum b : IdentificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdentificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdentificationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdentificationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IDENTIFICATION_TYPE = "identificationType";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_TYPE)
  private IdentificationTypeEnum identificationType;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_TRAVELER_IDS = "travelerIds";
  @SerializedName(SERIALIZED_NAME_TRAVELER_IDS)
  private List<String> travelerIds = new ArrayList<>();

  public FormOfIdentification() {
  }

  public FormOfIdentification carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * providing the airline / carrier code
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  public FormOfIdentification flightOfferIds(List<String> flightOfferIds) {
    this.flightOfferIds = flightOfferIds;
    return this;
  }

  public FormOfIdentification addFlightOfferIdsItem(String flightOfferIdsItem) {
    if (this.flightOfferIds == null) {
      this.flightOfferIds = new ArrayList<>();
    }
    this.flightOfferIds.add(flightOfferIdsItem);
    return this;
  }

  /**
   * Id of the concerned flightOffers
   * @return flightOfferIds
   */
  @javax.annotation.Nullable
  public List<String> getFlightOfferIds() {
    return flightOfferIds;
  }

  public void setFlightOfferIds(List<String> flightOfferIds) {
    this.flightOfferIds = flightOfferIds;
  }


  public FormOfIdentification identificationType(IdentificationTypeEnum identificationType) {
    this.identificationType = identificationType;
    return this;
  }

  /**
   * Type of identification
   * @return identificationType
   */
  @javax.annotation.Nullable
  public IdentificationTypeEnum getIdentificationType() {
    return identificationType;
  }

  public void setIdentificationType(IdentificationTypeEnum identificationType) {
    this.identificationType = identificationType;
  }


  public FormOfIdentification number(String number) {
    this.number = number;
    return this;
  }

  /**
   * identification number relative to the type of identification either ticket number, booking number, passport number, identity card number, drivers licence number, other ID
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public FormOfIdentification travelerIds(List<String> travelerIds) {
    this.travelerIds = travelerIds;
    return this;
  }

  public FormOfIdentification addTravelerIdsItem(String travelerIdsItem) {
    if (this.travelerIds == null) {
      this.travelerIds = new ArrayList<>();
    }
    this.travelerIds.add(travelerIdsItem);
    return this;
  }

  /**
   * Ids of the concerned travelers
   * @return travelerIds
   */
  @javax.annotation.Nullable
  public List<String> getTravelerIds() {
    return travelerIds;
  }

  public void setTravelerIds(List<String> travelerIds) {
    this.travelerIds = travelerIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormOfIdentification formOfIdentification = (FormOfIdentification) o;
    return Objects.equals(this.carrierCode, formOfIdentification.carrierCode) &&
        Objects.equals(this.flightOfferIds, formOfIdentification.flightOfferIds) &&
        Objects.equals(this.identificationType, formOfIdentification.identificationType) &&
        Objects.equals(this.number, formOfIdentification.number) &&
        Objects.equals(this.travelerIds, formOfIdentification.travelerIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierCode, flightOfferIds, identificationType, number, travelerIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormOfIdentification {\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    flightOfferIds: ").append(toIndentedString(flightOfferIds)).append("\n");
    sb.append("    identificationType: ").append(toIndentedString(identificationType)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    travelerIds: ").append(toIndentedString(travelerIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierCode");
    openapiFields.add("flightOfferIds");
    openapiFields.add("identificationType");
    openapiFields.add("number");
    openapiFields.add("travelerIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormOfIdentification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormOfIdentification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormOfIdentification is not found in the empty JSON string", FormOfIdentification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormOfIdentification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormOfIdentification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carrierCode") != null && !jsonObj.get("carrierCode").isJsonNull()) && !jsonObj.get("carrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flightOfferIds") != null && !jsonObj.get("flightOfferIds").isJsonNull() && !jsonObj.get("flightOfferIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightOfferIds` to be an array in the JSON string but got `%s`", jsonObj.get("flightOfferIds").toString()));
      }
      if ((jsonObj.get("identificationType") != null && !jsonObj.get("identificationType").isJsonNull()) && !jsonObj.get("identificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationType").toString()));
      }
      // validate the optional field `identificationType`
      if (jsonObj.get("identificationType") != null && !jsonObj.get("identificationType").isJsonNull()) {
        IdentificationTypeEnum.validateJsonElement(jsonObj.get("identificationType"));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("travelerIds") != null && !jsonObj.get("travelerIds").isJsonNull() && !jsonObj.get("travelerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `travelerIds` to be an array in the JSON string but got `%s`", jsonObj.get("travelerIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormOfIdentification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormOfIdentification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormOfIdentification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormOfIdentification.class));

       return (TypeAdapter<T>) new TypeAdapter<FormOfIdentification>() {
           @Override
           public void write(JsonWriter out, FormOfIdentification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormOfIdentification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormOfIdentification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormOfIdentification
   * @throws IOException if the JSON string is invalid with respect to FormOfIdentification
   */
  public static FormOfIdentification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormOfIdentification.class);
  }

  /**
   * Convert an instance of FormOfIdentification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

