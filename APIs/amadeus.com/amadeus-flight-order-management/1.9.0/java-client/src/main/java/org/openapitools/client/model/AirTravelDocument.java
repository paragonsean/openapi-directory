/*
 * Flight Order Management
 * Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ticket information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:54.608298-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirTravelDocument {
  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  /**
   * Status of the travel document contained in the fare element
   */
  @JsonAdapter(DocumentStatusEnum.Adapter.class)
  public enum DocumentStatusEnum {
    ISSUED("ISSUED"),
    
    REFUNDED("REFUNDED"),
    
    VOID("VOID"),
    
    ORIGINAL("ORIGINAL"),
    
    EXCHANGED("EXCHANGED");

    private String value;

    DocumentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentStatusEnum fromValue(String value) {
      for (DocumentStatusEnum b : DocumentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_STATUS = "documentStatus";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STATUS)
  private DocumentStatusEnum documentStatus;

  /**
   * Type of the travel document
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    ETICKET("ETICKET"),
    
    PTICKET("PTICKET"),
    
    EMD("EMD"),
    
    MCO("MCO");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_SEGMENT_IDS = "segmentIds";
  @SerializedName(SERIALIZED_NAME_SEGMENT_IDS)
  private List<String> segmentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAVELER_ID = "travelerId";
  @SerializedName(SERIALIZED_NAME_TRAVELER_ID)
  private String travelerId;

  public AirTravelDocument() {
  }

  public AirTravelDocument documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Identifier of the travel document prefixed by its owner code [NALC - 3 digits]. Can either be a primary or a conjunctive document number. Necessary for TicketingReference definition.
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public AirTravelDocument documentStatus(DocumentStatusEnum documentStatus) {
    this.documentStatus = documentStatus;
    return this;
  }

  /**
   * Status of the travel document contained in the fare element
   * @return documentStatus
   */
  @javax.annotation.Nullable
  public DocumentStatusEnum getDocumentStatus() {
    return documentStatus;
  }

  public void setDocumentStatus(DocumentStatusEnum documentStatus) {
    this.documentStatus = documentStatus;
  }


  public AirTravelDocument documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Type of the travel document
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public AirTravelDocument segmentIds(List<String> segmentIds) {
    this.segmentIds = segmentIds;
    return this;
  }

  public AirTravelDocument addSegmentIdsItem(String segmentIdsItem) {
    if (this.segmentIds == null) {
      this.segmentIds = new ArrayList<>();
    }
    this.segmentIds.add(segmentIdsItem);
    return this;
  }

  /**
   * Ids of the impacted segments
   * @return segmentIds
   */
  @javax.annotation.Nullable
  public List<String> getSegmentIds() {
    return segmentIds;
  }

  public void setSegmentIds(List<String> segmentIds) {
    this.segmentIds = segmentIds;
  }


  public AirTravelDocument travelerId(String travelerId) {
    this.travelerId = travelerId;
    return this;
  }

  /**
   * id of the impacted traveler
   * @return travelerId
   */
  @javax.annotation.Nullable
  public String getTravelerId() {
    return travelerId;
  }

  public void setTravelerId(String travelerId) {
    this.travelerId = travelerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirTravelDocument airTravelDocument = (AirTravelDocument) o;
    return Objects.equals(this.documentNumber, airTravelDocument.documentNumber) &&
        Objects.equals(this.documentStatus, airTravelDocument.documentStatus) &&
        Objects.equals(this.documentType, airTravelDocument.documentType) &&
        Objects.equals(this.segmentIds, airTravelDocument.segmentIds) &&
        Objects.equals(this.travelerId, airTravelDocument.travelerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentNumber, documentStatus, documentType, segmentIds, travelerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirTravelDocument {\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    documentStatus: ").append(toIndentedString(documentStatus)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    segmentIds: ").append(toIndentedString(segmentIds)).append("\n");
    sb.append("    travelerId: ").append(toIndentedString(travelerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentNumber");
    openapiFields.add("documentStatus");
    openapiFields.add("documentType");
    openapiFields.add("segmentIds");
    openapiFields.add("travelerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirTravelDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirTravelDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirTravelDocument is not found in the empty JSON string", AirTravelDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirTravelDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirTravelDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if ((jsonObj.get("documentStatus") != null && !jsonObj.get("documentStatus").isJsonNull()) && !jsonObj.get("documentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentStatus").toString()));
      }
      // validate the optional field `documentStatus`
      if (jsonObj.get("documentStatus") != null && !jsonObj.get("documentStatus").isJsonNull()) {
        DocumentStatusEnum.validateJsonElement(jsonObj.get("documentStatus"));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the optional field `documentType`
      if (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentIds") != null && !jsonObj.get("segmentIds").isJsonNull() && !jsonObj.get("segmentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentIds` to be an array in the JSON string but got `%s`", jsonObj.get("segmentIds").toString()));
      }
      if ((jsonObj.get("travelerId") != null && !jsonObj.get("travelerId").isJsonNull()) && !jsonObj.get("travelerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `travelerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("travelerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirTravelDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirTravelDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirTravelDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirTravelDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<AirTravelDocument>() {
           @Override
           public void write(JsonWriter out, AirTravelDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirTravelDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirTravelDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirTravelDocument
   * @throws IOException if the JSON string is invalid with respect to AirTravelDocument
   */
  public static AirTravelDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirTravelDocument.class);
  }

  /**
   * Convert an instance of AirTravelDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

