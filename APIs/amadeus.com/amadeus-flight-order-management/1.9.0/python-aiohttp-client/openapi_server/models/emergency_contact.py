# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EmergencyContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addressee_name: str=None, country_code: str=None, number: str=None, text: str=None):
        """EmergencyContact - a model defined in OpenAPI

        :param addressee_name: The addressee_name of this EmergencyContact.
        :param country_code: The country_code of this EmergencyContact.
        :param number: The number of this EmergencyContact.
        :param text: The text of this EmergencyContact.
        """
        self.openapi_types = {
            'addressee_name': str,
            'country_code': str,
            'number': str,
            'text': str
        }

        self.attribute_map = {
            'addressee_name': 'addresseeName',
            'country_code': 'countryCode',
            'number': 'number',
            'text': 'text'
        }

        self._addressee_name = addressee_name
        self._country_code = country_code
        self._number = number
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmergencyContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmergencyContact of this EmergencyContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addressee_name(self):
        """Gets the addressee_name of this EmergencyContact.

        Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).

        :return: The addressee_name of this EmergencyContact.
        :rtype: str
        """
        return self._addressee_name

    @addressee_name.setter
    def addressee_name(self, addressee_name):
        """Sets the addressee_name of this EmergencyContact.

        Adressee name (e.g. in case of emergency purpose it corresponds to name of the person to be contacted).

        :param addressee_name: The addressee_name of this EmergencyContact.
        :type addressee_name: str
        """
        if addressee_name is not None and not re.search(r'[a-zA-Z -]', addressee_name):
            raise ValueError("Invalid value for `addressee_name`, must be a follow pattern or equal to `/[a-zA-Z -]/`")

        self._addressee_name = addressee_name

    @property
    def country_code(self):
        """Gets the country_code of this EmergencyContact.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :return: The country_code of this EmergencyContact.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this EmergencyContact.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :param country_code: The country_code of this EmergencyContact.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def number(self):
        """Gets the number of this EmergencyContact.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :return: The number of this EmergencyContact.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this EmergencyContact.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :param number: The number of this EmergencyContact.
        :type number: str
        """
        if number is not None and not re.search(r'[0-9]{1,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[0-9]{1,15}/`")

        self._number = number

    @property
    def text(self):
        """Gets the text of this EmergencyContact.

        additional details

        :return: The text of this EmergencyContact.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EmergencyContact.

        additional details

        :param text: The text of this EmergencyContact.
        :type text: str
        """

        self._text = text
