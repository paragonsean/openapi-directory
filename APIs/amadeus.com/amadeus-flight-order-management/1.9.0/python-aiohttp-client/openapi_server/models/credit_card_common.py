# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credit_card_brand import CreditCardBrand
import re
from openapi_server import util


class CreditCardCommon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: CreditCardBrand=None, expiry_date: str=None, holder: str=None, number: str=None):
        """CreditCardCommon - a model defined in OpenAPI

        :param brand: The brand of this CreditCardCommon.
        :param expiry_date: The expiry_date of this CreditCardCommon.
        :param holder: The holder of this CreditCardCommon.
        :param number: The number of this CreditCardCommon.
        """
        self.openapi_types = {
            'brand': CreditCardBrand,
            'expiry_date': str,
            'holder': str,
            'number': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'expiry_date': 'expiryDate',
            'holder': 'holder',
            'number': 'number'
        }

        self._brand = brand
        self._expiry_date = expiry_date
        self._holder = holder
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditCardCommon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditCardCommon of this CreditCardCommon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this CreditCardCommon.


        :return: The brand of this CreditCardCommon.
        :rtype: CreditCardBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this CreditCardCommon.


        :param brand: The brand of this CreditCardCommon.
        :type brand: CreditCardBrand
        """

        self._brand = brand

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CreditCardCommon.

        credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)

        :return: The expiry_date of this CreditCardCommon.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CreditCardCommon.

        credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)

        :param expiry_date: The expiry_date of this CreditCardCommon.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def holder(self):
        """Gets the holder of this CreditCardCommon.

        card holder as on the card

        :return: The holder of this CreditCardCommon.
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this CreditCardCommon.

        card holder as on the card

        :param holder: The holder of this CreditCardCommon.
        :type holder: str
        """

        self._holder = holder

    @property
    def number(self):
        """Gets the number of this CreditCardCommon.

        card number

        :return: The number of this CreditCardCommon.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreditCardCommon.

        card number

        :param number: The number of this CreditCardCommon.
        :type number: str
        """
        if number is not None and not re.search(r'[a-zA-Z0-9]{1,35}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1,35}/`")

        self._number = number
