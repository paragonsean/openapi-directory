# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone_device_type import PhoneDeviceType
import re
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_calling_code: str=None, device_type: PhoneDeviceType=None, number: str=None):
        """Phone - a model defined in OpenAPI

        :param country_calling_code: The country_calling_code of this Phone.
        :param device_type: The device_type of this Phone.
        :param number: The number of this Phone.
        """
        self.openapi_types = {
            'country_calling_code': str,
            'device_type': PhoneDeviceType,
            'number': str
        }

        self.attribute_map = {
            'country_calling_code': 'countryCallingCode',
            'device_type': 'deviceType',
            'number': 'number'
        }

        self._country_calling_code = country_calling_code
        self._device_type = device_type
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_calling_code(self):
        """Gets the country_calling_code of this Phone.

        Country calling code of the phone number, as defined by the International Communication Union. Examples - \"1\" for US, \"371\" for Latvia.

        :return: The country_calling_code of this Phone.
        :rtype: str
        """
        return self._country_calling_code

    @country_calling_code.setter
    def country_calling_code(self, country_calling_code):
        """Sets the country_calling_code of this Phone.

        Country calling code of the phone number, as defined by the International Communication Union. Examples - \"1\" for US, \"371\" for Latvia.

        :param country_calling_code: The country_calling_code of this Phone.
        :type country_calling_code: str
        """
        if country_calling_code is not None and not re.search(r'[0-9+]{2,5}', country_calling_code):
            raise ValueError("Invalid value for `country_calling_code`, must be a follow pattern or equal to `/[0-9+]{2,5}/`")

        self._country_calling_code = country_calling_code

    @property
    def device_type(self):
        """Gets the device_type of this Phone.


        :return: The device_type of this Phone.
        :rtype: PhoneDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Phone.


        :param device_type: The device_type of this Phone.
        :type device_type: PhoneDeviceType
        """

        self._device_type = device_type

    @property
    def number(self):
        """Gets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :return: The number of this Phone.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :param number: The number of this Phone.
        :type number: str
        """
        if number is not None and not re.search(r'[0-9]{1,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[0-9]{1,15}/`")

        self._number = number
