# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credit_card_brand import CreditCardBrand
import re
from openapi_server import util


class CreditCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: CreditCardBrand=None, expiry_date: str=None, holder: str=None, number: str=None, flight_offer_ids: List[str]=None, security_code: str=None):
        """CreditCard - a model defined in OpenAPI

        :param brand: The brand of this CreditCard.
        :param expiry_date: The expiry_date of this CreditCard.
        :param holder: The holder of this CreditCard.
        :param number: The number of this CreditCard.
        :param flight_offer_ids: The flight_offer_ids of this CreditCard.
        :param security_code: The security_code of this CreditCard.
        """
        self.openapi_types = {
            'brand': CreditCardBrand,
            'expiry_date': str,
            'holder': str,
            'number': str,
            'flight_offer_ids': List[str],
            'security_code': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'expiry_date': 'expiryDate',
            'holder': 'holder',
            'number': 'number',
            'flight_offer_ids': 'flightOfferIds',
            'security_code': 'securityCode'
        }

        self._brand = brand
        self._expiry_date = expiry_date
        self._holder = holder
        self._number = number
        self._flight_offer_ids = flight_offer_ids
        self._security_code = security_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditCard of this CreditCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this CreditCard.


        :return: The brand of this CreditCard.
        :rtype: CreditCardBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this CreditCard.


        :param brand: The brand of this CreditCard.
        :type brand: CreditCardBrand
        """

        self._brand = brand

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CreditCard.

        credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)

        :return: The expiry_date of this CreditCard.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CreditCard.

        credit card expiration date following [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM format, e.g. 2012-08)

        :param expiry_date: The expiry_date of this CreditCard.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def holder(self):
        """Gets the holder of this CreditCard.

        card holder as on the card

        :return: The holder of this CreditCard.
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this CreditCard.

        card holder as on the card

        :param holder: The holder of this CreditCard.
        :type holder: str
        """

        self._holder = holder

    @property
    def number(self):
        """Gets the number of this CreditCard.

        card number

        :return: The number of this CreditCard.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreditCard.

        card number

        :param number: The number of this CreditCard.
        :type number: str
        """
        if number is not None and not re.search(r'[a-zA-Z0-9]{1,35}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1,35}/`")

        self._number = number

    @property
    def flight_offer_ids(self):
        """Gets the flight_offer_ids of this CreditCard.

        Id of the concern flightOffers

        :return: The flight_offer_ids of this CreditCard.
        :rtype: List[str]
        """
        return self._flight_offer_ids

    @flight_offer_ids.setter
    def flight_offer_ids(self, flight_offer_ids):
        """Sets the flight_offer_ids of this CreditCard.

        Id of the concern flightOffers

        :param flight_offer_ids: The flight_offer_ids of this CreditCard.
        :type flight_offer_ids: List[str]
        """
        if flight_offer_ids is not None and len(flight_offer_ids) > 6:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be less than or equal to `6`")
        if flight_offer_ids is not None and len(flight_offer_ids) < 1:
            raise ValueError("Invalid value for `flight_offer_ids`, number of items must be greater than or equal to `1`")

        self._flight_offer_ids = flight_offer_ids

    @property
    def security_code(self):
        """Gets the security_code of this CreditCard.

        card security code

        :return: The security_code of this CreditCard.
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this CreditCard.

        card security code

        :param security_code: The security_code of this CreditCard.
        :type security_code: str
        """

        self._security_code = security_code
