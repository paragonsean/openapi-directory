# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_type import DocumentType
import re
from openapi_server import util


class IdentityDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_place: str=None, expiry_date: date=None, issuance_country: str=None, issuance_date: date=None, issuance_location: str=None, nationality: str=None, number: str=None, birth_country: str=None, document_type: DocumentType=None, holder: bool=None, validity_country: str=None):
        """IdentityDocument - a model defined in OpenAPI

        :param birth_place: The birth_place of this IdentityDocument.
        :param expiry_date: The expiry_date of this IdentityDocument.
        :param issuance_country: The issuance_country of this IdentityDocument.
        :param issuance_date: The issuance_date of this IdentityDocument.
        :param issuance_location: The issuance_location of this IdentityDocument.
        :param nationality: The nationality of this IdentityDocument.
        :param number: The number of this IdentityDocument.
        :param birth_country: The birth_country of this IdentityDocument.
        :param document_type: The document_type of this IdentityDocument.
        :param holder: The holder of this IdentityDocument.
        :param validity_country: The validity_country of this IdentityDocument.
        """
        self.openapi_types = {
            'birth_place': str,
            'expiry_date': date,
            'issuance_country': str,
            'issuance_date': date,
            'issuance_location': str,
            'nationality': str,
            'number': str,
            'birth_country': str,
            'document_type': DocumentType,
            'holder': bool,
            'validity_country': str
        }

        self.attribute_map = {
            'birth_place': 'birthPlace',
            'expiry_date': 'expiryDate',
            'issuance_country': 'issuanceCountry',
            'issuance_date': 'issuanceDate',
            'issuance_location': 'issuanceLocation',
            'nationality': 'nationality',
            'number': 'number',
            'birth_country': 'birthCountry',
            'document_type': 'documentType',
            'holder': 'holder',
            'validity_country': 'validityCountry'
        }

        self._birth_place = birth_place
        self._expiry_date = expiry_date
        self._issuance_country = issuance_country
        self._issuance_date = issuance_date
        self._issuance_location = issuance_location
        self._nationality = nationality
        self._number = number
        self._birth_country = birth_country
        self._document_type = document_type
        self._holder = holder
        self._validity_country = validity_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityDocument of this IdentityDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_place(self):
        """Gets the birth_place of this IdentityDocument.

        Birth place as indicated on the document

        :return: The birth_place of this IdentityDocument.
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this IdentityDocument.

        Birth place as indicated on the document

        :param birth_place: The birth_place of this IdentityDocument.
        :type birth_place: str
        """

        self._birth_place = birth_place

    @property
    def expiry_date(self):
        """Gets the expiry_date of this IdentityDocument.

        Date after which the document is not valid anymore.

        :return: The expiry_date of this IdentityDocument.
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this IdentityDocument.

        Date after which the document is not valid anymore.

        :param expiry_date: The expiry_date of this IdentityDocument.
        :type expiry_date: date
        """

        self._expiry_date = expiry_date

    @property
    def issuance_country(self):
        """Gets the issuance_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country that issued the document

        :return: The issuance_country of this IdentityDocument.
        :rtype: str
        """
        return self._issuance_country

    @issuance_country.setter
    def issuance_country(self, issuance_country):
        """Sets the issuance_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country that issued the document

        :param issuance_country: The issuance_country of this IdentityDocument.
        :type issuance_country: str
        """
        if issuance_country is not None and not re.search(r'[a-zA-Z]{2}', issuance_country):
            raise ValueError("Invalid value for `issuance_country`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._issuance_country = issuance_country

    @property
    def issuance_date(self):
        """Gets the issuance_date of this IdentityDocument.

        Date at which the document has been issued.

        :return: The issuance_date of this IdentityDocument.
        :rtype: date
        """
        return self._issuance_date

    @issuance_date.setter
    def issuance_date(self, issuance_date):
        """Sets the issuance_date of this IdentityDocument.

        Date at which the document has been issued.

        :param issuance_date: The issuance_date of this IdentityDocument.
        :type issuance_date: date
        """

        self._issuance_date = issuance_date

    @property
    def issuance_location(self):
        """Gets the issuance_location of this IdentityDocument.

        A more precise information concerning the place where the document has been issued, when available. It may be a country, a state, a city or any other type of location. e.g. New-York

        :return: The issuance_location of this IdentityDocument.
        :rtype: str
        """
        return self._issuance_location

    @issuance_location.setter
    def issuance_location(self, issuance_location):
        """Sets the issuance_location of this IdentityDocument.

        A more precise information concerning the place where the document has been issued, when available. It may be a country, a state, a city or any other type of location. e.g. New-York

        :param issuance_location: The issuance_location of this IdentityDocument.
        :type issuance_location: str
        """

        self._issuance_location = issuance_location

    @property
    def nationality(self):
        """Gets the nationality of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the nationality appearing on the document

        :return: The nationality of this IdentityDocument.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the nationality appearing on the document

        :param nationality: The nationality of this IdentityDocument.
        :type nationality: str
        """
        if nationality is not None and not re.search(r'[a-zA-Z]{2}', nationality):
            raise ValueError("Invalid value for `nationality`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._nationality = nationality

    @property
    def number(self):
        """Gets the number of this IdentityDocument.

        The document number (shown on the document) . E.g. QFU514563221J

        :return: The number of this IdentityDocument.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IdentityDocument.

        The document number (shown on the document) . E.g. QFU514563221J

        :param number: The number of this IdentityDocument.
        :type number: str
        """

        self._number = number

    @property
    def birth_country(self):
        """Gets the birth_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country of birth

        :return: The birth_country of this IdentityDocument.
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country of birth

        :param birth_country: The birth_country of this IdentityDocument.
        :type birth_country: str
        """
        if birth_country is not None and not re.search(r'[a-zA-Z]{2}', birth_country):
            raise ValueError("Invalid value for `birth_country`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._birth_country = birth_country

    @property
    def document_type(self):
        """Gets the document_type of this IdentityDocument.


        :return: The document_type of this IdentityDocument.
        :rtype: DocumentType
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this IdentityDocument.


        :param document_type: The document_type of this IdentityDocument.
        :type document_type: DocumentType
        """

        self._document_type = document_type

    @property
    def holder(self):
        """Gets the holder of this IdentityDocument.

        boolean to specify if the traveler is the holder of the document

        :return: The holder of this IdentityDocument.
        :rtype: bool
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this IdentityDocument.

        boolean to specify if the traveler is the holder of the document

        :param holder: The holder of this IdentityDocument.
        :type holder: bool
        """

        self._holder = holder

    @property
    def validity_country(self):
        """Gets the validity_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country where the document is valid

        :return: The validity_country of this IdentityDocument.
        :rtype: str
        """
        return self._validity_country

    @validity_country.setter
    def validity_country(self, validity_country):
        """Sets the validity_country of this IdentityDocument.

        [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country where the document is valid

        :param validity_country: The validity_country of this IdentityDocument.
        :type validity_country: str
        """
        if validity_country is not None and not re.search(r'[a-zA-Z]{2}', validity_country):
            raise ValueError("Invalid value for `validity_country`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._validity_country = validity_country
