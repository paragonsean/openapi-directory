# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automated_process_code import AutomatedProcessCode
from openapi_server.models.queue import Queue
from openapi_server import util


class AutomatedProcess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: AutomatedProcessCode=None, queue: Queue=None, text: str=None, date_time: datetime=None, delay: str=None, office_id: str=None):
        """AutomatedProcess - a model defined in OpenAPI

        :param code: The code of this AutomatedProcess.
        :param queue: The queue of this AutomatedProcess.
        :param text: The text of this AutomatedProcess.
        :param date_time: The date_time of this AutomatedProcess.
        :param delay: The delay of this AutomatedProcess.
        :param office_id: The office_id of this AutomatedProcess.
        """
        self.openapi_types = {
            'code': AutomatedProcessCode,
            'queue': Queue,
            'text': str,
            'date_time': datetime,
            'delay': str,
            'office_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'queue': 'queue',
            'text': 'text',
            'date_time': 'dateTime',
            'delay': 'delay',
            'office_id': 'officeId'
        }

        self._code = code
        self._queue = queue
        self._text = text
        self._date_time = date_time
        self._delay = delay
        self._office_id = office_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomatedProcess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomatedProcess of this AutomatedProcess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AutomatedProcess.


        :return: The code of this AutomatedProcess.
        :rtype: AutomatedProcessCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AutomatedProcess.


        :param code: The code of this AutomatedProcess.
        :type code: AutomatedProcessCode
        """

        self._code = code

    @property
    def queue(self):
        """Gets the queue of this AutomatedProcess.


        :return: The queue of this AutomatedProcess.
        :rtype: Queue
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this AutomatedProcess.


        :param queue: The queue of this AutomatedProcess.
        :type queue: Queue
        """

        self._queue = queue

    @property
    def text(self):
        """Gets the text of this AutomatedProcess.

        Free text

        :return: The text of this AutomatedProcess.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AutomatedProcess.

        Free text

        :param text: The text of this AutomatedProcess.
        :type text: str
        """

        self._text = text

    @property
    def date_time(self):
        """Gets the date_time of this AutomatedProcess.

        Datetime limit at which the process takes action in case issuance is not done.

        :return: The date_time of this AutomatedProcess.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this AutomatedProcess.

        Datetime limit at which the process takes action in case issuance is not done.

        :param date_time: The date_time of this AutomatedProcess.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def delay(self):
        """Gets the delay of this AutomatedProcess.

        Delay before applying process in days

        :return: The delay of this AutomatedProcess.
        :rtype: str
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this AutomatedProcess.

        Delay before applying process in days

        :param delay: The delay of this AutomatedProcess.
        :type delay: str
        """

        self._delay = delay

    @property
    def office_id(self):
        """Gets the office_id of this AutomatedProcess.

        Office into which the process must be triggered.

        :return: The office_id of this AutomatedProcess.
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this AutomatedProcess.

        Office into which the process must be triggered.

        :param office_id: The office_id of this AutomatedProcess.
        :type office_id: str
        """

        self._office_id = office_id
