/**
 * Flight Most Booked Destinations
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.  Please also be aware that our test environment is based on a subset of the production, this API in test only returns a few selected cities. You can find the list in our **[data collection](https://github.com/amadeus4dev/data-collection)**.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Analytics from './Analytics';

/**
 * The AirTraffic model module.
 * @module model/AirTraffic
 * @version 1.1.1
 */
class AirTraffic {
    /**
     * Constructs a new <code>AirTraffic</code>.
     * @alias module:model/AirTraffic
     */
    constructor() { 
        
        AirTraffic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirTraffic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirTraffic} obj Optional instance to populate.
     * @return {module:model/AirTraffic} The populated <code>AirTraffic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirTraffic();

            if (data.hasOwnProperty('analytics')) {
                obj['analytics'] = Analytics.constructFromObject(data['analytics']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirTraffic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirTraffic</code>.
     */
    static validateJSON(data) {
        // validate the optional field `analytics`
        if (data['analytics']) { // data not null
          Analytics.validateJSON(data['analytics']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Analytics} analytics
 */
AirTraffic.prototype['analytics'] = undefined;

/**
 * IATA code of the destination city - [IATA table codes](http://www.iata.org/publications/Pages/code-search.aspx)
 * @member {String} destination
 */
AirTraffic.prototype['destination'] = undefined;

/**
 * @member {String} subType
 */
AirTraffic.prototype['subType'] = undefined;

/**
 * @member {String} type
 */
AirTraffic.prototype['type'] = undefined;






export default AirTraffic;

