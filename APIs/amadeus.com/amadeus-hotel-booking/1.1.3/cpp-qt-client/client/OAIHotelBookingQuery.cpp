/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelBookingQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelBookingQuery::OAIHotelBookingQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelBookingQuery::OAIHotelBookingQuery() {
    this->initializeModel();
}

OAIHotelBookingQuery::~OAIHotelBookingQuery() {}

void OAIHotelBookingQuery::initializeModel() {

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;
}

void OAIHotelBookingQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelBookingQuery::fromJsonObject(QJsonObject json) {

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;
}

QString OAIHotelBookingQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelBookingQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_guests.size() > 0) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_rooms.size() > 0) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    return obj;
}

QSet<OAIStakeholder> OAIHotelBookingQuery::getGuests() const {
    return m_guests;
}
void OAIHotelBookingQuery::setGuests(const QSet<OAIStakeholder> &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIHotelBookingQuery::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIHotelBookingQuery::is_guests_Valid() const{
    return m_guests_isValid;
}

QString OAIHotelBookingQuery::getOfferId() const {
    return m_offer_id;
}
void OAIHotelBookingQuery::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIHotelBookingQuery::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIHotelBookingQuery::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QSet<OAIPayment> OAIHotelBookingQuery::getPayments() const {
    return m_payments;
}
void OAIHotelBookingQuery::setPayments(const QSet<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIHotelBookingQuery::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIHotelBookingQuery::is_payments_Valid() const{
    return m_payments_isValid;
}

QList<OAIRoom> OAIHotelBookingQuery::getRooms() const {
    return m_rooms;
}
void OAIHotelBookingQuery::setRooms(const QList<OAIRoom> &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIHotelBookingQuery::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIHotelBookingQuery::is_rooms_Valid() const{
    return m_rooms_isValid;
}

bool OAIHotelBookingQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_guests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelBookingQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_guests_isValid && m_offer_id_isValid && true;
}

} // namespace OpenAPI
