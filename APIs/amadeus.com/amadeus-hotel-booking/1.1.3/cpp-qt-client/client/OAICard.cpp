/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_vendor_code_isSet = false;
    m_vendor_code_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_vendor_code_isValid = ::OpenAPI::fromJsonValue(m_vendor_code, json[QString("vendorCode")]);
    m_vendor_code_isSet = !json[QString("vendorCode")].isNull() && m_vendor_code_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_vendor_code_isSet) {
        obj.insert(QString("vendorCode"), ::OpenAPI::toJsonValue(m_vendor_code));
    }
    return obj;
}

QString OAICard::getCardNumber() const {
    return m_card_number;
}
void OAICard::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAICard::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAICard::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAICard::getExpiryDate() const {
    return m_expiry_date;
}
void OAICard::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAICard::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAICard::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAICard::getVendorCode() const {
    return m_vendor_code;
}
void OAICard::setVendorCode(const QString &vendor_code) {
    m_vendor_code = vendor_code;
    m_vendor_code_isSet = true;
}

bool OAICard::is_vendor_code_Set() const{
    return m_vendor_code_isSet;
}

bool OAICard::is_vendor_code_Valid() const{
    return m_vendor_code_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_number_isValid && m_expiry_date_isValid && m_vendor_code_isValid && true;
}

} // namespace OpenAPI
