/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelBookingLight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelBookingLight::OAIHotelBookingLight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelBookingLight::OAIHotelBookingLight() {
    this->initializeModel();
}

OAIHotelBookingLight::~OAIHotelBookingLight() {}

void OAIHotelBookingLight::initializeModel() {

    m_associated_records_isSet = false;
    m_associated_records_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_confirmation_id_isSet = false;
    m_provider_confirmation_id_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHotelBookingLight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelBookingLight::fromJsonObject(QJsonObject json) {

    m_associated_records_isValid = ::OpenAPI::fromJsonValue(m_associated_records, json[QString("associatedRecords")]);
    m_associated_records_isSet = !json[QString("associatedRecords")].isNull() && m_associated_records_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_confirmation_id_isValid = ::OpenAPI::fromJsonValue(m_provider_confirmation_id, json[QString("providerConfirmationId")]);
    m_provider_confirmation_id_isSet = !json[QString("providerConfirmationId")].isNull() && m_provider_confirmation_id_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIHotelBookingLight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelBookingLight::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_records.size() > 0) {
        obj.insert(QString("associatedRecords"), ::OpenAPI::toJsonValue(m_associated_records));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_confirmation_id_isSet) {
        obj.insert(QString("providerConfirmationId"), ::OpenAPI::toJsonValue(m_provider_confirmation_id));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAssociatedRecord> OAIHotelBookingLight::getAssociatedRecords() const {
    return m_associated_records;
}
void OAIHotelBookingLight::setAssociatedRecords(const QList<OAIAssociatedRecord> &associated_records) {
    m_associated_records = associated_records;
    m_associated_records_isSet = true;
}

bool OAIHotelBookingLight::is_associated_records_Set() const{
    return m_associated_records_isSet;
}

bool OAIHotelBookingLight::is_associated_records_Valid() const{
    return m_associated_records_isValid;
}

QString OAIHotelBookingLight::getId() const {
    return m_id;
}
void OAIHotelBookingLight::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHotelBookingLight::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHotelBookingLight::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHotelBookingLight::getProviderConfirmationId() const {
    return m_provider_confirmation_id;
}
void OAIHotelBookingLight::setProviderConfirmationId(const QString &provider_confirmation_id) {
    m_provider_confirmation_id = provider_confirmation_id;
    m_provider_confirmation_id_isSet = true;
}

bool OAIHotelBookingLight::is_provider_confirmation_id_Set() const{
    return m_provider_confirmation_id_isSet;
}

bool OAIHotelBookingLight::is_provider_confirmation_id_Valid() const{
    return m_provider_confirmation_id_isValid;
}

QString OAIHotelBookingLight::getSelf() const {
    return m_self;
}
void OAIHotelBookingLight::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIHotelBookingLight::is_self_Set() const{
    return m_self_isSet;
}

bool OAIHotelBookingLight::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIHotelBookingLight::getType() const {
    return m_type;
}
void OAIHotelBookingLight::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHotelBookingLight::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHotelBookingLight::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHotelBookingLight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_confirmation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelBookingLight::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_provider_confirmation_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
