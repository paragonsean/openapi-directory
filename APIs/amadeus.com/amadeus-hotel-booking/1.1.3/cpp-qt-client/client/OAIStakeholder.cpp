/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStakeholder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStakeholder::OAIStakeholder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStakeholder::OAIStakeholder() {
    this->initializeModel();
}

OAIStakeholder::~OAIStakeholder() {}

void OAIStakeholder::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_hotel_rewards_member_isSet = false;
    m_hotel_rewards_member_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIStakeholder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStakeholder::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_hotel_rewards_member_isValid = ::OpenAPI::fromJsonValue(m_hotel_rewards_member, json[QString("hotelRewardsMember")]);
    m_hotel_rewards_member_isSet = !json[QString("hotelRewardsMember")].isNull() && m_hotel_rewards_member_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIStakeholder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStakeholder::asJsonObject() const {
    QJsonObject obj;
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_hotel_rewards_member_isSet) {
        obj.insert(QString("hotelRewardsMember"), ::OpenAPI::toJsonValue(m_hotel_rewards_member));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIContact OAIStakeholder::getContact() const {
    return m_contact;
}
void OAIStakeholder::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIStakeholder::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIStakeholder::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIStakeholder::getHotelRewardsMember() const {
    return m_hotel_rewards_member;
}
void OAIStakeholder::setHotelRewardsMember(const QString &hotel_rewards_member) {
    m_hotel_rewards_member = hotel_rewards_member;
    m_hotel_rewards_member_isSet = true;
}

bool OAIStakeholder::is_hotel_rewards_member_Set() const{
    return m_hotel_rewards_member_isSet;
}

bool OAIStakeholder::is_hotel_rewards_member_Valid() const{
    return m_hotel_rewards_member_isValid;
}

qint32 OAIStakeholder::getId() const {
    return m_id;
}
void OAIStakeholder::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStakeholder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStakeholder::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAIStakeholder::getName() const {
    return m_name;
}
void OAIStakeholder::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStakeholder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStakeholder::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIStakeholder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_rewards_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStakeholder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
