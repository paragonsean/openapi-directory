/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoom::OAIRoom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoom::OAIRoom() {
    this->initializeModel();
}

OAIRoom::~OAIRoom() {}

void OAIRoom::initializeModel() {

    m_guest_ids_isSet = false;
    m_guest_ids_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_special_request_isSet = false;
    m_special_request_isValid = false;
}

void OAIRoom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoom::fromJsonObject(QJsonObject json) {

    m_guest_ids_isValid = ::OpenAPI::fromJsonValue(m_guest_ids, json[QString("guestIds")]);
    m_guest_ids_isSet = !json[QString("guestIds")].isNull() && m_guest_ids_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("paymentId")]);
    m_payment_id_isSet = !json[QString("paymentId")].isNull() && m_payment_id_isValid;

    m_special_request_isValid = ::OpenAPI::fromJsonValue(m_special_request, json[QString("specialRequest")]);
    m_special_request_isSet = !json[QString("specialRequest")].isNull() && m_special_request_isValid;
}

QString OAIRoom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoom::asJsonObject() const {
    QJsonObject obj;
    if (m_guest_ids.size() > 0) {
        obj.insert(QString("guestIds"), ::OpenAPI::toJsonValue(m_guest_ids));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("paymentId"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_special_request_isSet) {
        obj.insert(QString("specialRequest"), ::OpenAPI::toJsonValue(m_special_request));
    }
    return obj;
}

QSet<qint32> OAIRoom::getGuestIds() const {
    return m_guest_ids;
}
void OAIRoom::setGuestIds(const QSet<qint32> &guest_ids) {
    m_guest_ids = guest_ids;
    m_guest_ids_isSet = true;
}

bool OAIRoom::is_guest_ids_Set() const{
    return m_guest_ids_isSet;
}

bool OAIRoom::is_guest_ids_Valid() const{
    return m_guest_ids_isValid;
}

qint32 OAIRoom::getPaymentId() const {
    return m_payment_id;
}
void OAIRoom::setPaymentId(const qint32 &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIRoom::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIRoom::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIRoom::getSpecialRequest() const {
    return m_special_request;
}
void OAIRoom::setSpecialRequest(const QString &special_request) {
    m_special_request = special_request;
    m_special_request_isSet = true;
}

bool OAIRoom::is_special_request_Set() const{
    return m_special_request_isSet;
}

bool OAIRoom::is_special_request_Valid() const{
    return m_special_request_isValid;
}

bool OAIRoom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_guest_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoom::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
