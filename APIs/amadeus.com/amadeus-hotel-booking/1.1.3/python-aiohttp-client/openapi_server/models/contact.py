# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, phone: str=None):
        """Contact - a model defined in OpenAPI

        :param email: The email of this Contact.
        :param phone: The phone of this Contact.
        """
        self.openapi_types = {
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'email': 'email',
            'phone': 'phone'
        }

        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Contact.

        Email Address

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.

        Email Address

        :param email: The email of this Contact.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 90:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `90`")
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")
        if email is not None and not re.search(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/`")

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Contact.

        Phone Number in standard E.123(https://en.wikipedia.org/wiki/E.123)

        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.

        Phone Number in standard E.123(https://en.wikipedia.org/wiki/E.123)

        :param phone: The phone of this Contact.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")
        if phone is not None and len(phone) < 6:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `6`")
        if phone is not None and not re.search(r'^[+][1-9][0-9]{4,18}$', phone):
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/^[+][1-9][0-9]{4,18}$/`")

        self._phone = phone
