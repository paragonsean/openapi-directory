# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Name(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, title: str=None):
        """Name - a model defined in OpenAPI

        :param first_name: The first_name of this Name.
        :param last_name: The last_name of this Name.
        :param title: The title of this Name.
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'title': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'title': 'title'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Name':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Name of this Name.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this Name.

        first name (and middle name) of room guest

        :return: The first_name of this Name.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Name.

        first name (and middle name) of room guest

        :param first_name: The first_name of this Name.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 56:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `56`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")
        if first_name is not None and not re.search(r'^[A-Za-z \p{Han}\p{Katakana}\p{Hiragana}\p{Hangul}-]*$', first_name):
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/^[A-Za-z \p{Han}\p{Katakana}\p{Hiragana}\p{Hangul}-]*$/`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Name.

        last name of room guest

        :return: The last_name of this Name.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Name.

        last name of room guest

        :param last_name: The last_name of this Name.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if last_name is not None and len(last_name) > 57:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `57`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")
        if last_name is not None and not re.search(r'^[A-Za-z \p{Han}\p{Katakana}\p{Hiragana}\p{Hangul}-]*$', last_name):
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/^[A-Za-z \p{Han}\p{Katakana}\p{Hiragana}\p{Hangul}-]*$/`")

        self._last_name = last_name

    @property
    def title(self):
        """Gets the title of this Name.

        title/gender of room guest

        :return: The title of this Name.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Name.

        title/gender of room guest

        :param title: The title of this Name.
        :type title: str
        """
        allowed_values = ["MR", "MRS", "MS"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"
                .format(title, allowed_values)
            )

        self._title = title
