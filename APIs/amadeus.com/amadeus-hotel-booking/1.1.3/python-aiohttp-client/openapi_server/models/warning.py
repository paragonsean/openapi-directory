# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Warning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, detail: str=None, title: str=None):
        """Warning - a model defined in OpenAPI

        :param code: The code of this Warning.
        :param detail: The detail of this Warning.
        :param title: The title of this Warning.
        """
        self.openapi_types = {
            'code': int,
            'detail': str,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'title': 'title'
        }

        self._code = code
        self._detail = detail
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Warning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Warning of this Warning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Warning.

        [Integer] A machine-readable warning code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of warning

        :return: The code of this Warning.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Warning.

        [Integer] A machine-readable warning code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of warning

        :param code: The code of this Warning.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Warning.

        [String] An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field value can be localized.

        :return: The detail of this Warning.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Warning.

        [String] An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field value can be localized.

        :param detail: The detail of this Warning.
        :type detail: str
        """

        self._detail = detail

    @property
    def title(self):
        """Gets the title of this Warning.

        [String] A warning title from the Canned Messages table with a 1:1 correspondence to the warning code. This may be localized

        :return: The title of this Warning.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Warning.

        [String] A warning title from the Canned Messages table with a 1:1 correspondence to the warning code. This may be localized

        :param title: The title of this Warning.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
