# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment import Payment
from openapi_server.models.room import Room
from openapi_server.models.stakeholder import Stakeholder
import re
from openapi_server import util


class HotelBookingQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guests: list[Stakeholder]=None, offer_id: str=None, payments: list[Payment]=None, rooms: List[Room]=None):
        """HotelBookingQuery - a model defined in OpenAPI

        :param guests: The guests of this HotelBookingQuery.
        :param offer_id: The offer_id of this HotelBookingQuery.
        :param payments: The payments of this HotelBookingQuery.
        :param rooms: The rooms of this HotelBookingQuery.
        """
        self.openapi_types = {
            'guests': list[Stakeholder],
            'offer_id': str,
            'payments': list[Payment],
            'rooms': List[Room]
        }

        self.attribute_map = {
            'guests': 'guests',
            'offer_id': 'offerId',
            'payments': 'payments',
            'rooms': 'rooms'
        }

        self._guests = guests
        self._offer_id = offer_id
        self._payments = payments
        self._rooms = rooms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelBookingQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelBookingQuery of this HotelBookingQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guests(self):
        """Gets the guests of this HotelBookingQuery.

        minimum one guest is mandatory

        :return: The guests of this HotelBookingQuery.
        :rtype: list[Stakeholder]
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this HotelBookingQuery.

        minimum one guest is mandatory

        :param guests: The guests of this HotelBookingQuery.
        :type guests: list[Stakeholder]
        """
        if guests is None:
            raise ValueError("Invalid value for `guests`, must not be `None`")
        if guests is not None and len(guests) > 99:
            raise ValueError("Invalid value for `guests`, number of items must be less than or equal to `99`")
        if guests is not None and len(guests) < 1:
            raise ValueError("Invalid value for `guests`, number of items must be greater than or equal to `1`")

        self._guests = guests

    @property
    def offer_id(self):
        """Gets the offer_id of this HotelBookingQuery.

        offerId to book

        :return: The offer_id of this HotelBookingQuery.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this HotelBookingQuery.

        offerId to book

        :param offer_id: The offer_id of this HotelBookingQuery.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and len(offer_id) > 100:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `100`")
        if offer_id is not None and len(offer_id) < 2:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `2`")
        if offer_id is not None and not re.search(r'^[A-Z0-9]*$', offer_id):
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[A-Z0-9]*$/`")

        self._offer_id = offer_id

    @property
    def payments(self):
        """Gets the payments of this HotelBookingQuery.

        payments (often mandatory)

        :return: The payments of this HotelBookingQuery.
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this HotelBookingQuery.

        payments (often mandatory)

        :param payments: The payments of this HotelBookingQuery.
        :type payments: list[Payment]
        """
        if payments is not None and len(payments) > 9:
            raise ValueError("Invalid value for `payments`, number of items must be less than or equal to `9`")
        if payments is not None and len(payments) < 1:
            raise ValueError("Invalid value for `payments`, number of items must be greater than or equal to `1`")

        self._payments = payments

    @property
    def rooms(self):
        """Gets the rooms of this HotelBookingQuery.

        rooms repartition (when used the `rooms` array items must match the shopping offer `roomQuantity`)

        :return: The rooms of this HotelBookingQuery.
        :rtype: List[Room]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this HotelBookingQuery.

        rooms repartition (when used the `rooms` array items must match the shopping offer `roomQuantity`)

        :param rooms: The rooms of this HotelBookingQuery.
        :type rooms: List[Room]
        """
        if rooms is not None and len(rooms) > 9:
            raise ValueError("Invalid value for `rooms`, number of items must be less than or equal to `9`")
        if rooms is not None and len(rooms) < 1:
            raise ValueError("Invalid value for `rooms`, number of items must be greater than or equal to `1`")

        self._rooms = rooms
