# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number: str=None, expiry_date: str=None, vendor_code: str=None):
        """Card - a model defined in OpenAPI

        :param card_number: The card_number of this Card.
        :param expiry_date: The expiry_date of this Card.
        :param vendor_code: The vendor_code of this Card.
        """
        self.openapi_types = {
            'card_number': str,
            'expiry_date': str,
            'vendor_code': str
        }

        self.attribute_map = {
            'card_number': 'cardNumber',
            'expiry_date': 'expiryDate',
            'vendor_code': 'vendorCode'
        }

        self._card_number = card_number
        self._expiry_date = expiry_date
        self._vendor_code = vendor_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this Card.

        card number

        :return: The card_number of this Card.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this Card.

        card number

        :param card_number: The card_number of this Card.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")
        if card_number is not None and len(card_number) > 22:
            raise ValueError("Invalid value for `card_number`, length must be less than or equal to `22`")
        if card_number is not None and len(card_number) < 2:
            raise ValueError("Invalid value for `card_number`, length must be greater than or equal to `2`")
        if card_number is not None and not re.search(r'^[0-9]*$', card_number):
            raise ValueError("Invalid value for `card_number`, must be a follow pattern or equal to `/^[0-9]*$/`")

        self._card_number = card_number

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Card.

        Expiration Date YYYY-MM

        :return: The expiry_date of this Card.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Card.

        Expiration Date YYYY-MM

        :param expiry_date: The expiry_date of this Card.
        :type expiry_date: str
        """
        if expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")
        if expiry_date is not None and len(expiry_date) > 7:
            raise ValueError("Invalid value for `expiry_date`, length must be less than or equal to `7`")
        if expiry_date is not None and len(expiry_date) < 7:
            raise ValueError("Invalid value for `expiry_date`, length must be greater than or equal to `7`")
        if expiry_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}$', expiry_date):
            raise ValueError("Invalid value for `expiry_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}$/`")

        self._expiry_date = expiry_date

    @property
    def vendor_code(self):
        """Gets the vendor_code of this Card.

        card type (CA, VI, AX, DC...) Examples:   * CA - MasterCard (warning: use it instead of MC/IK/EC/MD/XS)   * VI - Visa   * AX - American Express   * DC - Diners Club   * AU - Carte Aurore   * CG - Cofinoga   * DS - Discover   * GK - Lufthansa GK Card   * JC - Japanese Credit Bureau   * TC - Torch Club   * TP - Universal Air Travel Card   * BC - Bank Card   * DL - Delta   * MA - Maestro   * UP - China UnionPay      * VE - Visa Electron 

        :return: The vendor_code of this Card.
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this Card.

        card type (CA, VI, AX, DC...) Examples:   * CA - MasterCard (warning: use it instead of MC/IK/EC/MD/XS)   * VI - Visa   * AX - American Express   * DC - Diners Club   * AU - Carte Aurore   * CG - Cofinoga   * DS - Discover   * GK - Lufthansa GK Card   * JC - Japanese Credit Bureau   * TC - Torch Club   * TP - Universal Air Travel Card   * BC - Bank Card   * DL - Delta   * MA - Maestro   * UP - China UnionPay      * VE - Visa Electron 

        :param vendor_code: The vendor_code of this Card.
        :type vendor_code: str
        """
        if vendor_code is None:
            raise ValueError("Invalid value for `vendor_code`, must not be `None`")
        if vendor_code is not None and len(vendor_code) > 2:
            raise ValueError("Invalid value for `vendor_code`, length must be less than or equal to `2`")
        if vendor_code is not None and len(vendor_code) < 2:
            raise ValueError("Invalid value for `vendor_code`, length must be greater than or equal to `2`")
        if vendor_code is not None and not re.search(r'^[A-Z]{2}$', vendor_code):
            raise ValueError("Invalid value for `vendor_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._vendor_code = vendor_code
