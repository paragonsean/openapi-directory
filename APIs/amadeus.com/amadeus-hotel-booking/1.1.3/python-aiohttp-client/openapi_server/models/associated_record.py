# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociatedRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origin_system_code: str=None, reference: str=None):
        """AssociatedRecord - a model defined in OpenAPI

        :param origin_system_code: The origin_system_code of this AssociatedRecord.
        :param reference: The reference of this AssociatedRecord.
        """
        self.openapi_types = {
            'origin_system_code': str,
            'reference': str
        }

        self.attribute_map = {
            'origin_system_code': 'originSystemCode',
            'reference': 'reference'
        }

        self._origin_system_code = origin_system_code
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociatedRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociatedRecord of this AssociatedRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin_system_code(self):
        """Gets the origin_system_code of this AssociatedRecord.

        * GDS: Associated Amadeus GDS Flight Booking PNR Record

        :return: The origin_system_code of this AssociatedRecord.
        :rtype: str
        """
        return self._origin_system_code

    @origin_system_code.setter
    def origin_system_code(self, origin_system_code):
        """Sets the origin_system_code of this AssociatedRecord.

        * GDS: Associated Amadeus GDS Flight Booking PNR Record

        :param origin_system_code: The origin_system_code of this AssociatedRecord.
        :type origin_system_code: str
        """
        allowed_values = ["GDS"]  # noqa: E501
        if origin_system_code not in allowed_values:
            raise ValueError(
                "Invalid value for `origin_system_code` ({0}), must be one of {1}"
                .format(origin_system_code, allowed_values)
            )

        self._origin_system_code = origin_system_code

    @property
    def reference(self):
        """Gets the reference of this AssociatedRecord.

        Amadeus GDS Record

        :return: The reference of this AssociatedRecord.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AssociatedRecord.

        Amadeus GDS Record

        :param reference: The reference of this AssociatedRecord.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 6:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `6`")
        if reference is not None and len(reference) < 6:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `6`")
        if reference is not None and not re.search(r'^[A-Z0-9]{6}$', reference):
            raise ValueError("Invalid value for `reference`, must be a follow pattern or equal to `/^[A-Z0-9]{6}$/`")

        self._reference = reference
