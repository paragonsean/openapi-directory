# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Room(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guest_ids: list[int]=None, payment_id: int=None, special_request: str=None):
        """Room - a model defined in OpenAPI

        :param guest_ids: The guest_ids of this Room.
        :param payment_id: The payment_id of this Room.
        :param special_request: The special_request of this Room.
        """
        self.openapi_types = {
            'guest_ids': list[int],
            'payment_id': int,
            'special_request': str
        }

        self.attribute_map = {
            'guest_ids': 'guestIds',
            'payment_id': 'paymentId',
            'special_request': 'specialRequest'
        }

        self._guest_ids = guest_ids
        self._payment_id = payment_id
        self._special_request = special_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Room':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Room of this Room.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guest_ids(self):
        """Gets the guest_ids of this Room.

        room main guest (and accompagnants) (optional)

        :return: The guest_ids of this Room.
        :rtype: list[int]
        """
        return self._guest_ids

    @guest_ids.setter
    def guest_ids(self, guest_ids):
        """Sets the guest_ids of this Room.

        room main guest (and accompagnants) (optional)

        :param guest_ids: The guest_ids of this Room.
        :type guest_ids: list[int]
        """

        self._guest_ids = guest_ids

    @property
    def payment_id(self):
        """Gets the payment_id of this Room.

        if missing, the first payment is used (optional)

        :return: The payment_id of this Room.
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Room.

        if missing, the first payment is used (optional)

        :param payment_id: The payment_id of this Room.
        :type payment_id: int
        """

        self._payment_id = payment_id

    @property
    def special_request(self):
        """Gets the special_request of this Room.

        special request to send to the reception (optional)

        :return: The special_request of this Room.
        :rtype: str
        """
        return self._special_request

    @special_request.setter
    def special_request(self, special_request):
        """Sets the special_request of this Room.

        special request to send to the reception (optional)

        :param special_request: The special_request of this Room.
        :type special_request: str
        """
        if special_request is not None and len(special_request) > 120:
            raise ValueError("Invalid value for `special_request`, length must be less than or equal to `120`")
        if special_request is not None and len(special_request) < 2:
            raise ValueError("Invalid value for `special_request`, length must be greater than or equal to `2`")

        self._special_request = special_request
