# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.name import Name
import re
from openapi_server import util


class Stakeholder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact: Contact=None, hotel_rewards_member: str=None, id: int=None, name: Name=None):
        """Stakeholder - a model defined in OpenAPI

        :param contact: The contact of this Stakeholder.
        :param hotel_rewards_member: The hotel_rewards_member of this Stakeholder.
        :param id: The id of this Stakeholder.
        :param name: The name of this Stakeholder.
        """
        self.openapi_types = {
            'contact': Contact,
            'hotel_rewards_member': str,
            'id': int,
            'name': Name
        }

        self.attribute_map = {
            'contact': 'contact',
            'hotel_rewards_member': 'hotelRewardsMember',
            'id': 'id',
            'name': 'name'
        }

        self._contact = contact
        self._hotel_rewards_member = hotel_rewards_member
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stakeholder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stakeholder of this Stakeholder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact(self):
        """Gets the contact of this Stakeholder.


        :return: The contact of this Stakeholder.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Stakeholder.


        :param contact: The contact of this Stakeholder.
        :type contact: Contact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def hotel_rewards_member(self):
        """Gets the hotel_rewards_member of this Stakeholder.

        Hotel Chain Rewards Member Number. To receive your Rewards Points, access online check in, fast check out. An error is returned by the Chain if the number is invalid. Example Rewards Programs: * Marriott Bonvoy * Hilton Honors * Hyatt Rewards * IHG Rewards * Wyndham Rewards * Accor Live Limitless ALL * Best Western Rewards * Choice Privileges * Radisson Rewards 

        :return: The hotel_rewards_member of this Stakeholder.
        :rtype: str
        """
        return self._hotel_rewards_member

    @hotel_rewards_member.setter
    def hotel_rewards_member(self, hotel_rewards_member):
        """Sets the hotel_rewards_member of this Stakeholder.

        Hotel Chain Rewards Member Number. To receive your Rewards Points, access online check in, fast check out. An error is returned by the Chain if the number is invalid. Example Rewards Programs: * Marriott Bonvoy * Hilton Honors * Hyatt Rewards * IHG Rewards * Wyndham Rewards * Accor Live Limitless ALL * Best Western Rewards * Choice Privileges * Radisson Rewards 

        :param hotel_rewards_member: The hotel_rewards_member of this Stakeholder.
        :type hotel_rewards_member: str
        """
        if hotel_rewards_member is not None and len(hotel_rewards_member) > 21:
            raise ValueError("Invalid value for `hotel_rewards_member`, length must be less than or equal to `21`")
        if hotel_rewards_member is not None and len(hotel_rewards_member) < 1:
            raise ValueError("Invalid value for `hotel_rewards_member`, length must be greater than or equal to `1`")
        if hotel_rewards_member is not None and not re.search(r'^[A-Z0-9-]{1,21}$', hotel_rewards_member):
            raise ValueError("Invalid value for `hotel_rewards_member`, must be a follow pattern or equal to `/^[A-Z0-9-]{1,21}$/`")

        self._hotel_rewards_member = hotel_rewards_member

    @property
    def id(self):
        """Gets the id of this Stakeholder.

        item identifier

        :return: The id of this Stakeholder.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stakeholder.

        item identifier

        :param id: The id of this Stakeholder.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Stakeholder.


        :return: The name of this Stakeholder.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stakeholder.


        :param name: The name of this Stakeholder.
        :type name: Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
