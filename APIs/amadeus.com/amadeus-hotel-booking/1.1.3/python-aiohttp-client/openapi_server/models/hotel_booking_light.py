# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associated_record import AssociatedRecord
import re
from openapi_server import util


class HotelBookingLight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_records: List[AssociatedRecord]=None, id: str=None, provider_confirmation_id: str=None, _self: str=None, type: str=None):
        """HotelBookingLight - a model defined in OpenAPI

        :param associated_records: The associated_records of this HotelBookingLight.
        :param id: The id of this HotelBookingLight.
        :param provider_confirmation_id: The provider_confirmation_id of this HotelBookingLight.
        :param _self: The _self of this HotelBookingLight.
        :param type: The type of this HotelBookingLight.
        """
        self.openapi_types = {
            'associated_records': List[AssociatedRecord],
            'id': str,
            'provider_confirmation_id': str,
            '_self': str,
            'type': str
        }

        self.attribute_map = {
            'associated_records': 'associatedRecords',
            'id': 'id',
            'provider_confirmation_id': 'providerConfirmationId',
            '_self': 'self',
            'type': 'type'
        }

        self._associated_records = associated_records
        self._id = id
        self._provider_confirmation_id = provider_confirmation_id
        self.__self = _self
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelBookingLight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelBookingLight of this HotelBookingLight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_records(self):
        """Gets the associated_records of this HotelBookingLight.


        :return: The associated_records of this HotelBookingLight.
        :rtype: List[AssociatedRecord]
        """
        return self._associated_records

    @associated_records.setter
    def associated_records(self, associated_records):
        """Sets the associated_records of this HotelBookingLight.


        :param associated_records: The associated_records of this HotelBookingLight.
        :type associated_records: List[AssociatedRecord]
        """
        if associated_records is not None and len(associated_records) > 1:
            raise ValueError("Invalid value for `associated_records`, number of items must be less than or equal to `1`")
        if associated_records is not None and len(associated_records) < 1:
            raise ValueError("Invalid value for `associated_records`, number of items must be greater than or equal to `1`")

        self._associated_records = associated_records

    @property
    def id(self):
        """Gets the id of this HotelBookingLight.

        Booking Id

        :return: The id of this HotelBookingLight.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HotelBookingLight.

        Booking Id

        :param id: The id of this HotelBookingLight.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 19:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `19`")
        if id is not None and len(id) < 5:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `5`")
        if id is not None and not re.search(r'^[A-Z0-9_]*$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Z0-9_]*$/`")

        self._id = id

    @property
    def provider_confirmation_id(self):
        """Gets the provider_confirmation_id of this HotelBookingLight.

        GDS Confirmation Number. If you call the Provider, this Reference may be asked

        :return: The provider_confirmation_id of this HotelBookingLight.
        :rtype: str
        """
        return self._provider_confirmation_id

    @provider_confirmation_id.setter
    def provider_confirmation_id(self, provider_confirmation_id):
        """Sets the provider_confirmation_id of this HotelBookingLight.

        GDS Confirmation Number. If you call the Provider, this Reference may be asked

        :param provider_confirmation_id: The provider_confirmation_id of this HotelBookingLight.
        :type provider_confirmation_id: str
        """
        if provider_confirmation_id is None:
            raise ValueError("Invalid value for `provider_confirmation_id`, must not be `None`")
        if provider_confirmation_id is not None and len(provider_confirmation_id) > 16:
            raise ValueError("Invalid value for `provider_confirmation_id`, length must be less than or equal to `16`")
        if provider_confirmation_id is not None and len(provider_confirmation_id) < 2:
            raise ValueError("Invalid value for `provider_confirmation_id`, length must be greater than or equal to `2`")
        if provider_confirmation_id is not None and not re.search(r'^[A-Z0-9_]*$', provider_confirmation_id):
            raise ValueError("Invalid value for `provider_confirmation_id`, must be a follow pattern or equal to `/^[A-Z0-9_]*$/`")

        self._provider_confirmation_id = provider_confirmation_id

    @property
    def _self(self):
        """Gets the _self of this HotelBookingLight.

        Retrieve Booking Details

        :return: The _self of this HotelBookingLight.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this HotelBookingLight.

        Retrieve Booking Details

        :param _self: The _self of this HotelBookingLight.
        :type _self: str
        """

        self.__self = _self

    @property
    def type(self):
        """Gets the type of this HotelBookingLight.

        Response Type

        :return: The type of this HotelBookingLight.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HotelBookingLight.

        Response Type

        :param type: The type of this HotelBookingLight.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
