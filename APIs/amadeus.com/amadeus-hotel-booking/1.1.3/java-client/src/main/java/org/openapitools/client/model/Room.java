/*
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * room
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:13.978744-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Room {
  public static final String SERIALIZED_NAME_GUEST_IDS = "guestIds";
  @SerializedName(SERIALIZED_NAME_GUEST_IDS)
  private Set<Integer> guestIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private Integer paymentId;

  public static final String SERIALIZED_NAME_SPECIAL_REQUEST = "specialRequest";
  @SerializedName(SERIALIZED_NAME_SPECIAL_REQUEST)
  private String specialRequest;

  public Room() {
  }

  public Room guestIds(Set<Integer> guestIds) {
    this.guestIds = guestIds;
    return this;
  }

  public Room addGuestIdsItem(Integer guestIdsItem) {
    if (this.guestIds == null) {
      this.guestIds = new LinkedHashSet<>();
    }
    this.guestIds.add(guestIdsItem);
    return this;
  }

  /**
   * room main guest (and accompagnants) (optional)
   * @return guestIds
   */
  @javax.annotation.Nullable
  public Set<Integer> getGuestIds() {
    return guestIds;
  }

  public void setGuestIds(Set<Integer> guestIds) {
    this.guestIds = guestIds;
  }


  public Room paymentId(Integer paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * if missing, the first payment is used (optional)
   * @return paymentId
   */
  @javax.annotation.Nullable
  public Integer getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(Integer paymentId) {
    this.paymentId = paymentId;
  }


  public Room specialRequest(String specialRequest) {
    this.specialRequest = specialRequest;
    return this;
  }

  /**
   * special request to send to the reception (optional)
   * @return specialRequest
   */
  @javax.annotation.Nullable
  public String getSpecialRequest() {
    return specialRequest;
  }

  public void setSpecialRequest(String specialRequest) {
    this.specialRequest = specialRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Room room = (Room) o;
    return Objects.equals(this.guestIds, room.guestIds) &&
        Objects.equals(this.paymentId, room.paymentId) &&
        Objects.equals(this.specialRequest, room.specialRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guestIds, paymentId, specialRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Room {\n");
    sb.append("    guestIds: ").append(toIndentedString(guestIds)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    specialRequest: ").append(toIndentedString(specialRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guestIds");
    openapiFields.add("paymentId");
    openapiFields.add("specialRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Room
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Room.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Room is not found in the empty JSON string", Room.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Room.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Room` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("guestIds") != null && !jsonObj.get("guestIds").isJsonNull() && !jsonObj.get("guestIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestIds` to be an array in the JSON string but got `%s`", jsonObj.get("guestIds").toString()));
      }
      if ((jsonObj.get("specialRequest") != null && !jsonObj.get("specialRequest").isJsonNull()) && !jsonObj.get("specialRequest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialRequest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialRequest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Room.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Room' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Room> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Room.class));

       return (TypeAdapter<T>) new TypeAdapter<Room>() {
           @Override
           public void write(JsonWriter out, Room value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Room read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Room given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Room
   * @throws IOException if the JSON string is invalid with respect to Room
   */
  public static Room fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Room.class);
  }

  /**
   * Convert an instance of Room to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

