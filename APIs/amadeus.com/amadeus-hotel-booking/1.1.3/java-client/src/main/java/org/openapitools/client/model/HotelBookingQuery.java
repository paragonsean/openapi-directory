/*
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Room;
import org.openapitools.client.model.Stakeholder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HotelBookingQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:13.978744-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelBookingQuery {
  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private Set<Stakeholder> guests = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private Set<Payment> payments = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private List<Room> rooms = new ArrayList<>();

  public HotelBookingQuery() {
  }

  public HotelBookingQuery guests(Set<Stakeholder> guests) {
    this.guests = guests;
    return this;
  }

  public HotelBookingQuery addGuestsItem(Stakeholder guestsItem) {
    if (this.guests == null) {
      this.guests = new LinkedHashSet<>();
    }
    this.guests.add(guestsItem);
    return this;
  }

  /**
   * minimum one guest is mandatory
   * @return guests
   */
  @javax.annotation.Nonnull
  public Set<Stakeholder> getGuests() {
    return guests;
  }

  public void setGuests(Set<Stakeholder> guests) {
    this.guests = guests;
  }


  public HotelBookingQuery offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * offerId to book
   * @return offerId
   */
  @javax.annotation.Nonnull
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public HotelBookingQuery payments(Set<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public HotelBookingQuery addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new LinkedHashSet<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * payments (often mandatory)
   * @return payments
   */
  @javax.annotation.Nullable
  public Set<Payment> getPayments() {
    return payments;
  }

  public void setPayments(Set<Payment> payments) {
    this.payments = payments;
  }


  public HotelBookingQuery rooms(List<Room> rooms) {
    this.rooms = rooms;
    return this;
  }

  public HotelBookingQuery addRoomsItem(Room roomsItem) {
    if (this.rooms == null) {
      this.rooms = new ArrayList<>();
    }
    this.rooms.add(roomsItem);
    return this;
  }

  /**
   * rooms repartition (when used the &#x60;rooms&#x60; array items must match the shopping offer &#x60;roomQuantity&#x60;)
   * @return rooms
   */
  @javax.annotation.Nullable
  public List<Room> getRooms() {
    return rooms;
  }

  public void setRooms(List<Room> rooms) {
    this.rooms = rooms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelBookingQuery hotelBookingQuery = (HotelBookingQuery) o;
    return Objects.equals(this.guests, hotelBookingQuery.guests) &&
        Objects.equals(this.offerId, hotelBookingQuery.offerId) &&
        Objects.equals(this.payments, hotelBookingQuery.payments) &&
        Objects.equals(this.rooms, hotelBookingQuery.rooms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guests, offerId, payments, rooms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelBookingQuery {\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guests");
    openapiFields.add("offerId");
    openapiFields.add("payments");
    openapiFields.add("rooms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("guests");
    openapiRequiredFields.add("offerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelBookingQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelBookingQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelBookingQuery is not found in the empty JSON string", HotelBookingQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelBookingQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelBookingQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelBookingQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("guests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `guests` to be an array in the JSON string but got `%s`", jsonObj.get("guests").toString()));
      }

      JsonArray jsonArrayguests = jsonObj.getAsJsonArray("guests");
      // validate the required field `guests` (array)
      for (int i = 0; i < jsonArrayguests.size(); i++) {
        Stakeholder.validateJsonElement(jsonArrayguests.get(i));
      };
      if (!jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if (jsonObj.get("rooms") != null && !jsonObj.get("rooms").isJsonNull()) {
        JsonArray jsonArrayrooms = jsonObj.getAsJsonArray("rooms");
        if (jsonArrayrooms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rooms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rooms` to be an array in the JSON string but got `%s`", jsonObj.get("rooms").toString()));
          }

          // validate the optional field `rooms` (array)
          for (int i = 0; i < jsonArrayrooms.size(); i++) {
            Room.validateJsonElement(jsonArrayrooms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelBookingQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelBookingQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelBookingQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelBookingQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelBookingQuery>() {
           @Override
           public void write(JsonWriter out, HotelBookingQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelBookingQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelBookingQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelBookingQuery
   * @throws IOException if the JSON string is invalid with respect to HotelBookingQuery
   */
  public static HotelBookingQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelBookingQuery.class);
  }

  /**
   * Convert an instance of HotelBookingQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

