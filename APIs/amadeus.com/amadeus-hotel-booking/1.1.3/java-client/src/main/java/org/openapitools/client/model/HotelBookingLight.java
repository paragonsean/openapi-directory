/*
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssociatedRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Booking Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:13.978744-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelBookingLight {
  public static final String SERIALIZED_NAME_ASSOCIATED_RECORDS = "associatedRecords";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_RECORDS)
  private List<AssociatedRecord> associatedRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROVIDER_CONFIRMATION_ID = "providerConfirmationId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CONFIRMATION_ID)
  private String providerConfirmationId;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private URI self;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public HotelBookingLight() {
  }

  public HotelBookingLight associatedRecords(List<AssociatedRecord> associatedRecords) {
    this.associatedRecords = associatedRecords;
    return this;
  }

  public HotelBookingLight addAssociatedRecordsItem(AssociatedRecord associatedRecordsItem) {
    if (this.associatedRecords == null) {
      this.associatedRecords = new ArrayList<>();
    }
    this.associatedRecords.add(associatedRecordsItem);
    return this;
  }

  /**
   * Get associatedRecords
   * @return associatedRecords
   */
  @javax.annotation.Nullable
  public List<AssociatedRecord> getAssociatedRecords() {
    return associatedRecords;
  }

  public void setAssociatedRecords(List<AssociatedRecord> associatedRecords) {
    this.associatedRecords = associatedRecords;
  }


  public HotelBookingLight id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Booking Id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HotelBookingLight providerConfirmationId(String providerConfirmationId) {
    this.providerConfirmationId = providerConfirmationId;
    return this;
  }

  /**
   * GDS Confirmation Number. If you call the Provider, this Reference may be asked
   * @return providerConfirmationId
   */
  @javax.annotation.Nonnull
  public String getProviderConfirmationId() {
    return providerConfirmationId;
  }

  public void setProviderConfirmationId(String providerConfirmationId) {
    this.providerConfirmationId = providerConfirmationId;
  }


  public HotelBookingLight self(URI self) {
    this.self = self;
    return this;
  }

  /**
   * Retrieve Booking Details
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }

  public void setSelf(URI self) {
    this.self = self;
  }


  public HotelBookingLight type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Response Type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelBookingLight hotelBookingLight = (HotelBookingLight) o;
    return Objects.equals(this.associatedRecords, hotelBookingLight.associatedRecords) &&
        Objects.equals(this.id, hotelBookingLight.id) &&
        Objects.equals(this.providerConfirmationId, hotelBookingLight.providerConfirmationId) &&
        Objects.equals(this.self, hotelBookingLight.self) &&
        Objects.equals(this.type, hotelBookingLight.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedRecords, id, providerConfirmationId, self, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelBookingLight {\n");
    sb.append("    associatedRecords: ").append(toIndentedString(associatedRecords)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    providerConfirmationId: ").append(toIndentedString(providerConfirmationId)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedRecords");
    openapiFields.add("id");
    openapiFields.add("providerConfirmationId");
    openapiFields.add("self");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("providerConfirmationId");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelBookingLight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelBookingLight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelBookingLight is not found in the empty JSON string", HotelBookingLight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelBookingLight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelBookingLight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelBookingLight.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("associatedRecords") != null && !jsonObj.get("associatedRecords").isJsonNull()) {
        JsonArray jsonArrayassociatedRecords = jsonObj.getAsJsonArray("associatedRecords");
        if (jsonArrayassociatedRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associatedRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associatedRecords` to be an array in the JSON string but got `%s`", jsonObj.get("associatedRecords").toString()));
          }

          // validate the optional field `associatedRecords` (array)
          for (int i = 0; i < jsonArrayassociatedRecords.size(); i++) {
            AssociatedRecord.validateJsonElement(jsonArrayassociatedRecords.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("providerConfirmationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerConfirmationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerConfirmationId").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelBookingLight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelBookingLight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelBookingLight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelBookingLight.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelBookingLight>() {
           @Override
           public void write(JsonWriter out, HotelBookingLight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelBookingLight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelBookingLight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelBookingLight
   * @throws IOException if the JSON string is invalid with respect to HotelBookingLight
   */
  public static HotelBookingLight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelBookingLight.class);
  }

  /**
   * Convert an instance of HotelBookingLight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

