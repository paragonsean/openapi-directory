/*
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Name;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guest Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:13.978744-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Stakeholder {
  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_HOTEL_REWARDS_MEMBER = "hotelRewardsMember";
  @SerializedName(SERIALIZED_NAME_HOTEL_REWARDS_MEMBER)
  private String hotelRewardsMember;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public Stakeholder() {
  }

  public Stakeholder contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nonnull
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Stakeholder hotelRewardsMember(String hotelRewardsMember) {
    this.hotelRewardsMember = hotelRewardsMember;
    return this;
  }

  /**
   * Hotel Chain Rewards Member Number. To receive your Rewards Points, access online check in, fast check out. An error is returned by the Chain if the number is invalid. Example Rewards Programs: * Marriott Bonvoy * Hilton Honors * Hyatt Rewards * IHG Rewards * Wyndham Rewards * Accor Live Limitless ALL * Best Western Rewards * Choice Privileges * Radisson Rewards 
   * @return hotelRewardsMember
   */
  @javax.annotation.Nullable
  public String getHotelRewardsMember() {
    return hotelRewardsMember;
  }

  public void setHotelRewardsMember(String hotelRewardsMember) {
    this.hotelRewardsMember = hotelRewardsMember;
  }


  public Stakeholder id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * item identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Stakeholder name(Name name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stakeholder stakeholder = (Stakeholder) o;
    return Objects.equals(this.contact, stakeholder.contact) &&
        Objects.equals(this.hotelRewardsMember, stakeholder.hotelRewardsMember) &&
        Objects.equals(this.id, stakeholder.id) &&
        Objects.equals(this.name, stakeholder.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contact, hotelRewardsMember, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stakeholder {\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    hotelRewardsMember: ").append(toIndentedString(hotelRewardsMember)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contact");
    openapiFields.add("hotelRewardsMember");
    openapiFields.add("id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stakeholder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stakeholder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stakeholder is not found in the empty JSON string", Stakeholder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stakeholder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stakeholder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Stakeholder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contact`
      Contact.validateJsonElement(jsonObj.get("contact"));
      if ((jsonObj.get("hotelRewardsMember") != null && !jsonObj.get("hotelRewardsMember").isJsonNull()) && !jsonObj.get("hotelRewardsMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelRewardsMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelRewardsMember").toString()));
      }
      // validate the required field `name`
      Name.validateJsonElement(jsonObj.get("name"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stakeholder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stakeholder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stakeholder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stakeholder.class));

       return (TypeAdapter<T>) new TypeAdapter<Stakeholder>() {
           @Override
           public void write(JsonWriter out, Stakeholder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stakeholder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stakeholder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stakeholder
   * @throws IOException if the JSON string is invalid with respect to Stakeholder
   */
  public static Stakeholder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stakeholder.class);
  }

  /**
   * Convert an instance of Stakeholder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

