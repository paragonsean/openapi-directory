/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 1.1.3
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * payment card details (mandatory in case of &#x60;method&#x60; creditCard)
     * @alias module:model/Card
     * @param cardNumber {String} card number
     * @param expiryDate {String} Expiration Date YYYY-MM
     * @param vendorCode {String} card type (CA, VI, AX, DC...) Examples:   * CA - MasterCard (warning: use it instead of MC/IK/EC/MD/XS)   * VI - Visa   * AX - American Express   * DC - Diners Club   * AU - Carte Aurore   * CG - Cofinoga   * DS - Discover   * GK - Lufthansa GK Card   * JC - Japanese Credit Bureau   * TC - Torch Club   * TP - Universal Air Travel Card   * BC - Bank Card   * DL - Delta   * MA - Maestro   * UP - China UnionPay      * VE - Visa Electron 
     */
    constructor(cardNumber, expiryDate, vendorCode) { 
        
        Card.initialize(this, cardNumber, expiryDate, vendorCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardNumber, expiryDate, vendorCode) { 
        obj['cardNumber'] = cardNumber;
        obj['expiryDate'] = expiryDate;
        obj['vendorCode'] = vendorCode;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('vendorCode')) {
                obj['vendorCode'] = ApiClient.convertToType(data['vendorCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['vendorCode'] && !(typeof data['vendorCode'] === 'string' || data['vendorCode'] instanceof String)) {
            throw new Error("Expected the field `vendorCode` to be a primitive type in the JSON string but got " + data['vendorCode']);
        }

        return true;
    }


}

Card.RequiredProperties = ["cardNumber", "expiryDate", "vendorCode"];

/**
 * card number
 * @member {String} cardNumber
 */
Card.prototype['cardNumber'] = undefined;

/**
 * Expiration Date YYYY-MM
 * @member {String} expiryDate
 */
Card.prototype['expiryDate'] = undefined;

/**
 * card type (CA, VI, AX, DC...) Examples:   * CA - MasterCard (warning: use it instead of MC/IK/EC/MD/XS)   * VI - Visa   * AX - American Express   * DC - Diners Club   * AU - Carte Aurore   * CG - Cofinoga   * DS - Discover   * GK - Lufthansa GK Card   * JC - Japanese Credit Bureau   * TC - Torch Club   * TP - Universal Air Travel Card   * BC - Bank Card   * DL - Delta   * MA - Maestro   * UP - China UnionPay      * VE - Visa Electron 
 * @member {String} vendorCode
 */
Card.prototype['vendorCode'] = undefined;






export default Card;

