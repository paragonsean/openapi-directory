/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociatedRecord from './AssociatedRecord';

/**
 * The HotelBookingLight model module.
 * @module model/HotelBookingLight
 * @version 1.1.3
 */
class HotelBookingLight {
    /**
     * Constructs a new <code>HotelBookingLight</code>.
     * Booking Details
     * @alias module:model/HotelBookingLight
     * @param id {String} Booking Id
     * @param providerConfirmationId {String} GDS Confirmation Number. If you call the Provider, this Reference may be asked
     * @param type {String} Response Type
     */
    constructor(id, providerConfirmationId, type) { 
        
        HotelBookingLight.initialize(this, id, providerConfirmationId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, providerConfirmationId, type) { 
        obj['id'] = id;
        obj['providerConfirmationId'] = providerConfirmationId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>HotelBookingLight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelBookingLight} obj Optional instance to populate.
     * @return {module:model/HotelBookingLight} The populated <code>HotelBookingLight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelBookingLight();

            if (data.hasOwnProperty('associatedRecords')) {
                obj['associatedRecords'] = ApiClient.convertToType(data['associatedRecords'], [AssociatedRecord]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('providerConfirmationId')) {
                obj['providerConfirmationId'] = ApiClient.convertToType(data['providerConfirmationId'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelBookingLight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelBookingLight</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HotelBookingLight.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['associatedRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associatedRecords'])) {
                throw new Error("Expected the field `associatedRecords` to be an array in the JSON data but got " + data['associatedRecords']);
            }
            // validate the optional field `associatedRecords` (array)
            for (const item of data['associatedRecords']) {
                AssociatedRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['providerConfirmationId'] && !(typeof data['providerConfirmationId'] === 'string' || data['providerConfirmationId'] instanceof String)) {
            throw new Error("Expected the field `providerConfirmationId` to be a primitive type in the JSON string but got " + data['providerConfirmationId']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

HotelBookingLight.RequiredProperties = ["id", "providerConfirmationId", "type"];

/**
 * @member {Array.<module:model/AssociatedRecord>} associatedRecords
 */
HotelBookingLight.prototype['associatedRecords'] = undefined;

/**
 * Booking Id
 * @member {String} id
 */
HotelBookingLight.prototype['id'] = undefined;

/**
 * GDS Confirmation Number. If you call the Provider, this Reference may be asked
 * @member {String} providerConfirmationId
 */
HotelBookingLight.prototype['providerConfirmationId'] = undefined;

/**
 * Retrieve Booking Details
 * @member {String} self
 */
HotelBookingLight.prototype['self'] = undefined;

/**
 * Response Type
 * @member {String} type
 */
HotelBookingLight.prototype['type'] = undefined;






export default HotelBookingLight;

