/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Room model module.
 * @module model/Room
 * @version 1.1.3
 */
class Room {
    /**
     * Constructs a new <code>Room</code>.
     * room
     * @alias module:model/Room
     */
    constructor() { 
        
        Room.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Room</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Room} obj Optional instance to populate.
     * @return {module:model/Room} The populated <code>Room</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Room();

            if (data.hasOwnProperty('guestIds')) {
                obj['guestIds'] = ApiClient.convertToType(data['guestIds'], ['Number']);
            }
            if (data.hasOwnProperty('paymentId')) {
                obj['paymentId'] = ApiClient.convertToType(data['paymentId'], 'Number');
            }
            if (data.hasOwnProperty('specialRequest')) {
                obj['specialRequest'] = ApiClient.convertToType(data['specialRequest'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Room</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Room</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['guestIds'])) {
            throw new Error("Expected the field `guestIds` to be an array in the JSON data but got " + data['guestIds']);
        }
        // ensure the json data is a string
        if (data['specialRequest'] && !(typeof data['specialRequest'] === 'string' || data['specialRequest'] instanceof String)) {
            throw new Error("Expected the field `specialRequest` to be a primitive type in the JSON string but got " + data['specialRequest']);
        }

        return true;
    }


}



/**
 * room main guest (and accompagnants) (optional)
 * @member {Array.<Number>} guestIds
 */
Room.prototype['guestIds'] = undefined;

/**
 * if missing, the first payment is used (optional)
 * @member {Number} paymentId
 */
Room.prototype['paymentId'] = undefined;

/**
 * special request to send to the reception (optional)
 * @member {String} specialRequest
 */
Room.prototype['specialRequest'] = undefined;






export default Room;

