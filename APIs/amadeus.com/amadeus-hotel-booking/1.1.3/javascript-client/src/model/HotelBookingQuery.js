/**
 * Hotel Booking
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production for this API it may change dynamically. For your tests, use big cities like LON (London) or NYC (New-York).   **Warning: Do not perform test booking in production**. All requests are sent and processed by hotel providers. An excessive amount of fake/canceled reservation will make you blacklisted by hotel providers. 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payment from './Payment';
import Room from './Room';
import Stakeholder from './Stakeholder';

/**
 * The HotelBookingQuery model module.
 * @module model/HotelBookingQuery
 * @version 1.1.3
 */
class HotelBookingQuery {
    /**
     * Constructs a new <code>HotelBookingQuery</code>.
     * @alias module:model/HotelBookingQuery
     * @param guests {Array.<module:model/Stakeholder>} minimum one guest is mandatory
     * @param offerId {String} offerId to book
     */
    constructor(guests, offerId) { 
        
        HotelBookingQuery.initialize(this, guests, offerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, guests, offerId) { 
        obj['guests'] = guests;
        obj['offerId'] = offerId;
    }

    /**
     * Constructs a <code>HotelBookingQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelBookingQuery} obj Optional instance to populate.
     * @return {module:model/HotelBookingQuery} The populated <code>HotelBookingQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelBookingQuery();

            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], [Stakeholder]);
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
            }
            if (data.hasOwnProperty('rooms')) {
                obj['rooms'] = ApiClient.convertToType(data['rooms'], [Room]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelBookingQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelBookingQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HotelBookingQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['guests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['guests'])) {
                throw new Error("Expected the field `guests` to be an array in the JSON data but got " + data['guests']);
            }
            // validate the optional field `guests` (array)
            for (const item of data['guests']) {
                Stakeholder.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                Payment.validateJSON(item);
            };
        }
        if (data['rooms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rooms'])) {
                throw new Error("Expected the field `rooms` to be an array in the JSON data but got " + data['rooms']);
            }
            // validate the optional field `rooms` (array)
            for (const item of data['rooms']) {
                Room.validateJSON(item);
            };
        }

        return true;
    }


}

HotelBookingQuery.RequiredProperties = ["guests", "offerId"];

/**
 * minimum one guest is mandatory
 * @member {Array.<module:model/Stakeholder>} guests
 */
HotelBookingQuery.prototype['guests'] = undefined;

/**
 * offerId to book
 * @member {String} offerId
 */
HotelBookingQuery.prototype['offerId'] = undefined;

/**
 * payments (often mandatory)
 * @member {Array.<module:model/Payment>} payments
 */
HotelBookingQuery.prototype['payments'] = undefined;

/**
 * rooms repartition (when used the `rooms` array items must match the shopping offer `roomQuantity`)
 * @member {Array.<module:model/Room>} rooms
 */
HotelBookingQuery.prototype['rooms'] = undefined;






export default HotelBookingQuery;

