# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, currency: str=None, total: str=None, total_taxes: str=None):
        """Price - a model defined in OpenAPI

        :param base: The base of this Price.
        :param currency: The currency of this Price.
        :param total: The total of this Price.
        :param total_taxes: The total_taxes of this Price.
        """
        self.openapi_types = {
            'base': str,
            'currency': str,
            'total': str,
            'total_taxes': str
        }

        self.attribute_map = {
            'base': 'base',
            'currency': 'currency',
            'total': 'total',
            'total_taxes': 'totalTaxes'
        }

        self._base = base
        self._currency = currency
        self._total = total
        self._total_taxes = total_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this Price.


        :return: The base of this Price.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Price.


        :param base: The base of this Price.
        :type base: str
        """

        self._base = base

    @property
    def currency(self):
        """Gets the currency of this Price.

        currency Code apply to all elements of the price

        :return: The currency of this Price.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.

        currency Code apply to all elements of the price

        :param currency: The currency of this Price.
        :type currency: str
        """

        self._currency = currency

    @property
    def total(self):
        """Gets the total of this Price.

        Total = base + totalTaxes +

        :return: The total of this Price.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Price.

        Total = base + totalTaxes +

        :param total: The total of this Price.
        :type total: str
        """

        self._total = total

    @property
    def total_taxes(self):
        """Gets the total_taxes of this Price.


        :return: The total_taxes of this Price.
        :rtype: str
        """
        return self._total_taxes

    @total_taxes.setter
    def total_taxes(self, total_taxes):
        """Sets the total_taxes of this Price.


        :param total_taxes: The total_taxes of this Price.
        :type total_taxes: str
        """

        self._total_taxes = total_taxes
