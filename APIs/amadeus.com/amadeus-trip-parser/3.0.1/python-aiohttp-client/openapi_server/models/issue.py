# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_source import IssueSource
from openapi_server import util


class Issue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, detail: str=None, source: IssueSource=None, status: int=None, title: str=None):
        """Issue - a model defined in OpenAPI

        :param code: The code of this Issue.
        :param detail: The detail of this Issue.
        :param source: The source of this Issue.
        :param status: The status of this Issue.
        :param title: The title of this Issue.
        """
        self.openapi_types = {
            'code': int,
            'detail': str,
            'source': IssueSource,
            'status': int,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'source': 'source',
            'status': 'status',
            'title': 'title'
        }

        self._code = code
        self._detail = detail
        self._source = source
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Issue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issue of this Issue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Issue.

        A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error

        :return: The code of this Issue.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Issue.

        A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error

        :param code: The code of this Issue.
        :type code: int
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Issue.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :return: The detail of this Issue.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Issue.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :param detail: The detail of this Issue.
        :type detail: str
        """

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this Issue.


        :return: The source of this Issue.
        :rtype: IssueSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Issue.


        :param source: The source of this Issue.
        :type source: IssueSource
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Issue.

        The HTTP status code of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.

        :return: The status of this Issue.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Issue.

        The HTTP status code of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.

        :param status: The status of this Issue.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Issue.

        An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :return: The title of this Issue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Issue.

        An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :param title: The title of this Issue.
        :type title: str
        """

        self._title = title
