# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentEnvelopeMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_type: str=None, encoding: str=None, name: str=None):
        """DocumentEnvelopeMetaData - a model defined in OpenAPI

        :param document_type: The document_type of this DocumentEnvelopeMetaData.
        :param encoding: The encoding of this DocumentEnvelopeMetaData.
        :param name: The name of this DocumentEnvelopeMetaData.
        """
        self.openapi_types = {
            'document_type': str,
            'encoding': str,
            'name': str
        }

        self.attribute_map = {
            'document_type': 'documentType',
            'encoding': 'encoding',
            'name': 'name'
        }

        self._document_type = document_type
        self._encoding = encoding
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentEnvelopeMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentEnvelope_MetaData of this DocumentEnvelopeMetaData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_type(self):
        """Gets the document_type of this DocumentEnvelopeMetaData.

        Type of the document in the payload defined by the \"grammarOwner\"

        :return: The document_type of this DocumentEnvelopeMetaData.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentEnvelopeMetaData.

        Type of the document in the payload defined by the \"grammarOwner\"

        :param document_type: The document_type of this DocumentEnvelopeMetaData.
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def encoding(self):
        """Gets the encoding of this DocumentEnvelopeMetaData.

        Example: BASE_64

        :return: The encoding of this DocumentEnvelopeMetaData.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this DocumentEnvelopeMetaData.

        Example: BASE_64

        :param encoding: The encoding of this DocumentEnvelopeMetaData.
        :type encoding: str
        """
        allowed_values = ["BASE_64", "BASE_64_URL"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def name(self):
        """Gets the name of this DocumentEnvelopeMetaData.

        Document name: name of the document in the payload (namespace, see domain)

        :return: The name of this DocumentEnvelopeMetaData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentEnvelopeMetaData.

        Document name: name of the document in the payload (namespace, see domain)

        :param name: The name of this DocumentEnvelopeMetaData.
        :type name: str
        """

        self._name = name
