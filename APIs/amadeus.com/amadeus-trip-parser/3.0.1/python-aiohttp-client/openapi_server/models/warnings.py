# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.warnings_source import WarningsSource
from openapi_server import util


class Warnings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, detail: str=None, source: WarningsSource=None, title: str=None):
        """Warnings - a model defined in OpenAPI

        :param code: The code of this Warnings.
        :param detail: The detail of this Warnings.
        :param source: The source of this Warnings.
        :param title: The title of this Warnings.
        """
        self.openapi_types = {
            'code': int,
            'detail': str,
            'source': WarningsSource,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'source': 'source',
            'title': 'title'
        }

        self._code = code
        self._detail = detail
        self._source = source
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Warnings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The warnings of this Warnings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Warnings.

        A machine-readable warning code from the Canned Messages table, that will enable the API Consumers code to handle this type of warning

        :return: The code of this Warnings.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Warnings.

        A machine-readable warning code from the Canned Messages table, that will enable the API Consumers code to handle this type of warning

        :param code: The code of this Warnings.
        :type code: int
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Warnings.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :return: The detail of this Warnings.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Warnings.

        An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.

        :param detail: The detail of this Warnings.
        :type detail: str
        """

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this Warnings.


        :return: The source of this Warnings.
        :rtype: WarningsSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Warnings.


        :param source: The source of this Warnings.
        :type source: WarningsSource
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this Warnings.

        An warning title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :return: The title of this Warnings.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Warnings.

        An warning title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized

        :param title: The title of this Warnings.
        :type title: str
        """

        self._title = title
