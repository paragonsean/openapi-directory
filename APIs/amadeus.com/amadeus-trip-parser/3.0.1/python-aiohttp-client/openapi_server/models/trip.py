# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end import End
from openapi_server.models.price import Price
from openapi_server.models.stakeholder import Stakeholder
from openapi_server.models.start import Start
from openapi_server.models.travel_agency import TravelAgency
from openapi_server.models.trip_products_inner import TripProductsInner
import re
from openapi_server import util


class Trip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_date: str=None, booking_number: str=None, creation_date_time: str=None, description: str=None, end: End=None, price: Price=None, products: List[TripProductsInner]=None, provider: str=None, reference: str=None, stakeholders: List[Stakeholder]=None, start: Start=None, title: str=None, travel_agency: TravelAgency=None, type: str=None):
        """Trip - a model defined in OpenAPI

        :param booking_date: The booking_date of this Trip.
        :param booking_number: The booking_number of this Trip.
        :param creation_date_time: The creation_date_time of this Trip.
        :param description: The description of this Trip.
        :param end: The end of this Trip.
        :param price: The price of this Trip.
        :param products: The products of this Trip.
        :param provider: The provider of this Trip.
        :param reference: The reference of this Trip.
        :param stakeholders: The stakeholders of this Trip.
        :param start: The start of this Trip.
        :param title: The title of this Trip.
        :param travel_agency: The travel_agency of this Trip.
        :param type: The type of this Trip.
        """
        self.openapi_types = {
            'booking_date': str,
            'booking_number': str,
            'creation_date_time': str,
            'description': str,
            'end': End,
            'price': Price,
            'products': List[TripProductsInner],
            'provider': str,
            'reference': str,
            'stakeholders': List[Stakeholder],
            'start': Start,
            'title': str,
            'travel_agency': TravelAgency,
            'type': str
        }

        self.attribute_map = {
            'booking_date': 'bookingDate',
            'booking_number': 'bookingNumber',
            'creation_date_time': 'creationDateTime',
            'description': 'description',
            'end': 'end',
            'price': 'price',
            'products': 'products',
            'provider': 'provider',
            'reference': 'reference',
            'stakeholders': 'stakeholders',
            'start': 'start',
            'title': 'title',
            'travel_agency': 'travelAgency',
            'type': 'type'
        }

        self._booking_date = booking_date
        self._booking_number = booking_number
        self._creation_date_time = creation_date_time
        self._description = description
        self._end = end
        self._price = price
        self._products = products
        self._provider = provider
        self._reference = reference
        self._stakeholders = stakeholders
        self._start = start
        self._title = title
        self._travel_agency = travel_agency
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trip of this Trip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_date(self):
        """Gets the booking_date of this Trip.

        itinerary booking date

        :return: The booking_date of this Trip.
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this Trip.

        itinerary booking date

        :param booking_date: The booking_date of this Trip.
        :type booking_date: str
        """

        self._booking_date = booking_date

    @property
    def booking_number(self):
        """Gets the booking_number of this Trip.

        Ticket No(Specially for Air and Train segment)

        :return: The booking_number of this Trip.
        :rtype: str
        """
        return self._booking_number

    @booking_number.setter
    def booking_number(self, booking_number):
        """Sets the booking_number of this Trip.

        Ticket No(Specially for Air and Train segment)

        :param booking_number: The booking_number of this Trip.
        :type booking_number: str
        """

        self._booking_number = booking_number

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this Trip.

        Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00

        :return: The creation_date_time of this Trip.
        :rtype: str
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this Trip.

        Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00

        :param creation_date_time: The creation_date_time of this Trip.
        :type creation_date_time: str
        """

        self._creation_date_time = creation_date_time

    @property
    def description(self):
        """Gets the description of this Trip.

        Trip description

        :return: The description of this Trip.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Trip.

        Trip description

        :param description: The description of this Trip.
        :type description: str
        """
        if description is not None and len(description) > 140:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `140`")

        self._description = description

    @property
    def end(self):
        """Gets the end of this Trip.


        :return: The end of this Trip.
        :rtype: End
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Trip.


        :param end: The end of this Trip.
        :type end: End
        """

        self._end = end

    @property
    def price(self):
        """Gets the price of this Trip.


        :return: The price of this Trip.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trip.


        :param price: The price of this Trip.
        :type price: Price
        """

        self._price = price

    @property
    def products(self):
        """Gets the products of this Trip.


        :return: The products of this Trip.
        :rtype: List[TripProductsInner]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Trip.


        :param products: The products of this Trip.
        :type products: List[TripProductsInner]
        """

        self._products = products

    @property
    def provider(self):
        """Gets the provider of this Trip.

        information of the booking provider

        :return: The provider of this Trip.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Trip.

        information of the booking provider

        :param provider: The provider of this Trip.
        :type provider: str
        """
        if provider is not None and not re.search(r'[a-zA-Z0-9]{1-35}', provider):
            raise ValueError("Invalid value for `provider`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1-35}/`")

        self._provider = provider

    @property
    def reference(self):
        """Gets the reference of this Trip.

        Reference of the Trip

        :return: The reference of this Trip.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Trip.

        Reference of the Trip

        :param reference: The reference of this Trip.
        :type reference: str
        """
        if reference is not None and not re.search(r'[a-f0-9]{6,10}', reference):
            raise ValueError("Invalid value for `reference`, must be a follow pattern or equal to `/[a-f0-9]{6,10}/`")

        self._reference = reference

    @property
    def stakeholders(self):
        """Gets the stakeholders of this Trip.


        :return: The stakeholders of this Trip.
        :rtype: List[Stakeholder]
        """
        return self._stakeholders

    @stakeholders.setter
    def stakeholders(self, stakeholders):
        """Sets the stakeholders of this Trip.


        :param stakeholders: The stakeholders of this Trip.
        :type stakeholders: List[Stakeholder]
        """

        self._stakeholders = stakeholders

    @property
    def start(self):
        """Gets the start of this Trip.


        :return: The start of this Trip.
        :rtype: Start
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Trip.


        :param start: The start of this Trip.
        :type start: Start
        """

        self._start = start

    @property
    def title(self):
        """Gets the title of this Trip.

        Trip label or name

        :return: The title of this Trip.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Trip.

        Trip label or name

        :param title: The title of this Trip.
        :type title: str
        """
        if title is not None and len(title) > 128:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `128`")

        self._title = title

    @property
    def travel_agency(self):
        """Gets the travel_agency of this Trip.


        :return: The travel_agency of this Trip.
        :rtype: TravelAgency
        """
        return self._travel_agency

    @travel_agency.setter
    def travel_agency(self, travel_agency):
        """Sets the travel_agency of this Trip.


        :param travel_agency: The travel_agency of this Trip.
        :type travel_agency: TravelAgency
        """

        self._travel_agency = travel_agency

    @property
    def type(self):
        """Gets the type of this Trip.

        the resource name

        :return: The type of this Trip.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Trip.

        the resource name

        :param type: The type of this Trip.
        :type type: str
        """

        self._type = type
