# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_envelope_meta_data import DocumentEnvelopeMetaData
from openapi_server import util


class DocumentEnvelope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_data: DocumentEnvelopeMetaData=None, payload: str=None):
        """DocumentEnvelope - a model defined in OpenAPI

        :param meta_data: The meta_data of this DocumentEnvelope.
        :param payload: The payload of this DocumentEnvelope.
        """
        self.openapi_types = {
            'meta_data': DocumentEnvelopeMetaData,
            'payload': str
        }

        self.attribute_map = {
            'meta_data': 'metaData',
            'payload': 'payload'
        }

        self._meta_data = meta_data
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentEnvelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentEnvelope of this DocumentEnvelope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_data(self):
        """Gets the meta_data of this DocumentEnvelope.


        :return: The meta_data of this DocumentEnvelope.
        :rtype: DocumentEnvelopeMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this DocumentEnvelope.


        :param meta_data: The meta_data of this DocumentEnvelope.
        :type meta_data: DocumentEnvelopeMetaData
        """

        self._meta_data = meta_data

    @property
    def payload(self):
        """Gets the payload of this DocumentEnvelope.

        This contains the payload of the document. It can either be raw data or encoded data in b6se4. see details in metaData block.

        :return: The payload of this DocumentEnvelope.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this DocumentEnvelope.

        This contains the payload of the document. It can either be raw data or encoded data in b6se4. see details in metaData block.

        :param payload: The payload of this DocumentEnvelope.
        :type payload: str
        """

        self._payload = payload
