# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact_hotel import ContactHotel
from openapi_server.models.description import Description
from openapi_server.models.guests import Guests
from openapi_server.models.policies import Policies
from openapi_server.models.room import Room
from openapi_server import util


class HotelData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, amenities: List[str]=None, check_in_date: str=None, check_out_date: str=None, confirmation_number: str=None, contact: ContactHotel=None, description: Description=None, guests: Guests=None, name: str=None, policies: Policies=None, room: Room=None, room_quantity: int=None):
        """HotelData - a model defined in OpenAPI

        :param address: The address of this HotelData.
        :param amenities: The amenities of this HotelData.
        :param check_in_date: The check_in_date of this HotelData.
        :param check_out_date: The check_out_date of this HotelData.
        :param confirmation_number: The confirmation_number of this HotelData.
        :param contact: The contact of this HotelData.
        :param description: The description of this HotelData.
        :param guests: The guests of this HotelData.
        :param name: The name of this HotelData.
        :param policies: The policies of this HotelData.
        :param room: The room of this HotelData.
        :param room_quantity: The room_quantity of this HotelData.
        """
        self.openapi_types = {
            'address': Address,
            'amenities': List[str],
            'check_in_date': str,
            'check_out_date': str,
            'confirmation_number': str,
            'contact': ContactHotel,
            'description': Description,
            'guests': Guests,
            'name': str,
            'policies': Policies,
            'room': Room,
            'room_quantity': int
        }

        self.attribute_map = {
            'address': 'address',
            'amenities': 'amenities',
            'check_in_date': 'checkInDate',
            'check_out_date': 'checkOutDate',
            'confirmation_number': 'confirmationNumber',
            'contact': 'contact',
            'description': 'description',
            'guests': 'guests',
            'name': 'name',
            'policies': 'policies',
            'room': 'room',
            'room_quantity': 'roomQuantity'
        }

        self._address = address
        self._amenities = amenities
        self._check_in_date = check_in_date
        self._check_out_date = check_out_date
        self._confirmation_number = confirmation_number
        self._contact = contact
        self._description = description
        self._guests = guests
        self._name = name
        self._policies = policies
        self._room = room
        self._room_quantity = room_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hotelData of this HotelData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this HotelData.


        :return: The address of this HotelData.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this HotelData.


        :param address: The address of this HotelData.
        :type address: Address
        """

        self._address = address

    @property
    def amenities(self):
        """Gets the amenities of this HotelData.

        amenities (list)

        :return: The amenities of this HotelData.
        :rtype: List[str]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this HotelData.

        amenities (list)

        :param amenities: The amenities of this HotelData.
        :type amenities: List[str]
        """

        self._amenities = amenities

    @property
    def check_in_date(self):
        """Gets the check_in_date of this HotelData.

        heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).

        :return: The check_in_date of this HotelData.
        :rtype: str
        """
        return self._check_in_date

    @check_in_date.setter
    def check_in_date(self, check_in_date):
        """Sets the check_in_date of this HotelData.

        heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).

        :param check_in_date: The check_in_date of this HotelData.
        :type check_in_date: str
        """

        self._check_in_date = check_in_date

    @property
    def check_out_date(self):
        """Gets the check_out_date of this HotelData.

        check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.

        :return: The check_out_date of this HotelData.
        :rtype: str
        """
        return self._check_out_date

    @check_out_date.setter
    def check_out_date(self, check_out_date):
        """Sets the check_out_date of this HotelData.

        check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.

        :param check_out_date: The check_out_date of this HotelData.
        :type check_out_date: str
        """

        self._check_out_date = check_out_date

    @property
    def confirmation_number(self):
        """Gets the confirmation_number of this HotelData.

        Confirmation number

        :return: The confirmation_number of this HotelData.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """Sets the confirmation_number of this HotelData.

        Confirmation number

        :param confirmation_number: The confirmation_number of this HotelData.
        :type confirmation_number: str
        """
        if confirmation_number is not None and len(confirmation_number) > 20:
            raise ValueError("Invalid value for `confirmation_number`, length must be less than or equal to `20`")
        if confirmation_number is not None and len(confirmation_number) < 1:
            raise ValueError("Invalid value for `confirmation_number`, length must be greater than or equal to `1`")

        self._confirmation_number = confirmation_number

    @property
    def contact(self):
        """Gets the contact of this HotelData.


        :return: The contact of this HotelData.
        :rtype: ContactHotel
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this HotelData.


        :param contact: The contact of this HotelData.
        :type contact: ContactHotel
        """

        self._contact = contact

    @property
    def description(self):
        """Gets the description of this HotelData.


        :return: The description of this HotelData.
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HotelData.


        :param description: The description of this HotelData.
        :type description: Description
        """

        self._description = description

    @property
    def guests(self):
        """Gets the guests of this HotelData.


        :return: The guests of this HotelData.
        :rtype: Guests
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this HotelData.


        :param guests: The guests of this HotelData.
        :type guests: Guests
        """

        self._guests = guests

    @property
    def name(self):
        """Gets the name of this HotelData.

        Hotel Name

        :return: The name of this HotelData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HotelData.

        Hotel Name

        :param name: The name of this HotelData.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this HotelData.


        :return: The policies of this HotelData.
        :rtype: Policies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this HotelData.


        :param policies: The policies of this HotelData.
        :type policies: Policies
        """

        self._policies = policies

    @property
    def room(self):
        """Gets the room of this HotelData.


        :return: The room of this HotelData.
        :rtype: Room
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this HotelData.


        :param room: The room of this HotelData.
        :type room: Room
        """

        self._room = room

    @property
    def room_quantity(self):
        """Gets the room_quantity of this HotelData.

        number of rooms (1-9)

        :return: The room_quantity of this HotelData.
        :rtype: int
        """
        return self._room_quantity

    @room_quantity.setter
    def room_quantity(self, room_quantity):
        """Sets the room_quantity of this HotelData.

        number of rooms (1-9)

        :param room_quantity: The room_quantity of this HotelData.
        :type room_quantity: int
        """
        if room_quantity is not None and room_quantity < 1:
            raise ValueError("Invalid value for `room_quantity`, must be a value greater than or equal to `1`")

        self._room_quantity = room_quantity
