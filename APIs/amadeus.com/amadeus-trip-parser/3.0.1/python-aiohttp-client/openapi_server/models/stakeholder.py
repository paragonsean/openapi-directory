# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name import Name
from openapi_server import util


class Stakeholder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, date_of_birth: str=None, id: str=None, name: Name=None, nationality: str=None, passanger_type_code: str=None):
        """Stakeholder - a model defined in OpenAPI

        :param age: The age of this Stakeholder.
        :param date_of_birth: The date_of_birth of this Stakeholder.
        :param id: The id of this Stakeholder.
        :param name: The name of this Stakeholder.
        :param nationality: The nationality of this Stakeholder.
        :param passanger_type_code: The passanger_type_code of this Stakeholder.
        """
        self.openapi_types = {
            'age': int,
            'date_of_birth': str,
            'id': str,
            'name': Name,
            'nationality': str,
            'passanger_type_code': str
        }

        self.attribute_map = {
            'age': 'age',
            'date_of_birth': 'dateOfBirth',
            'id': 'id',
            'name': 'name',
            'nationality': 'nationality',
            'passanger_type_code': 'passangerTypeCode'
        }

        self._age = age
        self._date_of_birth = date_of_birth
        self._id = id
        self._name = name
        self._nationality = nationality
        self._passanger_type_code = passanger_type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stakeholder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stakeholder of this Stakeholder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this Stakeholder.

        Current age of the individual.

        :return: The age of this Stakeholder.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Stakeholder.

        Current age of the individual.

        :param age: The age of this Stakeholder.
        :type age: int
        """

        self._age = age

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Stakeholder.

        The individual's date of birth.

        :return: The date_of_birth of this Stakeholder.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Stakeholder.

        The individual's date of birth.

        :param date_of_birth: The date_of_birth of this Stakeholder.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def id(self):
        """Gets the id of this Stakeholder.

        item identifier

        :return: The id of this Stakeholder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stakeholder.

        item identifier

        :param id: The id of this Stakeholder.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Stakeholder.


        :return: The name of this Stakeholder.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stakeholder.


        :param name: The name of this Stakeholder.
        :type name: Name
        """

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this Stakeholder.

        Nationality of the Stakeholder

        :return: The nationality of this Stakeholder.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Stakeholder.

        Nationality of the Stakeholder

        :param nationality: The nationality of this Stakeholder.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def passanger_type_code(self):
        """Gets the passanger_type_code of this Stakeholder.

        3-characters code defining the passenger type - possible values: ADT, CHD, INS, INF, UNA

        :return: The passanger_type_code of this Stakeholder.
        :rtype: str
        """
        return self._passanger_type_code

    @passanger_type_code.setter
    def passanger_type_code(self, passanger_type_code):
        """Sets the passanger_type_code of this Stakeholder.

        3-characters code defining the passenger type - possible values: ADT, CHD, INS, INF, UNA

        :param passanger_type_code: The passanger_type_code of this Stakeholder.
        :type passanger_type_code: str
        """
        if passanger_type_code is not None and len(passanger_type_code) > 3:
            raise ValueError("Invalid value for `passanger_type_code`, length must be less than or equal to `3`")

        self._passanger_type_code = passanger_type_code
