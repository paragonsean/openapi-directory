# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Vehicle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, display_name: str=None, number: str=None, vehicle_type: str=None):
        """Vehicle - a model defined in OpenAPI

        :param code: The code of this Vehicle.
        :param display_name: The display_name of this Vehicle.
        :param number: The number of this Vehicle.
        :param vehicle_type: The vehicle_type of this Vehicle.
        """
        self.openapi_types = {
            'code': str,
            'display_name': str,
            'number': str,
            'vehicle_type': str
        }

        self.attribute_map = {
            'code': 'code',
            'display_name': 'displayName',
            'number': 'number',
            'vehicle_type': 'vehicleType'
        }

        self._code = code
        self._display_name = display_name
        self._number = number
        self._vehicle_type = vehicle_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vehicle of this Vehicle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Vehicle.


        :return: The code of this Vehicle.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Vehicle.


        :param code: The code of this Vehicle.
        :type code: str
        """

        self._code = code

    @property
    def display_name(self):
        """Gets the display_name of this Vehicle.


        :return: The display_name of this Vehicle.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Vehicle.


        :param display_name: The display_name of this Vehicle.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def number(self):
        """Gets the number of this Vehicle.


        :return: The number of this Vehicle.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Vehicle.


        :param number: The number of this Vehicle.
        :type number: str
        """

        self._number = number

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this Vehicle.

        Code (codelist TVT) for the generic transport service returned, e.g. High speed, Intercities, Night and so on

        :return: The vehicle_type of this Vehicle.
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this Vehicle.

        Code (codelist TVT) for the generic transport service returned, e.g. High speed, Intercities, Night and so on

        :param vehicle_type: The vehicle_type of this Vehicle.
        :type vehicle_type: str
        """

        self._vehicle_type = vehicle_type
