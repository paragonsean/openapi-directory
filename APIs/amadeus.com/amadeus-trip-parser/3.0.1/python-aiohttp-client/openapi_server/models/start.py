# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Start(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, iata_code: str=None, local_date_time: str=None, name: str=None):
        """Start - a model defined in OpenAPI

        :param address: The address of this Start.
        :param iata_code: The iata_code of this Start.
        :param local_date_time: The local_date_time of this Start.
        :param name: The name of this Start.
        """
        self.openapi_types = {
            'address': Address,
            'iata_code': str,
            'local_date_time': str,
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'iata_code': 'iataCode',
            'local_date_time': 'localDateTime',
            'name': 'name'
        }

        self._address = address
        self._iata_code = iata_code
        self._local_date_time = local_date_time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Start':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The start of this Start.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Start.


        :return: The address of this Start.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Start.


        :param address: The address of this Start.
        :type address: Address
        """

        self._address = address

    @property
    def iata_code(self):
        """Gets the iata_code of this Start.

        IATA location code

        :return: The iata_code of this Start.
        :rtype: str
        """
        return self._iata_code

    @iata_code.setter
    def iata_code(self, iata_code):
        """Sets the iata_code of this Start.

        IATA location code

        :param iata_code: The iata_code of this Start.
        :type iata_code: str
        """

        self._iata_code = iata_code

    @property
    def local_date_time(self):
        """Gets the local_date_time of this Start.

        Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)

        :return: The local_date_time of this Start.
        :rtype: str
        """
        return self._local_date_time

    @local_date_time.setter
    def local_date_time(self, local_date_time):
        """Sets the local_date_time of this Start.

        Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)

        :param local_date_time: The local_date_time of this Start.
        :type local_date_time: str
        """

        self._local_date_time = local_date_time

    @property
    def name(self):
        """Gets the name of this Start.

        Label associated to the location (e.g. Eiffel Tower, Madison Square)

        :return: The name of this Start.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Start.

        Label associated to the location (e.g. Eiffel Tower, Madison Square)

        :param name: The name of this Start.
        :type name: str
        """

        self._name = name
