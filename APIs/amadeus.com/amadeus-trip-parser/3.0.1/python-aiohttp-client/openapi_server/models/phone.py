# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, country_code: str=None, number: str=None):
        """Phone - a model defined in OpenAPI

        :param category: The category of this Phone.
        :param country_code: The country_code of this Phone.
        :param number: The number of this Phone.
        """
        self.openapi_types = {
            'category': str,
            'country_code': str,
            'number': str
        }

        self.attribute_map = {
            'category': 'category',
            'country_code': 'countryCode',
            'number': 'number'
        }

        self._category = category
        self._country_code = country_code
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Phone.

        Category of the contact element

        :return: The category of this Phone.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Phone.

        Category of the contact element

        :param category: The category of this Phone.
        :type category: str
        """
        allowed_values = ["BUSINESS", "PERSONAL", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def country_code(self):
        """Gets the country_code of this Phone.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :return: The country_code of this Phone.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Phone.

        Country code of the country (ISO3166-1). E.g. \"US\" for the United States

        :param country_code: The country_code of this Phone.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def number(self):
        """Gets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :return: The number of this Phone.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Phone.

        Phone number. Composed of digits only. The number of digits depends on the country.

        :param number: The number of this Phone.
        :type number: str
        """
        if number is not None and not re.search(r'{0-9]{1,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/{0-9]{1,15}/`")

        self._number = number
