# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Name(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, middle_name: str=None, prefix: str=None, suffix: str=None, title: str=None):
        """Name - a model defined in OpenAPI

        :param first_name: The first_name of this Name.
        :param last_name: The last_name of this Name.
        :param middle_name: The middle_name of this Name.
        :param prefix: The prefix of this Name.
        :param suffix: The suffix of this Name.
        :param title: The title of this Name.
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'middle_name': str,
            'prefix': str,
            'suffix': str,
            'title': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'prefix': 'prefix',
            'suffix': 'suffix',
            'title': 'title'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._middle_name = middle_name
        self._prefix = prefix
        self._suffix = suffix
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Name':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The name of this Name.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this Name.

        First name.

        :return: The first_name of this Name.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Name.

        First name.

        :param first_name: The first_name of this Name.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Name.

        Last name.

        :return: The last_name of this Name.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Name.

        Last name.

        :param last_name: The last_name of this Name.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Name.

        Middle name(s), for example \"Lee\" in \"John Lee Smith\".

        :return: The middle_name of this Name.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Name.

        Middle name(s), for example \"Lee\" in \"John Lee Smith\".

        :param middle_name: The middle_name of this Name.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def prefix(self):
        """Gets the prefix of this Name.

        Name prefix (e.g. Doctor)

        :return: The prefix of this Name.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Name.

        Name prefix (e.g. Doctor)

        :param prefix: The prefix of this Name.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this Name.

        Name suffix (e.g. Junior, III, etc).

        :return: The suffix of this Name.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Name.

        Name suffix (e.g. Junior, III, etc).

        :param suffix: The suffix of this Name.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def title(self):
        """Gets the title of this Name.

        Contains all the suffixes and prefixes that can be appended to a name - Mr, Miss, Pr. - E.g. \" Mr\".

        :return: The title of this Name.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Name.

        Contains all the suffixes and prefixes that can be appended to a name - Mr, Miss, Pr. - E.g. \" Mr\".

        :param title: The title of this Name.
        :type title: str
        """

        self._title = title
