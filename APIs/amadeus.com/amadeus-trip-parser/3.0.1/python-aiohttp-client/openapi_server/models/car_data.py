# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associated_equipments import AssociatedEquipments
from openapi_server.models.car_vehicle import CarVehicle
from openapi_server.models.driver import Driver
from openapi_server.models.dropoff import Dropoff
from openapi_server.models.pickup import Pickup
import re
from openapi_server import util


class CarData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_equipments: List[AssociatedEquipments]=None, confirmation_number: str=None, driver: Driver=None, dropoff: Dropoff=None, pickup: Pickup=None, service_provider_name: str=None, vehicle: CarVehicle=None):
        """CarData - a model defined in OpenAPI

        :param associated_equipments: The associated_equipments of this CarData.
        :param confirmation_number: The confirmation_number of this CarData.
        :param driver: The driver of this CarData.
        :param dropoff: The dropoff of this CarData.
        :param pickup: The pickup of this CarData.
        :param service_provider_name: The service_provider_name of this CarData.
        :param vehicle: The vehicle of this CarData.
        """
        self.openapi_types = {
            'associated_equipments': List[AssociatedEquipments],
            'confirmation_number': str,
            'driver': Driver,
            'dropoff': Dropoff,
            'pickup': Pickup,
            'service_provider_name': str,
            'vehicle': CarVehicle
        }

        self.attribute_map = {
            'associated_equipments': 'associatedEquipments',
            'confirmation_number': 'confirmationNumber',
            'driver': 'driver',
            'dropoff': 'dropoff',
            'pickup': 'pickup',
            'service_provider_name': 'serviceProviderName',
            'vehicle': 'vehicle'
        }

        self._associated_equipments = associated_equipments
        self._confirmation_number = confirmation_number
        self._driver = driver
        self._dropoff = dropoff
        self._pickup = pickup
        self._service_provider_name = service_provider_name
        self._vehicle = vehicle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The carData of this CarData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_equipments(self):
        """Gets the associated_equipments of this CarData.


        :return: The associated_equipments of this CarData.
        :rtype: List[AssociatedEquipments]
        """
        return self._associated_equipments

    @associated_equipments.setter
    def associated_equipments(self, associated_equipments):
        """Sets the associated_equipments of this CarData.


        :param associated_equipments: The associated_equipments of this CarData.
        :type associated_equipments: List[AssociatedEquipments]
        """

        self._associated_equipments = associated_equipments

    @property
    def confirmation_number(self):
        """Gets the confirmation_number of this CarData.

        Confirmation number

        :return: The confirmation_number of this CarData.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """Sets the confirmation_number of this CarData.

        Confirmation number

        :param confirmation_number: The confirmation_number of this CarData.
        :type confirmation_number: str
        """
        if confirmation_number is not None and not re.search(r'[a-zA-Z0-9]{1-20}', confirmation_number):
            raise ValueError("Invalid value for `confirmation_number`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1-20}/`")

        self._confirmation_number = confirmation_number

    @property
    def driver(self):
        """Gets the driver of this CarData.


        :return: The driver of this CarData.
        :rtype: Driver
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this CarData.


        :param driver: The driver of this CarData.
        :type driver: Driver
        """

        self._driver = driver

    @property
    def dropoff(self):
        """Gets the dropoff of this CarData.


        :return: The dropoff of this CarData.
        :rtype: Dropoff
        """
        return self._dropoff

    @dropoff.setter
    def dropoff(self, dropoff):
        """Sets the dropoff of this CarData.


        :param dropoff: The dropoff of this CarData.
        :type dropoff: Dropoff
        """

        self._dropoff = dropoff

    @property
    def pickup(self):
        """Gets the pickup of this CarData.


        :return: The pickup of this CarData.
        :rtype: Pickup
        """
        return self._pickup

    @pickup.setter
    def pickup(self, pickup):
        """Sets the pickup of this CarData.


        :param pickup: The pickup of this CarData.
        :type pickup: Pickup
        """

        self._pickup = pickup

    @property
    def service_provider_name(self):
        """Gets the service_provider_name of this CarData.

        car provider information(Car rental compay name)

        :return: The service_provider_name of this CarData.
        :rtype: str
        """
        return self._service_provider_name

    @service_provider_name.setter
    def service_provider_name(self, service_provider_name):
        """Sets the service_provider_name of this CarData.

        car provider information(Car rental compay name)

        :param service_provider_name: The service_provider_name of this CarData.
        :type service_provider_name: str
        """
        if service_provider_name is not None and len(service_provider_name) > 70:
            raise ValueError("Invalid value for `service_provider_name`, length must be less than or equal to `70`")

        self._service_provider_name = service_provider_name

    @property
    def vehicle(self):
        """Gets the vehicle of this CarData.


        :return: The vehicle of this CarData.
        :rtype: CarVehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this CarData.


        :param vehicle: The vehicle of this CarData.
        :type vehicle: CarVehicle
        """

        self._vehicle = vehicle
