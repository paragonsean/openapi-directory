# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Guests(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: int=None, child_age: List[int]=None):
        """Guests - a model defined in OpenAPI

        :param adults: The adults of this Guests.
        :param child_age: The child_age of this Guests.
        """
        self.openapi_types = {
            'adults': int,
            'child_age': List[int]
        }

        self.attribute_map = {
            'adults': 'adults',
            'child_age': 'childAge'
        }

        self._adults = adults
        self._child_age = child_age

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Guests':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The guests of this Guests.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this Guests.

        number of adult guests (1-9) per room

        :return: The adults of this Guests.
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this Guests.

        number of adult guests (1-9) per room

        :param adults: The adults of this Guests.
        :type adults: int
        """
        if adults is not None and adults < 1:
            raise ValueError("Invalid value for `adults`, must be a value greater than or equal to `1`")

        self._adults = adults

    @property
    def child_age(self):
        """Gets the child_age of this Guests.

        Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.

        :return: The child_age of this Guests.
        :rtype: List[int]
        """
        return self._child_age

    @child_age.setter
    def child_age(self, child_age):
        """Sets the child_age of this Guests.

        Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.

        :param child_age: The child_age of this Guests.
        :type child_age: List[int]
        """

        self._child_age = child_age
