# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, category: str=None):
        """Email - a model defined in OpenAPI

        :param address: The address of this Email.
        :param category: The category of this Email.
        """
        self.openapi_types = {
            'address': str,
            'category': str
        }

        self.attribute_map = {
            'address': 'address',
            'category': 'category'
        }

        self._address = address
        self._category = category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Email.

        Email address (e.g. john@smith.com)

        :return: The address of this Email.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Email.

        Email address (e.g. john@smith.com)

        :param address: The address of this Email.
        :type address: str
        """

        self._address = address

    @property
    def category(self):
        """Gets the category of this Email.

        Category of the contact element

        :return: The category of this Email.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Email.

        Category of the contact element

        :param category: The category of this Email.
        :type category: str
        """
        allowed_values = ["BUSINESS", "PERSONAL", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category
