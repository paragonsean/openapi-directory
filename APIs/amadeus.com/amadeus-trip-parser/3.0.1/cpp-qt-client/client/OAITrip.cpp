/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrip::OAITrip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrip::OAITrip() {
    this->initializeModel();
}

OAITrip::~OAITrip() {}

void OAITrip::initializeModel() {

    m_booking_date_isSet = false;
    m_booking_date_isValid = false;

    m_booking_number_isSet = false;
    m_booking_number_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_stakeholders_isSet = false;
    m_stakeholders_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_travel_agency_isSet = false;
    m_travel_agency_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITrip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrip::fromJsonObject(QJsonObject json) {

    m_booking_date_isValid = ::OpenAPI::fromJsonValue(m_booking_date, json[QString("bookingDate")]);
    m_booking_date_isSet = !json[QString("bookingDate")].isNull() && m_booking_date_isValid;

    m_booking_number_isValid = ::OpenAPI::fromJsonValue(m_booking_number, json[QString("bookingNumber")]);
    m_booking_number_isSet = !json[QString("bookingNumber")].isNull() && m_booking_number_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_stakeholders_isValid = ::OpenAPI::fromJsonValue(m_stakeholders, json[QString("stakeholders")]);
    m_stakeholders_isSet = !json[QString("stakeholders")].isNull() && m_stakeholders_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_travel_agency_isValid = ::OpenAPI::fromJsonValue(m_travel_agency, json[QString("travelAgency")]);
    m_travel_agency_isSet = !json[QString("travelAgency")].isNull() && m_travel_agency_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITrip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrip::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_date_isSet) {
        obj.insert(QString("bookingDate"), ::OpenAPI::toJsonValue(m_booking_date));
    }
    if (m_booking_number_isSet) {
        obj.insert(QString("bookingNumber"), ::OpenAPI::toJsonValue(m_booking_number));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end.isSet()) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_stakeholders.size() > 0) {
        obj.insert(QString("stakeholders"), ::OpenAPI::toJsonValue(m_stakeholders));
    }
    if (m_start.isSet()) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_travel_agency.isSet()) {
        obj.insert(QString("travelAgency"), ::OpenAPI::toJsonValue(m_travel_agency));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITrip::getBookingDate() const {
    return m_booking_date;
}
void OAITrip::setBookingDate(const QString &booking_date) {
    m_booking_date = booking_date;
    m_booking_date_isSet = true;
}

bool OAITrip::is_booking_date_Set() const{
    return m_booking_date_isSet;
}

bool OAITrip::is_booking_date_Valid() const{
    return m_booking_date_isValid;
}

QString OAITrip::getBookingNumber() const {
    return m_booking_number;
}
void OAITrip::setBookingNumber(const QString &booking_number) {
    m_booking_number = booking_number;
    m_booking_number_isSet = true;
}

bool OAITrip::is_booking_number_Set() const{
    return m_booking_number_isSet;
}

bool OAITrip::is_booking_number_Valid() const{
    return m_booking_number_isValid;
}

QString OAITrip::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAITrip::setCreationDateTime(const QString &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAITrip::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAITrip::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QString OAITrip::getDescription() const {
    return m_description;
}
void OAITrip::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITrip::is_description_Set() const{
    return m_description_isSet;
}

bool OAITrip::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnd OAITrip::getEnd() const {
    return m_end;
}
void OAITrip::setEnd(const OAIEnd &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAITrip::is_end_Set() const{
    return m_end_isSet;
}

bool OAITrip::is_end_Valid() const{
    return m_end_isValid;
}

OAIPrice OAITrip::getPrice() const {
    return m_price;
}
void OAITrip::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITrip::is_price_Set() const{
    return m_price_isSet;
}

bool OAITrip::is_price_Valid() const{
    return m_price_isValid;
}

QList<OAITrip_products_inner> OAITrip::getProducts() const {
    return m_products;
}
void OAITrip::setProducts(const QList<OAITrip_products_inner> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAITrip::is_products_Set() const{
    return m_products_isSet;
}

bool OAITrip::is_products_Valid() const{
    return m_products_isValid;
}

QString OAITrip::getProvider() const {
    return m_provider;
}
void OAITrip::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAITrip::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAITrip::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAITrip::getReference() const {
    return m_reference;
}
void OAITrip::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITrip::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITrip::is_reference_Valid() const{
    return m_reference_isValid;
}

QList<OAIStakeholder> OAITrip::getStakeholders() const {
    return m_stakeholders;
}
void OAITrip::setStakeholders(const QList<OAIStakeholder> &stakeholders) {
    m_stakeholders = stakeholders;
    m_stakeholders_isSet = true;
}

bool OAITrip::is_stakeholders_Set() const{
    return m_stakeholders_isSet;
}

bool OAITrip::is_stakeholders_Valid() const{
    return m_stakeholders_isValid;
}

OAIStart OAITrip::getStart() const {
    return m_start;
}
void OAITrip::setStart(const OAIStart &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITrip::is_start_Set() const{
    return m_start_isSet;
}

bool OAITrip::is_start_Valid() const{
    return m_start_isValid;
}

QString OAITrip::getTitle() const {
    return m_title;
}
void OAITrip::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITrip::is_title_Set() const{
    return m_title_isSet;
}

bool OAITrip::is_title_Valid() const{
    return m_title_isValid;
}

OAITravelAgency OAITrip::getTravelAgency() const {
    return m_travel_agency;
}
void OAITrip::setTravelAgency(const OAITravelAgency &travel_agency) {
    m_travel_agency = travel_agency;
    m_travel_agency_isSet = true;
}

bool OAITrip::is_travel_agency_Set() const{
    return m_travel_agency_isSet;
}

bool OAITrip::is_travel_agency_Valid() const{
    return m_travel_agency_isValid;
}

QString OAITrip::getType() const {
    return m_type;
}
void OAITrip::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrip::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrip::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITrip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stakeholders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_agency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
