/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainData::OAITrainData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainData::OAITrainData() {
    this->initializeModel();
}

OAITrainData::~OAITrainData() {}

void OAITrainData::initializeModel() {

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_arrival_date_time_isSet = false;
    m_arrival_date_time_isValid = false;

    m_arrival_track_isSet = false;
    m_arrival_track_isValid = false;

    m_booking_class_isSet = false;
    m_booking_class_isValid = false;

    m_confirm_nbr_isSet = false;
    m_confirm_nbr_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_departure_date_time_isSet = false;
    m_departure_date_time_isValid = false;

    m_departure_track_isSet = false;
    m_departure_track_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;

    m_vehicle_isSet = false;
    m_vehicle_isValid = false;
}

void OAITrainData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainData::fromJsonObject(QJsonObject json) {

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_arrival_date_time_isValid = ::OpenAPI::fromJsonValue(m_arrival_date_time, json[QString("arrivalDateTime")]);
    m_arrival_date_time_isSet = !json[QString("arrivalDateTime")].isNull() && m_arrival_date_time_isValid;

    m_arrival_track_isValid = ::OpenAPI::fromJsonValue(m_arrival_track, json[QString("arrivalTrack")]);
    m_arrival_track_isSet = !json[QString("arrivalTrack")].isNull() && m_arrival_track_isValid;

    m_booking_class_isValid = ::OpenAPI::fromJsonValue(m_booking_class, json[QString("bookingClass")]);
    m_booking_class_isSet = !json[QString("bookingClass")].isNull() && m_booking_class_isValid;

    m_confirm_nbr_isValid = ::OpenAPI::fromJsonValue(m_confirm_nbr, json[QString("confirmNbr")]);
    m_confirm_nbr_isSet = !json[QString("confirmNbr")].isNull() && m_confirm_nbr_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_departure_date_time_isValid = ::OpenAPI::fromJsonValue(m_departure_date_time, json[QString("departureDateTime")]);
    m_departure_date_time_isSet = !json[QString("departureDateTime")].isNull() && m_departure_date_time_isValid;

    m_departure_track_isValid = ::OpenAPI::fromJsonValue(m_departure_track, json[QString("departureTrack")]);
    m_departure_track_isSet = !json[QString("departureTrack")].isNull() && m_departure_track_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("serviceProviderName")]);
    m_service_provider_name_isSet = !json[QString("serviceProviderName")].isNull() && m_service_provider_name_isValid;

    m_vehicle_isValid = ::OpenAPI::fromJsonValue(m_vehicle, json[QString("vehicle")]);
    m_vehicle_isSet = !json[QString("vehicle")].isNull() && m_vehicle_isValid;
}

QString OAITrainData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainData::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival.isSet()) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_arrival_date_time_isSet) {
        obj.insert(QString("arrivalDateTime"), ::OpenAPI::toJsonValue(m_arrival_date_time));
    }
    if (m_arrival_track_isSet) {
        obj.insert(QString("arrivalTrack"), ::OpenAPI::toJsonValue(m_arrival_track));
    }
    if (m_booking_class_isSet) {
        obj.insert(QString("bookingClass"), ::OpenAPI::toJsonValue(m_booking_class));
    }
    if (m_confirm_nbr_isSet) {
        obj.insert(QString("confirmNbr"), ::OpenAPI::toJsonValue(m_confirm_nbr));
    }
    if (m_departure.isSet()) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_departure_date_time_isSet) {
        obj.insert(QString("departureDateTime"), ::OpenAPI::toJsonValue(m_departure_date_time));
    }
    if (m_departure_track_isSet) {
        obj.insert(QString("departureTrack"), ::OpenAPI::toJsonValue(m_departure_track));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_seats.size() > 0) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("serviceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    if (m_vehicle.isSet()) {
        obj.insert(QString("vehicle"), ::OpenAPI::toJsonValue(m_vehicle));
    }
    return obj;
}

OAIArrival OAITrainData::getArrival() const {
    return m_arrival;
}
void OAITrainData::setArrival(const OAIArrival &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAITrainData::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAITrainData::is_arrival_Valid() const{
    return m_arrival_isValid;
}

QString OAITrainData::getArrivalDateTime() const {
    return m_arrival_date_time;
}
void OAITrainData::setArrivalDateTime(const QString &arrival_date_time) {
    m_arrival_date_time = arrival_date_time;
    m_arrival_date_time_isSet = true;
}

bool OAITrainData::is_arrival_date_time_Set() const{
    return m_arrival_date_time_isSet;
}

bool OAITrainData::is_arrival_date_time_Valid() const{
    return m_arrival_date_time_isValid;
}

QString OAITrainData::getArrivalTrack() const {
    return m_arrival_track;
}
void OAITrainData::setArrivalTrack(const QString &arrival_track) {
    m_arrival_track = arrival_track;
    m_arrival_track_isSet = true;
}

bool OAITrainData::is_arrival_track_Set() const{
    return m_arrival_track_isSet;
}

bool OAITrainData::is_arrival_track_Valid() const{
    return m_arrival_track_isValid;
}

QString OAITrainData::getBookingClass() const {
    return m_booking_class;
}
void OAITrainData::setBookingClass(const QString &booking_class) {
    m_booking_class = booking_class;
    m_booking_class_isSet = true;
}

bool OAITrainData::is_booking_class_Set() const{
    return m_booking_class_isSet;
}

bool OAITrainData::is_booking_class_Valid() const{
    return m_booking_class_isValid;
}

QString OAITrainData::getConfirmNbr() const {
    return m_confirm_nbr;
}
void OAITrainData::setConfirmNbr(const QString &confirm_nbr) {
    m_confirm_nbr = confirm_nbr;
    m_confirm_nbr_isSet = true;
}

bool OAITrainData::is_confirm_nbr_Set() const{
    return m_confirm_nbr_isSet;
}

bool OAITrainData::is_confirm_nbr_Valid() const{
    return m_confirm_nbr_isValid;
}

OAIDeparture OAITrainData::getDeparture() const {
    return m_departure;
}
void OAITrainData::setDeparture(const OAIDeparture &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAITrainData::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAITrainData::is_departure_Valid() const{
    return m_departure_isValid;
}

QString OAITrainData::getDepartureDateTime() const {
    return m_departure_date_time;
}
void OAITrainData::setDepartureDateTime(const QString &departure_date_time) {
    m_departure_date_time = departure_date_time;
    m_departure_date_time_isSet = true;
}

bool OAITrainData::is_departure_date_time_Set() const{
    return m_departure_date_time_isSet;
}

bool OAITrainData::is_departure_date_time_Valid() const{
    return m_departure_date_time_isValid;
}

QString OAITrainData::getDepartureTrack() const {
    return m_departure_track;
}
void OAITrainData::setDepartureTrack(const QString &departure_track) {
    m_departure_track = departure_track;
    m_departure_track_isSet = true;
}

bool OAITrainData::is_departure_track_Set() const{
    return m_departure_track_isSet;
}

bool OAITrainData::is_departure_track_Valid() const{
    return m_departure_track_isValid;
}

QString OAITrainData::getDuration() const {
    return m_duration;
}
void OAITrainData::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITrainData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITrainData::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAISeats> OAITrainData::getSeats() const {
    return m_seats;
}
void OAITrainData::setSeats(const QList<OAISeats> &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAITrainData::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAITrainData::is_seats_Valid() const{
    return m_seats_isValid;
}

QString OAITrainData::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAITrainData::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAITrainData::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAITrainData::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

OAIVehicle OAITrainData::getVehicle() const {
    return m_vehicle;
}
void OAITrainData::setVehicle(const OAIVehicle &vehicle) {
    m_vehicle = vehicle;
    m_vehicle_isSet = true;
}

bool OAITrainData::is_vehicle_Set() const{
    return m_vehicle_isSet;
}

bool OAITrainData::is_vehicle_Valid() const{
    return m_vehicle_isValid;
}

bool OAITrainData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirm_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
