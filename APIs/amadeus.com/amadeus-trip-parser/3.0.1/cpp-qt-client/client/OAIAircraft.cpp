/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAircraft.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAircraft::OAIAircraft(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAircraft::OAIAircraft() {
    this->initializeModel();
}

OAIAircraft::~OAIAircraft() {}

void OAIAircraft::initializeModel() {

    m_aircraft_description_isSet = false;
    m_aircraft_description_isValid = false;

    m_aircraft_type_isSet = false;
    m_aircraft_type_isValid = false;
}

void OAIAircraft::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAircraft::fromJsonObject(QJsonObject json) {

    m_aircraft_description_isValid = ::OpenAPI::fromJsonValue(m_aircraft_description, json[QString("aircraftDescription")]);
    m_aircraft_description_isSet = !json[QString("aircraftDescription")].isNull() && m_aircraft_description_isValid;

    m_aircraft_type_isValid = ::OpenAPI::fromJsonValue(m_aircraft_type, json[QString("aircraftType")]);
    m_aircraft_type_isSet = !json[QString("aircraftType")].isNull() && m_aircraft_type_isValid;
}

QString OAIAircraft::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAircraft::asJsonObject() const {
    QJsonObject obj;
    if (m_aircraft_description_isSet) {
        obj.insert(QString("aircraftDescription"), ::OpenAPI::toJsonValue(m_aircraft_description));
    }
    if (m_aircraft_type_isSet) {
        obj.insert(QString("aircraftType"), ::OpenAPI::toJsonValue(m_aircraft_type));
    }
    return obj;
}

QString OAIAircraft::getAircraftDescription() const {
    return m_aircraft_description;
}
void OAIAircraft::setAircraftDescription(const QString &aircraft_description) {
    m_aircraft_description = aircraft_description;
    m_aircraft_description_isSet = true;
}

bool OAIAircraft::is_aircraft_description_Set() const{
    return m_aircraft_description_isSet;
}

bool OAIAircraft::is_aircraft_description_Valid() const{
    return m_aircraft_description_isValid;
}

QString OAIAircraft::getAircraftType() const {
    return m_aircraft_type;
}
void OAIAircraft::setAircraftType(const QString &aircraft_type) {
    m_aircraft_type = aircraft_type;
    m_aircraft_type_isSet = true;
}

bool OAIAircraft::is_aircraft_type_Set() const{
    return m_aircraft_type_isSet;
}

bool OAIAircraft::is_aircraft_type_Valid() const{
    return m_aircraft_type_isValid;
}

bool OAIAircraft::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aircraft_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aircraft_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAircraft::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
