/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStakeholder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStakeholder::OAIStakeholder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStakeholder::OAIStakeholder() {
    this->initializeModel();
}

OAIStakeholder::~OAIStakeholder() {}

void OAIStakeholder::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_passanger_type_code_isSet = false;
    m_passanger_type_code_isValid = false;
}

void OAIStakeholder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStakeholder::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_passanger_type_code_isValid = ::OpenAPI::fromJsonValue(m_passanger_type_code, json[QString("passangerTypeCode")]);
    m_passanger_type_code_isSet = !json[QString("passangerTypeCode")].isNull() && m_passanger_type_code_isValid;
}

QString OAIStakeholder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStakeholder::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_passanger_type_code_isSet) {
        obj.insert(QString("passangerTypeCode"), ::OpenAPI::toJsonValue(m_passanger_type_code));
    }
    return obj;
}

qint32 OAIStakeholder::getAge() const {
    return m_age;
}
void OAIStakeholder::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIStakeholder::is_age_Set() const{
    return m_age_isSet;
}

bool OAIStakeholder::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIStakeholder::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIStakeholder::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIStakeholder::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIStakeholder::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIStakeholder::getId() const {
    return m_id;
}
void OAIStakeholder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStakeholder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStakeholder::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAIStakeholder::getName() const {
    return m_name;
}
void OAIStakeholder::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStakeholder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStakeholder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStakeholder::getNationality() const {
    return m_nationality;
}
void OAIStakeholder::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIStakeholder::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIStakeholder::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIStakeholder::getPassangerTypeCode() const {
    return m_passanger_type_code;
}
void OAIStakeholder::setPassangerTypeCode(const QString &passanger_type_code) {
    m_passanger_type_code = passanger_type_code;
    m_passanger_type_code_isSet = true;
}

bool OAIStakeholder::is_passanger_type_code_Set() const{
    return m_passanger_type_code_isSet;
}

bool OAIStakeholder::is_passanger_type_code_Valid() const{
    return m_passanger_type_code_isValid;
}

bool OAIStakeholder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passanger_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStakeholder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
