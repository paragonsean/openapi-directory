/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnd::OAIEnd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnd::OAIEnd() {
    this->initializeModel();
}

OAIEnd::~OAIEnd() {}

void OAIEnd::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_local_date_time_isSet = false;
    m_local_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIEnd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnd::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_local_date_time_isValid = ::OpenAPI::fromJsonValue(m_local_date_time, json[QString("localDateTime")]);
    m_local_date_time_isSet = !json[QString("localDateTime")].isNull() && m_local_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIEnd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnd::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_local_date_time_isSet) {
        obj.insert(QString("localDateTime"), ::OpenAPI::toJsonValue(m_local_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIAddress OAIEnd::getAddress() const {
    return m_address;
}
void OAIEnd::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEnd::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEnd::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEnd::getIataCode() const {
    return m_iata_code;
}
void OAIEnd::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIEnd::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIEnd::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIEnd::getLocalDateTime() const {
    return m_local_date_time;
}
void OAIEnd::setLocalDateTime(const QString &local_date_time) {
    m_local_date_time = local_date_time;
    m_local_date_time_isSet = true;
}

bool OAIEnd::is_local_date_time_Set() const{
    return m_local_date_time_isSet;
}

bool OAIEnd::is_local_date_time_Valid() const{
    return m_local_date_time_isValid;
}

QString OAIEnd::getName() const {
    return m_name;
}
void OAIEnd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnd::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEnd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
