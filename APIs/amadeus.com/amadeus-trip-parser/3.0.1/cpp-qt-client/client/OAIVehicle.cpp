/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicle::OAIVehicle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicle::OAIVehicle() {
    this->initializeModel();
}

OAIVehicle::~OAIVehicle() {}

void OAIVehicle::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_vehicle_type_isSet = false;
    m_vehicle_type_isValid = false;
}

void OAIVehicle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicle::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_vehicle_type_isValid = ::OpenAPI::fromJsonValue(m_vehicle_type, json[QString("vehicleType")]);
    m_vehicle_type_isSet = !json[QString("vehicleType")].isNull() && m_vehicle_type_isValid;
}

QString OAIVehicle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicle::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_vehicle_type_isSet) {
        obj.insert(QString("vehicleType"), ::OpenAPI::toJsonValue(m_vehicle_type));
    }
    return obj;
}

QString OAIVehicle::getCode() const {
    return m_code;
}
void OAIVehicle::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVehicle::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVehicle::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIVehicle::getDisplayName() const {
    return m_display_name;
}
void OAIVehicle::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIVehicle::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIVehicle::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIVehicle::getNumber() const {
    return m_number;
}
void OAIVehicle::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIVehicle::is_number_Set() const{
    return m_number_isSet;
}

bool OAIVehicle::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIVehicle::getVehicleType() const {
    return m_vehicle_type;
}
void OAIVehicle::setVehicleType(const QString &vehicle_type) {
    m_vehicle_type = vehicle_type;
    m_vehicle_type_isSet = true;
}

bool OAIVehicle::is_vehicle_type_Set() const{
    return m_vehicle_type_isSet;
}

bool OAIVehicle::is_vehicle_type_Valid() const{
    return m_vehicle_type_isValid;
}

bool OAIVehicle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
