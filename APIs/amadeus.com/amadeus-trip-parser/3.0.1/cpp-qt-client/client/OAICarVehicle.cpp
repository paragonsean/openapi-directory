/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarVehicle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarVehicle::OAICarVehicle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarVehicle::OAICarVehicle() {
    this->initializeModel();
}

OAICarVehicle::~OAICarVehicle() {}

void OAICarVehicle::initializeModel() {

    m_acriss_code_isSet = false;
    m_acriss_code_isValid = false;

    m_car_model_isSet = false;
    m_car_model_isValid = false;

    m_doors_isSet = false;
    m_doors_isValid = false;
}

void OAICarVehicle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarVehicle::fromJsonObject(QJsonObject json) {

    m_acriss_code_isValid = ::OpenAPI::fromJsonValue(m_acriss_code, json[QString("acrissCode")]);
    m_acriss_code_isSet = !json[QString("acrissCode")].isNull() && m_acriss_code_isValid;

    m_car_model_isValid = ::OpenAPI::fromJsonValue(m_car_model, json[QString("carModel")]);
    m_car_model_isSet = !json[QString("carModel")].isNull() && m_car_model_isValid;

    m_doors_isValid = ::OpenAPI::fromJsonValue(m_doors, json[QString("doors")]);
    m_doors_isSet = !json[QString("doors")].isNull() && m_doors_isValid;
}

QString OAICarVehicle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarVehicle::asJsonObject() const {
    QJsonObject obj;
    if (m_acriss_code_isSet) {
        obj.insert(QString("acrissCode"), ::OpenAPI::toJsonValue(m_acriss_code));
    }
    if (m_car_model_isSet) {
        obj.insert(QString("carModel"), ::OpenAPI::toJsonValue(m_car_model));
    }
    if (m_doors_isSet) {
        obj.insert(QString("doors"), ::OpenAPI::toJsonValue(m_doors));
    }
    return obj;
}

QString OAICarVehicle::getAcrissCode() const {
    return m_acriss_code;
}
void OAICarVehicle::setAcrissCode(const QString &acriss_code) {
    m_acriss_code = acriss_code;
    m_acriss_code_isSet = true;
}

bool OAICarVehicle::is_acriss_code_Set() const{
    return m_acriss_code_isSet;
}

bool OAICarVehicle::is_acriss_code_Valid() const{
    return m_acriss_code_isValid;
}

QString OAICarVehicle::getCarModel() const {
    return m_car_model;
}
void OAICarVehicle::setCarModel(const QString &car_model) {
    m_car_model = car_model;
    m_car_model_isSet = true;
}

bool OAICarVehicle::is_car_model_Set() const{
    return m_car_model_isSet;
}

bool OAICarVehicle::is_car_model_Valid() const{
    return m_car_model_isValid;
}

qint32 OAICarVehicle::getDoors() const {
    return m_doors;
}
void OAICarVehicle::setDoors(const qint32 &doors) {
    m_doors = doors;
    m_doors_isSet = true;
}

bool OAICarVehicle::is_doors_Set() const{
    return m_doors_isSet;
}

bool OAICarVehicle::is_doors_Valid() const{
    return m_doors_isValid;
}

bool OAICarVehicle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acriss_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarVehicle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
