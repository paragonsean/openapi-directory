/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarData::OAICarData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarData::OAICarData() {
    this->initializeModel();
}

OAICarData::~OAICarData() {}

void OAICarData::initializeModel() {

    m_associated_equipments_isSet = false;
    m_associated_equipments_isValid = false;

    m_confirmation_number_isSet = false;
    m_confirmation_number_isValid = false;

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_dropoff_isSet = false;
    m_dropoff_isValid = false;

    m_pickup_isSet = false;
    m_pickup_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;

    m_vehicle_isSet = false;
    m_vehicle_isValid = false;
}

void OAICarData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarData::fromJsonObject(QJsonObject json) {

    m_associated_equipments_isValid = ::OpenAPI::fromJsonValue(m_associated_equipments, json[QString("associatedEquipments")]);
    m_associated_equipments_isSet = !json[QString("associatedEquipments")].isNull() && m_associated_equipments_isValid;

    m_confirmation_number_isValid = ::OpenAPI::fromJsonValue(m_confirmation_number, json[QString("confirmationNumber")]);
    m_confirmation_number_isSet = !json[QString("confirmationNumber")].isNull() && m_confirmation_number_isValid;

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_dropoff_isValid = ::OpenAPI::fromJsonValue(m_dropoff, json[QString("dropoff")]);
    m_dropoff_isSet = !json[QString("dropoff")].isNull() && m_dropoff_isValid;

    m_pickup_isValid = ::OpenAPI::fromJsonValue(m_pickup, json[QString("pickup")]);
    m_pickup_isSet = !json[QString("pickup")].isNull() && m_pickup_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("serviceProviderName")]);
    m_service_provider_name_isSet = !json[QString("serviceProviderName")].isNull() && m_service_provider_name_isValid;

    m_vehicle_isValid = ::OpenAPI::fromJsonValue(m_vehicle, json[QString("vehicle")]);
    m_vehicle_isSet = !json[QString("vehicle")].isNull() && m_vehicle_isValid;
}

QString OAICarData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarData::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_equipments.size() > 0) {
        obj.insert(QString("associatedEquipments"), ::OpenAPI::toJsonValue(m_associated_equipments));
    }
    if (m_confirmation_number_isSet) {
        obj.insert(QString("confirmationNumber"), ::OpenAPI::toJsonValue(m_confirmation_number));
    }
    if (m_driver.isSet()) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_dropoff.isSet()) {
        obj.insert(QString("dropoff"), ::OpenAPI::toJsonValue(m_dropoff));
    }
    if (m_pickup.isSet()) {
        obj.insert(QString("pickup"), ::OpenAPI::toJsonValue(m_pickup));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("serviceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    if (m_vehicle.isSet()) {
        obj.insert(QString("vehicle"), ::OpenAPI::toJsonValue(m_vehicle));
    }
    return obj;
}

QList<OAIAssociatedEquipments> OAICarData::getAssociatedEquipments() const {
    return m_associated_equipments;
}
void OAICarData::setAssociatedEquipments(const QList<OAIAssociatedEquipments> &associated_equipments) {
    m_associated_equipments = associated_equipments;
    m_associated_equipments_isSet = true;
}

bool OAICarData::is_associated_equipments_Set() const{
    return m_associated_equipments_isSet;
}

bool OAICarData::is_associated_equipments_Valid() const{
    return m_associated_equipments_isValid;
}

QString OAICarData::getConfirmationNumber() const {
    return m_confirmation_number;
}
void OAICarData::setConfirmationNumber(const QString &confirmation_number) {
    m_confirmation_number = confirmation_number;
    m_confirmation_number_isSet = true;
}

bool OAICarData::is_confirmation_number_Set() const{
    return m_confirmation_number_isSet;
}

bool OAICarData::is_confirmation_number_Valid() const{
    return m_confirmation_number_isValid;
}

OAIDriver OAICarData::getDriver() const {
    return m_driver;
}
void OAICarData::setDriver(const OAIDriver &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAICarData::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAICarData::is_driver_Valid() const{
    return m_driver_isValid;
}

OAIDropoff OAICarData::getDropoff() const {
    return m_dropoff;
}
void OAICarData::setDropoff(const OAIDropoff &dropoff) {
    m_dropoff = dropoff;
    m_dropoff_isSet = true;
}

bool OAICarData::is_dropoff_Set() const{
    return m_dropoff_isSet;
}

bool OAICarData::is_dropoff_Valid() const{
    return m_dropoff_isValid;
}

OAIPickup OAICarData::getPickup() const {
    return m_pickup;
}
void OAICarData::setPickup(const OAIPickup &pickup) {
    m_pickup = pickup;
    m_pickup_isSet = true;
}

bool OAICarData::is_pickup_Set() const{
    return m_pickup_isSet;
}

bool OAICarData::is_pickup_Valid() const{
    return m_pickup_isValid;
}

QString OAICarData::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAICarData::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAICarData::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAICarData::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

OAICarVehicle OAICarData::getVehicle() const {
    return m_vehicle;
}
void OAICarData::setVehicle(const OAICarVehicle &vehicle) {
    m_vehicle = vehicle;
    m_vehicle_isSet = true;
}

bool OAICarData::is_vehicle_Set() const{
    return m_vehicle_isSet;
}

bool OAICarData::is_vehicle_Valid() const{
    return m_vehicle_isValid;
}

bool OAICarData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_equipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropoff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
