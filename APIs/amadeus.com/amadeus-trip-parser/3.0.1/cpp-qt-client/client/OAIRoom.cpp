/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoom::OAIRoom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoom::OAIRoom() {
    this->initializeModel();
}

OAIRoom::~OAIRoom() {}

void OAIRoom::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_estimated_isSet = false;
    m_type_estimated_isValid = false;
}

void OAIRoom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoom::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_estimated_isValid = ::OpenAPI::fromJsonValue(m_type_estimated, json[QString("typeEstimated")]);
    m_type_estimated_isSet = !json[QString("typeEstimated")].isNull() && m_type_estimated_isValid;
}

QString OAIRoom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoom::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_estimated.isSet()) {
        obj.insert(QString("typeEstimated"), ::OpenAPI::toJsonValue(m_type_estimated));
    }
    return obj;
}

QString OAIRoom::getType() const {
    return m_type;
}
void OAIRoom::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoom::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoom::is_type_Valid() const{
    return m_type_isValid;
}

OAITypeEstimated OAIRoom::getTypeEstimated() const {
    return m_type_estimated;
}
void OAIRoom::setTypeEstimated(const OAITypeEstimated &type_estimated) {
    m_type_estimated = type_estimated;
    m_type_estimated_isSet = true;
}

bool OAIRoom::is_type_estimated_Set() const{
    return m_type_estimated_isSet;
}

bool OAIRoom::is_type_estimated_Valid() const{
    return m_type_estimated_isValid;
}

bool OAIRoom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_estimated.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoom::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
