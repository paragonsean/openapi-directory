/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuests::OAIGuests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuests::OAIGuests() {
    this->initializeModel();
}

OAIGuests::~OAIGuests() {}

void OAIGuests::initializeModel() {

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_child_age_isSet = false;
    m_child_age_isValid = false;
}

void OAIGuests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuests::fromJsonObject(QJsonObject json) {

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_child_age_isValid = ::OpenAPI::fromJsonValue(m_child_age, json[QString("childAge")]);
    m_child_age_isSet = !json[QString("childAge")].isNull() && m_child_age_isValid;
}

QString OAIGuests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuests::asJsonObject() const {
    QJsonObject obj;
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_child_age.size() > 0) {
        obj.insert(QString("childAge"), ::OpenAPI::toJsonValue(m_child_age));
    }
    return obj;
}

qint32 OAIGuests::getAdults() const {
    return m_adults;
}
void OAIGuests::setAdults(const qint32 &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIGuests::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIGuests::is_adults_Valid() const{
    return m_adults_isValid;
}

QList<qint32> OAIGuests::getChildAge() const {
    return m_child_age;
}
void OAIGuests::setChildAge(const QList<qint32> &child_age) {
    m_child_age = child_age;
    m_child_age_isSet = true;
}

bool OAIGuests::is_child_age_Set() const{
    return m_child_age_isSet;
}

bool OAIGuests::is_child_age_Valid() const{
    return m_child_age_isValid;
}

bool OAIGuests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_age.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
