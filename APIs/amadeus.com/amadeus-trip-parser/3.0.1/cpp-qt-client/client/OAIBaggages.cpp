/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaggages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaggages::OAIBaggages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaggages::OAIBaggages() {
    this->initializeModel();
}

OAIBaggages::~OAIBaggages() {}

void OAIBaggages::initializeModel() {

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIBaggages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaggages::fromJsonObject(QJsonObject json) {

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIBaggages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaggages::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAIBaggages::getQuantity() const {
    return m_quantity;
}
void OAIBaggages::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIBaggages::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIBaggages::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIWeight OAIBaggages::getWeight() const {
    return m_weight;
}
void OAIBaggages::setWeight(const OAIWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIBaggages::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIBaggages::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIBaggages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaggages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
