/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDepartureAir.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDepartureAir::OAIDepartureAir(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDepartureAir::OAIDepartureAir() {
    this->initializeModel();
}

OAIDepartureAir::~OAIDepartureAir() {}

void OAIDepartureAir::initializeModel() {

    m_check_in_end_time_isSet = false;
    m_check_in_end_time_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_local_date_time_isSet = false;
    m_local_date_time_isValid = false;

    m_terminal_isSet = false;
    m_terminal_isValid = false;
}

void OAIDepartureAir::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDepartureAir::fromJsonObject(QJsonObject json) {

    m_check_in_end_time_isValid = ::OpenAPI::fromJsonValue(m_check_in_end_time, json[QString("checkInEndTime")]);
    m_check_in_end_time_isSet = !json[QString("checkInEndTime")].isNull() && m_check_in_end_time_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_local_date_time_isValid = ::OpenAPI::fromJsonValue(m_local_date_time, json[QString("localDateTime")]);
    m_local_date_time_isSet = !json[QString("localDateTime")].isNull() && m_local_date_time_isValid;

    m_terminal_isValid = ::OpenAPI::fromJsonValue(m_terminal, json[QString("terminal")]);
    m_terminal_isSet = !json[QString("terminal")].isNull() && m_terminal_isValid;
}

QString OAIDepartureAir::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDepartureAir::asJsonObject() const {
    QJsonObject obj;
    if (m_check_in_end_time_isSet) {
        obj.insert(QString("checkInEndTime"), ::OpenAPI::toJsonValue(m_check_in_end_time));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_local_date_time_isSet) {
        obj.insert(QString("localDateTime"), ::OpenAPI::toJsonValue(m_local_date_time));
    }
    if (m_terminal_isSet) {
        obj.insert(QString("terminal"), ::OpenAPI::toJsonValue(m_terminal));
    }
    return obj;
}

QString OAIDepartureAir::getCheckInEndTime() const {
    return m_check_in_end_time;
}
void OAIDepartureAir::setCheckInEndTime(const QString &check_in_end_time) {
    m_check_in_end_time = check_in_end_time;
    m_check_in_end_time_isSet = true;
}

bool OAIDepartureAir::is_check_in_end_time_Set() const{
    return m_check_in_end_time_isSet;
}

bool OAIDepartureAir::is_check_in_end_time_Valid() const{
    return m_check_in_end_time_isValid;
}

QString OAIDepartureAir::getIataCode() const {
    return m_iata_code;
}
void OAIDepartureAir::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIDepartureAir::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIDepartureAir::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIDepartureAir::getLocalDateTime() const {
    return m_local_date_time;
}
void OAIDepartureAir::setLocalDateTime(const QString &local_date_time) {
    m_local_date_time = local_date_time;
    m_local_date_time_isSet = true;
}

bool OAIDepartureAir::is_local_date_time_Set() const{
    return m_local_date_time_isSet;
}

bool OAIDepartureAir::is_local_date_time_Valid() const{
    return m_local_date_time_isValid;
}

QString OAIDepartureAir::getTerminal() const {
    return m_terminal;
}
void OAIDepartureAir::setTerminal(const QString &terminal) {
    m_terminal = terminal;
    m_terminal_isSet = true;
}

bool OAIDepartureAir::is_terminal_Set() const{
    return m_terminal_isSet;
}

bool OAIDepartureAir::is_terminal_Valid() const{
    return m_terminal_isValid;
}

bool OAIDepartureAir::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_in_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDepartureAir::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
