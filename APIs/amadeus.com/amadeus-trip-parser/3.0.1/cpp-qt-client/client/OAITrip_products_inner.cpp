/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrip_products_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrip_products_inner::OAITrip_products_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrip_products_inner::OAITrip_products_inner() {
    this->initializeModel();
}

OAITrip_products_inner::~OAITrip_products_inner() {}

void OAITrip_products_inner::initializeModel() {

    m_air_isSet = false;
    m_air_isValid = false;

    m_hotel_isSet = false;
    m_hotel_isValid = false;

    m_car_isSet = false;
    m_car_isValid = false;

    m_train_isSet = false;
    m_train_isValid = false;
}

void OAITrip_products_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrip_products_inner::fromJsonObject(QJsonObject json) {

    m_air_isValid = ::OpenAPI::fromJsonValue(m_air, json[QString("air")]);
    m_air_isSet = !json[QString("air")].isNull() && m_air_isValid;

    m_hotel_isValid = ::OpenAPI::fromJsonValue(m_hotel, json[QString("hotel")]);
    m_hotel_isSet = !json[QString("hotel")].isNull() && m_hotel_isValid;

    m_car_isValid = ::OpenAPI::fromJsonValue(m_car, json[QString("car")]);
    m_car_isSet = !json[QString("car")].isNull() && m_car_isValid;

    m_train_isValid = ::OpenAPI::fromJsonValue(m_train, json[QString("train")]);
    m_train_isSet = !json[QString("train")].isNull() && m_train_isValid;
}

QString OAITrip_products_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrip_products_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_air.isSet()) {
        obj.insert(QString("air"), ::OpenAPI::toJsonValue(m_air));
    }
    if (m_hotel.isSet()) {
        obj.insert(QString("hotel"), ::OpenAPI::toJsonValue(m_hotel));
    }
    if (m_car.isSet()) {
        obj.insert(QString("car"), ::OpenAPI::toJsonValue(m_car));
    }
    if (m_train.isSet()) {
        obj.insert(QString("train"), ::OpenAPI::toJsonValue(m_train));
    }
    return obj;
}

OAIAirData OAITrip_products_inner::getAir() const {
    return m_air;
}
void OAITrip_products_inner::setAir(const OAIAirData &air) {
    m_air = air;
    m_air_isSet = true;
}

bool OAITrip_products_inner::is_air_Set() const{
    return m_air_isSet;
}

bool OAITrip_products_inner::is_air_Valid() const{
    return m_air_isValid;
}

OAIHotelData OAITrip_products_inner::getHotel() const {
    return m_hotel;
}
void OAITrip_products_inner::setHotel(const OAIHotelData &hotel) {
    m_hotel = hotel;
    m_hotel_isSet = true;
}

bool OAITrip_products_inner::is_hotel_Set() const{
    return m_hotel_isSet;
}

bool OAITrip_products_inner::is_hotel_Valid() const{
    return m_hotel_isValid;
}

OAICarData OAITrip_products_inner::getCar() const {
    return m_car;
}
void OAITrip_products_inner::setCar(const OAICarData &car) {
    m_car = car;
    m_car_isSet = true;
}

bool OAITrip_products_inner::is_car_Set() const{
    return m_car_isSet;
}

bool OAITrip_products_inner::is_car_Valid() const{
    return m_car_isValid;
}

OAITrainData OAITrip_products_inner::getTrain() const {
    return m_train;
}
void OAITrip_products_inner::setTrain(const OAITrainData &train) {
    m_train = train;
    m_train_isSet = true;
}

bool OAITrip_products_inner::is_train_Set() const{
    return m_train_isSet;
}

bool OAITrip_products_inner::is_train_Valid() const{
    return m_train_isValid;
}

bool OAITrip_products_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_car.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_train.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrip_products_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
