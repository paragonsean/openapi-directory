/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentEnvelope_MetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentEnvelope_MetaData::OAIDocumentEnvelope_MetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentEnvelope_MetaData::OAIDocumentEnvelope_MetaData() {
    this->initializeModel();
}

OAIDocumentEnvelope_MetaData::~OAIDocumentEnvelope_MetaData() {}

void OAIDocumentEnvelope_MetaData::initializeModel() {

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDocumentEnvelope_MetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentEnvelope_MetaData::fromJsonObject(QJsonObject json) {

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDocumentEnvelope_MetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentEnvelope_MetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDocumentEnvelope_MetaData::getDocumentType() const {
    return m_document_type;
}
void OAIDocumentEnvelope_MetaData::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIDocumentEnvelope_MetaData::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIDocumentEnvelope_MetaData::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIDocumentEnvelope_MetaData::getEncoding() const {
    return m_encoding;
}
void OAIDocumentEnvelope_MetaData::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIDocumentEnvelope_MetaData::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIDocumentEnvelope_MetaData::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIDocumentEnvelope_MetaData::getName() const {
    return m_name;
}
void OAIDocumentEnvelope_MetaData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentEnvelope_MetaData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentEnvelope_MetaData::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDocumentEnvelope_MetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentEnvelope_MetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
