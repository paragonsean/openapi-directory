/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirData::OAIAirData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirData::OAIAirData() {
    this->initializeModel();
}

OAIAirData::~OAIAirData() {}

void OAIAirData::initializeModel() {

    m_aircraft_isSet = false;
    m_aircraft_isValid = false;

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_arrival_airport_location_isSet = false;
    m_arrival_airport_location_isValid = false;

    m_baggages_isSet = false;
    m_baggages_isValid = false;

    m_confirmation_number_isSet = false;
    m_confirmation_number_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_departure_airport_location_isSet = false;
    m_departure_airport_location_isValid = false;

    m_marketing_isSet = false;
    m_marketing_isValid = false;

    m_meal_isSet = false;
    m_meal_isValid = false;

    m_operating_isSet = false;
    m_operating_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;
}

void OAIAirData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirData::fromJsonObject(QJsonObject json) {

    m_aircraft_isValid = ::OpenAPI::fromJsonValue(m_aircraft, json[QString("aircraft")]);
    m_aircraft_isSet = !json[QString("aircraft")].isNull() && m_aircraft_isValid;

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_arrival_airport_location_isValid = ::OpenAPI::fromJsonValue(m_arrival_airport_location, json[QString("arrivalAirportLocation")]);
    m_arrival_airport_location_isSet = !json[QString("arrivalAirportLocation")].isNull() && m_arrival_airport_location_isValid;

    m_baggages_isValid = ::OpenAPI::fromJsonValue(m_baggages, json[QString("baggages")]);
    m_baggages_isSet = !json[QString("baggages")].isNull() && m_baggages_isValid;

    m_confirmation_number_isValid = ::OpenAPI::fromJsonValue(m_confirmation_number, json[QString("confirmationNumber")]);
    m_confirmation_number_isSet = !json[QString("confirmationNumber")].isNull() && m_confirmation_number_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_departure_airport_location_isValid = ::OpenAPI::fromJsonValue(m_departure_airport_location, json[QString("departureAirportLocation")]);
    m_departure_airport_location_isSet = !json[QString("departureAirportLocation")].isNull() && m_departure_airport_location_isValid;

    m_marketing_isValid = ::OpenAPI::fromJsonValue(m_marketing, json[QString("marketing")]);
    m_marketing_isSet = !json[QString("marketing")].isNull() && m_marketing_isValid;

    m_meal_isValid = ::OpenAPI::fromJsonValue(m_meal, json[QString("meal")]);
    m_meal_isSet = !json[QString("meal")].isNull() && m_meal_isValid;

    m_operating_isValid = ::OpenAPI::fromJsonValue(m_operating, json[QString("operating")]);
    m_operating_isSet = !json[QString("operating")].isNull() && m_operating_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;
}

QString OAIAirData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirData::asJsonObject() const {
    QJsonObject obj;
    if (m_aircraft.isSet()) {
        obj.insert(QString("aircraft"), ::OpenAPI::toJsonValue(m_aircraft));
    }
    if (m_arrival.isSet()) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_arrival_airport_location.isSet()) {
        obj.insert(QString("arrivalAirportLocation"), ::OpenAPI::toJsonValue(m_arrival_airport_location));
    }
    if (m_baggages.isSet()) {
        obj.insert(QString("baggages"), ::OpenAPI::toJsonValue(m_baggages));
    }
    if (m_confirmation_number_isSet) {
        obj.insert(QString("confirmationNumber"), ::OpenAPI::toJsonValue(m_confirmation_number));
    }
    if (m_departure.isSet()) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_departure_airport_location.isSet()) {
        obj.insert(QString("departureAirportLocation"), ::OpenAPI::toJsonValue(m_departure_airport_location));
    }
    if (m_marketing.isSet()) {
        obj.insert(QString("marketing"), ::OpenAPI::toJsonValue(m_marketing));
    }
    if (m_meal.isSet()) {
        obj.insert(QString("meal"), ::OpenAPI::toJsonValue(m_meal));
    }
    if (m_operating.isSet()) {
        obj.insert(QString("operating"), ::OpenAPI::toJsonValue(m_operating));
    }
    if (m_seats.size() > 0) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    return obj;
}

OAIAircraft OAIAirData::getAircraft() const {
    return m_aircraft;
}
void OAIAirData::setAircraft(const OAIAircraft &aircraft) {
    m_aircraft = aircraft;
    m_aircraft_isSet = true;
}

bool OAIAirData::is_aircraft_Set() const{
    return m_aircraft_isSet;
}

bool OAIAirData::is_aircraft_Valid() const{
    return m_aircraft_isValid;
}

OAIArrivalAir OAIAirData::getArrival() const {
    return m_arrival;
}
void OAIAirData::setArrival(const OAIArrivalAir &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAIAirData::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAIAirData::is_arrival_Valid() const{
    return m_arrival_isValid;
}

OAIArrivalAirportLocation OAIAirData::getArrivalAirportLocation() const {
    return m_arrival_airport_location;
}
void OAIAirData::setArrivalAirportLocation(const OAIArrivalAirportLocation &arrival_airport_location) {
    m_arrival_airport_location = arrival_airport_location;
    m_arrival_airport_location_isSet = true;
}

bool OAIAirData::is_arrival_airport_location_Set() const{
    return m_arrival_airport_location_isSet;
}

bool OAIAirData::is_arrival_airport_location_Valid() const{
    return m_arrival_airport_location_isValid;
}

OAIBaggages OAIAirData::getBaggages() const {
    return m_baggages;
}
void OAIAirData::setBaggages(const OAIBaggages &baggages) {
    m_baggages = baggages;
    m_baggages_isSet = true;
}

bool OAIAirData::is_baggages_Set() const{
    return m_baggages_isSet;
}

bool OAIAirData::is_baggages_Valid() const{
    return m_baggages_isValid;
}

QString OAIAirData::getConfirmationNumber() const {
    return m_confirmation_number;
}
void OAIAirData::setConfirmationNumber(const QString &confirmation_number) {
    m_confirmation_number = confirmation_number;
    m_confirmation_number_isSet = true;
}

bool OAIAirData::is_confirmation_number_Set() const{
    return m_confirmation_number_isSet;
}

bool OAIAirData::is_confirmation_number_Valid() const{
    return m_confirmation_number_isValid;
}

OAIDepartureAir OAIAirData::getDeparture() const {
    return m_departure;
}
void OAIAirData::setDeparture(const OAIDepartureAir &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAIAirData::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAIAirData::is_departure_Valid() const{
    return m_departure_isValid;
}

OAIDepartureAirportLocation OAIAirData::getDepartureAirportLocation() const {
    return m_departure_airport_location;
}
void OAIAirData::setDepartureAirportLocation(const OAIDepartureAirportLocation &departure_airport_location) {
    m_departure_airport_location = departure_airport_location;
    m_departure_airport_location_isSet = true;
}

bool OAIAirData::is_departure_airport_location_Set() const{
    return m_departure_airport_location_isSet;
}

bool OAIAirData::is_departure_airport_location_Valid() const{
    return m_departure_airport_location_isValid;
}

OAIMarketing OAIAirData::getMarketing() const {
    return m_marketing;
}
void OAIAirData::setMarketing(const OAIMarketing &marketing) {
    m_marketing = marketing;
    m_marketing_isSet = true;
}

bool OAIAirData::is_marketing_Set() const{
    return m_marketing_isSet;
}

bool OAIAirData::is_marketing_Valid() const{
    return m_marketing_isValid;
}

OAIMeal OAIAirData::getMeal() const {
    return m_meal;
}
void OAIAirData::setMeal(const OAIMeal &meal) {
    m_meal = meal;
    m_meal_isSet = true;
}

bool OAIAirData::is_meal_Set() const{
    return m_meal_isSet;
}

bool OAIAirData::is_meal_Valid() const{
    return m_meal_isValid;
}

OAIOperating OAIAirData::getOperating() const {
    return m_operating;
}
void OAIAirData::setOperating(const OAIOperating &operating) {
    m_operating = operating;
    m_operating_isSet = true;
}

bool OAIAirData::is_operating_Set() const{
    return m_operating_isSet;
}

bool OAIAirData::is_operating_Valid() const{
    return m_operating_isValid;
}

QList<OAIAirData_seats_inner> OAIAirData::getSeats() const {
    return m_seats;
}
void OAIAirData::setSeats(const QList<OAIAirData_seats_inner> &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIAirData::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIAirData::is_seats_Valid() const{
    return m_seats_isValid;
}

bool OAIAirData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aircraft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_airport_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baggages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_airport_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
