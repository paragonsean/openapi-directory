/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirData_seats_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirData_seats_inner::OAIAirData_seats_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirData_seats_inner::OAIAirData_seats_inner() {
    this->initializeModel();
}

OAIAirData_seats_inner::~OAIAirData_seats_inner() {}

void OAIAirData_seats_inner::initializeModel() {

    m_cabin_isSet = false;
    m_cabin_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_association_refs_isSet = false;
    m_association_refs_isValid = false;
}

void OAIAirData_seats_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirData_seats_inner::fromJsonObject(QJsonObject json) {

    m_cabin_isValid = ::OpenAPI::fromJsonValue(m_cabin, json[QString("cabin")]);
    m_cabin_isSet = !json[QString("cabin")].isNull() && m_cabin_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_association_refs_isValid = ::OpenAPI::fromJsonValue(m_association_refs, json[QString("associationRefs")]);
    m_association_refs_isSet = !json[QString("associationRefs")].isNull() && m_association_refs_isValid;
}

QString OAIAirData_seats_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirData_seats_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cabin_isSet) {
        obj.insert(QString("cabin"), ::OpenAPI::toJsonValue(m_cabin));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_association_refs.size() > 0) {
        obj.insert(QString("associationRefs"), ::OpenAPI::toJsonValue(m_association_refs));
    }
    return obj;
}

QString OAIAirData_seats_inner::getCabin() const {
    return m_cabin;
}
void OAIAirData_seats_inner::setCabin(const QString &cabin) {
    m_cabin = cabin;
    m_cabin_isSet = true;
}

bool OAIAirData_seats_inner::is_cabin_Set() const{
    return m_cabin_isSet;
}

bool OAIAirData_seats_inner::is_cabin_Valid() const{
    return m_cabin_isValid;
}

QString OAIAirData_seats_inner::getNumber() const {
    return m_number;
}
void OAIAirData_seats_inner::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIAirData_seats_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAIAirData_seats_inner::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIAssociationRefs> OAIAirData_seats_inner::getAssociationRefs() const {
    return m_association_refs;
}
void OAIAirData_seats_inner::setAssociationRefs(const QList<OAIAssociationRefs> &association_refs) {
    m_association_refs = association_refs;
    m_association_refs_isSet = true;
}

bool OAIAirData_seats_inner::is_association_refs_Set() const{
    return m_association_refs_isSet;
}

bool OAIAirData_seats_inner::is_association_refs_Valid() const{
    return m_association_refs_isValid;
}

bool OAIAirData_seats_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cabin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirData_seats_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
