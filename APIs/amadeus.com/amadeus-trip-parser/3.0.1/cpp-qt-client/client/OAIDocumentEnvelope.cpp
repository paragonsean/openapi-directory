/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentEnvelope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentEnvelope::OAIDocumentEnvelope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentEnvelope::OAIDocumentEnvelope() {
    this->initializeModel();
}

OAIDocumentEnvelope::~OAIDocumentEnvelope() {}

void OAIDocumentEnvelope::initializeModel() {

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIDocumentEnvelope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentEnvelope::fromJsonObject(QJsonObject json) {

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("metaData")]);
    m_meta_data_isSet = !json[QString("metaData")].isNull() && m_meta_data_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIDocumentEnvelope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentEnvelope::asJsonObject() const {
    QJsonObject obj;
    if (m_meta_data.isSet()) {
        obj.insert(QString("metaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

OAIDocumentEnvelope_MetaData OAIDocumentEnvelope::getMetaData() const {
    return m_meta_data;
}
void OAIDocumentEnvelope::setMetaData(const OAIDocumentEnvelope_MetaData &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIDocumentEnvelope::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIDocumentEnvelope::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIDocumentEnvelope::getPayload() const {
    return m_payload;
}
void OAIDocumentEnvelope::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIDocumentEnvelope::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIDocumentEnvelope::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIDocumentEnvelope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentEnvelope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
