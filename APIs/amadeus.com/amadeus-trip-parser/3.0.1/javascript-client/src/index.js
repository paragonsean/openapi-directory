/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import Air from './model/Air';
import AirData from './model/AirData';
import AirDataSeatsInner from './model/AirDataSeatsInner';
import Aircraft from './model/Aircraft';
import Arrival from './model/Arrival';
import ArrivalAir from './model/ArrivalAir';
import ArrivalAirportLocation from './model/ArrivalAirportLocation';
import AssociatedEquipments from './model/AssociatedEquipments';
import AssociationRefs from './model/AssociationRefs';
import Baggages from './model/Baggages';
import Cancellation from './model/Cancellation';
import Car from './model/Car';
import CarData from './model/CarData';
import CarVehicle from './model/CarVehicle';
import Carrier from './model/Carrier';
import Contact from './model/Contact';
import ContactHotel from './model/ContactHotel';
import Departure from './model/Departure';
import DepartureAir from './model/DepartureAir';
import DepartureAirportLocation from './model/DepartureAirportLocation';
import Description from './model/Description';
import DocumentEnvelope from './model/DocumentEnvelope';
import DocumentEnvelopeMetaData from './model/DocumentEnvelopeMetaData';
import Driver from './model/Driver';
import Dropoff from './model/Dropoff';
import Email from './model/Email';
import End from './model/End';
import Error400 from './model/Error400';
import Error500 from './model/Error500';
import Error501 from './model/Error501';
import FlightDesignator from './model/FlightDesignator';
import Guests from './model/Guests';
import Hotel from './model/Hotel';
import HotelData from './model/HotelData';
import Issue from './model/Issue';
import IssueSource from './model/IssueSource';
import Location from './model/Location';
import Marketing from './model/Marketing';
import Meal from './model/Meal';
import Name from './model/Name';
import Operating from './model/Operating';
import Phone from './model/Phone';
import Pickup from './model/Pickup';
import Policies from './model/Policies';
import PostTripParserRequest200Response from './model/PostTripParserRequest200Response';
import Price from './model/Price';
import Room from './model/Room';
import Seats from './model/Seats';
import Stakeholder from './model/Stakeholder';
import Start from './model/Start';
import Train from './model/Train';
import TrainData from './model/TrainData';
import TravelAgency from './model/TravelAgency';
import Trip from './model/Trip';
import TripProductsInner from './model/TripProductsInner';
import TypeEstimated from './model/TypeEstimated';
import Vehicle from './model/Vehicle';
import Warnings from './model/Warnings';
import WarningsSource from './model/WarningsSource';
import Weight from './model/Weight';
import TripApi from './api/TripApi';


/**
*  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TripParser = require('index'); // See note below*.
* var xxxSvc = new TripParser.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TripParser.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TripParser.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TripParser.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The Air model constructor.
     * @property {module:model/Air}
     */
    Air,

    /**
     * The AirData model constructor.
     * @property {module:model/AirData}
     */
    AirData,

    /**
     * The AirDataSeatsInner model constructor.
     * @property {module:model/AirDataSeatsInner}
     */
    AirDataSeatsInner,

    /**
     * The Aircraft model constructor.
     * @property {module:model/Aircraft}
     */
    Aircraft,

    /**
     * The Arrival model constructor.
     * @property {module:model/Arrival}
     */
    Arrival,

    /**
     * The ArrivalAir model constructor.
     * @property {module:model/ArrivalAir}
     */
    ArrivalAir,

    /**
     * The ArrivalAirportLocation model constructor.
     * @property {module:model/ArrivalAirportLocation}
     */
    ArrivalAirportLocation,

    /**
     * The AssociatedEquipments model constructor.
     * @property {module:model/AssociatedEquipments}
     */
    AssociatedEquipments,

    /**
     * The AssociationRefs model constructor.
     * @property {module:model/AssociationRefs}
     */
    AssociationRefs,

    /**
     * The Baggages model constructor.
     * @property {module:model/Baggages}
     */
    Baggages,

    /**
     * The Cancellation model constructor.
     * @property {module:model/Cancellation}
     */
    Cancellation,

    /**
     * The Car model constructor.
     * @property {module:model/Car}
     */
    Car,

    /**
     * The CarData model constructor.
     * @property {module:model/CarData}
     */
    CarData,

    /**
     * The CarVehicle model constructor.
     * @property {module:model/CarVehicle}
     */
    CarVehicle,

    /**
     * The Carrier model constructor.
     * @property {module:model/Carrier}
     */
    Carrier,

    /**
     * The Contact model constructor.
     * @property {module:model/Contact}
     */
    Contact,

    /**
     * The ContactHotel model constructor.
     * @property {module:model/ContactHotel}
     */
    ContactHotel,

    /**
     * The Departure model constructor.
     * @property {module:model/Departure}
     */
    Departure,

    /**
     * The DepartureAir model constructor.
     * @property {module:model/DepartureAir}
     */
    DepartureAir,

    /**
     * The DepartureAirportLocation model constructor.
     * @property {module:model/DepartureAirportLocation}
     */
    DepartureAirportLocation,

    /**
     * The Description model constructor.
     * @property {module:model/Description}
     */
    Description,

    /**
     * The DocumentEnvelope model constructor.
     * @property {module:model/DocumentEnvelope}
     */
    DocumentEnvelope,

    /**
     * The DocumentEnvelopeMetaData model constructor.
     * @property {module:model/DocumentEnvelopeMetaData}
     */
    DocumentEnvelopeMetaData,

    /**
     * The Driver model constructor.
     * @property {module:model/Driver}
     */
    Driver,

    /**
     * The Dropoff model constructor.
     * @property {module:model/Dropoff}
     */
    Dropoff,

    /**
     * The Email model constructor.
     * @property {module:model/Email}
     */
    Email,

    /**
     * The End model constructor.
     * @property {module:model/End}
     */
    End,

    /**
     * The Error400 model constructor.
     * @property {module:model/Error400}
     */
    Error400,

    /**
     * The Error500 model constructor.
     * @property {module:model/Error500}
     */
    Error500,

    /**
     * The Error501 model constructor.
     * @property {module:model/Error501}
     */
    Error501,

    /**
     * The FlightDesignator model constructor.
     * @property {module:model/FlightDesignator}
     */
    FlightDesignator,

    /**
     * The Guests model constructor.
     * @property {module:model/Guests}
     */
    Guests,

    /**
     * The Hotel model constructor.
     * @property {module:model/Hotel}
     */
    Hotel,

    /**
     * The HotelData model constructor.
     * @property {module:model/HotelData}
     */
    HotelData,

    /**
     * The Issue model constructor.
     * @property {module:model/Issue}
     */
    Issue,

    /**
     * The IssueSource model constructor.
     * @property {module:model/IssueSource}
     */
    IssueSource,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The Marketing model constructor.
     * @property {module:model/Marketing}
     */
    Marketing,

    /**
     * The Meal model constructor.
     * @property {module:model/Meal}
     */
    Meal,

    /**
     * The Name model constructor.
     * @property {module:model/Name}
     */
    Name,

    /**
     * The Operating model constructor.
     * @property {module:model/Operating}
     */
    Operating,

    /**
     * The Phone model constructor.
     * @property {module:model/Phone}
     */
    Phone,

    /**
     * The Pickup model constructor.
     * @property {module:model/Pickup}
     */
    Pickup,

    /**
     * The Policies model constructor.
     * @property {module:model/Policies}
     */
    Policies,

    /**
     * The PostTripParserRequest200Response model constructor.
     * @property {module:model/PostTripParserRequest200Response}
     */
    PostTripParserRequest200Response,

    /**
     * The Price model constructor.
     * @property {module:model/Price}
     */
    Price,

    /**
     * The Room model constructor.
     * @property {module:model/Room}
     */
    Room,

    /**
     * The Seats model constructor.
     * @property {module:model/Seats}
     */
    Seats,

    /**
     * The Stakeholder model constructor.
     * @property {module:model/Stakeholder}
     */
    Stakeholder,

    /**
     * The Start model constructor.
     * @property {module:model/Start}
     */
    Start,

    /**
     * The Train model constructor.
     * @property {module:model/Train}
     */
    Train,

    /**
     * The TrainData model constructor.
     * @property {module:model/TrainData}
     */
    TrainData,

    /**
     * The TravelAgency model constructor.
     * @property {module:model/TravelAgency}
     */
    TravelAgency,

    /**
     * The Trip model constructor.
     * @property {module:model/Trip}
     */
    Trip,

    /**
     * The TripProductsInner model constructor.
     * @property {module:model/TripProductsInner}
     */
    TripProductsInner,

    /**
     * The TypeEstimated model constructor.
     * @property {module:model/TypeEstimated}
     */
    TypeEstimated,

    /**
     * The Vehicle model constructor.
     * @property {module:model/Vehicle}
     */
    Vehicle,

    /**
     * The Warnings model constructor.
     * @property {module:model/Warnings}
     */
    Warnings,

    /**
     * The WarningsSource model constructor.
     * @property {module:model/WarningsSource}
     */
    WarningsSource,

    /**
     * The Weight model constructor.
     * @property {module:model/Weight}
     */
    Weight,

    /**
    * The TripApi service constructor.
    * @property {module:api/TripApi}
    */
    TripApi
};
