/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Arrival from './Arrival';
import Departure from './Departure';
import Seats from './Seats';
import Vehicle from './Vehicle';

/**
 * The TrainData model module.
 * @module model/TrainData
 * @version 3.0.1
 */
class TrainData {
    /**
     * Constructs a new <code>TrainData</code>.
     * Train Product
     * @alias module:model/TrainData
     */
    constructor() { 
        
        TrainData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrainData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainData} obj Optional instance to populate.
     * @return {module:model/TrainData} The populated <code>TrainData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainData();

            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = Arrival.constructFromObject(data['arrival']);
            }
            if (data.hasOwnProperty('arrivalDateTime')) {
                obj['arrivalDateTime'] = ApiClient.convertToType(data['arrivalDateTime'], 'String');
            }
            if (data.hasOwnProperty('arrivalTrack')) {
                obj['arrivalTrack'] = ApiClient.convertToType(data['arrivalTrack'], 'String');
            }
            if (data.hasOwnProperty('bookingClass')) {
                obj['bookingClass'] = ApiClient.convertToType(data['bookingClass'], 'String');
            }
            if (data.hasOwnProperty('confirmNbr')) {
                obj['confirmNbr'] = ApiClient.convertToType(data['confirmNbr'], 'String');
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = Departure.constructFromObject(data['departure']);
            }
            if (data.hasOwnProperty('departureDateTime')) {
                obj['departureDateTime'] = ApiClient.convertToType(data['departureDateTime'], 'String');
            }
            if (data.hasOwnProperty('departureTrack')) {
                obj['departureTrack'] = ApiClient.convertToType(data['departureTrack'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('seats')) {
                obj['seats'] = ApiClient.convertToType(data['seats'], [Seats]);
            }
            if (data.hasOwnProperty('serviceProviderName')) {
                obj['serviceProviderName'] = ApiClient.convertToType(data['serviceProviderName'], 'String');
            }
            if (data.hasOwnProperty('vehicle')) {
                obj['vehicle'] = Vehicle.constructFromObject(data['vehicle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrival`
        if (data['arrival']) { // data not null
          Arrival.validateJSON(data['arrival']);
        }
        // ensure the json data is a string
        if (data['arrivalDateTime'] && !(typeof data['arrivalDateTime'] === 'string' || data['arrivalDateTime'] instanceof String)) {
            throw new Error("Expected the field `arrivalDateTime` to be a primitive type in the JSON string but got " + data['arrivalDateTime']);
        }
        // ensure the json data is a string
        if (data['arrivalTrack'] && !(typeof data['arrivalTrack'] === 'string' || data['arrivalTrack'] instanceof String)) {
            throw new Error("Expected the field `arrivalTrack` to be a primitive type in the JSON string but got " + data['arrivalTrack']);
        }
        // ensure the json data is a string
        if (data['bookingClass'] && !(typeof data['bookingClass'] === 'string' || data['bookingClass'] instanceof String)) {
            throw new Error("Expected the field `bookingClass` to be a primitive type in the JSON string but got " + data['bookingClass']);
        }
        // ensure the json data is a string
        if (data['confirmNbr'] && !(typeof data['confirmNbr'] === 'string' || data['confirmNbr'] instanceof String)) {
            throw new Error("Expected the field `confirmNbr` to be a primitive type in the JSON string but got " + data['confirmNbr']);
        }
        // validate the optional field `departure`
        if (data['departure']) { // data not null
          Departure.validateJSON(data['departure']);
        }
        // ensure the json data is a string
        if (data['departureDateTime'] && !(typeof data['departureDateTime'] === 'string' || data['departureDateTime'] instanceof String)) {
            throw new Error("Expected the field `departureDateTime` to be a primitive type in the JSON string but got " + data['departureDateTime']);
        }
        // ensure the json data is a string
        if (data['departureTrack'] && !(typeof data['departureTrack'] === 'string' || data['departureTrack'] instanceof String)) {
            throw new Error("Expected the field `departureTrack` to be a primitive type in the JSON string but got " + data['departureTrack']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        if (data['seats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seats'])) {
                throw new Error("Expected the field `seats` to be an array in the JSON data but got " + data['seats']);
            }
            // validate the optional field `seats` (array)
            for (const item of data['seats']) {
                Seats.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceProviderName'] && !(typeof data['serviceProviderName'] === 'string' || data['serviceProviderName'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got " + data['serviceProviderName']);
        }
        // validate the optional field `vehicle`
        if (data['vehicle']) { // data not null
          Vehicle.validateJSON(data['vehicle']);
        }

        return true;
    }


}



/**
 * @member {module:model/Arrival} arrival
 */
TrainData.prototype['arrival'] = undefined;

/**
 * Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.
 * @member {String} arrivalDateTime
 */
TrainData.prototype['arrivalDateTime'] = undefined;

/**
 * @member {String} arrivalTrack
 */
TrainData.prototype['arrivalTrack'] = undefined;

/**
 * Booking class
 * @member {String} bookingClass
 */
TrainData.prototype['bookingClass'] = undefined;

/**
 * Confirmation number
 * @member {String} confirmNbr
 */
TrainData.prototype['confirmNbr'] = undefined;

/**
 * @member {module:model/Departure} departure
 */
TrainData.prototype['departure'] = undefined;

/**
 * Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.
 * @member {String} departureDateTime
 */
TrainData.prototype['departureDateTime'] = undefined;

/**
 * @member {String} departureTrack
 */
TrainData.prototype['departureTrack'] = undefined;

/**
 * Duration in ISO 8601 / RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
 * @member {String} duration
 */
TrainData.prototype['duration'] = undefined;

/**
 * @member {Array.<module:model/Seats>} seats
 */
TrainData.prototype['seats'] = undefined;

/**
 * Provider name
 * @member {String} serviceProviderName
 */
TrainData.prototype['serviceProviderName'] = undefined;

/**
 * @member {module:model/Vehicle} vehicle
 */
TrainData.prototype['vehicle'] = undefined;






export default TrainData;

