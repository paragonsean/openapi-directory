/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociationRefs from './AssociationRefs';
import Seats from './Seats';

/**
 * The AirDataSeatsInner model module.
 * @module model/AirDataSeatsInner
 * @version 3.0.1
 */
class AirDataSeatsInner {
    /**
     * Constructs a new <code>AirDataSeatsInner</code>.
     * @alias module:model/AirDataSeatsInner
     * @implements module:model/Seats
     */
    constructor() { 
        Seats.initialize(this);
        AirDataSeatsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirDataSeatsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirDataSeatsInner} obj Optional instance to populate.
     * @return {module:model/AirDataSeatsInner} The populated <code>AirDataSeatsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirDataSeatsInner();
            Seats.constructFromObject(data, obj);

            if (data.hasOwnProperty('cabin')) {
                obj['cabin'] = ApiClient.convertToType(data['cabin'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('associationRefs')) {
                obj['associationRefs'] = ApiClient.convertToType(data['associationRefs'], [AssociationRefs]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirDataSeatsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirDataSeatsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cabin'] && !(typeof data['cabin'] === 'string' || data['cabin'] instanceof String)) {
            throw new Error("Expected the field `cabin` to be a primitive type in the JSON string but got " + data['cabin']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        if (data['associationRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associationRefs'])) {
                throw new Error("Expected the field `associationRefs` to be an array in the JSON data but got " + data['associationRefs']);
            }
            // validate the optional field `associationRefs` (array)
            for (const item of data['associationRefs']) {
                AssociationRefs.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Cabin code associated to the seat
 * @member {String} cabin
 */
AirDataSeatsInner.prototype['cabin'] = undefined;

/**
 * Seat number corresponding to the concatenation of the seatmap row and the column information, for example 12B'
 * @member {String} number
 */
AirDataSeatsInner.prototype['number'] = undefined;

/**
 * @member {Array.<module:model/AssociationRefs>} associationRefs
 */
AirDataSeatsInner.prototype['associationRefs'] = undefined;


// Implement Seats interface:
/**
 * Cabin code associated to the seat
 * @member {String} cabin
 */
Seats.prototype['cabin'] = undefined;
/**
 * Seat number corresponding to the concatenation of the seatmap row and the column information, for example 12B'
 * @member {String} number
 */
Seats.prototype['number'] = undefined;




export default AirDataSeatsInner;

