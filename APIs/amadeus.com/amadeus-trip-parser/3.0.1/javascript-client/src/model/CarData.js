/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociatedEquipments from './AssociatedEquipments';
import CarVehicle from './CarVehicle';
import Driver from './Driver';
import Dropoff from './Dropoff';
import Pickup from './Pickup';

/**
 * The CarData model module.
 * @module model/CarData
 * @version 3.0.1
 */
class CarData {
    /**
     * Constructs a new <code>CarData</code>.
     * Car Product
     * @alias module:model/CarData
     */
    constructor() { 
        
        CarData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CarData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CarData} obj Optional instance to populate.
     * @return {module:model/CarData} The populated <code>CarData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CarData();

            if (data.hasOwnProperty('associatedEquipments')) {
                obj['associatedEquipments'] = ApiClient.convertToType(data['associatedEquipments'], [AssociatedEquipments]);
            }
            if (data.hasOwnProperty('confirmationNumber')) {
                obj['confirmationNumber'] = ApiClient.convertToType(data['confirmationNumber'], 'String');
            }
            if (data.hasOwnProperty('driver')) {
                obj['driver'] = Driver.constructFromObject(data['driver']);
            }
            if (data.hasOwnProperty('dropoff')) {
                obj['dropoff'] = Dropoff.constructFromObject(data['dropoff']);
            }
            if (data.hasOwnProperty('pickup')) {
                obj['pickup'] = Pickup.constructFromObject(data['pickup']);
            }
            if (data.hasOwnProperty('serviceProviderName')) {
                obj['serviceProviderName'] = ApiClient.convertToType(data['serviceProviderName'], 'String');
            }
            if (data.hasOwnProperty('vehicle')) {
                obj['vehicle'] = CarVehicle.constructFromObject(data['vehicle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CarData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CarData</code>.
     */
    static validateJSON(data) {
        if (data['associatedEquipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associatedEquipments'])) {
                throw new Error("Expected the field `associatedEquipments` to be an array in the JSON data but got " + data['associatedEquipments']);
            }
            // validate the optional field `associatedEquipments` (array)
            for (const item of data['associatedEquipments']) {
                AssociatedEquipments.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['confirmationNumber'] && !(typeof data['confirmationNumber'] === 'string' || data['confirmationNumber'] instanceof String)) {
            throw new Error("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got " + data['confirmationNumber']);
        }
        // validate the optional field `driver`
        if (data['driver']) { // data not null
          Driver.validateJSON(data['driver']);
        }
        // validate the optional field `dropoff`
        if (data['dropoff']) { // data not null
          Dropoff.validateJSON(data['dropoff']);
        }
        // validate the optional field `pickup`
        if (data['pickup']) { // data not null
          Pickup.validateJSON(data['pickup']);
        }
        // ensure the json data is a string
        if (data['serviceProviderName'] && !(typeof data['serviceProviderName'] === 'string' || data['serviceProviderName'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got " + data['serviceProviderName']);
        }
        // validate the optional field `vehicle`
        if (data['vehicle']) { // data not null
          CarVehicle.validateJSON(data['vehicle']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AssociatedEquipments>} associatedEquipments
 */
CarData.prototype['associatedEquipments'] = undefined;

/**
 * Confirmation number
 * @member {String} confirmationNumber
 */
CarData.prototype['confirmationNumber'] = undefined;

/**
 * @member {module:model/Driver} driver
 */
CarData.prototype['driver'] = undefined;

/**
 * @member {module:model/Dropoff} dropoff
 */
CarData.prototype['dropoff'] = undefined;

/**
 * @member {module:model/Pickup} pickup
 */
CarData.prototype['pickup'] = undefined;

/**
 * car provider information(Car rental compay name)
 * @member {String} serviceProviderName
 */
CarData.prototype['serviceProviderName'] = undefined;

/**
 * @member {module:model/CarVehicle} vehicle
 */
CarData.prototype['vehicle'] = undefined;






export default CarData;

