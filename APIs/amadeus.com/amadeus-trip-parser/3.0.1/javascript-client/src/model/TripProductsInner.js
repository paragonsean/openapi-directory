/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Air from './Air';
import AirData from './AirData';
import Car from './Car';
import CarData from './CarData';
import Hotel from './Hotel';
import HotelData from './HotelData';
import Train from './Train';
import TrainData from './TrainData';

/**
 * The TripProductsInner model module.
 * @module model/TripProductsInner
 * @version 3.0.1
 */
class TripProductsInner {
    /**
     * Constructs a new <code>TripProductsInner</code>.
     * @alias module:model/TripProductsInner
     * @param {(module:model/Air|module:model/Car|module:model/Hotel|module:model/Train)} instance The actual instance to initialize TripProductsInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Air") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Air.validateJSON(instance); // throw an exception if no match
                // create Air from JS object
                this.actualInstance = Air.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Air
            errorMessages.push("Failed to construct Air: " + err)
        }

        try {
            if (typeof instance === "Hotel") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Hotel.validateJSON(instance); // throw an exception if no match
                // create Hotel from JS object
                this.actualInstance = Hotel.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Hotel
            errorMessages.push("Failed to construct Hotel: " + err)
        }

        try {
            if (typeof instance === "Car") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Car.validateJSON(instance); // throw an exception if no match
                // create Car from JS object
                this.actualInstance = Car.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Car
            errorMessages.push("Failed to construct Car: " + err)
        }

        try {
            if (typeof instance === "Train") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Train.validateJSON(instance); // throw an exception if no match
                // create Train from JS object
                this.actualInstance = Train.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Train
            errorMessages.push("Failed to construct Train: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TripProductsInner` with oneOf schemas Air, Car, Hotel, Train. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TripProductsInner` with oneOf schemas Air, Car, Hotel, Train. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TripProductsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TripProductsInner} obj Optional instance to populate.
     * @return {module:model/TripProductsInner} The populated <code>TripProductsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TripProductsInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>Air</code>, <code>Car</code>, <code>Hotel</code>, <code>Train</code>.
     * @return {(module:model/Air|module:model/Car|module:model/Hotel|module:model/Train)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Air</code>, <code>Car</code>, <code>Hotel</code>, <code>Train</code>.
     * @param {(module:model/Air|module:model/Car|module:model/Hotel|module:model/Train)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TripProductsInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TripProductsInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TripProductsInner} An instance of TripProductsInner.
     */
    static fromJSON = function(json_string){
        return TripProductsInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/AirData} air
 */
TripProductsInner.prototype['air'] = undefined;

/**
 * @member {module:model/HotelData} hotel
 */
TripProductsInner.prototype['hotel'] = undefined;

/**
 * @member {module:model/CarData} car
 */
TripProductsInner.prototype['car'] = undefined;

/**
 * @member {module:model/TrainData} train
 */
TripProductsInner.prototype['train'] = undefined;


TripProductsInner.OneOf = ["Air", "Car", "Hotel", "Train"];

export default TripProductsInner;

