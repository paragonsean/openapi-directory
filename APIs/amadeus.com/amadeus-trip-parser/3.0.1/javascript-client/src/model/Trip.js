/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import End from './End';
import Price from './Price';
import Stakeholder from './Stakeholder';
import Start from './Start';
import TravelAgency from './TravelAgency';
import TripProductsInner from './TripProductsInner';

/**
 * The Trip model module.
 * @module model/Trip
 * @version 3.0.1
 */
class Trip {
    /**
     * Constructs a new <code>Trip</code>.
     * @alias module:model/Trip
     */
    constructor() { 
        
        Trip.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trip} obj Optional instance to populate.
     * @return {module:model/Trip} The populated <code>Trip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trip();

            if (data.hasOwnProperty('bookingDate')) {
                obj['bookingDate'] = ApiClient.convertToType(data['bookingDate'], 'String');
            }
            if (data.hasOwnProperty('bookingNumber')) {
                obj['bookingNumber'] = ApiClient.convertToType(data['bookingNumber'], 'String');
            }
            if (data.hasOwnProperty('creationDateTime')) {
                obj['creationDateTime'] = ApiClient.convertToType(data['creationDateTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = End.constructFromObject(data['end']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [TripProductsInner]);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('stakeholders')) {
                obj['stakeholders'] = ApiClient.convertToType(data['stakeholders'], [Stakeholder]);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = Start.constructFromObject(data['start']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('travelAgency')) {
                obj['travelAgency'] = TravelAgency.constructFromObject(data['travelAgency']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trip</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bookingDate'] && !(typeof data['bookingDate'] === 'string' || data['bookingDate'] instanceof String)) {
            throw new Error("Expected the field `bookingDate` to be a primitive type in the JSON string but got " + data['bookingDate']);
        }
        // ensure the json data is a string
        if (data['bookingNumber'] && !(typeof data['bookingNumber'] === 'string' || data['bookingNumber'] instanceof String)) {
            throw new Error("Expected the field `bookingNumber` to be a primitive type in the JSON string but got " + data['bookingNumber']);
        }
        // ensure the json data is a string
        if (data['creationDateTime'] && !(typeof data['creationDateTime'] === 'string' || data['creationDateTime'] instanceof String)) {
            throw new Error("Expected the field `creationDateTime` to be a primitive type in the JSON string but got " + data['creationDateTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `end`
        if (data['end']) { // data not null
          End.validateJSON(data['end']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                TripProductsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        if (data['stakeholders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stakeholders'])) {
                throw new Error("Expected the field `stakeholders` to be an array in the JSON data but got " + data['stakeholders']);
            }
            // validate the optional field `stakeholders` (array)
            for (const item of data['stakeholders']) {
                Stakeholder.validateJSON(item);
            };
        }
        // validate the optional field `start`
        if (data['start']) { // data not null
          Start.validateJSON(data['start']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `travelAgency`
        if (data['travelAgency']) { // data not null
          TravelAgency.validateJSON(data['travelAgency']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * itinerary booking date
 * @member {String} bookingDate
 */
Trip.prototype['bookingDate'] = undefined;

/**
 * Ticket No(Specially for Air and Train segment)
 * @member {String} bookingNumber
 */
Trip.prototype['bookingNumber'] = undefined;

/**
 * Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00
 * @member {String} creationDateTime
 */
Trip.prototype['creationDateTime'] = undefined;

/**
 * Trip description
 * @member {String} description
 */
Trip.prototype['description'] = undefined;

/**
 * @member {module:model/End} end
 */
Trip.prototype['end'] = undefined;

/**
 * @member {module:model/Price} price
 */
Trip.prototype['price'] = undefined;

/**
 * @member {Array.<module:model/TripProductsInner>} products
 */
Trip.prototype['products'] = undefined;

/**
 * information of the booking provider
 * @member {String} provider
 */
Trip.prototype['provider'] = undefined;

/**
 * Reference of the Trip
 * @member {String} reference
 */
Trip.prototype['reference'] = undefined;

/**
 * @member {Array.<module:model/Stakeholder>} stakeholders
 */
Trip.prototype['stakeholders'] = undefined;

/**
 * @member {module:model/Start} start
 */
Trip.prototype['start'] = undefined;

/**
 * Trip label or name
 * @member {String} title
 */
Trip.prototype['title'] = undefined;

/**
 * @member {module:model/TravelAgency} travelAgency
 */
Trip.prototype['travelAgency'] = undefined;

/**
 * the resource name
 * @member {String} type
 */
Trip.prototype['type'] = undefined;






export default Trip;

