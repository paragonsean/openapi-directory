/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Aircraft model module.
 * @module model/Aircraft
 * @version 3.0.1
 */
class Aircraft {
    /**
     * Constructs a new <code>Aircraft</code>.
     * description of the aircraft equipment
     * @alias module:model/Aircraft
     */
    constructor() { 
        
        Aircraft.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aircraft</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aircraft} obj Optional instance to populate.
     * @return {module:model/Aircraft} The populated <code>Aircraft</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aircraft();

            if (data.hasOwnProperty('aircraftDescription')) {
                obj['aircraftDescription'] = ApiClient.convertToType(data['aircraftDescription'], 'String');
            }
            if (data.hasOwnProperty('aircraftType')) {
                obj['aircraftType'] = ApiClient.convertToType(data['aircraftType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aircraft</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aircraft</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aircraftDescription'] && !(typeof data['aircraftDescription'] === 'string' || data['aircraftDescription'] instanceof String)) {
            throw new Error("Expected the field `aircraftDescription` to be a primitive type in the JSON string but got " + data['aircraftDescription']);
        }
        // ensure the json data is a string
        if (data['aircraftType'] && !(typeof data['aircraftType'] === 'string' || data['aircraftType'] instanceof String)) {
            throw new Error("Expected the field `aircraftType` to be a primitive type in the JSON string but got " + data['aircraftType']);
        }

        return true;
    }


}



/**
 * aircraft description (ex BOEING 737 ALL SERIES PASSENGER)
 * @member {String} aircraftDescription
 */
Aircraft.prototype['aircraftDescription'] = undefined;

/**
 * aircraft type (ex 320, 777, ...)
 * @member {String} aircraftType
 */
Aircraft.prototype['aircraftType'] = undefined;






export default Aircraft;

