/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentEnvelopeMetaData model module.
 * @module model/DocumentEnvelopeMetaData
 * @version 3.0.1
 */
class DocumentEnvelopeMetaData {
    /**
     * Constructs a new <code>DocumentEnvelopeMetaData</code>.
     * Meta data associated to payload inside document envelope, helping to read/understand the DocumentEnvelope payload.
     * @alias module:model/DocumentEnvelopeMetaData
     */
    constructor() { 
        
        DocumentEnvelopeMetaData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentEnvelopeMetaData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentEnvelopeMetaData} obj Optional instance to populate.
     * @return {module:model/DocumentEnvelopeMetaData} The populated <code>DocumentEnvelopeMetaData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentEnvelopeMetaData();

            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentEnvelopeMetaData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentEnvelopeMetaData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Type of the document in the payload defined by the \"grammarOwner\"
 * @member {String} documentType
 */
DocumentEnvelopeMetaData.prototype['documentType'] = undefined;

/**
 * Example: BASE_64
 * @member {module:model/DocumentEnvelopeMetaData.EncodingEnum} encoding
 */
DocumentEnvelopeMetaData.prototype['encoding'] = undefined;

/**
 * Document name: name of the document in the payload (namespace, see domain)
 * @member {String} name
 */
DocumentEnvelopeMetaData.prototype['name'] = undefined;





/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
DocumentEnvelopeMetaData['EncodingEnum'] = {

    /**
     * value: "BASE_64"
     * @const
     */
    "64": "BASE_64",

    /**
     * value: "BASE_64_URL"
     * @const
     */
    "64_URL": "BASE_64_URL"
};



export default DocumentEnvelopeMetaData;

