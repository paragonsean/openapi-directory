/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Name from './Name';

/**
 * The Stakeholder model module.
 * @module model/Stakeholder
 * @version 3.0.1
 */
class Stakeholder {
    /**
     * Constructs a new <code>Stakeholder</code>.
     * Definition of PNR travelers. Fields gender, nationality, placeOfBirth, countryOfResidence are only populated for passengerDelivery resources.
     * @alias module:model/Stakeholder
     */
    constructor() { 
        
        Stakeholder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Stakeholder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stakeholder} obj Optional instance to populate.
     * @return {module:model/Stakeholder} The populated <code>Stakeholder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stakeholder();

            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('passangerTypeCode')) {
                obj['passangerTypeCode'] = ApiClient.convertToType(data['passangerTypeCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stakeholder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stakeholder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dateOfBirth'] && !(typeof data['dateOfBirth'] === 'string' || data['dateOfBirth'] instanceof String)) {
            throw new Error("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got " + data['dateOfBirth']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // ensure the json data is a string
        if (data['passangerTypeCode'] && !(typeof data['passangerTypeCode'] === 'string' || data['passangerTypeCode'] instanceof String)) {
            throw new Error("Expected the field `passangerTypeCode` to be a primitive type in the JSON string but got " + data['passangerTypeCode']);
        }

        return true;
    }


}



/**
 * Current age of the individual.
 * @member {Number} age
 */
Stakeholder.prototype['age'] = undefined;

/**
 * The individual's date of birth.
 * @member {String} dateOfBirth
 */
Stakeholder.prototype['dateOfBirth'] = undefined;

/**
 * item identifier
 * @member {String} id
 */
Stakeholder.prototype['id'] = undefined;

/**
 * @member {module:model/Name} name
 */
Stakeholder.prototype['name'] = undefined;

/**
 * Nationality of the Stakeholder
 * @member {String} nationality
 */
Stakeholder.prototype['nationality'] = undefined;

/**
 * 3-characters code defining the passenger type - possible values: ADT, CHD, INS, INF, UNA
 * @member {String} passangerTypeCode
 */
Stakeholder.prototype['passangerTypeCode'] = undefined;






export default Stakeholder;

