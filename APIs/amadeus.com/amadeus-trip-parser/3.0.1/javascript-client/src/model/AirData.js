/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirDataSeatsInner from './AirDataSeatsInner';
import Aircraft from './Aircraft';
import ArrivalAir from './ArrivalAir';
import ArrivalAirportLocation from './ArrivalAirportLocation';
import Baggages from './Baggages';
import DepartureAir from './DepartureAir';
import DepartureAirportLocation from './DepartureAirportLocation';
import Marketing from './Marketing';
import Meal from './Meal';
import Operating from './Operating';

/**
 * The AirData model module.
 * @module model/AirData
 * @version 3.0.1
 */
class AirData {
    /**
     * Constructs a new <code>AirData</code>.
     * 
     * @alias module:model/AirData
     */
    constructor() { 
        
        AirData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AirData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirData} obj Optional instance to populate.
     * @return {module:model/AirData} The populated <code>AirData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirData();

            if (data.hasOwnProperty('aircraft')) {
                obj['aircraft'] = Aircraft.constructFromObject(data['aircraft']);
            }
            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = ArrivalAir.constructFromObject(data['arrival']);
            }
            if (data.hasOwnProperty('arrivalAirportLocation')) {
                obj['arrivalAirportLocation'] = ArrivalAirportLocation.constructFromObject(data['arrivalAirportLocation']);
            }
            if (data.hasOwnProperty('baggages')) {
                obj['baggages'] = Baggages.constructFromObject(data['baggages']);
            }
            if (data.hasOwnProperty('confirmationNumber')) {
                obj['confirmationNumber'] = ApiClient.convertToType(data['confirmationNumber'], 'String');
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = DepartureAir.constructFromObject(data['departure']);
            }
            if (data.hasOwnProperty('departureAirportLocation')) {
                obj['departureAirportLocation'] = DepartureAirportLocation.constructFromObject(data['departureAirportLocation']);
            }
            if (data.hasOwnProperty('marketing')) {
                obj['marketing'] = Marketing.constructFromObject(data['marketing']);
            }
            if (data.hasOwnProperty('meal')) {
                obj['meal'] = Meal.constructFromObject(data['meal']);
            }
            if (data.hasOwnProperty('operating')) {
                obj['operating'] = Operating.constructFromObject(data['operating']);
            }
            if (data.hasOwnProperty('seats')) {
                obj['seats'] = ApiClient.convertToType(data['seats'], [AirDataSeatsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aircraft`
        if (data['aircraft']) { // data not null
          Aircraft.validateJSON(data['aircraft']);
        }
        // validate the optional field `arrival`
        if (data['arrival']) { // data not null
          ArrivalAir.validateJSON(data['arrival']);
        }
        // validate the optional field `arrivalAirportLocation`
        if (data['arrivalAirportLocation']) { // data not null
          ArrivalAirportLocation.validateJSON(data['arrivalAirportLocation']);
        }
        // validate the optional field `baggages`
        if (data['baggages']) { // data not null
          Baggages.validateJSON(data['baggages']);
        }
        // ensure the json data is a string
        if (data['confirmationNumber'] && !(typeof data['confirmationNumber'] === 'string' || data['confirmationNumber'] instanceof String)) {
            throw new Error("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got " + data['confirmationNumber']);
        }
        // validate the optional field `departure`
        if (data['departure']) { // data not null
          DepartureAir.validateJSON(data['departure']);
        }
        // validate the optional field `departureAirportLocation`
        if (data['departureAirportLocation']) { // data not null
          DepartureAirportLocation.validateJSON(data['departureAirportLocation']);
        }
        // validate the optional field `marketing`
        if (data['marketing']) { // data not null
          Marketing.validateJSON(data['marketing']);
        }
        // validate the optional field `meal`
        if (data['meal']) { // data not null
          Meal.validateJSON(data['meal']);
        }
        // validate the optional field `operating`
        if (data['operating']) { // data not null
          Operating.validateJSON(data['operating']);
        }
        if (data['seats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seats'])) {
                throw new Error("Expected the field `seats` to be an array in the JSON data but got " + data['seats']);
            }
            // validate the optional field `seats` (array)
            for (const item of data['seats']) {
                AirDataSeatsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Aircraft} aircraft
 */
AirData.prototype['aircraft'] = undefined;

/**
 * @member {module:model/ArrivalAir} arrival
 */
AirData.prototype['arrival'] = undefined;

/**
 * @member {module:model/ArrivalAirportLocation} arrivalAirportLocation
 */
AirData.prototype['arrivalAirportLocation'] = undefined;

/**
 * @member {module:model/Baggages} baggages
 */
AirData.prototype['baggages'] = undefined;

/**
 * @member {String} confirmationNumber
 */
AirData.prototype['confirmationNumber'] = undefined;

/**
 * @member {module:model/DepartureAir} departure
 */
AirData.prototype['departure'] = undefined;

/**
 * @member {module:model/DepartureAirportLocation} departureAirportLocation
 */
AirData.prototype['departureAirportLocation'] = undefined;

/**
 * @member {module:model/Marketing} marketing
 */
AirData.prototype['marketing'] = undefined;

/**
 * @member {module:model/Meal} meal
 */
AirData.prototype['meal'] = undefined;

/**
 * @member {module:model/Operating} operating
 */
AirData.prototype['operating'] = undefined;

/**
 * @member {Array.<module:model/AirDataSeatsInner>} seats
 */
AirData.prototype['seats'] = undefined;






export default AirData;

