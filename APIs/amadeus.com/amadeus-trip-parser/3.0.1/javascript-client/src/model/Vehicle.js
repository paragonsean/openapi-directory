/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Vehicle model module.
 * @module model/Vehicle
 * @version 3.0.1
 */
class Vehicle {
    /**
     * Constructs a new <code>Vehicle</code>.
     * Vehicle describes the transportation means e.g. a Train, a Bus, etc. It may be further characterized, in the case of a Train, it contains the Train Number, Code etc.
     * @alias module:model/Vehicle
     */
    constructor() { 
        
        Vehicle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vehicle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vehicle} obj Optional instance to populate.
     * @return {module:model/Vehicle} The populated <code>Vehicle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vehicle();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('vehicleType')) {
                obj['vehicleType'] = ApiClient.convertToType(data['vehicleType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vehicle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vehicle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['vehicleType'] && !(typeof data['vehicleType'] === 'string' || data['vehicleType'] instanceof String)) {
            throw new Error("Expected the field `vehicleType` to be a primitive type in the JSON string but got " + data['vehicleType']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
Vehicle.prototype['code'] = undefined;

/**
 * @member {String} displayName
 */
Vehicle.prototype['displayName'] = undefined;

/**
 * @member {String} number
 */
Vehicle.prototype['number'] = undefined;

/**
 * Code (codelist TVT) for the generic transport service returned, e.g. High speed, Intercities, Night and so on
 * @member {String} vehicleType
 */
Vehicle.prototype['vehicleType'] = undefined;






export default Vehicle;

