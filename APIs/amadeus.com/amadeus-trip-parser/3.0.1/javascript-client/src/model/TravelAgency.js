/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Email from './Email';
import Phone from './Phone';

/**
 * The TravelAgency model module.
 * @module model/TravelAgency
 * @version 3.0.1
 */
class TravelAgency {
    /**
     * Constructs a new <code>TravelAgency</code>.
     * details on the travel agency owning the trip
     * @alias module:model/TravelAgency
     */
    constructor() { 
        
        TravelAgency.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TravelAgency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TravelAgency} obj Optional instance to populate.
     * @return {module:model/TravelAgency} The populated <code>TravelAgency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TravelAgency();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = Email.constructFromObject(data['email']);
            }
            if (data.hasOwnProperty('officeName')) {
                obj['officeName'] = ApiClient.convertToType(data['officeName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = Phone.constructFromObject(data['phone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TravelAgency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TravelAgency</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `email`
        if (data['email']) { // data not null
          Email.validateJSON(data['email']);
        }
        // ensure the json data is a string
        if (data['officeName'] && !(typeof data['officeName'] === 'string' || data['officeName'] instanceof String)) {
            throw new Error("Expected the field `officeName` to be a primitive type in the JSON string but got " + data['officeName']);
        }
        // validate the optional field `phone`
        if (data['phone']) { // data not null
          Phone.validateJSON(data['phone']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
TravelAgency.prototype['address'] = undefined;

/**
 * @member {module:model/Email} email
 */
TravelAgency.prototype['email'] = undefined;

/**
 * Office name of the travel agency
 * @member {String} officeName
 */
TravelAgency.prototype['officeName'] = undefined;

/**
 * @member {module:model/Phone} phone
 */
TravelAgency.prototype['phone'] = undefined;






export default TravelAgency;

