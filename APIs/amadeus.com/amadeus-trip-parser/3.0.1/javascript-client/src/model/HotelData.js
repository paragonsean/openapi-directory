/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import ContactHotel from './ContactHotel';
import Description from './Description';
import Guests from './Guests';
import Policies from './Policies';
import Room from './Room';

/**
 * The HotelData model module.
 * @module model/HotelData
 * @version 3.0.1
 */
class HotelData {
    /**
     * Constructs a new <code>HotelData</code>.
     *   Hotel product
     * @alias module:model/HotelData
     */
    constructor() { 
        
        HotelData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotelData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelData} obj Optional instance to populate.
     * @return {module:model/HotelData} The populated <code>HotelData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelData();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('amenities')) {
                obj['amenities'] = ApiClient.convertToType(data['amenities'], ['String']);
            }
            if (data.hasOwnProperty('checkInDate')) {
                obj['checkInDate'] = ApiClient.convertToType(data['checkInDate'], 'String');
            }
            if (data.hasOwnProperty('checkOutDate')) {
                obj['checkOutDate'] = ApiClient.convertToType(data['checkOutDate'], 'String');
            }
            if (data.hasOwnProperty('confirmationNumber')) {
                obj['confirmationNumber'] = ApiClient.convertToType(data['confirmationNumber'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ContactHotel.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = Description.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = Guests.constructFromObject(data['guests']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = Policies.constructFromObject(data['policies']);
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = Room.constructFromObject(data['room']);
            }
            if (data.hasOwnProperty('roomQuantity')) {
                obj['roomQuantity'] = ApiClient.convertToType(data['roomQuantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['amenities'])) {
            throw new Error("Expected the field `amenities` to be an array in the JSON data but got " + data['amenities']);
        }
        // ensure the json data is a string
        if (data['checkInDate'] && !(typeof data['checkInDate'] === 'string' || data['checkInDate'] instanceof String)) {
            throw new Error("Expected the field `checkInDate` to be a primitive type in the JSON string but got " + data['checkInDate']);
        }
        // ensure the json data is a string
        if (data['checkOutDate'] && !(typeof data['checkOutDate'] === 'string' || data['checkOutDate'] instanceof String)) {
            throw new Error("Expected the field `checkOutDate` to be a primitive type in the JSON string but got " + data['checkOutDate']);
        }
        // ensure the json data is a string
        if (data['confirmationNumber'] && !(typeof data['confirmationNumber'] === 'string' || data['confirmationNumber'] instanceof String)) {
            throw new Error("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got " + data['confirmationNumber']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          ContactHotel.validateJSON(data['contact']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          Description.validateJSON(data['description']);
        }
        // validate the optional field `guests`
        if (data['guests']) { // data not null
          Guests.validateJSON(data['guests']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `policies`
        if (data['policies']) { // data not null
          Policies.validateJSON(data['policies']);
        }
        // validate the optional field `room`
        if (data['room']) { // data not null
          Room.validateJSON(data['room']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
HotelData.prototype['address'] = undefined;

/**
 * amenities (list)
 * @member {Array.<String>} amenities
 */
HotelData.prototype['amenities'] = undefined;

/**
 * heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).
 * @member {String} checkInDate
 */
HotelData.prototype['checkInDate'] = undefined;

/**
 * check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.
 * @member {String} checkOutDate
 */
HotelData.prototype['checkOutDate'] = undefined;

/**
 * Confirmation number
 * @member {String} confirmationNumber
 */
HotelData.prototype['confirmationNumber'] = undefined;

/**
 * @member {module:model/ContactHotel} contact
 */
HotelData.prototype['contact'] = undefined;

/**
 * @member {module:model/Description} description
 */
HotelData.prototype['description'] = undefined;

/**
 * @member {module:model/Guests} guests
 */
HotelData.prototype['guests'] = undefined;

/**
 * Hotel Name
 * @member {String} name
 */
HotelData.prototype['name'] = undefined;

/**
 * @member {module:model/Policies} policies
 */
HotelData.prototype['policies'] = undefined;

/**
 * @member {module:model/Room} room
 */
HotelData.prototype['room'] = undefined;

/**
 * number of rooms (1-9)
 * @member {Number} roomQuantity
 */
HotelData.prototype['roomQuantity'] = undefined;






export default HotelData;

