/**
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TripParser);
  }
}(this, function(expect, TripParser) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TripParser.AirData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AirData', function() {
    it('should create an instance of AirData', function() {
      // uncomment below and update the code to test AirData
      //var instance = new TripParser.AirData();
      //expect(instance).to.be.a(TripParser.AirData);
    });

    it('should have the property aircraft (base name: "aircraft")', function() {
      // uncomment below and update the code to test the property aircraft
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property arrival (base name: "arrival")', function() {
      // uncomment below and update the code to test the property arrival
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property arrivalAirportLocation (base name: "arrivalAirportLocation")', function() {
      // uncomment below and update the code to test the property arrivalAirportLocation
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property baggages (base name: "baggages")', function() {
      // uncomment below and update the code to test the property baggages
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property confirmationNumber (base name: "confirmationNumber")', function() {
      // uncomment below and update the code to test the property confirmationNumber
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property departure (base name: "departure")', function() {
      // uncomment below and update the code to test the property departure
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property departureAirportLocation (base name: "departureAirportLocation")', function() {
      // uncomment below and update the code to test the property departureAirportLocation
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property marketing (base name: "marketing")', function() {
      // uncomment below and update the code to test the property marketing
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property meal (base name: "meal")', function() {
      // uncomment below and update the code to test the property meal
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property operating (base name: "operating")', function() {
      // uncomment below and update the code to test the property operating
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

    it('should have the property seats (base name: "seats")', function() {
      // uncomment below and update the code to test the property seats
      //var instance = new TripParser.AirData();
      //expect(instance).to.be();
    });

  });

}));
