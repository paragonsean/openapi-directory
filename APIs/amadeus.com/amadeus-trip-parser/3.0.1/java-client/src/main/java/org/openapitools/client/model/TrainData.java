/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Arrival;
import org.openapitools.client.model.Departure;
import org.openapitools.client.model.Seats;
import org.openapitools.client.model.Vehicle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Train Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainData {
  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  private Arrival arrival;

  public static final String SERIALIZED_NAME_ARRIVAL_DATE_TIME = "arrivalDateTime";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_DATE_TIME)
  private String arrivalDateTime;

  public static final String SERIALIZED_NAME_ARRIVAL_TRACK = "arrivalTrack";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_TRACK)
  private String arrivalTrack;

  public static final String SERIALIZED_NAME_BOOKING_CLASS = "bookingClass";
  @SerializedName(SERIALIZED_NAME_BOOKING_CLASS)
  private String bookingClass;

  public static final String SERIALIZED_NAME_CONFIRM_NBR = "confirmNbr";
  @SerializedName(SERIALIZED_NAME_CONFIRM_NBR)
  private String confirmNbr;

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  private Departure departure;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE_TIME = "departureDateTime";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE_TIME)
  private String departureDateTime;

  public static final String SERIALIZED_NAME_DEPARTURE_TRACK = "departureTrack";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_TRACK)
  private String departureTrack;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private List<Seats> seats = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private Vehicle vehicle;

  public TrainData() {
  }

  public TrainData arrival(Arrival arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * Get arrival
   * @return arrival
   */
  @javax.annotation.Nullable
  public Arrival getArrival() {
    return arrival;
  }

  public void setArrival(Arrival arrival) {
    this.arrival = arrival;
  }


  public TrainData arrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

  /**
   * Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.
   * @return arrivalDateTime
   */
  @javax.annotation.Nullable
  public String getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }


  public TrainData arrivalTrack(String arrivalTrack) {
    this.arrivalTrack = arrivalTrack;
    return this;
  }

  /**
   * Get arrivalTrack
   * @return arrivalTrack
   */
  @javax.annotation.Nullable
  public String getArrivalTrack() {
    return arrivalTrack;
  }

  public void setArrivalTrack(String arrivalTrack) {
    this.arrivalTrack = arrivalTrack;
  }


  public TrainData bookingClass(String bookingClass) {
    this.bookingClass = bookingClass;
    return this;
  }

  /**
   * Booking class
   * @return bookingClass
   */
  @javax.annotation.Nullable
  public String getBookingClass() {
    return bookingClass;
  }

  public void setBookingClass(String bookingClass) {
    this.bookingClass = bookingClass;
  }


  public TrainData confirmNbr(String confirmNbr) {
    this.confirmNbr = confirmNbr;
    return this;
  }

  /**
   * Confirmation number
   * @return confirmNbr
   */
  @javax.annotation.Nullable
  public String getConfirmNbr() {
    return confirmNbr;
  }

  public void setConfirmNbr(String confirmNbr) {
    this.confirmNbr = confirmNbr;
  }


  public TrainData departure(Departure departure) {
    this.departure = departure;
    return this;
  }

  /**
   * Get departure
   * @return departure
   */
  @javax.annotation.Nullable
  public Departure getDeparture() {
    return departure;
  }

  public void setDeparture(Departure departure) {
    this.departure = departure;
  }


  public TrainData departureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

  /**
   * Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.
   * @return departureDateTime
   */
  @javax.annotation.Nullable
  public String getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
  }


  public TrainData departureTrack(String departureTrack) {
    this.departureTrack = departureTrack;
    return this;
  }

  /**
   * Get departureTrack
   * @return departureTrack
   */
  @javax.annotation.Nullable
  public String getDepartureTrack() {
    return departureTrack;
  }

  public void setDepartureTrack(String departureTrack) {
    this.departureTrack = departureTrack;
  }


  public TrainData duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration in ISO 8601 / RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public TrainData seats(List<Seats> seats) {
    this.seats = seats;
    return this;
  }

  public TrainData addSeatsItem(Seats seatsItem) {
    if (this.seats == null) {
      this.seats = new ArrayList<>();
    }
    this.seats.add(seatsItem);
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public List<Seats> getSeats() {
    return seats;
  }

  public void setSeats(List<Seats> seats) {
    this.seats = seats;
  }


  public TrainData serviceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
    return this;
  }

  /**
   * Provider name
   * @return serviceProviderName
   */
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }

  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }


  public TrainData vehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public Vehicle getVehicle() {
    return vehicle;
  }

  public void setVehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainData trainData = (TrainData) o;
    return Objects.equals(this.arrival, trainData.arrival) &&
        Objects.equals(this.arrivalDateTime, trainData.arrivalDateTime) &&
        Objects.equals(this.arrivalTrack, trainData.arrivalTrack) &&
        Objects.equals(this.bookingClass, trainData.bookingClass) &&
        Objects.equals(this.confirmNbr, trainData.confirmNbr) &&
        Objects.equals(this.departure, trainData.departure) &&
        Objects.equals(this.departureDateTime, trainData.departureDateTime) &&
        Objects.equals(this.departureTrack, trainData.departureTrack) &&
        Objects.equals(this.duration, trainData.duration) &&
        Objects.equals(this.seats, trainData.seats) &&
        Objects.equals(this.serviceProviderName, trainData.serviceProviderName) &&
        Objects.equals(this.vehicle, trainData.vehicle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrival, arrivalDateTime, arrivalTrack, bookingClass, confirmNbr, departure, departureDateTime, departureTrack, duration, seats, serviceProviderName, vehicle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainData {\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    arrivalTrack: ").append(toIndentedString(arrivalTrack)).append("\n");
    sb.append("    bookingClass: ").append(toIndentedString(bookingClass)).append("\n");
    sb.append("    confirmNbr: ").append(toIndentedString(confirmNbr)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("    departureTrack: ").append(toIndentedString(departureTrack)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrival");
    openapiFields.add("arrivalDateTime");
    openapiFields.add("arrivalTrack");
    openapiFields.add("bookingClass");
    openapiFields.add("confirmNbr");
    openapiFields.add("departure");
    openapiFields.add("departureDateTime");
    openapiFields.add("departureTrack");
    openapiFields.add("duration");
    openapiFields.add("seats");
    openapiFields.add("serviceProviderName");
    openapiFields.add("vehicle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainData is not found in the empty JSON string", TrainData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrival`
      if (jsonObj.get("arrival") != null && !jsonObj.get("arrival").isJsonNull()) {
        Arrival.validateJsonElement(jsonObj.get("arrival"));
      }
      if ((jsonObj.get("arrivalDateTime") != null && !jsonObj.get("arrivalDateTime").isJsonNull()) && !jsonObj.get("arrivalDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrivalDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrivalDateTime").toString()));
      }
      if ((jsonObj.get("arrivalTrack") != null && !jsonObj.get("arrivalTrack").isJsonNull()) && !jsonObj.get("arrivalTrack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrivalTrack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrivalTrack").toString()));
      }
      if ((jsonObj.get("bookingClass") != null && !jsonObj.get("bookingClass").isJsonNull()) && !jsonObj.get("bookingClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingClass").toString()));
      }
      if ((jsonObj.get("confirmNbr") != null && !jsonObj.get("confirmNbr").isJsonNull()) && !jsonObj.get("confirmNbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmNbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmNbr").toString()));
      }
      // validate the optional field `departure`
      if (jsonObj.get("departure") != null && !jsonObj.get("departure").isJsonNull()) {
        Departure.validateJsonElement(jsonObj.get("departure"));
      }
      if ((jsonObj.get("departureDateTime") != null && !jsonObj.get("departureDateTime").isJsonNull()) && !jsonObj.get("departureDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departureDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departureDateTime").toString()));
      }
      if ((jsonObj.get("departureTrack") != null && !jsonObj.get("departureTrack").isJsonNull()) && !jsonObj.get("departureTrack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departureTrack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departureTrack").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        JsonArray jsonArrayseats = jsonObj.getAsJsonArray("seats");
        if (jsonArrayseats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seats` to be an array in the JSON string but got `%s`", jsonObj.get("seats").toString()));
          }

          // validate the optional field `seats` (array)
          for (int i = 0; i < jsonArrayseats.size(); i++) {
            Seats.validateJsonElement(jsonArrayseats.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        Vehicle.validateJsonElement(jsonObj.get("vehicle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainData.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainData>() {
           @Override
           public void write(JsonWriter out, TrainData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainData
   * @throws IOException if the JSON string is invalid with respect to TrainData
   */
  public static TrainData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainData.class);
  }

  /**
   * Convert an instance of TrainData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

