/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.End;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Stakeholder;
import org.openapitools.client.model.Start;
import org.openapitools.client.model.TravelAgency;
import org.openapitools.client.model.TripProductsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trip {
  public static final String SERIALIZED_NAME_BOOKING_DATE = "bookingDate";
  @SerializedName(SERIALIZED_NAME_BOOKING_DATE)
  private String bookingDate;

  public static final String SERIALIZED_NAME_BOOKING_NUMBER = "bookingNumber";
  @SerializedName(SERIALIZED_NAME_BOOKING_NUMBER)
  private String bookingNumber;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private String creationDateTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private End end;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<TripProductsInner> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_STAKEHOLDERS = "stakeholders";
  @SerializedName(SERIALIZED_NAME_STAKEHOLDERS)
  private List<Stakeholder> stakeholders = new ArrayList<>();

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Start start;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRAVEL_AGENCY = "travelAgency";
  @SerializedName(SERIALIZED_NAME_TRAVEL_AGENCY)
  private TravelAgency travelAgency;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Trip() {
  }

  public Trip bookingDate(String bookingDate) {
    this.bookingDate = bookingDate;
    return this;
  }

  /**
   * itinerary booking date
   * @return bookingDate
   */
  @javax.annotation.Nullable
  public String getBookingDate() {
    return bookingDate;
  }

  public void setBookingDate(String bookingDate) {
    this.bookingDate = bookingDate;
  }


  public Trip bookingNumber(String bookingNumber) {
    this.bookingNumber = bookingNumber;
    return this;
  }

  /**
   * Ticket No(Specially for Air and Train segment)
   * @return bookingNumber
   */
  @javax.annotation.Nullable
  public String getBookingNumber() {
    return bookingNumber;
  }

  public void setBookingNumber(String bookingNumber) {
    this.bookingNumber = bookingNumber;
  }


  public Trip creationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public String getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public Trip description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Trip description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Trip end(End end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public End getEnd() {
    return end;
  }

  public void setEnd(End end) {
    this.end = end;
  }


  public Trip price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public Trip products(List<TripProductsInner> products) {
    this.products = products;
    return this;
  }

  public Trip addProductsItem(TripProductsInner productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public List<TripProductsInner> getProducts() {
    return products;
  }

  public void setProducts(List<TripProductsInner> products) {
    this.products = products;
  }


  public Trip provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * information of the booking provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Trip reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Reference of the Trip
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Trip stakeholders(List<Stakeholder> stakeholders) {
    this.stakeholders = stakeholders;
    return this;
  }

  public Trip addStakeholdersItem(Stakeholder stakeholdersItem) {
    if (this.stakeholders == null) {
      this.stakeholders = new ArrayList<>();
    }
    this.stakeholders.add(stakeholdersItem);
    return this;
  }

  /**
   * Get stakeholders
   * @return stakeholders
   */
  @javax.annotation.Nullable
  public List<Stakeholder> getStakeholders() {
    return stakeholders;
  }

  public void setStakeholders(List<Stakeholder> stakeholders) {
    this.stakeholders = stakeholders;
  }


  public Trip start(Start start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Start getStart() {
    return start;
  }

  public void setStart(Start start) {
    this.start = start;
  }


  public Trip title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Trip label or name
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Trip travelAgency(TravelAgency travelAgency) {
    this.travelAgency = travelAgency;
    return this;
  }

  /**
   * Get travelAgency
   * @return travelAgency
   */
  @javax.annotation.Nullable
  public TravelAgency getTravelAgency() {
    return travelAgency;
  }

  public void setTravelAgency(TravelAgency travelAgency) {
    this.travelAgency = travelAgency;
  }


  public Trip type(String type) {
    this.type = type;
    return this;
  }

  /**
   * the resource name
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trip trip = (Trip) o;
    return Objects.equals(this.bookingDate, trip.bookingDate) &&
        Objects.equals(this.bookingNumber, trip.bookingNumber) &&
        Objects.equals(this.creationDateTime, trip.creationDateTime) &&
        Objects.equals(this.description, trip.description) &&
        Objects.equals(this.end, trip.end) &&
        Objects.equals(this.price, trip.price) &&
        Objects.equals(this.products, trip.products) &&
        Objects.equals(this.provider, trip.provider) &&
        Objects.equals(this.reference, trip.reference) &&
        Objects.equals(this.stakeholders, trip.stakeholders) &&
        Objects.equals(this.start, trip.start) &&
        Objects.equals(this.title, trip.title) &&
        Objects.equals(this.travelAgency, trip.travelAgency) &&
        Objects.equals(this.type, trip.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingDate, bookingNumber, creationDateTime, description, end, price, products, provider, reference, stakeholders, start, title, travelAgency, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trip {\n");
    sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
    sb.append("    bookingNumber: ").append(toIndentedString(bookingNumber)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    stakeholders: ").append(toIndentedString(stakeholders)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    travelAgency: ").append(toIndentedString(travelAgency)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookingDate");
    openapiFields.add("bookingNumber");
    openapiFields.add("creationDateTime");
    openapiFields.add("description");
    openapiFields.add("end");
    openapiFields.add("price");
    openapiFields.add("products");
    openapiFields.add("provider");
    openapiFields.add("reference");
    openapiFields.add("stakeholders");
    openapiFields.add("start");
    openapiFields.add("title");
    openapiFields.add("travelAgency");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trip is not found in the empty JSON string", Trip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bookingDate") != null && !jsonObj.get("bookingDate").isJsonNull()) && !jsonObj.get("bookingDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingDate").toString()));
      }
      if ((jsonObj.get("bookingNumber") != null && !jsonObj.get("bookingNumber").isJsonNull()) && !jsonObj.get("bookingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingNumber").toString()));
      }
      if ((jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) && !jsonObj.get("creationDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDateTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        End.validateJsonElement(jsonObj.get("end"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            TripProductsInner.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (jsonObj.get("stakeholders") != null && !jsonObj.get("stakeholders").isJsonNull()) {
        JsonArray jsonArraystakeholders = jsonObj.getAsJsonArray("stakeholders");
        if (jsonArraystakeholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stakeholders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stakeholders` to be an array in the JSON string but got `%s`", jsonObj.get("stakeholders").toString()));
          }

          // validate the optional field `stakeholders` (array)
          for (int i = 0; i < jsonArraystakeholders.size(); i++) {
            Stakeholder.validateJsonElement(jsonArraystakeholders.get(i));
          };
        }
      }
      // validate the optional field `start`
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) {
        Start.validateJsonElement(jsonObj.get("start"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `travelAgency`
      if (jsonObj.get("travelAgency") != null && !jsonObj.get("travelAgency").isJsonNull()) {
        TravelAgency.validateJsonElement(jsonObj.get("travelAgency"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trip.class));

       return (TypeAdapter<T>) new TypeAdapter<Trip>() {
           @Override
           public void write(JsonWriter out, Trip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trip
   * @throws IOException if the JSON string is invalid with respect to Trip
   */
  public static Trip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trip.class);
  }

  /**
   * Convert an instance of Trip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

