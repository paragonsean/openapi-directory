/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssociatedEquipments;
import org.openapitools.client.model.CarVehicle;
import org.openapitools.client.model.Driver;
import org.openapitools.client.model.Dropoff;
import org.openapitools.client.model.Pickup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Car Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarData {
  public static final String SERIALIZED_NAME_ASSOCIATED_EQUIPMENTS = "associatedEquipments";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_EQUIPMENTS)
  private List<AssociatedEquipments> associatedEquipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIRMATION_NUMBER = "confirmationNumber";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_NUMBER)
  private String confirmationNumber;

  public static final String SERIALIZED_NAME_DRIVER = "driver";
  @SerializedName(SERIALIZED_NAME_DRIVER)
  private Driver driver;

  public static final String SERIALIZED_NAME_DROPOFF = "dropoff";
  @SerializedName(SERIALIZED_NAME_DROPOFF)
  private Dropoff dropoff;

  public static final String SERIALIZED_NAME_PICKUP = "pickup";
  @SerializedName(SERIALIZED_NAME_PICKUP)
  private Pickup pickup;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private CarVehicle vehicle;

  public CarData() {
  }

  public CarData associatedEquipments(List<AssociatedEquipments> associatedEquipments) {
    this.associatedEquipments = associatedEquipments;
    return this;
  }

  public CarData addAssociatedEquipmentsItem(AssociatedEquipments associatedEquipmentsItem) {
    if (this.associatedEquipments == null) {
      this.associatedEquipments = new ArrayList<>();
    }
    this.associatedEquipments.add(associatedEquipmentsItem);
    return this;
  }

  /**
   * Get associatedEquipments
   * @return associatedEquipments
   */
  @javax.annotation.Nullable
  public List<AssociatedEquipments> getAssociatedEquipments() {
    return associatedEquipments;
  }

  public void setAssociatedEquipments(List<AssociatedEquipments> associatedEquipments) {
    this.associatedEquipments = associatedEquipments;
  }


  public CarData confirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
    return this;
  }

  /**
   * Confirmation number
   * @return confirmationNumber
   */
  @javax.annotation.Nullable
  public String getConfirmationNumber() {
    return confirmationNumber;
  }

  public void setConfirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
  }


  public CarData driver(Driver driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Get driver
   * @return driver
   */
  @javax.annotation.Nullable
  public Driver getDriver() {
    return driver;
  }

  public void setDriver(Driver driver) {
    this.driver = driver;
  }


  public CarData dropoff(Dropoff dropoff) {
    this.dropoff = dropoff;
    return this;
  }

  /**
   * Get dropoff
   * @return dropoff
   */
  @javax.annotation.Nullable
  public Dropoff getDropoff() {
    return dropoff;
  }

  public void setDropoff(Dropoff dropoff) {
    this.dropoff = dropoff;
  }


  public CarData pickup(Pickup pickup) {
    this.pickup = pickup;
    return this;
  }

  /**
   * Get pickup
   * @return pickup
   */
  @javax.annotation.Nullable
  public Pickup getPickup() {
    return pickup;
  }

  public void setPickup(Pickup pickup) {
    this.pickup = pickup;
  }


  public CarData serviceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
    return this;
  }

  /**
   * car provider information(Car rental compay name)
   * @return serviceProviderName
   */
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }

  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }


  public CarData vehicle(CarVehicle vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public CarVehicle getVehicle() {
    return vehicle;
  }

  public void setVehicle(CarVehicle vehicle) {
    this.vehicle = vehicle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarData carData = (CarData) o;
    return Objects.equals(this.associatedEquipments, carData.associatedEquipments) &&
        Objects.equals(this.confirmationNumber, carData.confirmationNumber) &&
        Objects.equals(this.driver, carData.driver) &&
        Objects.equals(this.dropoff, carData.dropoff) &&
        Objects.equals(this.pickup, carData.pickup) &&
        Objects.equals(this.serviceProviderName, carData.serviceProviderName) &&
        Objects.equals(this.vehicle, carData.vehicle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedEquipments, confirmationNumber, driver, dropoff, pickup, serviceProviderName, vehicle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarData {\n");
    sb.append("    associatedEquipments: ").append(toIndentedString(associatedEquipments)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    dropoff: ").append(toIndentedString(dropoff)).append("\n");
    sb.append("    pickup: ").append(toIndentedString(pickup)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedEquipments");
    openapiFields.add("confirmationNumber");
    openapiFields.add("driver");
    openapiFields.add("dropoff");
    openapiFields.add("pickup");
    openapiFields.add("serviceProviderName");
    openapiFields.add("vehicle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarData is not found in the empty JSON string", CarData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("associatedEquipments") != null && !jsonObj.get("associatedEquipments").isJsonNull()) {
        JsonArray jsonArrayassociatedEquipments = jsonObj.getAsJsonArray("associatedEquipments");
        if (jsonArrayassociatedEquipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associatedEquipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associatedEquipments` to be an array in the JSON string but got `%s`", jsonObj.get("associatedEquipments").toString()));
          }

          // validate the optional field `associatedEquipments` (array)
          for (int i = 0; i < jsonArrayassociatedEquipments.size(); i++) {
            AssociatedEquipments.validateJsonElement(jsonArrayassociatedEquipments.get(i));
          };
        }
      }
      if ((jsonObj.get("confirmationNumber") != null && !jsonObj.get("confirmationNumber").isJsonNull()) && !jsonObj.get("confirmationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationNumber").toString()));
      }
      // validate the optional field `driver`
      if (jsonObj.get("driver") != null && !jsonObj.get("driver").isJsonNull()) {
        Driver.validateJsonElement(jsonObj.get("driver"));
      }
      // validate the optional field `dropoff`
      if (jsonObj.get("dropoff") != null && !jsonObj.get("dropoff").isJsonNull()) {
        Dropoff.validateJsonElement(jsonObj.get("dropoff"));
      }
      // validate the optional field `pickup`
      if (jsonObj.get("pickup") != null && !jsonObj.get("pickup").isJsonNull()) {
        Pickup.validateJsonElement(jsonObj.get("pickup"));
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        CarVehicle.validateJsonElement(jsonObj.get("vehicle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarData.class));

       return (TypeAdapter<T>) new TypeAdapter<CarData>() {
           @Override
           public void write(JsonWriter out, CarData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarData
   * @throws IOException if the JSON string is invalid with respect to CarData
   */
  public static CarData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarData.class);
  }

  /**
   * Convert an instance of CarData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

