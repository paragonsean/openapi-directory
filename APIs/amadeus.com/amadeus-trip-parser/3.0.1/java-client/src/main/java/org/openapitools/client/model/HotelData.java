/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ContactHotel;
import org.openapitools.client.model.Description;
import org.openapitools.client.model.Guests;
import org.openapitools.client.model.Policies;
import org.openapitools.client.model.Room;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *   Hotel product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelData {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<String> amenities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_IN_DATE = "checkInDate";
  @SerializedName(SERIALIZED_NAME_CHECK_IN_DATE)
  private String checkInDate;

  public static final String SERIALIZED_NAME_CHECK_OUT_DATE = "checkOutDate";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT_DATE)
  private String checkOutDate;

  public static final String SERIALIZED_NAME_CONFIRMATION_NUMBER = "confirmationNumber";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_NUMBER)
  private String confirmationNumber;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private ContactHotel contact;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Description description;

  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private Guests guests;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private Policies policies;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private Room room;

  public static final String SERIALIZED_NAME_ROOM_QUANTITY = "roomQuantity";
  @SerializedName(SERIALIZED_NAME_ROOM_QUANTITY)
  private Integer roomQuantity;

  public HotelData() {
  }

  public HotelData address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public HotelData amenities(List<String> amenities) {
    this.amenities = amenities;
    return this;
  }

  public HotelData addAmenitiesItem(String amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * amenities (list)
   * @return amenities
   */
  @javax.annotation.Nullable
  public List<String> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<String> amenities) {
    this.amenities = amenities;
  }


  public HotelData checkInDate(String checkInDate) {
    this.checkInDate = checkInDate;
    return this;
  }

  /**
   * heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).
   * @return checkInDate
   */
  @javax.annotation.Nullable
  public String getCheckInDate() {
    return checkInDate;
  }

  public void setCheckInDate(String checkInDate) {
    this.checkInDate = checkInDate;
  }


  public HotelData checkOutDate(String checkOutDate) {
    this.checkOutDate = checkOutDate;
    return this;
  }

  /**
   * check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.
   * @return checkOutDate
   */
  @javax.annotation.Nullable
  public String getCheckOutDate() {
    return checkOutDate;
  }

  public void setCheckOutDate(String checkOutDate) {
    this.checkOutDate = checkOutDate;
  }


  public HotelData confirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
    return this;
  }

  /**
   * Confirmation number
   * @return confirmationNumber
   */
  @javax.annotation.Nullable
  public String getConfirmationNumber() {
    return confirmationNumber;
  }

  public void setConfirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
  }


  public HotelData contact(ContactHotel contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public ContactHotel getContact() {
    return contact;
  }

  public void setContact(ContactHotel contact) {
    this.contact = contact;
  }


  public HotelData description(Description description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public Description getDescription() {
    return description;
  }

  public void setDescription(Description description) {
    this.description = description;
  }


  public HotelData guests(Guests guests) {
    this.guests = guests;
    return this;
  }

  /**
   * Get guests
   * @return guests
   */
  @javax.annotation.Nullable
  public Guests getGuests() {
    return guests;
  }

  public void setGuests(Guests guests) {
    this.guests = guests;
  }


  public HotelData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Hotel Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HotelData policies(Policies policies) {
    this.policies = policies;
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public Policies getPolicies() {
    return policies;
  }

  public void setPolicies(Policies policies) {
    this.policies = policies;
  }


  public HotelData room(Room room) {
    this.room = room;
    return this;
  }

  /**
   * Get room
   * @return room
   */
  @javax.annotation.Nullable
  public Room getRoom() {
    return room;
  }

  public void setRoom(Room room) {
    this.room = room;
  }


  public HotelData roomQuantity(Integer roomQuantity) {
    this.roomQuantity = roomQuantity;
    return this;
  }

  /**
   * number of rooms (1-9)
   * minimum: 1
   * @return roomQuantity
   */
  @javax.annotation.Nullable
  public Integer getRoomQuantity() {
    return roomQuantity;
  }

  public void setRoomQuantity(Integer roomQuantity) {
    this.roomQuantity = roomQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelData hotelData = (HotelData) o;
    return Objects.equals(this.address, hotelData.address) &&
        Objects.equals(this.amenities, hotelData.amenities) &&
        Objects.equals(this.checkInDate, hotelData.checkInDate) &&
        Objects.equals(this.checkOutDate, hotelData.checkOutDate) &&
        Objects.equals(this.confirmationNumber, hotelData.confirmationNumber) &&
        Objects.equals(this.contact, hotelData.contact) &&
        Objects.equals(this.description, hotelData.description) &&
        Objects.equals(this.guests, hotelData.guests) &&
        Objects.equals(this.name, hotelData.name) &&
        Objects.equals(this.policies, hotelData.policies) &&
        Objects.equals(this.room, hotelData.room) &&
        Objects.equals(this.roomQuantity, hotelData.roomQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, amenities, checkInDate, checkOutDate, confirmationNumber, contact, description, guests, name, policies, room, roomQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelData {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    checkInDate: ").append(toIndentedString(checkInDate)).append("\n");
    sb.append("    checkOutDate: ").append(toIndentedString(checkOutDate)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    roomQuantity: ").append(toIndentedString(roomQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("amenities");
    openapiFields.add("checkInDate");
    openapiFields.add("checkOutDate");
    openapiFields.add("confirmationNumber");
    openapiFields.add("contact");
    openapiFields.add("description");
    openapiFields.add("guests");
    openapiFields.add("name");
    openapiFields.add("policies");
    openapiFields.add("room");
    openapiFields.add("roomQuantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelData is not found in the empty JSON string", HotelData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull() && !jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }
      if ((jsonObj.get("checkInDate") != null && !jsonObj.get("checkInDate").isJsonNull()) && !jsonObj.get("checkInDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkInDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkInDate").toString()));
      }
      if ((jsonObj.get("checkOutDate") != null && !jsonObj.get("checkOutDate").isJsonNull()) && !jsonObj.get("checkOutDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkOutDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkOutDate").toString()));
      }
      if ((jsonObj.get("confirmationNumber") != null && !jsonObj.get("confirmationNumber").isJsonNull()) && !jsonObj.get("confirmationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationNumber").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        ContactHotel.validateJsonElement(jsonObj.get("contact"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        Description.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `guests`
      if (jsonObj.get("guests") != null && !jsonObj.get("guests").isJsonNull()) {
        Guests.validateJsonElement(jsonObj.get("guests"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        Policies.validateJsonElement(jsonObj.get("policies"));
      }
      // validate the optional field `room`
      if (jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) {
        Room.validateJsonElement(jsonObj.get("room"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelData.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelData>() {
           @Override
           public void write(JsonWriter out, HotelData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelData
   * @throws IOException if the JSON string is invalid with respect to HotelData
   */
  public static HotelData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelData.class);
  }

  /**
   * Convert an instance of HotelData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

