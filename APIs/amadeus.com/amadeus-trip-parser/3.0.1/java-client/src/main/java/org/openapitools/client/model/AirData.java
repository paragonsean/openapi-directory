/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AirDataSeatsInner;
import org.openapitools.client.model.Aircraft;
import org.openapitools.client.model.ArrivalAir;
import org.openapitools.client.model.ArrivalAirportLocation;
import org.openapitools.client.model.Baggages;
import org.openapitools.client.model.DepartureAir;
import org.openapitools.client.model.DepartureAirportLocation;
import org.openapitools.client.model.Marketing;
import org.openapitools.client.model.Meal;
import org.openapitools.client.model.Operating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirData {
  public static final String SERIALIZED_NAME_AIRCRAFT = "aircraft";
  @SerializedName(SERIALIZED_NAME_AIRCRAFT)
  private Aircraft aircraft;

  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  private ArrivalAir arrival;

  public static final String SERIALIZED_NAME_ARRIVAL_AIRPORT_LOCATION = "arrivalAirportLocation";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_AIRPORT_LOCATION)
  private ArrivalAirportLocation arrivalAirportLocation;

  public static final String SERIALIZED_NAME_BAGGAGES = "baggages";
  @SerializedName(SERIALIZED_NAME_BAGGAGES)
  private Baggages baggages;

  public static final String SERIALIZED_NAME_CONFIRMATION_NUMBER = "confirmationNumber";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_NUMBER)
  private String confirmationNumber;

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  private DepartureAir departure;

  public static final String SERIALIZED_NAME_DEPARTURE_AIRPORT_LOCATION = "departureAirportLocation";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_AIRPORT_LOCATION)
  private DepartureAirportLocation departureAirportLocation;

  public static final String SERIALIZED_NAME_MARKETING = "marketing";
  @SerializedName(SERIALIZED_NAME_MARKETING)
  private Marketing marketing;

  public static final String SERIALIZED_NAME_MEAL = "meal";
  @SerializedName(SERIALIZED_NAME_MEAL)
  private Meal meal;

  public static final String SERIALIZED_NAME_OPERATING = "operating";
  @SerializedName(SERIALIZED_NAME_OPERATING)
  private Operating operating;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private List<AirDataSeatsInner> seats = new ArrayList<>();

  public AirData() {
  }

  public AirData aircraft(Aircraft aircraft) {
    this.aircraft = aircraft;
    return this;
  }

  /**
   * Get aircraft
   * @return aircraft
   */
  @javax.annotation.Nullable
  public Aircraft getAircraft() {
    return aircraft;
  }

  public void setAircraft(Aircraft aircraft) {
    this.aircraft = aircraft;
  }


  public AirData arrival(ArrivalAir arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * Get arrival
   * @return arrival
   */
  @javax.annotation.Nullable
  public ArrivalAir getArrival() {
    return arrival;
  }

  public void setArrival(ArrivalAir arrival) {
    this.arrival = arrival;
  }


  public AirData arrivalAirportLocation(ArrivalAirportLocation arrivalAirportLocation) {
    this.arrivalAirportLocation = arrivalAirportLocation;
    return this;
  }

  /**
   * Get arrivalAirportLocation
   * @return arrivalAirportLocation
   */
  @javax.annotation.Nullable
  public ArrivalAirportLocation getArrivalAirportLocation() {
    return arrivalAirportLocation;
  }

  public void setArrivalAirportLocation(ArrivalAirportLocation arrivalAirportLocation) {
    this.arrivalAirportLocation = arrivalAirportLocation;
  }


  public AirData baggages(Baggages baggages) {
    this.baggages = baggages;
    return this;
  }

  /**
   * Get baggages
   * @return baggages
   */
  @javax.annotation.Nullable
  public Baggages getBaggages() {
    return baggages;
  }

  public void setBaggages(Baggages baggages) {
    this.baggages = baggages;
  }


  public AirData confirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
    return this;
  }

  /**
   * Get confirmationNumber
   * @return confirmationNumber
   */
  @javax.annotation.Nullable
  public String getConfirmationNumber() {
    return confirmationNumber;
  }

  public void setConfirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
  }


  public AirData departure(DepartureAir departure) {
    this.departure = departure;
    return this;
  }

  /**
   * Get departure
   * @return departure
   */
  @javax.annotation.Nullable
  public DepartureAir getDeparture() {
    return departure;
  }

  public void setDeparture(DepartureAir departure) {
    this.departure = departure;
  }


  public AirData departureAirportLocation(DepartureAirportLocation departureAirportLocation) {
    this.departureAirportLocation = departureAirportLocation;
    return this;
  }

  /**
   * Get departureAirportLocation
   * @return departureAirportLocation
   */
  @javax.annotation.Nullable
  public DepartureAirportLocation getDepartureAirportLocation() {
    return departureAirportLocation;
  }

  public void setDepartureAirportLocation(DepartureAirportLocation departureAirportLocation) {
    this.departureAirportLocation = departureAirportLocation;
  }


  public AirData marketing(Marketing marketing) {
    this.marketing = marketing;
    return this;
  }

  /**
   * Get marketing
   * @return marketing
   */
  @javax.annotation.Nullable
  public Marketing getMarketing() {
    return marketing;
  }

  public void setMarketing(Marketing marketing) {
    this.marketing = marketing;
  }


  public AirData meal(Meal meal) {
    this.meal = meal;
    return this;
  }

  /**
   * Get meal
   * @return meal
   */
  @javax.annotation.Nullable
  public Meal getMeal() {
    return meal;
  }

  public void setMeal(Meal meal) {
    this.meal = meal;
  }


  public AirData operating(Operating operating) {
    this.operating = operating;
    return this;
  }

  /**
   * Get operating
   * @return operating
   */
  @javax.annotation.Nullable
  public Operating getOperating() {
    return operating;
  }

  public void setOperating(Operating operating) {
    this.operating = operating;
  }


  public AirData seats(List<AirDataSeatsInner> seats) {
    this.seats = seats;
    return this;
  }

  public AirData addSeatsItem(AirDataSeatsInner seatsItem) {
    if (this.seats == null) {
      this.seats = new ArrayList<>();
    }
    this.seats.add(seatsItem);
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public List<AirDataSeatsInner> getSeats() {
    return seats;
  }

  public void setSeats(List<AirDataSeatsInner> seats) {
    this.seats = seats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirData airData = (AirData) o;
    return Objects.equals(this.aircraft, airData.aircraft) &&
        Objects.equals(this.arrival, airData.arrival) &&
        Objects.equals(this.arrivalAirportLocation, airData.arrivalAirportLocation) &&
        Objects.equals(this.baggages, airData.baggages) &&
        Objects.equals(this.confirmationNumber, airData.confirmationNumber) &&
        Objects.equals(this.departure, airData.departure) &&
        Objects.equals(this.departureAirportLocation, airData.departureAirportLocation) &&
        Objects.equals(this.marketing, airData.marketing) &&
        Objects.equals(this.meal, airData.meal) &&
        Objects.equals(this.operating, airData.operating) &&
        Objects.equals(this.seats, airData.seats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aircraft, arrival, arrivalAirportLocation, baggages, confirmationNumber, departure, departureAirportLocation, marketing, meal, operating, seats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirData {\n");
    sb.append("    aircraft: ").append(toIndentedString(aircraft)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    arrivalAirportLocation: ").append(toIndentedString(arrivalAirportLocation)).append("\n");
    sb.append("    baggages: ").append(toIndentedString(baggages)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    departureAirportLocation: ").append(toIndentedString(departureAirportLocation)).append("\n");
    sb.append("    marketing: ").append(toIndentedString(marketing)).append("\n");
    sb.append("    meal: ").append(toIndentedString(meal)).append("\n");
    sb.append("    operating: ").append(toIndentedString(operating)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aircraft");
    openapiFields.add("arrival");
    openapiFields.add("arrivalAirportLocation");
    openapiFields.add("baggages");
    openapiFields.add("confirmationNumber");
    openapiFields.add("departure");
    openapiFields.add("departureAirportLocation");
    openapiFields.add("marketing");
    openapiFields.add("meal");
    openapiFields.add("operating");
    openapiFields.add("seats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirData is not found in the empty JSON string", AirData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aircraft`
      if (jsonObj.get("aircraft") != null && !jsonObj.get("aircraft").isJsonNull()) {
        Aircraft.validateJsonElement(jsonObj.get("aircraft"));
      }
      // validate the optional field `arrival`
      if (jsonObj.get("arrival") != null && !jsonObj.get("arrival").isJsonNull()) {
        ArrivalAir.validateJsonElement(jsonObj.get("arrival"));
      }
      // validate the optional field `arrivalAirportLocation`
      if (jsonObj.get("arrivalAirportLocation") != null && !jsonObj.get("arrivalAirportLocation").isJsonNull()) {
        ArrivalAirportLocation.validateJsonElement(jsonObj.get("arrivalAirportLocation"));
      }
      // validate the optional field `baggages`
      if (jsonObj.get("baggages") != null && !jsonObj.get("baggages").isJsonNull()) {
        Baggages.validateJsonElement(jsonObj.get("baggages"));
      }
      if ((jsonObj.get("confirmationNumber") != null && !jsonObj.get("confirmationNumber").isJsonNull()) && !jsonObj.get("confirmationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationNumber").toString()));
      }
      // validate the optional field `departure`
      if (jsonObj.get("departure") != null && !jsonObj.get("departure").isJsonNull()) {
        DepartureAir.validateJsonElement(jsonObj.get("departure"));
      }
      // validate the optional field `departureAirportLocation`
      if (jsonObj.get("departureAirportLocation") != null && !jsonObj.get("departureAirportLocation").isJsonNull()) {
        DepartureAirportLocation.validateJsonElement(jsonObj.get("departureAirportLocation"));
      }
      // validate the optional field `marketing`
      if (jsonObj.get("marketing") != null && !jsonObj.get("marketing").isJsonNull()) {
        Marketing.validateJsonElement(jsonObj.get("marketing"));
      }
      // validate the optional field `meal`
      if (jsonObj.get("meal") != null && !jsonObj.get("meal").isJsonNull()) {
        Meal.validateJsonElement(jsonObj.get("meal"));
      }
      // validate the optional field `operating`
      if (jsonObj.get("operating") != null && !jsonObj.get("operating").isJsonNull()) {
        Operating.validateJsonElement(jsonObj.get("operating"));
      }
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        JsonArray jsonArrayseats = jsonObj.getAsJsonArray("seats");
        if (jsonArrayseats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seats` to be an array in the JSON string but got `%s`", jsonObj.get("seats").toString()));
          }

          // validate the optional field `seats` (array)
          for (int i = 0; i < jsonArrayseats.size(); i++) {
            AirDataSeatsInner.validateJsonElement(jsonArrayseats.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirData.class));

       return (TypeAdapter<T>) new TypeAdapter<AirData>() {
           @Override
           public void write(JsonWriter out, AirData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirData
   * @throws IOException if the JSON string is invalid with respect to AirData
   */
  public static AirData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirData.class);
  }

  /**
   * Convert an instance of AirData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

