/*
 * Trip Parser
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Air;
import org.openapitools.client.model.AirData;
import org.openapitools.client.model.Car;
import org.openapitools.client.model.CarData;
import org.openapitools.client.model.Hotel;
import org.openapitools.client.model.HotelData;
import org.openapitools.client.model.Train;
import org.openapitools.client.model.TrainData;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:02.012843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TripProductsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TripProductsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TripProductsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TripProductsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Air> adapterAir = gson.getDelegateAdapter(this, TypeToken.get(Air.class));
            final TypeAdapter<Hotel> adapterHotel = gson.getDelegateAdapter(this, TypeToken.get(Hotel.class));
            final TypeAdapter<Car> adapterCar = gson.getDelegateAdapter(this, TypeToken.get(Car.class));
            final TypeAdapter<Train> adapterTrain = gson.getDelegateAdapter(this, TypeToken.get(Train.class));

            return (TypeAdapter<T>) new TypeAdapter<TripProductsInner>() {
                @Override
                public void write(JsonWriter out, TripProductsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Air`
                    if (value.getActualInstance() instanceof Air) {
                        JsonElement element = adapterAir.toJsonTree((Air)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Hotel`
                    if (value.getActualInstance() instanceof Hotel) {
                        JsonElement element = adapterHotel.toJsonTree((Hotel)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Car`
                    if (value.getActualInstance() instanceof Car) {
                        JsonElement element = adapterCar.toJsonTree((Car)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Train`
                    if (value.getActualInstance() instanceof Train) {
                        JsonElement element = adapterTrain.toJsonTree((Train)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Air, Car, Hotel, Train");
                }

                @Override
                public TripProductsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Air
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Air.validateJsonElement(jsonElement);
                        actualAdapter = adapterAir;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Air'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Air failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Air'", e);
                    }
                    // deserialize Hotel
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Hotel.validateJsonElement(jsonElement);
                        actualAdapter = adapterHotel;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Hotel'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Hotel failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Hotel'", e);
                    }
                    // deserialize Car
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Car.validateJsonElement(jsonElement);
                        actualAdapter = adapterCar;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Car'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Car failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Car'", e);
                    }
                    // deserialize Train
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Train.validateJsonElement(jsonElement);
                        actualAdapter = adapterTrain;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Train'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Train failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Train'", e);
                    }

                    if (match == 1) {
                        TripProductsInner ret = new TripProductsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TripProductsInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TripProductsInner() {
        super("oneOf", Boolean.FALSE);
    }

    public TripProductsInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Air", Air.class);
        schemas.put("Hotel", Hotel.class);
        schemas.put("Car", Car.class);
        schemas.put("Train", Train.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TripProductsInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Air, Car, Hotel, Train
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Air) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Hotel) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Car) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Train) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Air, Car, Hotel, Train");
    }

    /**
     * Get the actual instance, which can be the following:
     * Air, Car, Hotel, Train
     *
     * @return The actual instance (Air, Car, Hotel, Train)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Air`. If the actual instance is not `Air`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Air`
     * @throws ClassCastException if the instance is not `Air`
     */
    public Air getAir() throws ClassCastException {
        return (Air)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Hotel`. If the actual instance is not `Hotel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Hotel`
     * @throws ClassCastException if the instance is not `Hotel`
     */
    public Hotel getHotel() throws ClassCastException {
        return (Hotel)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Car`. If the actual instance is not `Car`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Car`
     * @throws ClassCastException if the instance is not `Car`
     */
    public Car getCar() throws ClassCastException {
        return (Car)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Train`. If the actual instance is not `Train`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Train`
     * @throws ClassCastException if the instance is not `Train`
     */
    public Train getTrain() throws ClassCastException {
        return (Train)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TripProductsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Air
        try {
            Air.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Air failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Hotel
        try {
            Hotel.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Hotel failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Car
        try {
            Car.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Car failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Train
        try {
            Train.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Train failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for TripProductsInner with oneOf schemas: Air, Car, Hotel, Train. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TripProductsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TripProductsInner
     * @throws IOException if the JSON string is invalid with respect to TripProductsInner
     */
    public static TripProductsInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TripProductsInner.class);
    }

    /**
     * Convert an instance of TripProductsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

