/*
 * Flight Delay Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error500;
import java.time.LocalDate;
import org.openapitools.client.model.Prediction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlightDelayPredictionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlightDelayPredictionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlightDelayPredictionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFlightDelayPrediction
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler is departing, e.g. PAR for Paris (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param departureTime local time relative to originLocationCode on which the traveler will depart from the origin. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param arrivalDate the date on which the traveler will arrive to the destination from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param arrivalTime local time relative to destinationLocationCode on which the traveler will arrive to destination. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param aircraftCode IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) (required)
     * @param carrierCode airline / carrier code (required)
     * @param flightNumber flight number as assigned by the carrier (required)
     * @param duration flight duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightDelayPredictionCall(String originLocationCode, String destinationLocationCode, LocalDate departureDate, String departureTime, LocalDate arrivalDate, String arrivalTime, String aircraftCode, String carrierCode, String flightNumber, String duration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/travel/predictions/flight-delay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originLocationCode", originLocationCode));
        }

        if (destinationLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationLocationCode", destinationLocationCode));
        }

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureDate", departureDate));
        }

        if (departureTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departureTime", departureTime));
        }

        if (arrivalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arrivalDate", arrivalDate));
        }

        if (arrivalTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arrivalTime", arrivalTime));
        }

        if (aircraftCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aircraftCode", aircraftCode));
        }

        if (carrierCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrierCode", carrierCode));
        }

        if (flightNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flightNumber", flightNumber));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        final String[] localVarAccepts = {
            "application/vnd.amadeus+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlightDelayPredictionValidateBeforeCall(String originLocationCode, String destinationLocationCode, LocalDate departureDate, String departureTime, LocalDate arrivalDate, String arrivalTime, String aircraftCode, String carrierCode, String flightNumber, String duration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originLocationCode' is set
        if (originLocationCode == null) {
            throw new ApiException("Missing the required parameter 'originLocationCode' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'destinationLocationCode' is set
        if (destinationLocationCode == null) {
            throw new ApiException("Missing the required parameter 'destinationLocationCode' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'departureDate' is set
        if (departureDate == null) {
            throw new ApiException("Missing the required parameter 'departureDate' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'departureTime' is set
        if (departureTime == null) {
            throw new ApiException("Missing the required parameter 'departureTime' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'arrivalDate' is set
        if (arrivalDate == null) {
            throw new ApiException("Missing the required parameter 'arrivalDate' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'arrivalTime' is set
        if (arrivalTime == null) {
            throw new ApiException("Missing the required parameter 'arrivalTime' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'aircraftCode' is set
        if (aircraftCode == null) {
            throw new ApiException("Missing the required parameter 'aircraftCode' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'carrierCode' is set
        if (carrierCode == null) {
            throw new ApiException("Missing the required parameter 'carrierCode' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'flightNumber' is set
        if (flightNumber == null) {
            throw new ApiException("Missing the required parameter 'flightNumber' when calling getFlightDelayPrediction(Async)");
        }

        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling getFlightDelayPrediction(Async)");
        }

        return getFlightDelayPredictionCall(originLocationCode, destinationLocationCode, departureDate, departureTime, arrivalDate, arrivalTime, aircraftCode, carrierCode, flightNumber, duration, _callback);

    }

    /**
     * Return the delay segment where the flight is likely to lay.
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler is departing, e.g. PAR for Paris (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param departureTime local time relative to originLocationCode on which the traveler will depart from the origin. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param arrivalDate the date on which the traveler will arrive to the destination from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param arrivalTime local time relative to destinationLocationCode on which the traveler will arrive to destination. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param aircraftCode IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) (required)
     * @param carrierCode airline / carrier code (required)
     * @param flightNumber flight number as assigned by the carrier (required)
     * @param duration flight duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Prediction getFlightDelayPrediction(String originLocationCode, String destinationLocationCode, LocalDate departureDate, String departureTime, LocalDate arrivalDate, String arrivalTime, String aircraftCode, String carrierCode, String flightNumber, String duration) throws ApiException {
        ApiResponse<Prediction> localVarResp = getFlightDelayPredictionWithHttpInfo(originLocationCode, destinationLocationCode, departureDate, departureTime, arrivalDate, arrivalTime, aircraftCode, carrierCode, flightNumber, duration);
        return localVarResp.getData();
    }

    /**
     * Return the delay segment where the flight is likely to lay.
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler is departing, e.g. PAR for Paris (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param departureTime local time relative to originLocationCode on which the traveler will depart from the origin. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param arrivalDate the date on which the traveler will arrive to the destination from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param arrivalTime local time relative to destinationLocationCode on which the traveler will arrive to destination. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param aircraftCode IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) (required)
     * @param carrierCode airline / carrier code (required)
     * @param flightNumber flight number as assigned by the carrier (required)
     * @param duration flight duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prediction> getFlightDelayPredictionWithHttpInfo(String originLocationCode, String destinationLocationCode, LocalDate departureDate, String departureTime, LocalDate arrivalDate, String arrivalTime, String aircraftCode, String carrierCode, String flightNumber, String duration) throws ApiException {
        okhttp3.Call localVarCall = getFlightDelayPredictionValidateBeforeCall(originLocationCode, destinationLocationCode, departureDate, departureTime, arrivalDate, arrivalTime, aircraftCode, carrierCode, flightNumber, duration, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the delay segment where the flight is likely to lay. (asynchronously)
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler is departing, e.g. PAR for Paris (required)
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris (required)
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param departureTime local time relative to originLocationCode on which the traveler will depart from the origin. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param arrivalDate the date on which the traveler will arrive to the destination from the origin. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2019-12-25 (required)
     * @param arrivalTime local time relative to destinationLocationCode on which the traveler will arrive to destination. Time respects ISO 8601 standard. e.g. 13:22:00 (required)
     * @param aircraftCode IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php) (required)
     * @param carrierCode airline / carrier code (required)
     * @param flightNumber flight number as assigned by the carrier (required)
     * @param duration flight duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> code    | title                                  ------- | -------------------------------------  477     | INVALID FORMAT 572     | INVALID OPTION 4926    | INVALID DATA RECEIVED                32171   | MANDATORY DATA MISSING         </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlightDelayPredictionAsync(String originLocationCode, String destinationLocationCode, LocalDate departureDate, String departureTime, LocalDate arrivalDate, String arrivalTime, String aircraftCode, String carrierCode, String flightNumber, String duration, final ApiCallback<Prediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlightDelayPredictionValidateBeforeCall(originLocationCode, destinationLocationCode, departureDate, departureTime, arrivalDate, arrivalTime, aircraftCode, carrierCode, flightNumber, duration, _callback);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
