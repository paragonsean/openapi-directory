/**
 * Flight Delay Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlightDelayPredictionApi_H
#define OAI_OAIFlightDelayPredictionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError_400.h"
#include "OAIError_500.h"
#include "OAIPrediction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlightDelayPredictionApi : public QObject {
    Q_OBJECT

public:
    OAIFlightDelayPredictionApi(const int timeOut = 0);
    ~OAIFlightDelayPredictionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  origin_location_code QString [required]
    * @param[in]  destination_location_code QString [required]
    * @param[in]  departure_date QDate [required]
    * @param[in]  departure_time QString [required]
    * @param[in]  arrival_date QDate [required]
    * @param[in]  arrival_time QString [required]
    * @param[in]  aircraft_code QString [required]
    * @param[in]  carrier_code QString [required]
    * @param[in]  flight_number QString [required]
    * @param[in]  duration QString [required]
    */
    virtual void getFlightDelayPrediction(const QString &origin_location_code, const QString &destination_location_code, const QDate &departure_date, const QString &departure_time, const QDate &arrival_date, const QString &arrival_time, const QString &aircraft_code, const QString &carrier_code, const QString &flight_number, const QString &duration);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getFlightDelayPredictionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getFlightDelayPredictionSignal(OAIPrediction summary);


    void getFlightDelayPredictionSignalFull(OAIHttpRequestWorker *worker, OAIPrediction summary);

    Q_DECL_DEPRECATED_X("Use getFlightDelayPredictionSignalError() instead")
    void getFlightDelayPredictionSignalE(OAIPrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlightDelayPredictionSignalError(OAIPrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getFlightDelayPredictionSignalErrorFull() instead")
    void getFlightDelayPredictionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlightDelayPredictionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
