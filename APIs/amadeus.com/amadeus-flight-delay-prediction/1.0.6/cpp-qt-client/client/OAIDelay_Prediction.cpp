/**
 * Flight Delay Prediction
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.
 *
 * The version of the OpenAPI document: 1.0.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelay_Prediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelay_Prediction::OAIDelay_Prediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelay_Prediction::OAIDelay_Prediction() {
    this->initializeModel();
}

OAIDelay_Prediction::~OAIDelay_Prediction() {}

void OAIDelay_Prediction::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDelay_Prediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelay_Prediction::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDelay_Prediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelay_Prediction::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDelay_Prediction::getId() const {
    return m_id;
}
void OAIDelay_Prediction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDelay_Prediction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDelay_Prediction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDelay_Prediction::getProbability() const {
    return m_probability;
}
void OAIDelay_Prediction::setProbability(const QString &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIDelay_Prediction::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIDelay_Prediction::is_probability_Valid() const{
    return m_probability_isValid;
}

OAIPredictionResultType OAIDelay_Prediction::getResult() const {
    return m_result;
}
void OAIDelay_Prediction::setResult(const OAIPredictionResultType &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIDelay_Prediction::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDelay_Prediction::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIDelay_Prediction::getSubType() const {
    return m_sub_type;
}
void OAIDelay_Prediction::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIDelay_Prediction::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIDelay_Prediction::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAIDelay_Prediction::getType() const {
    return m_type;
}
void OAIDelay_Prediction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDelay_Prediction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDelay_Prediction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDelay_Prediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelay_Prediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
