/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_geometry_isSet) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFeature::getGeometry() const {
    return m_geometry;
}
void OAIFeature::setGeometry(const QString &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIFeature::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIFeature::is_geometry_Valid() const{
    return m_geometry_isValid;
}

QString OAIFeature::getProperties() const {
    return m_properties;
}
void OAIFeature::setProperties(const QString &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIFeature::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIFeature::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIFeature::getType() const {
    return m_type;
}
void OAIFeature::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFeature::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFeature::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
