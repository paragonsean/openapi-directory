/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiver::OAIReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiver::OAIReceiver() {
    this->initializeModel();
}

OAIReceiver::~OAIReceiver() {}

void OAIReceiver::initializeModel() {

    m_alt_isSet = false;
    m_alt_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_rxg_isSet = false;
    m_rxg_isValid = false;

    m_rxs_isSet = false;
    m_rxs_isValid = false;
}

void OAIReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiver::fromJsonObject(QJsonObject json) {

    m_alt_isValid = ::OpenAPI::fromJsonValue(m_alt, json[QString("alt")]);
    m_alt_isSet = !json[QString("alt")].isNull() && m_alt_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_rxg_isValid = ::OpenAPI::fromJsonValue(m_rxg, json[QString("rxg")]);
    m_rxg_isSet = !json[QString("rxg")].isNull() && m_rxg_isValid;

    m_rxs_isValid = ::OpenAPI::fromJsonValue(m_rxs, json[QString("rxs")]);
    m_rxs_isSet = !json[QString("rxs")].isNull() && m_rxs_isValid;
}

QString OAIReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_isSet) {
        obj.insert(QString("alt"), ::OpenAPI::toJsonValue(m_alt));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_rxg_isSet) {
        obj.insert(QString("rxg"), ::OpenAPI::toJsonValue(m_rxg));
    }
    if (m_rxs_isSet) {
        obj.insert(QString("rxs"), ::OpenAPI::toJsonValue(m_rxs));
    }
    return obj;
}

float OAIReceiver::getAlt() const {
    return m_alt;
}
void OAIReceiver::setAlt(const float &alt) {
    m_alt = alt;
    m_alt_isSet = true;
}

bool OAIReceiver::is_alt_Set() const{
    return m_alt_isSet;
}

bool OAIReceiver::is_alt_Valid() const{
    return m_alt_isValid;
}

float OAIReceiver::getLat() const {
    return m_lat;
}
void OAIReceiver::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIReceiver::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIReceiver::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIReceiver::getLon() const {
    return m_lon;
}
void OAIReceiver::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIReceiver::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIReceiver::is_lon_Valid() const{
    return m_lon_isValid;
}

float OAIReceiver::getRxg() const {
    return m_rxg;
}
void OAIReceiver::setRxg(const float &rxg) {
    m_rxg = rxg;
    m_rxg_isSet = true;
}

bool OAIReceiver::is_rxg_Set() const{
    return m_rxg_isSet;
}

bool OAIReceiver::is_rxg_Valid() const{
    return m_rxg_isValid;
}

float OAIReceiver::getRxs() const {
    return m_rxs;
}
void OAIReceiver::setRxs(const float &rxs) {
    m_rxs = rxs;
    m_rxs_isSet = true;
}

bool OAIReceiver::is_rxs_Set() const{
    return m_rxs_isSet;
}

bool OAIReceiver::is_rxs_Valid() const{
    return m_rxs_isValid;
}

bool OAIReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rxg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rxs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
