/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_cli_isSet = false;
    m_cli_isValid = false;

    m_ked_isSet = false;
    m_ked_isValid = false;

    m_pe_isSet = false;
    m_pe_isValid = false;

    m_pm_isSet = false;
    m_pm_isValid = false;

    m_rel_isSet = false;
    m_rel_isValid = false;

    m_ter_isSet = false;
    m_ter_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_cli_isValid = ::OpenAPI::fromJsonValue(m_cli, json[QString("cli")]);
    m_cli_isSet = !json[QString("cli")].isNull() && m_cli_isValid;

    m_ked_isValid = ::OpenAPI::fromJsonValue(m_ked, json[QString("ked")]);
    m_ked_isSet = !json[QString("ked")].isNull() && m_ked_isValid;

    m_pe_isValid = ::OpenAPI::fromJsonValue(m_pe, json[QString("pe")]);
    m_pe_isSet = !json[QString("pe")].isNull() && m_pe_isValid;

    m_pm_isValid = ::OpenAPI::fromJsonValue(m_pm, json[QString("pm")]);
    m_pm_isSet = !json[QString("pm")].isNull() && m_pm_isValid;

    m_rel_isValid = ::OpenAPI::fromJsonValue(m_rel, json[QString("rel")]);
    m_rel_isSet = !json[QString("rel")].isNull() && m_rel_isValid;

    m_ter_isValid = ::OpenAPI::fromJsonValue(m_ter, json[QString("ter")]);
    m_ter_isSet = !json[QString("ter")].isNull() && m_ter_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_cli_isSet) {
        obj.insert(QString("cli"), ::OpenAPI::toJsonValue(m_cli));
    }
    if (m_ked_isSet) {
        obj.insert(QString("ked"), ::OpenAPI::toJsonValue(m_ked));
    }
    if (m_pe_isSet) {
        obj.insert(QString("pe"), ::OpenAPI::toJsonValue(m_pe));
    }
    if (m_pm_isSet) {
        obj.insert(QString("pm"), ::OpenAPI::toJsonValue(m_pm));
    }
    if (m_rel_isSet) {
        obj.insert(QString("rel"), ::OpenAPI::toJsonValue(m_rel));
    }
    if (m_ter_isSet) {
        obj.insert(QString("ter"), ::OpenAPI::toJsonValue(m_ter));
    }
    return obj;
}

qint32 OAIModel::getCli() const {
    return m_cli;
}
void OAIModel::setCli(const qint32 &cli) {
    m_cli = cli;
    m_cli_isSet = true;
}

bool OAIModel::is_cli_Set() const{
    return m_cli_isSet;
}

bool OAIModel::is_cli_Valid() const{
    return m_cli_isValid;
}

qint32 OAIModel::getKed() const {
    return m_ked;
}
void OAIModel::setKed(const qint32 &ked) {
    m_ked = ked;
    m_ked_isSet = true;
}

bool OAIModel::is_ked_Set() const{
    return m_ked_isSet;
}

bool OAIModel::is_ked_Valid() const{
    return m_ked_isValid;
}

qint32 OAIModel::getPe() const {
    return m_pe;
}
void OAIModel::setPe(const qint32 &pe) {
    m_pe = pe;
    m_pe_isSet = true;
}

bool OAIModel::is_pe_Set() const{
    return m_pe_isSet;
}

bool OAIModel::is_pe_Valid() const{
    return m_pe_isValid;
}

qint32 OAIModel::getPm() const {
    return m_pm;
}
void OAIModel::setPm(const qint32 &pm) {
    m_pm = pm;
    m_pm_isSet = true;
}

bool OAIModel::is_pm_Set() const{
    return m_pm_isSet;
}

bool OAIModel::is_pm_Valid() const{
    return m_pm_isValid;
}

qint32 OAIModel::getRel() const {
    return m_rel;
}
void OAIModel::setRel(const qint32 &rel) {
    m_rel = rel;
    m_rel_isSet = true;
}

bool OAIModel::is_rel_Set() const{
    return m_rel_isSet;
}

bool OAIModel::is_rel_Valid() const{
    return m_rel_isValid;
}

qint32 OAIModel::getTer() const {
    return m_ter;
}
void OAIModel::setTer(const qint32 &ter) {
    m_ter = ter;
    m_ter_isSet = true;
}

bool OAIModel::is_ter_Set() const{
    return m_ter_isSet;
}

bool OAIModel::is_ter_Valid() const{
    return m_ter_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cli_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
