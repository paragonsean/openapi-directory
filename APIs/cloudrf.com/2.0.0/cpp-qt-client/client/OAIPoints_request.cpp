/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoints_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoints_request::OAIPoints_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoints_request::OAIPoints_request() {
    this->initializeModel();
}

OAIPoints_request::~OAIPoints_request() {}

void OAIPoints_request::initializeModel() {

    m_antenna_isSet = false;
    m_antenna_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_receiver_isSet = false;
    m_receiver_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_transmitter_isSet = false;
    m_transmitter_isValid = false;
}

void OAIPoints_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoints_request::fromJsonObject(QJsonObject json) {

    m_antenna_isValid = ::OpenAPI::fromJsonValue(m_antenna, json[QString("antenna")]);
    m_antenna_isSet = !json[QString("antenna")].isNull() && m_antenna_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_receiver_isValid = ::OpenAPI::fromJsonValue(m_receiver, json[QString("receiver")]);
    m_receiver_isSet = !json[QString("receiver")].isNull() && m_receiver_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_transmitter_isValid = ::OpenAPI::fromJsonValue(m_transmitter, json[QString("transmitter")]);
    m_transmitter_isSet = !json[QString("transmitter")].isNull() && m_transmitter_isValid;
}

QString OAIPoints_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoints_request::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna.isSet()) {
        obj.insert(QString("antenna"), ::OpenAPI::toJsonValue(m_antenna));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_points.size() > 0) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_receiver.isSet()) {
        obj.insert(QString("receiver"), ::OpenAPI::toJsonValue(m_receiver));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_transmitter.isSet()) {
        obj.insert(QString("transmitter"), ::OpenAPI::toJsonValue(m_transmitter));
    }
    return obj;
}

OAIAntenna OAIPoints_request::getAntenna() const {
    return m_antenna;
}
void OAIPoints_request::setAntenna(const OAIAntenna &antenna) {
    m_antenna = antenna;
    m_antenna_isSet = true;
}

bool OAIPoints_request::is_antenna_Set() const{
    return m_antenna_isSet;
}

bool OAIPoints_request::is_antenna_Valid() const{
    return m_antenna_isValid;
}

OAIEnvironment OAIPoints_request::getEnvironment() const {
    return m_environment;
}
void OAIPoints_request::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPoints_request::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPoints_request::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIModel OAIPoints_request::getModel() const {
    return m_model;
}
void OAIPoints_request::setModel(const OAIModel &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIPoints_request::is_model_Set() const{
    return m_model_isSet;
}

bool OAIPoints_request::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIPoints_request::getNetwork() const {
    return m_network;
}
void OAIPoints_request::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIPoints_request::is_network_Set() const{
    return m_network_isSet;
}

bool OAIPoints_request::is_network_Valid() const{
    return m_network_isValid;
}

OAIOutput OAIPoints_request::getOutput() const {
    return m_output;
}
void OAIPoints_request::setOutput(const OAIOutput &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIPoints_request::is_output_Set() const{
    return m_output_isSet;
}

bool OAIPoints_request::is_output_Valid() const{
    return m_output_isValid;
}

QList<OAIPoint> OAIPoints_request::getPoints() const {
    return m_points;
}
void OAIPoints_request::setPoints(const QList<OAIPoint> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIPoints_request::is_points_Set() const{
    return m_points_isSet;
}

bool OAIPoints_request::is_points_Valid() const{
    return m_points_isValid;
}

OAIReceiver OAIPoints_request::getReceiver() const {
    return m_receiver;
}
void OAIPoints_request::setReceiver(const OAIReceiver &receiver) {
    m_receiver = receiver;
    m_receiver_isSet = true;
}

bool OAIPoints_request::is_receiver_Set() const{
    return m_receiver_isSet;
}

bool OAIPoints_request::is_receiver_Valid() const{
    return m_receiver_isValid;
}

QString OAIPoints_request::getSite() const {
    return m_site;
}
void OAIPoints_request::setSite(const QString &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIPoints_request::is_site_Set() const{
    return m_site_isSet;
}

bool OAIPoints_request::is_site_Valid() const{
    return m_site_isValid;
}

OAITransmitter OAIPoints_request::getTransmitter() const {
    return m_transmitter;
}
void OAIPoints_request::setTransmitter(const OAITransmitter &transmitter) {
    m_transmitter = transmitter;
    m_transmitter_isSet = true;
}

bool OAIPoints_request::is_transmitter_Set() const{
    return m_transmitter_isSet;
}

bool OAIPoints_request::is_transmitter_Valid() const{
    return m_transmitter_isValid;
}

bool OAIPoints_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmitter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoints_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
