/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransmitter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransmitter::OAITransmitter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransmitter::OAITransmitter() {
    this->initializeModel();
}

OAITransmitter::~OAITransmitter() {}

void OAITransmitter::initializeModel() {

    m_alt_isSet = false;
    m_alt_isValid = false;

    m_bwi_isSet = false;
    m_bwi_isValid = false;

    m_frq_isSet = false;
    m_frq_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_txw_isSet = false;
    m_txw_isValid = false;
}

void OAITransmitter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransmitter::fromJsonObject(QJsonObject json) {

    m_alt_isValid = ::OpenAPI::fromJsonValue(m_alt, json[QString("alt")]);
    m_alt_isSet = !json[QString("alt")].isNull() && m_alt_isValid;

    m_bwi_isValid = ::OpenAPI::fromJsonValue(m_bwi, json[QString("bwi")]);
    m_bwi_isSet = !json[QString("bwi")].isNull() && m_bwi_isValid;

    m_frq_isValid = ::OpenAPI::fromJsonValue(m_frq, json[QString("frq")]);
    m_frq_isSet = !json[QString("frq")].isNull() && m_frq_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_txw_isValid = ::OpenAPI::fromJsonValue(m_txw, json[QString("txw")]);
    m_txw_isSet = !json[QString("txw")].isNull() && m_txw_isValid;
}

QString OAITransmitter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransmitter::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_isSet) {
        obj.insert(QString("alt"), ::OpenAPI::toJsonValue(m_alt));
    }
    if (m_bwi_isSet) {
        obj.insert(QString("bwi"), ::OpenAPI::toJsonValue(m_bwi));
    }
    if (m_frq_isSet) {
        obj.insert(QString("frq"), ::OpenAPI::toJsonValue(m_frq));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_txw_isSet) {
        obj.insert(QString("txw"), ::OpenAPI::toJsonValue(m_txw));
    }
    return obj;
}

float OAITransmitter::getAlt() const {
    return m_alt;
}
void OAITransmitter::setAlt(const float &alt) {
    m_alt = alt;
    m_alt_isSet = true;
}

bool OAITransmitter::is_alt_Set() const{
    return m_alt_isSet;
}

bool OAITransmitter::is_alt_Valid() const{
    return m_alt_isValid;
}

float OAITransmitter::getBwi() const {
    return m_bwi;
}
void OAITransmitter::setBwi(const float &bwi) {
    m_bwi = bwi;
    m_bwi_isSet = true;
}

bool OAITransmitter::is_bwi_Set() const{
    return m_bwi_isSet;
}

bool OAITransmitter::is_bwi_Valid() const{
    return m_bwi_isValid;
}

float OAITransmitter::getFrq() const {
    return m_frq;
}
void OAITransmitter::setFrq(const float &frq) {
    m_frq = frq;
    m_frq_isSet = true;
}

bool OAITransmitter::is_frq_Set() const{
    return m_frq_isSet;
}

bool OAITransmitter::is_frq_Valid() const{
    return m_frq_isValid;
}

float OAITransmitter::getLat() const {
    return m_lat;
}
void OAITransmitter::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITransmitter::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITransmitter::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAITransmitter::getLon() const {
    return m_lon;
}
void OAITransmitter::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAITransmitter::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAITransmitter::is_lon_Valid() const{
    return m_lon_isValid;
}

float OAITransmitter::getTxw() const {
    return m_txw;
}
void OAITransmitter::setTxw(const float &txw) {
    m_txw = txw;
    m_txw_isSet = true;
}

bool OAITransmitter::is_txw_Set() const{
    return m_txw_isSet;
}

bool OAITransmitter::is_txw_Valid() const{
    return m_txw_isValid;
}

bool OAITransmitter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bwi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransmitter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
