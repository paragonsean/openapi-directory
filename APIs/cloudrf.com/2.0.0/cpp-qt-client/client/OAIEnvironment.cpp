/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_cll_isSet = false;
    m_cll_isValid = false;

    m_clm_isSet = false;
    m_clm_isValid = false;

    m_mat_isSet = false;
    m_mat_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_cll_isValid = ::OpenAPI::fromJsonValue(m_cll, json[QString("cll")]);
    m_cll_isSet = !json[QString("cll")].isNull() && m_cll_isValid;

    m_clm_isValid = ::OpenAPI::fromJsonValue(m_clm, json[QString("clm")]);
    m_clm_isSet = !json[QString("clm")].isNull() && m_clm_isValid;

    m_mat_isValid = ::OpenAPI::fromJsonValue(m_mat, json[QString("mat")]);
    m_mat_isSet = !json[QString("mat")].isNull() && m_mat_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_cll_isSet) {
        obj.insert(QString("cll"), ::OpenAPI::toJsonValue(m_cll));
    }
    if (m_clm_isSet) {
        obj.insert(QString("clm"), ::OpenAPI::toJsonValue(m_clm));
    }
    if (m_mat_isSet) {
        obj.insert(QString("mat"), ::OpenAPI::toJsonValue(m_mat));
    }
    return obj;
}

qint32 OAIEnvironment::getCll() const {
    return m_cll;
}
void OAIEnvironment::setCll(const qint32 &cll) {
    m_cll = cll;
    m_cll_isSet = true;
}

bool OAIEnvironment::is_cll_Set() const{
    return m_cll_isSet;
}

bool OAIEnvironment::is_cll_Valid() const{
    return m_cll_isValid;
}

qint32 OAIEnvironment::getClm() const {
    return m_clm;
}
void OAIEnvironment::setClm(const qint32 &clm) {
    m_clm = clm;
    m_clm_isSet = true;
}

bool OAIEnvironment::is_clm_Set() const{
    return m_clm_isSet;
}

bool OAIEnvironment::is_clm_Valid() const{
    return m_clm_isValid;
}

float OAIEnvironment::getMat() const {
    return m_mat;
}
void OAIEnvironment::setMat(const float &mat) {
    m_mat = mat;
    m_mat_isSet = true;
}

bool OAIEnvironment::is_mat_Set() const{
    return m_mat_isSet;
}

bool OAIEnvironment::is_mat_Valid() const{
    return m_mat_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
