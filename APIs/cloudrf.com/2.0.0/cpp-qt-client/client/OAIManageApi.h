/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManageApi_H
#define OAI_OAIManageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddClutter_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManageApi : public QObject {
    Q_OBJECT

public:
    OAIManageApi(const int timeOut = 0);
    ~OAIManageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_clutter_request OAIAddClutter_request [required]
    */
    virtual void addClutter(const OAIAddClutter_request &oai_add_clutter_request);

    /**
    * @param[in]  nid QString [required]
    */
    virtual void deleteNetwork(const QString &nid);

    /**
    * @param[in]  n float [optional]
    * @param[in]  e float [optional]
    * @param[in]  s float [optional]
    * @param[in]  w float [optional]
    */
    virtual void list(const ::OpenAPI::OptionalParam<float> &n = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &e = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &s = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &w = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  cid qint32 [required]
    */
    virtual void r_delete(const qint32 &cid);

    /**
    * @param[in]  file QString [required]
    * @param[in]  fmt QString [required]
    */
    virtual void r_export(const QString &file, const QString &fmt);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addClutterCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCallback(OAIHttpRequestWorker *worker);
    void listCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);
    void r_exportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addClutterSignal();
    void deleteNetworkSignal();
    void listSignal();
    void r_deleteSignal();
    void r_exportSignal();


    void addClutterSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSignalFull(OAIHttpRequestWorker *worker);
    void listSignalFull(OAIHttpRequestWorker *worker);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker);
    void r_exportSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addClutterSignalError() instead")
    void addClutterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addClutterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalError() instead")
    void deleteNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalError() instead")
    void listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_exportSignalError() instead")
    void r_exportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_exportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addClutterSignalErrorFull() instead")
    void addClutterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addClutterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalErrorFull() instead")
    void deleteNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalErrorFull() instead")
    void listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_exportSignalErrorFull() instead")
    void r_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
