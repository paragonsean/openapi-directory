/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAntenna.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAntenna::OAIAntenna(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAntenna::OAIAntenna() {
    this->initializeModel();
}

OAIAntenna::~OAIAntenna() {}

void OAIAntenna::initializeModel() {

    m_ant_isSet = false;
    m_ant_isValid = false;

    m_azi_isSet = false;
    m_azi_isValid = false;

    m_hbw_isSet = false;
    m_hbw_isValid = false;

    m_pol_isSet = false;
    m_pol_isValid = false;

    m_tlt_isSet = false;
    m_tlt_isValid = false;

    m_txg_isSet = false;
    m_txg_isValid = false;

    m_txl_isSet = false;
    m_txl_isValid = false;

    m_vbw_isSet = false;
    m_vbw_isValid = false;
}

void OAIAntenna::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAntenna::fromJsonObject(QJsonObject json) {

    m_ant_isValid = ::OpenAPI::fromJsonValue(m_ant, json[QString("ant")]);
    m_ant_isSet = !json[QString("ant")].isNull() && m_ant_isValid;

    m_azi_isValid = ::OpenAPI::fromJsonValue(m_azi, json[QString("azi")]);
    m_azi_isSet = !json[QString("azi")].isNull() && m_azi_isValid;

    m_hbw_isValid = ::OpenAPI::fromJsonValue(m_hbw, json[QString("hbw")]);
    m_hbw_isSet = !json[QString("hbw")].isNull() && m_hbw_isValid;

    m_pol_isValid = ::OpenAPI::fromJsonValue(m_pol, json[QString("pol")]);
    m_pol_isSet = !json[QString("pol")].isNull() && m_pol_isValid;

    m_tlt_isValid = ::OpenAPI::fromJsonValue(m_tlt, json[QString("tlt")]);
    m_tlt_isSet = !json[QString("tlt")].isNull() && m_tlt_isValid;

    m_txg_isValid = ::OpenAPI::fromJsonValue(m_txg, json[QString("txg")]);
    m_txg_isSet = !json[QString("txg")].isNull() && m_txg_isValid;

    m_txl_isValid = ::OpenAPI::fromJsonValue(m_txl, json[QString("txl")]);
    m_txl_isSet = !json[QString("txl")].isNull() && m_txl_isValid;

    m_vbw_isValid = ::OpenAPI::fromJsonValue(m_vbw, json[QString("vbw")]);
    m_vbw_isSet = !json[QString("vbw")].isNull() && m_vbw_isValid;
}

QString OAIAntenna::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAntenna::asJsonObject() const {
    QJsonObject obj;
    if (m_ant_isSet) {
        obj.insert(QString("ant"), ::OpenAPI::toJsonValue(m_ant));
    }
    if (m_azi_isSet) {
        obj.insert(QString("azi"), ::OpenAPI::toJsonValue(m_azi));
    }
    if (m_hbw_isSet) {
        obj.insert(QString("hbw"), ::OpenAPI::toJsonValue(m_hbw));
    }
    if (m_pol_isSet) {
        obj.insert(QString("pol"), ::OpenAPI::toJsonValue(m_pol));
    }
    if (m_tlt_isSet) {
        obj.insert(QString("tlt"), ::OpenAPI::toJsonValue(m_tlt));
    }
    if (m_txg_isSet) {
        obj.insert(QString("txg"), ::OpenAPI::toJsonValue(m_txg));
    }
    if (m_txl_isSet) {
        obj.insert(QString("txl"), ::OpenAPI::toJsonValue(m_txl));
    }
    if (m_vbw_isSet) {
        obj.insert(QString("vbw"), ::OpenAPI::toJsonValue(m_vbw));
    }
    return obj;
}

qint32 OAIAntenna::getAnt() const {
    return m_ant;
}
void OAIAntenna::setAnt(const qint32 &ant) {
    m_ant = ant;
    m_ant_isSet = true;
}

bool OAIAntenna::is_ant_Set() const{
    return m_ant_isSet;
}

bool OAIAntenna::is_ant_Valid() const{
    return m_ant_isValid;
}

qint32 OAIAntenna::getAzi() const {
    return m_azi;
}
void OAIAntenna::setAzi(const qint32 &azi) {
    m_azi = azi;
    m_azi_isSet = true;
}

bool OAIAntenna::is_azi_Set() const{
    return m_azi_isSet;
}

bool OAIAntenna::is_azi_Valid() const{
    return m_azi_isValid;
}

qint32 OAIAntenna::getHbw() const {
    return m_hbw;
}
void OAIAntenna::setHbw(const qint32 &hbw) {
    m_hbw = hbw;
    m_hbw_isSet = true;
}

bool OAIAntenna::is_hbw_Set() const{
    return m_hbw_isSet;
}

bool OAIAntenna::is_hbw_Valid() const{
    return m_hbw_isValid;
}

QString OAIAntenna::getPol() const {
    return m_pol;
}
void OAIAntenna::setPol(const QString &pol) {
    m_pol = pol;
    m_pol_isSet = true;
}

bool OAIAntenna::is_pol_Set() const{
    return m_pol_isSet;
}

bool OAIAntenna::is_pol_Valid() const{
    return m_pol_isValid;
}

float OAIAntenna::getTlt() const {
    return m_tlt;
}
void OAIAntenna::setTlt(const float &tlt) {
    m_tlt = tlt;
    m_tlt_isSet = true;
}

bool OAIAntenna::is_tlt_Set() const{
    return m_tlt_isSet;
}

bool OAIAntenna::is_tlt_Valid() const{
    return m_tlt_isValid;
}

float OAIAntenna::getTxg() const {
    return m_txg;
}
void OAIAntenna::setTxg(const float &txg) {
    m_txg = txg;
    m_txg_isSet = true;
}

bool OAIAntenna::is_txg_Set() const{
    return m_txg_isSet;
}

bool OAIAntenna::is_txg_Valid() const{
    return m_txg_isValid;
}

float OAIAntenna::getTxl() const {
    return m_txl;
}
void OAIAntenna::setTxl(const float &txl) {
    m_txl = txl;
    m_txl_isSet = true;
}

bool OAIAntenna::is_txl_Set() const{
    return m_txl_isSet;
}

bool OAIAntenna::is_txl_Valid() const{
    return m_txl_isValid;
}

qint32 OAIAntenna::getVbw() const {
    return m_vbw;
}
void OAIAntenna::setVbw(const qint32 &vbw) {
    m_vbw = vbw;
    m_vbw_isSet = true;
}

bool OAIAntenna::is_vbw_Set() const{
    return m_vbw_isSet;
}

bool OAIAntenna::is_vbw_Valid() const{
    return m_vbw_isValid;
}

bool OAIAntenna::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hbw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tlt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vbw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAntenna::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
