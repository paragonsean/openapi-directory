/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Antenna from './Antenna';
import Environment from './Environment';
import Model from './Model';
import Output from './Output';
import Receiver from './Receiver';
import Transmitter from './Transmitter';

/**
 * The PathRequest model module.
 * @module model/PathRequest
 * @version 2.0.0
 */
class PathRequest {
    /**
     * Constructs a new <code>PathRequest</code>.
     * @alias module:model/PathRequest
     */
    constructor() { 
        
        PathRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['network'] = 'Testing';
        obj['site'] = 'Link';
    }

    /**
     * Constructs a <code>PathRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathRequest} obj Optional instance to populate.
     * @return {module:model/PathRequest} The populated <code>PathRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathRequest();

            if (data.hasOwnProperty('antenna')) {
                obj['antenna'] = Antenna.constructFromObject(data['antenna']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = Model.constructFromObject(data['model']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = Output.constructFromObject(data['output']);
            }
            if (data.hasOwnProperty('receiver')) {
                obj['receiver'] = Receiver.constructFromObject(data['receiver']);
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'String');
            }
            if (data.hasOwnProperty('transmitter')) {
                obj['transmitter'] = Transmitter.constructFromObject(data['transmitter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `antenna`
        if (data['antenna']) { // data not null
          Antenna.validateJSON(data['antenna']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          Model.validateJSON(data['model']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `output`
        if (data['output']) { // data not null
          Output.validateJSON(data['output']);
        }
        // validate the optional field `receiver`
        if (data['receiver']) { // data not null
          Receiver.validateJSON(data['receiver']);
        }
        // ensure the json data is a string
        if (data['site'] && !(typeof data['site'] === 'string' || data['site'] instanceof String)) {
            throw new Error("Expected the field `site` to be a primitive type in the JSON string but got " + data['site']);
        }
        // validate the optional field `transmitter`
        if (data['transmitter']) { // data not null
          Transmitter.validateJSON(data['transmitter']);
        }

        return true;
    }


}



/**
 * @member {module:model/Antenna} antenna
 */
PathRequest.prototype['antenna'] = undefined;

/**
 * @member {module:model/Environment} environment
 */
PathRequest.prototype['environment'] = undefined;

/**
 * @member {module:model/Model} model
 */
PathRequest.prototype['model'] = undefined;

/**
 * Network name/group
 * @member {String} network
 * @default 'Testing'
 */
PathRequest.prototype['network'] = 'Testing';

/**
 * @member {module:model/Output} output
 */
PathRequest.prototype['output'] = undefined;

/**
 * @member {module:model/Receiver} receiver
 */
PathRequest.prototype['receiver'] = undefined;

/**
 * Site name
 * @member {String} site
 * @default 'Link'
 */
PathRequest.prototype['site'] = 'Link';

/**
 * @member {module:model/Transmitter} transmitter
 */
PathRequest.prototype['transmitter'] = undefined;






export default PathRequest;

