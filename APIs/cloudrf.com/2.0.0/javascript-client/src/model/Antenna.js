/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Antenna model module.
 * @module model/Antenna
 * @version 2.0.0
 */
class Antenna {
    /**
     * Constructs a new <code>Antenna</code>.
     * @alias module:model/Antenna
     */
    constructor() { 
        
        Antenna.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ant'] = 1;
        obj['azi'] = 0;
        obj['hbw'] = 0;
        obj['pol'] = 'v';
        obj['tlt'] = 0;
        obj['txg'] = 2.15;
        obj['txl'] = 0;
        obj['vbw'] = 0;
    }

    /**
     * Constructs a <code>Antenna</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Antenna} obj Optional instance to populate.
     * @return {module:model/Antenna} The populated <code>Antenna</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Antenna();

            if (data.hasOwnProperty('ant')) {
                obj['ant'] = ApiClient.convertToType(data['ant'], 'Number');
            }
            if (data.hasOwnProperty('azi')) {
                obj['azi'] = ApiClient.convertToType(data['azi'], 'Number');
            }
            if (data.hasOwnProperty('hbw')) {
                obj['hbw'] = ApiClient.convertToType(data['hbw'], 'Number');
            }
            if (data.hasOwnProperty('pol')) {
                obj['pol'] = ApiClient.convertToType(data['pol'], 'String');
            }
            if (data.hasOwnProperty('tlt')) {
                obj['tlt'] = ApiClient.convertToType(data['tlt'], 'Number');
            }
            if (data.hasOwnProperty('txg')) {
                obj['txg'] = ApiClient.convertToType(data['txg'], 'Number');
            }
            if (data.hasOwnProperty('txl')) {
                obj['txl'] = ApiClient.convertToType(data['txl'], 'Number');
            }
            if (data.hasOwnProperty('vbw')) {
                obj['vbw'] = ApiClient.convertToType(data['vbw'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Antenna</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Antenna</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pol'] && !(typeof data['pol'] === 'string' || data['pol'] instanceof String)) {
            throw new Error("Expected the field `pol` to be a primitive type in the JSON string but got " + data['pol']);
        }

        return true;
    }


}



/**
 * Antenna pattern code. 1=Vertical dipole (Omni-directional)
 * @member {Number} ant
 * @default 1
 */
Antenna.prototype['ant'] = 1;

/**
 * Antenna azimuth in degrees north
 * @member {Number} azi
 * @default 0
 */
Antenna.prototype['azi'] = 0;

/**
 * Custom antenna horizontal beamwidth in degrees. For use only with ant=0
 * @member {Number} hbw
 * @default 0
 */
Antenna.prototype['hbw'] = 0;

/**
 * Antenna polarization as either h or v
 * @member {module:model/Antenna.PolEnum} pol
 * @default 'v'
 */
Antenna.prototype['pol'] = 'v';

/**
 * Antenna tilt in degrees below the horizon (inverted)
 * @member {Number} tlt
 * @default 0
 */
Antenna.prototype['tlt'] = 0;

/**
 * Transmitter antenna gain in dBi
 * @member {Number} txg
 * @default 2.15
 */
Antenna.prototype['txg'] = 2.15;

/**
 * Feeder loss in dB
 * @member {Number} txl
 * @default 0
 */
Antenna.prototype['txl'] = 0;

/**
 * Custom antenna vertical beamwidth in degrees. For use only with ant=0
 * @member {Number} vbw
 * @default 0
 */
Antenna.prototype['vbw'] = 0;





/**
 * Allowed values for the <code>pol</code> property.
 * @enum {String}
 * @readonly
 */
Antenna['PolEnum'] = {

    /**
     * value: "h"
     * @const
     */
    "h": "h",

    /**
     * value: "v"
     * @const
     */
    "v": "v"
};



export default Antenna;

