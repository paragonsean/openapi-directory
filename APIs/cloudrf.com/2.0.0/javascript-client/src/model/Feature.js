/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feature model module.
 * @module model/Feature
 * @version 2.0.0
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * @alias module:model/Feature
     */
    constructor() { 
        
        Feature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['geometry'] = '{'type':'Polygon','coordinates':[[]]}';
        obj['properties'] = '{'height':4,'material':1}';
        obj['type'] = 'Feature';
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = ApiClient.convertToType(data['geometry'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['geometry'] && !(typeof data['geometry'] === 'string' || data['geometry'] instanceof String)) {
            throw new Error("Expected the field `geometry` to be a primitive type in the JSON string but got " + data['geometry']);
        }
        // ensure the json data is a string
        if (data['properties'] && !(typeof data['properties'] === 'string' || data['properties'] instanceof String)) {
            throw new Error("Expected the field `properties` to be a primitive type in the JSON string but got " + data['properties']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} geometry
 * @default '{'type':'Polygon','coordinates':[[]]}'
 */
Feature.prototype['geometry'] = '{'type':'Polygon','coordinates':[[]]}';

/**
 * @member {String} properties
 * @default '{'height':4,'material':1}'
 */
Feature.prototype['properties'] = '{'height':4,'material':1}';

/**
 * @member {String} type
 * @default 'Feature'
 */
Feature.prototype['type'] = 'Feature';






export default Feature;

