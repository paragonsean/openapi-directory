/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Output model module.
 * @module model/Output
 * @version 2.0.0
 */
class Output {
    /**
     * Constructs a new <code>Output</code>.
     * @alias module:model/Output
     */
    constructor() { 
        
        Output.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ber'] = 0;
        obj['col'] = 'RAINBOW.dBm';
        obj['mod'] = 0;
        obj['nf'] = -114;
        obj['out'] = 2;
        obj['rad'] = 5;
        obj['res'] = 10;
        obj['units'] = 'metric';
    }

    /**
     * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Output} obj Optional instance to populate.
     * @return {module:model/Output} The populated <code>Output</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Output();

            if (data.hasOwnProperty('ber')) {
                obj['ber'] = ApiClient.convertToType(data['ber'], 'Number');
            }
            if (data.hasOwnProperty('col')) {
                obj['col'] = ApiClient.convertToType(data['col'], 'String');
            }
            if (data.hasOwnProperty('mod')) {
                obj['mod'] = ApiClient.convertToType(data['mod'], 'Number');
            }
            if (data.hasOwnProperty('nf')) {
                obj['nf'] = ApiClient.convertToType(data['nf'], 'Number');
            }
            if (data.hasOwnProperty('out')) {
                obj['out'] = ApiClient.convertToType(data['out'], 'Number');
            }
            if (data.hasOwnProperty('rad')) {
                obj['rad'] = ApiClient.convertToType(data['rad'], 'Number');
            }
            if (data.hasOwnProperty('res')) {
                obj['res'] = ApiClient.convertToType(data['res'], 'Number');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Output</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Output</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['col'] && !(typeof data['col'] === 'string' || data['col'] instanceof String)) {
            throw new Error("Expected the field `col` to be a primitive type in the JSON string but got " + data['col']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }

        return true;
    }


}



/**
 * Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12
 * @member {Number} ber
 * @default 0
 */
Output.prototype['ber'] = 0;

/**
 * Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..
 * @member {String} col
 * @default 'RAINBOW.dBm'
 */
Output.prototype['col'] = 'RAINBOW.dBm';

/**
 * Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa
 * @member {Number} mod
 * @default 0
 */
Output.prototype['mod'] = 0;

/**
 * Noise floor in dBm for use with out=4 / SNR
 * @member {Number} nf
 * @default -114
 */
Output.prototype['nf'] = -114;

/**
 * Measured units. 1=dB,2=dBm,3=dBuV,4=SNR
 * @member {Number} out
 * @default 2
 */
Output.prototype['out'] = 2;

/**
 * Radius in kilometres for output
 * @member {Number} rad
 * @default 5
 */
Output.prototype['rad'] = 5;

/**
 * Resolution in metres for output
 * @member {Number} res
 * @default 10
 */
Output.prototype['res'] = 10;

/**
 * Distance units in either metres/kilometres (metric) or feet/miles (imperial)
 * @member {module:model/Output.UnitsEnum} units
 * @default 'metric'
 */
Output.prototype['units'] = 'metric';





/**
 * Allowed values for the <code>units</code> property.
 * @enum {String}
 * @readonly
 */
Output['UnitsEnum'] = {

    /**
     * value: "metric"
     * @const
     */
    "metric": "metric",

    /**
     * value: "imperial"
     * @const
     */
    "imperial": "imperial"
};



export default Output;

