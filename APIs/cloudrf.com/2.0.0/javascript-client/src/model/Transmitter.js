/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transmitter model module.
 * @module model/Transmitter
 * @version 2.0.0
 */
class Transmitter {
    /**
     * Constructs a new <code>Transmitter</code>.
     * @alias module:model/Transmitter
     */
    constructor() { 
        
        Transmitter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['alt'] = 1;
        obj['bwi'] = 0.1;
        obj['frq'] = 868;
        obj['lat'] = 38.916;
        obj['lon'] = 1.448;
        obj['txw'] = 0.1;
    }

    /**
     * Constructs a <code>Transmitter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transmitter} obj Optional instance to populate.
     * @return {module:model/Transmitter} The populated <code>Transmitter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transmitter();

            if (data.hasOwnProperty('alt')) {
                obj['alt'] = ApiClient.convertToType(data['alt'], 'Number');
            }
            if (data.hasOwnProperty('bwi')) {
                obj['bwi'] = ApiClient.convertToType(data['bwi'], 'Number');
            }
            if (data.hasOwnProperty('frq')) {
                obj['frq'] = ApiClient.convertToType(data['frq'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('txw')) {
                obj['txw'] = ApiClient.convertToType(data['txw'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transmitter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transmitter</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Altitude above ground level in metres OR feet
 * @member {Number} alt
 * @default 1
 */
Transmitter.prototype['alt'] = 1;

/**
 * Bandwidth in MHz. 1MHz has a noise floor of -114dBm. 10MHz = -104dBm, 20MHz = -101dBm
 * @member {Number} bwi
 * @default 0.1
 */
Transmitter.prototype['bwi'] = 0.1;

/**
 * Centre frequency in megahertz
 * @member {Number} frq
 * @default 868
 */
Transmitter.prototype['frq'] = 868;

/**
 * Latitude in decimal degrees
 * @member {Number} lat
 * @default 38.916
 */
Transmitter.prototype['lat'] = 38.916;

/**
 * Longitude in decimal degrees
 * @member {Number} lon
 * @default 1.448
 */
Transmitter.prototype['lon'] = 1.448;

/**
 * Transmitter power in watts before the antenna
 * @member {Number} txw
 * @default 0.1
 */
Transmitter.prototype['txw'] = 0.1;






export default Transmitter;

