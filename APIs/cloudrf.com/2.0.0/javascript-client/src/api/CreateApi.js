/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AreaRequest from '../model/AreaRequest';
import PathRequest from '../model/PathRequest';
import PointsRequest from '../model/PointsRequest';

/**
* Create service.
* @module api/CreateApi
* @version 2.0.0
*/
export default class CreateApi {

    /**
    * Constructs a new CreateApi. 
    * @alias module:api/CreateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the area operation.
     * @callback module:api/CreateApi~areaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a point-to-multipoint heatmap
     * An area coverage assumes the same receiver height at all locations out to fixed radius (maximum 300km). Due to it's exhaustive processing it is the slowest of all the API calls. Speed can be improved significantly by adjusting the resolution 'res' parameter. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:model/AreaRequest} areaRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:api/CreateApi~areaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    area(areaRequest, callback) {
      let postBody = areaRequest;
      // verify the required parameter 'areaRequest' is set
      if (areaRequest === undefined || areaRequest === null) {
        throw new Error("Missing the required parameter 'areaRequest' when calling area");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/area', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the path operation.
     * @callback module:api/CreateApi~pathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Point-to-point path profile analysis (Tx to Rx)
     * A path profile is a single link from A to B. It is much faster than an area calculation and can be used out to 300km. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:model/PathRequest} pathRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:api/CreateApi~pathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    path(pathRequest, callback) {
      let postBody = pathRequest;
      // verify the required parameter 'pathRequest' is set
      if (pathRequest === undefined || pathRequest === null) {
        throw new Error("Missing the required parameter 'pathRequest' when calling path");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/path', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the points operation.
     * @callback module:api/CreateApi~pointsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Point-to-multipoint path profile analysis (Many Tx, one Rx)
     * The points function tests many transmitters and one receiver and is designed for route analysis. A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:model/PointsRequest} pointsRequest A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param {module:api/CreateApi~pointsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    points(pointsRequest, callback) {
      let postBody = pointsRequest;
      // verify the required parameter 'pointsRequest' is set
      if (pointsRequest === undefined || pointsRequest === null) {
        throw new Error("Missing the required parameter 'pointsRequest' when calling points");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
