/**
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Analyse service.
* @module api/AnalyseApi
* @version 2.0.0
*/
export default class AnalyseApi {

    /**
    * Constructs a new AnalyseApi. 
    * @alias module:api/AnalyseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the interference operation.
     * @callback module:api/AnalyseApi~interferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the best server for overlapping coverage
     * Merge and analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette and the strongest signal promoted at a given location.
     * @param {String} network Network name eg. Overlapping broadcast stations
     * @param {String} name Interference layer name eg. QRM_map
     * @param {module:api/AnalyseApi~interferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interference(network, name, callback) {
      let postBody = null;
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling interference");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling interference");
      }

      let pathParams = {
      };
      let queryParams = {
        'network': network,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/interference', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mesh operation.
     * @callback module:api/AnalyseApi~meshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge sites into a super layer.
     * A merge of 'area' calculations for a network to create a single super layer. Stronger signals are promoted over weaker ones. The same colour key must be used.
     * @param {String} network Network name eg. 100_BLUE_repeaters_nationwide
     * @param {String} name Super layer name eg. National_map
     * @param {module:api/AnalyseApi~meshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mesh(network, name, callback) {
      let postBody = null;
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling mesh");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling mesh");
      }

      let pathParams = {
      };
      let queryParams = {
        'network': network,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/mesh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the network operation.
     * @callback module:api/AnalyseApi~networkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the best server for somewhere
     * Query your network to find the best server(s) for a given receiver/customer location. A previously generated network is required.
     * @param {String} net Network name
     * @param {String} nam Super layer name
     * @param {Number} lat Latitude in decimal degrees
     * @param {Number} lon Longitude in decimal degrees
     * @param {Number} alt Height above ground level in metres
     * @param {Object} opts Optional parameters
     * @param {Number} [rxg] Receiver gain in dBi
     * @param {module:api/AnalyseApi~networkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    network(net, nam, lat, lon, alt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'net' is set
      if (net === undefined || net === null) {
        throw new Error("Missing the required parameter 'net' when calling network");
      }
      // verify the required parameter 'nam' is set
      if (nam === undefined || nam === null) {
        throw new Error("Missing the required parameter 'nam' when calling network");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling network");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling network");
      }
      // verify the required parameter 'alt' is set
      if (alt === undefined || alt === null) {
        throw new Error("Missing the required parameter 'alt' when calling network");
      }

      let pathParams = {
      };
      let queryParams = {
        'net': net,
        'nam': nam,
        'lat': lat,
        'lon': lon,
        'alt': alt,
        'rxg': opts['rxg']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/network', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
