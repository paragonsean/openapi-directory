/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:22.355657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Output {
  public static final String SERIALIZED_NAME_BER = "ber";
  @SerializedName(SERIALIZED_NAME_BER)
  private Integer ber = 0;

  public static final String SERIALIZED_NAME_COL = "col";
  @SerializedName(SERIALIZED_NAME_COL)
  private String col = "RAINBOW.dBm";

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  private Integer mod = 0;

  public static final String SERIALIZED_NAME_NF = "nf";
  @SerializedName(SERIALIZED_NAME_NF)
  private Integer nf = -114;

  public static final String SERIALIZED_NAME_OUT = "out";
  @SerializedName(SERIALIZED_NAME_OUT)
  private Integer out = 2;

  public static final String SERIALIZED_NAME_RAD = "rad";
  @SerializedName(SERIALIZED_NAME_RAD)
  private Float rad = 5f;

  public static final String SERIALIZED_NAME_RES = "res";
  @SerializedName(SERIALIZED_NAME_RES)
  private Integer res = 10;

  /**
   * Distance units in either metres/kilometres (metric) or feet/miles (imperial)
   */
  @JsonAdapter(UnitsEnum.Adapter.class)
  public enum UnitsEnum {
    METRIC("metric"),
    
    IMPERIAL("imperial");

    private String value;

    UnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitsEnum fromValue(String value) {
      for (UnitsEnum b : UnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private UnitsEnum units = UnitsEnum.METRIC;

  public Output() {
  }

  public Output ber(Integer ber) {
    this.ber = ber;
    return this;
  }

  /**
   * Bit error rate. 1&#x3D;0.1, 2&#x3D;0.01, 3&#x3D;0.001, 4&#x3D;0.0001,5&#x3D;0.00001,6&#x3D;0.000001. &gt;6&#x3D;Lora: 7&#x3D;SF7,8&#x3D;SF8,9&#x3D;SF9,10&#x3D;SF10,11&#x3D;SF11,12&#x3D;SF12
   * minimum: 0
   * maximum: 10
   * @return ber
   */
  @javax.annotation.Nullable
  public Integer getBer() {
    return ber;
  }

  public void setBer(Integer ber) {
    this.ber = ber;
  }


  public Output col(String col) {
    this.col = col;
    return this;
  }

  /**
   * Colour schema code OR filename. 1 &#x3D; Cellular (5), 2&#x3D;Red, 3&#x3D;Green, 4&#x3D;Blue, 5&#x3D;Microwave(7), 7&#x3D;Custom RGB, 8&#x3D;Automatic by frequency, 9&#x3D;Greyscale / GIS, 10&#x3D;Rainbow(24), 11&#x3D;Green/Blue/Red, 13&#x3D;Sub noise floor (10), 14&#x3D;TV broadcasting (4), 15&#x3D;Red threshold, 16&#x3D;Green threshold, 17&#x3D;Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..
   * @return col
   */
  @javax.annotation.Nullable
  public String getCol() {
    return col;
  }

  public void setCol(String col) {
    this.col = col;
  }


  public Output mod(Integer mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modulation. 1&#x3D;4QAM,2&#x3D;16QAM,3&#x3D;64QAM,4&#x3D;256QAM,5&#x3D;1024QAM,6&#x3D;BPSK,7&#x3D;QPSK,8&#x3D;8PSK,9&#x3D;16PSK,10&#x3D;32PSK,11&#x3D;LoRa
   * minimum: 1
   * maximum: 11
   * @return mod
   */
  @javax.annotation.Nullable
  public Integer getMod() {
    return mod;
  }

  public void setMod(Integer mod) {
    this.mod = mod;
  }


  public Output nf(Integer nf) {
    this.nf = nf;
    return this;
  }

  /**
   * Noise floor in dBm for use with out&#x3D;4 / SNR
   * minimum: -120
   * maximum: -90
   * @return nf
   */
  @javax.annotation.Nullable
  public Integer getNf() {
    return nf;
  }

  public void setNf(Integer nf) {
    this.nf = nf;
  }


  public Output out(Integer out) {
    this.out = out;
    return this;
  }

  /**
   * Measured units. 1&#x3D;dB,2&#x3D;dBm,3&#x3D;dBuV,4&#x3D;SNR
   * minimum: 1
   * maximum: 4
   * @return out
   */
  @javax.annotation.Nullable
  public Integer getOut() {
    return out;
  }

  public void setOut(Integer out) {
    this.out = out;
  }


  public Output rad(Float rad) {
    this.rad = rad;
    return this;
  }

  /**
   * Radius in kilometres for output
   * minimum: 0.03
   * maximum: 300
   * @return rad
   */
  @javax.annotation.Nullable
  public Float getRad() {
    return rad;
  }

  public void setRad(Float rad) {
    this.rad = rad;
  }


  public Output res(Integer res) {
    this.res = res;
    return this;
  }

  /**
   * Resolution in metres for output
   * minimum: 2
   * maximum: 200
   * @return res
   */
  @javax.annotation.Nullable
  public Integer getRes() {
    return res;
  }

  public void setRes(Integer res) {
    this.res = res;
  }


  public Output units(UnitsEnum units) {
    this.units = units;
    return this;
  }

  /**
   * Distance units in either metres/kilometres (metric) or feet/miles (imperial)
   * @return units
   */
  @javax.annotation.Nullable
  public UnitsEnum getUnits() {
    return units;
  }

  public void setUnits(UnitsEnum units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output output = (Output) o;
    return Objects.equals(this.ber, output.ber) &&
        Objects.equals(this.col, output.col) &&
        Objects.equals(this.mod, output.mod) &&
        Objects.equals(this.nf, output.nf) &&
        Objects.equals(this.out, output.out) &&
        Objects.equals(this.rad, output.rad) &&
        Objects.equals(this.res, output.res) &&
        Objects.equals(this.units, output.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ber, col, mod, nf, out, rad, res, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output {\n");
    sb.append("    ber: ").append(toIndentedString(ber)).append("\n");
    sb.append("    col: ").append(toIndentedString(col)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    nf: ").append(toIndentedString(nf)).append("\n");
    sb.append("    out: ").append(toIndentedString(out)).append("\n");
    sb.append("    rad: ").append(toIndentedString(rad)).append("\n");
    sb.append("    res: ").append(toIndentedString(res)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ber");
    openapiFields.add("col");
    openapiFields.add("mod");
    openapiFields.add("nf");
    openapiFields.add("out");
    openapiFields.add("rad");
    openapiFields.add("res");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Output
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output is not found in the empty JSON string", Output.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Output.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Output` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("col") != null && !jsonObj.get("col").isJsonNull()) && !jsonObj.get("col").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `col` to be a primitive type in the JSON string but got `%s`", jsonObj.get("col").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      // validate the optional field `units`
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) {
        UnitsEnum.validateJsonElement(jsonObj.get("units"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output.class));

       return (TypeAdapter<T>) new TypeAdapter<Output>() {
           @Override
           public void write(JsonWriter out, Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Output read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Output given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Output
   * @throws IOException if the JSON string is invalid with respect to Output
   */
  public static Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output.class);
  }

  /**
   * Convert an instance of Output to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

