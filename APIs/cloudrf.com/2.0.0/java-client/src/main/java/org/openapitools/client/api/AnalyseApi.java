/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interference
     * @param network Network name eg. Overlapping broadcast stations (required)
     * @param name Interference layer name eg. QRM_map (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interferenceCall(String network, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/interference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interferenceValidateBeforeCall(String network, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling interference(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling interference(Async)");
        }

        return interferenceCall(network, name, _callback);

    }

    /**
     * Find the best server for overlapping coverage
     * Merge and analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette and the strongest signal promoted at a given location.
     * @param network Network name eg. Overlapping broadcast stations (required)
     * @param name Interference layer name eg. QRM_map (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void interference(String network, String name) throws ApiException {
        interferenceWithHttpInfo(network, name);
    }

    /**
     * Find the best server for overlapping coverage
     * Merge and analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette and the strongest signal promoted at a given location.
     * @param network Network name eg. Overlapping broadcast stations (required)
     * @param name Interference layer name eg. QRM_map (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> interferenceWithHttpInfo(String network, String name) throws ApiException {
        okhttp3.Call localVarCall = interferenceValidateBeforeCall(network, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find the best server for overlapping coverage (asynchronously)
     * Merge and analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette and the strongest signal promoted at a given location.
     * @param network Network name eg. Overlapping broadcast stations (required)
     * @param name Interference layer name eg. QRM_map (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interferenceAsync(String network, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = interferenceValidateBeforeCall(network, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mesh
     * @param network Network name eg. 100_BLUE_repeaters_nationwide (required)
     * @param name Super layer name eg. National_map (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshCall(String network, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mesh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshValidateBeforeCall(String network, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling mesh(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling mesh(Async)");
        }

        return meshCall(network, name, _callback);

    }

    /**
     * Merge sites into a super layer.
     * A merge of &#39;area&#39; calculations for a network to create a single super layer. Stronger signals are promoted over weaker ones. The same colour key must be used.
     * @param network Network name eg. 100_BLUE_repeaters_nationwide (required)
     * @param name Super layer name eg. National_map (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void mesh(String network, String name) throws ApiException {
        meshWithHttpInfo(network, name);
    }

    /**
     * Merge sites into a super layer.
     * A merge of &#39;area&#39; calculations for a network to create a single super layer. Stronger signals are promoted over weaker ones. The same colour key must be used.
     * @param network Network name eg. 100_BLUE_repeaters_nationwide (required)
     * @param name Super layer name eg. National_map (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> meshWithHttpInfo(String network, String name) throws ApiException {
        okhttp3.Call localVarCall = meshValidateBeforeCall(network, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Merge sites into a super layer. (asynchronously)
     * A merge of &#39;area&#39; calculations for a network to create a single super layer. Stronger signals are promoted over weaker ones. The same colour key must be used.
     * @param network Network name eg. 100_BLUE_repeaters_nationwide (required)
     * @param name Super layer name eg. National_map (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshAsync(String network, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshValidateBeforeCall(network, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for network
     * @param net Network name (required)
     * @param nam Super layer name (required)
     * @param lat Latitude in decimal degrees (required)
     * @param lon Longitude in decimal degrees (required)
     * @param alt Height above ground level in metres (required)
     * @param rxg Receiver gain in dBi (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkCall(String net, String nam, Float lat, Float lon, Integer alt, Float rxg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (net != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("net", net));
        }

        if (nam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nam", nam));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (rxg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rxg", rxg));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkValidateBeforeCall(String net, String nam, Float lat, Float lon, Integer alt, Float rxg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'net' is set
        if (net == null) {
            throw new ApiException("Missing the required parameter 'net' when calling network(Async)");
        }

        // verify the required parameter 'nam' is set
        if (nam == null) {
            throw new ApiException("Missing the required parameter 'nam' when calling network(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling network(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling network(Async)");
        }

        // verify the required parameter 'alt' is set
        if (alt == null) {
            throw new ApiException("Missing the required parameter 'alt' when calling network(Async)");
        }

        return networkCall(net, nam, lat, lon, alt, rxg, _callback);

    }

    /**
     * Find the best server for somewhere
     * Query your network to find the best server(s) for a given receiver/customer location. A previously generated network is required.
     * @param net Network name (required)
     * @param nam Super layer name (required)
     * @param lat Latitude in decimal degrees (required)
     * @param lon Longitude in decimal degrees (required)
     * @param alt Height above ground level in metres (required)
     * @param rxg Receiver gain in dBi (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void network(String net, String nam, Float lat, Float lon, Integer alt, Float rxg) throws ApiException {
        networkWithHttpInfo(net, nam, lat, lon, alt, rxg);
    }

    /**
     * Find the best server for somewhere
     * Query your network to find the best server(s) for a given receiver/customer location. A previously generated network is required.
     * @param net Network name (required)
     * @param nam Super layer name (required)
     * @param lat Latitude in decimal degrees (required)
     * @param lon Longitude in decimal degrees (required)
     * @param alt Height above ground level in metres (required)
     * @param rxg Receiver gain in dBi (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> networkWithHttpInfo(String net, String nam, Float lat, Float lon, Integer alt, Float rxg) throws ApiException {
        okhttp3.Call localVarCall = networkValidateBeforeCall(net, nam, lat, lon, alt, rxg, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find the best server for somewhere (asynchronously)
     * Query your network to find the best server(s) for a given receiver/customer location. A previously generated network is required.
     * @param net Network name (required)
     * @param nam Super layer name (required)
     * @param lat Latitude in decimal degrees (required)
     * @param lon Longitude in decimal degrees (required)
     * @param alt Height above ground level in metres (required)
     * @param rxg Receiver gain in dBi (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkAsync(String net, String nam, Float lat, Float lon, Integer alt, Float rxg, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkValidateBeforeCall(net, nam, lat, lon, alt, rxg, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
