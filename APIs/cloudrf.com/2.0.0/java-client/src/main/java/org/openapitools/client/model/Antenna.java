/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Antenna
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:22.355657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Antenna {
  public static final String SERIALIZED_NAME_ANT = "ant";
  @SerializedName(SERIALIZED_NAME_ANT)
  private Integer ant = 1;

  public static final String SERIALIZED_NAME_AZI = "azi";
  @SerializedName(SERIALIZED_NAME_AZI)
  private Integer azi = 0;

  public static final String SERIALIZED_NAME_HBW = "hbw";
  @SerializedName(SERIALIZED_NAME_HBW)
  private Integer hbw = 0;

  /**
   * Antenna polarization as either h or v
   */
  @JsonAdapter(PolEnum.Adapter.class)
  public enum PolEnum {
    H("h"),
    
    V("v");

    private String value;

    PolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolEnum fromValue(String value) {
      for (PolEnum b : PolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POL = "pol";
  @SerializedName(SERIALIZED_NAME_POL)
  private PolEnum pol = PolEnum.V;

  public static final String SERIALIZED_NAME_TLT = "tlt";
  @SerializedName(SERIALIZED_NAME_TLT)
  private Float tlt = 0f;

  public static final String SERIALIZED_NAME_TXG = "txg";
  @SerializedName(SERIALIZED_NAME_TXG)
  private Float txg = 2.15f;

  public static final String SERIALIZED_NAME_TXL = "txl";
  @SerializedName(SERIALIZED_NAME_TXL)
  private Float txl = 0f;

  public static final String SERIALIZED_NAME_VBW = "vbw";
  @SerializedName(SERIALIZED_NAME_VBW)
  private Integer vbw = 0;

  public Antenna() {
  }

  public Antenna ant(Integer ant) {
    this.ant = ant;
    return this;
  }

  /**
   * Antenna pattern code. 1&#x3D;Vertical dipole (Omni-directional)
   * @return ant
   */
  @javax.annotation.Nullable
  public Integer getAnt() {
    return ant;
  }

  public void setAnt(Integer ant) {
    this.ant = ant;
  }


  public Antenna azi(Integer azi) {
    this.azi = azi;
    return this;
  }

  /**
   * Antenna azimuth in degrees north
   * minimum: 0
   * maximum: 360
   * @return azi
   */
  @javax.annotation.Nullable
  public Integer getAzi() {
    return azi;
  }

  public void setAzi(Integer azi) {
    this.azi = azi;
  }


  public Antenna hbw(Integer hbw) {
    this.hbw = hbw;
    return this;
  }

  /**
   * Custom antenna horizontal beamwidth in degrees. For use only with ant&#x3D;0
   * minimum: 0
   * maximum: 360
   * @return hbw
   */
  @javax.annotation.Nullable
  public Integer getHbw() {
    return hbw;
  }

  public void setHbw(Integer hbw) {
    this.hbw = hbw;
  }


  public Antenna pol(PolEnum pol) {
    this.pol = pol;
    return this;
  }

  /**
   * Antenna polarization as either h or v
   * @return pol
   */
  @javax.annotation.Nullable
  public PolEnum getPol() {
    return pol;
  }

  public void setPol(PolEnum pol) {
    this.pol = pol;
  }


  public Antenna tlt(Float tlt) {
    this.tlt = tlt;
    return this;
  }

  /**
   * Antenna tilt in degrees below the horizon (inverted)
   * minimum: -10
   * maximum: 90
   * @return tlt
   */
  @javax.annotation.Nullable
  public Float getTlt() {
    return tlt;
  }

  public void setTlt(Float tlt) {
    this.tlt = tlt;
  }


  public Antenna txg(Float txg) {
    this.txg = txg;
    return this;
  }

  /**
   * Transmitter antenna gain in dBi
   * minimum: -10
   * maximum: 60
   * @return txg
   */
  @javax.annotation.Nullable
  public Float getTxg() {
    return txg;
  }

  public void setTxg(Float txg) {
    this.txg = txg;
  }


  public Antenna txl(Float txl) {
    this.txl = txl;
    return this;
  }

  /**
   * Feeder loss in dB
   * minimum: 0
   * maximum: 60
   * @return txl
   */
  @javax.annotation.Nullable
  public Float getTxl() {
    return txl;
  }

  public void setTxl(Float txl) {
    this.txl = txl;
  }


  public Antenna vbw(Integer vbw) {
    this.vbw = vbw;
    return this;
  }

  /**
   * Custom antenna vertical beamwidth in degrees. For use only with ant&#x3D;0
   * minimum: 0
   * maximum: 360
   * @return vbw
   */
  @javax.annotation.Nullable
  public Integer getVbw() {
    return vbw;
  }

  public void setVbw(Integer vbw) {
    this.vbw = vbw;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Antenna antenna = (Antenna) o;
    return Objects.equals(this.ant, antenna.ant) &&
        Objects.equals(this.azi, antenna.azi) &&
        Objects.equals(this.hbw, antenna.hbw) &&
        Objects.equals(this.pol, antenna.pol) &&
        Objects.equals(this.tlt, antenna.tlt) &&
        Objects.equals(this.txg, antenna.txg) &&
        Objects.equals(this.txl, antenna.txl) &&
        Objects.equals(this.vbw, antenna.vbw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ant, azi, hbw, pol, tlt, txg, txl, vbw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Antenna {\n");
    sb.append("    ant: ").append(toIndentedString(ant)).append("\n");
    sb.append("    azi: ").append(toIndentedString(azi)).append("\n");
    sb.append("    hbw: ").append(toIndentedString(hbw)).append("\n");
    sb.append("    pol: ").append(toIndentedString(pol)).append("\n");
    sb.append("    tlt: ").append(toIndentedString(tlt)).append("\n");
    sb.append("    txg: ").append(toIndentedString(txg)).append("\n");
    sb.append("    txl: ").append(toIndentedString(txl)).append("\n");
    sb.append("    vbw: ").append(toIndentedString(vbw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ant");
    openapiFields.add("azi");
    openapiFields.add("hbw");
    openapiFields.add("pol");
    openapiFields.add("tlt");
    openapiFields.add("txg");
    openapiFields.add("txl");
    openapiFields.add("vbw");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Antenna
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Antenna.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Antenna is not found in the empty JSON string", Antenna.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Antenna.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Antenna` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pol") != null && !jsonObj.get("pol").isJsonNull()) && !jsonObj.get("pol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pol").toString()));
      }
      // validate the optional field `pol`
      if (jsonObj.get("pol") != null && !jsonObj.get("pol").isJsonNull()) {
        PolEnum.validateJsonElement(jsonObj.get("pol"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Antenna.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Antenna' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Antenna> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Antenna.class));

       return (TypeAdapter<T>) new TypeAdapter<Antenna>() {
           @Override
           public void write(JsonWriter out, Antenna value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Antenna read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Antenna given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Antenna
   * @throws IOException if the JSON string is invalid with respect to Antenna
   */
  public static Antenna fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Antenna.class);
  }

  /**
   * Convert an instance of Antenna to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

