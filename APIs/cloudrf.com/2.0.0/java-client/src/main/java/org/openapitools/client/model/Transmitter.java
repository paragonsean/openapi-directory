/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transmitter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:22.355657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transmitter {
  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private Float alt = 1f;

  public static final String SERIALIZED_NAME_BWI = "bwi";
  @SerializedName(SERIALIZED_NAME_BWI)
  private Float bwi = 0.1f;

  public static final String SERIALIZED_NAME_FRQ = "frq";
  @SerializedName(SERIALIZED_NAME_FRQ)
  private Float frq = 868f;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Float lat = 38.916f;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Float lon = 1.448f;

  public static final String SERIALIZED_NAME_TXW = "txw";
  @SerializedName(SERIALIZED_NAME_TXW)
  private Float txw = 0.1f;

  public Transmitter() {
  }

  public Transmitter alt(Float alt) {
    this.alt = alt;
    return this;
  }

  /**
   * Altitude above ground level in metres OR feet
   * minimum: 0.1
   * maximum: 60000
   * @return alt
   */
  @javax.annotation.Nullable
  public Float getAlt() {
    return alt;
  }

  public void setAlt(Float alt) {
    this.alt = alt;
  }


  public Transmitter bwi(Float bwi) {
    this.bwi = bwi;
    return this;
  }

  /**
   * Bandwidth in MHz. 1MHz has a noise floor of -114dBm. 10MHz &#x3D; -104dBm, 20MHz &#x3D; -101dBm
   * minimum: 0.1
   * maximum: 100
   * @return bwi
   */
  @javax.annotation.Nullable
  public Float getBwi() {
    return bwi;
  }

  public void setBwi(Float bwi) {
    this.bwi = bwi;
  }


  public Transmitter frq(Float frq) {
    this.frq = frq;
    return this;
  }

  /**
   * Centre frequency in megahertz
   * minimum: 1
   * maximum: 100000
   * @return frq
   */
  @javax.annotation.Nullable
  public Float getFrq() {
    return frq;
  }

  public void setFrq(Float frq) {
    this.frq = frq;
  }


  public Transmitter lat(Float lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude in decimal degrees
   * minimum: -89
   * maximum: 89
   * @return lat
   */
  @javax.annotation.Nullable
  public Float getLat() {
    return lat;
  }

  public void setLat(Float lat) {
    this.lat = lat;
  }


  public Transmitter lon(Float lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Longitude in decimal degrees
   * minimum: -180
   * maximum: 180
   * @return lon
   */
  @javax.annotation.Nullable
  public Float getLon() {
    return lon;
  }

  public void setLon(Float lon) {
    this.lon = lon;
  }


  public Transmitter txw(Float txw) {
    this.txw = txw;
    return this;
  }

  /**
   * Transmitter power in watts before the antenna
   * minimum: 0.001
   * maximum: 2000000
   * @return txw
   */
  @javax.annotation.Nullable
  public Float getTxw() {
    return txw;
  }

  public void setTxw(Float txw) {
    this.txw = txw;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transmitter transmitter = (Transmitter) o;
    return Objects.equals(this.alt, transmitter.alt) &&
        Objects.equals(this.bwi, transmitter.bwi) &&
        Objects.equals(this.frq, transmitter.frq) &&
        Objects.equals(this.lat, transmitter.lat) &&
        Objects.equals(this.lon, transmitter.lon) &&
        Objects.equals(this.txw, transmitter.txw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alt, bwi, frq, lat, lon, txw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transmitter {\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    bwi: ").append(toIndentedString(bwi)).append("\n");
    sb.append("    frq: ").append(toIndentedString(frq)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    txw: ").append(toIndentedString(txw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alt");
    openapiFields.add("bwi");
    openapiFields.add("frq");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("txw");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transmitter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transmitter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transmitter is not found in the empty JSON string", Transmitter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transmitter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transmitter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transmitter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transmitter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transmitter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transmitter.class));

       return (TypeAdapter<T>) new TypeAdapter<Transmitter>() {
           @Override
           public void write(JsonWriter out, Transmitter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transmitter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transmitter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transmitter
   * @throws IOException if the JSON string is invalid with respect to Transmitter
   */
  public static Transmitter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transmitter.class);
  }

  /**
   * Convert an instance of Transmitter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

