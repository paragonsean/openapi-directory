/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Receiver
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:22.355657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Receiver {
  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private Float alt = 0.1f;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Float lat = 0f;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Float lon = 0f;

  public static final String SERIALIZED_NAME_RXG = "rxg";
  @SerializedName(SERIALIZED_NAME_RXG)
  private Float rxg = 2.15f;

  public static final String SERIALIZED_NAME_RXS = "rxs";
  @SerializedName(SERIALIZED_NAME_RXS)
  private Float rxs = -90f;

  public Receiver() {
  }

  public Receiver alt(Float alt) {
    this.alt = alt;
    return this;
  }

  /**
   * Altitude above ground level in metres OR feet
   * minimum: 0.1
   * maximum: 60000
   * @return alt
   */
  @javax.annotation.Nullable
  public Float getAlt() {
    return alt;
  }

  public void setAlt(Float alt) {
    this.alt = alt;
  }


  public Receiver lat(Float lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude in decimal degrees
   * minimum: -89
   * maximum: 89
   * @return lat
   */
  @javax.annotation.Nullable
  public Float getLat() {
    return lat;
  }

  public void setLat(Float lat) {
    this.lat = lat;
  }


  public Receiver lon(Float lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Longitude in decimal degrees
   * minimum: -180
   * maximum: 180
   * @return lon
   */
  @javax.annotation.Nullable
  public Float getLon() {
    return lon;
  }

  public void setLon(Float lon) {
    this.lon = lon;
  }


  public Receiver rxg(Float rxg) {
    this.rxg = rxg;
    return this;
  }

  /**
   * Receiver antenna gain in dBi
   * minimum: -10
   * maximum: 60
   * @return rxg
   */
  @javax.annotation.Nullable
  public Float getRxg() {
    return rxg;
  }

  public void setRxg(Float rxg) {
    this.rxg = rxg;
  }


  public Receiver rxs(Float rxs) {
    this.rxs = rxs;
    return this;
  }

  /**
   * Receiver sensitivity/threshold in measured units defined by &#39;out&#39; param
   * minimum: -140
   * maximum: 200
   * @return rxs
   */
  @javax.annotation.Nullable
  public Float getRxs() {
    return rxs;
  }

  public void setRxs(Float rxs) {
    this.rxs = rxs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Receiver receiver = (Receiver) o;
    return Objects.equals(this.alt, receiver.alt) &&
        Objects.equals(this.lat, receiver.lat) &&
        Objects.equals(this.lon, receiver.lon) &&
        Objects.equals(this.rxg, receiver.rxg) &&
        Objects.equals(this.rxs, receiver.rxs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alt, lat, lon, rxg, rxs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Receiver {\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    rxg: ").append(toIndentedString(rxg)).append("\n");
    sb.append("    rxs: ").append(toIndentedString(rxs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alt");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("rxg");
    openapiFields.add("rxs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Receiver
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Receiver.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Receiver is not found in the empty JSON string", Receiver.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Receiver.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Receiver` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Receiver.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Receiver' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Receiver> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Receiver.class));

       return (TypeAdapter<T>) new TypeAdapter<Receiver>() {
           @Override
           public void write(JsonWriter out, Receiver value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Receiver read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Receiver given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Receiver
   * @throws IOException if the JSON string is invalid with respect to Receiver
   */
  public static Receiver fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Receiver.class);
  }

  /**
   * Convert an instance of Receiver to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

