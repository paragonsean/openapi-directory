/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AreaRequest;
import org.openapitools.client.model.PathRequest;
import org.openapitools.client.model.PointsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for area
     * @param areaRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areaCall(AreaRequest areaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = areaRequest;

        // create path and map variables
        String localVarPath = "/area";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call areaValidateBeforeCall(AreaRequest areaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'areaRequest' is set
        if (areaRequest == null) {
            throw new ApiException("Missing the required parameter 'areaRequest' when calling area(Async)");
        }

        return areaCall(areaRequest, _callback);

    }

    /**
     * Create a point-to-multipoint heatmap
     * An area coverage assumes the same receiver height at all locations out to fixed radius (maximum 300km). Due to it&#39;s exhaustive processing it is the slowest of all the API calls. Speed can be improved significantly by adjusting the resolution &#39;res&#39; parameter. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param areaRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void area(AreaRequest areaRequest) throws ApiException {
        areaWithHttpInfo(areaRequest);
    }

    /**
     * Create a point-to-multipoint heatmap
     * An area coverage assumes the same receiver height at all locations out to fixed radius (maximum 300km). Due to it&#39;s exhaustive processing it is the slowest of all the API calls. Speed can be improved significantly by adjusting the resolution &#39;res&#39; parameter. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param areaRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> areaWithHttpInfo(AreaRequest areaRequest) throws ApiException {
        okhttp3.Call localVarCall = areaValidateBeforeCall(areaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a point-to-multipoint heatmap (asynchronously)
     * An area coverage assumes the same receiver height at all locations out to fixed radius (maximum 300km). Due to it&#39;s exhaustive processing it is the slowest of all the API calls. Speed can be improved significantly by adjusting the resolution &#39;res&#39; parameter. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param areaRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areaAsync(AreaRequest areaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = areaValidateBeforeCall(areaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for path
     * @param pathRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pathCall(PathRequest pathRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pathRequest;

        // create path and map variables
        String localVarPath = "/path";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pathValidateBeforeCall(PathRequest pathRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pathRequest' is set
        if (pathRequest == null) {
            throw new ApiException("Missing the required parameter 'pathRequest' when calling path(Async)");
        }

        return pathCall(pathRequest, _callback);

    }

    /**
     * Point-to-point path profile analysis (Tx to Rx)
     * A path profile is a single link from A to B. It is much faster than an area calculation and can be used out to 300km. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pathRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void path(PathRequest pathRequest) throws ApiException {
        pathWithHttpInfo(pathRequest);
    }

    /**
     * Point-to-point path profile analysis (Tx to Rx)
     * A path profile is a single link from A to B. It is much faster than an area calculation and can be used out to 300km. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pathRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pathWithHttpInfo(PathRequest pathRequest) throws ApiException {
        okhttp3.Call localVarCall = pathValidateBeforeCall(pathRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Point-to-point path profile analysis (Tx to Rx) (asynchronously)
     * A path profile is a single link from A to B. It is much faster than an area calculation and can be used out to 300km. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pathRequest A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pathAsync(PathRequest pathRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pathValidateBeforeCall(pathRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for points
     * @param pointsRequest A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pointsCall(PointsRequest pointsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pointsRequest;

        // create path and map variables
        String localVarPath = "/points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pointsValidateBeforeCall(PointsRequest pointsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pointsRequest' is set
        if (pointsRequest == null) {
            throw new ApiException("Missing the required parameter 'pointsRequest' when calling points(Async)");
        }

        return pointsCall(pointsRequest, _callback);

    }

    /**
     * Point-to-multipoint path profile analysis (Many Tx, one Rx)
     * The points function tests many transmitters and one receiver and is designed for route analysis. A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pointsRequest A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public void points(PointsRequest pointsRequest) throws ApiException {
        pointsWithHttpInfo(pointsRequest);
    }

    /**
     * Point-to-multipoint path profile analysis (Many Tx, one Rx)
     * The points function tests many transmitters and one receiver and is designed for route analysis. A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pointsRequest A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pointsWithHttpInfo(PointsRequest pointsRequest) throws ApiException {
        okhttp3.Call localVarCall = pointsValidateBeforeCall(pointsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Point-to-multipoint path profile analysis (Many Tx, one Rx) (asynchronously)
     * The points function tests many transmitters and one receiver and is designed for route analysis. A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.
     * @param pointsRequest A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pointsAsync(PointsRequest pointsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pointsValidateBeforeCall(pointsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
