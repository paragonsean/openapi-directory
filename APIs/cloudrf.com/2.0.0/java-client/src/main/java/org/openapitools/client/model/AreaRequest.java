/*
 * Cloud-RF API
 * Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@cloudrf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Antenna;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Output;
import org.openapitools.client.model.Receiver;
import org.openapitools.client.model.Transmitter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AreaRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:22.355657-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AreaRequest {
  public static final String SERIALIZED_NAME_ANTENNA = "antenna";
  @SerializedName(SERIALIZED_NAME_ANTENNA)
  private Antenna antenna;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Environment environment;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private Model model;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network = "Testing";

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private Output output;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private Receiver receiver;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site = "A1";

  public static final String SERIALIZED_NAME_TRANSMITTER = "transmitter";
  @SerializedName(SERIALIZED_NAME_TRANSMITTER)
  private Transmitter transmitter;

  public AreaRequest() {
  }

  public AreaRequest antenna(Antenna antenna) {
    this.antenna = antenna;
    return this;
  }

  /**
   * Get antenna
   * @return antenna
   */
  @javax.annotation.Nullable
  public Antenna getAntenna() {
    return antenna;
  }

  public void setAntenna(Antenna antenna) {
    this.antenna = antenna;
  }


  public AreaRequest environment(Environment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Environment getEnvironment() {
    return environment;
  }

  public void setEnvironment(Environment environment) {
    this.environment = environment;
  }


  public AreaRequest model(Model model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public Model getModel() {
    return model;
  }

  public void setModel(Model model) {
    this.model = model;
  }


  public AreaRequest network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Network name/group
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public AreaRequest output(Output output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public Output getOutput() {
    return output;
  }

  public void setOutput(Output output) {
    this.output = output;
  }


  public AreaRequest receiver(Receiver receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * Get receiver
   * @return receiver
   */
  @javax.annotation.Nullable
  public Receiver getReceiver() {
    return receiver;
  }

  public void setReceiver(Receiver receiver) {
    this.receiver = receiver;
  }


  public AreaRequest site(String site) {
    this.site = site;
    return this;
  }

  /**
   * Site name
   * @return site
   */
  @javax.annotation.Nullable
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }


  public AreaRequest transmitter(Transmitter transmitter) {
    this.transmitter = transmitter;
    return this;
  }

  /**
   * Get transmitter
   * @return transmitter
   */
  @javax.annotation.Nullable
  public Transmitter getTransmitter() {
    return transmitter;
  }

  public void setTransmitter(Transmitter transmitter) {
    this.transmitter = transmitter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AreaRequest areaRequest = (AreaRequest) o;
    return Objects.equals(this.antenna, areaRequest.antenna) &&
        Objects.equals(this.environment, areaRequest.environment) &&
        Objects.equals(this.model, areaRequest.model) &&
        Objects.equals(this.network, areaRequest.network) &&
        Objects.equals(this.output, areaRequest.output) &&
        Objects.equals(this.receiver, areaRequest.receiver) &&
        Objects.equals(this.site, areaRequest.site) &&
        Objects.equals(this.transmitter, areaRequest.transmitter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antenna, environment, model, network, output, receiver, site, transmitter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AreaRequest {\n");
    sb.append("    antenna: ").append(toIndentedString(antenna)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    transmitter: ").append(toIndentedString(transmitter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antenna");
    openapiFields.add("environment");
    openapiFields.add("model");
    openapiFields.add("network");
    openapiFields.add("output");
    openapiFields.add("receiver");
    openapiFields.add("site");
    openapiFields.add("transmitter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AreaRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AreaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AreaRequest is not found in the empty JSON string", AreaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AreaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AreaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `antenna`
      if (jsonObj.get("antenna") != null && !jsonObj.get("antenna").isJsonNull()) {
        Antenna.validateJsonElement(jsonObj.get("antenna"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        Environment.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        Model.validateJsonElement(jsonObj.get("model"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        Output.validateJsonElement(jsonObj.get("output"));
      }
      // validate the optional field `receiver`
      if (jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) {
        Receiver.validateJsonElement(jsonObj.get("receiver"));
      }
      if ((jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) && !jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
      // validate the optional field `transmitter`
      if (jsonObj.get("transmitter") != null && !jsonObj.get("transmitter").isJsonNull()) {
        Transmitter.validateJsonElement(jsonObj.get("transmitter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AreaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AreaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AreaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AreaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AreaRequest>() {
           @Override
           public void write(JsonWriter out, AreaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AreaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AreaRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AreaRequest
   * @throws IOException if the JSON string is invalid with respect to AreaRequest
   */
  public static AreaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AreaRequest.class);
  }

  /**
   * Convert an instance of AreaRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

