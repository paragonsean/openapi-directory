# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.antenna import Antenna
from openapi_server.models.environment import Environment
from openapi_server.models.model import Model
from openapi_server.models.output import Output
from openapi_server.models.receiver import Receiver
from openapi_server.models.transmitter import Transmitter
from openapi_server import util


class AreaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antenna: Antenna=None, environment: Environment=None, model: Model=None, network: str='Testing', output: Output=None, receiver: Receiver=None, site: str='A1', transmitter: Transmitter=None):
        """AreaRequest - a model defined in OpenAPI

        :param antenna: The antenna of this AreaRequest.
        :param environment: The environment of this AreaRequest.
        :param model: The model of this AreaRequest.
        :param network: The network of this AreaRequest.
        :param output: The output of this AreaRequest.
        :param receiver: The receiver of this AreaRequest.
        :param site: The site of this AreaRequest.
        :param transmitter: The transmitter of this AreaRequest.
        """
        self.openapi_types = {
            'antenna': Antenna,
            'environment': Environment,
            'model': Model,
            'network': str,
            'output': Output,
            'receiver': Receiver,
            'site': str,
            'transmitter': Transmitter
        }

        self.attribute_map = {
            'antenna': 'antenna',
            'environment': 'environment',
            'model': 'model',
            'network': 'network',
            'output': 'output',
            'receiver': 'receiver',
            'site': 'site',
            'transmitter': 'transmitter'
        }

        self._antenna = antenna
        self._environment = environment
        self._model = model
        self._network = network
        self._output = output
        self._receiver = receiver
        self._site = site
        self._transmitter = transmitter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AreaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The area_request of this AreaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antenna(self):
        """Gets the antenna of this AreaRequest.


        :return: The antenna of this AreaRequest.
        :rtype: Antenna
        """
        return self._antenna

    @antenna.setter
    def antenna(self, antenna):
        """Sets the antenna of this AreaRequest.


        :param antenna: The antenna of this AreaRequest.
        :type antenna: Antenna
        """

        self._antenna = antenna

    @property
    def environment(self):
        """Gets the environment of this AreaRequest.


        :return: The environment of this AreaRequest.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this AreaRequest.


        :param environment: The environment of this AreaRequest.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def model(self):
        """Gets the model of this AreaRequest.


        :return: The model of this AreaRequest.
        :rtype: Model
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AreaRequest.


        :param model: The model of this AreaRequest.
        :type model: Model
        """

        self._model = model

    @property
    def network(self):
        """Gets the network of this AreaRequest.

        Network name/group

        :return: The network of this AreaRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AreaRequest.

        Network name/group

        :param network: The network of this AreaRequest.
        :type network: str
        """
        if network is not None and len(network) > 24:
            raise ValueError("Invalid value for `network`, length must be less than or equal to `24`")
        if network is not None and len(network) < 1:
            raise ValueError("Invalid value for `network`, length must be greater than or equal to `1`")

        self._network = network

    @property
    def output(self):
        """Gets the output of this AreaRequest.


        :return: The output of this AreaRequest.
        :rtype: Output
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this AreaRequest.


        :param output: The output of this AreaRequest.
        :type output: Output
        """

        self._output = output

    @property
    def receiver(self):
        """Gets the receiver of this AreaRequest.


        :return: The receiver of this AreaRequest.
        :rtype: Receiver
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this AreaRequest.


        :param receiver: The receiver of this AreaRequest.
        :type receiver: Receiver
        """

        self._receiver = receiver

    @property
    def site(self):
        """Gets the site of this AreaRequest.

        Site name

        :return: The site of this AreaRequest.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this AreaRequest.

        Site name

        :param site: The site of this AreaRequest.
        :type site: str
        """
        if site is not None and len(site) > 24:
            raise ValueError("Invalid value for `site`, length must be less than or equal to `24`")
        if site is not None and len(site) < 1:
            raise ValueError("Invalid value for `site`, length must be greater than or equal to `1`")

        self._site = site

    @property
    def transmitter(self):
        """Gets the transmitter of this AreaRequest.


        :return: The transmitter of this AreaRequest.
        :rtype: Transmitter
        """
        return self._transmitter

    @transmitter.setter
    def transmitter(self, transmitter):
        """Sets the transmitter of this AreaRequest.


        :param transmitter: The transmitter of this AreaRequest.
        :type transmitter: Transmitter
        """

        self._transmitter = transmitter
