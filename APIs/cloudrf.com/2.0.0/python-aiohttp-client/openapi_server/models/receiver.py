# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Receiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alt: float=0.1, lat: float=0, lon: float=0, rxg: float=2.15, rxs: float=-90):
        """Receiver - a model defined in OpenAPI

        :param alt: The alt of this Receiver.
        :param lat: The lat of this Receiver.
        :param lon: The lon of this Receiver.
        :param rxg: The rxg of this Receiver.
        :param rxs: The rxs of this Receiver.
        """
        self.openapi_types = {
            'alt': float,
            'lat': float,
            'lon': float,
            'rxg': float,
            'rxs': float
        }

        self.attribute_map = {
            'alt': 'alt',
            'lat': 'lat',
            'lon': 'lon',
            'rxg': 'rxg',
            'rxs': 'rxs'
        }

        self._alt = alt
        self._lat = lat
        self._lon = lon
        self._rxg = rxg
        self._rxs = rxs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Receiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Receiver of this Receiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alt(self):
        """Gets the alt of this Receiver.

        Altitude above ground level in metres OR feet

        :return: The alt of this Receiver.
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this Receiver.

        Altitude above ground level in metres OR feet

        :param alt: The alt of this Receiver.
        :type alt: float
        """
        if alt is not None and alt > 60000:
            raise ValueError("Invalid value for `alt`, must be a value less than or equal to `60000`")
        if alt is not None and alt < 0.1:
            raise ValueError("Invalid value for `alt`, must be a value greater than or equal to `0.1`")

        self._alt = alt

    @property
    def lat(self):
        """Gets the lat of this Receiver.

        Latitude in decimal degrees

        :return: The lat of this Receiver.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Receiver.

        Latitude in decimal degrees

        :param lat: The lat of this Receiver.
        :type lat: float
        """
        if lat is not None and lat > 89:
            raise ValueError("Invalid value for `lat`, must be a value less than or equal to `89`")
        if lat is not None and lat < -89:
            raise ValueError("Invalid value for `lat`, must be a value greater than or equal to `-89`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Receiver.

        Longitude in decimal degrees

        :return: The lon of this Receiver.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Receiver.

        Longitude in decimal degrees

        :param lon: The lon of this Receiver.
        :type lon: float
        """
        if lon is not None and lon > 180:
            raise ValueError("Invalid value for `lon`, must be a value less than or equal to `180`")
        if lon is not None and lon < -180:
            raise ValueError("Invalid value for `lon`, must be a value greater than or equal to `-180`")

        self._lon = lon

    @property
    def rxg(self):
        """Gets the rxg of this Receiver.

        Receiver antenna gain in dBi

        :return: The rxg of this Receiver.
        :rtype: float
        """
        return self._rxg

    @rxg.setter
    def rxg(self, rxg):
        """Sets the rxg of this Receiver.

        Receiver antenna gain in dBi

        :param rxg: The rxg of this Receiver.
        :type rxg: float
        """
        if rxg is not None and rxg > 60:
            raise ValueError("Invalid value for `rxg`, must be a value less than or equal to `60`")
        if rxg is not None and rxg < -10:
            raise ValueError("Invalid value for `rxg`, must be a value greater than or equal to `-10`")

        self._rxg = rxg

    @property
    def rxs(self):
        """Gets the rxs of this Receiver.

        Receiver sensitivity/threshold in measured units defined by 'out' param

        :return: The rxs of this Receiver.
        :rtype: float
        """
        return self._rxs

    @rxs.setter
    def rxs(self, rxs):
        """Sets the rxs of this Receiver.

        Receiver sensitivity/threshold in measured units defined by 'out' param

        :param rxs: The rxs of this Receiver.
        :type rxs: float
        """
        if rxs is not None and rxs > 200:
            raise ValueError("Invalid value for `rxs`, must be a value less than or equal to `200`")
        if rxs is not None and rxs < -140:
            raise ValueError("Invalid value for `rxs`, must be a value greater than or equal to `-140`")

        self._rxs = rxs
