# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Output(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ber: int=0, col: str='RAINBOW.dBm', mod: int=0, nf: int=-114, out: int=2, rad: float=5, res: int=10, units: str='metric'):
        """Output - a model defined in OpenAPI

        :param ber: The ber of this Output.
        :param col: The col of this Output.
        :param mod: The mod of this Output.
        :param nf: The nf of this Output.
        :param out: The out of this Output.
        :param rad: The rad of this Output.
        :param res: The res of this Output.
        :param units: The units of this Output.
        """
        self.openapi_types = {
            'ber': int,
            'col': str,
            'mod': int,
            'nf': int,
            'out': int,
            'rad': float,
            'res': int,
            'units': str
        }

        self.attribute_map = {
            'ber': 'ber',
            'col': 'col',
            'mod': 'mod',
            'nf': 'nf',
            'out': 'out',
            'rad': 'rad',
            'res': 'res',
            'units': 'units'
        }

        self._ber = ber
        self._col = col
        self._mod = mod
        self._nf = nf
        self._out = out
        self._rad = rad
        self._res = res
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Output':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Output of this Output.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ber(self):
        """Gets the ber of this Output.

        Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12

        :return: The ber of this Output.
        :rtype: int
        """
        return self._ber

    @ber.setter
    def ber(self, ber):
        """Sets the ber of this Output.

        Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12

        :param ber: The ber of this Output.
        :type ber: int
        """
        if ber is not None and ber > 10:
            raise ValueError("Invalid value for `ber`, must be a value less than or equal to `10`")
        if ber is not None and ber < 0:
            raise ValueError("Invalid value for `ber`, must be a value greater than or equal to `0`")

        self._ber = ber

    @property
    def col(self):
        """Gets the col of this Output.

        Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..

        :return: The col of this Output.
        :rtype: str
        """
        return self._col

    @col.setter
    def col(self, col):
        """Sets the col of this Output.

        Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..

        :param col: The col of this Output.
        :type col: str
        """

        self._col = col

    @property
    def mod(self):
        """Gets the mod of this Output.

        Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa

        :return: The mod of this Output.
        :rtype: int
        """
        return self._mod

    @mod.setter
    def mod(self, mod):
        """Sets the mod of this Output.

        Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa

        :param mod: The mod of this Output.
        :type mod: int
        """
        if mod is not None and mod > 11:
            raise ValueError("Invalid value for `mod`, must be a value less than or equal to `11`")
        if mod is not None and mod < 1:
            raise ValueError("Invalid value for `mod`, must be a value greater than or equal to `1`")

        self._mod = mod

    @property
    def nf(self):
        """Gets the nf of this Output.

        Noise floor in dBm for use with out=4 / SNR

        :return: The nf of this Output.
        :rtype: int
        """
        return self._nf

    @nf.setter
    def nf(self, nf):
        """Sets the nf of this Output.

        Noise floor in dBm for use with out=4 / SNR

        :param nf: The nf of this Output.
        :type nf: int
        """
        if nf is not None and nf > -90:
            raise ValueError("Invalid value for `nf`, must be a value less than or equal to `-90`")
        if nf is not None and nf < -120:
            raise ValueError("Invalid value for `nf`, must be a value greater than or equal to `-120`")

        self._nf = nf

    @property
    def out(self):
        """Gets the out of this Output.

        Measured units. 1=dB,2=dBm,3=dBuV,4=SNR

        :return: The out of this Output.
        :rtype: int
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this Output.

        Measured units. 1=dB,2=dBm,3=dBuV,4=SNR

        :param out: The out of this Output.
        :type out: int
        """
        if out is not None and out > 4:
            raise ValueError("Invalid value for `out`, must be a value less than or equal to `4`")
        if out is not None and out < 1:
            raise ValueError("Invalid value for `out`, must be a value greater than or equal to `1`")

        self._out = out

    @property
    def rad(self):
        """Gets the rad of this Output.

        Radius in kilometres for output

        :return: The rad of this Output.
        :rtype: float
        """
        return self._rad

    @rad.setter
    def rad(self, rad):
        """Sets the rad of this Output.

        Radius in kilometres for output

        :param rad: The rad of this Output.
        :type rad: float
        """
        if rad is not None and rad > 300:
            raise ValueError("Invalid value for `rad`, must be a value less than or equal to `300`")
        if rad is not None and rad < 0.03:
            raise ValueError("Invalid value for `rad`, must be a value greater than or equal to `0.03`")

        self._rad = rad

    @property
    def res(self):
        """Gets the res of this Output.

        Resolution in metres for output

        :return: The res of this Output.
        :rtype: int
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this Output.

        Resolution in metres for output

        :param res: The res of this Output.
        :type res: int
        """
        if res is not None and res > 200:
            raise ValueError("Invalid value for `res`, must be a value less than or equal to `200`")
        if res is not None and res < 2:
            raise ValueError("Invalid value for `res`, must be a value greater than or equal to `2`")

        self._res = res

    @property
    def units(self):
        """Gets the units of this Output.

        Distance units in either metres/kilometres (metric) or feet/miles (imperial)

        :return: The units of this Output.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Output.

        Distance units in either metres/kilometres (metric) or feet/miles (imperial)

        :param units: The units of this Output.
        :type units: str
        """
        allowed_values = ["metric", "imperial"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"
                .format(units, allowed_values)
            )

        self._units = units
