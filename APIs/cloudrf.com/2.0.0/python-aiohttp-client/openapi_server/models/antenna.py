# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Antenna(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ant: int=1, azi: int=0, hbw: int=0, pol: str='v', tlt: float=0, txg: float=2.15, txl: float=0, vbw: int=0):
        """Antenna - a model defined in OpenAPI

        :param ant: The ant of this Antenna.
        :param azi: The azi of this Antenna.
        :param hbw: The hbw of this Antenna.
        :param pol: The pol of this Antenna.
        :param tlt: The tlt of this Antenna.
        :param txg: The txg of this Antenna.
        :param txl: The txl of this Antenna.
        :param vbw: The vbw of this Antenna.
        """
        self.openapi_types = {
            'ant': int,
            'azi': int,
            'hbw': int,
            'pol': str,
            'tlt': float,
            'txg': float,
            'txl': float,
            'vbw': int
        }

        self.attribute_map = {
            'ant': 'ant',
            'azi': 'azi',
            'hbw': 'hbw',
            'pol': 'pol',
            'tlt': 'tlt',
            'txg': 'txg',
            'txl': 'txl',
            'vbw': 'vbw'
        }

        self._ant = ant
        self._azi = azi
        self._hbw = hbw
        self._pol = pol
        self._tlt = tlt
        self._txg = txg
        self._txl = txl
        self._vbw = vbw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Antenna':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Antenna of this Antenna.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ant(self):
        """Gets the ant of this Antenna.

        Antenna pattern code. 1=Vertical dipole (Omni-directional)

        :return: The ant of this Antenna.
        :rtype: int
        """
        return self._ant

    @ant.setter
    def ant(self, ant):
        """Sets the ant of this Antenna.

        Antenna pattern code. 1=Vertical dipole (Omni-directional)

        :param ant: The ant of this Antenna.
        :type ant: int
        """

        self._ant = ant

    @property
    def azi(self):
        """Gets the azi of this Antenna.

        Antenna azimuth in degrees north

        :return: The azi of this Antenna.
        :rtype: int
        """
        return self._azi

    @azi.setter
    def azi(self, azi):
        """Sets the azi of this Antenna.

        Antenna azimuth in degrees north

        :param azi: The azi of this Antenna.
        :type azi: int
        """
        if azi is not None and azi > 360:
            raise ValueError("Invalid value for `azi`, must be a value less than or equal to `360`")
        if azi is not None and azi < 0:
            raise ValueError("Invalid value for `azi`, must be a value greater than or equal to `0`")

        self._azi = azi

    @property
    def hbw(self):
        """Gets the hbw of this Antenna.

        Custom antenna horizontal beamwidth in degrees. For use only with ant=0

        :return: The hbw of this Antenna.
        :rtype: int
        """
        return self._hbw

    @hbw.setter
    def hbw(self, hbw):
        """Sets the hbw of this Antenna.

        Custom antenna horizontal beamwidth in degrees. For use only with ant=0

        :param hbw: The hbw of this Antenna.
        :type hbw: int
        """
        if hbw is not None and hbw > 360:
            raise ValueError("Invalid value for `hbw`, must be a value less than or equal to `360`")
        if hbw is not None and hbw < 0:
            raise ValueError("Invalid value for `hbw`, must be a value greater than or equal to `0`")

        self._hbw = hbw

    @property
    def pol(self):
        """Gets the pol of this Antenna.

        Antenna polarization as either h or v

        :return: The pol of this Antenna.
        :rtype: str
        """
        return self._pol

    @pol.setter
    def pol(self, pol):
        """Sets the pol of this Antenna.

        Antenna polarization as either h or v

        :param pol: The pol of this Antenna.
        :type pol: str
        """
        allowed_values = ["h", "v"]  # noqa: E501
        if pol not in allowed_values:
            raise ValueError(
                "Invalid value for `pol` ({0}), must be one of {1}"
                .format(pol, allowed_values)
            )

        self._pol = pol

    @property
    def tlt(self):
        """Gets the tlt of this Antenna.

        Antenna tilt in degrees below the horizon (inverted)

        :return: The tlt of this Antenna.
        :rtype: float
        """
        return self._tlt

    @tlt.setter
    def tlt(self, tlt):
        """Sets the tlt of this Antenna.

        Antenna tilt in degrees below the horizon (inverted)

        :param tlt: The tlt of this Antenna.
        :type tlt: float
        """
        if tlt is not None and tlt > 90:
            raise ValueError("Invalid value for `tlt`, must be a value less than or equal to `90`")
        if tlt is not None and tlt < -10:
            raise ValueError("Invalid value for `tlt`, must be a value greater than or equal to `-10`")

        self._tlt = tlt

    @property
    def txg(self):
        """Gets the txg of this Antenna.

        Transmitter antenna gain in dBi

        :return: The txg of this Antenna.
        :rtype: float
        """
        return self._txg

    @txg.setter
    def txg(self, txg):
        """Sets the txg of this Antenna.

        Transmitter antenna gain in dBi

        :param txg: The txg of this Antenna.
        :type txg: float
        """
        if txg is not None and txg > 60:
            raise ValueError("Invalid value for `txg`, must be a value less than or equal to `60`")
        if txg is not None and txg < -10:
            raise ValueError("Invalid value for `txg`, must be a value greater than or equal to `-10`")

        self._txg = txg

    @property
    def txl(self):
        """Gets the txl of this Antenna.

        Feeder loss in dB

        :return: The txl of this Antenna.
        :rtype: float
        """
        return self._txl

    @txl.setter
    def txl(self, txl):
        """Sets the txl of this Antenna.

        Feeder loss in dB

        :param txl: The txl of this Antenna.
        :type txl: float
        """
        if txl is not None and txl > 60:
            raise ValueError("Invalid value for `txl`, must be a value less than or equal to `60`")
        if txl is not None and txl < 0:
            raise ValueError("Invalid value for `txl`, must be a value greater than or equal to `0`")

        self._txl = txl

    @property
    def vbw(self):
        """Gets the vbw of this Antenna.

        Custom antenna vertical beamwidth in degrees. For use only with ant=0

        :return: The vbw of this Antenna.
        :rtype: int
        """
        return self._vbw

    @vbw.setter
    def vbw(self, vbw):
        """Sets the vbw of this Antenna.

        Custom antenna vertical beamwidth in degrees. For use only with ant=0

        :param vbw: The vbw of this Antenna.
        :type vbw: int
        """
        if vbw is not None and vbw > 360:
            raise ValueError("Invalid value for `vbw`, must be a value less than or equal to `360`")
        if vbw is not None and vbw < 0:
            raise ValueError("Invalid value for `vbw`, must be a value greater than or equal to `0`")

        self._vbw = vbw
