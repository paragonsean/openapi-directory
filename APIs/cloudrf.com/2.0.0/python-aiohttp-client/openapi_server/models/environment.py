# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cll: int=2, clm: int=1, mat: float=0.25):
        """Environment - a model defined in OpenAPI

        :param cll: The cll of this Environment.
        :param clm: The clm of this Environment.
        :param mat: The mat of this Environment.
        """
        self.openapi_types = {
            'cll': int,
            'clm': int,
            'mat': float
        }

        self.attribute_map = {
            'cll': 'cll',
            'clm': 'clm',
            'mat': 'mat'
        }

        self._cll = cll
        self._clm = clm
        self._mat = mat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cll(self):
        """Gets the cll of this Environment.

        Clutter loss. 0=None/DSM only, 1=Hard / LOS mode, 2=Soft / NLOS mode

        :return: The cll of this Environment.
        :rtype: int
        """
        return self._cll

    @cll.setter
    def cll(self, cll):
        """Sets the cll of this Environment.

        Clutter loss. 0=None/DSM only, 1=Hard / LOS mode, 2=Soft / NLOS mode

        :param cll: The cll of this Environment.
        :type cll: int
        """
        if cll is not None and cll > 2:
            raise ValueError("Invalid value for `cll`, must be a value less than or equal to `2`")
        if cll is not None and cll < 1:
            raise ValueError("Invalid value for `cll`, must be a value greater than or equal to `1`")

        self._cll = cll

    @property
    def clm(self):
        """Gets the clm of this Environment.

        Clutter mode. 0=None/DSM only, 1=System & custom clutter, 2=Custom clutter only

        :return: The clm of this Environment.
        :rtype: int
        """
        return self._clm

    @clm.setter
    def clm(self, clm):
        """Sets the clm of this Environment.

        Clutter mode. 0=None/DSM only, 1=System & custom clutter, 2=Custom clutter only

        :param clm: The clm of this Environment.
        :type clm: int
        """
        if clm is not None and clm > 2:
            raise ValueError("Invalid value for `clm`, must be a value less than or equal to `2`")
        if clm is not None and clm < 1:
            raise ValueError("Invalid value for `clm`, must be a value greater than or equal to `1`")

        self._clm = clm

    @property
    def mat(self):
        """Gets the mat of this Environment.

        Clutter attenuation override in dB/m based on a tree block OR hollow building. Light foliage=0.1dB/m, brick=1.0dB/m, concrete=5dB/m

        :return: The mat of this Environment.
        :rtype: float
        """
        return self._mat

    @mat.setter
    def mat(self, mat):
        """Sets the mat of this Environment.

        Clutter attenuation override in dB/m based on a tree block OR hollow building. Light foliage=0.1dB/m, brick=1.0dB/m, concrete=5dB/m

        :param mat: The mat of this Environment.
        :type mat: float
        """
        if mat is not None and mat > 9:
            raise ValueError("Invalid value for `mat`, must be a value less than or equal to `9`")
        if mat is not None and mat < 0.1:
            raise ValueError("Invalid value for `mat`, must be a value greater than or equal to `0.1`")

        self._mat = mat
