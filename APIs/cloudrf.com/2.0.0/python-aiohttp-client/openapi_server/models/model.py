# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cli: int=6, ked: int=0, pe: int=2, pm: int=1, rel: int=95, ter: int=4):
        """Model - a model defined in OpenAPI

        :param cli: The cli of this Model.
        :param ked: The ked of this Model.
        :param pe: The pe of this Model.
        :param pm: The pm of this Model.
        :param rel: The rel of this Model.
        :param ter: The ter of this Model.
        """
        self.openapi_types = {
            'cli': int,
            'ked': int,
            'pe': int,
            'pm': int,
            'rel': int,
            'ter': int
        }

        self.attribute_map = {
            'cli': 'cli',
            'ked': 'ked',
            'pe': 'pe',
            'pm': 'pm',
            'rel': 'rel',
            'ter': 'ter'
        }

        self._cli = cli
        self._ked = ked
        self._pe = pe
        self._pm = pm
        self._rel = rel
        self._ter = ter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cli(self):
        """Gets the cli of this Model.

        Radio climate for ITM model (1). 1: Equatorial (Congo) 2: Continental Subtropical (Sudan) 3: Maritime Subtropical (West coast of Africa) 4: Desert (Sahara) 5: Continental Temperate 6: Maritime Temperate, over land (UK and west coasts of US & EU) 7: Maritime Temperate, over sea

        :return: The cli of this Model.
        :rtype: int
        """
        return self._cli

    @cli.setter
    def cli(self, cli):
        """Sets the cli of this Model.

        Radio climate for ITM model (1). 1: Equatorial (Congo) 2: Continental Subtropical (Sudan) 3: Maritime Subtropical (West coast of Africa) 4: Desert (Sahara) 5: Continental Temperate 6: Maritime Temperate, over land (UK and west coasts of US & EU) 7: Maritime Temperate, over sea

        :param cli: The cli of this Model.
        :type cli: int
        """
        if cli is not None and cli > 7:
            raise ValueError("Invalid value for `cli`, must be a value less than or equal to `7`")
        if cli is not None and cli < 1:
            raise ValueError("Invalid value for `cli`, must be a value greater than or equal to `1`")

        self._cli = cli

    @property
    def ked(self):
        """Gets the ked of this Model.

        Knife edge diffraction for enhancing basic empirical models (Already in ITM)

        :return: The ked of this Model.
        :rtype: int
        """
        return self._ked

    @ked.setter
    def ked(self, ked):
        """Sets the ked of this Model.

        Knife edge diffraction for enhancing basic empirical models (Already in ITM)

        :param ked: The ked of this Model.
        :type ked: int
        """
        if ked is not None and ked > 1:
            raise ValueError("Invalid value for `ked`, must be a value less than or equal to `1`")
        if ked is not None and ked < 0:
            raise ValueError("Invalid value for `ked`, must be a value greater than or equal to `0`")

        self._ked = ked

    @property
    def pe(self):
        """Gets the pe of this Model.

        Propagation model subtype/environment. 1=Conservative/Urban,2=Average/Suburban,3=Optimistic/rural

        :return: The pe of this Model.
        :rtype: int
        """
        return self._pe

    @pe.setter
    def pe(self, pe):
        """Sets the pe of this Model.

        Propagation model subtype/environment. 1=Conservative/Urban,2=Average/Suburban,3=Optimistic/rural

        :param pe: The pe of this Model.
        :type pe: int
        """
        if pe is not None and pe > 3:
            raise ValueError("Invalid value for `pe`, must be a value less than or equal to `3`")
        if pe is not None and pe < 1:
            raise ValueError("Invalid value for `pe`, must be a value greater than or equal to `1`")

        self._pe = pe

    @property
    def pm(self):
        """Gets the pm of this Model.

        Propagation model. 1=Irregular Terrain Model, 2=Line of Sight (LOS), 3=Hata, 4=ECC33, 5=SUI Microwave, 6=COST231, 7=Free space path loss, 9=Ericsson9999, 10=Plane earth loss, 11=Egli.

        :return: The pm of this Model.
        :rtype: int
        """
        return self._pm

    @pm.setter
    def pm(self, pm):
        """Sets the pm of this Model.

        Propagation model. 1=Irregular Terrain Model, 2=Line of Sight (LOS), 3=Hata, 4=ECC33, 5=SUI Microwave, 6=COST231, 7=Free space path loss, 9=Ericsson9999, 10=Plane earth loss, 11=Egli.

        :param pm: The pm of this Model.
        :type pm: int
        """
        if pm is not None and pm > 20:
            raise ValueError("Invalid value for `pm`, must be a value less than or equal to `20`")
        if pm is not None and pm < 1:
            raise ValueError("Invalid value for `pm`, must be a value greater than or equal to `1`")

        self._pm = pm

    @property
    def rel(self):
        """Gets the rel of this Model.

        ITM model required reliability as %

        :return: The rel of this Model.
        :rtype: int
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this Model.

        ITM model required reliability as %

        :param rel: The rel of this Model.
        :type rel: int
        """
        if rel is not None and rel > 99:
            raise ValueError("Invalid value for `rel`, must be a value less than or equal to `99`")
        if rel is not None and rel < 50:
            raise ValueError("Invalid value for `rel`, must be a value greater than or equal to `50`")

        self._rel = rel

    @property
    def ter(self):
        """Gets the ter of this Model.

        Terrain code for ITM model (1). 1=Water,2=Wet ground,3=Farmland,4=Forest/Average,5=Mountain/Sand,6=City/Poor ground

        :return: The ter of this Model.
        :rtype: int
        """
        return self._ter

    @ter.setter
    def ter(self, ter):
        """Sets the ter of this Model.

        Terrain code for ITM model (1). 1=Water,2=Wet ground,3=Farmland,4=Forest/Average,5=Mountain/Sand,6=City/Poor ground

        :param ter: The ter of this Model.
        :type ter: int
        """
        if ter is not None and ter > 6:
            raise ValueError("Invalid value for `ter`, must be a value less than or equal to `6`")
        if ter is not None and ter < 1:
            raise ValueError("Invalid value for `ter`, must be a value greater than or equal to `1`")

        self._ter = ter
