/*
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorMessage;
import org.openapitools.client.model.ErrorXml;
import org.openapitools.client.model.SMSXml;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:33.602463-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendAnSms200Response1 extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SendAnSms200Response1.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SendAnSms200Response1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SendAnSms200Response1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SMSXml> adapterSMSXml = gson.getDelegateAdapter(this, TypeToken.get(SMSXml.class));
            final TypeAdapter<ErrorXml> adapterErrorXml = gson.getDelegateAdapter(this, TypeToken.get(ErrorXml.class));

            return (TypeAdapter<T>) new TypeAdapter<SendAnSms200Response1>() {
                @Override
                public void write(JsonWriter out, SendAnSms200Response1 value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SMSXml`
                    if (value.getActualInstance() instanceof SMSXml) {
                        JsonElement element = adapterSMSXml.toJsonTree((SMSXml)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorXml`
                    if (value.getActualInstance() instanceof ErrorXml) {
                        JsonElement element = adapterErrorXml.toJsonTree((ErrorXml)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ErrorXml, SMSXml");
                }

                @Override
                public SendAnSms200Response1 read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SMSXml
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SMSXml.validateJsonElement(jsonElement);
                        actualAdapter = adapterSMSXml;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SMSXml'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SMSXml failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SMSXml'", e);
                    }
                    // deserialize ErrorXml
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorXml.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorXml;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorXml'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorXml failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorXml'", e);
                    }

                    if (match == 1) {
                        SendAnSms200Response1 ret = new SendAnSms200Response1();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SendAnSms200Response1: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SendAnSms200Response1() {
        super("oneOf", Boolean.FALSE);
    }

    public SendAnSms200Response1(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SMSXml", SMSXml.class);
        schemas.put("ErrorXml", ErrorXml.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SendAnSms200Response1.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ErrorXml, SMSXml
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SMSXml) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorXml) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ErrorXml, SMSXml");
    }

    /**
     * Get the actual instance, which can be the following:
     * ErrorXml, SMSXml
     *
     * @return The actual instance (ErrorXml, SMSXml)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SMSXml`. If the actual instance is not `SMSXml`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SMSXml`
     * @throws ClassCastException if the instance is not `SMSXml`
     */
    public SMSXml getSMSXml() throws ClassCastException {
        return (SMSXml)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorXml`. If the actual instance is not `ErrorXml`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorXml`
     * @throws ClassCastException if the instance is not `ErrorXml`
     */
    public ErrorXml getErrorXml() throws ClassCastException {
        return (ErrorXml)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SendAnSms200Response1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SMSXml
        try {
            SMSXml.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SMSXml failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorXml
        try {
            ErrorXml.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorXml failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for SendAnSms200Response1 with oneOf schemas: ErrorXml, SMSXml. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SendAnSms200Response1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SendAnSms200Response1
     * @throws IOException if the JSON string is invalid with respect to SendAnSms200Response1
     */
    public static SendAnSms200Response1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SendAnSms200Response1.class);
    }

    /**
     * Convert an instance of SendAnSms200Response1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

