/*
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SendAnSms200Response;
import org.openapitools.client.model.SendAnSms200Response1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sendAnSms
     * @param format The format of the response (required)
     * @param apiKey Your API key (required)
     * @param from The name or number the message should be sent from. Alphanumeric senderID&#39;s are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
     * @param to The number that the message should be sent to. Numbers are specified in E.164 format. (required)
     * @param accountRef **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com) (optional)
     * @param apiSecret Your API secret. Required unless &#x60;sig&#x60; is provided (optional)
     * @param body **Advanced**: Hex encoded binary data. Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param paramCallback **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters. (optional)
     * @param clientRef **Advanced**: You can optionally include your own reference of up to 100 characters. (optional)
     * @param contentId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param entityId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param messageClass **Advanced**: The Data Coding Scheme value of the message (optional)
     * @param protocolId **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with &#x60;udh&#x60;. (optional)
     * @param sig The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details. (optional)
     * @param statusReportReq **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt). (optional, default to true)
     * @param text The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the &#x60;type&#x60; to &#x60;text&#x60;. If your message contains characters outside this range, then you will need to set the &#x60;type&#x60; to &#x60;unicode&#x60;. (optional)
     * @param ttl **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes. (optional, default to 259200000)
     * @param type **Advanced**: The format of the message body (optional, default to text)
     * @param udh **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAnSmsCall(String format, String apiKey, String from, String to, String accountRef, String apiSecret, String body, String paramCallback, String clientRef, String contentId, String entityId, Integer messageClass, Integer protocolId, String sig, Boolean statusReportReq, String text, Integer ttl, String type, String udh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountRef != null) {
            localVarFormParams.put("account-ref", accountRef);
        }

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (apiSecret != null) {
            localVarFormParams.put("api_secret", apiSecret);
        }

        if (body != null) {
            localVarFormParams.put("body", body);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (clientRef != null) {
            localVarFormParams.put("client-ref", clientRef);
        }

        if (contentId != null) {
            localVarFormParams.put("content-id", contentId);
        }

        if (entityId != null) {
            localVarFormParams.put("entity-id", entityId);
        }

        if (from != null) {
            localVarFormParams.put("from", from);
        }

        if (messageClass != null) {
            localVarFormParams.put("message-class", messageClass);
        }

        if (protocolId != null) {
            localVarFormParams.put("protocol-id", protocolId);
        }

        if (sig != null) {
            localVarFormParams.put("sig", sig);
        }

        if (statusReportReq != null) {
            localVarFormParams.put("status-report-req", statusReportReq);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (to != null) {
            localVarFormParams.put("to", to);
        }

        if (ttl != null) {
            localVarFormParams.put("ttl", ttl);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (udh != null) {
            localVarFormParams.put("udh", udh);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAnSmsValidateBeforeCall(String format, String apiKey, String from, String to, String accountRef, String apiSecret, String body, String paramCallback, String clientRef, String contentId, String entityId, Integer messageClass, Integer protocolId, String sig, Boolean statusReportReq, String text, Integer ttl, String type, String udh, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling sendAnSms(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendAnSms(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sendAnSms(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendAnSms(Async)");
        }

        return sendAnSmsCall(format, apiKey, from, to, accountRef, apiSecret, body, paramCallback, clientRef, contentId, entityId, messageClass, protocolId, sig, statusReportReq, text, ttl, type, udh, _callback);

    }

    /**
     * Send an SMS
     * Send an outbound SMS from your Vonage account
     * @param format The format of the response (required)
     * @param apiKey Your API key (required)
     * @param from The name or number the message should be sent from. Alphanumeric senderID&#39;s are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
     * @param to The number that the message should be sent to. Numbers are specified in E.164 format. (required)
     * @param accountRef **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com) (optional)
     * @param apiSecret Your API secret. Required unless &#x60;sig&#x60; is provided (optional)
     * @param body **Advanced**: Hex encoded binary data. Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param paramCallback **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters. (optional)
     * @param clientRef **Advanced**: You can optionally include your own reference of up to 100 characters. (optional)
     * @param contentId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param entityId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param messageClass **Advanced**: The Data Coding Scheme value of the message (optional)
     * @param protocolId **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with &#x60;udh&#x60;. (optional)
     * @param sig The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details. (optional)
     * @param statusReportReq **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt). (optional, default to true)
     * @param text The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the &#x60;type&#x60; to &#x60;text&#x60;. If your message contains characters outside this range, then you will need to set the &#x60;type&#x60; to &#x60;unicode&#x60;. (optional)
     * @param ttl **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes. (optional, default to 259200000)
     * @param type **Advanced**: The format of the message body (optional, default to text)
     * @param udh **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @return SendAnSms200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SendAnSms200Response sendAnSms(String format, String apiKey, String from, String to, String accountRef, String apiSecret, String body, String paramCallback, String clientRef, String contentId, String entityId, Integer messageClass, Integer protocolId, String sig, Boolean statusReportReq, String text, Integer ttl, String type, String udh) throws ApiException {
        ApiResponse<SendAnSms200Response> localVarResp = sendAnSmsWithHttpInfo(format, apiKey, from, to, accountRef, apiSecret, body, paramCallback, clientRef, contentId, entityId, messageClass, protocolId, sig, statusReportReq, text, ttl, type, udh);
        return localVarResp.getData();
    }

    /**
     * Send an SMS
     * Send an outbound SMS from your Vonage account
     * @param format The format of the response (required)
     * @param apiKey Your API key (required)
     * @param from The name or number the message should be sent from. Alphanumeric senderID&#39;s are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
     * @param to The number that the message should be sent to. Numbers are specified in E.164 format. (required)
     * @param accountRef **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com) (optional)
     * @param apiSecret Your API secret. Required unless &#x60;sig&#x60; is provided (optional)
     * @param body **Advanced**: Hex encoded binary data. Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param paramCallback **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters. (optional)
     * @param clientRef **Advanced**: You can optionally include your own reference of up to 100 characters. (optional)
     * @param contentId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param entityId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param messageClass **Advanced**: The Data Coding Scheme value of the message (optional)
     * @param protocolId **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with &#x60;udh&#x60;. (optional)
     * @param sig The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details. (optional)
     * @param statusReportReq **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt). (optional, default to true)
     * @param text The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the &#x60;type&#x60; to &#x60;text&#x60;. If your message contains characters outside this range, then you will need to set the &#x60;type&#x60; to &#x60;unicode&#x60;. (optional)
     * @param ttl **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes. (optional, default to 259200000)
     * @param type **Advanced**: The format of the message body (optional, default to text)
     * @param udh **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @return ApiResponse&lt;SendAnSms200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendAnSms200Response> sendAnSmsWithHttpInfo(String format, String apiKey, String from, String to, String accountRef, String apiSecret, String body, String paramCallback, String clientRef, String contentId, String entityId, Integer messageClass, Integer protocolId, String sig, Boolean statusReportReq, String text, Integer ttl, String type, String udh) throws ApiException {
        okhttp3.Call localVarCall = sendAnSmsValidateBeforeCall(format, apiKey, from, to, accountRef, apiSecret, body, paramCallback, clientRef, contentId, entityId, messageClass, protocolId, sig, statusReportReq, text, ttl, type, udh, null);
        Type localVarReturnType = new TypeToken<SendAnSms200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send an SMS (asynchronously)
     * Send an outbound SMS from your Vonage account
     * @param format The format of the response (required)
     * @param apiKey Your API key (required)
     * @param from The name or number the message should be sent from. Alphanumeric senderID&#39;s are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format. (required)
     * @param to The number that the message should be sent to. Numbers are specified in E.164 format. (required)
     * @param accountRef **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com) (optional)
     * @param apiSecret Your API secret. Required unless &#x60;sig&#x60; is provided (optional)
     * @param body **Advanced**: Hex encoded binary data. Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param paramCallback **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters. (optional)
     * @param clientRef **Advanced**: You can optionally include your own reference of up to 100 characters. (optional)
     * @param contentId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param entityId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468) (optional)
     * @param messageClass **Advanced**: The Data Coding Scheme value of the message (optional)
     * @param protocolId **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with &#x60;udh&#x60;. (optional)
     * @param sig The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details. (optional)
     * @param statusReportReq **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt). (optional, default to true)
     * @param text The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the &#x60;type&#x60; to &#x60;text&#x60;. If your message contains characters outside this range, then you will need to set the &#x60;type&#x60; to &#x60;unicode&#x60;. (optional)
     * @param ttl **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes. (optional, default to 259200000)
     * @param type **Advanced**: The format of the message body (optional, default to text)
     * @param udh **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAnSmsAsync(String format, String apiKey, String from, String to, String accountRef, String apiSecret, String body, String paramCallback, String clientRef, String contentId, String entityId, Integer messageClass, Integer protocolId, String sig, Boolean statusReportReq, String text, Integer ttl, String type, String udh, final ApiCallback<SendAnSms200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAnSmsValidateBeforeCall(format, apiKey, from, to, accountRef, apiSecret, body, paramCallback, clientRef, contentId, entityId, messageClass, protocolId, sig, statusReportReq, text, ttl, type, udh, _callback);
        Type localVarReturnType = new TypeToken<SendAnSms200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
