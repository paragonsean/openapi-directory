/*
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InboundMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:33.602463-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundMessage {
  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_CONCAT = "concat";
  @SerializedName(SERIALIZED_NAME_CONCAT)
  private String concat;

  public static final String SERIALIZED_NAME_CONCAT_PART = "concat-part";
  @SerializedName(SERIALIZED_NAME_CONCAT_PART)
  private String concatPart;

  public static final String SERIALIZED_NAME_CONCAT_REF = "concat-ref";
  @SerializedName(SERIALIZED_NAME_CONCAT_REF)
  private String concatRef;

  public static final String SERIALIZED_NAME_CONCAT_TOTAL = "concat-total";
  @SerializedName(SERIALIZED_NAME_CONCAT_TOTAL)
  private String concatTotal;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private File data;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_MESSAGE_TIMESTAMP = "message-timestamp";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TIMESTAMP)
  private String messageTimestamp;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MSISDN = "msisdn";
  @SerializedName(SERIALIZED_NAME_MSISDN)
  private String msisdn;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UDH = "udh";
  @SerializedName(SERIALIZED_NAME_UDH)
  private String udh;

  public InboundMessage() {
  }

  public InboundMessage apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * The Vonage API Key of the receiving account.
   * @return apiKey
   */
  @javax.annotation.Nonnull
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public InboundMessage concat(String concat) {
    this.concat = concat;
    return this;
  }

  /**
   * True - if this is a concatenated message. This field does not exist if it is a single message
   * @return concat
   */
  @javax.annotation.Nullable
  public String getConcat() {
    return concat;
  }

  public void setConcat(String concat) {
    this.concat = concat;
  }


  public InboundMessage concatPart(String concatPart) {
    this.concatPart = concatPart;
    return this;
  }

  /**
   * The number of this part in the message. Counting starts at 1.
   * @return concatPart
   */
  @javax.annotation.Nullable
  public String getConcatPart() {
    return concatPart;
  }

  public void setConcatPart(String concatPart) {
    this.concatPart = concatPart;
  }


  public InboundMessage concatRef(String concatRef) {
    this.concatRef = concatRef;
    return this;
  }

  /**
   * The transaction reference. All parts of this message share this value.
   * @return concatRef
   */
  @javax.annotation.Nullable
  public String getConcatRef() {
    return concatRef;
  }

  public void setConcatRef(String concatRef) {
    this.concatRef = concatRef;
  }


  public InboundMessage concatTotal(String concatTotal) {
    this.concatTotal = concatTotal;
    return this;
  }

  /**
   * The number of parts in this concatenated message.
   * @return concatTotal
   */
  @javax.annotation.Nullable
  public String getConcatTotal() {
    return concatTotal;
  }

  public void setConcatTotal(String concatTotal) {
    this.concatTotal = concatTotal;
  }


  public InboundMessage data(File data) {
    this.data = data;
    return this;
  }

  /**
   * The content of this message, if type is binary.
   * @return data
   */
  @javax.annotation.Nullable
  public File getData() {
    return data;
  }

  public void setData(File data) {
    this.data = data;
  }


  public InboundMessage keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * The first word in the message body. Converted to upper case.
   * @return keyword
   */
  @javax.annotation.Nonnull
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public InboundMessage messageTimestamp(String messageTimestamp) {
    this.messageTimestamp = messageTimestamp;
    return this;
  }

  /**
   * The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
   * @return messageTimestamp
   */
  @javax.annotation.Nonnull
  public String getMessageTimestamp() {
    return messageTimestamp;
  }

  public void setMessageTimestamp(String messageTimestamp) {
    this.messageTimestamp = messageTimestamp;
  }


  public InboundMessage messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The ID of the message
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public InboundMessage msisdn(String msisdn) {
    this.msisdn = msisdn;
    return this;
  }

  /**
   * The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
   * @return msisdn
   */
  @javax.annotation.Nonnull
  public String getMsisdn() {
    return msisdn;
  }

  public void setMsisdn(String msisdn) {
    this.msisdn = msisdn;
  }


  public InboundMessage nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public InboundMessage text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The message body for this inbound message.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public InboundMessage timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * A unix timestamp representation of message-timestamp.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public InboundMessage to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public InboundMessage type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Possible values are:    - &#x60;text&#x60; - standard text.   - &#x60;unicode&#x60; - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - &#x60;binary&#x60; - a binary message. 
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InboundMessage udh(String udh) {
    this.udh = udh;
    return this;
  }

  /**
   * The hex encoded User Data Header, if type is binary
   * @return udh
   */
  @javax.annotation.Nullable
  public String getUdh() {
    return udh;
  }

  public void setUdh(String udh) {
    this.udh = udh;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundMessage inboundMessage = (InboundMessage) o;
    return Objects.equals(this.apiKey, inboundMessage.apiKey) &&
        Objects.equals(this.concat, inboundMessage.concat) &&
        Objects.equals(this.concatPart, inboundMessage.concatPart) &&
        Objects.equals(this.concatRef, inboundMessage.concatRef) &&
        Objects.equals(this.concatTotal, inboundMessage.concatTotal) &&
        Objects.equals(this.data, inboundMessage.data) &&
        Objects.equals(this.keyword, inboundMessage.keyword) &&
        Objects.equals(this.messageTimestamp, inboundMessage.messageTimestamp) &&
        Objects.equals(this.messageId, inboundMessage.messageId) &&
        Objects.equals(this.msisdn, inboundMessage.msisdn) &&
        Objects.equals(this.nonce, inboundMessage.nonce) &&
        Objects.equals(this.text, inboundMessage.text) &&
        Objects.equals(this.timestamp, inboundMessage.timestamp) &&
        Objects.equals(this.to, inboundMessage.to) &&
        Objects.equals(this.type, inboundMessage.type) &&
        Objects.equals(this.udh, inboundMessage.udh);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, concat, concatPart, concatRef, concatTotal, data, keyword, messageTimestamp, messageId, msisdn, nonce, text, timestamp, to, type, udh);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundMessage {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    concat: ").append(toIndentedString(concat)).append("\n");
    sb.append("    concatPart: ").append(toIndentedString(concatPart)).append("\n");
    sb.append("    concatRef: ").append(toIndentedString(concatRef)).append("\n");
    sb.append("    concatTotal: ").append(toIndentedString(concatTotal)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    messageTimestamp: ").append(toIndentedString(messageTimestamp)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    msisdn: ").append(toIndentedString(msisdn)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    udh: ").append(toIndentedString(udh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-key");
    openapiFields.add("concat");
    openapiFields.add("concat-part");
    openapiFields.add("concat-ref");
    openapiFields.add("concat-total");
    openapiFields.add("data");
    openapiFields.add("keyword");
    openapiFields.add("message-timestamp");
    openapiFields.add("messageId");
    openapiFields.add("msisdn");
    openapiFields.add("nonce");
    openapiFields.add("text");
    openapiFields.add("timestamp");
    openapiFields.add("to");
    openapiFields.add("type");
    openapiFields.add("udh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api-key");
    openapiRequiredFields.add("keyword");
    openapiRequiredFields.add("message-timestamp");
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("msisdn");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundMessage is not found in the empty JSON string", InboundMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if ((jsonObj.get("concat") != null && !jsonObj.get("concat").isJsonNull()) && !jsonObj.get("concat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concat").toString()));
      }
      if ((jsonObj.get("concat-part") != null && !jsonObj.get("concat-part").isJsonNull()) && !jsonObj.get("concat-part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concat-part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concat-part").toString()));
      }
      if ((jsonObj.get("concat-ref") != null && !jsonObj.get("concat-ref").isJsonNull()) && !jsonObj.get("concat-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concat-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concat-ref").toString()));
      }
      if ((jsonObj.get("concat-total") != null && !jsonObj.get("concat-total").isJsonNull()) && !jsonObj.get("concat-total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concat-total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concat-total").toString()));
      }
      if (!jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if (!jsonObj.get("message-timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message-timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message-timestamp").toString()));
      }
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("msisdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msisdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msisdn").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("udh") != null && !jsonObj.get("udh").isJsonNull()) && !jsonObj.get("udh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `udh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("udh").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundMessage>() {
           @Override
           public void write(JsonWriter out, InboundMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundMessage
   * @throws IOException if the JSON string is invalid with respect to InboundMessage
   */
  public static InboundMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundMessage.class);
  }

  /**
   * Convert an instance of InboundMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

