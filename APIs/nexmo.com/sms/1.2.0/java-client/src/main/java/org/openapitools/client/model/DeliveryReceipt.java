/*
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryReceipt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:33.602463-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryReceipt {
  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_CLIENT_REF = "client-ref";
  @SerializedName(SERIALIZED_NAME_CLIENT_REF)
  private String clientRef;

  public static final String SERIALIZED_NAME_ERR_CODE = "err-code";
  @SerializedName(SERIALIZED_NAME_ERR_CODE)
  private String errCode;

  public static final String SERIALIZED_NAME_MESSAGE_TIMESTAMP = "message-timestamp";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TIMESTAMP)
  private String messageTimestamp;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MSISDN = "msisdn";
  @SerializedName(SERIALIZED_NAME_MSISDN)
  private String msisdn;

  public static final String SERIALIZED_NAME_NETWORK_CODE = "network-code";
  @SerializedName(SERIALIZED_NAME_NETWORK_CODE)
  private String networkCode;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_SCTS = "scts";
  @SerializedName(SERIALIZED_NAME_SCTS)
  private String scts;

  public static final String SERIALIZED_NAME_SIG = "sig";
  @SerializedName(SERIALIZED_NAME_SIG)
  private String sig;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public DeliveryReceipt() {
  }

  public DeliveryReceipt apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * The API key that sent the SMS. This is useful when multiple accounts are sending webhooks to the same endpoint.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public DeliveryReceipt clientRef(String clientRef) {
    this.clientRef = clientRef;
    return this;
  }

  /**
   * If the &#x60;client-ref&#x60; is set when the SMS is sent, it will be included in the delivery receipt
   * @return clientRef
   */
  @javax.annotation.Nullable
  public String getClientRef() {
    return clientRef;
  }

  public void setClientRef(String clientRef) {
    this.clientRef = clientRef;
  }


  public DeliveryReceipt errCode(String errCode) {
    this.errCode = errCode;
    return this;
  }

  /**
   * The status of the request. Will be a non &#x60;0&#x60; value if there has been an error, or if the status is unknown. See the [Delivery Receipt documentation](/messaging/sms/guides/delivery-receipts#dlr-error-codes) for more details
   * @return errCode
   */
  @javax.annotation.Nullable
  public String getErrCode() {
    return errCode;
  }

  public void setErrCode(String errCode) {
    this.errCode = errCode;
  }


  public DeliveryReceipt messageTimestamp(String messageTimestamp) {
    this.messageTimestamp = messageTimestamp;
    return this;
  }

  /**
   * The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
   * @return messageTimestamp
   */
  @javax.annotation.Nullable
  public String getMessageTimestamp() {
    return messageTimestamp;
  }

  public void setMessageTimestamp(String messageTimestamp) {
    this.messageTimestamp = messageTimestamp;
  }


  public DeliveryReceipt messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The Vonage ID for this message.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public DeliveryReceipt msisdn(String msisdn) {
    this.msisdn = msisdn;
    return this;
  }

  /**
   * The number the message was sent to. Numbers are specified in E.164 format.
   * @return msisdn
   */
  @javax.annotation.Nullable
  public String getMsisdn() {
    return msisdn;
  }

  public void setMsisdn(String msisdn) {
    this.msisdn = msisdn;
  }


  public DeliveryReceipt networkCode(String networkCode) {
    this.networkCode = networkCode;
    return this;
  }

  /**
   * The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier this phone number is registered with.
   * @return networkCode
   */
  @javax.annotation.Nullable
  public String getNetworkCode() {
    return networkCode;
  }

  public void setNetworkCode(String networkCode) {
    this.networkCode = networkCode;
  }


  public DeliveryReceipt nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * A random string to be used when calculating the signature. _Only included if you have signatures enabled_
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public DeliveryReceipt price(String price) {
    this.price = price;
    return this;
  }

  /**
   * The cost of the message
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public DeliveryReceipt scts(String scts) {
    this.scts = scts;
    return this;
  }

  /**
   * When the DLR was received from the carrier in the following format &#x60;YYMMDDHHMM&#x60;. For example, &#x60;2001011400&#x60; is at &#x60;2020-01-01 14:00&#x60;
   * @return scts
   */
  @javax.annotation.Nullable
  public String getScts() {
    return scts;
  }

  public void setScts(String scts) {
    this.scts = scts;
  }


  public DeliveryReceipt sig(String sig) {
    this.sig = sig;
    return this;
  }

  /**
   * The signature to enable verification of the source of this webhook. Please see the [developer documentation for validating signatures](/concepts/guides/signing-messages) for more information, or use one of our published SDKs. _Only included if you have signatures enabled_
   * @return sig
   */
  @javax.annotation.Nullable
  public String getSig() {
    return sig;
  }

  public void setSig(String sig) {
    this.sig = sig;
  }


  public DeliveryReceipt status(String status) {
    this.status = status;
    return this;
  }

  /**
   * A code that explains where the message is in the delivery process.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DeliveryReceipt timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * A timestamp in Unix (seconds since the epoch) format. _Only included if you have signatures enabled_
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public DeliveryReceipt to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The SenderID you set in &#x60;from&#x60; in your request.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryReceipt deliveryReceipt = (DeliveryReceipt) o;
    return Objects.equals(this.apiKey, deliveryReceipt.apiKey) &&
        Objects.equals(this.clientRef, deliveryReceipt.clientRef) &&
        Objects.equals(this.errCode, deliveryReceipt.errCode) &&
        Objects.equals(this.messageTimestamp, deliveryReceipt.messageTimestamp) &&
        Objects.equals(this.messageId, deliveryReceipt.messageId) &&
        Objects.equals(this.msisdn, deliveryReceipt.msisdn) &&
        Objects.equals(this.networkCode, deliveryReceipt.networkCode) &&
        Objects.equals(this.nonce, deliveryReceipt.nonce) &&
        Objects.equals(this.price, deliveryReceipt.price) &&
        Objects.equals(this.scts, deliveryReceipt.scts) &&
        Objects.equals(this.sig, deliveryReceipt.sig) &&
        Objects.equals(this.status, deliveryReceipt.status) &&
        Objects.equals(this.timestamp, deliveryReceipt.timestamp) &&
        Objects.equals(this.to, deliveryReceipt.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, clientRef, errCode, messageTimestamp, messageId, msisdn, networkCode, nonce, price, scts, sig, status, timestamp, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryReceipt {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    clientRef: ").append(toIndentedString(clientRef)).append("\n");
    sb.append("    errCode: ").append(toIndentedString(errCode)).append("\n");
    sb.append("    messageTimestamp: ").append(toIndentedString(messageTimestamp)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    msisdn: ").append(toIndentedString(msisdn)).append("\n");
    sb.append("    networkCode: ").append(toIndentedString(networkCode)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    scts: ").append(toIndentedString(scts)).append("\n");
    sb.append("    sig: ").append(toIndentedString(sig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-key");
    openapiFields.add("client-ref");
    openapiFields.add("err-code");
    openapiFields.add("message-timestamp");
    openapiFields.add("messageId");
    openapiFields.add("msisdn");
    openapiFields.add("network-code");
    openapiFields.add("nonce");
    openapiFields.add("price");
    openapiFields.add("scts");
    openapiFields.add("sig");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryReceipt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryReceipt is not found in the empty JSON string", DeliveryReceipt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryReceipt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryReceipt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api-key") != null && !jsonObj.get("api-key").isJsonNull()) && !jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if ((jsonObj.get("client-ref") != null && !jsonObj.get("client-ref").isJsonNull()) && !jsonObj.get("client-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-ref").toString()));
      }
      if ((jsonObj.get("err-code") != null && !jsonObj.get("err-code").isJsonNull()) && !jsonObj.get("err-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `err-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("err-code").toString()));
      }
      if ((jsonObj.get("message-timestamp") != null && !jsonObj.get("message-timestamp").isJsonNull()) && !jsonObj.get("message-timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message-timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message-timestamp").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("msisdn") != null && !jsonObj.get("msisdn").isJsonNull()) && !jsonObj.get("msisdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msisdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msisdn").toString()));
      }
      if ((jsonObj.get("network-code") != null && !jsonObj.get("network-code").isJsonNull()) && !jsonObj.get("network-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network-code").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("scts") != null && !jsonObj.get("scts").isJsonNull()) && !jsonObj.get("scts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scts").toString()));
      }
      if ((jsonObj.get("sig") != null && !jsonObj.get("sig").isJsonNull()) && !jsonObj.get("sig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sig").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryReceipt>() {
           @Override
           public void write(JsonWriter out, DeliveryReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryReceipt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryReceipt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryReceipt
   * @throws IOException if the JSON string is invalid with respect to DeliveryReceipt
   */
  public static DeliveryReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryReceipt.class);
  }

  /**
   * Convert an instance of DeliveryReceipt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

