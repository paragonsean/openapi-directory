/*
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:33.602463-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_ACCOUNT_REF = "account-ref";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_REF)
  private String accountRef;

  public static final String SERIALIZED_NAME_CLIENT_REF = "client-ref";
  @SerializedName(SERIALIZED_NAME_CLIENT_REF)
  private String clientRef;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message-id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MESSAGE_PRICE = "message-price";
  @SerializedName(SERIALIZED_NAME_MESSAGE_PRICE)
  private String messagePrice;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining-balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private String remainingBalance;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public Message() {
  }

  public Message accountRef(String accountRef) {
    this.accountRef = accountRef;
    return this;
  }

  /**
   * **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
   * @return accountRef
   */
  @javax.annotation.Nullable
  public String getAccountRef() {
    return accountRef;
  }

  public void setAccountRef(String accountRef) {
    this.accountRef = accountRef;
  }


  public Message clientRef(String clientRef) {
    this.clientRef = clientRef;
    return this;
  }

  /**
   * If a &#x60;client-ref&#x60; was included when sending the SMS, this field will be included and hold the value that was sent.
   * @return clientRef
   */
  @javax.annotation.Nullable
  public String getClientRef() {
    return clientRef;
  }

  public void setClientRef(String clientRef) {
    this.clientRef = clientRef;
  }


  public Message messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The ID of the message
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public Message messagePrice(String messagePrice) {
    this.messagePrice = messagePrice;
    return this;
  }

  /**
   * The estimated cost of the message
   * @return messagePrice
   */
  @javax.annotation.Nullable
  public String getMessagePrice() {
    return messagePrice;
  }

  public void setMessagePrice(String messagePrice) {
    this.messagePrice = messagePrice;
  }


  public Message network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The estimated ID of the network of the recipient
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public Message remainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

  /**
   * Your estimated remaining balance
   * @return remainingBalance
   */
  @javax.annotation.Nullable
  public String getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  public Message status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Message to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The number the message was sent to. Numbers are specified in E.164 format.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.accountRef, message.accountRef) &&
        Objects.equals(this.clientRef, message.clientRef) &&
        Objects.equals(this.messageId, message.messageId) &&
        Objects.equals(this.messagePrice, message.messagePrice) &&
        Objects.equals(this.network, message.network) &&
        Objects.equals(this.remainingBalance, message.remainingBalance) &&
        Objects.equals(this.status, message.status) &&
        Objects.equals(this.to, message.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountRef, clientRef, messageId, messagePrice, network, remainingBalance, status, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    accountRef: ").append(toIndentedString(accountRef)).append("\n");
    sb.append("    clientRef: ").append(toIndentedString(clientRef)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    messagePrice: ").append(toIndentedString(messagePrice)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account-ref");
    openapiFields.add("client-ref");
    openapiFields.add("message-id");
    openapiFields.add("message-price");
    openapiFields.add("network");
    openapiFields.add("remaining-balance");
    openapiFields.add("status");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account-ref") != null && !jsonObj.get("account-ref").isJsonNull()) && !jsonObj.get("account-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-ref").toString()));
      }
      if ((jsonObj.get("client-ref") != null && !jsonObj.get("client-ref").isJsonNull()) && !jsonObj.get("client-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-ref").toString()));
      }
      if ((jsonObj.get("message-id") != null && !jsonObj.get("message-id").isJsonNull()) && !jsonObj.get("message-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message-id").toString()));
      }
      if ((jsonObj.get("message-price") != null && !jsonObj.get("message-price").isJsonNull()) && !jsonObj.get("message-price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message-price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message-price").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("remaining-balance") != null && !jsonObj.get("remaining-balance").isJsonNull()) && !jsonObj.get("remaining-balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining-balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining-balance").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

