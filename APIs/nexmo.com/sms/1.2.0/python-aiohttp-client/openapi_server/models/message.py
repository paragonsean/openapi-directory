# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ref: str=None, client_ref: str=None, message_id: str=None, message_price: str=None, network: str=None, remaining_balance: str=None, status: str=None, to: str=None):
        """Message - a model defined in OpenAPI

        :param account_ref: The account_ref of this Message.
        :param client_ref: The client_ref of this Message.
        :param message_id: The message_id of this Message.
        :param message_price: The message_price of this Message.
        :param network: The network of this Message.
        :param remaining_balance: The remaining_balance of this Message.
        :param status: The status of this Message.
        :param to: The to of this Message.
        """
        self.openapi_types = {
            'account_ref': str,
            'client_ref': str,
            'message_id': str,
            'message_price': str,
            'network': str,
            'remaining_balance': str,
            'status': str,
            'to': str
        }

        self.attribute_map = {
            'account_ref': 'account-ref',
            'client_ref': 'client-ref',
            'message_id': 'message-id',
            'message_price': 'message-price',
            'network': 'network',
            'remaining_balance': 'remaining-balance',
            'status': 'status',
            'to': 'to'
        }

        self._account_ref = account_ref
        self._client_ref = client_ref
        self._message_id = message_id
        self._message_price = message_price
        self._network = network
        self._remaining_balance = remaining_balance
        self._status = status
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ref(self):
        """Gets the account_ref of this Message.

        **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)

        :return: The account_ref of this Message.
        :rtype: str
        """
        return self._account_ref

    @account_ref.setter
    def account_ref(self, account_ref):
        """Sets the account_ref of this Message.

        **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)

        :param account_ref: The account_ref of this Message.
        :type account_ref: str
        """

        self._account_ref = account_ref

    @property
    def client_ref(self):
        """Gets the client_ref of this Message.

        If a `client-ref` was included when sending the SMS, this field will be included and hold the value that was sent.

        :return: The client_ref of this Message.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this Message.

        If a `client-ref` was included when sending the SMS, this field will be included and hold the value that was sent.

        :param client_ref: The client_ref of this Message.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def message_id(self):
        """Gets the message_id of this Message.

        The ID of the message

        :return: The message_id of this Message.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Message.

        The ID of the message

        :param message_id: The message_id of this Message.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def message_price(self):
        """Gets the message_price of this Message.

        The estimated cost of the message

        :return: The message_price of this Message.
        :rtype: str
        """
        return self._message_price

    @message_price.setter
    def message_price(self, message_price):
        """Sets the message_price of this Message.

        The estimated cost of the message

        :param message_price: The message_price of this Message.
        :type message_price: str
        """

        self._message_price = message_price

    @property
    def network(self):
        """Gets the network of this Message.

        The estimated ID of the network of the recipient

        :return: The network of this Message.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Message.

        The estimated ID of the network of the recipient

        :param network: The network of this Message.
        :type network: str
        """

        self._network = network

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this Message.

        Your estimated remaining balance

        :return: The remaining_balance of this Message.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this Message.

        Your estimated remaining balance

        :param remaining_balance: The remaining_balance of this Message.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def status(self):
        """Gets the status of this Message.

        The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).

        :return: The status of this Message.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Message.

        The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).

        :param status: The status of this Message.
        :type status: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this Message.

        The number the message was sent to. Numbers are specified in E.164 format.

        :return: The to of this Message.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Message.

        The number the message was sent to. Numbers are specified in E.164 format.

        :param to: The to of this Message.
        :type to: str
        """

        self._to = to
