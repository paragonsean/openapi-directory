# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, concat: str=None, concat_part: str=None, concat_ref: str=None, concat_total: str=None, data: file=None, keyword: str=None, message_timestamp: str=None, message_id: str=None, msisdn: str=None, nonce: str=None, text: str=None, timestamp: str=None, to: str=None, type: str=None, udh: str=None):
        """InboundMessage - a model defined in OpenAPI

        :param api_key: The api_key of this InboundMessage.
        :param concat: The concat of this InboundMessage.
        :param concat_part: The concat_part of this InboundMessage.
        :param concat_ref: The concat_ref of this InboundMessage.
        :param concat_total: The concat_total of this InboundMessage.
        :param data: The data of this InboundMessage.
        :param keyword: The keyword of this InboundMessage.
        :param message_timestamp: The message_timestamp of this InboundMessage.
        :param message_id: The message_id of this InboundMessage.
        :param msisdn: The msisdn of this InboundMessage.
        :param nonce: The nonce of this InboundMessage.
        :param text: The text of this InboundMessage.
        :param timestamp: The timestamp of this InboundMessage.
        :param to: The to of this InboundMessage.
        :param type: The type of this InboundMessage.
        :param udh: The udh of this InboundMessage.
        """
        self.openapi_types = {
            'api_key': str,
            'concat': str,
            'concat_part': str,
            'concat_ref': str,
            'concat_total': str,
            'data': file,
            'keyword': str,
            'message_timestamp': str,
            'message_id': str,
            'msisdn': str,
            'nonce': str,
            'text': str,
            'timestamp': str,
            'to': str,
            'type': str,
            'udh': str
        }

        self.attribute_map = {
            'api_key': 'api-key',
            'concat': 'concat',
            'concat_part': 'concat-part',
            'concat_ref': 'concat-ref',
            'concat_total': 'concat-total',
            'data': 'data',
            'keyword': 'keyword',
            'message_timestamp': 'message-timestamp',
            'message_id': 'messageId',
            'msisdn': 'msisdn',
            'nonce': 'nonce',
            'text': 'text',
            'timestamp': 'timestamp',
            'to': 'to',
            'type': 'type',
            'udh': 'udh'
        }

        self._api_key = api_key
        self._concat = concat
        self._concat_part = concat_part
        self._concat_ref = concat_ref
        self._concat_total = concat_total
        self._data = data
        self._keyword = keyword
        self._message_timestamp = message_timestamp
        self._message_id = message_id
        self._msisdn = msisdn
        self._nonce = nonce
        self._text = text
        self._timestamp = timestamp
        self._to = to
        self._type = type
        self._udh = udh

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundMessage of this InboundMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this InboundMessage.

        The Vonage API Key of the receiving account.

        :return: The api_key of this InboundMessage.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this InboundMessage.

        The Vonage API Key of the receiving account.

        :param api_key: The api_key of this InboundMessage.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def concat(self):
        """Gets the concat of this InboundMessage.

        True - if this is a concatenated message. This field does not exist if it is a single message

        :return: The concat of this InboundMessage.
        :rtype: str
        """
        return self._concat

    @concat.setter
    def concat(self, concat):
        """Sets the concat of this InboundMessage.

        True - if this is a concatenated message. This field does not exist if it is a single message

        :param concat: The concat of this InboundMessage.
        :type concat: str
        """

        self._concat = concat

    @property
    def concat_part(self):
        """Gets the concat_part of this InboundMessage.

        The number of this part in the message. Counting starts at 1.

        :return: The concat_part of this InboundMessage.
        :rtype: str
        """
        return self._concat_part

    @concat_part.setter
    def concat_part(self, concat_part):
        """Sets the concat_part of this InboundMessage.

        The number of this part in the message. Counting starts at 1.

        :param concat_part: The concat_part of this InboundMessage.
        :type concat_part: str
        """

        self._concat_part = concat_part

    @property
    def concat_ref(self):
        """Gets the concat_ref of this InboundMessage.

        The transaction reference. All parts of this message share this value.

        :return: The concat_ref of this InboundMessage.
        :rtype: str
        """
        return self._concat_ref

    @concat_ref.setter
    def concat_ref(self, concat_ref):
        """Sets the concat_ref of this InboundMessage.

        The transaction reference. All parts of this message share this value.

        :param concat_ref: The concat_ref of this InboundMessage.
        :type concat_ref: str
        """

        self._concat_ref = concat_ref

    @property
    def concat_total(self):
        """Gets the concat_total of this InboundMessage.

        The number of parts in this concatenated message.

        :return: The concat_total of this InboundMessage.
        :rtype: str
        """
        return self._concat_total

    @concat_total.setter
    def concat_total(self, concat_total):
        """Sets the concat_total of this InboundMessage.

        The number of parts in this concatenated message.

        :param concat_total: The concat_total of this InboundMessage.
        :type concat_total: str
        """

        self._concat_total = concat_total

    @property
    def data(self):
        """Gets the data of this InboundMessage.

        The content of this message, if type is binary.

        :return: The data of this InboundMessage.
        :rtype: file
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InboundMessage.

        The content of this message, if type is binary.

        :param data: The data of this InboundMessage.
        :type data: file
        """

        self._data = data

    @property
    def keyword(self):
        """Gets the keyword of this InboundMessage.

        The first word in the message body. Converted to upper case.

        :return: The keyword of this InboundMessage.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this InboundMessage.

        The first word in the message body. Converted to upper case.

        :param keyword: The keyword of this InboundMessage.
        :type keyword: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")

        self._keyword = keyword

    @property
    def message_timestamp(self):
        """Gets the message_timestamp of this InboundMessage.

        The time when Vonage started to push this Delivery Receipt to your webhook endpoint.

        :return: The message_timestamp of this InboundMessage.
        :rtype: str
        """
        return self._message_timestamp

    @message_timestamp.setter
    def message_timestamp(self, message_timestamp):
        """Sets the message_timestamp of this InboundMessage.

        The time when Vonage started to push this Delivery Receipt to your webhook endpoint.

        :param message_timestamp: The message_timestamp of this InboundMessage.
        :type message_timestamp: str
        """
        if message_timestamp is None:
            raise ValueError("Invalid value for `message_timestamp`, must not be `None`")

        self._message_timestamp = message_timestamp

    @property
    def message_id(self):
        """Gets the message_id of this InboundMessage.

        The ID of the message

        :return: The message_id of this InboundMessage.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this InboundMessage.

        The ID of the message

        :param message_id: The message_id of this InboundMessage.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def msisdn(self):
        """Gets the msisdn of this InboundMessage.

        The phone number that this inbound message was sent from. Numbers are specified in E.164 format.

        :return: The msisdn of this InboundMessage.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this InboundMessage.

        The phone number that this inbound message was sent from. Numbers are specified in E.164 format.

        :param msisdn: The msisdn of this InboundMessage.
        :type msisdn: str
        """
        if msisdn is None:
            raise ValueError("Invalid value for `msisdn`, must not be `None`")

        self._msisdn = msisdn

    @property
    def nonce(self):
        """Gets the nonce of this InboundMessage.

        A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.

        :return: The nonce of this InboundMessage.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this InboundMessage.

        A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.

        :param nonce: The nonce of this InboundMessage.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def text(self):
        """Gets the text of this InboundMessage.

        The message body for this inbound message.

        :return: The text of this InboundMessage.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InboundMessage.

        The message body for this inbound message.

        :param text: The text of this InboundMessage.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this InboundMessage.

        A unix timestamp representation of message-timestamp.

        :return: The timestamp of this InboundMessage.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InboundMessage.

        A unix timestamp representation of message-timestamp.

        :param timestamp: The timestamp of this InboundMessage.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def to(self):
        """Gets the to of this InboundMessage.

        The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.

        :return: The to of this InboundMessage.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InboundMessage.

        The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.

        :param to: The to of this InboundMessage.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def type(self):
        """Gets the type of this InboundMessage.

        Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 

        :return: The type of this InboundMessage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InboundMessage.

        Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 

        :param type: The type of this InboundMessage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def udh(self):
        """Gets the udh of this InboundMessage.

        The hex encoded User Data Header, if type is binary

        :return: The udh of this InboundMessage.
        :rtype: str
        """
        return self._udh

    @udh.setter
    def udh(self, udh):
        """Sets the udh of this InboundMessage.

        The hex encoded User Data Header, if type is binary

        :param udh: The udh of this InboundMessage.
        :type udh: str
        """

        self._udh = udh
