# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryReceipt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, client_ref: str=None, err_code: str=None, message_timestamp: str=None, message_id: str=None, msisdn: str=None, network_code: str=None, nonce: str=None, price: str=None, scts: str=None, sig: str=None, status: str=None, timestamp: str=None, to: str=None):
        """DeliveryReceipt - a model defined in OpenAPI

        :param api_key: The api_key of this DeliveryReceipt.
        :param client_ref: The client_ref of this DeliveryReceipt.
        :param err_code: The err_code of this DeliveryReceipt.
        :param message_timestamp: The message_timestamp of this DeliveryReceipt.
        :param message_id: The message_id of this DeliveryReceipt.
        :param msisdn: The msisdn of this DeliveryReceipt.
        :param network_code: The network_code of this DeliveryReceipt.
        :param nonce: The nonce of this DeliveryReceipt.
        :param price: The price of this DeliveryReceipt.
        :param scts: The scts of this DeliveryReceipt.
        :param sig: The sig of this DeliveryReceipt.
        :param status: The status of this DeliveryReceipt.
        :param timestamp: The timestamp of this DeliveryReceipt.
        :param to: The to of this DeliveryReceipt.
        """
        self.openapi_types = {
            'api_key': str,
            'client_ref': str,
            'err_code': str,
            'message_timestamp': str,
            'message_id': str,
            'msisdn': str,
            'network_code': str,
            'nonce': str,
            'price': str,
            'scts': str,
            'sig': str,
            'status': str,
            'timestamp': str,
            'to': str
        }

        self.attribute_map = {
            'api_key': 'api-key',
            'client_ref': 'client-ref',
            'err_code': 'err-code',
            'message_timestamp': 'message-timestamp',
            'message_id': 'messageId',
            'msisdn': 'msisdn',
            'network_code': 'network-code',
            'nonce': 'nonce',
            'price': 'price',
            'scts': 'scts',
            'sig': 'sig',
            'status': 'status',
            'timestamp': 'timestamp',
            'to': 'to'
        }

        self._api_key = api_key
        self._client_ref = client_ref
        self._err_code = err_code
        self._message_timestamp = message_timestamp
        self._message_id = message_id
        self._msisdn = msisdn
        self._network_code = network_code
        self._nonce = nonce
        self._price = price
        self._scts = scts
        self._sig = sig
        self._status = status
        self._timestamp = timestamp
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryReceipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryReceipt of this DeliveryReceipt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this DeliveryReceipt.

        The API key that sent the SMS. This is useful when multiple accounts are sending webhooks to the same endpoint.

        :return: The api_key of this DeliveryReceipt.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this DeliveryReceipt.

        The API key that sent the SMS. This is useful when multiple accounts are sending webhooks to the same endpoint.

        :param api_key: The api_key of this DeliveryReceipt.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def client_ref(self):
        """Gets the client_ref of this DeliveryReceipt.

        If the `client-ref` is set when the SMS is sent, it will be included in the delivery receipt

        :return: The client_ref of this DeliveryReceipt.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this DeliveryReceipt.

        If the `client-ref` is set when the SMS is sent, it will be included in the delivery receipt

        :param client_ref: The client_ref of this DeliveryReceipt.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def err_code(self):
        """Gets the err_code of this DeliveryReceipt.

        The status of the request. Will be a non `0` value if there has been an error, or if the status is unknown. See the [Delivery Receipt documentation](/messaging/sms/guides/delivery-receipts#dlr-error-codes) for more details

        :return: The err_code of this DeliveryReceipt.
        :rtype: str
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """Sets the err_code of this DeliveryReceipt.

        The status of the request. Will be a non `0` value if there has been an error, or if the status is unknown. See the [Delivery Receipt documentation](/messaging/sms/guides/delivery-receipts#dlr-error-codes) for more details

        :param err_code: The err_code of this DeliveryReceipt.
        :type err_code: str
        """

        self._err_code = err_code

    @property
    def message_timestamp(self):
        """Gets the message_timestamp of this DeliveryReceipt.

        The time when Vonage started to push this Delivery Receipt to your webhook endpoint.

        :return: The message_timestamp of this DeliveryReceipt.
        :rtype: str
        """
        return self._message_timestamp

    @message_timestamp.setter
    def message_timestamp(self, message_timestamp):
        """Sets the message_timestamp of this DeliveryReceipt.

        The time when Vonage started to push this Delivery Receipt to your webhook endpoint.

        :param message_timestamp: The message_timestamp of this DeliveryReceipt.
        :type message_timestamp: str
        """

        self._message_timestamp = message_timestamp

    @property
    def message_id(self):
        """Gets the message_id of this DeliveryReceipt.

        The Vonage ID for this message.

        :return: The message_id of this DeliveryReceipt.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this DeliveryReceipt.

        The Vonage ID for this message.

        :param message_id: The message_id of this DeliveryReceipt.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def msisdn(self):
        """Gets the msisdn of this DeliveryReceipt.

        The number the message was sent to. Numbers are specified in E.164 format.

        :return: The msisdn of this DeliveryReceipt.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this DeliveryReceipt.

        The number the message was sent to. Numbers are specified in E.164 format.

        :param msisdn: The msisdn of this DeliveryReceipt.
        :type msisdn: str
        """

        self._msisdn = msisdn

    @property
    def network_code(self):
        """Gets the network_code of this DeliveryReceipt.

        The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier this phone number is registered with.

        :return: The network_code of this DeliveryReceipt.
        :rtype: str
        """
        return self._network_code

    @network_code.setter
    def network_code(self, network_code):
        """Sets the network_code of this DeliveryReceipt.

        The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier this phone number is registered with.

        :param network_code: The network_code of this DeliveryReceipt.
        :type network_code: str
        """

        self._network_code = network_code

    @property
    def nonce(self):
        """Gets the nonce of this DeliveryReceipt.

        A random string to be used when calculating the signature. _Only included if you have signatures enabled_

        :return: The nonce of this DeliveryReceipt.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this DeliveryReceipt.

        A random string to be used when calculating the signature. _Only included if you have signatures enabled_

        :param nonce: The nonce of this DeliveryReceipt.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def price(self):
        """Gets the price of this DeliveryReceipt.

        The cost of the message

        :return: The price of this DeliveryReceipt.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DeliveryReceipt.

        The cost of the message

        :param price: The price of this DeliveryReceipt.
        :type price: str
        """

        self._price = price

    @property
    def scts(self):
        """Gets the scts of this DeliveryReceipt.

        When the DLR was received from the carrier in the following format `YYMMDDHHMM`. For example, `2001011400` is at `2020-01-01 14:00`

        :return: The scts of this DeliveryReceipt.
        :rtype: str
        """
        return self._scts

    @scts.setter
    def scts(self, scts):
        """Sets the scts of this DeliveryReceipt.

        When the DLR was received from the carrier in the following format `YYMMDDHHMM`. For example, `2001011400` is at `2020-01-01 14:00`

        :param scts: The scts of this DeliveryReceipt.
        :type scts: str
        """

        self._scts = scts

    @property
    def sig(self):
        """Gets the sig of this DeliveryReceipt.

        The signature to enable verification of the source of this webhook. Please see the [developer documentation for validating signatures](/concepts/guides/signing-messages) for more information, or use one of our published SDKs. _Only included if you have signatures enabled_

        :return: The sig of this DeliveryReceipt.
        :rtype: str
        """
        return self._sig

    @sig.setter
    def sig(self, sig):
        """Sets the sig of this DeliveryReceipt.

        The signature to enable verification of the source of this webhook. Please see the [developer documentation for validating signatures](/concepts/guides/signing-messages) for more information, or use one of our published SDKs. _Only included if you have signatures enabled_

        :param sig: The sig of this DeliveryReceipt.
        :type sig: str
        """

        self._sig = sig

    @property
    def status(self):
        """Gets the status of this DeliveryReceipt.

        A code that explains where the message is in the delivery process.

        :return: The status of this DeliveryReceipt.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeliveryReceipt.

        A code that explains where the message is in the delivery process.

        :param status: The status of this DeliveryReceipt.
        :type status: str
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this DeliveryReceipt.

        A timestamp in Unix (seconds since the epoch) format. _Only included if you have signatures enabled_

        :return: The timestamp of this DeliveryReceipt.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeliveryReceipt.

        A timestamp in Unix (seconds since the epoch) format. _Only included if you have signatures enabled_

        :param timestamp: The timestamp of this DeliveryReceipt.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def to(self):
        """Gets the to of this DeliveryReceipt.

        The SenderID you set in `from` in your request.

        :return: The to of this DeliveryReceipt.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this DeliveryReceipt.

        The SenderID you set in `from` in your request.

        :param to: The to of this DeliveryReceipt.
        :type to: str
        """

        self._to = to
