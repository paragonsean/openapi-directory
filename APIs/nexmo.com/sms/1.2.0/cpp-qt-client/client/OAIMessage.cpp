/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_account_ref_isSet = false;
    m_account_ref_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_message_price_isSet = false;
    m_message_price_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_account_ref_isValid = ::OpenAPI::fromJsonValue(m_account_ref, json[QString("account-ref")]);
    m_account_ref_isSet = !json[QString("account-ref")].isNull() && m_account_ref_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client-ref")]);
    m_client_ref_isSet = !json[QString("client-ref")].isNull() && m_client_ref_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message-id")]);
    m_message_id_isSet = !json[QString("message-id")].isNull() && m_message_id_isValid;

    m_message_price_isValid = ::OpenAPI::fromJsonValue(m_message_price, json[QString("message-price")]);
    m_message_price_isSet = !json[QString("message-price")].isNull() && m_message_price_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remaining-balance")]);
    m_remaining_balance_isSet = !json[QString("remaining-balance")].isNull() && m_remaining_balance_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_account_ref_isSet) {
        obj.insert(QString("account-ref"), ::OpenAPI::toJsonValue(m_account_ref));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client-ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message-id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_message_price_isSet) {
        obj.insert(QString("message-price"), ::OpenAPI::toJsonValue(m_message_price));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_remaining_balance_isSet) {
        obj.insert(QString("remaining-balance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIMessage::getAccountRef() const {
    return m_account_ref;
}
void OAIMessage::setAccountRef(const QString &account_ref) {
    m_account_ref = account_ref;
    m_account_ref_isSet = true;
}

bool OAIMessage::is_account_ref_Set() const{
    return m_account_ref_isSet;
}

bool OAIMessage::is_account_ref_Valid() const{
    return m_account_ref_isValid;
}

QString OAIMessage::getClientRef() const {
    return m_client_ref;
}
void OAIMessage::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIMessage::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIMessage::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAIMessage::getMessageId() const {
    return m_message_id;
}
void OAIMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIMessage::getMessagePrice() const {
    return m_message_price;
}
void OAIMessage::setMessagePrice(const QString &message_price) {
    m_message_price = message_price;
    m_message_price_isSet = true;
}

bool OAIMessage::is_message_price_Set() const{
    return m_message_price_isSet;
}

bool OAIMessage::is_message_price_Valid() const{
    return m_message_price_isValid;
}

QString OAIMessage::getNetwork() const {
    return m_network;
}
void OAIMessage::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIMessage::is_network_Set() const{
    return m_network_isSet;
}

bool OAIMessage::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIMessage::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAIMessage::setRemainingBalance(const QString &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAIMessage::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAIMessage::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAIMessage::getStatus() const {
    return m_status;
}
void OAIMessage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessage::getTo() const {
    return m_to;
}
void OAIMessage::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessage::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessage::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
