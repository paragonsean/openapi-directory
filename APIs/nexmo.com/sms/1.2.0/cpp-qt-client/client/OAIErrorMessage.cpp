/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorMessage::OAIErrorMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorMessage::OAIErrorMessage() {
    this->initializeModel();
}

OAIErrorMessage::~OAIErrorMessage() {}

void OAIErrorMessage::initializeModel() {

    m_error_text_isSet = false;
    m_error_text_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIErrorMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorMessage::fromJsonObject(QJsonObject json) {

    m_error_text_isValid = ::OpenAPI::fromJsonValue(m_error_text, json[QString("error-text")]);
    m_error_text_isSet = !json[QString("error-text")].isNull() && m_error_text_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIErrorMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_error_text_isSet) {
        obj.insert(QString("error-text"), ::OpenAPI::toJsonValue(m_error_text));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIErrorMessage::getErrorText() const {
    return m_error_text;
}
void OAIErrorMessage::setErrorText(const QString &error_text) {
    m_error_text = error_text;
    m_error_text_isSet = true;
}

bool OAIErrorMessage::is_error_text_Set() const{
    return m_error_text_isSet;
}

bool OAIErrorMessage::is_error_text_Valid() const{
    return m_error_text_isValid;
}

QString OAIErrorMessage::getStatus() const {
    return m_status;
}
void OAIErrorMessage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIErrorMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIErrorMessage::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIErrorMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
