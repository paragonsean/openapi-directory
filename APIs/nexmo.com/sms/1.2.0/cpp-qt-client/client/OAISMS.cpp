/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISMS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISMS::OAISMS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISMS::OAISMS() {
    this->initializeModel();
}

OAISMS::~OAISMS() {}

void OAISMS::initializeModel() {

    m_message_count_isSet = false;
    m_message_count_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAISMS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISMS::fromJsonObject(QJsonObject json) {

    m_message_count_isValid = ::OpenAPI::fromJsonValue(m_message_count, json[QString("message-count")]);
    m_message_count_isSet = !json[QString("message-count")].isNull() && m_message_count_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAISMS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISMS::asJsonObject() const {
    QJsonObject obj;
    if (m_message_count_isSet) {
        obj.insert(QString("message-count"), ::OpenAPI::toJsonValue(m_message_count));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QString OAISMS::getMessageCount() const {
    return m_message_count;
}
void OAISMS::setMessageCount(const QString &message_count) {
    m_message_count = message_count;
    m_message_count_isSet = true;
}

bool OAISMS::is_message_count_Set() const{
    return m_message_count_isSet;
}

bool OAISMS::is_message_count_Valid() const{
    return m_message_count_isValid;
}

QList<OAIMessage> OAISMS::getMessages() const {
    return m_messages;
}
void OAISMS::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAISMS::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAISMS::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAISMS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISMS::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
