/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryReceipt::OAIDeliveryReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryReceipt::OAIDeliveryReceipt() {
    this->initializeModel();
}

OAIDeliveryReceipt::~OAIDeliveryReceipt() {}

void OAIDeliveryReceipt::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_err_code_isSet = false;
    m_err_code_isValid = false;

    m_message_timestamp_isSet = false;
    m_message_timestamp_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_msisdn_isSet = false;
    m_msisdn_isValid = false;

    m_network_code_isSet = false;
    m_network_code_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_scts_isSet = false;
    m_scts_isValid = false;

    m_sig_isSet = false;
    m_sig_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIDeliveryReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryReceipt::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api-key")]);
    m_api_key_isSet = !json[QString("api-key")].isNull() && m_api_key_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client-ref")]);
    m_client_ref_isSet = !json[QString("client-ref")].isNull() && m_client_ref_isValid;

    m_err_code_isValid = ::OpenAPI::fromJsonValue(m_err_code, json[QString("err-code")]);
    m_err_code_isSet = !json[QString("err-code")].isNull() && m_err_code_isValid;

    m_message_timestamp_isValid = ::OpenAPI::fromJsonValue(m_message_timestamp, json[QString("message-timestamp")]);
    m_message_timestamp_isSet = !json[QString("message-timestamp")].isNull() && m_message_timestamp_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_msisdn_isValid = ::OpenAPI::fromJsonValue(m_msisdn, json[QString("msisdn")]);
    m_msisdn_isSet = !json[QString("msisdn")].isNull() && m_msisdn_isValid;

    m_network_code_isValid = ::OpenAPI::fromJsonValue(m_network_code, json[QString("network-code")]);
    m_network_code_isSet = !json[QString("network-code")].isNull() && m_network_code_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_scts_isValid = ::OpenAPI::fromJsonValue(m_scts, json[QString("scts")]);
    m_scts_isSet = !json[QString("scts")].isNull() && m_scts_isValid;

    m_sig_isValid = ::OpenAPI::fromJsonValue(m_sig, json[QString("sig")]);
    m_sig_isSet = !json[QString("sig")].isNull() && m_sig_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIDeliveryReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api-key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client-ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_err_code_isSet) {
        obj.insert(QString("err-code"), ::OpenAPI::toJsonValue(m_err_code));
    }
    if (m_message_timestamp_isSet) {
        obj.insert(QString("message-timestamp"), ::OpenAPI::toJsonValue(m_message_timestamp));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_msisdn_isSet) {
        obj.insert(QString("msisdn"), ::OpenAPI::toJsonValue(m_msisdn));
    }
    if (m_network_code_isSet) {
        obj.insert(QString("network-code"), ::OpenAPI::toJsonValue(m_network_code));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_scts_isSet) {
        obj.insert(QString("scts"), ::OpenAPI::toJsonValue(m_scts));
    }
    if (m_sig_isSet) {
        obj.insert(QString("sig"), ::OpenAPI::toJsonValue(m_sig));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIDeliveryReceipt::getApiKey() const {
    return m_api_key;
}
void OAIDeliveryReceipt::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIDeliveryReceipt::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIDeliveryReceipt::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIDeliveryReceipt::getClientRef() const {
    return m_client_ref;
}
void OAIDeliveryReceipt::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIDeliveryReceipt::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIDeliveryReceipt::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAIDeliveryReceipt::getErrCode() const {
    return m_err_code;
}
void OAIDeliveryReceipt::setErrCode(const QString &err_code) {
    m_err_code = err_code;
    m_err_code_isSet = true;
}

bool OAIDeliveryReceipt::is_err_code_Set() const{
    return m_err_code_isSet;
}

bool OAIDeliveryReceipt::is_err_code_Valid() const{
    return m_err_code_isValid;
}

QString OAIDeliveryReceipt::getMessageTimestamp() const {
    return m_message_timestamp;
}
void OAIDeliveryReceipt::setMessageTimestamp(const QString &message_timestamp) {
    m_message_timestamp = message_timestamp;
    m_message_timestamp_isSet = true;
}

bool OAIDeliveryReceipt::is_message_timestamp_Set() const{
    return m_message_timestamp_isSet;
}

bool OAIDeliveryReceipt::is_message_timestamp_Valid() const{
    return m_message_timestamp_isValid;
}

QString OAIDeliveryReceipt::getMessageId() const {
    return m_message_id;
}
void OAIDeliveryReceipt::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIDeliveryReceipt::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIDeliveryReceipt::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIDeliveryReceipt::getMsisdn() const {
    return m_msisdn;
}
void OAIDeliveryReceipt::setMsisdn(const QString &msisdn) {
    m_msisdn = msisdn;
    m_msisdn_isSet = true;
}

bool OAIDeliveryReceipt::is_msisdn_Set() const{
    return m_msisdn_isSet;
}

bool OAIDeliveryReceipt::is_msisdn_Valid() const{
    return m_msisdn_isValid;
}

QString OAIDeliveryReceipt::getNetworkCode() const {
    return m_network_code;
}
void OAIDeliveryReceipt::setNetworkCode(const QString &network_code) {
    m_network_code = network_code;
    m_network_code_isSet = true;
}

bool OAIDeliveryReceipt::is_network_code_Set() const{
    return m_network_code_isSet;
}

bool OAIDeliveryReceipt::is_network_code_Valid() const{
    return m_network_code_isValid;
}

QString OAIDeliveryReceipt::getNonce() const {
    return m_nonce;
}
void OAIDeliveryReceipt::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIDeliveryReceipt::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIDeliveryReceipt::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAIDeliveryReceipt::getPrice() const {
    return m_price;
}
void OAIDeliveryReceipt::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIDeliveryReceipt::is_price_Set() const{
    return m_price_isSet;
}

bool OAIDeliveryReceipt::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIDeliveryReceipt::getScts() const {
    return m_scts;
}
void OAIDeliveryReceipt::setScts(const QString &scts) {
    m_scts = scts;
    m_scts_isSet = true;
}

bool OAIDeliveryReceipt::is_scts_Set() const{
    return m_scts_isSet;
}

bool OAIDeliveryReceipt::is_scts_Valid() const{
    return m_scts_isValid;
}

QString OAIDeliveryReceipt::getSig() const {
    return m_sig;
}
void OAIDeliveryReceipt::setSig(const QString &sig) {
    m_sig = sig;
    m_sig_isSet = true;
}

bool OAIDeliveryReceipt::is_sig_Set() const{
    return m_sig_isSet;
}

bool OAIDeliveryReceipt::is_sig_Valid() const{
    return m_sig_isValid;
}

QString OAIDeliveryReceipt::getStatus() const {
    return m_status;
}
void OAIDeliveryReceipt::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeliveryReceipt::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeliveryReceipt::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeliveryReceipt::getTimestamp() const {
    return m_timestamp;
}
void OAIDeliveryReceipt::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDeliveryReceipt::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDeliveryReceipt::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIDeliveryReceipt::getTo() const {
    return m_to;
}
void OAIDeliveryReceipt::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIDeliveryReceipt::is_to_Set() const{
    return m_to_isSet;
}

bool OAIDeliveryReceipt::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIDeliveryReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_err_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
