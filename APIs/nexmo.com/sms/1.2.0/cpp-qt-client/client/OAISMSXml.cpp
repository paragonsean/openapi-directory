/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISMSXml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISMSXml::OAISMSXml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISMSXml::OAISMSXml() {
    this->initializeModel();
}

OAISMSXml::~OAISMSXml() {}

void OAISMSXml::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAISMSXml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISMSXml::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAISMSXml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISMSXml::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QList<OAIMessage> OAISMSXml::getMessages() const {
    return m_messages;
}
void OAISMSXml::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAISMSXml::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAISMSXml::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAISMSXml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISMSXml::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
