/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_message_count_isSet = false;
    m_message_count_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_message_count_isValid = ::OpenAPI::fromJsonValue(m_message_count, json[QString("message-count")]);
    m_message_count_isSet = !json[QString("message-count")].isNull() && m_message_count_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_message_count_isSet) {
        obj.insert(QString("message-count"), ::OpenAPI::toJsonValue(m_message_count));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QString OAIError::getMessageCount() const {
    return m_message_count;
}
void OAIError::setMessageCount(const QString &message_count) {
    m_message_count = message_count;
    m_message_count_isSet = true;
}

bool OAIError::is_message_count_Set() const{
    return m_message_count_isSet;
}

bool OAIError::is_message_count_Valid() const{
    return m_message_count_isValid;
}

QList<OAIErrorMessage> OAIError::getMessages() const {
    return m_messages;
}
void OAIError::setMessages(const QList<OAIErrorMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIError::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIError::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
