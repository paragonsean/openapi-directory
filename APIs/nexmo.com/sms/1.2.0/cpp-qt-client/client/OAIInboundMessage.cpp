/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundMessage::OAIInboundMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundMessage::OAIInboundMessage() {
    this->initializeModel();
}

OAIInboundMessage::~OAIInboundMessage() {}

void OAIInboundMessage::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_concat_isSet = false;
    m_concat_isValid = false;

    m_concat_part_isSet = false;
    m_concat_part_isValid = false;

    m_concat_ref_isSet = false;
    m_concat_ref_isValid = false;

    m_concat_total_isSet = false;
    m_concat_total_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_message_timestamp_isSet = false;
    m_message_timestamp_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_msisdn_isSet = false;
    m_msisdn_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_udh_isSet = false;
    m_udh_isValid = false;
}

void OAIInboundMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundMessage::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api-key")]);
    m_api_key_isSet = !json[QString("api-key")].isNull() && m_api_key_isValid;

    m_concat_isValid = ::OpenAPI::fromJsonValue(m_concat, json[QString("concat")]);
    m_concat_isSet = !json[QString("concat")].isNull() && m_concat_isValid;

    m_concat_part_isValid = ::OpenAPI::fromJsonValue(m_concat_part, json[QString("concat-part")]);
    m_concat_part_isSet = !json[QString("concat-part")].isNull() && m_concat_part_isValid;

    m_concat_ref_isValid = ::OpenAPI::fromJsonValue(m_concat_ref, json[QString("concat-ref")]);
    m_concat_ref_isSet = !json[QString("concat-ref")].isNull() && m_concat_ref_isValid;

    m_concat_total_isValid = ::OpenAPI::fromJsonValue(m_concat_total, json[QString("concat-total")]);
    m_concat_total_isSet = !json[QString("concat-total")].isNull() && m_concat_total_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_message_timestamp_isValid = ::OpenAPI::fromJsonValue(m_message_timestamp, json[QString("message-timestamp")]);
    m_message_timestamp_isSet = !json[QString("message-timestamp")].isNull() && m_message_timestamp_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_msisdn_isValid = ::OpenAPI::fromJsonValue(m_msisdn, json[QString("msisdn")]);
    m_msisdn_isSet = !json[QString("msisdn")].isNull() && m_msisdn_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_udh_isValid = ::OpenAPI::fromJsonValue(m_udh, json[QString("udh")]);
    m_udh_isSet = !json[QString("udh")].isNull() && m_udh_isValid;
}

QString OAIInboundMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api-key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_concat_isSet) {
        obj.insert(QString("concat"), ::OpenAPI::toJsonValue(m_concat));
    }
    if (m_concat_part_isSet) {
        obj.insert(QString("concat-part"), ::OpenAPI::toJsonValue(m_concat_part));
    }
    if (m_concat_ref_isSet) {
        obj.insert(QString("concat-ref"), ::OpenAPI::toJsonValue(m_concat_ref));
    }
    if (m_concat_total_isSet) {
        obj.insert(QString("concat-total"), ::OpenAPI::toJsonValue(m_concat_total));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_message_timestamp_isSet) {
        obj.insert(QString("message-timestamp"), ::OpenAPI::toJsonValue(m_message_timestamp));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_msisdn_isSet) {
        obj.insert(QString("msisdn"), ::OpenAPI::toJsonValue(m_msisdn));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_udh_isSet) {
        obj.insert(QString("udh"), ::OpenAPI::toJsonValue(m_udh));
    }
    return obj;
}

QString OAIInboundMessage::getApiKey() const {
    return m_api_key;
}
void OAIInboundMessage::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIInboundMessage::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIInboundMessage::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIInboundMessage::getConcat() const {
    return m_concat;
}
void OAIInboundMessage::setConcat(const QString &concat) {
    m_concat = concat;
    m_concat_isSet = true;
}

bool OAIInboundMessage::is_concat_Set() const{
    return m_concat_isSet;
}

bool OAIInboundMessage::is_concat_Valid() const{
    return m_concat_isValid;
}

QString OAIInboundMessage::getConcatPart() const {
    return m_concat_part;
}
void OAIInboundMessage::setConcatPart(const QString &concat_part) {
    m_concat_part = concat_part;
    m_concat_part_isSet = true;
}

bool OAIInboundMessage::is_concat_part_Set() const{
    return m_concat_part_isSet;
}

bool OAIInboundMessage::is_concat_part_Valid() const{
    return m_concat_part_isValid;
}

QString OAIInboundMessage::getConcatRef() const {
    return m_concat_ref;
}
void OAIInboundMessage::setConcatRef(const QString &concat_ref) {
    m_concat_ref = concat_ref;
    m_concat_ref_isSet = true;
}

bool OAIInboundMessage::is_concat_ref_Set() const{
    return m_concat_ref_isSet;
}

bool OAIInboundMessage::is_concat_ref_Valid() const{
    return m_concat_ref_isValid;
}

QString OAIInboundMessage::getConcatTotal() const {
    return m_concat_total;
}
void OAIInboundMessage::setConcatTotal(const QString &concat_total) {
    m_concat_total = concat_total;
    m_concat_total_isSet = true;
}

bool OAIInboundMessage::is_concat_total_Set() const{
    return m_concat_total_isSet;
}

bool OAIInboundMessage::is_concat_total_Valid() const{
    return m_concat_total_isValid;
}

OAIHttpFileElement OAIInboundMessage::getData() const {
    return m_data;
}
void OAIInboundMessage::setData(const OAIHttpFileElement &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIInboundMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIInboundMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIInboundMessage::getKeyword() const {
    return m_keyword;
}
void OAIInboundMessage::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIInboundMessage::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIInboundMessage::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIInboundMessage::getMessageTimestamp() const {
    return m_message_timestamp;
}
void OAIInboundMessage::setMessageTimestamp(const QString &message_timestamp) {
    m_message_timestamp = message_timestamp;
    m_message_timestamp_isSet = true;
}

bool OAIInboundMessage::is_message_timestamp_Set() const{
    return m_message_timestamp_isSet;
}

bool OAIInboundMessage::is_message_timestamp_Valid() const{
    return m_message_timestamp_isValid;
}

QString OAIInboundMessage::getMessageId() const {
    return m_message_id;
}
void OAIInboundMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIInboundMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIInboundMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIInboundMessage::getMsisdn() const {
    return m_msisdn;
}
void OAIInboundMessage::setMsisdn(const QString &msisdn) {
    m_msisdn = msisdn;
    m_msisdn_isSet = true;
}

bool OAIInboundMessage::is_msisdn_Set() const{
    return m_msisdn_isSet;
}

bool OAIInboundMessage::is_msisdn_Valid() const{
    return m_msisdn_isValid;
}

QString OAIInboundMessage::getNonce() const {
    return m_nonce;
}
void OAIInboundMessage::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIInboundMessage::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIInboundMessage::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAIInboundMessage::getText() const {
    return m_text;
}
void OAIInboundMessage::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIInboundMessage::is_text_Set() const{
    return m_text_isSet;
}

bool OAIInboundMessage::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIInboundMessage::getTimestamp() const {
    return m_timestamp;
}
void OAIInboundMessage::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIInboundMessage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIInboundMessage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIInboundMessage::getTo() const {
    return m_to;
}
void OAIInboundMessage::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIInboundMessage::is_to_Set() const{
    return m_to_isSet;
}

bool OAIInboundMessage::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIInboundMessage::getType() const {
    return m_type;
}
void OAIInboundMessage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInboundMessage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInboundMessage::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInboundMessage::getUdh() const {
    return m_udh;
}
void OAIInboundMessage::setUdh(const QString &udh) {
    m_udh = udh;
    m_udh_isSet = true;
}

bool OAIInboundMessage::is_udh_Set() const{
    return m_udh_isSet;
}

bool OAIInboundMessage::is_udh_Valid() const{
    return m_udh_isValid;
}

bool OAIInboundMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udh_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_keyword_isValid && m_message_timestamp_isValid && m_message_id_isValid && m_msisdn_isValid && m_text_isValid && m_to_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
