/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Message model module.
 * @module model/Message
 * @version 1.2.0
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('account-ref')) {
                obj['account-ref'] = ApiClient.convertToType(data['account-ref'], 'String');
            }
            if (data.hasOwnProperty('client-ref')) {
                obj['client-ref'] = ApiClient.convertToType(data['client-ref'], 'String');
            }
            if (data.hasOwnProperty('message-id')) {
                obj['message-id'] = ApiClient.convertToType(data['message-id'], 'String');
            }
            if (data.hasOwnProperty('message-price')) {
                obj['message-price'] = ApiClient.convertToType(data['message-price'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('remaining-balance')) {
                obj['remaining-balance'] = ApiClient.convertToType(data['remaining-balance'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account-ref'] && !(typeof data['account-ref'] === 'string' || data['account-ref'] instanceof String)) {
            throw new Error("Expected the field `account-ref` to be a primitive type in the JSON string but got " + data['account-ref']);
        }
        // ensure the json data is a string
        if (data['client-ref'] && !(typeof data['client-ref'] === 'string' || data['client-ref'] instanceof String)) {
            throw new Error("Expected the field `client-ref` to be a primitive type in the JSON string but got " + data['client-ref']);
        }
        // ensure the json data is a string
        if (data['message-id'] && !(typeof data['message-id'] === 'string' || data['message-id'] instanceof String)) {
            throw new Error("Expected the field `message-id` to be a primitive type in the JSON string but got " + data['message-id']);
        }
        // ensure the json data is a string
        if (data['message-price'] && !(typeof data['message-price'] === 'string' || data['message-price'] instanceof String)) {
            throw new Error("Expected the field `message-price` to be a primitive type in the JSON string but got " + data['message-price']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['remaining-balance'] && !(typeof data['remaining-balance'] === 'string' || data['remaining-balance'] instanceof String)) {
            throw new Error("Expected the field `remaining-balance` to be a primitive type in the JSON string but got " + data['remaining-balance']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
 * @member {String} account-ref
 */
Message.prototype['account-ref'] = undefined;

/**
 * If a `client-ref` was included when sending the SMS, this field will be included and hold the value that was sent.
 * @member {String} client-ref
 */
Message.prototype['client-ref'] = undefined;

/**
 * The ID of the message
 * @member {String} message-id
 */
Message.prototype['message-id'] = undefined;

/**
 * The estimated cost of the message
 * @member {String} message-price
 */
Message.prototype['message-price'] = undefined;

/**
 * The estimated ID of the network of the recipient
 * @member {String} network
 */
Message.prototype['network'] = undefined;

/**
 * Your estimated remaining balance
 * @member {String} remaining-balance
 */
Message.prototype['remaining-balance'] = undefined;

/**
 * The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).
 * @member {String} status
 */
Message.prototype['status'] = undefined;

/**
 * The number the message was sent to. Numbers are specified in E.164 format.
 * @member {String} to
 */
Message.prototype['to'] = undefined;






export default Message;

