/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InboundMessage model module.
 * @module model/InboundMessage
 * @version 1.2.0
 */
class InboundMessage {
    /**
     * Constructs a new <code>InboundMessage</code>.
     * @alias module:model/InboundMessage
     * @param apiKey {String} The Vonage API Key of the receiving account.
     * @param keyword {String} The first word in the message body. Converted to upper case.
     * @param messageTimestamp {String} The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
     * @param messageId {String} The ID of the message
     * @param msisdn {String} The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
     * @param text {String} The message body for this inbound message.
     * @param to {String} The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
     * @param type {String} Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 
     */
    constructor(apiKey, keyword, messageTimestamp, messageId, msisdn, text, to, type) { 
        
        InboundMessage.initialize(this, apiKey, keyword, messageTimestamp, messageId, msisdn, text, to, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiKey, keyword, messageTimestamp, messageId, msisdn, text, to, type) { 
        obj['api-key'] = apiKey;
        obj['keyword'] = keyword;
        obj['message-timestamp'] = messageTimestamp;
        obj['messageId'] = messageId;
        obj['msisdn'] = msisdn;
        obj['text'] = text;
        obj['to'] = to;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InboundMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundMessage} obj Optional instance to populate.
     * @return {module:model/InboundMessage} The populated <code>InboundMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundMessage();

            if (data.hasOwnProperty('api-key')) {
                obj['api-key'] = ApiClient.convertToType(data['api-key'], 'String');
            }
            if (data.hasOwnProperty('concat')) {
                obj['concat'] = ApiClient.convertToType(data['concat'], 'String');
            }
            if (data.hasOwnProperty('concat-part')) {
                obj['concat-part'] = ApiClient.convertToType(data['concat-part'], 'String');
            }
            if (data.hasOwnProperty('concat-ref')) {
                obj['concat-ref'] = ApiClient.convertToType(data['concat-ref'], 'String');
            }
            if (data.hasOwnProperty('concat-total')) {
                obj['concat-total'] = ApiClient.convertToType(data['concat-total'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], File);
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('message-timestamp')) {
                obj['message-timestamp'] = ApiClient.convertToType(data['message-timestamp'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('msisdn')) {
                obj['msisdn'] = ApiClient.convertToType(data['msisdn'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('udh')) {
                obj['udh'] = ApiClient.convertToType(data['udh'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InboundMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['api-key'] && !(typeof data['api-key'] === 'string' || data['api-key'] instanceof String)) {
            throw new Error("Expected the field `api-key` to be a primitive type in the JSON string but got " + data['api-key']);
        }
        // ensure the json data is a string
        if (data['concat'] && !(typeof data['concat'] === 'string' || data['concat'] instanceof String)) {
            throw new Error("Expected the field `concat` to be a primitive type in the JSON string but got " + data['concat']);
        }
        // ensure the json data is a string
        if (data['concat-part'] && !(typeof data['concat-part'] === 'string' || data['concat-part'] instanceof String)) {
            throw new Error("Expected the field `concat-part` to be a primitive type in the JSON string but got " + data['concat-part']);
        }
        // ensure the json data is a string
        if (data['concat-ref'] && !(typeof data['concat-ref'] === 'string' || data['concat-ref'] instanceof String)) {
            throw new Error("Expected the field `concat-ref` to be a primitive type in the JSON string but got " + data['concat-ref']);
        }
        // ensure the json data is a string
        if (data['concat-total'] && !(typeof data['concat-total'] === 'string' || data['concat-total'] instanceof String)) {
            throw new Error("Expected the field `concat-total` to be a primitive type in the JSON string but got " + data['concat-total']);
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['message-timestamp'] && !(typeof data['message-timestamp'] === 'string' || data['message-timestamp'] instanceof String)) {
            throw new Error("Expected the field `message-timestamp` to be a primitive type in the JSON string but got " + data['message-timestamp']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['msisdn'] && !(typeof data['msisdn'] === 'string' || data['msisdn'] instanceof String)) {
            throw new Error("Expected the field `msisdn` to be a primitive type in the JSON string but got " + data['msisdn']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['udh'] && !(typeof data['udh'] === 'string' || data['udh'] instanceof String)) {
            throw new Error("Expected the field `udh` to be a primitive type in the JSON string but got " + data['udh']);
        }

        return true;
    }


}

InboundMessage.RequiredProperties = ["api-key", "keyword", "message-timestamp", "messageId", "msisdn", "text", "to", "type"];

/**
 * The Vonage API Key of the receiving account.
 * @member {String} api-key
 */
InboundMessage.prototype['api-key'] = undefined;

/**
 * True - if this is a concatenated message. This field does not exist if it is a single message
 * @member {String} concat
 */
InboundMessage.prototype['concat'] = undefined;

/**
 * The number of this part in the message. Counting starts at 1.
 * @member {String} concat-part
 */
InboundMessage.prototype['concat-part'] = undefined;

/**
 * The transaction reference. All parts of this message share this value.
 * @member {String} concat-ref
 */
InboundMessage.prototype['concat-ref'] = undefined;

/**
 * The number of parts in this concatenated message.
 * @member {String} concat-total
 */
InboundMessage.prototype['concat-total'] = undefined;

/**
 * The content of this message, if type is binary.
 * @member {File} data
 */
InboundMessage.prototype['data'] = undefined;

/**
 * The first word in the message body. Converted to upper case.
 * @member {String} keyword
 */
InboundMessage.prototype['keyword'] = undefined;

/**
 * The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
 * @member {String} message-timestamp
 */
InboundMessage.prototype['message-timestamp'] = undefined;

/**
 * The ID of the message
 * @member {String} messageId
 */
InboundMessage.prototype['messageId'] = undefined;

/**
 * The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
 * @member {String} msisdn
 */
InboundMessage.prototype['msisdn'] = undefined;

/**
 * A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.
 * @member {String} nonce
 */
InboundMessage.prototype['nonce'] = undefined;

/**
 * The message body for this inbound message.
 * @member {String} text
 */
InboundMessage.prototype['text'] = undefined;

/**
 * A unix timestamp representation of message-timestamp.
 * @member {String} timestamp
 */
InboundMessage.prototype['timestamp'] = undefined;

/**
 * The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
 * @member {String} to
 */
InboundMessage.prototype['to'] = undefined;

/**
 * Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 
 * @member {String} type
 */
InboundMessage.prototype['type'] = undefined;

/**
 * The hex encoded User Data Header, if type is binary
 * @member {String} udh
 */
InboundMessage.prototype['udh'] = undefined;






export default InboundMessage;

