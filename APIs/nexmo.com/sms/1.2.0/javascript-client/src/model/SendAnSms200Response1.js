/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorMessage from './ErrorMessage';
import ErrorXml from './ErrorXml';
import SMSXml from './SMSXml';

/**
 * The SendAnSms200Response1 model module.
 * @module model/SendAnSms200Response1
 * @version 1.2.0
 */
class SendAnSms200Response1 {
    /**
     * Constructs a new <code>SendAnSms200Response1</code>.
     * @alias module:model/SendAnSms200Response1
     * @param {(module:model/ErrorXml|module:model/SMSXml)} instance The actual instance to initialize SendAnSms200Response1.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SMSXml") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SMSXml.validateJSON(instance); // throw an exception if no match
                // create SMSXml from JS object
                this.actualInstance = SMSXml.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SMSXml
            errorMessages.push("Failed to construct SMSXml: " + err)
        }

        try {
            if (typeof instance === "ErrorXml") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorXml.validateJSON(instance); // throw an exception if no match
                // create ErrorXml from JS object
                this.actualInstance = ErrorXml.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorXml
            errorMessages.push("Failed to construct ErrorXml: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SendAnSms200Response1` with oneOf schemas ErrorXml, SMSXml. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SendAnSms200Response1` with oneOf schemas ErrorXml, SMSXml. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SendAnSms200Response1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendAnSms200Response1} obj Optional instance to populate.
     * @return {module:model/SendAnSms200Response1} The populated <code>SendAnSms200Response1</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SendAnSms200Response1(data);
    }

    /**
     * Gets the actual instance, which can be <code>ErrorXml</code>, <code>SMSXml</code>.
     * @return {(module:model/ErrorXml|module:model/SMSXml)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ErrorXml</code>, <code>SMSXml</code>.
     * @param {(module:model/ErrorXml|module:model/SMSXml)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SendAnSms200Response1.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SendAnSms200Response1 from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SendAnSms200Response1} An instance of SendAnSms200Response1.
     */
    static fromJSON = function(json_string){
        return SendAnSms200Response1.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Array.<module:model/ErrorMessage>} messages
 */
SendAnSms200Response1.prototype['messages'] = undefined;


SendAnSms200Response1.OneOf = ["ErrorXml", "SMSXml"];

export default SendAnSms200Response1;

