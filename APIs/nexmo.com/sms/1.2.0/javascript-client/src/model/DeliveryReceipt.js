/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeliveryReceipt model module.
 * @module model/DeliveryReceipt
 * @version 1.2.0
 */
class DeliveryReceipt {
    /**
     * Constructs a new <code>DeliveryReceipt</code>.
     * @alias module:model/DeliveryReceipt
     */
    constructor() { 
        
        DeliveryReceipt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeliveryReceipt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryReceipt} obj Optional instance to populate.
     * @return {module:model/DeliveryReceipt} The populated <code>DeliveryReceipt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryReceipt();

            if (data.hasOwnProperty('api-key')) {
                obj['api-key'] = ApiClient.convertToType(data['api-key'], 'String');
            }
            if (data.hasOwnProperty('client-ref')) {
                obj['client-ref'] = ApiClient.convertToType(data['client-ref'], 'String');
            }
            if (data.hasOwnProperty('err-code')) {
                obj['err-code'] = ApiClient.convertToType(data['err-code'], 'String');
            }
            if (data.hasOwnProperty('message-timestamp')) {
                obj['message-timestamp'] = ApiClient.convertToType(data['message-timestamp'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('msisdn')) {
                obj['msisdn'] = ApiClient.convertToType(data['msisdn'], 'String');
            }
            if (data.hasOwnProperty('network-code')) {
                obj['network-code'] = ApiClient.convertToType(data['network-code'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('scts')) {
                obj['scts'] = ApiClient.convertToType(data['scts'], 'String');
            }
            if (data.hasOwnProperty('sig')) {
                obj['sig'] = ApiClient.convertToType(data['sig'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryReceipt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryReceipt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['api-key'] && !(typeof data['api-key'] === 'string' || data['api-key'] instanceof String)) {
            throw new Error("Expected the field `api-key` to be a primitive type in the JSON string but got " + data['api-key']);
        }
        // ensure the json data is a string
        if (data['client-ref'] && !(typeof data['client-ref'] === 'string' || data['client-ref'] instanceof String)) {
            throw new Error("Expected the field `client-ref` to be a primitive type in the JSON string but got " + data['client-ref']);
        }
        // ensure the json data is a string
        if (data['err-code'] && !(typeof data['err-code'] === 'string' || data['err-code'] instanceof String)) {
            throw new Error("Expected the field `err-code` to be a primitive type in the JSON string but got " + data['err-code']);
        }
        // ensure the json data is a string
        if (data['message-timestamp'] && !(typeof data['message-timestamp'] === 'string' || data['message-timestamp'] instanceof String)) {
            throw new Error("Expected the field `message-timestamp` to be a primitive type in the JSON string but got " + data['message-timestamp']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['msisdn'] && !(typeof data['msisdn'] === 'string' || data['msisdn'] instanceof String)) {
            throw new Error("Expected the field `msisdn` to be a primitive type in the JSON string but got " + data['msisdn']);
        }
        // ensure the json data is a string
        if (data['network-code'] && !(typeof data['network-code'] === 'string' || data['network-code'] instanceof String)) {
            throw new Error("Expected the field `network-code` to be a primitive type in the JSON string but got " + data['network-code']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['scts'] && !(typeof data['scts'] === 'string' || data['scts'] instanceof String)) {
            throw new Error("Expected the field `scts` to be a primitive type in the JSON string but got " + data['scts']);
        }
        // ensure the json data is a string
        if (data['sig'] && !(typeof data['sig'] === 'string' || data['sig'] instanceof String)) {
            throw new Error("Expected the field `sig` to be a primitive type in the JSON string but got " + data['sig']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * The API key that sent the SMS. This is useful when multiple accounts are sending webhooks to the same endpoint.
 * @member {String} api-key
 */
DeliveryReceipt.prototype['api-key'] = undefined;

/**
 * If the `client-ref` is set when the SMS is sent, it will be included in the delivery receipt
 * @member {String} client-ref
 */
DeliveryReceipt.prototype['client-ref'] = undefined;

/**
 * The status of the request. Will be a non `0` value if there has been an error, or if the status is unknown. See the [Delivery Receipt documentation](/messaging/sms/guides/delivery-receipts#dlr-error-codes) for more details
 * @member {String} err-code
 */
DeliveryReceipt.prototype['err-code'] = undefined;

/**
 * The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
 * @member {String} message-timestamp
 */
DeliveryReceipt.prototype['message-timestamp'] = undefined;

/**
 * The Vonage ID for this message.
 * @member {String} messageId
 */
DeliveryReceipt.prototype['messageId'] = undefined;

/**
 * The number the message was sent to. Numbers are specified in E.164 format.
 * @member {String} msisdn
 */
DeliveryReceipt.prototype['msisdn'] = undefined;

/**
 * The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier this phone number is registered with.
 * @member {String} network-code
 */
DeliveryReceipt.prototype['network-code'] = undefined;

/**
 * A random string to be used when calculating the signature. _Only included if you have signatures enabled_
 * @member {String} nonce
 */
DeliveryReceipt.prototype['nonce'] = undefined;

/**
 * The cost of the message
 * @member {String} price
 */
DeliveryReceipt.prototype['price'] = undefined;

/**
 * When the DLR was received from the carrier in the following format `YYMMDDHHMM`. For example, `2001011400` is at `2020-01-01 14:00`
 * @member {String} scts
 */
DeliveryReceipt.prototype['scts'] = undefined;

/**
 * The signature to enable verification of the source of this webhook. Please see the [developer documentation for validating signatures](/concepts/guides/signing-messages) for more information, or use one of our published SDKs. _Only included if you have signatures enabled_
 * @member {String} sig
 */
DeliveryReceipt.prototype['sig'] = undefined;

/**
 * A code that explains where the message is in the delivery process.
 * @member {String} status
 */
DeliveryReceipt.prototype['status'] = undefined;

/**
 * A timestamp in Unix (seconds since the epoch) format. _Only included if you have signatures enabled_
 * @member {String} timestamp
 */
DeliveryReceipt.prototype['timestamp'] = undefined;

/**
 * The SenderID you set in `from` in your request.
 * @member {String} to
 */
DeliveryReceipt.prototype['to'] = undefined;






export default DeliveryReceipt;

