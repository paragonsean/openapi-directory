/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import ErrorMessage from './ErrorMessage';
import SMS from './SMS';

/**
 * The SendAnSms200Response model module.
 * @module model/SendAnSms200Response
 * @version 1.2.0
 */
class SendAnSms200Response {
    /**
     * Constructs a new <code>SendAnSms200Response</code>.
     * @alias module:model/SendAnSms200Response
     * @param {(module:model/Error|module:model/SMS)} instance The actual instance to initialize SendAnSms200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SMS") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SMS.validateJSON(instance); // throw an exception if no match
                // create SMS from JS object
                this.actualInstance = SMS.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SMS
            errorMessages.push("Failed to construct SMS: " + err)
        }

        try {
            if (typeof instance === "Error") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Error.validateJSON(instance); // throw an exception if no match
                // create Error from JS object
                this.actualInstance = Error.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Error
            errorMessages.push("Failed to construct Error: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SendAnSms200Response` with oneOf schemas Error, SMS. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SendAnSms200Response` with oneOf schemas Error, SMS. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SendAnSms200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendAnSms200Response} obj Optional instance to populate.
     * @return {module:model/SendAnSms200Response} The populated <code>SendAnSms200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SendAnSms200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Error</code>, <code>SMS</code>.
     * @return {(module:model/Error|module:model/SMS)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Error</code>, <code>SMS</code>.
     * @param {(module:model/Error|module:model/SMS)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SendAnSms200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SendAnSms200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SendAnSms200Response} An instance of SendAnSms200Response.
     */
    static fromJSON = function(json_string){
        return SendAnSms200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The amount of messages in the request
 * @member {String} message-count
 */
SendAnSms200Response.prototype['message-count'] = undefined;

/**
 * @member {Array.<module:model/ErrorMessage>} messages
 */
SendAnSms200Response.prototype['messages'] = undefined;


SendAnSms200Response.OneOf = ["Error", "SMS"];

export default SendAnSms200Response;

