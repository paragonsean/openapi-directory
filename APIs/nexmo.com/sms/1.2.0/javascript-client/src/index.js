/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DeliveryReceipt from './model/DeliveryReceipt';
import Error from './model/Error';
import ErrorMessage from './model/ErrorMessage';
import ErrorXml from './model/ErrorXml';
import InboundMessage from './model/InboundMessage';
import Message from './model/Message';
import SMS from './model/SMS';
import SMSXml from './model/SMSXml';
import SendAnSms200Response from './model/SendAnSms200Response';
import SendAnSms200Response1 from './model/SendAnSms200Response1';
import DefaultApi from './api/DefaultApi';


/**
* With the SMS API you can send SMS from your account and lookup messages both messages that you&#39;ve sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at &lt;https://developer.nexmo.com/messaging/sms/overview&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SmsApi = require('index'); // See note below*.
* var xxxSvc = new SmsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SmsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SmsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SmsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DeliveryReceipt model constructor.
     * @property {module:model/DeliveryReceipt}
     */
    DeliveryReceipt,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorMessage model constructor.
     * @property {module:model/ErrorMessage}
     */
    ErrorMessage,

    /**
     * The ErrorXml model constructor.
     * @property {module:model/ErrorXml}
     */
    ErrorXml,

    /**
     * The InboundMessage model constructor.
     * @property {module:model/InboundMessage}
     */
    InboundMessage,

    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message,

    /**
     * The SMS model constructor.
     * @property {module:model/SMS}
     */
    SMS,

    /**
     * The SMSXml model constructor.
     * @property {module:model/SMSXml}
     */
    SMSXml,

    /**
     * The SendAnSms200Response model constructor.
     * @property {module:model/SendAnSms200Response}
     */
    SendAnSms200Response,

    /**
     * The SendAnSms200Response1 model constructor.
     * @property {module:model/SendAnSms200Response1}
     */
    SendAnSms200Response1,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
