/**
 * SMS API
 * With the SMS API you can send SMS from your account and lookup messages both messages that you've sent as well as messages sent to your virtual numbers. Numbers are specified in E.164 format. More SMS API documentation is at <https://developer.nexmo.com/messaging/sms/overview>
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmsApi);
  }
}(this, function(expect, SmsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmsApi.InboundMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InboundMessage', function() {
    it('should create an instance of InboundMessage', function() {
      // uncomment below and update the code to test InboundMessage
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be.a(SmsApi.InboundMessage);
    });

    it('should have the property apiKey (base name: "api-key")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property concat (base name: "concat")', function() {
      // uncomment below and update the code to test the property concat
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property concatPart (base name: "concat-part")', function() {
      // uncomment below and update the code to test the property concatPart
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property concatRef (base name: "concat-ref")', function() {
      // uncomment below and update the code to test the property concatRef
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property concatTotal (base name: "concat-total")', function() {
      // uncomment below and update the code to test the property concatTotal
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property keyword (base name: "keyword")', function() {
      // uncomment below and update the code to test the property keyword
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property messageTimestamp (base name: "message-timestamp")', function() {
      // uncomment below and update the code to test the property messageTimestamp
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property messageId (base name: "messageId")', function() {
      // uncomment below and update the code to test the property messageId
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property msisdn (base name: "msisdn")', function() {
      // uncomment below and update the code to test the property msisdn
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property nonce (base name: "nonce")', function() {
      // uncomment below and update the code to test the property nonce
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

    it('should have the property udh (base name: "udh")', function() {
      // uncomment below and update the code to test the property udh
      //var instance = new SmsApi.InboundMessage();
      //expect(instance).to.be();
    });

  });

}));
