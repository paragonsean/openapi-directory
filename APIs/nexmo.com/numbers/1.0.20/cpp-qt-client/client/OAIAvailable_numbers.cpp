/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailable_numbers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailable_numbers::OAIAvailable_numbers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailable_numbers::OAIAvailable_numbers() {
    this->initializeModel();
}

OAIAvailable_numbers::~OAIAvailable_numbers() {}

void OAIAvailable_numbers::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;
}

void OAIAvailable_numbers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailable_numbers::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;
}

QString OAIAvailable_numbers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailable_numbers::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_numbers.size() > 0) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    return obj;
}

qint32 OAIAvailable_numbers::getCount() const {
    return m_count;
}
void OAIAvailable_numbers::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAvailable_numbers::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAvailable_numbers::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIAvailablenumber> OAIAvailable_numbers::getNumbers() const {
    return m_numbers;
}
void OAIAvailable_numbers::setNumbers(const QList<OAIAvailablenumber> &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAIAvailable_numbers::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAIAvailable_numbers::is_numbers_Valid() const{
    return m_numbers_isValid;
}

bool OAIAvailable_numbers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailable_numbers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
