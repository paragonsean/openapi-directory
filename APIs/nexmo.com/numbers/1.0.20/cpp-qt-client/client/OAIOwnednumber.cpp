/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwnednumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwnednumber::OAIOwnednumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwnednumber::OAIOwnednumber() {
    this->initializeModel();
}

OAIOwnednumber::~OAIOwnednumber() {}

void OAIOwnednumber::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_messages_callback_type_isSet = false;
    m_messages_callback_type_isValid = false;

    m_messages_callback_value_isSet = false;
    m_messages_callback_value_isValid = false;

    m_mo_http_url_isSet = false;
    m_mo_http_url_isValid = false;

    m_msisdn_isSet = false;
    m_msisdn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_voice_callback_type_isSet = false;
    m_voice_callback_type_isValid = false;

    m_voice_callback_value_isSet = false;
    m_voice_callback_value_isValid = false;
}

void OAIOwnednumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwnednumber::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_messages_callback_type_isValid = ::OpenAPI::fromJsonValue(m_messages_callback_type, json[QString("messagesCallbackType")]);
    m_messages_callback_type_isSet = !json[QString("messagesCallbackType")].isNull() && m_messages_callback_type_isValid;

    m_messages_callback_value_isValid = ::OpenAPI::fromJsonValue(m_messages_callback_value, json[QString("messagesCallbackValue")]);
    m_messages_callback_value_isSet = !json[QString("messagesCallbackValue")].isNull() && m_messages_callback_value_isValid;

    m_mo_http_url_isValid = ::OpenAPI::fromJsonValue(m_mo_http_url, json[QString("moHttpUrl")]);
    m_mo_http_url_isSet = !json[QString("moHttpUrl")].isNull() && m_mo_http_url_isValid;

    m_msisdn_isValid = ::OpenAPI::fromJsonValue(m_msisdn, json[QString("msisdn")]);
    m_msisdn_isSet = !json[QString("msisdn")].isNull() && m_msisdn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_voice_callback_type_isValid = ::OpenAPI::fromJsonValue(m_voice_callback_type, json[QString("voiceCallbackType")]);
    m_voice_callback_type_isSet = !json[QString("voiceCallbackType")].isNull() && m_voice_callback_type_isValid;

    m_voice_callback_value_isValid = ::OpenAPI::fromJsonValue(m_voice_callback_value, json[QString("voiceCallbackValue")]);
    m_voice_callback_value_isSet = !json[QString("voiceCallbackValue")].isNull() && m_voice_callback_value_isValid;
}

QString OAIOwnednumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwnednumber::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_messages_callback_type_isSet) {
        obj.insert(QString("messagesCallbackType"), ::OpenAPI::toJsonValue(m_messages_callback_type));
    }
    if (m_messages_callback_value_isSet) {
        obj.insert(QString("messagesCallbackValue"), ::OpenAPI::toJsonValue(m_messages_callback_value));
    }
    if (m_mo_http_url_isSet) {
        obj.insert(QString("moHttpUrl"), ::OpenAPI::toJsonValue(m_mo_http_url));
    }
    if (m_msisdn_isSet) {
        obj.insert(QString("msisdn"), ::OpenAPI::toJsonValue(m_msisdn));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_voice_callback_type_isSet) {
        obj.insert(QString("voiceCallbackType"), ::OpenAPI::toJsonValue(m_voice_callback_type));
    }
    if (m_voice_callback_value_isSet) {
        obj.insert(QString("voiceCallbackValue"), ::OpenAPI::toJsonValue(m_voice_callback_value));
    }
    return obj;
}

QString OAIOwnednumber::getCountry() const {
    return m_country;
}
void OAIOwnednumber::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIOwnednumber::is_country_Set() const{
    return m_country_isSet;
}

bool OAIOwnednumber::is_country_Valid() const{
    return m_country_isValid;
}

QList<QString> OAIOwnednumber::getFeatures() const {
    return m_features;
}
void OAIOwnednumber::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIOwnednumber::is_features_Set() const{
    return m_features_isSet;
}

bool OAIOwnednumber::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIOwnednumber::getMessagesCallbackType() const {
    return m_messages_callback_type;
}
void OAIOwnednumber::setMessagesCallbackType(const QString &messages_callback_type) {
    m_messages_callback_type = messages_callback_type;
    m_messages_callback_type_isSet = true;
}

bool OAIOwnednumber::is_messages_callback_type_Set() const{
    return m_messages_callback_type_isSet;
}

bool OAIOwnednumber::is_messages_callback_type_Valid() const{
    return m_messages_callback_type_isValid;
}

QString OAIOwnednumber::getMessagesCallbackValue() const {
    return m_messages_callback_value;
}
void OAIOwnednumber::setMessagesCallbackValue(const QString &messages_callback_value) {
    m_messages_callback_value = messages_callback_value;
    m_messages_callback_value_isSet = true;
}

bool OAIOwnednumber::is_messages_callback_value_Set() const{
    return m_messages_callback_value_isSet;
}

bool OAIOwnednumber::is_messages_callback_value_Valid() const{
    return m_messages_callback_value_isValid;
}

QString OAIOwnednumber::getMoHttpUrl() const {
    return m_mo_http_url;
}
void OAIOwnednumber::setMoHttpUrl(const QString &mo_http_url) {
    m_mo_http_url = mo_http_url;
    m_mo_http_url_isSet = true;
}

bool OAIOwnednumber::is_mo_http_url_Set() const{
    return m_mo_http_url_isSet;
}

bool OAIOwnednumber::is_mo_http_url_Valid() const{
    return m_mo_http_url_isValid;
}

QString OAIOwnednumber::getMsisdn() const {
    return m_msisdn;
}
void OAIOwnednumber::setMsisdn(const QString &msisdn) {
    m_msisdn = msisdn;
    m_msisdn_isSet = true;
}

bool OAIOwnednumber::is_msisdn_Set() const{
    return m_msisdn_isSet;
}

bool OAIOwnednumber::is_msisdn_Valid() const{
    return m_msisdn_isValid;
}

QString OAIOwnednumber::getType() const {
    return m_type;
}
void OAIOwnednumber::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOwnednumber::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOwnednumber::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOwnednumber::getVoiceCallbackType() const {
    return m_voice_callback_type;
}
void OAIOwnednumber::setVoiceCallbackType(const QString &voice_callback_type) {
    m_voice_callback_type = voice_callback_type;
    m_voice_callback_type_isSet = true;
}

bool OAIOwnednumber::is_voice_callback_type_Set() const{
    return m_voice_callback_type_isSet;
}

bool OAIOwnednumber::is_voice_callback_type_Valid() const{
    return m_voice_callback_type_isValid;
}

QString OAIOwnednumber::getVoiceCallbackValue() const {
    return m_voice_callback_value;
}
void OAIOwnednumber::setVoiceCallbackValue(const QString &voice_callback_value) {
    m_voice_callback_value = voice_callback_value;
    m_voice_callback_value_isSet = true;
}

bool OAIOwnednumber::is_voice_callback_value_Set() const{
    return m_voice_callback_value_isSet;
}

bool OAIOwnednumber::is_voice_callback_value_Valid() const{
    return m_voice_callback_value_isValid;
}

bool OAIOwnednumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_callback_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_callback_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mo_http_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_callback_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_callback_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwnednumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
