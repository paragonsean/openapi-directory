/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse420.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse420::OAIResponse420(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse420::OAIResponse420() {
    this->initializeModel();
}

OAIResponse420::~OAIResponse420() {}

void OAIResponse420::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_code_label_isSet = false;
    m_error_code_label_isValid = false;
}

void OAIResponse420::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse420::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error-code")]);
    m_error_code_isSet = !json[QString("error-code")].isNull() && m_error_code_isValid;

    m_error_code_label_isValid = ::OpenAPI::fromJsonValue(m_error_code_label, json[QString("error-code-label")]);
    m_error_code_label_isSet = !json[QString("error-code-label")].isNull() && m_error_code_label_isValid;
}

QString OAIResponse420::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse420::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("error-code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_code_label_isSet) {
        obj.insert(QString("error-code-label"), ::OpenAPI::toJsonValue(m_error_code_label));
    }
    return obj;
}

QString OAIResponse420::getErrorCode() const {
    return m_error_code;
}
void OAIResponse420::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIResponse420::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIResponse420::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIResponse420::getErrorCodeLabel() const {
    return m_error_code_label;
}
void OAIResponse420::setErrorCodeLabel(const QString &error_code_label) {
    m_error_code_label = error_code_label;
    m_error_code_label_isSet = true;
}

bool OAIResponse420::is_error_code_label_Set() const{
    return m_error_code_label_isSet;
}

bool OAIResponse420::is_error_code_label_Valid() const{
    return m_error_code_label_isValid;
}

bool OAIResponse420::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse420::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
