/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount_unauthorized.h"
#include "OAIAvailable_numbers.h"
#include "OAIInbound_numbers.h"
#include "OAIResponse.h"
#include "OAIResponse420.h"
#include "OAIUnauthorized.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country QString [required]
    * @param[in]  msisdn QString [required]
    * @param[in]  target_api_key QString [optional]
    */
    virtual void buyANumber(const QString &country, const QString &msisdn, const ::OpenAPI::OptionalParam<QString> &target_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  msisdn QString [required]
    * @param[in]  target_api_key QString [optional]
    */
    virtual void cancelANumber(const QString &country, const QString &msisdn, const ::OpenAPI::OptionalParam<QString> &target_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  pattern QString [optional]
    * @param[in]  search_pattern qint32 [optional]
    * @param[in]  features QString [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  index qint32 [optional]
    */
    virtual void getAvailableNumbers(const QString &country, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pattern = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &search_pattern = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &features = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_id QString [optional]
    * @param[in]  has_application bool [optional]
    * @param[in]  country QString [optional]
    * @param[in]  pattern QString [optional]
    * @param[in]  search_pattern qint32 [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  index qint32 [optional]
    */
    virtual void getOwnedNumbers(const ::OpenAPI::OptionalParam<QString> &application_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_application = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pattern = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &search_pattern = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  msisdn QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  messages_callback_type QString [optional]
    * @param[in]  messages_callback_value QString [optional]
    * @param[in]  mo_http_url QString [optional]
    * @param[in]  mo_smpp_sys_type QString [optional]
    * @param[in]  voice_callback_type QString [optional]
    * @param[in]  voice_callback_value QString [optional]
    * @param[in]  voice_status_callback QString [optional]
    */
    virtual void updateANumber(const QString &country, const QString &msisdn, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messages_callback_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messages_callback_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mo_http_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mo_smpp_sys_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_callback_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_callback_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_status_callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void buyANumberCallback(OAIHttpRequestWorker *worker);
    void cancelANumberCallback(OAIHttpRequestWorker *worker);
    void getAvailableNumbersCallback(OAIHttpRequestWorker *worker);
    void getOwnedNumbersCallback(OAIHttpRequestWorker *worker);
    void updateANumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void buyANumberSignal(OAIResponse summary);
    void cancelANumberSignal(OAIResponse summary);
    void getAvailableNumbersSignal(OAIAvailable_numbers summary);
    void getOwnedNumbersSignal(OAIInbound_numbers summary);
    void updateANumberSignal(OAIResponse summary);


    void buyANumberSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void cancelANumberSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getAvailableNumbersSignalFull(OAIHttpRequestWorker *worker, OAIAvailable_numbers summary);
    void getOwnedNumbersSignalFull(OAIHttpRequestWorker *worker, OAIInbound_numbers summary);
    void updateANumberSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);

    Q_DECL_DEPRECATED_X("Use buyANumberSignalError() instead")
    void buyANumberSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buyANumberSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelANumberSignalError() instead")
    void cancelANumberSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelANumberSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableNumbersSignalError() instead")
    void getAvailableNumbersSignalE(OAIAvailable_numbers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableNumbersSignalError(OAIAvailable_numbers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnedNumbersSignalError() instead")
    void getOwnedNumbersSignalE(OAIInbound_numbers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnedNumbersSignalError(OAIInbound_numbers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateANumberSignalError() instead")
    void updateANumberSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateANumberSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use buyANumberSignalErrorFull() instead")
    void buyANumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buyANumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelANumberSignalErrorFull() instead")
    void cancelANumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelANumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableNumbersSignalErrorFull() instead")
    void getAvailableNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnedNumbersSignalErrorFull() instead")
    void getOwnedNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnedNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateANumberSignalErrorFull() instead")
    void updateANumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateANumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
