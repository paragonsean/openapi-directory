# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Availablenumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: str=None, country: str=None, features: List[str]=None, msisdn: str=None, type: str=None):
        """Availablenumber - a model defined in OpenAPI

        :param cost: The cost of this Availablenumber.
        :param country: The country of this Availablenumber.
        :param features: The features of this Availablenumber.
        :param msisdn: The msisdn of this Availablenumber.
        :param type: The type of this Availablenumber.
        """
        self.openapi_types = {
            'cost': str,
            'country': str,
            'features': List[str],
            'msisdn': str,
            'type': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'country': 'country',
            'features': 'features',
            'msisdn': 'msisdn',
            'type': 'type'
        }

        self._cost = cost
        self._country = country
        self._features = features
        self._msisdn = msisdn
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Availablenumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availablenumber of this Availablenumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this Availablenumber.

        The monthly rental cost for this number, in Euros

        :return: The cost of this Availablenumber.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Availablenumber.

        The monthly rental cost for this number, in Euros

        :param cost: The cost of this Availablenumber.
        :type cost: str
        """

        self._cost = cost

    @property
    def country(self):
        """Gets the country of this Availablenumber.

        The two character country code in ISO 3166-1 alpha-2 format

        :return: The country of this Availablenumber.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Availablenumber.

        The two character country code in ISO 3166-1 alpha-2 format

        :param country: The country of this Availablenumber.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def features(self):
        """Gets the features of this Availablenumber.

        The capabilities of the number: `SMS` or `VOICE` or `SMS,VOICE` or `SMS,MMS` or `VOICE,MMS` or `SMS,MMS,VOICE`

        :return: The features of this Availablenumber.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Availablenumber.

        The capabilities of the number: `SMS` or `VOICE` or `SMS,VOICE` or `SMS,MMS` or `VOICE,MMS` or `SMS,MMS,VOICE`

        :param features: The features of this Availablenumber.
        :type features: List[str]
        """

        self._features = features

    @property
    def msisdn(self):
        """Gets the msisdn of this Availablenumber.

        An available inbound virtual number.

        :return: The msisdn of this Availablenumber.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this Availablenumber.

        An available inbound virtual number.

        :param msisdn: The msisdn of this Availablenumber.
        :type msisdn: str
        """

        self._msisdn = msisdn

    @property
    def type(self):
        """Gets the type of this Availablenumber.

        The type of number: `landline`, `landline-toll-free` or `mobile-lvn`

        :return: The type of this Availablenumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Availablenumber.

        The type of number: `landline`, `landline-toll-free` or `mobile-lvn`

        :param type: The type of this Availablenumber.
        :type type: str
        """

        self._type = type
