/*
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUnauthorized
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:28.331376-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUnauthorized {
  public static final String SERIALIZED_NAME_ERROR_CODE = "error-code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_CODE_LABEL = "error-code-label";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE_LABEL)
  private String errorCodeLabel;

  public AccountUnauthorized() {
  }

  public AccountUnauthorized errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The status code of the response. &#x60;200&#x60; indicates a successful request.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public AccountUnauthorized errorCodeLabel(String errorCodeLabel) {
    this.errorCodeLabel = errorCodeLabel;
    return this;
  }

  /**
   * The status code description
   * @return errorCodeLabel
   */
  @javax.annotation.Nullable
  public String getErrorCodeLabel() {
    return errorCodeLabel;
  }

  public void setErrorCodeLabel(String errorCodeLabel) {
    this.errorCodeLabel = errorCodeLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUnauthorized accountUnauthorized = (AccountUnauthorized) o;
    return Objects.equals(this.errorCode, accountUnauthorized.errorCode) &&
        Objects.equals(this.errorCodeLabel, accountUnauthorized.errorCodeLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorCodeLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUnauthorized {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorCodeLabel: ").append(toIndentedString(errorCodeLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error-code");
    openapiFields.add("error-code-label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUnauthorized
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUnauthorized.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUnauthorized is not found in the empty JSON string", AccountUnauthorized.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUnauthorized.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUnauthorized` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error-code") != null && !jsonObj.get("error-code").isJsonNull()) && !jsonObj.get("error-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error-code").toString()));
      }
      if ((jsonObj.get("error-code-label") != null && !jsonObj.get("error-code-label").isJsonNull()) && !jsonObj.get("error-code-label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error-code-label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error-code-label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUnauthorized.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUnauthorized' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUnauthorized> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUnauthorized.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUnauthorized>() {
           @Override
           public void write(JsonWriter out, AccountUnauthorized value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUnauthorized read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUnauthorized given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUnauthorized
   * @throws IOException if the JSON string is invalid with respect to AccountUnauthorized
   */
  public static AccountUnauthorized fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUnauthorized.class);
  }

  /**
   * Convert an instance of AccountUnauthorized to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

