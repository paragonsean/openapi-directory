/*
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountUnauthorized;
import org.openapitools.client.model.AvailableNumbers;
import org.openapitools.client.model.InboundNumbers;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.Response420;
import org.openapitools.client.model.Unauthorized;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buyANumber
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Action failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buyANumberCall(String country, String msisdn, String targetApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number/buy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (msisdn != null) {
            localVarFormParams.put("msisdn", msisdn);
        }

        if (targetApiKey != null) {
            localVarFormParams.put("target_api_key", targetApiKey);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buyANumberValidateBeforeCall(String country, String msisdn, String targetApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling buyANumber(Async)");
        }

        // verify the required parameter 'msisdn' is set
        if (msisdn == null) {
            throw new ApiException("Missing the required parameter 'msisdn' when calling buyANumber(Async)");
        }

        return buyANumberCall(country, msisdn, targetApiKey, _callback);

    }

    /**
     * Buy a number
     * Request to purchase a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Action failed </td><td>  -  </td></tr>
     </table>
     */
    public Response buyANumber(String country, String msisdn, String targetApiKey) throws ApiException {
        ApiResponse<Response> localVarResp = buyANumberWithHttpInfo(country, msisdn, targetApiKey);
        return localVarResp.getData();
    }

    /**
     * Buy a number
     * Request to purchase a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Action failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> buyANumberWithHttpInfo(String country, String msisdn, String targetApiKey) throws ApiException {
        okhttp3.Call localVarCall = buyANumberValidateBeforeCall(country, msisdn, targetApiKey, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Buy a number (asynchronously)
     * Request to purchase a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Action failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buyANumberAsync(String country, String msisdn, String targetApiKey, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buyANumberValidateBeforeCall(country, msisdn, targetApiKey, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelANumber
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelANumberCall(String country, String msisdn, String targetApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (msisdn != null) {
            localVarFormParams.put("msisdn", msisdn);
        }

        if (targetApiKey != null) {
            localVarFormParams.put("target_api_key", targetApiKey);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelANumberValidateBeforeCall(String country, String msisdn, String targetApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling cancelANumber(Async)");
        }

        // verify the required parameter 'msisdn' is set
        if (msisdn == null) {
            throw new ApiException("Missing the required parameter 'msisdn' when calling cancelANumber(Async)");
        }

        return cancelANumberCall(country, msisdn, targetApiKey, _callback);

    }

    /**
     * Cancel a number
     * Cancel your subscription for a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Response cancelANumber(String country, String msisdn, String targetApiKey) throws ApiException {
        ApiResponse<Response> localVarResp = cancelANumberWithHttpInfo(country, msisdn, targetApiKey);
        return localVarResp.getData();
    }

    /**
     * Cancel a number
     * Cancel your subscription for a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> cancelANumberWithHttpInfo(String country, String msisdn, String targetApiKey) throws ApiException {
        okhttp3.Call localVarCall = cancelANumberValidateBeforeCall(country, msisdn, targetApiKey, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a number (asynchronously)
     * Cancel your subscription for a specific inbound number.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param targetApiKey If you’d like to perform an action on a subaccount, provide the &#x60;api_key&#x60; of that account here. If you’d like to perform an action on your own account, you do not need to provide this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelANumberAsync(String country, String msisdn, String targetApiKey, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelANumberValidateBeforeCall(country, msisdn, targetApiKey, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableNumbers
     * @param country The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
     * @param type Set this parameter to filter the type of number, such as mobile or landline (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param features Available features are &#x60;SMS&#x60;, &#x60;VOICE&#x60; and &#x60;MMS&#x60;. To look for numbers that support multiple features, use a comma-separated value: &#x60;SMS,MMS,VOICE&#x60;. (optional)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableNumbersCall(String country, String type, String pattern, Integer searchPattern, String features, Integer size, Integer index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pattern", pattern));
        }

        if (searchPattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_pattern", searchPattern));
        }

        if (features != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("features", features));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableNumbersValidateBeforeCall(String country, String type, String pattern, Integer searchPattern, String features, Integer size, Integer index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getAvailableNumbers(Async)");
        }

        return getAvailableNumbersCall(country, type, pattern, searchPattern, features, size, index, _callback);

    }

    /**
     * Search available numbers
     * Retrieve inbound numbers that are available for the specified country.
     * @param country The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
     * @param type Set this parameter to filter the type of number, such as mobile or landline (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param features Available features are &#x60;SMS&#x60;, &#x60;VOICE&#x60; and &#x60;MMS&#x60;. To look for numbers that support multiple features, use a comma-separated value: &#x60;SMS,MMS,VOICE&#x60;. (optional)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @return AvailableNumbers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public AvailableNumbers getAvailableNumbers(String country, String type, String pattern, Integer searchPattern, String features, Integer size, Integer index) throws ApiException {
        ApiResponse<AvailableNumbers> localVarResp = getAvailableNumbersWithHttpInfo(country, type, pattern, searchPattern, features, size, index);
        return localVarResp.getData();
    }

    /**
     * Search available numbers
     * Retrieve inbound numbers that are available for the specified country.
     * @param country The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
     * @param type Set this parameter to filter the type of number, such as mobile or landline (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param features Available features are &#x60;SMS&#x60;, &#x60;VOICE&#x60; and &#x60;MMS&#x60;. To look for numbers that support multiple features, use a comma-separated value: &#x60;SMS,MMS,VOICE&#x60;. (optional)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @return ApiResponse&lt;AvailableNumbers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailableNumbers> getAvailableNumbersWithHttpInfo(String country, String type, String pattern, Integer searchPattern, String features, Integer size, Integer index) throws ApiException {
        okhttp3.Call localVarCall = getAvailableNumbersValidateBeforeCall(country, type, pattern, searchPattern, features, size, index, null);
        Type localVarReturnType = new TypeToken<AvailableNumbers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search available numbers (asynchronously)
     * Retrieve inbound numbers that are available for the specified country.
     * @param country The two character country code to filter on (in ISO 3166-1 alpha-2 format) (required)
     * @param type Set this parameter to filter the type of number, such as mobile or landline (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param features Available features are &#x60;SMS&#x60;, &#x60;VOICE&#x60; and &#x60;MMS&#x60;. To look for numbers that support multiple features, use a comma-separated value: &#x60;SMS,MMS,VOICE&#x60;. (optional)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableNumbersAsync(String country, String type, String pattern, Integer searchPattern, String features, Integer size, Integer index, final ApiCallback<AvailableNumbers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableNumbersValidateBeforeCall(country, type, pattern, searchPattern, features, size, index, _callback);
        Type localVarReturnType = new TypeToken<AvailableNumbers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnedNumbers
     * @param applicationId The Application that you want to return the numbers for. (optional)
     * @param hasApplication Set this optional field to &#x60;true&#x60; to restrict your results to numbers associated with an Application (any Application). Set to &#x60;false&#x60; to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application.  (optional)
     * @param country  (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnedNumbersCall(String applicationId, Boolean hasApplication, String country, String pattern, Integer searchPattern, Integer size, Integer index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application_id", applicationId));
        }

        if (hasApplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_application", hasApplication));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (pattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pattern", pattern));
        }

        if (searchPattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_pattern", searchPattern));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnedNumbersValidateBeforeCall(String applicationId, Boolean hasApplication, String country, String pattern, Integer searchPattern, Integer size, Integer index, final ApiCallback _callback) throws ApiException {
        return getOwnedNumbersCall(applicationId, hasApplication, country, pattern, searchPattern, size, index, _callback);

    }

    /**
     * List the numbers you own
     * Retrieve all the inbound numbers associated with your Vonage account.
     * @param applicationId The Application that you want to return the numbers for. (optional)
     * @param hasApplication Set this optional field to &#x60;true&#x60; to restrict your results to numbers associated with an Application (any Application). Set to &#x60;false&#x60; to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application.  (optional)
     * @param country  (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @return InboundNumbers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public InboundNumbers getOwnedNumbers(String applicationId, Boolean hasApplication, String country, String pattern, Integer searchPattern, Integer size, Integer index) throws ApiException {
        ApiResponse<InboundNumbers> localVarResp = getOwnedNumbersWithHttpInfo(applicationId, hasApplication, country, pattern, searchPattern, size, index);
        return localVarResp.getData();
    }

    /**
     * List the numbers you own
     * Retrieve all the inbound numbers associated with your Vonage account.
     * @param applicationId The Application that you want to return the numbers for. (optional)
     * @param hasApplication Set this optional field to &#x60;true&#x60; to restrict your results to numbers associated with an Application (any Application). Set to &#x60;false&#x60; to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application.  (optional)
     * @param country  (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @return ApiResponse&lt;InboundNumbers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundNumbers> getOwnedNumbersWithHttpInfo(String applicationId, Boolean hasApplication, String country, String pattern, Integer searchPattern, Integer size, Integer index) throws ApiException {
        okhttp3.Call localVarCall = getOwnedNumbersValidateBeforeCall(applicationId, hasApplication, country, pattern, searchPattern, size, index, null);
        Type localVarReturnType = new TypeToken<InboundNumbers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the numbers you own (asynchronously)
     * Retrieve all the inbound numbers associated with your Vonage account.
     * @param applicationId The Application that you want to return the numbers for. (optional)
     * @param hasApplication Set this optional field to &#x60;true&#x60; to restrict your results to numbers associated with an Application (any Application). Set to &#x60;false&#x60; to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application.  (optional)
     * @param country  (optional)
     * @param pattern The number pattern you want to search for. Use in conjunction with &#x60;search_pattern&#x60;. (optional)
     * @param searchPattern The strategy you want to use for matching:   * &#x60;0&#x60; - Search for numbers that start with &#x60;pattern&#x60; (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * &#x60;1&#x60; - Search for numbers that contain &#x60;pattern&#x60; * &#x60;2&#x60; - Search for numbers that end with &#x60;pattern&#x60;  (optional, default to 0)
     * @param size Page size (optional, default to 10)
     * @param index Page index (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnedNumbersAsync(String applicationId, Boolean hasApplication, String country, String pattern, Integer searchPattern, Integer size, Integer index, final ApiCallback<InboundNumbers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnedNumbersValidateBeforeCall(applicationId, hasApplication, country, pattern, searchPattern, size, index, _callback);
        Type localVarReturnType = new TypeToken<InboundNumbers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateANumber
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param appId The Application that will handle inbound traffic to this number. (optional)
     * @param messagesCallbackType &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Messages webhook type (always &#x60;app&#x60;) associated with this number and must be used with the &#x60;messagesCallbackValue&#x60; parameter.  (optional)
     * @param messagesCallbackValue &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Application ID of your Messages application. It must be used with the &#x60;messagesCallbackType&#x60; parameter.  (optional)
     * @param moHttpUrl An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a &#x60;GET&#x60; request to the endpoint and checks that it returns a &#x60;200 OK&#x60; response. Set this parameter&#39;s value to an empty string to remove the webhook. (optional)
     * @param moSmppSysType The associated system type for your SMPP client (optional)
     * @param voiceCallbackType Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the &#x60;voiceCallbackValue&#x60; parameter. If set, &#x60;sip&#x60; or &#x60;tel&#x60; are prioritized over the Voice capability in your Application.  *Note: The &#x60;app&#x60; value is deprecated and will be removed in future.*  (optional)
     * @param voiceCallbackValue A SIP URI or telephone number. Must be used with the &#x60;voiceCallbackType&#x60; parameter. (optional)
     * @param voiceStatusCallback A webhook URI for Vonage to send a request to when a call ends (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateANumberCall(String country, String msisdn, String appId, String messagesCallbackType, String messagesCallbackValue, String moHttpUrl, String moSmppSysType, String voiceCallbackType, String voiceCallbackValue, String voiceStatusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/number/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarFormParams.put("app_id", appId);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (messagesCallbackType != null) {
            localVarFormParams.put("messagesCallbackType", messagesCallbackType);
        }

        if (messagesCallbackValue != null) {
            localVarFormParams.put("messagesCallbackValue", messagesCallbackValue);
        }

        if (moHttpUrl != null) {
            localVarFormParams.put("moHttpUrl", moHttpUrl);
        }

        if (moSmppSysType != null) {
            localVarFormParams.put("moSmppSysType", moSmppSysType);
        }

        if (msisdn != null) {
            localVarFormParams.put("msisdn", msisdn);
        }

        if (voiceCallbackType != null) {
            localVarFormParams.put("voiceCallbackType", voiceCallbackType);
        }

        if (voiceCallbackValue != null) {
            localVarFormParams.put("voiceCallbackValue", voiceCallbackValue);
        }

        if (voiceStatusCallback != null) {
            localVarFormParams.put("voiceStatusCallback", voiceStatusCallback);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateANumberValidateBeforeCall(String country, String msisdn, String appId, String messagesCallbackType, String messagesCallbackValue, String moHttpUrl, String moSmppSysType, String voiceCallbackType, String voiceCallbackValue, String voiceStatusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling updateANumber(Async)");
        }

        // verify the required parameter 'msisdn' is set
        if (msisdn == null) {
            throw new ApiException("Missing the required parameter 'msisdn' when calling updateANumber(Async)");
        }

        return updateANumberCall(country, msisdn, appId, messagesCallbackType, messagesCallbackValue, moHttpUrl, moSmppSysType, voiceCallbackType, voiceCallbackValue, voiceStatusCallback, _callback);

    }

    /**
     * Update a number
     * Change the behaviour of a number that you own.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param appId The Application that will handle inbound traffic to this number. (optional)
     * @param messagesCallbackType &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Messages webhook type (always &#x60;app&#x60;) associated with this number and must be used with the &#x60;messagesCallbackValue&#x60; parameter.  (optional)
     * @param messagesCallbackValue &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Application ID of your Messages application. It must be used with the &#x60;messagesCallbackType&#x60; parameter.  (optional)
     * @param moHttpUrl An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a &#x60;GET&#x60; request to the endpoint and checks that it returns a &#x60;200 OK&#x60; response. Set this parameter&#39;s value to an empty string to remove the webhook. (optional)
     * @param moSmppSysType The associated system type for your SMPP client (optional)
     * @param voiceCallbackType Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the &#x60;voiceCallbackValue&#x60; parameter. If set, &#x60;sip&#x60; or &#x60;tel&#x60; are prioritized over the Voice capability in your Application.  *Note: The &#x60;app&#x60; value is deprecated and will be removed in future.*  (optional)
     * @param voiceCallbackValue A SIP URI or telephone number. Must be used with the &#x60;voiceCallbackType&#x60; parameter. (optional)
     * @param voiceStatusCallback A webhook URI for Vonage to send a request to when a call ends (optional)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Response updateANumber(String country, String msisdn, String appId, String messagesCallbackType, String messagesCallbackValue, String moHttpUrl, String moSmppSysType, String voiceCallbackType, String voiceCallbackValue, String voiceStatusCallback) throws ApiException {
        ApiResponse<Response> localVarResp = updateANumberWithHttpInfo(country, msisdn, appId, messagesCallbackType, messagesCallbackValue, moHttpUrl, moSmppSysType, voiceCallbackType, voiceCallbackValue, voiceStatusCallback);
        return localVarResp.getData();
    }

    /**
     * Update a number
     * Change the behaviour of a number that you own.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param appId The Application that will handle inbound traffic to this number. (optional)
     * @param messagesCallbackType &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Messages webhook type (always &#x60;app&#x60;) associated with this number and must be used with the &#x60;messagesCallbackValue&#x60; parameter.  (optional)
     * @param messagesCallbackValue &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Application ID of your Messages application. It must be used with the &#x60;messagesCallbackType&#x60; parameter.  (optional)
     * @param moHttpUrl An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a &#x60;GET&#x60; request to the endpoint and checks that it returns a &#x60;200 OK&#x60; response. Set this parameter&#39;s value to an empty string to remove the webhook. (optional)
     * @param moSmppSysType The associated system type for your SMPP client (optional)
     * @param voiceCallbackType Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the &#x60;voiceCallbackValue&#x60; parameter. If set, &#x60;sip&#x60; or &#x60;tel&#x60; are prioritized over the Voice capability in your Application.  *Note: The &#x60;app&#x60; value is deprecated and will be removed in future.*  (optional)
     * @param voiceCallbackValue A SIP URI or telephone number. Must be used with the &#x60;voiceCallbackType&#x60; parameter. (optional)
     * @param voiceStatusCallback A webhook URI for Vonage to send a request to when a call ends (optional)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> updateANumberWithHttpInfo(String country, String msisdn, String appId, String messagesCallbackType, String messagesCallbackValue, String moHttpUrl, String moSmppSysType, String voiceCallbackType, String voiceCallbackValue, String voiceStatusCallback) throws ApiException {
        okhttp3.Call localVarCall = updateANumberValidateBeforeCall(country, msisdn, appId, messagesCallbackType, messagesCallbackValue, moHttpUrl, moSmppSysType, voiceCallbackType, voiceCallbackValue, voiceStatusCallback, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a number (asynchronously)
     * Change the behaviour of a number that you own.
     * @param country The two character country code in ISO 3166-1 alpha-2 format (required)
     * @param msisdn An available inbound virtual number. (required)
     * @param appId The Application that will handle inbound traffic to this number. (optional)
     * @param messagesCallbackType &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Messages webhook type (always &#x60;app&#x60;) associated with this number and must be used with the &#x60;messagesCallbackValue&#x60; parameter.  (optional)
     * @param messagesCallbackValue &lt;strong&gt;DEPRECATED&lt;/strong&gt; - We recommend that you use &#x60;app_id&#x60; instead.  Specifies the Application ID of your Messages application. It must be used with the &#x60;messagesCallbackType&#x60; parameter.  (optional)
     * @param moHttpUrl An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a &#x60;GET&#x60; request to the endpoint and checks that it returns a &#x60;200 OK&#x60; response. Set this parameter&#39;s value to an empty string to remove the webhook. (optional)
     * @param moSmppSysType The associated system type for your SMPP client (optional)
     * @param voiceCallbackType Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the &#x60;voiceCallbackValue&#x60; parameter. If set, &#x60;sip&#x60; or &#x60;tel&#x60; are prioritized over the Voice capability in your Application.  *Note: The &#x60;app&#x60; value is deprecated and will be removed in future.*  (optional)
     * @param voiceCallbackValue A SIP URI or telephone number. Must be used with the &#x60;voiceCallbackType&#x60; parameter. (optional)
     * @param voiceStatusCallback A webhook URI for Vonage to send a request to when a call ends (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateANumberAsync(String country, String msisdn, String appId, String messagesCallbackType, String messagesCallbackValue, String moHttpUrl, String moSmppSysType, String voiceCallbackType, String voiceCallbackValue, String voiceStatusCallback, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateANumberValidateBeforeCall(country, msisdn, appId, messagesCallbackType, messagesCallbackValue, moHttpUrl, moSmppSysType, voiceCallbackType, voiceCallbackValue, voiceStatusCallback, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
