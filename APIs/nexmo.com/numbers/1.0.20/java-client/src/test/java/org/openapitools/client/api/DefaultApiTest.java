/*
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountUnauthorized;
import org.openapitools.client.model.AvailableNumbers;
import org.openapitools.client.model.InboundNumbers;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.Response420;
import org.openapitools.client.model.Unauthorized;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Buy a number
     *
     * Request to purchase a specific inbound number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buyANumberTest() throws ApiException {
        String country = null;
        String msisdn = null;
        String targetApiKey = null;
        Response response = api.buyANumber(country, msisdn, targetApiKey);
        // TODO: test validations
    }

    /**
     * Cancel a number
     *
     * Cancel your subscription for a specific inbound number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelANumberTest() throws ApiException {
        String country = null;
        String msisdn = null;
        String targetApiKey = null;
        Response response = api.cancelANumber(country, msisdn, targetApiKey);
        // TODO: test validations
    }

    /**
     * Search available numbers
     *
     * Retrieve inbound numbers that are available for the specified country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableNumbersTest() throws ApiException {
        String country = null;
        String type = null;
        String pattern = null;
        Integer searchPattern = null;
        String features = null;
        Integer size = null;
        Integer index = null;
        AvailableNumbers response = api.getAvailableNumbers(country, type, pattern, searchPattern, features, size, index);
        // TODO: test validations
    }

    /**
     * List the numbers you own
     *
     * Retrieve all the inbound numbers associated with your Vonage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOwnedNumbersTest() throws ApiException {
        String applicationId = null;
        Boolean hasApplication = null;
        String country = null;
        String pattern = null;
        Integer searchPattern = null;
        Integer size = null;
        Integer index = null;
        InboundNumbers response = api.getOwnedNumbers(applicationId, hasApplication, country, pattern, searchPattern, size, index);
        // TODO: test validations
    }

    /**
     * Update a number
     *
     * Change the behaviour of a number that you own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateANumberTest() throws ApiException {
        String country = null;
        String msisdn = null;
        String appId = null;
        String messagesCallbackType = null;
        String messagesCallbackValue = null;
        String moHttpUrl = null;
        String moSmppSysType = null;
        String voiceCallbackType = null;
        String voiceCallbackValue = null;
        String voiceStatusCallback = null;
        Response response = api.updateANumber(country, msisdn, appId, messagesCallbackType, messagesCallbackValue, moHttpUrl, moSmppSysType, voiceCallbackType, voiceCallbackValue, voiceStatusCallback);
        // TODO: test validations
    }

}
