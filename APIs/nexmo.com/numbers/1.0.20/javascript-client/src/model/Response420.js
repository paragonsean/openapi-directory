/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Response420 model module.
 * @module model/Response420
 * @version 1.0.20
 */
class Response420 {
    /**
     * Constructs a new <code>Response420</code>.
     * @alias module:model/Response420
     */
    constructor() { 
        
        Response420.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Response420</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response420} obj Optional instance to populate.
     * @return {module:model/Response420} The populated <code>Response420</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response420();

            if (data.hasOwnProperty('error-code')) {
                obj['error-code'] = ApiClient.convertToType(data['error-code'], 'String');
            }
            if (data.hasOwnProperty('error-code-label')) {
                obj['error-code-label'] = ApiClient.convertToType(data['error-code-label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response420</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response420</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error-code'] && !(typeof data['error-code'] === 'string' || data['error-code'] instanceof String)) {
            throw new Error("Expected the field `error-code` to be a primitive type in the JSON string but got " + data['error-code']);
        }
        // ensure the json data is a string
        if (data['error-code-label'] && !(typeof data['error-code-label'] === 'string' || data['error-code-label'] instanceof String)) {
            throw new Error("Expected the field `error-code-label` to be a primitive type in the JSON string but got " + data['error-code-label']);
        }

        return true;
    }


}



/**
 * The status code of the response. `200` indicates a successful request.
 * @member {String} error-code
 */
Response420.prototype['error-code'] = undefined;

/**
 * More detail about what happened. For example you may need to request the number via the dashboard, or you may already own this number.
 * @member {String} error-code-label
 */
Response420.prototype['error-code-label'] = undefined;






export default Response420;

