/**
 * Numbers API
 * The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>
 *
 * The version of the OpenAPI document: 1.0.20
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountUnauthorized from '../model/AccountUnauthorized';
import AvailableNumbers from '../model/AvailableNumbers';
import InboundNumbers from '../model/InboundNumbers';
import Response from '../model/Response';
import Response420 from '../model/Response420';
import Unauthorized from '../model/Unauthorized';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.20
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buyANumber operation.
     * @callback module:api/DefaultApi~buyANumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buy a number
     * Request to purchase a specific inbound number.
     * @param {String} country The two character country code in ISO 3166-1 alpha-2 format
     * @param {String} msisdn An available inbound virtual number.
     * @param {Object} opts Optional parameters
     * @param {String} [targetApiKey] If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
     * @param {module:api/DefaultApi~buyANumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    buyANumber(country, msisdn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling buyANumber");
      }
      // verify the required parameter 'msisdn' is set
      if (msisdn === undefined || msisdn === null) {
        throw new Error("Missing the required parameter 'msisdn' when calling buyANumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'country': country,
        'msisdn': msisdn,
        'target_api_key': opts['targetApiKey']
      };

      let authNames = ['apiKey', 'apiSecret'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/number/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelANumber operation.
     * @callback module:api/DefaultApi~cancelANumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a number
     * Cancel your subscription for a specific inbound number.
     * @param {String} country The two character country code in ISO 3166-1 alpha-2 format
     * @param {String} msisdn An available inbound virtual number.
     * @param {Object} opts Optional parameters
     * @param {String} [targetApiKey] If you’d like to perform an action on a subaccount, provide the `api_key` of that account here. If you’d like to perform an action on your own account, you do not need to provide this field.
     * @param {module:api/DefaultApi~cancelANumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    cancelANumber(country, msisdn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling cancelANumber");
      }
      // verify the required parameter 'msisdn' is set
      if (msisdn === undefined || msisdn === null) {
        throw new Error("Missing the required parameter 'msisdn' when calling cancelANumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'country': country,
        'msisdn': msisdn,
        'target_api_key': opts['targetApiKey']
      };

      let authNames = ['apiKey', 'apiSecret'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/number/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableNumbers operation.
     * @callback module:api/DefaultApi~getAvailableNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableNumbers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available numbers
     * Retrieve inbound numbers that are available for the specified country.
     * @param {String} country The two character country code to filter on (in ISO 3166-1 alpha-2 format)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Set this parameter to filter the type of number, such as mobile or landline
     * @param {String} [pattern] The number pattern you want to search for. Use in conjunction with `search_pattern`.
     * @param {module:model/Number} [searchPattern = 0)] The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
     * @param {module:model/String} [features] Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
     * @param {Number} [size = 10)] Page size
     * @param {Number} [index = 1)] Page index
     * @param {module:api/DefaultApi~getAvailableNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableNumbers}
     */
    getAvailableNumbers(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getAvailableNumbers");
      }

      let pathParams = {
      };
      let queryParams = {
        'country': country,
        'type': opts['type'],
        'pattern': opts['pattern'],
        'search_pattern': opts['searchPattern'],
        'features': opts['features'],
        'size': opts['size'],
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'apiSecret'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = AvailableNumbers;
      return this.apiClient.callApi(
        '/number/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnedNumbers operation.
     * @callback module:api/DefaultApi~getOwnedNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundNumbers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the numbers you own
     * Retrieve all the inbound numbers associated with your Vonage account.
     * @param {Object} opts Optional parameters
     * @param {String} [applicationId] The Application that you want to return the numbers for.
     * @param {Boolean} [hasApplication] Set this optional field to `true` to restrict your results to numbers associated with an Application (any Application). Set to `false` to find all numbers not associated with any Application. Omit the field to avoid filtering on whether or not the number is assigned to an Application. 
     * @param {String} [country] 
     * @param {String} [pattern] The number pattern you want to search for. Use in conjunction with `search_pattern`.
     * @param {module:model/Number} [searchPattern = 0)] The strategy you want to use for matching:   * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA) * `1` - Search for numbers that contain `pattern` * `2` - Search for numbers that end with `pattern` 
     * @param {Number} [size = 10)] Page size
     * @param {Number} [index = 1)] Page index
     * @param {module:api/DefaultApi~getOwnedNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundNumbers}
     */
    getOwnedNumbers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'application_id': opts['applicationId'],
        'has_application': opts['hasApplication'],
        'country': opts['country'],
        'pattern': opts['pattern'],
        'search_pattern': opts['searchPattern'],
        'size': opts['size'],
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'apiSecret'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = InboundNumbers;
      return this.apiClient.callApi(
        '/account/numbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateANumber operation.
     * @callback module:api/DefaultApi~updateANumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a number
     * Change the behaviour of a number that you own.
     * @param {String} country The two character country code in ISO 3166-1 alpha-2 format
     * @param {String} msisdn An available inbound virtual number.
     * @param {Object} opts Optional parameters
     * @param {String} [appId] The Application that will handle inbound traffic to this number.
     * @param {module:model/String} [messagesCallbackType] <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Messages webhook type (always `app`) associated with this number and must be used with the `messagesCallbackValue` parameter. 
     * @param {String} [messagesCallbackValue] <strong>DEPRECATED</strong> - We recommend that you use `app_id` instead.  Specifies the Application ID of your Messages application. It must be used with the `messagesCallbackType` parameter. 
     * @param {String} [moHttpUrl] An URL-encoded URI to the webhook endpoint that handles inbound messages. Your webhook endpoint must be active before you make this request. Vonage makes a `GET` request to the endpoint and checks that it returns a `200 OK` response. Set this parameter's value to an empty string to remove the webhook.
     * @param {String} [moSmppSysType] The associated system type for your SMPP client
     * @param {module:model/String} [voiceCallbackType] Specify whether inbound voice calls on your number are forwarded to a SIP or a telephone number.  This must be used with the `voiceCallbackValue` parameter. If set, `sip` or `tel` are prioritized over the Voice capability in your Application.  *Note: The `app` value is deprecated and will be removed in future.* 
     * @param {String} [voiceCallbackValue] A SIP URI or telephone number. Must be used with the `voiceCallbackType` parameter.
     * @param {String} [voiceStatusCallback] A webhook URI for Vonage to send a request to when a call ends
     * @param {module:api/DefaultApi~updateANumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    updateANumber(country, msisdn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling updateANumber");
      }
      // verify the required parameter 'msisdn' is set
      if (msisdn === undefined || msisdn === null) {
        throw new Error("Missing the required parameter 'msisdn' when calling updateANumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'app_id': opts['appId'],
        'country': country,
        'messagesCallbackType': opts['messagesCallbackType'],
        'messagesCallbackValue': opts['messagesCallbackValue'],
        'moHttpUrl': opts['moHttpUrl'],
        'moSmppSysType': opts['moSmppSysType'],
        'msisdn': msisdn,
        'voiceCallbackType': opts['voiceCallbackType'],
        'voiceCallbackValue': opts['voiceCallbackValue'],
        'voiceStatusCallback': opts['voiceStatusCallback']
      };

      let authNames = ['apiKey', 'apiSecret'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/number/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
