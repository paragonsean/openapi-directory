/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditEvent.h
 *
 * 
 */

#ifndef OAIAuditEvent_H
#define OAIAuditEvent_H

#include <QJsonObject>

#include "OAIAuditEvent_context.h"
#include "OAIEventLink.h"
#include "OAIEventTypes.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventLink;
class OAIAuditEvent_context;

class OAIAuditEvent : public OAIObject {
public:
    OAIAuditEvent();
    OAIAuditEvent(QString json);
    ~OAIAuditEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEventLink getLinks() const;
    void setLinks(const OAIEventLink &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    OAIAuditEvent_context getContext() const;
    void setContext(const OAIAuditEvent_context &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QDate getCreatedAt() const;
    void setCreatedAt(const QDate &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIEventTypes getEventType() const;
    void setEventType(const OAIEventTypes &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    QString getEventTypeDescription() const;
    void setEventTypeDescription(const QString &event_type_description);
    bool is_event_type_description_Set() const;
    bool is_event_type_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getSourceCountry() const;
    void setSourceCountry(const QString &source_country);
    bool is_source_country_Set() const;
    bool is_source_country_Valid() const;

    QString getSourceDescription() const;
    void setSourceDescription(const QString &source_description);
    bool is_source_description_Set() const;
    bool is_source_description_Valid() const;

    QString getSourceIp() const;
    void setSourceIp(const QString &source_ip);
    bool is_source_ip_Set() const;
    bool is_source_ip_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEventLink m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    OAIAuditEvent_context m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QDate m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIEventTypes m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    QString m_event_type_description;
    bool m_event_type_description_isSet;
    bool m_event_type_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_source_country;
    bool m_source_country_isSet;
    bool m_source_country_isValid;

    QString m_source_description;
    bool m_source_description_isSet;
    bool m_source_description_isValid;

    QString m_source_ip;
    bool m_source_ip_isSet;
    bool m_source_ip_isValid;

    QString m_user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditEvent)

#endif // OAIAuditEvent_H
