/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEvent::OAIAuditEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEvent::OAIAuditEvent() {
    this->initializeModel();
}

OAIAuditEvent::~OAIAuditEvent() {}

void OAIAuditEvent::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_type_description_isSet = false;
    m_event_type_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_country_isSet = false;
    m_source_country_isValid = false;

    m_source_description_isSet = false;
    m_source_description_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuditEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditEvent::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_event_type_description_isValid = ::OpenAPI::fromJsonValue(m_event_type_description, json[QString("event_type_description")]);
    m_event_type_description_isSet = !json[QString("event_type_description")].isNull() && m_event_type_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_country_isValid = ::OpenAPI::fromJsonValue(m_source_country, json[QString("source_country")]);
    m_source_country_isSet = !json[QString("source_country")].isNull() && m_source_country_isValid;

    m_source_description_isValid = ::OpenAPI::fromJsonValue(m_source_description, json[QString("source_description")]);
    m_source_description_isSet = !json[QString("source_description")].isNull() && m_source_description_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("source_ip")]);
    m_source_ip_isSet = !json[QString("source_ip")].isNull() && m_source_ip_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAuditEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditEvent::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_type_description_isSet) {
        obj.insert(QString("event_type_description"), ::OpenAPI::toJsonValue(m_event_type_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_country_isSet) {
        obj.insert(QString("source_country"), ::OpenAPI::toJsonValue(m_source_country));
    }
    if (m_source_description_isSet) {
        obj.insert(QString("source_description"), ::OpenAPI::toJsonValue(m_source_description));
    }
    if (m_source_ip_isSet) {
        obj.insert(QString("source_ip"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIEventLink OAIAuditEvent::getLinks() const {
    return m__links;
}
void OAIAuditEvent::setLinks(const OAIEventLink &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAuditEvent::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAuditEvent::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIAuditEvent::getAccountId() const {
    return m_account_id;
}
void OAIAuditEvent::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAuditEvent::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAuditEvent::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAuditEvent_context OAIAuditEvent::getContext() const {
    return m_context;
}
void OAIAuditEvent::setContext(const OAIAuditEvent_context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIAuditEvent::is_context_Set() const{
    return m_context_isSet;
}

bool OAIAuditEvent::is_context_Valid() const{
    return m_context_isValid;
}

QDate OAIAuditEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIAuditEvent::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAuditEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAuditEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEventTypes OAIAuditEvent::getEventType() const {
    return m_event_type;
}
void OAIAuditEvent::setEventType(const OAIEventTypes &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIAuditEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIAuditEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIAuditEvent::getEventTypeDescription() const {
    return m_event_type_description;
}
void OAIAuditEvent::setEventTypeDescription(const QString &event_type_description) {
    m_event_type_description = event_type_description;
    m_event_type_description_isSet = true;
}

bool OAIAuditEvent::is_event_type_description_Set() const{
    return m_event_type_description_isSet;
}

bool OAIAuditEvent::is_event_type_description_Valid() const{
    return m_event_type_description_isValid;
}

QString OAIAuditEvent::getId() const {
    return m_id;
}
void OAIAuditEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuditEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuditEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuditEvent::getSource() const {
    return m_source;
}
void OAIAuditEvent::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAuditEvent::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAuditEvent::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAuditEvent::getSourceCountry() const {
    return m_source_country;
}
void OAIAuditEvent::setSourceCountry(const QString &source_country) {
    m_source_country = source_country;
    m_source_country_isSet = true;
}

bool OAIAuditEvent::is_source_country_Set() const{
    return m_source_country_isSet;
}

bool OAIAuditEvent::is_source_country_Valid() const{
    return m_source_country_isValid;
}

QString OAIAuditEvent::getSourceDescription() const {
    return m_source_description;
}
void OAIAuditEvent::setSourceDescription(const QString &source_description) {
    m_source_description = source_description;
    m_source_description_isSet = true;
}

bool OAIAuditEvent::is_source_description_Set() const{
    return m_source_description_isSet;
}

bool OAIAuditEvent::is_source_description_Valid() const{
    return m_source_description_isValid;
}

QString OAIAuditEvent::getSourceIp() const {
    return m_source_ip;
}
void OAIAuditEvent::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIAuditEvent::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIAuditEvent::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QString OAIAuditEvent::getUserEmail() const {
    return m_user_email;
}
void OAIAuditEvent::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIAuditEvent::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIAuditEvent::is_user_email_Valid() const{
    return m_user_email_isValid;
}

qint32 OAIAuditEvent::getUserId() const {
    return m_user_id;
}
void OAIAuditEvent::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuditEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuditEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuditEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
