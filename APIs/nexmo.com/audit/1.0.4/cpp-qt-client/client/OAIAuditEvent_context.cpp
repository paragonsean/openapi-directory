/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEvent_context.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEvent_context::OAIAuditEvent_context(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEvent_context::OAIAuditEvent_context() {
    this->initializeModel();
}

OAIAuditEvent_context::~OAIAuditEvent_context() {}

void OAIAuditEvent_context::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_msisdn_isSet = false;
    m_msisdn_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_voice_type_isSet = false;
    m_voice_type_isValid = false;

    m_voice_value_isSet = false;
    m_voice_value_isValid = false;
}

void OAIAuditEvent_context::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditEvent_context::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_msisdn_isValid = ::OpenAPI::fromJsonValue(m_msisdn, json[QString("msisdn")]);
    m_msisdn_isSet = !json[QString("msisdn")].isNull() && m_msisdn_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_voice_type_isValid = ::OpenAPI::fromJsonValue(m_voice_type, json[QString("voice-type")]);
    m_voice_type_isSet = !json[QString("voice-type")].isNull() && m_voice_type_isValid;

    m_voice_value_isValid = ::OpenAPI::fromJsonValue(m_voice_value, json[QString("voice-value")]);
    m_voice_value_isSet = !json[QString("voice-value")].isNull() && m_voice_value_isValid;
}

QString OAIAuditEvent_context::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditEvent_context::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_created.isSet()) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_msisdn_isSet) {
        obj.insert(QString("msisdn"), ::OpenAPI::toJsonValue(m_msisdn));
    }
    if (m_http_isSet) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_voice_type_isSet) {
        obj.insert(QString("voice-type"), ::OpenAPI::toJsonValue(m_voice_type));
    }
    if (m_voice_value_isSet) {
        obj.insert(QString("voice-value"), ::OpenAPI::toJsonValue(m_voice_value));
    }
    return obj;
}

QString OAIAuditEvent_context::getAppId() const {
    return m_app_id;
}
void OAIAuditEvent_context::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAuditEvent_context::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAuditEvent_context::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIContextAppCreate_created OAIAuditEvent_context::getCreated() const {
    return m_created;
}
void OAIAuditEvent_context::setCreated(const OAIContextAppCreate_created &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAuditEvent_context::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAuditEvent_context::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAuditEvent_context::getAccount() const {
    return m_account;
}
void OAIAuditEvent_context::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAuditEvent_context::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAuditEvent_context::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIAuditEvent_context::getApplicationId() const {
    return m_application_id;
}
void OAIAuditEvent_context::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIAuditEvent_context::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIAuditEvent_context::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIAuditEvent_context::getCountry() const {
    return m_country;
}
void OAIAuditEvent_context::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAuditEvent_context::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAuditEvent_context::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAuditEvent_context::getMsisdn() const {
    return m_msisdn;
}
void OAIAuditEvent_context::setMsisdn(const QString &msisdn) {
    m_msisdn = msisdn;
    m_msisdn_isSet = true;
}

bool OAIAuditEvent_context::is_msisdn_Set() const{
    return m_msisdn_isSet;
}

bool OAIAuditEvent_context::is_msisdn_Valid() const{
    return m_msisdn_isValid;
}

QString OAIAuditEvent_context::getHttp() const {
    return m_http;
}
void OAIAuditEvent_context::setHttp(const QString &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAIAuditEvent_context::is_http_Set() const{
    return m_http_isSet;
}

bool OAIAuditEvent_context::is_http_Valid() const{
    return m_http_isValid;
}

QString OAIAuditEvent_context::getVoiceType() const {
    return m_voice_type;
}
void OAIAuditEvent_context::setVoiceType(const QString &voice_type) {
    m_voice_type = voice_type;
    m_voice_type_isSet = true;
}

bool OAIAuditEvent_context::is_voice_type_Set() const{
    return m_voice_type_isSet;
}

bool OAIAuditEvent_context::is_voice_type_Valid() const{
    return m_voice_type_isValid;
}

QString OAIAuditEvent_context::getVoiceValue() const {
    return m_voice_value;
}
void OAIAuditEvent_context::setVoiceValue(const QString &voice_value) {
    m_voice_value = voice_value;
    m_voice_value_isSet = true;
}

bool OAIAuditEvent_context::is_voice_value_Set() const{
    return m_voice_value_isSet;
}

bool OAIAuditEvent_context::is_voice_value_Valid() const{
    return m_voice_value_isValid;
}

bool OAIAuditEvent_context::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditEvent_context::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
