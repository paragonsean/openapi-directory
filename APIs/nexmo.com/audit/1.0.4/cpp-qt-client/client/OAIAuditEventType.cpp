/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEventType::OAIAuditEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEventType::OAIAuditEventType() {
    this->initializeModel();
}

OAIAuditEventType::~OAIAuditEventType() {}

void OAIAuditEventType::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAuditEventType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditEventType::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAuditEventType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditEventType::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAuditEventType::getDescription() const {
    return m_description;
}
void OAIAuditEventType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuditEventType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuditEventType::is_description_Valid() const{
    return m_description_isValid;
}

OAIEventTypes OAIAuditEventType::getType() const {
    return m_type;
}
void OAIAuditEventType::setType(const OAIEventTypes &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuditEventType::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuditEventType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAuditEventType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
