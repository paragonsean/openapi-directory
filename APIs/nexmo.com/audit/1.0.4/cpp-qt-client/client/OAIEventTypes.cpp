/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTypes::OAIEventTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTypes::OAIEventTypes() {
    this->initializeModel();
}

OAIEventTypes::~OAIEventTypes() {}

void OAIEventTypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventTypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventTypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("USER_STATUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_BILLING_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_BILLING_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_LOGIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_LOGIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_LOGOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_LOGOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_PRODUCT_SEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_PRODUCT_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_API_KEYS_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::USER_API_KEYS_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_SECRET_DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::ACCOUNT_SECRET_DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_SECRET_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::ACCOUNT_SECRET_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_UPDATE_SPAMMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::ACCOUNT_UPDATE_SPAMMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_UPDATE_SETTINGS_API", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::ACCOUNT_UPDATE_SETTINGS_API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_ASSIGN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::NUMBER_ASSIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_UPDATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::NUMBER_UPDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_RELEASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::NUMBER_RELEASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_LINKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::NUMBER_LINKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER_UNLINKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::NUMBER_UNLINKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::APP_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::APP_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::APP_DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_DISABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::APP_DISABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_ENABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::APP_ENABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IP_WHITELIST_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::IP_WHITELIST_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IP_WHITELIST_DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::IP_WHITELIST_DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTORELOAD_ENABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::AUTORELOAD_ENABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTORELOAD_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::AUTORELOAD_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTORELOAD_DISABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventTypes::AUTORELOAD_DISABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventTypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventTypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventTypes::USER_STATUS:
            val = "USER_STATUS";
            break;
        case eOAIEventTypes::USER_UPDATE:
            val = "USER_UPDATE";
            break;
        case eOAIEventTypes::USER_BILLING_UPDATE:
            val = "USER_BILLING_UPDATE";
            break;
        case eOAIEventTypes::USER_CREATE:
            val = "USER_CREATE";
            break;
        case eOAIEventTypes::USER_LOGIN:
            val = "USER_LOGIN";
            break;
        case eOAIEventTypes::USER_LOGOUT:
            val = "USER_LOGOUT";
            break;
        case eOAIEventTypes::USER_PRODUCT_SEARCH:
            val = "USER_PRODUCT_SEARCH";
            break;
        case eOAIEventTypes::USER_API_KEYS_UPDATE:
            val = "USER_API_KEYS_UPDATE";
            break;
        case eOAIEventTypes::ACCOUNT_SECRET_DELETE:
            val = "ACCOUNT_SECRET_DELETE";
            break;
        case eOAIEventTypes::ACCOUNT_SECRET_CREATE:
            val = "ACCOUNT_SECRET_CREATE";
            break;
        case eOAIEventTypes::ACCOUNT_UPDATE_SPAMMER:
            val = "ACCOUNT_UPDATE_SPAMMER";
            break;
        case eOAIEventTypes::ACCOUNT_UPDATE_SETTINGS_API:
            val = "ACCOUNT_UPDATE_SETTINGS_API";
            break;
        case eOAIEventTypes::NUMBER_ASSIGN:
            val = "NUMBER_ASSIGN";
            break;
        case eOAIEventTypes::NUMBER_UPDATED:
            val = "NUMBER_UPDATED";
            break;
        case eOAIEventTypes::NUMBER_RELEASE:
            val = "NUMBER_RELEASE";
            break;
        case eOAIEventTypes::NUMBER_LINKED:
            val = "NUMBER_LINKED";
            break;
        case eOAIEventTypes::NUMBER_UNLINKED:
            val = "NUMBER_UNLINKED";
            break;
        case eOAIEventTypes::APP_CREATE:
            val = "APP_CREATE";
            break;
        case eOAIEventTypes::APP_UPDATE:
            val = "APP_UPDATE";
            break;
        case eOAIEventTypes::APP_DELETE:
            val = "APP_DELETE";
            break;
        case eOAIEventTypes::APP_DISABLE:
            val = "APP_DISABLE";
            break;
        case eOAIEventTypes::APP_ENABLE:
            val = "APP_ENABLE";
            break;
        case eOAIEventTypes::IP_WHITELIST_CREATE:
            val = "IP_WHITELIST_CREATE";
            break;
        case eOAIEventTypes::IP_WHITELIST_DELETE:
            val = "IP_WHITELIST_DELETE";
            break;
        case eOAIEventTypes::AUTORELOAD_ENABLE:
            val = "AUTORELOAD_ENABLE";
            break;
        case eOAIEventTypes::AUTORELOAD_UPDATE:
            val = "AUTORELOAD_UPDATE";
            break;
        case eOAIEventTypes::AUTORELOAD_DISABLE:
            val = "AUTORELOAD_DISABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventTypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventTypes::eOAIEventTypes OAIEventTypes::getValue() const {
    return m_value;
}

void OAIEventTypes::setValue(const OAIEventTypes::eOAIEventTypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventTypes::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
