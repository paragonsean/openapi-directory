# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_event_context import AuditEventContext
from openapi_server.models.event_link import EventLink
from openapi_server.models.event_types import EventTypes
from openapi_server import util


class AuditEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: EventLink=None, account_id: str=None, context: AuditEventContext=None, created_at: date=None, event_type: EventTypes=None, event_type_description: str=None, id: str=None, source: str=None, source_country: str=None, source_description: str=None, source_ip: str=None, user_email: str=None, user_id: int=None):
        """AuditEvent - a model defined in OpenAPI

        :param links: The links of this AuditEvent.
        :param account_id: The account_id of this AuditEvent.
        :param context: The context of this AuditEvent.
        :param created_at: The created_at of this AuditEvent.
        :param event_type: The event_type of this AuditEvent.
        :param event_type_description: The event_type_description of this AuditEvent.
        :param id: The id of this AuditEvent.
        :param source: The source of this AuditEvent.
        :param source_country: The source_country of this AuditEvent.
        :param source_description: The source_description of this AuditEvent.
        :param source_ip: The source_ip of this AuditEvent.
        :param user_email: The user_email of this AuditEvent.
        :param user_id: The user_id of this AuditEvent.
        """
        self.openapi_types = {
            'links': EventLink,
            'account_id': str,
            'context': AuditEventContext,
            'created_at': date,
            'event_type': EventTypes,
            'event_type_description': str,
            'id': str,
            'source': str,
            'source_country': str,
            'source_description': str,
            'source_ip': str,
            'user_email': str,
            'user_id': int
        }

        self.attribute_map = {
            'links': '_links',
            'account_id': 'account_id',
            'context': 'context',
            'created_at': 'created_at',
            'event_type': 'event_type',
            'event_type_description': 'event_type_description',
            'id': 'id',
            'source': 'source',
            'source_country': 'source_country',
            'source_description': 'source_description',
            'source_ip': 'source_ip',
            'user_email': 'user_email',
            'user_id': 'user_id'
        }

        self._links = links
        self._account_id = account_id
        self._context = context
        self._created_at = created_at
        self._event_type = event_type
        self._event_type_description = event_type_description
        self._id = id
        self._source = source
        self._source_country = source_country
        self._source_description = source_description
        self._source_ip = source_ip
        self._user_email = user_email
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditEvent of this AuditEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AuditEvent.


        :return: The links of this AuditEvent.
        :rtype: EventLink
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AuditEvent.


        :param links: The links of this AuditEvent.
        :type links: EventLink
        """

        self._links = links

    @property
    def account_id(self):
        """Gets the account_id of this AuditEvent.

        The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.

        :return: The account_id of this AuditEvent.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuditEvent.

        The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.

        :param account_id: The account_id of this AuditEvent.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def context(self):
        """Gets the context of this AuditEvent.


        :return: The context of this AuditEvent.
        :rtype: AuditEventContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AuditEvent.


        :param context: The context of this AuditEvent.
        :type context: AuditEventContext
        """

        self._context = context

    @property
    def created_at(self):
        """Gets the created_at of this AuditEvent.

        When the audit event was created.

        :return: The created_at of this AuditEvent.
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditEvent.

        When the audit event was created.

        :param created_at: The created_at of this AuditEvent.
        :type created_at: date
        """

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this AuditEvent.


        :return: The event_type of this AuditEvent.
        :rtype: EventTypes
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuditEvent.


        :param event_type: The event_type of this AuditEvent.
        :type event_type: EventTypes
        """

        self._event_type = event_type

    @property
    def event_type_description(self):
        """Gets the event_type_description of this AuditEvent.

        A description of the event type

        :return: The event_type_description of this AuditEvent.
        :rtype: str
        """
        return self._event_type_description

    @event_type_description.setter
    def event_type_description(self, event_type_description):
        """Sets the event_type_description of this AuditEvent.

        A description of the event type

        :param event_type_description: The event_type_description of this AuditEvent.
        :type event_type_description: str
        """

        self._event_type_description = event_type_description

    @property
    def id(self):
        """Gets the id of this AuditEvent.

        UUID of the audit event

        :return: The id of this AuditEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditEvent.

        UUID of the audit event

        :param id: The id of this AuditEvent.
        :type id: str
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this AuditEvent.

        The source of the event. CD: Customer Dashboard DEVAPI: via Developer API 

        :return: The source of this AuditEvent.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AuditEvent.

        The source of the event. CD: Customer Dashboard DEVAPI: via Developer API 

        :param source: The source of this AuditEvent.
        :type source: str
        """
        allowed_values = ["CD", "DEVAPI"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_country(self):
        """Gets the source_country of this AuditEvent.

        ISO 3166-1 Alpha-2 country code recorded for the event.

        :return: The source_country of this AuditEvent.
        :rtype: str
        """
        return self._source_country

    @source_country.setter
    def source_country(self, source_country):
        """Sets the source_country of this AuditEvent.

        ISO 3166-1 Alpha-2 country code recorded for the event.

        :param source_country: The source_country of this AuditEvent.
        :type source_country: str
        """

        self._source_country = source_country

    @property
    def source_description(self):
        """Gets the source_description of this AuditEvent.

        Description of the audit event source.

        :return: The source_description of this AuditEvent.
        :rtype: str
        """
        return self._source_description

    @source_description.setter
    def source_description(self, source_description):
        """Sets the source_description of this AuditEvent.

        Description of the audit event source.

        :param source_description: The source_description of this AuditEvent.
        :type source_description: str
        """
        allowed_values = ["Customer Dashboard", "Developer API"]  # noqa: E501
        if source_description not in allowed_values:
            raise ValueError(
                "Invalid value for `source_description` ({0}), must be one of {1}"
                .format(source_description, allowed_values)
            )

        self._source_description = source_description

    @property
    def source_ip(self):
        """Gets the source_ip of this AuditEvent.

        The IP address used to make the account change.

        :return: The source_ip of this AuditEvent.
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this AuditEvent.

        The IP address used to make the account change.

        :param source_ip: The source_ip of this AuditEvent.
        :type source_ip: str
        """

        self._source_ip = source_ip

    @property
    def user_email(self):
        """Gets the user_email of this AuditEvent.

        Email of the user whose account the audit event is associated with.

        :return: The user_email of this AuditEvent.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this AuditEvent.

        Email of the user whose account the audit event is associated with.

        :param user_email: The user_email of this AuditEvent.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this AuditEvent.

        The ID of the user that the audit event is associated with.

        :return: The user_id of this AuditEvent.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditEvent.

        The ID of the user that the audit event is associated with.

        :param user_id: The user_id of this AuditEvent.
        :type user_id: int
        """

        self._user_id = user_id
