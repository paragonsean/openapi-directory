# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_app_create import ContextAppCreate
from openapi_server.models.context_app_create_created import ContextAppCreateCreated
from openapi_server.models.context_number_linking import ContextNumberLinking
from openapi_server.models.context_number_update import ContextNumberUpdate
from openapi_server import util


class AuditEventContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, created: ContextAppCreateCreated=None, account: str=None, application_id: str=None, country: str=None, msisdn: str=None, http: str=None, voice_type: str=None, voice_value: str=None):
        """AuditEventContext - a model defined in OpenAPI

        :param app_id: The app_id of this AuditEventContext.
        :param created: The created of this AuditEventContext.
        :param account: The account of this AuditEventContext.
        :param application_id: The application_id of this AuditEventContext.
        :param country: The country of this AuditEventContext.
        :param msisdn: The msisdn of this AuditEventContext.
        :param http: The http of this AuditEventContext.
        :param voice_type: The voice_type of this AuditEventContext.
        :param voice_value: The voice_value of this AuditEventContext.
        """
        self.openapi_types = {
            'app_id': str,
            'created': ContextAppCreateCreated,
            'account': str,
            'application_id': str,
            'country': str,
            'msisdn': str,
            'http': str,
            'voice_type': str,
            'voice_value': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'created': 'created',
            'account': 'account',
            'application_id': 'applicationId',
            'country': 'country',
            'msisdn': 'msisdn',
            'http': 'http',
            'voice_type': 'voice-type',
            'voice_value': 'voice-value'
        }

        self._app_id = app_id
        self._created = created
        self._account = account
        self._application_id = application_id
        self._country = country
        self._msisdn = msisdn
        self._http = http
        self._voice_type = voice_type
        self._voice_value = voice_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditEventContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditEvent_context of this AuditEventContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AuditEventContext.

        UUID of the app that was created

        :return: The app_id of this AuditEventContext.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AuditEventContext.

        UUID of the app that was created

        :param app_id: The app_id of this AuditEventContext.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def created(self):
        """Gets the created of this AuditEventContext.


        :return: The created of this AuditEventContext.
        :rtype: ContextAppCreateCreated
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AuditEventContext.


        :param created: The created of this AuditEventContext.
        :type created: ContextAppCreateCreated
        """

        self._created = created

    @property
    def account(self):
        """Gets the account of this AuditEventContext.

        Which account the number is associated with

        :return: The account of this AuditEventContext.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AuditEventContext.

        Which account the number is associated with

        :param account: The account of this AuditEventContext.
        :type account: str
        """

        self._account = account

    @property
    def application_id(self):
        """Gets the application_id of this AuditEventContext.

        UUID of the app the number is being linked/unlinked to

        :return: The application_id of this AuditEventContext.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AuditEventContext.

        UUID of the app the number is being linked/unlinked to

        :param application_id: The application_id of this AuditEventContext.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def country(self):
        """Gets the country of this AuditEventContext.

        The country of the number

        :return: The country of this AuditEventContext.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AuditEventContext.

        The country of the number

        :param country: The country of this AuditEventContext.
        :type country: str
        """

        self._country = country

    @property
    def msisdn(self):
        """Gets the msisdn of this AuditEventContext.

        The phone number linked/unlinked to your application

        :return: The msisdn of this AuditEventContext.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this AuditEventContext.

        The phone number linked/unlinked to your application

        :param msisdn: The msisdn of this AuditEventContext.
        :type msisdn: str
        """

        self._msisdn = msisdn

    @property
    def http(self):
        """Gets the http of this AuditEventContext.

        The URL of the endpoint the number has been forwarded to

        :return: The http of this AuditEventContext.
        :rtype: str
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this AuditEventContext.

        The URL of the endpoint the number has been forwarded to

        :param http: The http of this AuditEventContext.
        :type http: str
        """

        self._http = http

    @property
    def voice_type(self):
        """Gets the voice_type of this AuditEventContext.

        The type of endpoint the number has been forwarded to

        :return: The voice_type of this AuditEventContext.
        :rtype: str
        """
        return self._voice_type

    @voice_type.setter
    def voice_type(self, voice_type):
        """Sets the voice_type of this AuditEventContext.

        The type of endpoint the number has been forwarded to

        :param voice_type: The voice_type of this AuditEventContext.
        :type voice_type: str
        """
        allowed_values = ["tel", "sip", "vxml", "app"]  # noqa: E501
        if voice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_type` ({0}), must be one of {1}"
                .format(voice_type, allowed_values)
            )

        self._voice_type = voice_type

    @property
    def voice_value(self):
        """Gets the voice_value of this AuditEventContext.

        The value of the endpoint the number has been forwarded to

        :return: The voice_value of this AuditEventContext.
        :rtype: str
        """
        return self._voice_value

    @voice_value.setter
    def voice_value(self, voice_value):
        """Sets the voice_value of this AuditEventContext.

        The value of the endpoint the number has been forwarded to

        :param voice_value: The voice_value of this AuditEventContext.
        :type voice_value: str
        """

        self._voice_value = voice_value
