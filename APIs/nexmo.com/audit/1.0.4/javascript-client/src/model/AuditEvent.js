/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditEventContext from './AuditEventContext';
import EventLink from './EventLink';
import EventTypes from './EventTypes';

/**
 * The AuditEvent model module.
 * @module model/AuditEvent
 * @version 1.0.4
 */
class AuditEvent {
    /**
     * Constructs a new <code>AuditEvent</code>.
     * @alias module:model/AuditEvent
     */
    constructor() { 
        
        AuditEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuditEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditEvent} obj Optional instance to populate.
     * @return {module:model/AuditEvent} The populated <code>AuditEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditEvent();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = EventLink.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = AuditEventContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = EventTypes.constructFromObject(data['event_type']);
            }
            if (data.hasOwnProperty('event_type_description')) {
                obj['event_type_description'] = ApiClient.convertToType(data['event_type_description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('source_country')) {
                obj['source_country'] = ApiClient.convertToType(data['source_country'], 'String');
            }
            if (data.hasOwnProperty('source_description')) {
                obj['source_description'] = ApiClient.convertToType(data['source_description'], 'String');
            }
            if (data.hasOwnProperty('source_ip')) {
                obj['source_ip'] = ApiClient.convertToType(data['source_ip'], 'String');
            }
            if (data.hasOwnProperty('user_email')) {
                obj['user_email'] = ApiClient.convertToType(data['user_email'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditEvent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          EventLink.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          AuditEventContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['event_type_description'] && !(typeof data['event_type_description'] === 'string' || data['event_type_description'] instanceof String)) {
            throw new Error("Expected the field `event_type_description` to be a primitive type in the JSON string but got " + data['event_type_description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['source_country'] && !(typeof data['source_country'] === 'string' || data['source_country'] instanceof String)) {
            throw new Error("Expected the field `source_country` to be a primitive type in the JSON string but got " + data['source_country']);
        }
        // ensure the json data is a string
        if (data['source_description'] && !(typeof data['source_description'] === 'string' || data['source_description'] instanceof String)) {
            throw new Error("Expected the field `source_description` to be a primitive type in the JSON string but got " + data['source_description']);
        }
        // ensure the json data is a string
        if (data['source_ip'] && !(typeof data['source_ip'] === 'string' || data['source_ip'] instanceof String)) {
            throw new Error("Expected the field `source_ip` to be a primitive type in the JSON string but got " + data['source_ip']);
        }
        // ensure the json data is a string
        if (data['user_email'] && !(typeof data['user_email'] === 'string' || data['user_email'] instanceof String)) {
            throw new Error("Expected the field `user_email` to be a primitive type in the JSON string but got " + data['user_email']);
        }

        return true;
    }


}



/**
 * @member {module:model/EventLink} _links
 */
AuditEvent.prototype['_links'] = undefined;

/**
 * The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.
 * @member {String} account_id
 */
AuditEvent.prototype['account_id'] = undefined;

/**
 * @member {module:model/AuditEventContext} context
 */
AuditEvent.prototype['context'] = undefined;

/**
 * When the audit event was created.
 * @member {Date} created_at
 */
AuditEvent.prototype['created_at'] = undefined;

/**
 * @member {module:model/EventTypes} event_type
 */
AuditEvent.prototype['event_type'] = undefined;

/**
 * A description of the event type
 * @member {String} event_type_description
 */
AuditEvent.prototype['event_type_description'] = undefined;

/**
 * UUID of the audit event
 * @member {String} id
 */
AuditEvent.prototype['id'] = undefined;

/**
 * The source of the event. CD: Customer Dashboard DEVAPI: via Developer API 
 * @member {module:model/AuditEvent.SourceEnum} source
 */
AuditEvent.prototype['source'] = undefined;

/**
 * ISO 3166-1 Alpha-2 country code recorded for the event.
 * @member {String} source_country
 */
AuditEvent.prototype['source_country'] = undefined;

/**
 * Description of the audit event source.
 * @member {module:model/AuditEvent.SourceDescriptionEnum} source_description
 */
AuditEvent.prototype['source_description'] = undefined;

/**
 * The IP address used to make the account change.
 * @member {String} source_ip
 */
AuditEvent.prototype['source_ip'] = undefined;

/**
 * Email of the user whose account the audit event is associated with.
 * @member {String} user_email
 */
AuditEvent.prototype['user_email'] = undefined;

/**
 * The ID of the user that the audit event is associated with.
 * @member {Number} user_id
 */
AuditEvent.prototype['user_id'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
AuditEvent['SourceEnum'] = {

    /**
     * value: "CD"
     * @const
     */
    "CD": "CD",

    /**
     * value: "DEVAPI"
     * @const
     */
    "DEVAPI": "DEVAPI"
};


/**
 * Allowed values for the <code>source_description</code> property.
 * @enum {String}
 * @readonly
 */
AuditEvent['SourceDescriptionEnum'] = {

    /**
     * value: "Customer Dashboard"
     * @const
     */
    "Customer Dashboard": "Customer Dashboard",

    /**
     * value: "Developer API"
     * @const
     */
    "Developer API": "Developer API"
};



export default AuditEvent;

