/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextAppCreate from './ContextAppCreate';
import ContextAppCreateCreated from './ContextAppCreateCreated';
import ContextNumberLinking from './ContextNumberLinking';
import ContextNumberUpdate from './ContextNumberUpdate';

/**
 * The AuditEventContext model module.
 * @module model/AuditEventContext
 * @version 1.0.4
 */
class AuditEventContext {
    /**
     * Constructs a new <code>AuditEventContext</code>.
     * A valid JSON object with information detailing the context of the audit event.
     * @alias module:model/AuditEventContext
     * @param {(module:model/ContextAppCreate|module:model/ContextNumberLinking|module:model/ContextNumberUpdate)} instance The actual instance to initialize AuditEventContext.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ContextAppCreate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContextAppCreate.validateJSON(instance); // throw an exception if no match
                // create ContextAppCreate from JS object
                this.actualInstance = ContextAppCreate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContextAppCreate
            errorMessages.push("Failed to construct ContextAppCreate: " + err)
        }

        try {
            if (typeof instance === "ContextNumberLinking") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContextNumberLinking.validateJSON(instance); // throw an exception if no match
                // create ContextNumberLinking from JS object
                this.actualInstance = ContextNumberLinking.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContextNumberLinking
            errorMessages.push("Failed to construct ContextNumberLinking: " + err)
        }

        try {
            if (typeof instance === "ContextNumberUpdate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContextNumberUpdate.validateJSON(instance); // throw an exception if no match
                // create ContextNumberUpdate from JS object
                this.actualInstance = ContextNumberUpdate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContextNumberUpdate
            errorMessages.push("Failed to construct ContextNumberUpdate: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AuditEventContext` with oneOf schemas ContextAppCreate, ContextNumberLinking, ContextNumberUpdate. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AuditEventContext` with oneOf schemas ContextAppCreate, ContextNumberLinking, ContextNumberUpdate. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AuditEventContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditEventContext} obj Optional instance to populate.
     * @return {module:model/AuditEventContext} The populated <code>AuditEventContext</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AuditEventContext(data);
    }

    /**
     * Gets the actual instance, which can be <code>ContextAppCreate</code>, <code>ContextNumberLinking</code>, <code>ContextNumberUpdate</code>.
     * @return {(module:model/ContextAppCreate|module:model/ContextNumberLinking|module:model/ContextNumberUpdate)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ContextAppCreate</code>, <code>ContextNumberLinking</code>, <code>ContextNumberUpdate</code>.
     * @param {(module:model/ContextAppCreate|module:model/ContextNumberLinking|module:model/ContextNumberUpdate)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AuditEventContext.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AuditEventContext from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AuditEventContext} An instance of AuditEventContext.
     */
    static fromJSON = function(json_string){
        return AuditEventContext.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * UUID of the app that was created
 * @member {String} appId
 */
AuditEventContext.prototype['appId'] = undefined;

/**
 * @member {module:model/ContextAppCreateCreated} created
 */
AuditEventContext.prototype['created'] = undefined;

/**
 * Which account the number is associated with
 * @member {String} account
 */
AuditEventContext.prototype['account'] = undefined;

/**
 * UUID of the app the number is being linked/unlinked to
 * @member {String} applicationId
 */
AuditEventContext.prototype['applicationId'] = undefined;

/**
 * The country of the number
 * @member {String} country
 */
AuditEventContext.prototype['country'] = undefined;

/**
 * The phone number linked/unlinked to your application
 * @member {String} msisdn
 */
AuditEventContext.prototype['msisdn'] = undefined;

/**
 * The URL of the endpoint the number has been forwarded to
 * @member {String} http
 */
AuditEventContext.prototype['http'] = undefined;

/**
 * The type of endpoint the number has been forwarded to
 * @member {module:model/AuditEventContext.VoiceTypeEnum} voice-type
 */
AuditEventContext.prototype['voice-type'] = undefined;

/**
 * The value of the endpoint the number has been forwarded to
 * @member {String} voice-value
 */
AuditEventContext.prototype['voice-value'] = undefined;


AuditEventContext.OneOf = ["ContextAppCreate", "ContextNumberLinking", "ContextNumberUpdate"];

export default AuditEventContext;

