/**
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditEvent from '../model/AuditEvent';
import AuditEventTypesResp from '../model/AuditEventTypesResp';
import AuditResp from '../model/AuditResp';
import ErrorForbidden from '../model/ErrorForbidden';
import ErrorNotFound from '../model/ErrorNotFound';
import ErrorUnauthorized from '../model/ErrorUnauthorized';
import EventTypes from '../model/EventTypes';
import NoContent from '../model/NoContent';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.4
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/DefaultApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve individual audit event
     * Get the specified audit event. 
     * @param {String} id The UUID of the audit event to retrieve
     * @param {module:api/DefaultApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditEvent}
     */
    getEvent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditEvent;
      return this.apiClient.callApi(
        '/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/DefaultApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve audit events
     * Get a series of audit events describing changes made to your Vonage API account over time. 
     * @param {Object} opts Optional parameters
     * @param {module:model/EventTypes} [eventType] Filter results by this event type.
     * @param {String} [dateFrom] Start of time range for audit events. DateTime in ISO-8601 format.
     * @param {String} [dateTo] End of time range for audit events. DateTime in ISO-8601 format.
     * @param {String} [searchText] Return only audit events where the JSON object contains this search text. Must be legal text for a JSON attribute value, that is quotes and braces must be escaped.
     * @param {String} [page] Page number starting with page 1.
     * @param {Number} [size = 30)] Number of elements per page.
     * @param {module:api/DefaultApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditResp}
     */
    getEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'event_type': opts['eventType'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'search_text': opts['searchText'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditResp;
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsOptions operation.
     * @callback module:api/DefaultApi~getEventsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditEventTypesResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve audit event types
     * Get audit event types. 
     * @param {module:api/DefaultApi~getEventsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditEventTypesResp}
     */
    getEventsOptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditEventTypesResp;
      return this.apiClient.callApi(
        '/events', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
