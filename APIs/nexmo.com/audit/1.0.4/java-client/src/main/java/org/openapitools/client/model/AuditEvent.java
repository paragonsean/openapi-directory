/*
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.AuditEventContext;
import org.openapitools.client.model.EventLink;
import org.openapitools.client.model.EventTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuditEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:25.545442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditEvent {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private EventLink links;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private AuditEventContext context;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypes eventType;

  public static final String SERIALIZED_NAME_EVENT_TYPE_DESCRIPTION = "event_type_description";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_DESCRIPTION)
  private String eventTypeDescription;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The source of the event. CD: Customer Dashboard DEVAPI: via Developer API 
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    CD("CD"),
    
    DEVAPI("DEVAPI");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public static final String SERIALIZED_NAME_SOURCE_COUNTRY = "source_country";
  @SerializedName(SERIALIZED_NAME_SOURCE_COUNTRY)
  private String sourceCountry;

  /**
   * Description of the audit event source.
   */
  @JsonAdapter(SourceDescriptionEnum.Adapter.class)
  public enum SourceDescriptionEnum {
    CUSTOMER_DASHBOARD("Customer Dashboard"),
    
    DEVELOPER_API("Developer API");

    private String value;

    SourceDescriptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceDescriptionEnum fromValue(String value) {
      for (SourceDescriptionEnum b : SourceDescriptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceDescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceDescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceDescriptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceDescriptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceDescriptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_DESCRIPTION = "source_description";
  @SerializedName(SERIALIZED_NAME_SOURCE_DESCRIPTION)
  private SourceDescriptionEnum sourceDescription;

  public static final String SERIALIZED_NAME_SOURCE_IP = "source_ip";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public AuditEvent() {
  }

  public AuditEvent links(EventLink links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public EventLink getLinks() {
    return links;
  }

  public void setLinks(EventLink links) {
    this.links = links;
  }


  public AuditEvent accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AuditEvent context(AuditEventContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public AuditEventContext getContext() {
    return context;
  }

  public void setContext(AuditEventContext context) {
    this.context = context;
  }


  public AuditEvent createdAt(LocalDate createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the audit event was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public LocalDate getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public AuditEvent eventType(EventTypes eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypes getEventType() {
    return eventType;
  }

  public void setEventType(EventTypes eventType) {
    this.eventType = eventType;
  }


  public AuditEvent eventTypeDescription(String eventTypeDescription) {
    this.eventTypeDescription = eventTypeDescription;
    return this;
  }

  /**
   * A description of the event type
   * @return eventTypeDescription
   */
  @javax.annotation.Nullable
  public String getEventTypeDescription() {
    return eventTypeDescription;
  }

  public void setEventTypeDescription(String eventTypeDescription) {
    this.eventTypeDescription = eventTypeDescription;
  }


  public AuditEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * UUID of the audit event
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AuditEvent source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * The source of the event. CD: Customer Dashboard DEVAPI: via Developer API 
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }


  public AuditEvent sourceCountry(String sourceCountry) {
    this.sourceCountry = sourceCountry;
    return this;
  }

  /**
   * ISO 3166-1 Alpha-2 country code recorded for the event.
   * @return sourceCountry
   */
  @javax.annotation.Nullable
  public String getSourceCountry() {
    return sourceCountry;
  }

  public void setSourceCountry(String sourceCountry) {
    this.sourceCountry = sourceCountry;
  }


  public AuditEvent sourceDescription(SourceDescriptionEnum sourceDescription) {
    this.sourceDescription = sourceDescription;
    return this;
  }

  /**
   * Description of the audit event source.
   * @return sourceDescription
   */
  @javax.annotation.Nullable
  public SourceDescriptionEnum getSourceDescription() {
    return sourceDescription;
  }

  public void setSourceDescription(SourceDescriptionEnum sourceDescription) {
    this.sourceDescription = sourceDescription;
  }


  public AuditEvent sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  /**
   * The IP address used to make the account change.
   * @return sourceIp
   */
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }


  public AuditEvent userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Email of the user whose account the audit event is associated with.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public AuditEvent userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The ID of the user that the audit event is associated with.
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditEvent auditEvent = (AuditEvent) o;
    return Objects.equals(this.links, auditEvent.links) &&
        Objects.equals(this.accountId, auditEvent.accountId) &&
        Objects.equals(this.context, auditEvent.context) &&
        Objects.equals(this.createdAt, auditEvent.createdAt) &&
        Objects.equals(this.eventType, auditEvent.eventType) &&
        Objects.equals(this.eventTypeDescription, auditEvent.eventTypeDescription) &&
        Objects.equals(this.id, auditEvent.id) &&
        Objects.equals(this.source, auditEvent.source) &&
        Objects.equals(this.sourceCountry, auditEvent.sourceCountry) &&
        Objects.equals(this.sourceDescription, auditEvent.sourceDescription) &&
        Objects.equals(this.sourceIp, auditEvent.sourceIp) &&
        Objects.equals(this.userEmail, auditEvent.userEmail) &&
        Objects.equals(this.userId, auditEvent.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, accountId, context, createdAt, eventType, eventTypeDescription, id, source, sourceCountry, sourceDescription, sourceIp, userEmail, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditEvent {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTypeDescription: ").append(toIndentedString(eventTypeDescription)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceCountry: ").append(toIndentedString(sourceCountry)).append("\n");
    sb.append("    sourceDescription: ").append(toIndentedString(sourceDescription)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("account_id");
    openapiFields.add("context");
    openapiFields.add("created_at");
    openapiFields.add("event_type");
    openapiFields.add("event_type_description");
    openapiFields.add("id");
    openapiFields.add("source");
    openapiFields.add("source_country");
    openapiFields.add("source_description");
    openapiFields.add("source_ip");
    openapiFields.add("user_email");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditEvent is not found in the empty JSON string", AuditEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        EventLink.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        AuditEventContext.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `event_type`
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) {
        EventTypes.validateJsonElement(jsonObj.get("event_type"));
      }
      if ((jsonObj.get("event_type_description") != null && !jsonObj.get("event_type_description").isJsonNull()) && !jsonObj.get("event_type_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type_description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("source_country") != null && !jsonObj.get("source_country").isJsonNull()) && !jsonObj.get("source_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_country").toString()));
      }
      if ((jsonObj.get("source_description") != null && !jsonObj.get("source_description").isJsonNull()) && !jsonObj.get("source_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_description").toString()));
      }
      // validate the optional field `source_description`
      if (jsonObj.get("source_description") != null && !jsonObj.get("source_description").isJsonNull()) {
        SourceDescriptionEnum.validateJsonElement(jsonObj.get("source_description"));
      }
      if ((jsonObj.get("source_ip") != null && !jsonObj.get("source_ip").isJsonNull()) && !jsonObj.get("source_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_ip").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditEvent>() {
           @Override
           public void write(JsonWriter out, AuditEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditEvent
   * @throws IOException if the JSON string is invalid with respect to AuditEvent
   */
  public static AuditEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditEvent.class);
  }

  /**
   * Convert an instance of AuditEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

