/*
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContextNumberUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:25.545442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContextNumberUpdate {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private String http;

  public static final String SERIALIZED_NAME_MSISDN = "msisdn";
  @SerializedName(SERIALIZED_NAME_MSISDN)
  private String msisdn;

  /**
   * The type of endpoint the number has been forwarded to
   */
  @JsonAdapter(VoiceTypeEnum.Adapter.class)
  public enum VoiceTypeEnum {
    TEL("tel"),
    
    SIP("sip"),
    
    VXML("vxml"),
    
    APP("app");

    private String value;

    VoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceTypeEnum fromValue(String value) {
      for (VoiceTypeEnum b : VoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOICE_TYPE = "voice-type";
  @SerializedName(SERIALIZED_NAME_VOICE_TYPE)
  private VoiceTypeEnum voiceType;

  public static final String SERIALIZED_NAME_VOICE_VALUE = "voice-value";
  @SerializedName(SERIALIZED_NAME_VOICE_VALUE)
  private String voiceValue;

  public ContextNumberUpdate() {
  }

  public ContextNumberUpdate country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the number
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ContextNumberUpdate http(String http) {
    this.http = http;
    return this;
  }

  /**
   * The URL of the endpoint the number has been forwarded to
   * @return http
   */
  @javax.annotation.Nullable
  public String getHttp() {
    return http;
  }

  public void setHttp(String http) {
    this.http = http;
  }


  public ContextNumberUpdate msisdn(String msisdn) {
    this.msisdn = msisdn;
    return this;
  }

  /**
   * The phone number linked/unlinked to your application
   * @return msisdn
   */
  @javax.annotation.Nullable
  public String getMsisdn() {
    return msisdn;
  }

  public void setMsisdn(String msisdn) {
    this.msisdn = msisdn;
  }


  public ContextNumberUpdate voiceType(VoiceTypeEnum voiceType) {
    this.voiceType = voiceType;
    return this;
  }

  /**
   * The type of endpoint the number has been forwarded to
   * @return voiceType
   */
  @javax.annotation.Nullable
  public VoiceTypeEnum getVoiceType() {
    return voiceType;
  }

  public void setVoiceType(VoiceTypeEnum voiceType) {
    this.voiceType = voiceType;
  }


  public ContextNumberUpdate voiceValue(String voiceValue) {
    this.voiceValue = voiceValue;
    return this;
  }

  /**
   * The value of the endpoint the number has been forwarded to
   * @return voiceValue
   */
  @javax.annotation.Nullable
  public String getVoiceValue() {
    return voiceValue;
  }

  public void setVoiceValue(String voiceValue) {
    this.voiceValue = voiceValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextNumberUpdate contextNumberUpdate = (ContextNumberUpdate) o;
    return Objects.equals(this.country, contextNumberUpdate.country) &&
        Objects.equals(this.http, contextNumberUpdate.http) &&
        Objects.equals(this.msisdn, contextNumberUpdate.msisdn) &&
        Objects.equals(this.voiceType, contextNumberUpdate.voiceType) &&
        Objects.equals(this.voiceValue, contextNumberUpdate.voiceValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, http, msisdn, voiceType, voiceValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextNumberUpdate {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    msisdn: ").append(toIndentedString(msisdn)).append("\n");
    sb.append("    voiceType: ").append(toIndentedString(voiceType)).append("\n");
    sb.append("    voiceValue: ").append(toIndentedString(voiceValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("http");
    openapiFields.add("msisdn");
    openapiFields.add("voice-type");
    openapiFields.add("voice-value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContextNumberUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContextNumberUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContextNumberUpdate is not found in the empty JSON string", ContextNumberUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContextNumberUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContextNumberUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("http") != null && !jsonObj.get("http").isJsonNull()) && !jsonObj.get("http").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http").toString()));
      }
      if ((jsonObj.get("msisdn") != null && !jsonObj.get("msisdn").isJsonNull()) && !jsonObj.get("msisdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msisdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msisdn").toString()));
      }
      if ((jsonObj.get("voice-type") != null && !jsonObj.get("voice-type").isJsonNull()) && !jsonObj.get("voice-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice-type").toString()));
      }
      // validate the optional field `voice-type`
      if (jsonObj.get("voice-type") != null && !jsonObj.get("voice-type").isJsonNull()) {
        VoiceTypeEnum.validateJsonElement(jsonObj.get("voice-type"));
      }
      if ((jsonObj.get("voice-value") != null && !jsonObj.get("voice-value").isJsonNull()) && !jsonObj.get("voice-value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice-value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice-value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContextNumberUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContextNumberUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContextNumberUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContextNumberUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ContextNumberUpdate>() {
           @Override
           public void write(JsonWriter out, ContextNumberUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContextNumberUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContextNumberUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContextNumberUpdate
   * @throws IOException if the JSON string is invalid with respect to ContextNumberUpdate
   */
  public static ContextNumberUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContextNumberUpdate.class);
  }

  /**
   * Convert an instance of ContextNumberUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

