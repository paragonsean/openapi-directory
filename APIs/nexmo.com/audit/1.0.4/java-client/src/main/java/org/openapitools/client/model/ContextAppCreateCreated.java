/*
 * Audit API
 * The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallbackUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContextAppCreateCreated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:25.545442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContextAppCreateCreated {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ANSWER_URL = "answer_url";
  @SerializedName(SERIALIZED_NAME_ANSWER_URL)
  private CallbackUrl answerUrl;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_EVENT_URL = "event_url";
  @SerializedName(SERIALIZED_NAME_EVENT_URL)
  private CallbackUrl eventUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ContextAppCreateCreated() {
  }

  public ContextAppCreateCreated accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Which account the app is associated with
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ContextAppCreateCreated answerUrl(CallbackUrl answerUrl) {
    this.answerUrl = answerUrl;
    return this;
  }

  /**
   * Get answerUrl
   * @return answerUrl
   */
  @javax.annotation.Nullable
  public CallbackUrl getAnswerUrl() {
    return answerUrl;
  }

  public void setAnswerUrl(CallbackUrl answerUrl) {
    this.answerUrl = answerUrl;
  }


  public ContextAppCreateCreated appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * UUID of the app that was created
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public ContextAppCreateCreated eventUrl(CallbackUrl eventUrl) {
    this.eventUrl = eventUrl;
    return this;
  }

  /**
   * Get eventUrl
   * @return eventUrl
   */
  @javax.annotation.Nullable
  public CallbackUrl getEventUrl() {
    return eventUrl;
  }

  public void setEventUrl(CallbackUrl eventUrl) {
    this.eventUrl = eventUrl;
  }


  public ContextAppCreateCreated name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application created
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContextAppCreateCreated type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of application created
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextAppCreateCreated contextAppCreateCreated = (ContextAppCreateCreated) o;
    return Objects.equals(this.accountId, contextAppCreateCreated.accountId) &&
        Objects.equals(this.answerUrl, contextAppCreateCreated.answerUrl) &&
        Objects.equals(this.appId, contextAppCreateCreated.appId) &&
        Objects.equals(this.eventUrl, contextAppCreateCreated.eventUrl) &&
        Objects.equals(this.name, contextAppCreateCreated.name) &&
        Objects.equals(this.type, contextAppCreateCreated.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, answerUrl, appId, eventUrl, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextAppCreateCreated {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    answerUrl: ").append(toIndentedString(answerUrl)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    eventUrl: ").append(toIndentedString(eventUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("answer_url");
    openapiFields.add("appId");
    openapiFields.add("event_url");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContextAppCreateCreated
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContextAppCreateCreated.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContextAppCreateCreated is not found in the empty JSON string", ContextAppCreateCreated.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContextAppCreateCreated.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContextAppCreateCreated` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `answer_url`
      if (jsonObj.get("answer_url") != null && !jsonObj.get("answer_url").isJsonNull()) {
        CallbackUrl.validateJsonElement(jsonObj.get("answer_url"));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      // validate the optional field `event_url`
      if (jsonObj.get("event_url") != null && !jsonObj.get("event_url").isJsonNull()) {
        CallbackUrl.validateJsonElement(jsonObj.get("event_url"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContextAppCreateCreated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContextAppCreateCreated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContextAppCreateCreated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContextAppCreateCreated.class));

       return (TypeAdapter<T>) new TypeAdapter<ContextAppCreateCreated>() {
           @Override
           public void write(JsonWriter out, ContextAppCreateCreated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContextAppCreateCreated read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContextAppCreateCreated given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContextAppCreateCreated
   * @throws IOException if the JSON string is invalid with respect to ContextAppCreateCreated
   */
  public static ContextAppCreateCreated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContextAppCreateCreated.class);
  }

  /**
   * Convert an instance of ContextAppCreateCreated to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

