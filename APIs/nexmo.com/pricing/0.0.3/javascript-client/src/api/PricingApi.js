/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PricingCountriesResponse from '../model/PricingCountriesResponse';
import PricingCountryResponse from '../model/PricingCountryResponse';
import RetrievePricingAllCountries400Response from '../model/RetrievePricingAllCountries400Response';
import RetrievePricingAllCountries401Response from '../model/RetrievePricingAllCountries401Response';

/**
* Pricing service.
* @module api/PricingApi
* @version 0.0.3
*/
export default class PricingApi {

    /**
    * Constructs a new PricingApi. 
    * @alias module:api/PricingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retrievePrefixPricing operation.
     * @callback module:api/PricingApi~retrievePrefixPricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingCountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve outbound pricing for a specific dialing prefix.
     * Retrieves the pricing information based on the dialing prefix. 
     * @param {String} type The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.
     * @param {String} apiKey Your Nexmo API key.
     * @param {String} apiSecret Your Nexmo API secret.
     * @param {String} prefix The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on.
     * @param {module:api/PricingApi~retrievePrefixPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingCountriesResponse}
     */
    retrievePrefixPricing(type, apiKey, apiSecret, prefix, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling retrievePrefixPricing");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrievePrefixPricing");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling retrievePrefixPricing");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling retrievePrefixPricing");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'prefix': prefix
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingCountriesResponse;
      return this.apiClient.callApi(
        '/get-prefix-pricing/outbound/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievePricingAllCountries operation.
     * @callback module:api/PricingApi~retrievePricingAllCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingCountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve outbound pricing for all countries.
     * Retrieves the pricing information for all countries. 
     * @param {String} type The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.
     * @param {String} apiKey Your Nexmo API key.
     * @param {String} apiSecret Your Nexmo API secret.
     * @param {module:api/PricingApi~retrievePricingAllCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingCountriesResponse}
     */
    retrievePricingAllCountries(type, apiKey, apiSecret, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling retrievePricingAllCountries");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrievePricingAllCountries");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling retrievePricingAllCountries");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingCountriesResponse;
      return this.apiClient.callApi(
        '/get-full-pricing/outbound/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievePricingCountry operation.
     * @callback module:api/PricingApi~retrievePricingCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingCountryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve outbound pricing for a specific country.
     * Retrieves the pricing information based on the specified country. 
     * @param {String} type The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.
     * @param {String} apiKey Your Nexmo API key.
     * @param {String} apiSecret Your Nexmo API secret.
     * @param {String} country A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`.
     * @param {module:api/PricingApi~retrievePricingCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingCountryResponse}
     */
    retrievePricingCountry(type, apiKey, apiSecret, country, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling retrievePricingCountry");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrievePricingCountry");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling retrievePricingCountry");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling retrievePricingCountry");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingCountryResponse;
      return this.apiClient.callApi(
        '/get-pricing/outbound/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
