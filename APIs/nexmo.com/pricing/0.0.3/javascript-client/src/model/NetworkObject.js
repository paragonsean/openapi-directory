/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkObject model module.
 * @module model/NetworkObject
 * @version 0.0.3
 */
class NetworkObject {
    /**
     * Constructs a new <code>NetworkObject</code>.
     * @alias module:model/NetworkObject
     */
    constructor() { 
        
        NetworkObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkObject} obj Optional instance to populate.
     * @return {module:model/NetworkObject} The populated <code>NetworkObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkObject();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('mnc')) {
                obj['mnc'] = ApiClient.convertToType(data['mnc'], 'String');
            }
            if (data.hasOwnProperty('networkCode')) {
                obj['networkCode'] = ApiClient.convertToType(data['networkCode'], 'String');
            }
            if (data.hasOwnProperty('networkName')) {
                obj['networkName'] = ApiClient.convertToType(data['networkName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['mnc'] && !(typeof data['mnc'] === 'string' || data['mnc'] instanceof String)) {
            throw new Error("Expected the field `mnc` to be a primitive type in the JSON string but got " + data['mnc']);
        }
        // ensure the json data is a string
        if (data['networkCode'] && !(typeof data['networkCode'] === 'string' || data['networkCode'] instanceof String)) {
            throw new Error("Expected the field `networkCode` to be a primitive type in the JSON string but got " + data['networkCode']);
        }
        // ensure the json data is a string
        if (data['networkName'] && !(typeof data['networkName'] === 'string' || data['networkName'] instanceof String)) {
            throw new Error("Expected the field `networkName` to be a primitive type in the JSON string but got " + data['networkName']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The currency used for prices for this network.
 * @member {String} currency
 */
NetworkObject.prototype['currency'] = undefined;

/**
 * The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.
 * @member {String} mcc
 */
NetworkObject.prototype['mcc'] = undefined;

/**
 * The Mobile Network Code of the operator.
 * @member {String} mnc
 */
NetworkObject.prototype['mnc'] = undefined;

/**
 * The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.
 * @member {String} networkCode
 */
NetworkObject.prototype['networkCode'] = undefined;

/**
 * The company/organisational name of the operator.
 * @member {String} networkName
 */
NetworkObject.prototype['networkName'] = undefined;

/**
 * The cost to send a message or make a call to this network
 * @member {String} price
 */
NetworkObject.prototype['price'] = undefined;

/**
 * The type of network: mobile or landline.
 * @member {String} type
 */
NetworkObject.prototype['type'] = undefined;






export default NetworkObject;

