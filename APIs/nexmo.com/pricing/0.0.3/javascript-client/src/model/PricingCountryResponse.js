/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkObject from './NetworkObject';

/**
 * The PricingCountryResponse model module.
 * @module model/PricingCountryResponse
 * @version 0.0.3
 */
class PricingCountryResponse {
    /**
     * Constructs a new <code>PricingCountryResponse</code>.
     * @alias module:model/PricingCountryResponse
     */
    constructor() { 
        
        PricingCountryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PricingCountryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricingCountryResponse} obj Optional instance to populate.
     * @return {module:model/PricingCountryResponse} The populated <code>PricingCountryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricingCountryResponse();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryDisplayName')) {
                obj['countryDisplayName'] = ApiClient.convertToType(data['countryDisplayName'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('defaultPrice')) {
                obj['defaultPrice'] = ApiClient.convertToType(data['defaultPrice'], 'String');
            }
            if (data.hasOwnProperty('dialingPrefix')) {
                obj['dialingPrefix'] = ApiClient.convertToType(data['dialingPrefix'], 'String');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [NetworkObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricingCountryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricingCountryResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryDisplayName'] && !(typeof data['countryDisplayName'] === 'string' || data['countryDisplayName'] instanceof String)) {
            throw new Error("Expected the field `countryDisplayName` to be a primitive type in the JSON string but got " + data['countryDisplayName']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['defaultPrice'] && !(typeof data['defaultPrice'] === 'string' || data['defaultPrice'] instanceof String)) {
            throw new Error("Expected the field `defaultPrice` to be a primitive type in the JSON string but got " + data['defaultPrice']);
        }
        // ensure the json data is a string
        if (data['dialingPrefix'] && !(typeof data['dialingPrefix'] === 'string' || data['dialingPrefix'] instanceof String)) {
            throw new Error("Expected the field `dialingPrefix` to be a primitive type in the JSON string but got " + data['dialingPrefix']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                NetworkObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Two letter country code.
 * @member {String} countryCode
 */
PricingCountryResponse.prototype['countryCode'] = undefined;

/**
 * Readable country name.
 * @member {String} countryDisplayName
 */
PricingCountryResponse.prototype['countryDisplayName'] = undefined;

/**
 * Readable country name.
 * @member {String} countryName
 */
PricingCountryResponse.prototype['countryName'] = undefined;

/**
 * The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.
 * @member {String} currency
 */
PricingCountryResponse.prototype['currency'] = undefined;

/**
 * The default price.
 * @member {String} defaultPrice
 */
PricingCountryResponse.prototype['defaultPrice'] = undefined;

/**
 * The dialling prefix.
 * @member {String} dialingPrefix
 */
PricingCountryResponse.prototype['dialingPrefix'] = undefined;

/**
 * An array of network objects
 * @member {Array.<module:model/NetworkObject>} networks
 */
PricingCountryResponse.prototype['networks'] = undefined;






export default PricingCountryResponse;

