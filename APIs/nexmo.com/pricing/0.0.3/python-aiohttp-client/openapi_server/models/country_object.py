# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_object import NetworkObject
from openapi_server import util


class CountryObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_display_name: str=None, country_name: str=None, currency: str=None, default_price: str=None, dialing_prefix: str=None, networks: List[NetworkObject]=None):
        """CountryObject - a model defined in OpenAPI

        :param country_display_name: The country_display_name of this CountryObject.
        :param country_name: The country_name of this CountryObject.
        :param currency: The currency of this CountryObject.
        :param default_price: The default_price of this CountryObject.
        :param dialing_prefix: The dialing_prefix of this CountryObject.
        :param networks: The networks of this CountryObject.
        """
        self.openapi_types = {
            'country_display_name': str,
            'country_name': str,
            'currency': str,
            'default_price': str,
            'dialing_prefix': str,
            'networks': List[NetworkObject]
        }

        self.attribute_map = {
            'country_display_name': 'countryDisplayName',
            'country_name': 'countryName',
            'currency': 'currency',
            'default_price': 'defaultPrice',
            'dialing_prefix': 'dialingPrefix',
            'networks': 'networks'
        }

        self._country_display_name = country_display_name
        self._country_name = country_name
        self._currency = currency
        self._default_price = default_price
        self._dialing_prefix = dialing_prefix
        self._networks = networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryObject of this CountryObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_display_name(self):
        """Gets the country_display_name of this CountryObject.

        Readable country name.

        :return: The country_display_name of this CountryObject.
        :rtype: str
        """
        return self._country_display_name

    @country_display_name.setter
    def country_display_name(self, country_display_name):
        """Sets the country_display_name of this CountryObject.

        Readable country name.

        :param country_display_name: The country_display_name of this CountryObject.
        :type country_display_name: str
        """

        self._country_display_name = country_display_name

    @property
    def country_name(self):
        """Gets the country_name of this CountryObject.

        Readable country name.

        :return: The country_name of this CountryObject.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CountryObject.

        Readable country name.

        :param country_name: The country_name of this CountryObject.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this CountryObject.

        The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.

        :return: The currency of this CountryObject.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CountryObject.

        The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.

        :param currency: The currency of this CountryObject.
        :type currency: str
        """

        self._currency = currency

    @property
    def default_price(self):
        """Gets the default_price of this CountryObject.

        The default price.

        :return: The default_price of this CountryObject.
        :rtype: str
        """
        return self._default_price

    @default_price.setter
    def default_price(self, default_price):
        """Sets the default_price of this CountryObject.

        The default price.

        :param default_price: The default_price of this CountryObject.
        :type default_price: str
        """

        self._default_price = default_price

    @property
    def dialing_prefix(self):
        """Gets the dialing_prefix of this CountryObject.

        The dialling prefix.

        :return: The dialing_prefix of this CountryObject.
        :rtype: str
        """
        return self._dialing_prefix

    @dialing_prefix.setter
    def dialing_prefix(self, dialing_prefix):
        """Sets the dialing_prefix of this CountryObject.

        The dialling prefix.

        :param dialing_prefix: The dialing_prefix of this CountryObject.
        :type dialing_prefix: str
        """

        self._dialing_prefix = dialing_prefix

    @property
    def networks(self):
        """Gets the networks of this CountryObject.

        An array of network objects

        :return: The networks of this CountryObject.
        :rtype: List[NetworkObject]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this CountryObject.

        An array of network objects

        :param networks: The networks of this CountryObject.
        :type networks: List[NetworkObject]
        """

        self._networks = networks
