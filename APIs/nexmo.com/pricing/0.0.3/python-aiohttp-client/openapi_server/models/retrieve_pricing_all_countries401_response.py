# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrievePricingAllCountries401Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, currency: str=None, error_code_label: str=None):
        """RetrievePricingAllCountries401Response - a model defined in OpenAPI

        :param code: The code of this RetrievePricingAllCountries401Response.
        :param currency: The currency of this RetrievePricingAllCountries401Response.
        :param error_code_label: The error_code_label of this RetrievePricingAllCountries401Response.
        """
        self.openapi_types = {
            'code': str,
            'currency': str,
            'error_code_label': str
        }

        self.attribute_map = {
            'code': 'code',
            'currency': 'currency',
            'error_code_label': 'error-code-label'
        }

        self._code = code
        self._currency = currency
        self._error_code_label = error_code_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrievePricingAllCountries401Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The retrievePricingAllCountries_401_response of this RetrievePricingAllCountries401Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this RetrievePricingAllCountries401Response.


        :return: The code of this RetrievePricingAllCountries401Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RetrievePricingAllCountries401Response.


        :param code: The code of this RetrievePricingAllCountries401Response.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def currency(self):
        """Gets the currency of this RetrievePricingAllCountries401Response.


        :return: The currency of this RetrievePricingAllCountries401Response.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RetrievePricingAllCountries401Response.


        :param currency: The currency of this RetrievePricingAllCountries401Response.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def error_code_label(self):
        """Gets the error_code_label of this RetrievePricingAllCountries401Response.


        :return: The error_code_label of this RetrievePricingAllCountries401Response.
        :rtype: str
        """
        return self._error_code_label

    @error_code_label.setter
    def error_code_label(self, error_code_label):
        """Sets the error_code_label of this RetrievePricingAllCountries401Response.


        :param error_code_label: The error_code_label of this RetrievePricingAllCountries401Response.
        :type error_code_label: str
        """
        if error_code_label is None:
            raise ValueError("Invalid value for `error_code_label`, must not be `None`")

        self._error_code_label = error_code_label
