# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retrieve_pricing_all_countries400_response_invalid_parameters import RetrievePricingAllCountries400ResponseInvalidParameters
from openapi_server import util


class RetrievePricingAllCountries400Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_title: str=None, invalid_parameters: RetrievePricingAllCountries400ResponseInvalidParameters=None, type: str=None):
        """RetrievePricingAllCountries400Response - a model defined in OpenAPI

        :param error_title: The error_title of this RetrievePricingAllCountries400Response.
        :param invalid_parameters: The invalid_parameters of this RetrievePricingAllCountries400Response.
        :param type: The type of this RetrievePricingAllCountries400Response.
        """
        self.openapi_types = {
            'error_title': str,
            'invalid_parameters': RetrievePricingAllCountries400ResponseInvalidParameters,
            'type': str
        }

        self.attribute_map = {
            'error_title': 'error_title',
            'invalid_parameters': 'invalid_parameters',
            'type': 'type'
        }

        self._error_title = error_title
        self._invalid_parameters = invalid_parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrievePricingAllCountries400Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The retrievePricingAllCountries_400_response of this RetrievePricingAllCountries400Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_title(self):
        """Gets the error_title of this RetrievePricingAllCountries400Response.


        :return: The error_title of this RetrievePricingAllCountries400Response.
        :rtype: str
        """
        return self._error_title

    @error_title.setter
    def error_title(self, error_title):
        """Sets the error_title of this RetrievePricingAllCountries400Response.


        :param error_title: The error_title of this RetrievePricingAllCountries400Response.
        :type error_title: str
        """
        if error_title is None:
            raise ValueError("Invalid value for `error_title`, must not be `None`")

        self._error_title = error_title

    @property
    def invalid_parameters(self):
        """Gets the invalid_parameters of this RetrievePricingAllCountries400Response.


        :return: The invalid_parameters of this RetrievePricingAllCountries400Response.
        :rtype: RetrievePricingAllCountries400ResponseInvalidParameters
        """
        return self._invalid_parameters

    @invalid_parameters.setter
    def invalid_parameters(self, invalid_parameters):
        """Sets the invalid_parameters of this RetrievePricingAllCountries400Response.


        :param invalid_parameters: The invalid_parameters of this RetrievePricingAllCountries400Response.
        :type invalid_parameters: RetrievePricingAllCountries400ResponseInvalidParameters
        """
        if invalid_parameters is None:
            raise ValueError("Invalid value for `invalid_parameters`, must not be `None`")

        self._invalid_parameters = invalid_parameters

    @property
    def type(self):
        """Gets the type of this RetrievePricingAllCountries400Response.


        :return: The type of this RetrievePricingAllCountries400Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RetrievePricingAllCountries400Response.


        :param type: The type of this RetrievePricingAllCountries400Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
