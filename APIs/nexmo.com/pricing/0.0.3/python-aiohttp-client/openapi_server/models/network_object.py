# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, mcc: str=None, mnc: str=None, network_code: str=None, network_name: str=None, price: str=None, type: str=None):
        """NetworkObject - a model defined in OpenAPI

        :param currency: The currency of this NetworkObject.
        :param mcc: The mcc of this NetworkObject.
        :param mnc: The mnc of this NetworkObject.
        :param network_code: The network_code of this NetworkObject.
        :param network_name: The network_name of this NetworkObject.
        :param price: The price of this NetworkObject.
        :param type: The type of this NetworkObject.
        """
        self.openapi_types = {
            'currency': str,
            'mcc': str,
            'mnc': str,
            'network_code': str,
            'network_name': str,
            'price': str,
            'type': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'mcc': 'mcc',
            'mnc': 'mnc',
            'network_code': 'networkCode',
            'network_name': 'networkName',
            'price': 'price',
            'type': 'type'
        }

        self._currency = currency
        self._mcc = mcc
        self._mnc = mnc
        self._network_code = network_code
        self._network_name = network_name
        self._price = price
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkObject of this NetworkObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this NetworkObject.

        The currency used for prices for this network.

        :return: The currency of this NetworkObject.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NetworkObject.

        The currency used for prices for this network.

        :param currency: The currency of this NetworkObject.
        :type currency: str
        """

        self._currency = currency

    @property
    def mcc(self):
        """Gets the mcc of this NetworkObject.

        The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.

        :return: The mcc of this NetworkObject.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this NetworkObject.

        The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.

        :param mcc: The mcc of this NetworkObject.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this NetworkObject.

        The Mobile Network Code of the operator.

        :return: The mnc of this NetworkObject.
        :rtype: str
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this NetworkObject.

        The Mobile Network Code of the operator.

        :param mnc: The mnc of this NetworkObject.
        :type mnc: str
        """

        self._mnc = mnc

    @property
    def network_code(self):
        """Gets the network_code of this NetworkObject.

        The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.

        :return: The network_code of this NetworkObject.
        :rtype: str
        """
        return self._network_code

    @network_code.setter
    def network_code(self, network_code):
        """Sets the network_code of this NetworkObject.

        The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.

        :param network_code: The network_code of this NetworkObject.
        :type network_code: str
        """

        self._network_code = network_code

    @property
    def network_name(self):
        """Gets the network_name of this NetworkObject.

        The company/organisational name of the operator.

        :return: The network_name of this NetworkObject.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this NetworkObject.

        The company/organisational name of the operator.

        :param network_name: The network_name of this NetworkObject.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def price(self):
        """Gets the price of this NetworkObject.

        The cost to send a message or make a call to this network

        :return: The price of this NetworkObject.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NetworkObject.

        The cost to send a message or make a call to this network

        :param price: The price of this NetworkObject.
        :type price: str
        """

        self._price = price

    @property
    def type(self):
        """Gets the type of this NetworkObject.

        The type of network: mobile or landline.

        :return: The type of this NetworkObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkObject.

        The type of network: mobile or landline.

        :param type: The type of this NetworkObject.
        :type type: str
        """

        self._type = type
