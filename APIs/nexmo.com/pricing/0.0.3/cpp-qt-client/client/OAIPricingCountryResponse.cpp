/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingCountryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingCountryResponse::OAIPricingCountryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingCountryResponse::OAIPricingCountryResponse() {
    this->initializeModel();
}

OAIPricingCountryResponse::~OAIPricingCountryResponse() {}

void OAIPricingCountryResponse::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_display_name_isSet = false;
    m_country_display_name_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_default_price_isSet = false;
    m_default_price_isValid = false;

    m_dialing_prefix_isSet = false;
    m_dialing_prefix_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;
}

void OAIPricingCountryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingCountryResponse::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_display_name_isValid = ::OpenAPI::fromJsonValue(m_country_display_name, json[QString("countryDisplayName")]);
    m_country_display_name_isSet = !json[QString("countryDisplayName")].isNull() && m_country_display_name_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_default_price_isValid = ::OpenAPI::fromJsonValue(m_default_price, json[QString("defaultPrice")]);
    m_default_price_isSet = !json[QString("defaultPrice")].isNull() && m_default_price_isValid;

    m_dialing_prefix_isValid = ::OpenAPI::fromJsonValue(m_dialing_prefix, json[QString("dialingPrefix")]);
    m_dialing_prefix_isSet = !json[QString("dialingPrefix")].isNull() && m_dialing_prefix_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;
}

QString OAIPricingCountryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingCountryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_display_name_isSet) {
        obj.insert(QString("countryDisplayName"), ::OpenAPI::toJsonValue(m_country_display_name));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_default_price_isSet) {
        obj.insert(QString("defaultPrice"), ::OpenAPI::toJsonValue(m_default_price));
    }
    if (m_dialing_prefix_isSet) {
        obj.insert(QString("dialingPrefix"), ::OpenAPI::toJsonValue(m_dialing_prefix));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    return obj;
}

QString OAIPricingCountryResponse::getCountryCode() const {
    return m_country_code;
}
void OAIPricingCountryResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPricingCountryResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPricingCountryResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPricingCountryResponse::getCountryDisplayName() const {
    return m_country_display_name;
}
void OAIPricingCountryResponse::setCountryDisplayName(const QString &country_display_name) {
    m_country_display_name = country_display_name;
    m_country_display_name_isSet = true;
}

bool OAIPricingCountryResponse::is_country_display_name_Set() const{
    return m_country_display_name_isSet;
}

bool OAIPricingCountryResponse::is_country_display_name_Valid() const{
    return m_country_display_name_isValid;
}

QString OAIPricingCountryResponse::getCountryName() const {
    return m_country_name;
}
void OAIPricingCountryResponse::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIPricingCountryResponse::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIPricingCountryResponse::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIPricingCountryResponse::getCurrency() const {
    return m_currency;
}
void OAIPricingCountryResponse::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPricingCountryResponse::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPricingCountryResponse::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPricingCountryResponse::getDefaultPrice() const {
    return m_default_price;
}
void OAIPricingCountryResponse::setDefaultPrice(const QString &default_price) {
    m_default_price = default_price;
    m_default_price_isSet = true;
}

bool OAIPricingCountryResponse::is_default_price_Set() const{
    return m_default_price_isSet;
}

bool OAIPricingCountryResponse::is_default_price_Valid() const{
    return m_default_price_isValid;
}

QString OAIPricingCountryResponse::getDialingPrefix() const {
    return m_dialing_prefix;
}
void OAIPricingCountryResponse::setDialingPrefix(const QString &dialing_prefix) {
    m_dialing_prefix = dialing_prefix;
    m_dialing_prefix_isSet = true;
}

bool OAIPricingCountryResponse::is_dialing_prefix_Set() const{
    return m_dialing_prefix_isSet;
}

bool OAIPricingCountryResponse::is_dialing_prefix_Valid() const{
    return m_dialing_prefix_isValid;
}

QList<OAINetworkObject> OAIPricingCountryResponse::getNetworks() const {
    return m_networks;
}
void OAIPricingCountryResponse::setNetworks(const QList<OAINetworkObject> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIPricingCountryResponse::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIPricingCountryResponse::is_networks_Valid() const{
    return m_networks_isValid;
}

bool OAIPricingCountryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialing_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingCountryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
