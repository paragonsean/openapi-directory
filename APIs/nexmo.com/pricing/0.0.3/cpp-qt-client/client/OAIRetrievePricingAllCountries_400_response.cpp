/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrievePricingAllCountries_400_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrievePricingAllCountries_400_response::OAIRetrievePricingAllCountries_400_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrievePricingAllCountries_400_response::OAIRetrievePricingAllCountries_400_response() {
    this->initializeModel();
}

OAIRetrievePricingAllCountries_400_response::~OAIRetrievePricingAllCountries_400_response() {}

void OAIRetrievePricingAllCountries_400_response::initializeModel() {

    m_error_title_isSet = false;
    m_error_title_isValid = false;

    m_invalid_parameters_isSet = false;
    m_invalid_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRetrievePricingAllCountries_400_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrievePricingAllCountries_400_response::fromJsonObject(QJsonObject json) {

    m_error_title_isValid = ::OpenAPI::fromJsonValue(m_error_title, json[QString("error_title")]);
    m_error_title_isSet = !json[QString("error_title")].isNull() && m_error_title_isValid;

    m_invalid_parameters_isValid = ::OpenAPI::fromJsonValue(m_invalid_parameters, json[QString("invalid_parameters")]);
    m_invalid_parameters_isSet = !json[QString("invalid_parameters")].isNull() && m_invalid_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRetrievePricingAllCountries_400_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrievePricingAllCountries_400_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_title_isSet) {
        obj.insert(QString("error_title"), ::OpenAPI::toJsonValue(m_error_title));
    }
    if (m_invalid_parameters.isSet()) {
        obj.insert(QString("invalid_parameters"), ::OpenAPI::toJsonValue(m_invalid_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRetrievePricingAllCountries_400_response::getErrorTitle() const {
    return m_error_title;
}
void OAIRetrievePricingAllCountries_400_response::setErrorTitle(const QString &error_title) {
    m_error_title = error_title;
    m_error_title_isSet = true;
}

bool OAIRetrievePricingAllCountries_400_response::is_error_title_Set() const{
    return m_error_title_isSet;
}

bool OAIRetrievePricingAllCountries_400_response::is_error_title_Valid() const{
    return m_error_title_isValid;
}

OAIRetrievePricingAllCountries_400_response_invalid_parameters OAIRetrievePricingAllCountries_400_response::getInvalidParameters() const {
    return m_invalid_parameters;
}
void OAIRetrievePricingAllCountries_400_response::setInvalidParameters(const OAIRetrievePricingAllCountries_400_response_invalid_parameters &invalid_parameters) {
    m_invalid_parameters = invalid_parameters;
    m_invalid_parameters_isSet = true;
}

bool OAIRetrievePricingAllCountries_400_response::is_invalid_parameters_Set() const{
    return m_invalid_parameters_isSet;
}

bool OAIRetrievePricingAllCountries_400_response::is_invalid_parameters_Valid() const{
    return m_invalid_parameters_isValid;
}

QString OAIRetrievePricingAllCountries_400_response::getType() const {
    return m_type;
}
void OAIRetrievePricingAllCountries_400_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRetrievePricingAllCountries_400_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRetrievePricingAllCountries_400_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRetrievePricingAllCountries_400_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrievePricingAllCountries_400_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_title_isValid && m_invalid_parameters_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
