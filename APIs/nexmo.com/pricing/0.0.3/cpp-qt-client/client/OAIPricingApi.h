/**
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricingApi_H
#define OAI_OAIPricingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPricingCountriesResponse.h"
#include "OAIPricingCountryResponse.h"
#include "OAIRetrievePricingAllCountries_400_response.h"
#include "OAIRetrievePricingAllCountries_401_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricingApi : public QObject {
    Q_OBJECT

public:
    OAIPricingApi(const int timeOut = 0);
    ~OAIPricingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  prefix QString [required]
    */
    virtual void retrievePrefixPricing(const QString &type, const QString &api_key, const QString &api_secret, const QString &prefix);

    /**
    * @param[in]  type QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    */
    virtual void retrievePricingAllCountries(const QString &type, const QString &api_key, const QString &api_secret);

    /**
    * @param[in]  type QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  country QString [required]
    */
    virtual void retrievePricingCountry(const QString &type, const QString &api_key, const QString &api_secret, const QString &country);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void retrievePrefixPricingCallback(OAIHttpRequestWorker *worker);
    void retrievePricingAllCountriesCallback(OAIHttpRequestWorker *worker);
    void retrievePricingCountryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void retrievePrefixPricingSignal(OAIPricingCountriesResponse summary);
    void retrievePricingAllCountriesSignal(OAIPricingCountriesResponse summary);
    void retrievePricingCountrySignal(OAIPricingCountryResponse summary);


    void retrievePrefixPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricingCountriesResponse summary);
    void retrievePricingAllCountriesSignalFull(OAIHttpRequestWorker *worker, OAIPricingCountriesResponse summary);
    void retrievePricingCountrySignalFull(OAIHttpRequestWorker *worker, OAIPricingCountryResponse summary);

    Q_DECL_DEPRECATED_X("Use retrievePrefixPricingSignalError() instead")
    void retrievePrefixPricingSignalE(OAIPricingCountriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePrefixPricingSignalError(OAIPricingCountriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePricingAllCountriesSignalError() instead")
    void retrievePricingAllCountriesSignalE(OAIPricingCountriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePricingAllCountriesSignalError(OAIPricingCountriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePricingCountrySignalError() instead")
    void retrievePricingCountrySignalE(OAIPricingCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePricingCountrySignalError(OAIPricingCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use retrievePrefixPricingSignalErrorFull() instead")
    void retrievePrefixPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePrefixPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePricingAllCountriesSignalErrorFull() instead")
    void retrievePricingAllCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePricingAllCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePricingCountrySignalErrorFull() instead")
    void retrievePricingCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePricingCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
