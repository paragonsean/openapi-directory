/*
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NetworkObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:21.968274-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkObject {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MNC = "mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private String mnc;

  public static final String SERIALIZED_NAME_NETWORK_CODE = "networkCode";
  @SerializedName(SERIALIZED_NAME_NETWORK_CODE)
  private String networkCode;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "networkName";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public NetworkObject() {
  }

  public NetworkObject currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency used for prices for this network.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public NetworkObject mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.
   * @return mcc
   */
  @javax.annotation.Nullable
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public NetworkObject mnc(String mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * The Mobile Network Code of the operator.
   * @return mnc
   */
  @javax.annotation.Nullable
  public String getMnc() {
    return mnc;
  }

  public void setMnc(String mnc) {
    this.mnc = mnc;
  }


  public NetworkObject networkCode(String networkCode) {
    this.networkCode = networkCode;
    return this;
  }

  /**
   * The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.
   * @return networkCode
   */
  @javax.annotation.Nullable
  public String getNetworkCode() {
    return networkCode;
  }

  public void setNetworkCode(String networkCode) {
    this.networkCode = networkCode;
  }


  public NetworkObject networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  /**
   * The company/organisational name of the operator.
   * @return networkName
   */
  @javax.annotation.Nullable
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public NetworkObject price(String price) {
    this.price = price;
    return this;
  }

  /**
   * The cost to send a message or make a call to this network
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public NetworkObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of network: mobile or landline.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkObject networkObject = (NetworkObject) o;
    return Objects.equals(this.currency, networkObject.currency) &&
        Objects.equals(this.mcc, networkObject.mcc) &&
        Objects.equals(this.mnc, networkObject.mnc) &&
        Objects.equals(this.networkCode, networkObject.networkCode) &&
        Objects.equals(this.networkName, networkObject.networkName) &&
        Objects.equals(this.price, networkObject.price) &&
        Objects.equals(this.type, networkObject.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, mcc, mnc, networkCode, networkName, price, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkObject {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    networkCode: ").append(toIndentedString(networkCode)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("mcc");
    openapiFields.add("mnc");
    openapiFields.add("networkCode");
    openapiFields.add("networkName");
    openapiFields.add("price");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkObject is not found in the empty JSON string", NetworkObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonNull()) && !jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if ((jsonObj.get("mnc") != null && !jsonObj.get("mnc").isJsonNull()) && !jsonObj.get("mnc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mnc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mnc").toString()));
      }
      if ((jsonObj.get("networkCode") != null && !jsonObj.get("networkCode").isJsonNull()) && !jsonObj.get("networkCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkCode").toString()));
      }
      if ((jsonObj.get("networkName") != null && !jsonObj.get("networkName").isJsonNull()) && !jsonObj.get("networkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkName").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkObject.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkObject>() {
           @Override
           public void write(JsonWriter out, NetworkObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkObject
   * @throws IOException if the JSON string is invalid with respect to NetworkObject
   */
  public static NetworkObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkObject.class);
  }

  /**
   * Convert an instance of NetworkObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

