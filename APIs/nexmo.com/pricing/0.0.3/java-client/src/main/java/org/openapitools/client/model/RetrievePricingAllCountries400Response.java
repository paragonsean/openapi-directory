/*
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RetrievePricingAllCountries400ResponseInvalidParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetrievePricingAllCountries400Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:21.968274-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetrievePricingAllCountries400Response {
  public static final String SERIALIZED_NAME_ERROR_TITLE = "error_title";
  @SerializedName(SERIALIZED_NAME_ERROR_TITLE)
  private String errorTitle;

  public static final String SERIALIZED_NAME_INVALID_PARAMETERS = "invalid_parameters";
  @SerializedName(SERIALIZED_NAME_INVALID_PARAMETERS)
  private RetrievePricingAllCountries400ResponseInvalidParameters invalidParameters;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RetrievePricingAllCountries400Response() {
  }

  public RetrievePricingAllCountries400Response errorTitle(String errorTitle) {
    this.errorTitle = errorTitle;
    return this;
  }

  /**
   * Get errorTitle
   * @return errorTitle
   */
  @javax.annotation.Nonnull
  public String getErrorTitle() {
    return errorTitle;
  }

  public void setErrorTitle(String errorTitle) {
    this.errorTitle = errorTitle;
  }


  public RetrievePricingAllCountries400Response invalidParameters(RetrievePricingAllCountries400ResponseInvalidParameters invalidParameters) {
    this.invalidParameters = invalidParameters;
    return this;
  }

  /**
   * Get invalidParameters
   * @return invalidParameters
   */
  @javax.annotation.Nonnull
  public RetrievePricingAllCountries400ResponseInvalidParameters getInvalidParameters() {
    return invalidParameters;
  }

  public void setInvalidParameters(RetrievePricingAllCountries400ResponseInvalidParameters invalidParameters) {
    this.invalidParameters = invalidParameters;
  }


  public RetrievePricingAllCountries400Response type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrievePricingAllCountries400Response retrievePricingAllCountries400Response = (RetrievePricingAllCountries400Response) o;
    return Objects.equals(this.errorTitle, retrievePricingAllCountries400Response.errorTitle) &&
        Objects.equals(this.invalidParameters, retrievePricingAllCountries400Response.invalidParameters) &&
        Objects.equals(this.type, retrievePricingAllCountries400Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorTitle, invalidParameters, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrievePricingAllCountries400Response {\n");
    sb.append("    errorTitle: ").append(toIndentedString(errorTitle)).append("\n");
    sb.append("    invalidParameters: ").append(toIndentedString(invalidParameters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_title");
    openapiFields.add("invalid_parameters");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("error_title");
    openapiRequiredFields.add("invalid_parameters");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrievePricingAllCountries400Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrievePricingAllCountries400Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrievePricingAllCountries400Response is not found in the empty JSON string", RetrievePricingAllCountries400Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrievePricingAllCountries400Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrievePricingAllCountries400Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrievePricingAllCountries400Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("error_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_title").toString()));
      }
      // validate the required field `invalid_parameters`
      RetrievePricingAllCountries400ResponseInvalidParameters.validateJsonElement(jsonObj.get("invalid_parameters"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrievePricingAllCountries400Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrievePricingAllCountries400Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrievePricingAllCountries400Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrievePricingAllCountries400Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrievePricingAllCountries400Response>() {
           @Override
           public void write(JsonWriter out, RetrievePricingAllCountries400Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrievePricingAllCountries400Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrievePricingAllCountries400Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrievePricingAllCountries400Response
   * @throws IOException if the JSON string is invalid with respect to RetrievePricingAllCountries400Response
   */
  public static RetrievePricingAllCountries400Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrievePricingAllCountries400Response.class);
  }

  /**
   * Convert an instance of RetrievePricingAllCountries400Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

