/*
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PricingCountriesResponse;
import org.openapitools.client.model.PricingCountryResponse;
import org.openapitools.client.model.RetrievePricingAllCountries400Response;
import org.openapitools.client.model.RetrievePricingAllCountries401Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retrievePrefixPricing
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param prefix The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing countries response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePrefixPricingCall(String type, String apiKey, String apiSecret, String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-prefix-pricing/outbound/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievePrefixPricingValidateBeforeCall(String type, String apiKey, String apiSecret, String prefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling retrievePrefixPricing(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling retrievePrefixPricing(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling retrievePrefixPricing(Async)");
        }

        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling retrievePrefixPricing(Async)");
        }

        return retrievePrefixPricingCall(type, apiKey, apiSecret, prefix, _callback);

    }

    /**
     * Retrieve outbound pricing for a specific dialing prefix.
     * Retrieves the pricing information based on the dialing prefix. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param prefix The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
     * @return PricingCountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing countries response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public PricingCountriesResponse retrievePrefixPricing(String type, String apiKey, String apiSecret, String prefix) throws ApiException {
        ApiResponse<PricingCountriesResponse> localVarResp = retrievePrefixPricingWithHttpInfo(type, apiKey, apiSecret, prefix);
        return localVarResp.getData();
    }

    /**
     * Retrieve outbound pricing for a specific dialing prefix.
     * Retrieves the pricing information based on the dialing prefix. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param prefix The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
     * @return ApiResponse&lt;PricingCountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing countries response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingCountriesResponse> retrievePrefixPricingWithHttpInfo(String type, String apiKey, String apiSecret, String prefix) throws ApiException {
        okhttp3.Call localVarCall = retrievePrefixPricingValidateBeforeCall(type, apiKey, apiSecret, prefix, null);
        Type localVarReturnType = new TypeToken<PricingCountriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve outbound pricing for a specific dialing prefix. (asynchronously)
     * Retrieves the pricing information based on the dialing prefix. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param prefix The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing countries response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePrefixPricingAsync(String type, String apiKey, String apiSecret, String prefix, final ApiCallback<PricingCountriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievePrefixPricingValidateBeforeCall(type, apiKey, apiSecret, prefix, _callback);
        Type localVarReturnType = new TypeToken<PricingCountriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrievePricingAllCountries
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePricingAllCountriesCall(String type, String apiKey, String apiSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-full-pricing/outbound/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievePricingAllCountriesValidateBeforeCall(String type, String apiKey, String apiSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling retrievePricingAllCountries(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling retrievePricingAllCountries(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling retrievePricingAllCountries(Async)");
        }

        return retrievePricingAllCountriesCall(type, apiKey, apiSecret, _callback);

    }

    /**
     * Retrieve outbound pricing for all countries.
     * Retrieves the pricing information for all countries. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @return PricingCountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public PricingCountriesResponse retrievePricingAllCountries(String type, String apiKey, String apiSecret) throws ApiException {
        ApiResponse<PricingCountriesResponse> localVarResp = retrievePricingAllCountriesWithHttpInfo(type, apiKey, apiSecret);
        return localVarResp.getData();
    }

    /**
     * Retrieve outbound pricing for all countries.
     * Retrieves the pricing information for all countries. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @return ApiResponse&lt;PricingCountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingCountriesResponse> retrievePricingAllCountriesWithHttpInfo(String type, String apiKey, String apiSecret) throws ApiException {
        okhttp3.Call localVarCall = retrievePricingAllCountriesValidateBeforeCall(type, apiKey, apiSecret, null);
        Type localVarReturnType = new TypeToken<PricingCountriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve outbound pricing for all countries. (asynchronously)
     * Retrieves the pricing information for all countries. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePricingAllCountriesAsync(String type, String apiKey, String apiSecret, final ApiCallback<PricingCountriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievePricingAllCountriesValidateBeforeCall(type, apiKey, apiSecret, _callback);
        Type localVarReturnType = new TypeToken<PricingCountriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrievePricingCountry
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param country A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, &#x60;CA&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing information for a specific country. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePricingCountryCall(String type, String apiKey, String apiSecret, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-pricing/outbound/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievePricingCountryValidateBeforeCall(String type, String apiKey, String apiSecret, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling retrievePricingCountry(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling retrievePricingCountry(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling retrievePricingCountry(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling retrievePricingCountry(Async)");
        }

        return retrievePricingCountryCall(type, apiKey, apiSecret, country, _callback);

    }

    /**
     * Retrieve outbound pricing for a specific country.
     * Retrieves the pricing information based on the specified country. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param country A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, &#x60;CA&#x60;. (required)
     * @return PricingCountryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing information for a specific country. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public PricingCountryResponse retrievePricingCountry(String type, String apiKey, String apiSecret, String country) throws ApiException {
        ApiResponse<PricingCountryResponse> localVarResp = retrievePricingCountryWithHttpInfo(type, apiKey, apiSecret, country);
        return localVarResp.getData();
    }

    /**
     * Retrieve outbound pricing for a specific country.
     * Retrieves the pricing information based on the specified country. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param country A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, &#x60;CA&#x60;. (required)
     * @return ApiResponse&lt;PricingCountryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing information for a specific country. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingCountryResponse> retrievePricingCountryWithHttpInfo(String type, String apiKey, String apiSecret, String country) throws ApiException {
        okhttp3.Call localVarCall = retrievePricingCountryValidateBeforeCall(type, apiKey, apiSecret, country, null);
        Type localVarReturnType = new TypeToken<PricingCountryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve outbound pricing for a specific country. (asynchronously)
     * Retrieves the pricing information based on the specified country. 
     * @param type The type of service you wish to retrieve data about: either &#x60;sms&#x60;, &#x60;sms-transit&#x60; or &#x60;voice&#x60;. (required)
     * @param apiKey Your Nexmo API key. (required)
     * @param apiSecret Your Nexmo API secret. (required)
     * @param country A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, &#x60;CA&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pricing information for a specific country. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. You probably provided an invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You did not provide valid credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The page you requested was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You made too many requests. The API is rate limited to one request per second. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePricingCountryAsync(String type, String apiKey, String apiSecret, String country, final ApiCallback<PricingCountryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievePricingCountryValidateBeforeCall(type, apiKey, apiSecret, country, _callback);
        Type localVarReturnType = new TypeToken<PricingCountryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
