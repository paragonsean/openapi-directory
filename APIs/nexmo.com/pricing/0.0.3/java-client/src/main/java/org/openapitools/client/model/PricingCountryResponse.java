/*
 * Pricing API
 * The API to retrieve pricing information. Please note the Pricing API is rate limited to one request per second.
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NetworkObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PricingCountryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:21.968274-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingCountryResponse {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_DISPLAY_NAME = "countryDisplayName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_DISPLAY_NAME)
  private String countryDisplayName;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEFAULT_PRICE = "defaultPrice";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRICE)
  private String defaultPrice;

  public static final String SERIALIZED_NAME_DIALING_PREFIX = "dialingPrefix";
  @SerializedName(SERIALIZED_NAME_DIALING_PREFIX)
  private String dialingPrefix;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkObject> networks = new ArrayList<>();

  public PricingCountryResponse() {
  }

  public PricingCountryResponse countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Two letter country code.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PricingCountryResponse countryDisplayName(String countryDisplayName) {
    this.countryDisplayName = countryDisplayName;
    return this;
  }

  /**
   * Readable country name.
   * @return countryDisplayName
   */
  @javax.annotation.Nullable
  public String getCountryDisplayName() {
    return countryDisplayName;
  }

  public void setCountryDisplayName(String countryDisplayName) {
    this.countryDisplayName = countryDisplayName;
  }


  public PricingCountryResponse countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Readable country name.
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public PricingCountryResponse currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency that your account is being billed in (by default &#x60;Euros—EUR&#x60;). Can change in the Dashboard to US Dollars—USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PricingCountryResponse defaultPrice(String defaultPrice) {
    this.defaultPrice = defaultPrice;
    return this;
  }

  /**
   * The default price.
   * @return defaultPrice
   */
  @javax.annotation.Nullable
  public String getDefaultPrice() {
    return defaultPrice;
  }

  public void setDefaultPrice(String defaultPrice) {
    this.defaultPrice = defaultPrice;
  }


  public PricingCountryResponse dialingPrefix(String dialingPrefix) {
    this.dialingPrefix = dialingPrefix;
    return this;
  }

  /**
   * The dialling prefix.
   * @return dialingPrefix
   */
  @javax.annotation.Nullable
  public String getDialingPrefix() {
    return dialingPrefix;
  }

  public void setDialingPrefix(String dialingPrefix) {
    this.dialingPrefix = dialingPrefix;
  }


  public PricingCountryResponse networks(List<NetworkObject> networks) {
    this.networks = networks;
    return this;
  }

  public PricingCountryResponse addNetworksItem(NetworkObject networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * An array of network objects
   * @return networks
   */
  @javax.annotation.Nullable
  public List<NetworkObject> getNetworks() {
    return networks;
  }

  public void setNetworks(List<NetworkObject> networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingCountryResponse pricingCountryResponse = (PricingCountryResponse) o;
    return Objects.equals(this.countryCode, pricingCountryResponse.countryCode) &&
        Objects.equals(this.countryDisplayName, pricingCountryResponse.countryDisplayName) &&
        Objects.equals(this.countryName, pricingCountryResponse.countryName) &&
        Objects.equals(this.currency, pricingCountryResponse.currency) &&
        Objects.equals(this.defaultPrice, pricingCountryResponse.defaultPrice) &&
        Objects.equals(this.dialingPrefix, pricingCountryResponse.dialingPrefix) &&
        Objects.equals(this.networks, pricingCountryResponse.networks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, countryDisplayName, countryName, currency, defaultPrice, dialingPrefix, networks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingCountryResponse {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryDisplayName: ").append(toIndentedString(countryDisplayName)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    defaultPrice: ").append(toIndentedString(defaultPrice)).append("\n");
    sb.append("    dialingPrefix: ").append(toIndentedString(dialingPrefix)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("countryDisplayName");
    openapiFields.add("countryName");
    openapiFields.add("currency");
    openapiFields.add("defaultPrice");
    openapiFields.add("dialingPrefix");
    openapiFields.add("networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingCountryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingCountryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingCountryResponse is not found in the empty JSON string", PricingCountryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingCountryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingCountryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("countryDisplayName") != null && !jsonObj.get("countryDisplayName").isJsonNull()) && !jsonObj.get("countryDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryDisplayName").toString()));
      }
      if ((jsonObj.get("countryName") != null && !jsonObj.get("countryName").isJsonNull()) && !jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("defaultPrice") != null && !jsonObj.get("defaultPrice").isJsonNull()) && !jsonObj.get("defaultPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPrice").toString()));
      }
      if ((jsonObj.get("dialingPrefix") != null && !jsonObj.get("dialingPrefix").isJsonNull()) && !jsonObj.get("dialingPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialingPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialingPrefix").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            NetworkObject.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingCountryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingCountryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingCountryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingCountryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingCountryResponse>() {
           @Override
           public void write(JsonWriter out, PricingCountryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingCountryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingCountryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingCountryResponse
   * @throws IOException if the JSON string is invalid with respect to PricingCountryResponse
   */
  public static PricingCountryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingCountryResponse.class);
  }

  /**
   * Convert an instance of PricingCountryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

