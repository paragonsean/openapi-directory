/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate_1_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate_1_template::OAITemplate_1_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate_1_template::OAITemplate_1_template() {
    this->initializeModel();
}

OAITemplate_1_template::~OAITemplate_1_template() {}

void OAITemplate_1_template::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAITemplate_1_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate_1_template::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAITemplate_1_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate_1_template::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAITemplate_1_template::getName() const {
    return m_name;
}
void OAITemplate_1_template::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplate_1_template::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplate_1_template::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITemplate_1_template::getParameters() const {
    return m_parameters;
}
void OAITemplate_1_template::setParameters(const QList<QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITemplate_1_template::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITemplate_1_template::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAITemplate_1_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate_1_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
