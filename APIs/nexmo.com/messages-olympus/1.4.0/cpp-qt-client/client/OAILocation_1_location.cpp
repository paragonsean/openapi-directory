/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation_1_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation_1_location::OAILocation_1_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation_1_location::OAILocation_1_location() {
    this->initializeModel();
}

OAILocation_1_location::~OAILocation_1_location() {}

void OAILocation_1_location::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILocation_1_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation_1_location::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILocation_1_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation_1_location::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAILocation_1_location::getAddress() const {
    return m_address;
}
void OAILocation_1_location::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation_1_location::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation_1_location::is_address_Valid() const{
    return m_address_isValid;
}

double OAILocation_1_location::getLat() const {
    return m_lat;
}
void OAILocation_1_location::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAILocation_1_location::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAILocation_1_location::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAILocation_1_location::getRLong() const {
    return m_r_long;
}
void OAILocation_1_location::setRLong(const double &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAILocation_1_location::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAILocation_1_location::is_r_long_Valid() const{
    return m_r_long_isValid;
}

QString OAILocation_1_location::getName() const {
    return m_name;
}
void OAILocation_1_location::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation_1_location::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation_1_location::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILocation_1_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation_1_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lat_isValid && m_r_long_isValid && true;
}

} // namespace OpenAPI
