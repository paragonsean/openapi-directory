/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatsApp_oneOf_5_allOf_file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatsApp_oneOf_5_allOf_file::OAIWhatsApp_oneOf_5_allOf_file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatsApp_oneOf_5_allOf_file::OAIWhatsApp_oneOf_5_allOf_file() {
    this->initializeModel();
}

OAIWhatsApp_oneOf_5_allOf_file::~OAIWhatsApp_oneOf_5_allOf_file() {}

void OAIWhatsApp_oneOf_5_allOf_file::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWhatsApp_oneOf_5_allOf_file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatsApp_oneOf_5_allOf_file::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWhatsApp_oneOf_5_allOf_file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatsApp_oneOf_5_allOf_file::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWhatsApp_oneOf_5_allOf_file::getCaption() const {
    return m_caption;
}
void OAIWhatsApp_oneOf_5_allOf_file::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIWhatsApp_oneOf_5_allOf_file::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIWhatsApp_oneOf_5_allOf_file::is_caption_Valid() const{
    return m_caption_isValid;
}

QJsonValue OAIWhatsApp_oneOf_5_allOf_file::getUrl() const {
    return m_url;
}
void OAIWhatsApp_oneOf_5_allOf_file::setUrl(const QJsonValue &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWhatsApp_oneOf_5_allOf_file::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWhatsApp_oneOf_5_allOf_file::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWhatsApp_oneOf_5_allOf_file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatsApp_oneOf_5_allOf_file::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
