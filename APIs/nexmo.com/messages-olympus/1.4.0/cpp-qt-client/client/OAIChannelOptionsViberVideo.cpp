/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelOptionsViberVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelOptionsViberVideo::OAIChannelOptionsViberVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelOptionsViberVideo::OAIChannelOptionsViberVideo() {
    this->initializeModel();
}

OAIChannelOptionsViberVideo::~OAIChannelOptionsViberVideo() {}

void OAIChannelOptionsViberVideo::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_viber_service_isSet = false;
    m_viber_service_isValid = false;
}

void OAIChannelOptionsViberVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelOptionsViberVideo::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_viber_service_isValid = ::OpenAPI::fromJsonValue(m_viber_service, json[QString("viber_service")]);
    m_viber_service_isSet = !json[QString("viber_service")].isNull() && m_viber_service_isValid;
}

QString OAIChannelOptionsViberVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelOptionsViberVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_viber_service.isSet()) {
        obj.insert(QString("viber_service"), ::OpenAPI::toJsonValue(m_viber_service));
    }
    return obj;
}

QString OAIChannelOptionsViberVideo::getChannel() const {
    return m_channel;
}
void OAIChannelOptionsViberVideo::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChannelOptionsViberVideo::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChannelOptionsViberVideo::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIChannelOptionsViberVideo::getFrom() const {
    return m_from;
}
void OAIChannelOptionsViberVideo::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIChannelOptionsViberVideo::is_from_Set() const{
    return m_from_isSet;
}

bool OAIChannelOptionsViberVideo::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIChannelOptionsViberVideo::getTo() const {
    return m_to;
}
void OAIChannelOptionsViberVideo::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIChannelOptionsViberVideo::is_to_Set() const{
    return m_to_isSet;
}

bool OAIChannelOptionsViberVideo::is_to_Valid() const{
    return m_to_isValid;
}

OAIChannelOptionsViberVideo_viber_service OAIChannelOptionsViberVideo::getViberService() const {
    return m_viber_service;
}
void OAIChannelOptionsViberVideo::setViberService(const OAIChannelOptionsViberVideo_viber_service &viber_service) {
    m_viber_service = viber_service;
    m_viber_service_isSet = true;
}

bool OAIChannelOptionsViberVideo::is_viber_service_Set() const{
    return m_viber_service_isSet;
}

bool OAIChannelOptionsViberVideo::is_viber_service_Valid() const{
    return m_viber_service_isValid;
}

bool OAIChannelOptionsViberVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viber_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelOptionsViberVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
