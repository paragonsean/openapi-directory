/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudio::OAIAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudio::OAIAudio() {
    this->initializeModel();
}

OAIAudio::~OAIAudio() {}

void OAIAudio::initializeModel() {

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("message_type")]);
    m_message_type_isSet = !json[QString("message_type")].isNull() && m_message_type_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("message_type"), ::OpenAPI::toJsonValue(m_message_type));
    }
    return obj;
}

QString OAIAudio::getClientRef() const {
    return m_client_ref;
}
void OAIAudio::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIAudio::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIAudio::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIAudio_1_audio OAIAudio::getAudio() const {
    return m_audio;
}
void OAIAudio::setAudio(const OAIAudio_1_audio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIAudio::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIAudio::is_audio_Valid() const{
    return m_audio_isValid;
}

QString OAIAudio::getMessageType() const {
    return m_message_type;
}
void OAIAudio::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIAudio::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIAudio::is_message_type_Valid() const{
    return m_message_type_isValid;
}

bool OAIAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_isValid && m_message_type_isValid && true;
}

} // namespace OpenAPI
