/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelOptionsViberVideo_viber_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelOptionsViberVideo_viber_service::OAIChannelOptionsViberVideo_viber_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelOptionsViberVideo_viber_service::OAIChannelOptionsViberVideo_viber_service() {
    this->initializeModel();
}

OAIChannelOptionsViberVideo_viber_service::~OAIChannelOptionsViberVideo_viber_service() {}

void OAIChannelOptionsViberVideo_viber_service::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannelOptionsViberVideo_viber_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelOptionsViberVideo_viber_service::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannelOptionsViberVideo_viber_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelOptionsViberVideo_viber_service::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChannelOptionsViberVideo_viber_service::getCategory() const {
    return m_category;
}
void OAIChannelOptionsViberVideo_viber_service::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIChannelOptionsViberVideo_viber_service::is_category_Set() const{
    return m_category_isSet;
}

bool OAIChannelOptionsViberVideo_viber_service::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIChannelOptionsViberVideo_viber_service::getDuration() const {
    return m_duration;
}
void OAIChannelOptionsViberVideo_viber_service::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIChannelOptionsViberVideo_viber_service::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIChannelOptionsViberVideo_viber_service::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIChannelOptionsViberVideo_viber_service::getFileSize() const {
    return m_file_size;
}
void OAIChannelOptionsViberVideo_viber_service::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIChannelOptionsViberVideo_viber_service::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIChannelOptionsViberVideo_viber_service::is_file_size_Valid() const{
    return m_file_size_isValid;
}

qint32 OAIChannelOptionsViberVideo_viber_service::getTtl() const {
    return m_ttl;
}
void OAIChannelOptionsViberVideo_viber_service::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIChannelOptionsViberVideo_viber_service::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIChannelOptionsViberVideo_viber_service::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIChannelOptionsViberVideo_viber_service::getType() const {
    return m_type;
}
void OAIChannelOptionsViberVideo_viber_service::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelOptionsViberVideo_viber_service::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelOptionsViberVideo_viber_service::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannelOptionsViberVideo_viber_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelOptionsViberVideo_viber_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
