/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatsApp_oneOf_5.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatsApp_oneOf_5::OAIWhatsApp_oneOf_5(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatsApp_oneOf_5::OAIWhatsApp_oneOf_5() {
    this->initializeModel();
}

OAIWhatsApp_oneOf_5::~OAIWhatsApp_oneOf_5() {}

void OAIWhatsApp_oneOf_5::initializeModel() {

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIWhatsApp_oneOf_5::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatsApp_oneOf_5::fromJsonObject(QJsonObject json) {

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("message_type")]);
    m_message_type_isSet = !json[QString("message_type")].isNull() && m_message_type_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIWhatsApp_oneOf_5::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatsApp_oneOf_5::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("message_type"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIWhatsApp_oneOf_5::getClientRef() const {
    return m_client_ref;
}
void OAIWhatsApp_oneOf_5::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIWhatsApp_oneOf_5::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIWhatsApp_oneOf_5_allOf_file OAIWhatsApp_oneOf_5::getFile() const {
    return m_file;
}
void OAIWhatsApp_oneOf_5::setFile(const OAIWhatsApp_oneOf_5_allOf_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_file_Set() const{
    return m_file_isSet;
}

bool OAIWhatsApp_oneOf_5::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIWhatsApp_oneOf_5::getMessageType() const {
    return m_message_type;
}
void OAIWhatsApp_oneOf_5::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIWhatsApp_oneOf_5::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIWhatsApp_oneOf_5::getChannel() const {
    return m_channel;
}
void OAIWhatsApp_oneOf_5::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIWhatsApp_oneOf_5::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIWhatsApp_oneOf_5::getFrom() const {
    return m_from;
}
void OAIWhatsApp_oneOf_5::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_from_Set() const{
    return m_from_isSet;
}

bool OAIWhatsApp_oneOf_5::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIWhatsApp_oneOf_5::getTo() const {
    return m_to;
}
void OAIWhatsApp_oneOf_5::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIWhatsApp_oneOf_5::is_to_Set() const{
    return m_to_isSet;
}

bool OAIWhatsApp_oneOf_5::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIWhatsApp_oneOf_5::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatsApp_oneOf_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_isValid && m_message_type_isValid && m_channel_isValid && m_from_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
