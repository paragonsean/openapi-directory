/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatsApp_oneOf_6_allOf_whatsapp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatsApp_oneOf_6_allOf_whatsapp::OAIWhatsApp_oneOf_6_allOf_whatsapp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatsApp_oneOf_6_allOf_whatsapp::OAIWhatsApp_oneOf_6_allOf_whatsapp() {
    this->initializeModel();
}

OAIWhatsApp_oneOf_6_allOf_whatsapp::~OAIWhatsApp_oneOf_6_allOf_whatsapp() {}

void OAIWhatsApp_oneOf_6_allOf_whatsapp::initializeModel() {

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIWhatsApp_oneOf_6_allOf_whatsapp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatsApp_oneOf_6_allOf_whatsapp::fromJsonObject(QJsonObject json) {

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIWhatsApp_oneOf_6_allOf_whatsapp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatsApp_oneOf_6_allOf_whatsapp::asJsonObject() const {
    QJsonObject obj;
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIWhatsApp_oneOf_6_allOf_whatsapp::getLocale() const {
    return m_locale;
}
void OAIWhatsApp_oneOf_6_allOf_whatsapp::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIWhatsApp_oneOf_6_allOf_whatsapp::getPolicy() const {
    return m_policy;
}
void OAIWhatsApp_oneOf_6_allOf_whatsapp::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatsApp_oneOf_6_allOf_whatsapp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_locale_isValid && true;
}

} // namespace OpenAPI
