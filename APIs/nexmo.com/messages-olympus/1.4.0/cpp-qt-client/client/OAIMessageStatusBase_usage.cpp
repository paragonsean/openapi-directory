/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatusBase_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatusBase_usage::OAIMessageStatusBase_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatusBase_usage::OAIMessageStatusBase_usage() {
    this->initializeModel();
}

OAIMessageStatusBase_usage::~OAIMessageStatusBase_usage() {}

void OAIMessageStatusBase_usage::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIMessageStatusBase_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatusBase_usage::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIMessageStatusBase_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatusBase_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAIMessageStatusBase_usage::getCurrency() const {
    return m_currency;
}
void OAIMessageStatusBase_usage::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMessageStatusBase_usage::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMessageStatusBase_usage::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIMessageStatusBase_usage::getPrice() const {
    return m_price;
}
void OAIMessageStatusBase_usage::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIMessageStatusBase_usage::is_price_Set() const{
    return m_price_isSet;
}

bool OAIMessageStatusBase_usage::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIMessageStatusBase_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatusBase_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
