/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatsApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatsApp::OAIWhatsApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatsApp::OAIWhatsApp() {
    this->initializeModel();
}

OAIWhatsApp::~OAIWhatsApp() {}

void OAIWhatsApp::initializeModel() {

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_whatsapp_isSet = false;
    m_whatsapp_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;
}

void OAIWhatsApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatsApp::fromJsonObject(QJsonObject json) {

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("message_type")]);
    m_message_type_isSet = !json[QString("message_type")].isNull() && m_message_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_whatsapp_isValid = ::OpenAPI::fromJsonValue(m_whatsapp, json[QString("whatsapp")]);
    m_whatsapp_isSet = !json[QString("whatsapp")].isNull() && m_whatsapp_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;
}

QString OAIWhatsApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatsApp::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("message_type"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_whatsapp.isSet()) {
        obj.insert(QString("whatsapp"), ::OpenAPI::toJsonValue(m_whatsapp));
    }
    if (m_custom.size() > 0) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    return obj;
}

QString OAIWhatsApp::getClientRef() const {
    return m_client_ref;
}
void OAIWhatsApp::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIWhatsApp::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIWhatsApp::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAIWhatsApp::getMessageType() const {
    return m_message_type;
}
void OAIWhatsApp::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIWhatsApp::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIWhatsApp::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QJsonValue OAIWhatsApp::getText() const {
    return m_text;
}
void OAIWhatsApp::setText(const QJsonValue &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIWhatsApp::is_text_Set() const{
    return m_text_isSet;
}

bool OAIWhatsApp::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIWhatsApp::getChannel() const {
    return m_channel;
}
void OAIWhatsApp::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIWhatsApp::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIWhatsApp::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIWhatsApp::getFrom() const {
    return m_from;
}
void OAIWhatsApp::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIWhatsApp::is_from_Set() const{
    return m_from_isSet;
}

bool OAIWhatsApp::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIWhatsApp::getTo() const {
    return m_to;
}
void OAIWhatsApp::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIWhatsApp::is_to_Set() const{
    return m_to_isSet;
}

bool OAIWhatsApp::is_to_Valid() const{
    return m_to_isValid;
}

OAILocation_1_location OAIWhatsApp::getLocation() const {
    return m_location;
}
void OAIWhatsApp::setLocation(const OAILocation_1_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIWhatsApp::is_location_Set() const{
    return m_location_isSet;
}

bool OAIWhatsApp::is_location_Valid() const{
    return m_location_isValid;
}

OAIWhatsApp_oneOf_2_allOf_image OAIWhatsApp::getImage() const {
    return m_image;
}
void OAIWhatsApp::setImage(const OAIWhatsApp_oneOf_2_allOf_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIWhatsApp::is_image_Set() const{
    return m_image_isSet;
}

bool OAIWhatsApp::is_image_Valid() const{
    return m_image_isValid;
}

OAIWhatsApp_oneOf_3_allOf_audio OAIWhatsApp::getAudio() const {
    return m_audio;
}
void OAIWhatsApp::setAudio(const OAIWhatsApp_oneOf_3_allOf_audio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIWhatsApp::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIWhatsApp::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIWhatsApp_oneOf_4_allOf_video OAIWhatsApp::getVideo() const {
    return m_video;
}
void OAIWhatsApp::setVideo(const OAIWhatsApp_oneOf_4_allOf_video &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIWhatsApp::is_video_Set() const{
    return m_video_isSet;
}

bool OAIWhatsApp::is_video_Valid() const{
    return m_video_isValid;
}

OAIWhatsApp_oneOf_5_allOf_file OAIWhatsApp::getFile() const {
    return m_file;
}
void OAIWhatsApp::setFile(const OAIWhatsApp_oneOf_5_allOf_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIWhatsApp::is_file_Set() const{
    return m_file_isSet;
}

bool OAIWhatsApp::is_file_Valid() const{
    return m_file_isValid;
}

OAITemplate_1_template OAIWhatsApp::getRTemplate() const {
    return m_r_template;
}
void OAIWhatsApp::setRTemplate(const OAITemplate_1_template &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIWhatsApp::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIWhatsApp::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIWhatsApp_oneOf_6_allOf_whatsapp OAIWhatsApp::getWhatsapp() const {
    return m_whatsapp;
}
void OAIWhatsApp::setWhatsapp(const OAIWhatsApp_oneOf_6_allOf_whatsapp &whatsapp) {
    m_whatsapp = whatsapp;
    m_whatsapp_isSet = true;
}

bool OAIWhatsApp::is_whatsapp_Set() const{
    return m_whatsapp_isSet;
}

bool OAIWhatsApp::is_whatsapp_Valid() const{
    return m_whatsapp_isValid;
}

QMap<QString, QJsonValue> OAIWhatsApp::getCustom() const {
    return m_custom;
}
void OAIWhatsApp::setCustom(const QMap<QString, QJsonValue> &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIWhatsApp::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIWhatsApp::is_custom_Valid() const{
    return m_custom_isValid;
}

bool OAIWhatsApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whatsapp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatsApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_type_isValid && m_text_isValid && m_channel_isValid && m_from_isValid && m_to_isValid && m_location_isValid && m_image_isValid && m_audio_isValid && m_video_isValid && m_file_isValid && m_r_template_isValid && m_whatsapp_isValid && true;
}

} // namespace OpenAPI
