/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatsApp_oneOf_6.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatsApp_oneOf_6::OAIWhatsApp_oneOf_6(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatsApp_oneOf_6::OAIWhatsApp_oneOf_6() {
    this->initializeModel();
}

OAIWhatsApp_oneOf_6::~OAIWhatsApp_oneOf_6() {}

void OAIWhatsApp_oneOf_6::initializeModel() {

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_whatsapp_isSet = false;
    m_whatsapp_isValid = false;
}

void OAIWhatsApp_oneOf_6::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatsApp_oneOf_6::fromJsonObject(QJsonObject json) {

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("message_type")]);
    m_message_type_isSet = !json[QString("message_type")].isNull() && m_message_type_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_whatsapp_isValid = ::OpenAPI::fromJsonValue(m_whatsapp, json[QString("whatsapp")]);
    m_whatsapp_isSet = !json[QString("whatsapp")].isNull() && m_whatsapp_isValid;
}

QString OAIWhatsApp_oneOf_6::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatsApp_oneOf_6::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("message_type"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_whatsapp.isSet()) {
        obj.insert(QString("whatsapp"), ::OpenAPI::toJsonValue(m_whatsapp));
    }
    return obj;
}

QString OAIWhatsApp_oneOf_6::getClientRef() const {
    return m_client_ref;
}
void OAIWhatsApp_oneOf_6::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIWhatsApp_oneOf_6::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAIWhatsApp_oneOf_6::getMessageType() const {
    return m_message_type;
}
void OAIWhatsApp_oneOf_6::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIWhatsApp_oneOf_6::is_message_type_Valid() const{
    return m_message_type_isValid;
}

OAITemplate_1_template OAIWhatsApp_oneOf_6::getRTemplate() const {
    return m_r_template;
}
void OAIWhatsApp_oneOf_6::setRTemplate(const OAITemplate_1_template &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIWhatsApp_oneOf_6::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIWhatsApp_oneOf_6::getChannel() const {
    return m_channel;
}
void OAIWhatsApp_oneOf_6::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIWhatsApp_oneOf_6::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIWhatsApp_oneOf_6::getFrom() const {
    return m_from;
}
void OAIWhatsApp_oneOf_6::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_from_Set() const{
    return m_from_isSet;
}

bool OAIWhatsApp_oneOf_6::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIWhatsApp_oneOf_6::getTo() const {
    return m_to;
}
void OAIWhatsApp_oneOf_6::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_to_Set() const{
    return m_to_isSet;
}

bool OAIWhatsApp_oneOf_6::is_to_Valid() const{
    return m_to_isValid;
}

OAIWhatsApp_oneOf_6_allOf_whatsapp OAIWhatsApp_oneOf_6::getWhatsapp() const {
    return m_whatsapp;
}
void OAIWhatsApp_oneOf_6::setWhatsapp(const OAIWhatsApp_oneOf_6_allOf_whatsapp &whatsapp) {
    m_whatsapp = whatsapp;
    m_whatsapp_isSet = true;
}

bool OAIWhatsApp_oneOf_6::is_whatsapp_Set() const{
    return m_whatsapp_isSet;
}

bool OAIWhatsApp_oneOf_6::is_whatsapp_Valid() const{
    return m_whatsapp_isValid;
}

bool OAIWhatsApp_oneOf_6::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whatsapp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatsApp_oneOf_6::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_type_isValid && m_r_template_isValid && m_channel_isValid && m_from_isValid && m_to_isValid && m_whatsapp_isValid && true;
}

} // namespace OpenAPI
