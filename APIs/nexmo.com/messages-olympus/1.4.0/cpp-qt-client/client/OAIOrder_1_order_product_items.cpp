/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder_1_order_product_items.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder_1_order_product_items::OAIOrder_1_order_product_items(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder_1_order_product_items::OAIOrder_1_order_product_items() {
    this->initializeModel();
}

OAIOrder_1_order_product_items::~OAIOrder_1_order_product_items() {}

void OAIOrder_1_order_product_items::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_item_price_isSet = false;
    m_item_price_isValid = false;

    m_product_retailer_id_isSet = false;
    m_product_retailer_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIOrder_1_order_product_items::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder_1_order_product_items::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_item_price_isValid = ::OpenAPI::fromJsonValue(m_item_price, json[QString("item_price")]);
    m_item_price_isSet = !json[QString("item_price")].isNull() && m_item_price_isValid;

    m_product_retailer_id_isValid = ::OpenAPI::fromJsonValue(m_product_retailer_id, json[QString("product_retailer_id")]);
    m_product_retailer_id_isSet = !json[QString("product_retailer_id")].isNull() && m_product_retailer_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIOrder_1_order_product_items::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder_1_order_product_items::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_item_price_isSet) {
        obj.insert(QString("item_price"), ::OpenAPI::toJsonValue(m_item_price));
    }
    if (m_product_retailer_id_isSet) {
        obj.insert(QString("product_retailer_id"), ::OpenAPI::toJsonValue(m_product_retailer_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAIOrder_1_order_product_items::getCurrency() const {
    return m_currency;
}
void OAIOrder_1_order_product_items::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrder_1_order_product_items::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrder_1_order_product_items::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIOrder_1_order_product_items::getItemPrice() const {
    return m_item_price;
}
void OAIOrder_1_order_product_items::setItemPrice(const QString &item_price) {
    m_item_price = item_price;
    m_item_price_isSet = true;
}

bool OAIOrder_1_order_product_items::is_item_price_Set() const{
    return m_item_price_isSet;
}

bool OAIOrder_1_order_product_items::is_item_price_Valid() const{
    return m_item_price_isValid;
}

QString OAIOrder_1_order_product_items::getProductRetailerId() const {
    return m_product_retailer_id;
}
void OAIOrder_1_order_product_items::setProductRetailerId(const QString &product_retailer_id) {
    m_product_retailer_id = product_retailer_id;
    m_product_retailer_id_isSet = true;
}

bool OAIOrder_1_order_product_items::is_product_retailer_id_Set() const{
    return m_product_retailer_id_isSet;
}

bool OAIOrder_1_order_product_items::is_product_retailer_id_Valid() const{
    return m_product_retailer_id_isValid;
}

QString OAIOrder_1_order_product_items::getQuantity() const {
    return m_quantity;
}
void OAIOrder_1_order_product_items::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrder_1_order_product_items::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrder_1_order_product_items::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIOrder_1_order_product_items::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_retailer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder_1_order_product_items::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
