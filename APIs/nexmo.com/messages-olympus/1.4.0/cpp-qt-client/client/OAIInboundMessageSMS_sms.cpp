/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundMessageSMS_sms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundMessageSMS_sms::OAIInboundMessageSMS_sms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundMessageSMS_sms::OAIInboundMessageSMS_sms() {
    this->initializeModel();
}

OAIInboundMessageSMS_sms::~OAIInboundMessageSMS_sms() {}

void OAIInboundMessageSMS_sms::initializeModel() {

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_num_messages_isSet = false;
    m_num_messages_isValid = false;
}

void OAIInboundMessageSMS_sms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundMessageSMS_sms::fromJsonObject(QJsonObject json) {

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_num_messages_isValid = ::OpenAPI::fromJsonValue(m_num_messages, json[QString("num_messages")]);
    m_num_messages_isSet = !json[QString("num_messages")].isNull() && m_num_messages_isValid;
}

QString OAIInboundMessageSMS_sms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundMessageSMS_sms::asJsonObject() const {
    QJsonObject obj;
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_num_messages_isSet) {
        obj.insert(QString("num_messages"), ::OpenAPI::toJsonValue(m_num_messages));
    }
    return obj;
}

QString OAIInboundMessageSMS_sms::getKeyword() const {
    return m_keyword;
}
void OAIInboundMessageSMS_sms::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIInboundMessageSMS_sms::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIInboundMessageSMS_sms::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIInboundMessageSMS_sms::getNumMessages() const {
    return m_num_messages;
}
void OAIInboundMessageSMS_sms::setNumMessages(const QString &num_messages) {
    m_num_messages = num_messages;
    m_num_messages_isSet = true;
}

bool OAIInboundMessageSMS_sms::is_num_messages_Set() const{
    return m_num_messages_isSet;
}

bool OAIInboundMessageSMS_sms::is_num_messages_Valid() const{
    return m_num_messages_isValid;
}

bool OAIInboundMessageSMS_sms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_messages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundMessageSMS_sms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
