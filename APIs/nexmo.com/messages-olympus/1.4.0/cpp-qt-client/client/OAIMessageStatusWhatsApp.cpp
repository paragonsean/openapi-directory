/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatusWhatsApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatusWhatsApp::OAIMessageStatusWhatsApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatusWhatsApp::OAIMessageStatusWhatsApp() {
    this->initializeModel();
}

OAIMessageStatusWhatsApp::~OAIMessageStatusWhatsApp() {}

void OAIMessageStatusWhatsApp::initializeModel() {

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_uuid_isSet = false;
    m_message_uuid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_whatsapp_isSet = false;
    m_whatsapp_isValid = false;
}

void OAIMessageStatusWhatsApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatusWhatsApp::fromJsonObject(QJsonObject json) {

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_uuid_isValid = ::OpenAPI::fromJsonValue(m_message_uuid, json[QString("message_uuid")]);
    m_message_uuid_isSet = !json[QString("message_uuid")].isNull() && m_message_uuid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_whatsapp_isValid = ::OpenAPI::fromJsonValue(m_whatsapp, json[QString("whatsapp")]);
    m_whatsapp_isSet = !json[QString("whatsapp")].isNull() && m_whatsapp_isValid;
}

QString OAIMessageStatusWhatsApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatusWhatsApp::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_uuid_isSet) {
        obj.insert(QString("message_uuid"), ::OpenAPI::toJsonValue(m_message_uuid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_whatsapp.isSet()) {
        obj.insert(QString("whatsapp"), ::OpenAPI::toJsonValue(m_whatsapp));
    }
    return obj;
}

QString OAIMessageStatusWhatsApp::getClientRef() const {
    return m_client_ref;
}
void OAIMessageStatusWhatsApp::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAIMessageStatusWhatsApp::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIMessageStatusBase_error OAIMessageStatusWhatsApp::getError() const {
    return m_error;
}
void OAIMessageStatusWhatsApp::setError(const OAIMessageStatusBase_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMessageStatusWhatsApp::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIMessageStatusWhatsApp::getFrom() const {
    return m_from;
}
void OAIMessageStatusWhatsApp::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessageStatusWhatsApp::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessageStatusWhatsApp::getMessageUuid() const {
    return m_message_uuid;
}
void OAIMessageStatusWhatsApp::setMessageUuid(const QString &message_uuid) {
    m_message_uuid = message_uuid;
    m_message_uuid_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_message_uuid_Set() const{
    return m_message_uuid_isSet;
}

bool OAIMessageStatusWhatsApp::is_message_uuid_Valid() const{
    return m_message_uuid_isValid;
}

QString OAIMessageStatusWhatsApp::getStatus() const {
    return m_status;
}
void OAIMessageStatusWhatsApp::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessageStatusWhatsApp::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessageStatusWhatsApp::getTimestamp() const {
    return m_timestamp;
}
void OAIMessageStatusWhatsApp::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMessageStatusWhatsApp::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIMessageStatusWhatsApp::getTo() const {
    return m_to;
}
void OAIMessageStatusWhatsApp::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessageStatusWhatsApp::is_to_Valid() const{
    return m_to_isValid;
}

OAIWhatsApp_1_usage OAIMessageStatusWhatsApp::getUsage() const {
    return m_usage;
}
void OAIMessageStatusWhatsApp::setUsage(const OAIWhatsApp_1_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIMessageStatusWhatsApp::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIMessageStatusWhatsApp::getChannel() const {
    return m_channel;
}
void OAIMessageStatusWhatsApp::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIMessageStatusWhatsApp::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIWhatsApp_1_whatsapp OAIMessageStatusWhatsApp::getWhatsapp() const {
    return m_whatsapp;
}
void OAIMessageStatusWhatsApp::setWhatsapp(const OAIWhatsApp_1_whatsapp &whatsapp) {
    m_whatsapp = whatsapp;
    m_whatsapp_isSet = true;
}

bool OAIMessageStatusWhatsApp::is_whatsapp_Set() const{
    return m_whatsapp_isSet;
}

bool OAIMessageStatusWhatsApp::is_whatsapp_Valid() const{
    return m_whatsapp_isValid;
}

bool OAIMessageStatusWhatsApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whatsapp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatusWhatsApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_message_uuid_isValid && m_status_isValid && m_timestamp_isValid && m_to_isValid && m_channel_isValid && true;
}

} // namespace OpenAPI
