# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContextWhatsappReferredProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, product_retailer_id: str=None):
        """ContextWhatsappReferredProduct - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ContextWhatsappReferredProduct.
        :param product_retailer_id: The product_retailer_id of this ContextWhatsappReferredProduct.
        """
        self.openapi_types = {
            'catalog_id': str,
            'product_retailer_id': str
        }

        self.attribute_map = {
            'catalog_id': 'catalog_id',
            'product_retailer_id': 'product_retailer_id'
        }

        self._catalog_id = catalog_id
        self._product_retailer_id = product_retailer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextWhatsappReferredProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Context_whatsapp_referred_product of this ContextWhatsappReferredProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ContextWhatsappReferredProduct.

        The ID of the catalog associated with the product from the `product` message being quoted or replied to using the 'Message Business' option.

        :return: The catalog_id of this ContextWhatsappReferredProduct.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ContextWhatsappReferredProduct.

        The ID of the catalog associated with the product from the `product` message being quoted or replied to using the 'Message Business' option.

        :param catalog_id: The catalog_id of this ContextWhatsappReferredProduct.
        :type catalog_id: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")

        self._catalog_id = catalog_id

    @property
    def product_retailer_id(self):
        """Gets the product_retailer_id of this ContextWhatsappReferredProduct.

        The ID of the product from the `product` message being quoted or replied to using the 'Message Business' option.

        :return: The product_retailer_id of this ContextWhatsappReferredProduct.
        :rtype: str
        """
        return self._product_retailer_id

    @product_retailer_id.setter
    def product_retailer_id(self, product_retailer_id):
        """Sets the product_retailer_id of this ContextWhatsappReferredProduct.

        The ID of the product from the `product` message being quoted or replied to using the 'Message Business' option.

        :param product_retailer_id: The product_retailer_id of this ContextWhatsappReferredProduct.
        :type product_retailer_id: str
        """
        if product_retailer_id is None:
            raise ValueError("Invalid value for `product_retailer_id`, must not be `None`")

        self._product_retailer_id = product_retailer_id
