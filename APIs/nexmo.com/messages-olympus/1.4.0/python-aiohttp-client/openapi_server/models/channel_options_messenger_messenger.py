# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelOptionsMessengerMessenger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, tag: str=None):
        """ChannelOptionsMessengerMessenger - a model defined in OpenAPI

        :param category: The category of this ChannelOptionsMessengerMessenger.
        :param tag: The tag of this ChannelOptionsMessengerMessenger.
        """
        self.openapi_types = {
            'category': str,
            'tag': str
        }

        self.attribute_map = {
            'category': 'category',
            'tag': 'tag'
        }

        self._category = category
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelOptionsMessengerMessenger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelOptionsMessenger_messenger of this ChannelOptionsMessengerMessenger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ChannelOptionsMessengerMessenger.

        The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.

        :return: The category of this ChannelOptionsMessengerMessenger.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ChannelOptionsMessengerMessenger.

        The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.

        :param category: The category of this ChannelOptionsMessengerMessenger.
        :type category: str
        """
        allowed_values = ["response", "update", "message_tag"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def tag(self):
        """Gets the tag of this ChannelOptionsMessengerMessenger.

        A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)

        :return: The tag of this ChannelOptionsMessengerMessenger.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ChannelOptionsMessengerMessenger.

        A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)

        :param tag: The tag of this ChannelOptionsMessengerMessenger.
        :type tag: str
        """

        self._tag = tag
