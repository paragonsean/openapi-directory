# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_options_messenger_messenger import ChannelOptionsMessengerMessenger
from openapi_server.models.messenger_one_of3_all_of_video import MessengerOneOf3AllOfVideo
from openapi_server import util


class MessengerOneOf3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_ref: str=None, message_type: str=None, video: MessengerOneOf3AllOfVideo=None, channel: str=None, _from: str=None, messenger: ChannelOptionsMessengerMessenger=None, to: str=None):
        """MessengerOneOf3 - a model defined in OpenAPI

        :param client_ref: The client_ref of this MessengerOneOf3.
        :param message_type: The message_type of this MessengerOneOf3.
        :param video: The video of this MessengerOneOf3.
        :param channel: The channel of this MessengerOneOf3.
        :param _from: The _from of this MessengerOneOf3.
        :param messenger: The messenger of this MessengerOneOf3.
        :param to: The to of this MessengerOneOf3.
        """
        self.openapi_types = {
            'client_ref': str,
            'message_type': str,
            'video': MessengerOneOf3AllOfVideo,
            'channel': str,
            '_from': str,
            'messenger': ChannelOptionsMessengerMessenger,
            'to': str
        }

        self.attribute_map = {
            'client_ref': 'client_ref',
            'message_type': 'message_type',
            'video': 'video',
            'channel': 'channel',
            '_from': 'from',
            'messenger': 'messenger',
            'to': 'to'
        }

        self._client_ref = client_ref
        self._message_type = message_type
        self._video = video
        self._channel = channel
        self.__from = _from
        self._messenger = messenger
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessengerOneOf3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Messenger_oneOf_3 of this MessengerOneOf3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_ref(self):
        """Gets the client_ref of this MessengerOneOf3.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :return: The client_ref of this MessengerOneOf3.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this MessengerOneOf3.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :param client_ref: The client_ref of this MessengerOneOf3.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def message_type(self):
        """Gets the message_type of this MessengerOneOf3.

        The type of message to send. You must provide `video` in this field

        :return: The message_type of this MessengerOneOf3.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessengerOneOf3.

        The type of message to send. You must provide `video` in this field

        :param message_type: The message_type of this MessengerOneOf3.
        :type message_type: str
        """
        allowed_values = ["video"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def video(self):
        """Gets the video of this MessengerOneOf3.


        :return: The video of this MessengerOneOf3.
        :rtype: MessengerOneOf3AllOfVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this MessengerOneOf3.


        :param video: The video of this MessengerOneOf3.
        :type video: MessengerOneOf3AllOfVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video

    @property
    def channel(self):
        """Gets the channel of this MessengerOneOf3.

        The channel to send to. You must provide `messenger` in this field

        :return: The channel of this MessengerOneOf3.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MessengerOneOf3.

        The channel to send to. You must provide `messenger` in this field

        :param channel: The channel of this MessengerOneOf3.
        :type channel: str
        """
        allowed_values = ["messenger"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def _from(self):
        """Gets the _from of this MessengerOneOf3.

        The ID of the message sender 

        :return: The _from of this MessengerOneOf3.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MessengerOneOf3.

        The ID of the message sender 

        :param _from: The _from of this MessengerOneOf3.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")
        if _from is not None and len(_from) > 50:
            raise ValueError("Invalid value for `_from`, length must be less than or equal to `50`")
        if _from is not None and len(_from) < 1:
            raise ValueError("Invalid value for `_from`, length must be greater than or equal to `1`")

        self.__from = _from

    @property
    def messenger(self):
        """Gets the messenger of this MessengerOneOf3.


        :return: The messenger of this MessengerOneOf3.
        :rtype: ChannelOptionsMessengerMessenger
        """
        return self._messenger

    @messenger.setter
    def messenger(self, messenger):
        """Sets the messenger of this MessengerOneOf3.


        :param messenger: The messenger of this MessengerOneOf3.
        :type messenger: ChannelOptionsMessengerMessenger
        """

        self._messenger = messenger

    @property
    def to(self):
        """Gets the to of this MessengerOneOf3.

        The ID of the message recipient 

        :return: The to of this MessengerOneOf3.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessengerOneOf3.

        The ID of the message recipient 

        :param to: The to of this MessengerOneOf3.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")
        if to is not None and len(to) > 50:
            raise ValueError("Invalid value for `to`, length must be less than or equal to `50`")
        if to is not None and len(to) < 1:
            raise ValueError("Invalid value for `to`, length must be greater than or equal to `1`")

        self._to = to
