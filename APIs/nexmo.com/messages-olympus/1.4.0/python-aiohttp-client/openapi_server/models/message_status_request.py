# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_status_base_error import MessageStatusBaseError
from openapi_server.models.message_status_base_usage import MessageStatusBaseUsage
from openapi_server.models.message_status_mms import MessageStatusMMS
from openapi_server.models.message_status_messenger import MessageStatusMessenger
from openapi_server.models.message_status_sms import MessageStatusSMS
from openapi_server.models.message_status_viber import MessageStatusViber
from openapi_server.models.message_status_whats_app import MessageStatusWhatsApp
from openapi_server.models.whats_app1_whatsapp import WhatsApp1Whatsapp
from openapi_server import util


class MessageStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_ref: str=None, error: MessageStatusBaseError=None, _from: str=None, message_uuid: str=None, status: str=None, timestamp: str=None, to: str=None, usage: MessageStatusBaseUsage=None, channel: str=None, whatsapp: WhatsApp1Whatsapp=None):
        """MessageStatusRequest - a model defined in OpenAPI

        :param client_ref: The client_ref of this MessageStatusRequest.
        :param error: The error of this MessageStatusRequest.
        :param _from: The _from of this MessageStatusRequest.
        :param message_uuid: The message_uuid of this MessageStatusRequest.
        :param status: The status of this MessageStatusRequest.
        :param timestamp: The timestamp of this MessageStatusRequest.
        :param to: The to of this MessageStatusRequest.
        :param usage: The usage of this MessageStatusRequest.
        :param channel: The channel of this MessageStatusRequest.
        :param whatsapp: The whatsapp of this MessageStatusRequest.
        """
        self.openapi_types = {
            'client_ref': str,
            'error': MessageStatusBaseError,
            '_from': str,
            'message_uuid': str,
            'status': str,
            'timestamp': str,
            'to': str,
            'usage': MessageStatusBaseUsage,
            'channel': str,
            'whatsapp': WhatsApp1Whatsapp
        }

        self.attribute_map = {
            'client_ref': 'client_ref',
            'error': 'error',
            '_from': 'from',
            'message_uuid': 'message_uuid',
            'status': 'status',
            'timestamp': 'timestamp',
            'to': 'to',
            'usage': 'usage',
            'channel': 'channel',
            'whatsapp': 'whatsapp'
        }

        self._client_ref = client_ref
        self._error = error
        self.__from = _from
        self._message_uuid = message_uuid
        self._status = status
        self._timestamp = timestamp
        self._to = to
        self._usage = usage
        self._channel = channel
        self._whatsapp = whatsapp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The message_status_request of this MessageStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_ref(self):
        """Gets the client_ref of this MessageStatusRequest.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :return: The client_ref of this MessageStatusRequest.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this MessageStatusRequest.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :param client_ref: The client_ref of this MessageStatusRequest.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def error(self):
        """Gets the error of this MessageStatusRequest.


        :return: The error of this MessageStatusRequest.
        :rtype: MessageStatusBaseError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MessageStatusRequest.


        :param error: The error of this MessageStatusRequest.
        :type error: MessageStatusBaseError
        """

        self._error = error

    @property
    def _from(self):
        """Gets the _from of this MessageStatusRequest.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :return: The _from of this MessageStatusRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MessageStatusRequest.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :param _from: The _from of this MessageStatusRequest.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def message_uuid(self):
        """Gets the message_uuid of this MessageStatusRequest.

        The UUID of the message

        :return: The message_uuid of this MessageStatusRequest.
        :rtype: str
        """
        return self._message_uuid

    @message_uuid.setter
    def message_uuid(self, message_uuid):
        """Sets the message_uuid of this MessageStatusRequest.

        The UUID of the message

        :param message_uuid: The message_uuid of this MessageStatusRequest.
        :type message_uuid: str
        """
        if message_uuid is None:
            raise ValueError("Invalid value for `message_uuid`, must not be `None`")

        self._message_uuid = message_uuid

    @property
    def status(self):
        """Gets the status of this MessageStatusRequest.


        :return: The status of this MessageStatusRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageStatusRequest.


        :param status: The status of this MessageStatusRequest.
        :type status: str
        """
        allowed_values = ["submitted", "delivered", "rejected", "undeliverable", "read"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this MessageStatusRequest.

        The datetime of when the event occurred, in `ISO 8601` format.

        :return: The timestamp of this MessageStatusRequest.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MessageStatusRequest.

        The datetime of when the event occurred, in `ISO 8601` format.

        :param timestamp: The timestamp of this MessageStatusRequest.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def to(self):
        """Gets the to of this MessageStatusRequest.

        The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 

        :return: The to of this MessageStatusRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessageStatusRequest.

        The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 

        :param to: The to of this MessageStatusRequest.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")
        if to is not None and len(to) > 15:
            raise ValueError("Invalid value for `to`, length must be less than or equal to `15`")
        if to is not None and len(to) < 7:
            raise ValueError("Invalid value for `to`, length must be greater than or equal to `7`")

        self._to = to

    @property
    def usage(self):
        """Gets the usage of this MessageStatusRequest.


        :return: The usage of this MessageStatusRequest.
        :rtype: MessageStatusBaseUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this MessageStatusRequest.


        :param usage: The usage of this MessageStatusRequest.
        :type usage: MessageStatusBaseUsage
        """

        self._usage = usage

    @property
    def channel(self):
        """Gets the channel of this MessageStatusRequest.

        The channel sending to.

        :return: The channel of this MessageStatusRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MessageStatusRequest.

        The channel sending to.

        :param channel: The channel of this MessageStatusRequest.
        :type channel: str
        """
        allowed_values = ["viber_service"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def whatsapp(self):
        """Gets the whatsapp of this MessageStatusRequest.


        :return: The whatsapp of this MessageStatusRequest.
        :rtype: WhatsApp1Whatsapp
        """
        return self._whatsapp

    @whatsapp.setter
    def whatsapp(self, whatsapp):
        """Sets the whatsapp of this MessageStatusRequest.


        :param whatsapp: The whatsapp of this MessageStatusRequest.
        :type whatsapp: WhatsApp1Whatsapp
        """

        self._whatsapp = whatsapp
