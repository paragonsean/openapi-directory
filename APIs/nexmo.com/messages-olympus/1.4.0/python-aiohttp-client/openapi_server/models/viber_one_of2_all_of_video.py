# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViberOneOf2AllOfVideo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, thumb_url: str=None, url: str=None):
        """ViberOneOf2AllOfVideo - a model defined in OpenAPI

        :param caption: The caption of this ViberOneOf2AllOfVideo.
        :param thumb_url: The thumb_url of this ViberOneOf2AllOfVideo.
        :param url: The url of this ViberOneOf2AllOfVideo.
        """
        self.openapi_types = {
            'caption': str,
            'thumb_url': str,
            'url': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'thumb_url': 'thumb_url',
            'url': 'url'
        }

        self._caption = caption
        self._thumb_url = thumb_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViberOneOf2AllOfVideo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Viber_oneOf_2_allOf_video of this ViberOneOf2AllOfVideo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this ViberOneOf2AllOfVideo.

        Text caption to accompany message.

        :return: The caption of this ViberOneOf2AllOfVideo.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ViberOneOf2AllOfVideo.

        Text caption to accompany message.

        :param caption: The caption of this ViberOneOf2AllOfVideo.
        :type caption: str
        """

        self._caption = caption

    @property
    def thumb_url(self):
        """Gets the thumb_url of this ViberOneOf2AllOfVideo.

        URL to an image file for a thumbnail preview of the video.

        :return: The thumb_url of this ViberOneOf2AllOfVideo.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this ViberOneOf2AllOfVideo.

        URL to an image file for a thumbnail preview of the video.

        :param thumb_url: The thumb_url of this ViberOneOf2AllOfVideo.
        :type thumb_url: str
        """
        if thumb_url is None:
            raise ValueError("Invalid value for `thumb_url`, must not be `None`")
        if thumb_url is not None and len(thumb_url) > 1000:
            raise ValueError("Invalid value for `thumb_url`, length must be less than or equal to `1000`")

        self._thumb_url = thumb_url

    @property
    def url(self):
        """Gets the url of this ViberOneOf2AllOfVideo.

        The URL of the video attachment.

        :return: The url of this ViberOneOf2AllOfVideo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ViberOneOf2AllOfVideo.

        The URL of the video attachment.

        :param url: The url of this ViberOneOf2AllOfVideo.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
