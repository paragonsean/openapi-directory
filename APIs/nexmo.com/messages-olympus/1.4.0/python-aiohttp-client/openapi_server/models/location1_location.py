# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location1Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, lat: float=None, long: float=None, name: str=None):
        """Location1Location - a model defined in OpenAPI

        :param address: The address of this Location1Location.
        :param lat: The lat of this Location1Location.
        :param long: The long of this Location1Location.
        :param name: The name of this Location1Location.
        """
        self.openapi_types = {
            'address': str,
            'lat': float,
            'long': float,
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'lat': 'lat',
            'long': 'long',
            'name': 'name'
        }

        self._address = address
        self._lat = lat
        self._long = long
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location1Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location_1_location of this Location1Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location1Location.

        Address of the location. Only displayed if `name` is present.

        :return: The address of this Location1Location.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location1Location.

        Address of the location. Only displayed if `name` is present.

        :param address: The address of this Location1Location.
        :type address: str
        """

        self._address = address

    @property
    def lat(self):
        """Gets the lat of this Location1Location.

        Latitude of the location.

        :return: The lat of this Location1Location.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location1Location.

        Latitude of the location.

        :param lat: The lat of this Location1Location.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this Location1Location.

        Longitude of the location.

        :return: The long of this Location1Location.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this Location1Location.

        Longitude of the location.

        :param long: The long of this Location1Location.
        :type long: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")

        self._long = long

    @property
    def name(self):
        """Gets the name of this Location1Location.

        Name of the location.

        :return: The name of this Location1Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location1Location.

        Name of the location.

        :param name: The name of this Location1Location.
        :type name: str
        """

        self._name = name
