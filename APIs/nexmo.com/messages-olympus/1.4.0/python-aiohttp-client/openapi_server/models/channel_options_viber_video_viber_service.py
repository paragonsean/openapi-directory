# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelOptionsViberVideoViberService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, duration: str=None, file_size: str=None, ttl: int=None, type: str=None):
        """ChannelOptionsViberVideoViberService - a model defined in OpenAPI

        :param category: The category of this ChannelOptionsViberVideoViberService.
        :param duration: The duration of this ChannelOptionsViberVideoViberService.
        :param file_size: The file_size of this ChannelOptionsViberVideoViberService.
        :param ttl: The ttl of this ChannelOptionsViberVideoViberService.
        :param type: The type of this ChannelOptionsViberVideoViberService.
        """
        self.openapi_types = {
            'category': str,
            'duration': str,
            'file_size': str,
            'ttl': int,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'duration': 'duration',
            'file_size': 'file_size',
            'ttl': 'ttl',
            'type': 'type'
        }

        self._category = category
        self._duration = duration
        self._file_size = file_size
        self._ttl = ttl
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelOptionsViberVideoViberService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelOptionsViberVideo_viber_service of this ChannelOptionsViberVideoViberService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ChannelOptionsViberVideoViberService.

        The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.

        :return: The category of this ChannelOptionsViberVideoViberService.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ChannelOptionsViberVideoViberService.

        The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.

        :param category: The category of this ChannelOptionsViberVideoViberService.
        :type category: str
        """
        allowed_values = ["transaction", "promotion"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def duration(self):
        """Gets the duration of this ChannelOptionsViberVideoViberService.

        The duration of the video in seconds.

        :return: The duration of this ChannelOptionsViberVideoViberService.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ChannelOptionsViberVideoViberService.

        The duration of the video in seconds.

        :param duration: The duration of this ChannelOptionsViberVideoViberService.
        :type duration: str
        """

        self._duration = duration

    @property
    def file_size(self):
        """Gets the file_size of this ChannelOptionsViberVideoViberService.

        The file size of the video in MB.

        :return: The file_size of this ChannelOptionsViberVideoViberService.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this ChannelOptionsViberVideoViberService.

        The file size of the video in MB.

        :param file_size: The file_size of this ChannelOptionsViberVideoViberService.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def ttl(self):
        """Gets the ttl of this ChannelOptionsViberVideoViberService.

        Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.

        :return: The ttl of this ChannelOptionsViberVideoViberService.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ChannelOptionsViberVideoViberService.

        Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.

        :param ttl: The ttl of this ChannelOptionsViberVideoViberService.
        :type ttl: int
        """
        if ttl is not None and ttl > 259200:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `259200`")
        if ttl is not None and ttl < 30:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `30`")

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this ChannelOptionsViberVideoViberService.

        Viber-specific type definition. To use \"template\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)

        :return: The type of this ChannelOptionsViberVideoViberService.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChannelOptionsViberVideoViberService.

        Viber-specific type definition. To use \"template\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)

        :param type: The type of this ChannelOptionsViberVideoViberService.
        :type type: str
        """

        self._type = type
