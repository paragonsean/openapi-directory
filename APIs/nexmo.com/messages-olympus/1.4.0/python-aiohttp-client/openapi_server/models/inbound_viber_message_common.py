# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_viber_message_common_context import InboundViberMessageCommonContext
from openapi_server import util


class InboundViberMessageCommon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, context: InboundViberMessageCommonContext=None, _from: str=None, message_uuid: str=None, timestamp: str=None, to: str=None):
        """InboundViberMessageCommon - a model defined in OpenAPI

        :param channel: The channel of this InboundViberMessageCommon.
        :param context: The context of this InboundViberMessageCommon.
        :param _from: The _from of this InboundViberMessageCommon.
        :param message_uuid: The message_uuid of this InboundViberMessageCommon.
        :param timestamp: The timestamp of this InboundViberMessageCommon.
        :param to: The to of this InboundViberMessageCommon.
        """
        self.openapi_types = {
            'channel': str,
            'context': InboundViberMessageCommonContext,
            '_from': str,
            'message_uuid': str,
            'timestamp': str,
            'to': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'context': 'context',
            '_from': 'from',
            'message_uuid': 'message_uuid',
            'timestamp': 'timestamp',
            'to': 'to'
        }

        self._channel = channel
        self._context = context
        self.__from = _from
        self._message_uuid = message_uuid
        self._timestamp = timestamp
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundViberMessageCommon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundViberMessageCommon of this InboundViberMessageCommon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this InboundViberMessageCommon.

        The channel that the message came in on

        :return: The channel of this InboundViberMessageCommon.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this InboundViberMessageCommon.

        The channel that the message came in on

        :param channel: The channel of this InboundViberMessageCommon.
        :type channel: str
        """
        allowed_values = ["viber_service"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def context(self):
        """Gets the context of this InboundViberMessageCommon.


        :return: The context of this InboundViberMessageCommon.
        :rtype: InboundViberMessageCommonContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this InboundViberMessageCommon.


        :param context: The context of this InboundViberMessageCommon.
        :type context: InboundViberMessageCommonContext
        """

        self._context = context

    @property
    def _from(self):
        """Gets the _from of this InboundViberMessageCommon.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :return: The _from of this InboundViberMessageCommon.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InboundViberMessageCommon.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :param _from: The _from of this InboundViberMessageCommon.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def message_uuid(self):
        """Gets the message_uuid of this InboundViberMessageCommon.

        The UUID of the message

        :return: The message_uuid of this InboundViberMessageCommon.
        :rtype: str
        """
        return self._message_uuid

    @message_uuid.setter
    def message_uuid(self, message_uuid):
        """Sets the message_uuid of this InboundViberMessageCommon.

        The UUID of the message

        :param message_uuid: The message_uuid of this InboundViberMessageCommon.
        :type message_uuid: str
        """
        if message_uuid is None:
            raise ValueError("Invalid value for `message_uuid`, must not be `None`")

        self._message_uuid = message_uuid

    @property
    def timestamp(self):
        """Gets the timestamp of this InboundViberMessageCommon.

        The datetime of when the event occurred, in `ISO 8601` format.

        :return: The timestamp of this InboundViberMessageCommon.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InboundViberMessageCommon.

        The datetime of when the event occurred, in `ISO 8601` format.

        :param timestamp: The timestamp of this InboundViberMessageCommon.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def to(self):
        """Gets the to of this InboundViberMessageCommon.

        The ID of the message recipient 

        :return: The to of this InboundViberMessageCommon.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InboundViberMessageCommon.

        The ID of the message recipient 

        :param to: The to of this InboundViberMessageCommon.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")
        if to is not None and len(to) > 50:
            raise ValueError("Invalid value for `to`, length must be less than or equal to `50`")
        if to is not None and len(to) < 1:
            raise ValueError("Invalid value for `to`, length must be greater than or equal to `1`")

        self._to = to
