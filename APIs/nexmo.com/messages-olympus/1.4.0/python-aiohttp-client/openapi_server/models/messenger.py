# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_options_messenger_messenger import ChannelOptionsMessengerMessenger
from openapi_server.models.messenger_one_of import MessengerOneOf
from openapi_server.models.messenger_one_of1 import MessengerOneOf1
from openapi_server.models.messenger_one_of1_all_of_image import MessengerOneOf1AllOfImage
from openapi_server.models.messenger_one_of2 import MessengerOneOf2
from openapi_server.models.messenger_one_of2_all_of_audio import MessengerOneOf2AllOfAudio
from openapi_server.models.messenger_one_of3 import MessengerOneOf3
from openapi_server.models.messenger_one_of3_all_of_video import MessengerOneOf3AllOfVideo
from openapi_server.models.messenger_one_of4 import MessengerOneOf4
from openapi_server.models.messenger_one_of4_all_of_file import MessengerOneOf4AllOfFile
from openapi_server import util


class Messenger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_ref: str=None, message_type: str=None, text: object=None, channel: str=None, _from: str=None, messenger: ChannelOptionsMessengerMessenger=None, to: str=None, image: MessengerOneOf1AllOfImage=None, audio: MessengerOneOf2AllOfAudio=None, video: MessengerOneOf3AllOfVideo=None, file: MessengerOneOf4AllOfFile=None):
        """Messenger - a model defined in OpenAPI

        :param client_ref: The client_ref of this Messenger.
        :param message_type: The message_type of this Messenger.
        :param text: The text of this Messenger.
        :param channel: The channel of this Messenger.
        :param _from: The _from of this Messenger.
        :param messenger: The messenger of this Messenger.
        :param to: The to of this Messenger.
        :param image: The image of this Messenger.
        :param audio: The audio of this Messenger.
        :param video: The video of this Messenger.
        :param file: The file of this Messenger.
        """
        self.openapi_types = {
            'client_ref': str,
            'message_type': str,
            'text': object,
            'channel': str,
            '_from': str,
            'messenger': ChannelOptionsMessengerMessenger,
            'to': str,
            'image': MessengerOneOf1AllOfImage,
            'audio': MessengerOneOf2AllOfAudio,
            'video': MessengerOneOf3AllOfVideo,
            'file': MessengerOneOf4AllOfFile
        }

        self.attribute_map = {
            'client_ref': 'client_ref',
            'message_type': 'message_type',
            'text': 'text',
            'channel': 'channel',
            '_from': 'from',
            'messenger': 'messenger',
            'to': 'to',
            'image': 'image',
            'audio': 'audio',
            'video': 'video',
            'file': 'file'
        }

        self._client_ref = client_ref
        self._message_type = message_type
        self._text = text
        self._channel = channel
        self.__from = _from
        self._messenger = messenger
        self._to = to
        self._image = image
        self._audio = audio
        self._video = video
        self._file = file

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Messenger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Messenger of this Messenger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_ref(self):
        """Gets the client_ref of this Messenger.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :return: The client_ref of this Messenger.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this Messenger.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :param client_ref: The client_ref of this Messenger.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def message_type(self):
        """Gets the message_type of this Messenger.

        The type of message to send. You must provide `file` in this field

        :return: The message_type of this Messenger.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Messenger.

        The type of message to send. You must provide `file` in this field

        :param message_type: The message_type of this Messenger.
        :type message_type: str
        """
        allowed_values = ["file"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def text(self):
        """Gets the text of this Messenger.

        The text of message to send; limited to 640 characters, including unicode. 

        :return: The text of this Messenger.
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Messenger.

        The text of message to send; limited to 640 characters, including unicode. 

        :param text: The text of this Messenger.
        :type text: object
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def channel(self):
        """Gets the channel of this Messenger.

        The channel to send to. You must provide `messenger` in this field

        :return: The channel of this Messenger.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Messenger.

        The channel to send to. You must provide `messenger` in this field

        :param channel: The channel of this Messenger.
        :type channel: str
        """
        allowed_values = ["messenger"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def _from(self):
        """Gets the _from of this Messenger.

        The ID of the message sender 

        :return: The _from of this Messenger.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Messenger.

        The ID of the message sender 

        :param _from: The _from of this Messenger.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")
        if _from is not None and len(_from) > 50:
            raise ValueError("Invalid value for `_from`, length must be less than or equal to `50`")
        if _from is not None and len(_from) < 1:
            raise ValueError("Invalid value for `_from`, length must be greater than or equal to `1`")

        self.__from = _from

    @property
    def messenger(self):
        """Gets the messenger of this Messenger.


        :return: The messenger of this Messenger.
        :rtype: ChannelOptionsMessengerMessenger
        """
        return self._messenger

    @messenger.setter
    def messenger(self, messenger):
        """Sets the messenger of this Messenger.


        :param messenger: The messenger of this Messenger.
        :type messenger: ChannelOptionsMessengerMessenger
        """

        self._messenger = messenger

    @property
    def to(self):
        """Gets the to of this Messenger.

        The ID of the message recipient 

        :return: The to of this Messenger.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Messenger.

        The ID of the message recipient 

        :param to: The to of this Messenger.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")
        if to is not None and len(to) > 50:
            raise ValueError("Invalid value for `to`, length must be less than or equal to `50`")
        if to is not None and len(to) < 1:
            raise ValueError("Invalid value for `to`, length must be greater than or equal to `1`")

        self._to = to

    @property
    def image(self):
        """Gets the image of this Messenger.


        :return: The image of this Messenger.
        :rtype: MessengerOneOf1AllOfImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Messenger.


        :param image: The image of this Messenger.
        :type image: MessengerOneOf1AllOfImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def audio(self):
        """Gets the audio of this Messenger.


        :return: The audio of this Messenger.
        :rtype: MessengerOneOf2AllOfAudio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this Messenger.


        :param audio: The audio of this Messenger.
        :type audio: MessengerOneOf2AllOfAudio
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")

        self._audio = audio

    @property
    def video(self):
        """Gets the video of this Messenger.


        :return: The video of this Messenger.
        :rtype: MessengerOneOf3AllOfVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Messenger.


        :param video: The video of this Messenger.
        :type video: MessengerOneOf3AllOfVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video

    @property
    def file(self):
        """Gets the file of this Messenger.


        :return: The file of this Messenger.
        :rtype: MessengerOneOf4AllOfFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Messenger.


        :param file: The file of this Messenger.
        :type file: MessengerOneOf4AllOfFile
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file
