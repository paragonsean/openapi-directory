# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image1_image import Image1Image
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_ref: str=None, image: Image1Image=None, message_type: str=None):
        """Image - a model defined in OpenAPI

        :param client_ref: The client_ref of this Image.
        :param image: The image of this Image.
        :param message_type: The message_type of this Image.
        """
        self.openapi_types = {
            'client_ref': str,
            'image': Image1Image,
            'message_type': str
        }

        self.attribute_map = {
            'client_ref': 'client_ref',
            'image': 'image',
            'message_type': 'message_type'
        }

        self._client_ref = client_ref
        self._image = image
        self._message_type = message_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_ref(self):
        """Gets the client_ref of this Image.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :return: The client_ref of this Image.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this Image.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :param client_ref: The client_ref of this Image.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def image(self):
        """Gets the image of this Image.


        :return: The image of this Image.
        :rtype: Image1Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Image.


        :param image: The image of this Image.
        :type image: Image1Image
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def message_type(self):
        """Gets the message_type of this Image.

        The type of message to send. You must provide `image` in this field

        :return: The message_type of this Image.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Image.

        The type of message to send. You must provide `image` in this field

        :param message_type: The message_type of this Image.
        :type message_type: str
        """
        allowed_values = ["image"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type
