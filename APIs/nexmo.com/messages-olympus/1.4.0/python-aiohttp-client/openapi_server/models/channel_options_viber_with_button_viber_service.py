# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_options_viber_with_button_viber_service_action import ChannelOptionsViberWithButtonViberServiceAction
from openapi_server import util


class ChannelOptionsViberWithButtonViberService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChannelOptionsViberWithButtonViberServiceAction=None, category: str=None, ttl: int=None, type: str=None):
        """ChannelOptionsViberWithButtonViberService - a model defined in OpenAPI

        :param action: The action of this ChannelOptionsViberWithButtonViberService.
        :param category: The category of this ChannelOptionsViberWithButtonViberService.
        :param ttl: The ttl of this ChannelOptionsViberWithButtonViberService.
        :param type: The type of this ChannelOptionsViberWithButtonViberService.
        """
        self.openapi_types = {
            'action': ChannelOptionsViberWithButtonViberServiceAction,
            'category': str,
            'ttl': int,
            'type': str
        }

        self.attribute_map = {
            'action': 'action',
            'category': 'category',
            'ttl': 'ttl',
            'type': 'type'
        }

        self._action = action
        self._category = category
        self._ttl = ttl
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelOptionsViberWithButtonViberService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelOptionsViberWithButton_viber_service of this ChannelOptionsViberWithButtonViberService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ChannelOptionsViberWithButtonViberService.


        :return: The action of this ChannelOptionsViberWithButtonViberService.
        :rtype: ChannelOptionsViberWithButtonViberServiceAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ChannelOptionsViberWithButtonViberService.


        :param action: The action of this ChannelOptionsViberWithButtonViberService.
        :type action: ChannelOptionsViberWithButtonViberServiceAction
        """

        self._action = action

    @property
    def category(self):
        """Gets the category of this ChannelOptionsViberWithButtonViberService.

        The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.

        :return: The category of this ChannelOptionsViberWithButtonViberService.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ChannelOptionsViberWithButtonViberService.

        The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.

        :param category: The category of this ChannelOptionsViberWithButtonViberService.
        :type category: str
        """
        allowed_values = ["transaction", "promotion"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def ttl(self):
        """Gets the ttl of this ChannelOptionsViberWithButtonViberService.

        Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.

        :return: The ttl of this ChannelOptionsViberWithButtonViberService.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ChannelOptionsViberWithButtonViberService.

        Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.

        :param ttl: The ttl of this ChannelOptionsViberWithButtonViberService.
        :type ttl: int
        """
        if ttl is not None and ttl > 259200:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `259200`")
        if ttl is not None and ttl < 30:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `30`")

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this ChannelOptionsViberWithButtonViberService.

        Viber-specific type definition. To use \"template\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)

        :return: The type of this ChannelOptionsViberWithButtonViberService.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChannelOptionsViberWithButtonViberService.

        Viber-specific type definition. To use \"template\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)

        :param type: The type of this ChannelOptionsViberWithButtonViberService.
        :type type: str
        """

        self._type = type
