# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order1_order_product_items import Order1OrderProductItems
from openapi_server import util


class Order1Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, product_items: List[Order1OrderProductItems]=None):
        """Order1Order - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this Order1Order.
        :param product_items: The product_items of this Order1Order.
        """
        self.openapi_types = {
            'catalog_id': str,
            'product_items': List[Order1OrderProductItems]
        }

        self.attribute_map = {
            'catalog_id': 'catalog_id',
            'product_items': 'product_items'
        }

        self._catalog_id = catalog_id
        self._product_items = product_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order1Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_1_order of this Order1Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this Order1Order.

        The ID of the catalog containing the products in this order.

        :return: The catalog_id of this Order1Order.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this Order1Order.

        The ID of the catalog containing the products in this order.

        :param catalog_id: The catalog_id of this Order1Order.
        :type catalog_id: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")

        self._catalog_id = catalog_id

    @property
    def product_items(self):
        """Gets the product_items of this Order1Order.


        :return: The product_items of this Order1Order.
        :rtype: List[Order1OrderProductItems]
        """
        return self._product_items

    @product_items.setter
    def product_items(self, product_items):
        """Sets the product_items of this Order1Order.


        :param product_items: The product_items of this Order1Order.
        :type product_items: List[Order1OrderProductItems]
        """
        if product_items is None:
            raise ValueError("Invalid value for `product_items`, must not be `None`")

        self._product_items = product_items
