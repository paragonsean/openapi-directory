# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_channel import ErrorChannel
from openapi_server.models.error_channel_params import ErrorChannelParams
from openapi_server.models.error_client_reference import ErrorClientReference
from openapi_server.models.error_invalid_json import ErrorInvalidJson
from openapi_server.models.error_message_params import ErrorMessageParams
from openapi_server.models.error_message_params_invalid_parameters_inner import ErrorMessageParamsInvalidParametersInner
from openapi_server.models.error_message_type import ErrorMessageType
from openapi_server.models.error_recipient import ErrorRecipient
from openapi_server.models.error_sender import ErrorSender
from openapi_server import util


class SendMessage422Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, instance: str=None, title: str=None, type: str=None, invalid_parameters: List[ErrorMessageParamsInvalidParametersInner]=None):
        """SendMessage422Response - a model defined in OpenAPI

        :param detail: The detail of this SendMessage422Response.
        :param instance: The instance of this SendMessage422Response.
        :param title: The title of this SendMessage422Response.
        :param type: The type of this SendMessage422Response.
        :param invalid_parameters: The invalid_parameters of this SendMessage422Response.
        """
        self.openapi_types = {
            'detail': str,
            'instance': str,
            'title': str,
            'type': str,
            'invalid_parameters': List[ErrorMessageParamsInvalidParametersInner]
        }

        self.attribute_map = {
            'detail': 'detail',
            'instance': 'instance',
            'title': 'title',
            'type': 'type',
            'invalid_parameters': 'invalid_parameters'
        }

        self._detail = detail
        self._instance = instance
        self._title = title
        self._type = type
        self._invalid_parameters = invalid_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessage422Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessage_422_response of this SendMessage422Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this SendMessage422Response.

        Additional information about the error

        :return: The detail of this SendMessage422Response.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this SendMessage422Response.

        Additional information about the error

        :param detail: The detail of this SendMessage422Response.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def instance(self):
        """Gets the instance of this SendMessage422Response.

        Internal Trace ID

        :return: The instance of this SendMessage422Response.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this SendMessage422Response.

        Internal Trace ID

        :param instance: The instance of this SendMessage422Response.
        :type instance: str
        """
        if instance is None:
            raise ValueError("Invalid value for `instance`, must not be `None`")

        self._instance = instance

    @property
    def title(self):
        """Gets the title of this SendMessage422Response.

        Generic error message

        :return: The title of this SendMessage422Response.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SendMessage422Response.

        Generic error message

        :param title: The title of this SendMessage422Response.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this SendMessage422Response.

        Link to error / remediation options

        :return: The type of this SendMessage422Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMessage422Response.

        Link to error / remediation options

        :param type: The type of this SendMessage422Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def invalid_parameters(self):
        """Gets the invalid_parameters of this SendMessage422Response.


        :return: The invalid_parameters of this SendMessage422Response.
        :rtype: List[ErrorMessageParamsInvalidParametersInner]
        """
        return self._invalid_parameters

    @invalid_parameters.setter
    def invalid_parameters(self, invalid_parameters):
        """Sets the invalid_parameters of this SendMessage422Response.


        :param invalid_parameters: The invalid_parameters of this SendMessage422Response.
        :type invalid_parameters: List[ErrorMessageParamsInvalidParametersInner]
        """

        self._invalid_parameters = invalid_parameters
