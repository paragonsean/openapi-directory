# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mms_one_of1_all_of_vcard import MMSOneOf1AllOfVcard
from openapi_server import util


class MMSOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_ref: str=None, message_type: str=None, vcard: MMSOneOf1AllOfVcard=None, channel: str=None, _from: str=None, to: str=None):
        """MMSOneOf1 - a model defined in OpenAPI

        :param client_ref: The client_ref of this MMSOneOf1.
        :param message_type: The message_type of this MMSOneOf1.
        :param vcard: The vcard of this MMSOneOf1.
        :param channel: The channel of this MMSOneOf1.
        :param _from: The _from of this MMSOneOf1.
        :param to: The to of this MMSOneOf1.
        """
        self.openapi_types = {
            'client_ref': str,
            'message_type': str,
            'vcard': MMSOneOf1AllOfVcard,
            'channel': str,
            '_from': str,
            'to': str
        }

        self.attribute_map = {
            'client_ref': 'client_ref',
            'message_type': 'message_type',
            'vcard': 'vcard',
            'channel': 'channel',
            '_from': 'from',
            'to': 'to'
        }

        self._client_ref = client_ref
        self._message_type = message_type
        self._vcard = vcard
        self._channel = channel
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MMSOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MMS_oneOf_1 of this MMSOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_ref(self):
        """Gets the client_ref of this MMSOneOf1.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :return: The client_ref of this MMSOneOf1.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this MMSOneOf1.

        Client reference of up to 100 characters. The reference will be present in every message status.

        :param client_ref: The client_ref of this MMSOneOf1.
        :type client_ref: str
        """

        self._client_ref = client_ref

    @property
    def message_type(self):
        """Gets the message_type of this MMSOneOf1.

        The type of message to send. You must provide `vcard` in this field

        :return: The message_type of this MMSOneOf1.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MMSOneOf1.

        The type of message to send. You must provide `vcard` in this field

        :param message_type: The message_type of this MMSOneOf1.
        :type message_type: str
        """
        allowed_values = ["vcard"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def vcard(self):
        """Gets the vcard of this MMSOneOf1.


        :return: The vcard of this MMSOneOf1.
        :rtype: MMSOneOf1AllOfVcard
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard):
        """Sets the vcard of this MMSOneOf1.


        :param vcard: The vcard of this MMSOneOf1.
        :type vcard: MMSOneOf1AllOfVcard
        """
        if vcard is None:
            raise ValueError("Invalid value for `vcard`, must not be `None`")

        self._vcard = vcard

    @property
    def channel(self):
        """Gets the channel of this MMSOneOf1.

        The channel to send to. You must provide `mms` in this field

        :return: The channel of this MMSOneOf1.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MMSOneOf1.

        The channel to send to. You must provide `mms` in this field

        :param channel: The channel of this MMSOneOf1.
        :type channel: str
        """
        allowed_values = ["mms"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def _from(self):
        """Gets the _from of this MMSOneOf1.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :return: The _from of this MMSOneOf1.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MMSOneOf1.

        The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 

        :param _from: The _from of this MMSOneOf1.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this MMSOneOf1.

        The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 

        :return: The to of this MMSOneOf1.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MMSOneOf1.

        The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 

        :param to: The to of this MMSOneOf1.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")
        if to is not None and len(to) > 15:
            raise ValueError("Invalid value for `to`, length must be less than or equal to `15`")
        if to is not None and len(to) < 7:
            raise ValueError("Invalid value for `to`, length must be greater than or equal to `7`")

        self._to = to
