/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelOptionsMessengerMessenger model module.
 * @module model/ChannelOptionsMessengerMessenger
 * @version 1.4.0
 */
class ChannelOptionsMessengerMessenger {
    /**
     * Constructs a new <code>ChannelOptionsMessengerMessenger</code>.
     * @alias module:model/ChannelOptionsMessengerMessenger
     */
    constructor() { 
        
        ChannelOptionsMessengerMessenger.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelOptionsMessengerMessenger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelOptionsMessengerMessenger} obj Optional instance to populate.
     * @return {module:model/ChannelOptionsMessengerMessenger} The populated <code>ChannelOptionsMessengerMessenger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelOptionsMessengerMessenger();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelOptionsMessengerMessenger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelOptionsMessengerMessenger</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 * @member {module:model/ChannelOptionsMessengerMessenger.CategoryEnum} category
 */
ChannelOptionsMessengerMessenger.prototype['category'] = undefined;

/**
 * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
 * @member {String} tag
 */
ChannelOptionsMessengerMessenger.prototype['tag'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
ChannelOptionsMessengerMessenger['CategoryEnum'] = {

    /**
     * value: "response"
     * @const
     */
    "response": "response",

    /**
     * value: "update"
     * @const
     */
    "update": "update",

    /**
     * value: "message_tag"
     * @const
     */
    "message_tag": "message_tag"
};



export default ChannelOptionsMessengerMessenger;

