/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelOptionsViberViberService from './ChannelOptionsViberViberService';
import ViberOneOf from './ViberOneOf';
import ViberOneOf1 from './ViberOneOf1';
import ViberOneOf1AllOfImage from './ViberOneOf1AllOfImage';
import ViberOneOf2 from './ViberOneOf2';
import ViberOneOf2AllOfVideo from './ViberOneOf2AllOfVideo';
import ViberOneOf3 from './ViberOneOf3';
import ViberOneOf3AllOfFile from './ViberOneOf3AllOfFile';

/**
 * The Viber model module.
 * @module model/Viber
 * @version 1.4.0
 */
class Viber {
    /**
     * Constructs a new <code>Viber</code>.
     * @alias module:model/Viber
     * @param {(module:model/ViberOneOf|module:model/ViberOneOf1|module:model/ViberOneOf2|module:model/ViberOneOf3)} instance The actual instance to initialize Viber.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ViberOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ViberOneOf.validateJSON(instance); // throw an exception if no match
                // create ViberOneOf from JS object
                this.actualInstance = ViberOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ViberOneOf
            errorMessages.push("Failed to construct ViberOneOf: " + err)
        }

        try {
            if (typeof instance === "ViberOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ViberOneOf1.validateJSON(instance); // throw an exception if no match
                // create ViberOneOf1 from JS object
                this.actualInstance = ViberOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ViberOneOf1
            errorMessages.push("Failed to construct ViberOneOf1: " + err)
        }

        try {
            if (typeof instance === "ViberOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ViberOneOf2.validateJSON(instance); // throw an exception if no match
                // create ViberOneOf2 from JS object
                this.actualInstance = ViberOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ViberOneOf2
            errorMessages.push("Failed to construct ViberOneOf2: " + err)
        }

        try {
            if (typeof instance === "ViberOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ViberOneOf3.validateJSON(instance); // throw an exception if no match
                // create ViberOneOf3 from JS object
                this.actualInstance = ViberOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ViberOneOf3
            errorMessages.push("Failed to construct ViberOneOf3: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Viber` with oneOf schemas ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Viber` with oneOf schemas ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Viber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Viber} obj Optional instance to populate.
     * @return {module:model/Viber} The populated <code>Viber</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Viber(data);
    }

    /**
     * Gets the actual instance, which can be <code>ViberOneOf</code>, <code>ViberOneOf1</code>, <code>ViberOneOf2</code>, <code>ViberOneOf3</code>.
     * @return {(module:model/ViberOneOf|module:model/ViberOneOf1|module:model/ViberOneOf2|module:model/ViberOneOf3)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ViberOneOf</code>, <code>ViberOneOf1</code>, <code>ViberOneOf2</code>, <code>ViberOneOf3</code>.
     * @param {(module:model/ViberOneOf|module:model/ViberOneOf1|module:model/ViberOneOf2|module:model/ViberOneOf3)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Viber.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Viber from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Viber} An instance of Viber.
     */
    static fromJSON = function(json_string){
        return Viber.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
Viber.prototype['client_ref'] = undefined;

/**
 * The type of message to send. You must provide `file` in this field
 * @member {module:model/Viber.MessageTypeEnum} message_type
 */
Viber.prototype['message_type'] = undefined;

/**
 * The text of message to send; limited to 1000 characters, including unicode. 
 * @member {Object} text
 */
Viber.prototype['text'] = undefined;

/**
 * The channel to send to. You must provide `viber_service` in this field
 * @member {module:model/Viber.ChannelEnum} channel
 */
Viber.prototype['channel'] = undefined;

/**
 * The ID of the message sender 
 * @member {String} from
 */
Viber.prototype['from'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
Viber.prototype['to'] = undefined;

/**
 * @member {module:model/ChannelOptionsViberViberService} viber_service
 */
Viber.prototype['viber_service'] = undefined;

/**
 * @member {module:model/ViberOneOf1AllOfImage} image
 */
Viber.prototype['image'] = undefined;

/**
 * @member {module:model/ViberOneOf2AllOfVideo} video
 */
Viber.prototype['video'] = undefined;

/**
 * @member {module:model/ViberOneOf3AllOfFile} file
 */
Viber.prototype['file'] = undefined;


Viber.OneOf = ["ViberOneOf", "ViberOneOf1", "ViberOneOf2", "ViberOneOf3"];

export default Viber;

