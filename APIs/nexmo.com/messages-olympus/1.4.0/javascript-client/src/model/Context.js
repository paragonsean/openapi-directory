/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextWhatsappReferredProduct from './ContextWhatsappReferredProduct';

/**
 * The Context model module.
 * @module model/Context
 * @version 1.4.0
 */
class Context {
    /**
     * Constructs a new <code>Context</code>.
     * This is only present for the Inbound Message where the user is quoting another message, or for a &#x60;product&#x60; message where the user has selected the &#39;Message Business&#39;  option. It provides information about the quoted message and/or the product message being responded to.  
     * @alias module:model/Context
     * @param messageFrom {String} The phone number of the **original sender** of the message being quoted in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
     * @param messageUuid {String} The UUID of the message being quoted. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
     */
    constructor(messageFrom, messageUuid) { 
        
        Context.initialize(this, messageFrom, messageUuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageFrom, messageUuid) { 
        obj['message_from'] = messageFrom;
        obj['message_uuid'] = messageUuid;
    }

    /**
     * Constructs a <code>Context</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Context} obj Optional instance to populate.
     * @return {module:model/Context} The populated <code>Context</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Context();

            if (data.hasOwnProperty('message_from')) {
                obj['message_from'] = ApiClient.convertToType(data['message_from'], 'String');
            }
            if (data.hasOwnProperty('message_uuid')) {
                obj['message_uuid'] = ApiClient.convertToType(data['message_uuid'], 'String');
            }
            if (data.hasOwnProperty('whatsapp_referred_product')) {
                obj['whatsapp_referred_product'] = ContextWhatsappReferredProduct.constructFromObject(data['whatsapp_referred_product']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Context</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Context</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Context.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message_from'] && !(typeof data['message_from'] === 'string' || data['message_from'] instanceof String)) {
            throw new Error("Expected the field `message_from` to be a primitive type in the JSON string but got " + data['message_from']);
        }
        // ensure the json data is a string
        if (data['message_uuid'] && !(typeof data['message_uuid'] === 'string' || data['message_uuid'] instanceof String)) {
            throw new Error("Expected the field `message_uuid` to be a primitive type in the JSON string but got " + data['message_uuid']);
        }
        // validate the optional field `whatsapp_referred_product`
        if (data['whatsapp_referred_product']) { // data not null
          ContextWhatsappReferredProduct.validateJSON(data['whatsapp_referred_product']);
        }

        return true;
    }


}

Context.RequiredProperties = ["message_from", "message_uuid"];

/**
 * The phone number of the **original sender** of the message being quoted in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
 * @member {String} message_from
 */
Context.prototype['message_from'] = undefined;

/**
 * The UUID of the message being quoted. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
 * @member {String} message_uuid
 */
Context.prototype['message_uuid'] = undefined;

/**
 * @member {module:model/ContextWhatsappReferredProduct} whatsapp_referred_product
 */
Context.prototype['whatsapp_referred_product'] = undefined;






export default Context;

