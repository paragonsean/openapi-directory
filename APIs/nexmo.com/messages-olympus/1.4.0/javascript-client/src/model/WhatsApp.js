/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location1Location from './Location1Location';
import Template1Template from './Template1Template';
import WhatsAppOneOf from './WhatsAppOneOf';
import WhatsAppOneOf1 from './WhatsAppOneOf1';
import WhatsAppOneOf2 from './WhatsAppOneOf2';
import WhatsAppOneOf2AllOfImage from './WhatsAppOneOf2AllOfImage';
import WhatsAppOneOf3 from './WhatsAppOneOf3';
import WhatsAppOneOf3AllOfAudio from './WhatsAppOneOf3AllOfAudio';
import WhatsAppOneOf4 from './WhatsAppOneOf4';
import WhatsAppOneOf4AllOfVideo from './WhatsAppOneOf4AllOfVideo';
import WhatsAppOneOf5 from './WhatsAppOneOf5';
import WhatsAppOneOf5AllOfFile from './WhatsAppOneOf5AllOfFile';
import WhatsAppOneOf6 from './WhatsAppOneOf6';
import WhatsAppOneOf6AllOfWhatsapp from './WhatsAppOneOf6AllOfWhatsapp';
import WhatsAppOneOf7 from './WhatsAppOneOf7';

/**
 * The WhatsApp model module.
 * @module model/WhatsApp
 * @version 1.4.0
 */
class WhatsApp {
    /**
     * Constructs a new <code>WhatsApp</code>.
     * @alias module:model/WhatsApp
     * @param {(module:model/WhatsAppOneOf|module:model/WhatsAppOneOf1|module:model/WhatsAppOneOf2|module:model/WhatsAppOneOf3|module:model/WhatsAppOneOf4|module:model/WhatsAppOneOf5|module:model/WhatsAppOneOf6|module:model/WhatsAppOneOf7)} instance The actual instance to initialize WhatsApp.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "WhatsAppOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf from JS object
                this.actualInstance = WhatsAppOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf
            errorMessages.push("Failed to construct WhatsAppOneOf: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf1.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf1 from JS object
                this.actualInstance = WhatsAppOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf1
            errorMessages.push("Failed to construct WhatsAppOneOf1: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf2.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf2 from JS object
                this.actualInstance = WhatsAppOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf2
            errorMessages.push("Failed to construct WhatsAppOneOf2: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf3.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf3 from JS object
                this.actualInstance = WhatsAppOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf3
            errorMessages.push("Failed to construct WhatsAppOneOf3: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf4.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf4 from JS object
                this.actualInstance = WhatsAppOneOf4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf4
            errorMessages.push("Failed to construct WhatsAppOneOf4: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf5") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf5.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf5 from JS object
                this.actualInstance = WhatsAppOneOf5.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf5
            errorMessages.push("Failed to construct WhatsAppOneOf5: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf6") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf6.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf6 from JS object
                this.actualInstance = WhatsAppOneOf6.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf6
            errorMessages.push("Failed to construct WhatsAppOneOf6: " + err)
        }

        try {
            if (typeof instance === "WhatsAppOneOf7") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WhatsAppOneOf7.validateJSON(instance); // throw an exception if no match
                // create WhatsAppOneOf7 from JS object
                this.actualInstance = WhatsAppOneOf7.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WhatsAppOneOf7
            errorMessages.push("Failed to construct WhatsAppOneOf7: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `WhatsApp` with oneOf schemas WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `WhatsApp` with oneOf schemas WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>WhatsApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WhatsApp} obj Optional instance to populate.
     * @return {module:model/WhatsApp} The populated <code>WhatsApp</code> instance.
     */
    static constructFromObject(data, obj) {
        return new WhatsApp(data);
    }

    /**
     * Gets the actual instance, which can be <code>WhatsAppOneOf</code>, <code>WhatsAppOneOf1</code>, <code>WhatsAppOneOf2</code>, <code>WhatsAppOneOf3</code>, <code>WhatsAppOneOf4</code>, <code>WhatsAppOneOf5</code>, <code>WhatsAppOneOf6</code>, <code>WhatsAppOneOf7</code>.
     * @return {(module:model/WhatsAppOneOf|module:model/WhatsAppOneOf1|module:model/WhatsAppOneOf2|module:model/WhatsAppOneOf3|module:model/WhatsAppOneOf4|module:model/WhatsAppOneOf5|module:model/WhatsAppOneOf6|module:model/WhatsAppOneOf7)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>WhatsAppOneOf</code>, <code>WhatsAppOneOf1</code>, <code>WhatsAppOneOf2</code>, <code>WhatsAppOneOf3</code>, <code>WhatsAppOneOf4</code>, <code>WhatsAppOneOf5</code>, <code>WhatsAppOneOf6</code>, <code>WhatsAppOneOf7</code>.
     * @param {(module:model/WhatsAppOneOf|module:model/WhatsAppOneOf1|module:model/WhatsAppOneOf2|module:model/WhatsAppOneOf3|module:model/WhatsAppOneOf4|module:model/WhatsAppOneOf5|module:model/WhatsAppOneOf6|module:model/WhatsAppOneOf7)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = WhatsApp.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of WhatsApp from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/WhatsApp} An instance of WhatsApp.
     */
    static fromJSON = function(json_string){
        return WhatsApp.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
WhatsApp.prototype['client_ref'] = undefined;

/**
 * The type of message to send. You must provide `custom` in this field
 * @member {module:model/WhatsApp.MessageTypeEnum} message_type
 */
WhatsApp.prototype['message_type'] = undefined;

/**
 * The location to be sent in the message. 
 * @member {Object} text
 */
WhatsApp.prototype['text'] = undefined;

/**
 * The channel to send to. You must provide `whatsapp` in this field
 * @member {module:model/WhatsApp.ChannelEnum} channel
 */
WhatsApp.prototype['channel'] = undefined;

/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
WhatsApp.prototype['from'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
WhatsApp.prototype['to'] = undefined;

/**
 * @member {module:model/Location1Location} location
 */
WhatsApp.prototype['location'] = undefined;

/**
 * @member {module:model/WhatsAppOneOf2AllOfImage} image
 */
WhatsApp.prototype['image'] = undefined;

/**
 * @member {module:model/WhatsAppOneOf3AllOfAudio} audio
 */
WhatsApp.prototype['audio'] = undefined;

/**
 * @member {module:model/WhatsAppOneOf4AllOfVideo} video
 */
WhatsApp.prototype['video'] = undefined;

/**
 * @member {module:model/WhatsAppOneOf5AllOfFile} file
 */
WhatsApp.prototype['file'] = undefined;

/**
 * @member {module:model/Template1Template} template
 */
WhatsApp.prototype['template'] = undefined;

/**
 * @member {module:model/WhatsAppOneOf6AllOfWhatsapp} whatsapp
 */
WhatsApp.prototype['whatsapp'] = undefined;

/**
 * A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely. [Read more about Custom Objects](https://developer.vonage.com/messages/concepts/custom-objects).
 * @member {Object.<String, Object>} custom
 */
WhatsApp.prototype['custom'] = undefined;


WhatsApp.OneOf = ["WhatsAppOneOf", "WhatsAppOneOf1", "WhatsAppOneOf2", "WhatsAppOneOf3", "WhatsAppOneOf4", "WhatsAppOneOf5", "WhatsAppOneOf6", "WhatsAppOneOf7"];

export default WhatsApp;

