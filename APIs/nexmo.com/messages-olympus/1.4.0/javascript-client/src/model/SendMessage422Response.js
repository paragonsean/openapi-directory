/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorChannel from './ErrorChannel';
import ErrorChannelParams from './ErrorChannelParams';
import ErrorClientReference from './ErrorClientReference';
import ErrorInvalidJson from './ErrorInvalidJson';
import ErrorMessageParams from './ErrorMessageParams';
import ErrorMessageParamsInvalidParametersInner from './ErrorMessageParamsInvalidParametersInner';
import ErrorMessageType from './ErrorMessageType';
import ErrorRecipient from './ErrorRecipient';
import ErrorSender from './ErrorSender';

/**
 * The SendMessage422Response model module.
 * @module model/SendMessage422Response
 * @version 1.4.0
 */
class SendMessage422Response {
    /**
     * Constructs a new <code>SendMessage422Response</code>.
     * @alias module:model/SendMessage422Response
     * @param {(module:model/ErrorChannel|module:model/ErrorChannelParams|module:model/ErrorClientReference|module:model/ErrorInvalidJson|module:model/ErrorMessageParams|module:model/ErrorMessageType|module:model/ErrorRecipient|module:model/ErrorSender)} instance The actual instance to initialize SendMessage422Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ErrorInvalidJson") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorInvalidJson.validateJSON(instance); // throw an exception if no match
                // create ErrorInvalidJson from JS object
                this.actualInstance = ErrorInvalidJson.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorInvalidJson
            errorMessages.push("Failed to construct ErrorInvalidJson: " + err)
        }

        try {
            if (typeof instance === "ErrorChannel") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorChannel.validateJSON(instance); // throw an exception if no match
                // create ErrorChannel from JS object
                this.actualInstance = ErrorChannel.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorChannel
            errorMessages.push("Failed to construct ErrorChannel: " + err)
        }

        try {
            if (typeof instance === "ErrorChannelParams") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorChannelParams.validateJSON(instance); // throw an exception if no match
                // create ErrorChannelParams from JS object
                this.actualInstance = ErrorChannelParams.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorChannelParams
            errorMessages.push("Failed to construct ErrorChannelParams: " + err)
        }

        try {
            if (typeof instance === "ErrorSender") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorSender.validateJSON(instance); // throw an exception if no match
                // create ErrorSender from JS object
                this.actualInstance = ErrorSender.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorSender
            errorMessages.push("Failed to construct ErrorSender: " + err)
        }

        try {
            if (typeof instance === "ErrorRecipient") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorRecipient.validateJSON(instance); // throw an exception if no match
                // create ErrorRecipient from JS object
                this.actualInstance = ErrorRecipient.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorRecipient
            errorMessages.push("Failed to construct ErrorRecipient: " + err)
        }

        try {
            if (typeof instance === "ErrorMessageType") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorMessageType.validateJSON(instance); // throw an exception if no match
                // create ErrorMessageType from JS object
                this.actualInstance = ErrorMessageType.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorMessageType
            errorMessages.push("Failed to construct ErrorMessageType: " + err)
        }

        try {
            if (typeof instance === "ErrorMessageParams") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorMessageParams.validateJSON(instance); // throw an exception if no match
                // create ErrorMessageParams from JS object
                this.actualInstance = ErrorMessageParams.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorMessageParams
            errorMessages.push("Failed to construct ErrorMessageParams: " + err)
        }

        try {
            if (typeof instance === "ErrorClientReference") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorClientReference.validateJSON(instance); // throw an exception if no match
                // create ErrorClientReference from JS object
                this.actualInstance = ErrorClientReference.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorClientReference
            errorMessages.push("Failed to construct ErrorClientReference: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SendMessage422Response` with oneOf schemas ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SendMessage422Response` with oneOf schemas ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SendMessage422Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMessage422Response} obj Optional instance to populate.
     * @return {module:model/SendMessage422Response} The populated <code>SendMessage422Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SendMessage422Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>ErrorChannel</code>, <code>ErrorChannelParams</code>, <code>ErrorClientReference</code>, <code>ErrorInvalidJson</code>, <code>ErrorMessageParams</code>, <code>ErrorMessageType</code>, <code>ErrorRecipient</code>, <code>ErrorSender</code>.
     * @return {(module:model/ErrorChannel|module:model/ErrorChannelParams|module:model/ErrorClientReference|module:model/ErrorInvalidJson|module:model/ErrorMessageParams|module:model/ErrorMessageType|module:model/ErrorRecipient|module:model/ErrorSender)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ErrorChannel</code>, <code>ErrorChannelParams</code>, <code>ErrorClientReference</code>, <code>ErrorInvalidJson</code>, <code>ErrorMessageParams</code>, <code>ErrorMessageType</code>, <code>ErrorRecipient</code>, <code>ErrorSender</code>.
     * @param {(module:model/ErrorChannel|module:model/ErrorChannelParams|module:model/ErrorClientReference|module:model/ErrorInvalidJson|module:model/ErrorMessageParams|module:model/ErrorMessageType|module:model/ErrorRecipient|module:model/ErrorSender)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SendMessage422Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SendMessage422Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SendMessage422Response} An instance of SendMessage422Response.
     */
    static fromJSON = function(json_string){
        return SendMessage422Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Additional information about the error
 * @member {String} detail
 */
SendMessage422Response.prototype['detail'] = undefined;

/**
 * Internal Trace ID
 * @member {String} instance
 */
SendMessage422Response.prototype['instance'] = undefined;

/**
 * Generic error message
 * @member {String} title
 */
SendMessage422Response.prototype['title'] = undefined;

/**
 * Link to error / remediation options
 * @member {String} type
 */
SendMessage422Response.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/ErrorMessageParamsInvalidParametersInner>} invalid_parameters
 */
SendMessage422Response.prototype['invalid_parameters'] = undefined;


SendMessage422Response.OneOf = ["ErrorChannel", "ErrorChannelParams", "ErrorClientReference", "ErrorInvalidJson", "ErrorMessageParams", "ErrorMessageType", "ErrorRecipient", "ErrorSender"];

export default SendMessage422Response;

