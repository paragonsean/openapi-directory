/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Context from './Context';
import Profile from './Profile';

/**
 * The InboundWhatsAppMessageCommon model module.
 * @module model/InboundWhatsAppMessageCommon
 * @version 1.4.0
 */
class InboundWhatsAppMessageCommon {
    /**
     * Constructs a new <code>InboundWhatsAppMessageCommon</code>.
     * @alias module:model/InboundWhatsAppMessageCommon
     * @param channel {module:model/InboundWhatsAppMessageCommon.ChannelEnum} The channel that the message came in on
     * @param from {String} The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
     * @param messageUuid {String} The UUID of the message
     * @param timestamp {String} The datetime of when the event occurred, in `ISO 8601` format.
     * @param to {String} The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
     */
    constructor(channel, from, messageUuid, timestamp, to) { 
        
        InboundWhatsAppMessageCommon.initialize(this, channel, from, messageUuid, timestamp, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, from, messageUuid, timestamp, to) { 
        obj['channel'] = channel;
        obj['from'] = from;
        obj['message_uuid'] = messageUuid;
        obj['timestamp'] = timestamp;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>InboundWhatsAppMessageCommon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundWhatsAppMessageCommon} obj Optional instance to populate.
     * @return {module:model/InboundWhatsAppMessageCommon} The populated <code>InboundWhatsAppMessageCommon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundWhatsAppMessageCommon();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = Context.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('message_uuid')) {
                obj['message_uuid'] = ApiClient.convertToType(data['message_uuid'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = Profile.constructFromObject(data['profile']);
            }
            if (data.hasOwnProperty('provider_message')) {
                obj['provider_message'] = ApiClient.convertToType(data['provider_message'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundWhatsAppMessageCommon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundWhatsAppMessageCommon</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InboundWhatsAppMessageCommon.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          Context.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['message_uuid'] && !(typeof data['message_uuid'] === 'string' || data['message_uuid'] instanceof String)) {
            throw new Error("Expected the field `message_uuid` to be a primitive type in the JSON string but got " + data['message_uuid']);
        }
        // validate the optional field `profile`
        if (data['profile']) { // data not null
          Profile.validateJSON(data['profile']);
        }
        // ensure the json data is a string
        if (data['provider_message'] && !(typeof data['provider_message'] === 'string' || data['provider_message'] instanceof String)) {
            throw new Error("Expected the field `provider_message` to be a primitive type in the JSON string but got " + data['provider_message']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}

InboundWhatsAppMessageCommon.RequiredProperties = ["channel", "from", "message_uuid", "timestamp", "to"];

/**
 * The channel that the message came in on
 * @member {module:model/InboundWhatsAppMessageCommon.ChannelEnum} channel
 */
InboundWhatsAppMessageCommon.prototype['channel'] = undefined;

/**
 * @member {module:model/Context} context
 */
InboundWhatsAppMessageCommon.prototype['context'] = undefined;

/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
InboundWhatsAppMessageCommon.prototype['from'] = undefined;

/**
 * The UUID of the message
 * @member {String} message_uuid
 */
InboundWhatsAppMessageCommon.prototype['message_uuid'] = undefined;

/**
 * @member {module:model/Profile} profile
 */
InboundWhatsAppMessageCommon.prototype['profile'] = undefined;

/**
 * A message from the channel provider, which may contain a description, error codes or other information
 * @member {String} provider_message
 */
InboundWhatsAppMessageCommon.prototype['provider_message'] = undefined;

/**
 * The datetime of when the event occurred, in `ISO 8601` format.
 * @member {String} timestamp
 */
InboundWhatsAppMessageCommon.prototype['timestamp'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
InboundWhatsAppMessageCommon.prototype['to'] = undefined;





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
InboundWhatsAppMessageCommon['ChannelEnum'] = {

    /**
     * value: "whatsapp"
     * @const
     */
    "whatsapp": "whatsapp"
};



export default InboundWhatsAppMessageCommon;

