/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageStatusBase from './MessageStatusBase';
import MessageStatusBaseError from './MessageStatusBaseError';
import WhatsApp1Usage from './WhatsApp1Usage';
import WhatsApp1Whatsapp from './WhatsApp1Whatsapp';

/**
 * The MessageStatusWhatsApp model module.
 * @module model/MessageStatusWhatsApp
 * @version 1.4.0
 */
class MessageStatusWhatsApp {
    /**
     * Constructs a new <code>MessageStatusWhatsApp</code>.
     * @alias module:model/MessageStatusWhatsApp
     * @implements module:model/MessageStatusBase
     * @param from {String} The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
     * @param messageUuid {String} The UUID of the message
     * @param status {module:model/MessageStatusWhatsApp.StatusEnum} 
     * @param timestamp {String} The datetime of when the event occurred, in `ISO 8601` format.
     * @param to {String} The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
     * @param channel {module:model/MessageStatusWhatsApp.ChannelEnum} The channel sending to.
     */
    constructor(from, messageUuid, status, timestamp, to, channel) { 
        MessageStatusBase.initialize(this, from, messageUuid, status, timestamp, to);
        MessageStatusWhatsApp.initialize(this, from, messageUuid, status, timestamp, to, channel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, messageUuid, status, timestamp, to, channel) { 
        obj['from'] = from;
        obj['message_uuid'] = messageUuid;
        obj['status'] = status;
        obj['timestamp'] = timestamp;
        obj['to'] = to;
        obj['channel'] = channel;
    }

    /**
     * Constructs a <code>MessageStatusWhatsApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageStatusWhatsApp} obj Optional instance to populate.
     * @return {module:model/MessageStatusWhatsApp} The populated <code>MessageStatusWhatsApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageStatusWhatsApp();
            MessageStatusBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('client_ref')) {
                obj['client_ref'] = ApiClient.convertToType(data['client_ref'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = MessageStatusBaseError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('message_uuid')) {
                obj['message_uuid'] = ApiClient.convertToType(data['message_uuid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = WhatsApp1Usage.constructFromObject(data['usage']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('whatsapp')) {
                obj['whatsapp'] = WhatsApp1Whatsapp.constructFromObject(data['whatsapp']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageStatusWhatsApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageStatusWhatsApp</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageStatusWhatsApp.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_ref'] && !(typeof data['client_ref'] === 'string' || data['client_ref'] instanceof String)) {
            throw new Error("Expected the field `client_ref` to be a primitive type in the JSON string but got " + data['client_ref']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          MessageStatusBaseError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['message_uuid'] && !(typeof data['message_uuid'] === 'string' || data['message_uuid'] instanceof String)) {
            throw new Error("Expected the field `message_uuid` to be a primitive type in the JSON string but got " + data['message_uuid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          WhatsApp1Usage.validateJSON(data['usage']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `whatsapp`
        if (data['whatsapp']) { // data not null
          WhatsApp1Whatsapp.validateJSON(data['whatsapp']);
        }

        return true;
    }


}

MessageStatusWhatsApp.RequiredProperties = ["from", "message_uuid", "status", "timestamp", "to", "channel"];

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
MessageStatusWhatsApp.prototype['client_ref'] = undefined;

/**
 * @member {module:model/MessageStatusBaseError} error
 */
MessageStatusWhatsApp.prototype['error'] = undefined;

/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
MessageStatusWhatsApp.prototype['from'] = undefined;

/**
 * The UUID of the message
 * @member {String} message_uuid
 */
MessageStatusWhatsApp.prototype['message_uuid'] = undefined;

/**
 * @member {module:model/MessageStatusWhatsApp.StatusEnum} status
 */
MessageStatusWhatsApp.prototype['status'] = undefined;

/**
 * The datetime of when the event occurred, in `ISO 8601` format.
 * @member {String} timestamp
 */
MessageStatusWhatsApp.prototype['timestamp'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
MessageStatusWhatsApp.prototype['to'] = undefined;

/**
 * @member {module:model/WhatsApp1Usage} usage
 */
MessageStatusWhatsApp.prototype['usage'] = undefined;

/**
 * The channel sending to.
 * @member {module:model/MessageStatusWhatsApp.ChannelEnum} channel
 */
MessageStatusWhatsApp.prototype['channel'] = undefined;

/**
 * @member {module:model/WhatsApp1Whatsapp} whatsapp
 */
MessageStatusWhatsApp.prototype['whatsapp'] = undefined;


// Implement MessageStatusBase interface:
/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
MessageStatusBase.prototype['client_ref'] = undefined;
/**
 * @member {module:model/MessageStatusBaseError} error
 */
MessageStatusBase.prototype['error'] = undefined;
/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
MessageStatusBase.prototype['from'] = undefined;
/**
 * The UUID of the message
 * @member {String} message_uuid
 */
MessageStatusBase.prototype['message_uuid'] = undefined;
/**
 * The status of the message.
 * @member {module:model/MessageStatusBase.StatusEnum} status
 */
MessageStatusBase.prototype['status'] = undefined;
/**
 * The datetime of when the event occurred, in `ISO 8601` format.
 * @member {String} timestamp
 */
MessageStatusBase.prototype['timestamp'] = undefined;
/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
MessageStatusBase.prototype['to'] = undefined;
/**
 * @member {module:model/MessageStatusBaseUsage} usage
 */
MessageStatusBase.prototype['usage'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MessageStatusWhatsApp['StatusEnum'] = {

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "delivered"
     * @const
     */
    "delivered": "delivered",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "undeliverable"
     * @const
     */
    "undeliverable": "undeliverable",

    /**
     * value: "read"
     * @const
     */
    "read": "read"
};


/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
MessageStatusWhatsApp['ChannelEnum'] = {

    /**
     * value: "whatsapp"
     * @const
     */
    "whatsapp": "whatsapp"
};



export default MessageStatusWhatsApp;

