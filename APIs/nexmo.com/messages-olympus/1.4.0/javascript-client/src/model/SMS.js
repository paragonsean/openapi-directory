/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SMSOneOf from './SMSOneOf';

/**
 * The SMS model module.
 * @module model/SMS
 * @version 1.4.0
 */
class SMS {
    /**
     * Constructs a new <code>SMS</code>.
     * @alias module:model/SMS
     * @param {(module:model/SMSOneOf)} instance The actual instance to initialize SMS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SMSOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SMSOneOf.validateJSON(instance); // throw an exception if no match
                // create SMSOneOf from JS object
                this.actualInstance = SMSOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SMSOneOf
            errorMessages.push("Failed to construct SMSOneOf: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SMS` with oneOf schemas SMSOneOf. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SMS` with oneOf schemas SMSOneOf. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SMS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SMS} obj Optional instance to populate.
     * @return {module:model/SMS} The populated <code>SMS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SMS(data);
    }

    /**
     * Gets the actual instance, which can be <code>SMSOneOf</code>.
     * @return {(module:model/SMSOneOf)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SMSOneOf</code>.
     * @param {(module:model/SMSOneOf)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SMS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SMS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SMS} An instance of SMS.
     */
    static fromJSON = function(json_string){
        return SMS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
SMS.prototype['client_ref'] = undefined;

/**
 * The type of message to send. You must provide `text` in this field
 * @member {module:model/SMS.MessageTypeEnum} message_type
 */
SMS.prototype['message_type'] = undefined;

/**
 * The text of message to send; limited to 1000 characters. The Messages API automatically detects unicode characters when sending SMS and sends the message as a unicode SMS. For more information on how concatenation and encoding please visit: [developer.nexmo.com/messaging/sms/guides/concatenation-and-encoding](https://developer.nexmo.com/messaging/sms/guides/concatenation-and-encoding). 
 * @member {Object} text
 */
SMS.prototype['text'] = undefined;

/**
 * The channel to send to. You must provide `sms` in this field
 * @member {module:model/SMS.ChannelEnum} channel
 */
SMS.prototype['channel'] = undefined;

/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
SMS.prototype['from'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
SMS.prototype['to'] = undefined;


SMS.OneOf = ["SMSOneOf"];

export default SMS;

