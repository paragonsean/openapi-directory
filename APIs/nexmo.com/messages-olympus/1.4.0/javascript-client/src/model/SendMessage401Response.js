/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorUnauthorizedInvalidApplication from './ErrorUnauthorizedInvalidApplication';
import ErrorUnauthorizedMissingCredentials from './ErrorUnauthorizedMissingCredentials';

/**
 * The SendMessage401Response model module.
 * @module model/SendMessage401Response
 * @version 1.4.0
 */
class SendMessage401Response {
    /**
     * Constructs a new <code>SendMessage401Response</code>.
     * @alias module:model/SendMessage401Response
     * @param {(module:model/ErrorUnauthorizedInvalidApplication|module:model/ErrorUnauthorizedMissingCredentials)} instance The actual instance to initialize SendMessage401Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ErrorUnauthorizedMissingCredentials") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorUnauthorizedMissingCredentials.validateJSON(instance); // throw an exception if no match
                // create ErrorUnauthorizedMissingCredentials from JS object
                this.actualInstance = ErrorUnauthorizedMissingCredentials.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorUnauthorizedMissingCredentials
            errorMessages.push("Failed to construct ErrorUnauthorizedMissingCredentials: " + err)
        }

        try {
            if (typeof instance === "ErrorUnauthorizedInvalidApplication") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorUnauthorizedInvalidApplication.validateJSON(instance); // throw an exception if no match
                // create ErrorUnauthorizedInvalidApplication from JS object
                this.actualInstance = ErrorUnauthorizedInvalidApplication.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorUnauthorizedInvalidApplication
            errorMessages.push("Failed to construct ErrorUnauthorizedInvalidApplication: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SendMessage401Response` with oneOf schemas ErrorUnauthorizedInvalidApplication, ErrorUnauthorizedMissingCredentials. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SendMessage401Response` with oneOf schemas ErrorUnauthorizedInvalidApplication, ErrorUnauthorizedMissingCredentials. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SendMessage401Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMessage401Response} obj Optional instance to populate.
     * @return {module:model/SendMessage401Response} The populated <code>SendMessage401Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SendMessage401Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>ErrorUnauthorizedInvalidApplication</code>, <code>ErrorUnauthorizedMissingCredentials</code>.
     * @return {(module:model/ErrorUnauthorizedInvalidApplication|module:model/ErrorUnauthorizedMissingCredentials)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ErrorUnauthorizedInvalidApplication</code>, <code>ErrorUnauthorizedMissingCredentials</code>.
     * @param {(module:model/ErrorUnauthorizedInvalidApplication|module:model/ErrorUnauthorizedMissingCredentials)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SendMessage401Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SendMessage401Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SendMessage401Response} An instance of SendMessage401Response.
     */
    static fromJSON = function(json_string){
        return SendMessage401Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Additional information about the error
 * @member {String} detail
 */
SendMessage401Response.prototype['detail'] = undefined;

/**
 * Internal Trace ID
 * @member {String} instance
 */
SendMessage401Response.prototype['instance'] = undefined;

/**
 * Generic error message
 * @member {String} title
 */
SendMessage401Response.prototype['title'] = undefined;

/**
 * Link to error / remediation options
 * @member {String} type
 */
SendMessage401Response.prototype['type'] = undefined;


SendMessage401Response.OneOf = ["ErrorUnauthorizedInvalidApplication", "ErrorUnauthorizedMissingCredentials"];

export default SendMessage401Response;

