/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageStatusBaseError from './MessageStatusBaseError';
import MessageStatusBaseUsage from './MessageStatusBaseUsage';
import MessageStatusMMS from './MessageStatusMMS';
import MessageStatusMessenger from './MessageStatusMessenger';
import MessageStatusSMS from './MessageStatusSMS';
import MessageStatusViber from './MessageStatusViber';
import MessageStatusWhatsApp from './MessageStatusWhatsApp';
import WhatsApp1Whatsapp from './WhatsApp1Whatsapp';

/**
 * The MessageStatusRequest model module.
 * @module model/MessageStatusRequest
 * @version 1.4.0
 */
class MessageStatusRequest {
    /**
     * Constructs a new <code>MessageStatusRequest</code>.
     * @alias module:model/MessageStatusRequest
     * @param {(module:model/MessageStatusMMS|module:model/MessageStatusMessenger|module:model/MessageStatusSMS|module:model/MessageStatusViber|module:model/MessageStatusWhatsApp)} instance The actual instance to initialize MessageStatusRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "MessageStatusSMS") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStatusSMS.validateJSON(instance); // throw an exception if no match
                // create MessageStatusSMS from JS object
                this.actualInstance = MessageStatusSMS.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStatusSMS
            errorMessages.push("Failed to construct MessageStatusSMS: " + err)
        }

        try {
            if (typeof instance === "MessageStatusMMS") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStatusMMS.validateJSON(instance); // throw an exception if no match
                // create MessageStatusMMS from JS object
                this.actualInstance = MessageStatusMMS.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStatusMMS
            errorMessages.push("Failed to construct MessageStatusMMS: " + err)
        }

        try {
            if (typeof instance === "MessageStatusWhatsApp") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStatusWhatsApp.validateJSON(instance); // throw an exception if no match
                // create MessageStatusWhatsApp from JS object
                this.actualInstance = MessageStatusWhatsApp.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStatusWhatsApp
            errorMessages.push("Failed to construct MessageStatusWhatsApp: " + err)
        }

        try {
            if (typeof instance === "MessageStatusMessenger") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStatusMessenger.validateJSON(instance); // throw an exception if no match
                // create MessageStatusMessenger from JS object
                this.actualInstance = MessageStatusMessenger.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStatusMessenger
            errorMessages.push("Failed to construct MessageStatusMessenger: " + err)
        }

        try {
            if (typeof instance === "MessageStatusViber") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageStatusViber.validateJSON(instance); // throw an exception if no match
                // create MessageStatusViber from JS object
                this.actualInstance = MessageStatusViber.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageStatusViber
            errorMessages.push("Failed to construct MessageStatusViber: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `MessageStatusRequest` with oneOf schemas MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `MessageStatusRequest` with oneOf schemas MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>MessageStatusRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageStatusRequest} obj Optional instance to populate.
     * @return {module:model/MessageStatusRequest} The populated <code>MessageStatusRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new MessageStatusRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>MessageStatusMMS</code>, <code>MessageStatusMessenger</code>, <code>MessageStatusSMS</code>, <code>MessageStatusViber</code>, <code>MessageStatusWhatsApp</code>.
     * @return {(module:model/MessageStatusMMS|module:model/MessageStatusMessenger|module:model/MessageStatusSMS|module:model/MessageStatusViber|module:model/MessageStatusWhatsApp)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MessageStatusMMS</code>, <code>MessageStatusMessenger</code>, <code>MessageStatusSMS</code>, <code>MessageStatusViber</code>, <code>MessageStatusWhatsApp</code>.
     * @param {(module:model/MessageStatusMMS|module:model/MessageStatusMessenger|module:model/MessageStatusSMS|module:model/MessageStatusViber|module:model/MessageStatusWhatsApp)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = MessageStatusRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of MessageStatusRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/MessageStatusRequest} An instance of MessageStatusRequest.
     */
    static fromJSON = function(json_string){
        return MessageStatusRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
MessageStatusRequest.prototype['client_ref'] = undefined;

/**
 * @member {module:model/MessageStatusBaseError} error
 */
MessageStatusRequest.prototype['error'] = undefined;

/**
 * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details 
 * @member {String} from
 */
MessageStatusRequest.prototype['from'] = undefined;

/**
 * The UUID of the message
 * @member {String} message_uuid
 */
MessageStatusRequest.prototype['message_uuid'] = undefined;

/**
 * @member {module:model/MessageStatusRequest.StatusEnum} status
 */
MessageStatusRequest.prototype['status'] = undefined;

/**
 * The datetime of when the event occurred, in `ISO 8601` format.
 * @member {String} timestamp
 */
MessageStatusRequest.prototype['timestamp'] = undefined;

/**
 * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. 
 * @member {String} to
 */
MessageStatusRequest.prototype['to'] = undefined;

/**
 * @member {module:model/MessageStatusBaseUsage} usage
 */
MessageStatusRequest.prototype['usage'] = undefined;

/**
 * The channel sending to.
 * @member {module:model/MessageStatusRequest.ChannelEnum} channel
 */
MessageStatusRequest.prototype['channel'] = undefined;

/**
 * @member {module:model/WhatsApp1Whatsapp} whatsapp
 */
MessageStatusRequest.prototype['whatsapp'] = undefined;


MessageStatusRequest.OneOf = ["MessageStatusMMS", "MessageStatusMessenger", "MessageStatusSMS", "MessageStatusViber", "MessageStatusWhatsApp"];

export default MessageStatusRequest;

