/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseMessageType from './BaseMessageType';

/**
 * The Custom model module.
 * @module model/Custom
 * @version 1.4.0
 */
class Custom {
    /**
     * Constructs a new <code>Custom</code>.
     * @alias module:model/Custom
     * @implements module:model/BaseMessageType
     * @param messageType {module:model/Custom.MessageTypeEnum} The type of message to send. You must provide `custom` in this field
     */
    constructor(messageType) { 
        BaseMessageType.initialize(this);
        Custom.initialize(this, messageType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageType) { 
        obj['message_type'] = messageType;
    }

    /**
     * Constructs a <code>Custom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Custom} obj Optional instance to populate.
     * @return {module:model/Custom} The populated <code>Custom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Custom();
            BaseMessageType.constructFromObject(data, obj);

            if (data.hasOwnProperty('client_ref')) {
                obj['client_ref'] = ApiClient.convertToType(data['client_ref'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], {'String': Object});
            }
            if (data.hasOwnProperty('message_type')) {
                obj['message_type'] = ApiClient.convertToType(data['message_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Custom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Custom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Custom.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_ref'] && !(typeof data['client_ref'] === 'string' || data['client_ref'] instanceof String)) {
            throw new Error("Expected the field `client_ref` to be a primitive type in the JSON string but got " + data['client_ref']);
        }
        // ensure the json data is a string
        if (data['message_type'] && !(typeof data['message_type'] === 'string' || data['message_type'] instanceof String)) {
            throw new Error("Expected the field `message_type` to be a primitive type in the JSON string but got " + data['message_type']);
        }

        return true;
    }


}

Custom.RequiredProperties = ["message_type"];

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
Custom.prototype['client_ref'] = undefined;

/**
 * A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely. [Read more about Custom Objects](https://developer.vonage.com/messages/concepts/custom-objects).
 * @member {Object.<String, Object>} custom
 */
Custom.prototype['custom'] = undefined;

/**
 * The type of message to send. You must provide `custom` in this field
 * @member {module:model/Custom.MessageTypeEnum} message_type
 */
Custom.prototype['message_type'] = undefined;


// Implement BaseMessageType interface:
/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
BaseMessageType.prototype['client_ref'] = undefined;



/**
 * Allowed values for the <code>message_type</code> property.
 * @enum {String}
 * @readonly
 */
Custom['MessageTypeEnum'] = {

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default Custom;

