/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Reply1Reply model module.
 * @module model/Reply1Reply
 * @version 1.4.0
 */
class Reply1Reply {
    /**
     * Constructs a new <code>Reply1Reply</code>.
     * @alias module:model/Reply1Reply
     * @param id {String} An identifier to help identify the exact interactive message response.
     * @param title {String} The title displayed on the interactive option chosen.
     */
    constructor(id, title) { 
        
        Reply1Reply.initialize(this, id, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title) { 
        obj['id'] = id;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Reply1Reply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reply1Reply} obj Optional instance to populate.
     * @return {module:model/Reply1Reply} The populated <code>Reply1Reply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reply1Reply();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reply1Reply</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reply1Reply</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Reply1Reply.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Reply1Reply.RequiredProperties = ["id", "title"];

/**
 * A description that may be added to the interactive options presented (available only on interactive lists).
 * @member {String} description
 */
Reply1Reply.prototype['description'] = undefined;

/**
 * An identifier to help identify the exact interactive message response.
 * @member {String} id
 */
Reply1Reply.prototype['id'] = undefined;

/**
 * The title displayed on the interactive option chosen.
 * @member {String} title
 */
Reply1Reply.prototype['title'] = undefined;






export default Reply1Reply;

