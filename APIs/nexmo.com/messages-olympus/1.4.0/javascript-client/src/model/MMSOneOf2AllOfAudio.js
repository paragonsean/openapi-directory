/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MMSOneOf2AllOfAudio model module.
 * @module model/MMSOneOf2AllOfAudio
 * @version 1.4.0
 */
class MMSOneOf2AllOfAudio {
    /**
     * Constructs a new <code>MMSOneOf2AllOfAudio</code>.
     * @alias module:model/MMSOneOf2AllOfAudio
     * @param url {String} The URL of the audio attachment. 
     */
    constructor(url) { 
        
        MMSOneOf2AllOfAudio.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>MMSOneOf2AllOfAudio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MMSOneOf2AllOfAudio} obj Optional instance to populate.
     * @return {module:model/MMSOneOf2AllOfAudio} The populated <code>MMSOneOf2AllOfAudio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MMSOneOf2AllOfAudio();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MMSOneOf2AllOfAudio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MMSOneOf2AllOfAudio</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MMSOneOf2AllOfAudio.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

MMSOneOf2AllOfAudio.RequiredProperties = ["url"];

/**
 * Additional text to accompany the audio file.
 * @member {String} caption
 */
MMSOneOf2AllOfAudio.prototype['caption'] = undefined;

/**
 * The URL of the audio attachment. 
 * @member {String} url
 */
MMSOneOf2AllOfAudio.prototype['url'] = undefined;






export default MMSOneOf2AllOfAudio;

