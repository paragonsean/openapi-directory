/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelOptionsViberWithButtonViberServiceAction from './ChannelOptionsViberWithButtonViberServiceAction';

/**
 * The ChannelOptionsViberWithButtonViberService model module.
 * @module model/ChannelOptionsViberWithButtonViberService
 * @version 1.4.0
 */
class ChannelOptionsViberWithButtonViberService {
    /**
     * Constructs a new <code>ChannelOptionsViberWithButtonViberService</code>.
     * @alias module:model/ChannelOptionsViberWithButtonViberService
     */
    constructor() { 
        
        ChannelOptionsViberWithButtonViberService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelOptionsViberWithButtonViberService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelOptionsViberWithButtonViberService} obj Optional instance to populate.
     * @return {module:model/ChannelOptionsViberWithButtonViberService} The populated <code>ChannelOptionsViberWithButtonViberService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelOptionsViberWithButtonViberService();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ChannelOptionsViberWithButtonViberServiceAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelOptionsViberWithButtonViberService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelOptionsViberWithButtonViberService</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          ChannelOptionsViberWithButtonViberServiceAction.validateJSON(data['action']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChannelOptionsViberWithButtonViberServiceAction} action
 */
ChannelOptionsViberWithButtonViberService.prototype['action'] = undefined;

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 * @member {module:model/ChannelOptionsViberWithButtonViberService.CategoryEnum} category
 */
ChannelOptionsViberWithButtonViberService.prototype['category'] = undefined;

/**
 * Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
 * @member {Number} ttl
 */
ChannelOptionsViberWithButtonViberService.prototype['ttl'] = undefined;

/**
 * Viber-specific type definition. To use \"template\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
 * @member {String} type
 */
ChannelOptionsViberWithButtonViberService.prototype['type'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
ChannelOptionsViberWithButtonViberService['CategoryEnum'] = {

    /**
     * value: "transaction"
     * @const
     */
    "transaction": "transaction",

    /**
     * value: "promotion"
     * @const
     */
    "promotion": "promotion"
};



export default ChannelOptionsViberWithButtonViberService;

