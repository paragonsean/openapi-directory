/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelOptionsMessenger from './ChannelOptionsMessenger';
import ChannelOptionsMessengerMessenger from './ChannelOptionsMessengerMessenger';
import Text from './Text';

/**
 * The MessengerOneOf model module.
 * @module model/MessengerOneOf
 * @version 1.4.0
 */
class MessengerOneOf {
    /**
     * Constructs a new <code>MessengerOneOf</code>.
     * @alias module:model/MessengerOneOf
     * @implements module:model/Text
     * @implements module:model/ChannelOptionsMessenger
     * @param messageType {module:model/MessengerOneOf.MessageTypeEnum} The type of message to send. You must provide `text` in this field
     * @param text {Object} The text of message to send; limited to 640 characters, including unicode. 
     * @param channel {module:model/MessengerOneOf.ChannelEnum} The channel to send to. You must provide `messenger` in this field
     * @param from {String} The ID of the message sender 
     * @param to {String} The ID of the message recipient 
     */
    constructor(messageType, text, channel, from, to) { 
        Text.initialize(this, messageType, text);ChannelOptionsMessenger.initialize(this);
        MessengerOneOf.initialize(this, messageType, text, channel, from, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageType, text, channel, from, to) { 
        obj['message_type'] = messageType;
        obj['text'] = text;
        obj['channel'] = channel;
        obj['from'] = from;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>MessengerOneOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessengerOneOf} obj Optional instance to populate.
     * @return {module:model/MessengerOneOf} The populated <code>MessengerOneOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessengerOneOf();
            Text.constructFromObject(data, obj);
            ChannelOptionsMessenger.constructFromObject(data, obj);

            if (data.hasOwnProperty('client_ref')) {
                obj['client_ref'] = ApiClient.convertToType(data['client_ref'], 'String');
            }
            if (data.hasOwnProperty('message_type')) {
                obj['message_type'] = ApiClient.convertToType(data['message_type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], Object);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('messenger')) {
                obj['messenger'] = ChannelOptionsMessengerMessenger.constructFromObject(data['messenger']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessengerOneOf</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessengerOneOf</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessengerOneOf.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_ref'] && !(typeof data['client_ref'] === 'string' || data['client_ref'] instanceof String)) {
            throw new Error("Expected the field `client_ref` to be a primitive type in the JSON string but got " + data['client_ref']);
        }
        // ensure the json data is a string
        if (data['message_type'] && !(typeof data['message_type'] === 'string' || data['message_type'] instanceof String)) {
            throw new Error("Expected the field `message_type` to be a primitive type in the JSON string but got " + data['message_type']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // validate the optional field `messenger`
        if (data['messenger']) { // data not null
          ChannelOptionsMessengerMessenger.validateJSON(data['messenger']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}

MessengerOneOf.RequiredProperties = ["message_type", "text", "channel", "from", "to"];

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
MessengerOneOf.prototype['client_ref'] = undefined;

/**
 * The type of message to send. You must provide `text` in this field
 * @member {module:model/MessengerOneOf.MessageTypeEnum} message_type
 */
MessengerOneOf.prototype['message_type'] = undefined;

/**
 * The text of message to send; limited to 640 characters, including unicode. 
 * @member {Object} text
 */
MessengerOneOf.prototype['text'] = undefined;

/**
 * The channel to send to. You must provide `messenger` in this field
 * @member {module:model/MessengerOneOf.ChannelEnum} channel
 */
MessengerOneOf.prototype['channel'] = undefined;

/**
 * The ID of the message sender 
 * @member {String} from
 */
MessengerOneOf.prototype['from'] = undefined;

/**
 * @member {module:model/ChannelOptionsMessengerMessenger} messenger
 */
MessengerOneOf.prototype['messenger'] = undefined;

/**
 * The ID of the message recipient 
 * @member {String} to
 */
MessengerOneOf.prototype['to'] = undefined;


// Implement Text interface:
/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
Text.prototype['client_ref'] = undefined;
/**
 * The type of message to send. You must provide `text` in this field
 * @member {module:model/Text.MessageTypeEnum} message_type
 */
Text.prototype['message_type'] = undefined;
/**
 * @member {String} text
 */
Text.prototype['text'] = undefined;
// Implement ChannelOptionsMessenger interface:
/**
 * The channel to send to. You must provide `messenger` in this field
 * @member {module:model/ChannelOptionsMessenger.ChannelEnum} channel
 */
ChannelOptionsMessenger.prototype['channel'] = undefined;
/**
 * The ID of the message sender 
 * @member {String} from
 */
ChannelOptionsMessenger.prototype['from'] = undefined;
/**
 * @member {module:model/ChannelOptionsMessengerMessenger} messenger
 */
ChannelOptionsMessenger.prototype['messenger'] = undefined;
/**
 * The ID of the message recipient 
 * @member {String} to
 */
ChannelOptionsMessenger.prototype['to'] = undefined;



/**
 * Allowed values for the <code>message_type</code> property.
 * @enum {String}
 * @readonly
 */
MessengerOneOf['MessageTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text"
};


/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
MessengerOneOf['ChannelEnum'] = {

    /**
     * value: "messenger"
     * @const
     */
    "messenger": "messenger"
};



export default MessengerOneOf;

