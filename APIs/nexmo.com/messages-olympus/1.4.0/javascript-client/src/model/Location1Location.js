/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location1Location model module.
 * @module model/Location1Location
 * @version 1.4.0
 */
class Location1Location {
    /**
     * Constructs a new <code>Location1Location</code>.
     * @alias module:model/Location1Location
     * @param lat {Number} Latitude of the location.
     * @param _long {Number} Longitude of the location.
     */
    constructor(lat, _long) { 
        
        Location1Location.initialize(this, lat, _long);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lat, _long) { 
        obj['lat'] = lat;
        obj['long'] = _long;
    }

    /**
     * Constructs a <code>Location1Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location1Location} obj Optional instance to populate.
     * @return {module:model/Location1Location} The populated <code>Location1Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location1Location();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('long')) {
                obj['long'] = ApiClient.convertToType(data['long'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location1Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location1Location</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Location1Location.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Location1Location.RequiredProperties = ["lat", "long"];

/**
 * Address of the location. Only displayed if `name` is present.
 * @member {String} address
 */
Location1Location.prototype['address'] = undefined;

/**
 * Latitude of the location.
 * @member {Number} lat
 */
Location1Location.prototype['lat'] = undefined;

/**
 * Longitude of the location.
 * @member {Number} long
 */
Location1Location.prototype['long'] = undefined;

/**
 * Name of the location.
 * @member {String} name
 */
Location1Location.prototype['name'] = undefined;






export default Location1Location;

