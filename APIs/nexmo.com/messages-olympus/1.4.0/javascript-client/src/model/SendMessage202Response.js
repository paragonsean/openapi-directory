/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SendMessage202ResponseOneOf from './SendMessage202ResponseOneOf';
import SendMessage202ResponseOneOf1 from './SendMessage202ResponseOneOf1';
import SendMessage202ResponseOneOf2 from './SendMessage202ResponseOneOf2';
import SendMessage202ResponseOneOf3 from './SendMessage202ResponseOneOf3';
import SendMessage202ResponseOneOf4 from './SendMessage202ResponseOneOf4';

/**
 * The SendMessage202Response model module.
 * @module model/SendMessage202Response
 * @version 1.4.0
 */
class SendMessage202Response {
    /**
     * Constructs a new <code>SendMessage202Response</code>.
     * @alias module:model/SendMessage202Response
     * @param {(module:model/SendMessage202ResponseOneOf|module:model/SendMessage202ResponseOneOf1|module:model/SendMessage202ResponseOneOf2|module:model/SendMessage202ResponseOneOf3|module:model/SendMessage202ResponseOneOf4)} instance The actual instance to initialize SendMessage202Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SendMessage202ResponseOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage202ResponseOneOf.validateJSON(instance); // throw an exception if no match
                // create SendMessage202ResponseOneOf from JS object
                this.actualInstance = SendMessage202ResponseOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage202ResponseOneOf
            errorMessages.push("Failed to construct SendMessage202ResponseOneOf: " + err)
        }

        try {
            if (typeof instance === "SendMessage202ResponseOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage202ResponseOneOf1.validateJSON(instance); // throw an exception if no match
                // create SendMessage202ResponseOneOf1 from JS object
                this.actualInstance = SendMessage202ResponseOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage202ResponseOneOf1
            errorMessages.push("Failed to construct SendMessage202ResponseOneOf1: " + err)
        }

        try {
            if (typeof instance === "SendMessage202ResponseOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage202ResponseOneOf2.validateJSON(instance); // throw an exception if no match
                // create SendMessage202ResponseOneOf2 from JS object
                this.actualInstance = SendMessage202ResponseOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage202ResponseOneOf2
            errorMessages.push("Failed to construct SendMessage202ResponseOneOf2: " + err)
        }

        try {
            if (typeof instance === "SendMessage202ResponseOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage202ResponseOneOf3.validateJSON(instance); // throw an exception if no match
                // create SendMessage202ResponseOneOf3 from JS object
                this.actualInstance = SendMessage202ResponseOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage202ResponseOneOf3
            errorMessages.push("Failed to construct SendMessage202ResponseOneOf3: " + err)
        }

        try {
            if (typeof instance === "SendMessage202ResponseOneOf4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage202ResponseOneOf4.validateJSON(instance); // throw an exception if no match
                // create SendMessage202ResponseOneOf4 from JS object
                this.actualInstance = SendMessage202ResponseOneOf4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage202ResponseOneOf4
            errorMessages.push("Failed to construct SendMessage202ResponseOneOf4: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SendMessage202Response` with oneOf schemas SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SendMessage202Response` with oneOf schemas SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SendMessage202Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMessage202Response} obj Optional instance to populate.
     * @return {module:model/SendMessage202Response} The populated <code>SendMessage202Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SendMessage202Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>SendMessage202ResponseOneOf</code>, <code>SendMessage202ResponseOneOf1</code>, <code>SendMessage202ResponseOneOf2</code>, <code>SendMessage202ResponseOneOf3</code>, <code>SendMessage202ResponseOneOf4</code>.
     * @return {(module:model/SendMessage202ResponseOneOf|module:model/SendMessage202ResponseOneOf1|module:model/SendMessage202ResponseOneOf2|module:model/SendMessage202ResponseOneOf3|module:model/SendMessage202ResponseOneOf4)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SendMessage202ResponseOneOf</code>, <code>SendMessage202ResponseOneOf1</code>, <code>SendMessage202ResponseOneOf2</code>, <code>SendMessage202ResponseOneOf3</code>, <code>SendMessage202ResponseOneOf4</code>.
     * @param {(module:model/SendMessage202ResponseOneOf|module:model/SendMessage202ResponseOneOf1|module:model/SendMessage202ResponseOneOf2|module:model/SendMessage202ResponseOneOf3|module:model/SendMessage202ResponseOneOf4)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SendMessage202Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SendMessage202Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SendMessage202Response} An instance of SendMessage202Response.
     */
    static fromJSON = function(json_string){
        return SendMessage202Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The UUID of the message
 * @member {String} message_uuid
 */
SendMessage202Response.prototype['message_uuid'] = undefined;


SendMessage202Response.OneOf = ["SendMessage202ResponseOneOf", "SendMessage202ResponseOneOf1", "SendMessage202ResponseOneOf2", "SendMessage202ResponseOneOf3", "SendMessage202ResponseOneOf4"];

export default SendMessage202Response;

