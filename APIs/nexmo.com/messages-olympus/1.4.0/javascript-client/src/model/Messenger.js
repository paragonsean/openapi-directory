/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelOptionsMessengerMessenger from './ChannelOptionsMessengerMessenger';
import MessengerOneOf from './MessengerOneOf';
import MessengerOneOf1 from './MessengerOneOf1';
import MessengerOneOf1AllOfImage from './MessengerOneOf1AllOfImage';
import MessengerOneOf2 from './MessengerOneOf2';
import MessengerOneOf2AllOfAudio from './MessengerOneOf2AllOfAudio';
import MessengerOneOf3 from './MessengerOneOf3';
import MessengerOneOf3AllOfVideo from './MessengerOneOf3AllOfVideo';
import MessengerOneOf4 from './MessengerOneOf4';
import MessengerOneOf4AllOfFile from './MessengerOneOf4AllOfFile';

/**
 * The Messenger model module.
 * @module model/Messenger
 * @version 1.4.0
 */
class Messenger {
    /**
     * Constructs a new <code>Messenger</code>.
     * @alias module:model/Messenger
     * @param {(module:model/MessengerOneOf|module:model/MessengerOneOf1|module:model/MessengerOneOf2|module:model/MessengerOneOf3|module:model/MessengerOneOf4)} instance The actual instance to initialize Messenger.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "MessengerOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessengerOneOf.validateJSON(instance); // throw an exception if no match
                // create MessengerOneOf from JS object
                this.actualInstance = MessengerOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessengerOneOf
            errorMessages.push("Failed to construct MessengerOneOf: " + err)
        }

        try {
            if (typeof instance === "MessengerOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessengerOneOf1.validateJSON(instance); // throw an exception if no match
                // create MessengerOneOf1 from JS object
                this.actualInstance = MessengerOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessengerOneOf1
            errorMessages.push("Failed to construct MessengerOneOf1: " + err)
        }

        try {
            if (typeof instance === "MessengerOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessengerOneOf2.validateJSON(instance); // throw an exception if no match
                // create MessengerOneOf2 from JS object
                this.actualInstance = MessengerOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessengerOneOf2
            errorMessages.push("Failed to construct MessengerOneOf2: " + err)
        }

        try {
            if (typeof instance === "MessengerOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessengerOneOf3.validateJSON(instance); // throw an exception if no match
                // create MessengerOneOf3 from JS object
                this.actualInstance = MessengerOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessengerOneOf3
            errorMessages.push("Failed to construct MessengerOneOf3: " + err)
        }

        try {
            if (typeof instance === "MessengerOneOf4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessengerOneOf4.validateJSON(instance); // throw an exception if no match
                // create MessengerOneOf4 from JS object
                this.actualInstance = MessengerOneOf4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessengerOneOf4
            errorMessages.push("Failed to construct MessengerOneOf4: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Messenger` with oneOf schemas MessengerOneOf, MessengerOneOf1, MessengerOneOf2, MessengerOneOf3, MessengerOneOf4. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Messenger` with oneOf schemas MessengerOneOf, MessengerOneOf1, MessengerOneOf2, MessengerOneOf3, MessengerOneOf4. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Messenger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Messenger} obj Optional instance to populate.
     * @return {module:model/Messenger} The populated <code>Messenger</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Messenger(data);
    }

    /**
     * Gets the actual instance, which can be <code>MessengerOneOf</code>, <code>MessengerOneOf1</code>, <code>MessengerOneOf2</code>, <code>MessengerOneOf3</code>, <code>MessengerOneOf4</code>.
     * @return {(module:model/MessengerOneOf|module:model/MessengerOneOf1|module:model/MessengerOneOf2|module:model/MessengerOneOf3|module:model/MessengerOneOf4)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MessengerOneOf</code>, <code>MessengerOneOf1</code>, <code>MessengerOneOf2</code>, <code>MessengerOneOf3</code>, <code>MessengerOneOf4</code>.
     * @param {(module:model/MessengerOneOf|module:model/MessengerOneOf1|module:model/MessengerOneOf2|module:model/MessengerOneOf3|module:model/MessengerOneOf4)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Messenger.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Messenger from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Messenger} An instance of Messenger.
     */
    static fromJSON = function(json_string){
        return Messenger.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Client reference of up to 100 characters. The reference will be present in every message status.
 * @member {String} client_ref
 */
Messenger.prototype['client_ref'] = undefined;

/**
 * The type of message to send. You must provide `file` in this field
 * @member {module:model/Messenger.MessageTypeEnum} message_type
 */
Messenger.prototype['message_type'] = undefined;

/**
 * The text of message to send; limited to 640 characters, including unicode. 
 * @member {Object} text
 */
Messenger.prototype['text'] = undefined;

/**
 * The channel to send to. You must provide `messenger` in this field
 * @member {module:model/Messenger.ChannelEnum} channel
 */
Messenger.prototype['channel'] = undefined;

/**
 * The ID of the message sender 
 * @member {String} from
 */
Messenger.prototype['from'] = undefined;

/**
 * @member {module:model/ChannelOptionsMessengerMessenger} messenger
 */
Messenger.prototype['messenger'] = undefined;

/**
 * The ID of the message recipient 
 * @member {String} to
 */
Messenger.prototype['to'] = undefined;

/**
 * @member {module:model/MessengerOneOf1AllOfImage} image
 */
Messenger.prototype['image'] = undefined;

/**
 * @member {module:model/MessengerOneOf2AllOfAudio} audio
 */
Messenger.prototype['audio'] = undefined;

/**
 * @member {module:model/MessengerOneOf3AllOfVideo} video
 */
Messenger.prototype['video'] = undefined;

/**
 * @member {module:model/MessengerOneOf4AllOfFile} file
 */
Messenger.prototype['file'] = undefined;


Messenger.OneOf = ["MessengerOneOf", "MessengerOneOf1", "MessengerOneOf2", "MessengerOneOf3", "MessengerOneOf4"];

export default Messenger;

