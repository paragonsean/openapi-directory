/**
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MessagesApi);
  }
}(this, function(expect, MessagesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MessagesApi.SendMessageRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SendMessageRequest', function() {
    it('should create an instance of SendMessageRequest', function() {
      // uncomment below and update the code to test SendMessageRequest
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be.a(MessagesApi.SendMessageRequest);
    });

    it('should have the property clientRef (base name: "client_ref")', function() {
      // uncomment below and update the code to test the property clientRef
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property messageType (base name: "message_type")', function() {
      // uncomment below and update the code to test the property messageType
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property vcard (base name: "vcard")', function() {
      // uncomment below and update the code to test the property vcard
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property audio (base name: "audio")', function() {
      // uncomment below and update the code to test the property audio
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property video (base name: "video")', function() {
      // uncomment below and update the code to test the property video
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property file (base name: "file")', function() {
      // uncomment below and update the code to test the property file
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property whatsapp (base name: "whatsapp")', function() {
      // uncomment below and update the code to test the property whatsapp
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property custom (base name: "custom")', function() {
      // uncomment below and update the code to test the property custom
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property messenger (base name: "messenger")', function() {
      // uncomment below and update the code to test the property messenger
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property viberService (base name: "viber_service")', function() {
      // uncomment below and update the code to test the property viberService
      //var instance = new MessagesApi.SendMessageRequest();
      //expect(instance).to.be();
    });

  });

}));
