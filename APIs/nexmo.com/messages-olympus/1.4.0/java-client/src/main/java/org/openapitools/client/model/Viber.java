/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelOptionsViberViberService;
import org.openapitools.client.model.ViberOneOf;
import org.openapitools.client.model.ViberOneOf1;
import org.openapitools.client.model.ViberOneOf1AllOfImage;
import org.openapitools.client.model.ViberOneOf2;
import org.openapitools.client.model.ViberOneOf2AllOfVideo;
import org.openapitools.client.model.ViberOneOf3;
import org.openapitools.client.model.ViberOneOf3AllOfFile;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Viber extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Viber.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Viber.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Viber' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ViberOneOf> adapterViberOneOf = gson.getDelegateAdapter(this, TypeToken.get(ViberOneOf.class));
            final TypeAdapter<ViberOneOf1> adapterViberOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(ViberOneOf1.class));
            final TypeAdapter<ViberOneOf2> adapterViberOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(ViberOneOf2.class));
            final TypeAdapter<ViberOneOf3> adapterViberOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(ViberOneOf3.class));

            return (TypeAdapter<T>) new TypeAdapter<Viber>() {
                @Override
                public void write(JsonWriter out, Viber value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ViberOneOf`
                    if (value.getActualInstance() instanceof ViberOneOf) {
                        JsonElement element = adapterViberOneOf.toJsonTree((ViberOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViberOneOf1`
                    if (value.getActualInstance() instanceof ViberOneOf1) {
                        JsonElement element = adapterViberOneOf1.toJsonTree((ViberOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViberOneOf2`
                    if (value.getActualInstance() instanceof ViberOneOf2) {
                        JsonElement element = adapterViberOneOf2.toJsonTree((ViberOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViberOneOf3`
                    if (value.getActualInstance() instanceof ViberOneOf3) {
                        JsonElement element = adapterViberOneOf3.toJsonTree((ViberOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3");
                }

                @Override
                public Viber read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ViberOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViberOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterViberOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ViberOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViberOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViberOneOf'", e);
                    }
                    // deserialize ViberOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViberOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterViberOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ViberOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViberOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViberOneOf1'", e);
                    }
                    // deserialize ViberOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViberOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterViberOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ViberOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViberOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViberOneOf2'", e);
                    }
                    // deserialize ViberOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViberOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterViberOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ViberOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViberOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViberOneOf3'", e);
                    }

                    if (match == 1) {
                        Viber ret = new Viber();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Viber: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Viber() {
        super("oneOf", Boolean.FALSE);
    }

    public Viber(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ViberOneOf", ViberOneOf.class);
        schemas.put("ViberOneOf1", ViberOneOf1.class);
        schemas.put("ViberOneOf2", ViberOneOf2.class);
        schemas.put("ViberOneOf3", ViberOneOf3.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Viber.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ViberOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViberOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViberOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViberOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3
     *
     * @return The actual instance (ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViberOneOf`. If the actual instance is not `ViberOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViberOneOf`
     * @throws ClassCastException if the instance is not `ViberOneOf`
     */
    public ViberOneOf getViberOneOf() throws ClassCastException {
        return (ViberOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ViberOneOf1`. If the actual instance is not `ViberOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViberOneOf1`
     * @throws ClassCastException if the instance is not `ViberOneOf1`
     */
    public ViberOneOf1 getViberOneOf1() throws ClassCastException {
        return (ViberOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ViberOneOf2`. If the actual instance is not `ViberOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViberOneOf2`
     * @throws ClassCastException if the instance is not `ViberOneOf2`
     */
    public ViberOneOf2 getViberOneOf2() throws ClassCastException {
        return (ViberOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ViberOneOf3`. If the actual instance is not `ViberOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViberOneOf3`
     * @throws ClassCastException if the instance is not `ViberOneOf3`
     */
    public ViberOneOf3 getViberOneOf3() throws ClassCastException {
        return (ViberOneOf3)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Viber
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ViberOneOf
        try {
            ViberOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViberOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViberOneOf1
        try {
            ViberOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViberOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViberOneOf2
        try {
            ViberOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViberOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViberOneOf3
        try {
            ViberOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViberOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for Viber with oneOf schemas: ViberOneOf, ViberOneOf1, ViberOneOf2, ViberOneOf3. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Viber given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Viber
     * @throws IOException if the JSON string is invalid with respect to Viber
     */
    public static Viber fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Viber.class);
    }

    /**
     * Convert an instance of Viber to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

