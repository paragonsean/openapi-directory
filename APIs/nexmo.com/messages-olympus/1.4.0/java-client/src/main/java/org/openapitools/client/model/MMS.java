/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MMSOneOf;
import org.openapitools.client.model.MMSOneOf1;
import org.openapitools.client.model.MMSOneOf1AllOfVcard;
import org.openapitools.client.model.MMSOneOf2;
import org.openapitools.client.model.MMSOneOf2AllOfAudio;
import org.openapitools.client.model.MMSOneOf3;
import org.openapitools.client.model.MMSOneOf3AllOfVideo;
import org.openapitools.client.model.MMSOneOfAllOfImage;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MMS extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MMS.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MMS.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MMS' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MMSOneOf> adapterMMSOneOf = gson.getDelegateAdapter(this, TypeToken.get(MMSOneOf.class));
            final TypeAdapter<MMSOneOf1> adapterMMSOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(MMSOneOf1.class));
            final TypeAdapter<MMSOneOf2> adapterMMSOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(MMSOneOf2.class));
            final TypeAdapter<MMSOneOf3> adapterMMSOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(MMSOneOf3.class));

            return (TypeAdapter<T>) new TypeAdapter<MMS>() {
                @Override
                public void write(JsonWriter out, MMS value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MMSOneOf`
                    if (value.getActualInstance() instanceof MMSOneOf) {
                        JsonElement element = adapterMMSOneOf.toJsonTree((MMSOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MMSOneOf1`
                    if (value.getActualInstance() instanceof MMSOneOf1) {
                        JsonElement element = adapterMMSOneOf1.toJsonTree((MMSOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MMSOneOf2`
                    if (value.getActualInstance() instanceof MMSOneOf2) {
                        JsonElement element = adapterMMSOneOf2.toJsonTree((MMSOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MMSOneOf3`
                    if (value.getActualInstance() instanceof MMSOneOf3) {
                        JsonElement element = adapterMMSOneOf3.toJsonTree((MMSOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3");
                }

                @Override
                public MMS read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MMSOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MMSOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterMMSOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MMSOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MMSOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MMSOneOf'", e);
                    }
                    // deserialize MMSOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MMSOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterMMSOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MMSOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MMSOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MMSOneOf1'", e);
                    }
                    // deserialize MMSOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MMSOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterMMSOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MMSOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MMSOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MMSOneOf2'", e);
                    }
                    // deserialize MMSOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MMSOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterMMSOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MMSOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MMSOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MMSOneOf3'", e);
                    }

                    if (match == 1) {
                        MMS ret = new MMS();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for MMS: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MMS() {
        super("oneOf", Boolean.FALSE);
    }

    public MMS(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MMSOneOf", MMSOneOf.class);
        schemas.put("MMSOneOf1", MMSOneOf1.class);
        schemas.put("MMSOneOf2", MMSOneOf2.class);
        schemas.put("MMSOneOf3", MMSOneOf3.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MMS.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MMSOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MMSOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MMSOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MMSOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3
     *
     * @return The actual instance (MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MMSOneOf`. If the actual instance is not `MMSOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MMSOneOf`
     * @throws ClassCastException if the instance is not `MMSOneOf`
     */
    public MMSOneOf getMMSOneOf() throws ClassCastException {
        return (MMSOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MMSOneOf1`. If the actual instance is not `MMSOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MMSOneOf1`
     * @throws ClassCastException if the instance is not `MMSOneOf1`
     */
    public MMSOneOf1 getMMSOneOf1() throws ClassCastException {
        return (MMSOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MMSOneOf2`. If the actual instance is not `MMSOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MMSOneOf2`
     * @throws ClassCastException if the instance is not `MMSOneOf2`
     */
    public MMSOneOf2 getMMSOneOf2() throws ClassCastException {
        return (MMSOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MMSOneOf3`. If the actual instance is not `MMSOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MMSOneOf3`
     * @throws ClassCastException if the instance is not `MMSOneOf3`
     */
    public MMSOneOf3 getMMSOneOf3() throws ClassCastException {
        return (MMSOneOf3)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MMS
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with MMSOneOf
        try {
            MMSOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MMSOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MMSOneOf1
        try {
            MMSOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MMSOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MMSOneOf2
        try {
            MMSOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MMSOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MMSOneOf3
        try {
            MMSOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MMSOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for MMS with oneOf schemas: MMSOneOf, MMSOneOf1, MMSOneOf2, MMSOneOf3. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of MMS given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MMS
     * @throws IOException if the JSON string is invalid with respect to MMS
     */
    public static MMS fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MMS.class);
    }

    /**
     * Convert an instance of MMS to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

