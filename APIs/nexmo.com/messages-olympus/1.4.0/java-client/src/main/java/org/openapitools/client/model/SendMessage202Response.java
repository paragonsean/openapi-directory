/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SendMessage202ResponseOneOf;
import org.openapitools.client.model.SendMessage202ResponseOneOf1;
import org.openapitools.client.model.SendMessage202ResponseOneOf2;
import org.openapitools.client.model.SendMessage202ResponseOneOf3;
import org.openapitools.client.model.SendMessage202ResponseOneOf4;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendMessage202Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SendMessage202Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SendMessage202Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SendMessage202Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SendMessage202ResponseOneOf> adapterSendMessage202ResponseOneOf = gson.getDelegateAdapter(this, TypeToken.get(SendMessage202ResponseOneOf.class));
            final TypeAdapter<SendMessage202ResponseOneOf1> adapterSendMessage202ResponseOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(SendMessage202ResponseOneOf1.class));
            final TypeAdapter<SendMessage202ResponseOneOf2> adapterSendMessage202ResponseOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(SendMessage202ResponseOneOf2.class));
            final TypeAdapter<SendMessage202ResponseOneOf3> adapterSendMessage202ResponseOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(SendMessage202ResponseOneOf3.class));
            final TypeAdapter<SendMessage202ResponseOneOf4> adapterSendMessage202ResponseOneOf4 = gson.getDelegateAdapter(this, TypeToken.get(SendMessage202ResponseOneOf4.class));

            return (TypeAdapter<T>) new TypeAdapter<SendMessage202Response>() {
                @Override
                public void write(JsonWriter out, SendMessage202Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SendMessage202ResponseOneOf`
                    if (value.getActualInstance() instanceof SendMessage202ResponseOneOf) {
                        JsonElement element = adapterSendMessage202ResponseOneOf.toJsonTree((SendMessage202ResponseOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendMessage202ResponseOneOf1`
                    if (value.getActualInstance() instanceof SendMessage202ResponseOneOf1) {
                        JsonElement element = adapterSendMessage202ResponseOneOf1.toJsonTree((SendMessage202ResponseOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendMessage202ResponseOneOf2`
                    if (value.getActualInstance() instanceof SendMessage202ResponseOneOf2) {
                        JsonElement element = adapterSendMessage202ResponseOneOf2.toJsonTree((SendMessage202ResponseOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendMessage202ResponseOneOf3`
                    if (value.getActualInstance() instanceof SendMessage202ResponseOneOf3) {
                        JsonElement element = adapterSendMessage202ResponseOneOf3.toJsonTree((SendMessage202ResponseOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendMessage202ResponseOneOf4`
                    if (value.getActualInstance() instanceof SendMessage202ResponseOneOf4) {
                        JsonElement element = adapterSendMessage202ResponseOneOf4.toJsonTree((SendMessage202ResponseOneOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4");
                }

                @Override
                public SendMessage202Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SendMessage202ResponseOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage202ResponseOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage202ResponseOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage202ResponseOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage202ResponseOneOf'", e);
                    }
                    // deserialize SendMessage202ResponseOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage202ResponseOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage202ResponseOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage202ResponseOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage202ResponseOneOf1'", e);
                    }
                    // deserialize SendMessage202ResponseOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage202ResponseOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage202ResponseOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage202ResponseOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage202ResponseOneOf2'", e);
                    }
                    // deserialize SendMessage202ResponseOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage202ResponseOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage202ResponseOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage202ResponseOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage202ResponseOneOf3'", e);
                    }
                    // deserialize SendMessage202ResponseOneOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage202ResponseOneOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage202ResponseOneOf4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage202ResponseOneOf4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage202ResponseOneOf4'", e);
                    }

                    if (match == 1) {
                        SendMessage202Response ret = new SendMessage202Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SendMessage202Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SendMessage202Response() {
        super("oneOf", Boolean.FALSE);
    }

    public SendMessage202Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SendMessage202ResponseOneOf", SendMessage202ResponseOneOf.class);
        schemas.put("SendMessage202ResponseOneOf1", SendMessage202ResponseOneOf1.class);
        schemas.put("SendMessage202ResponseOneOf2", SendMessage202ResponseOneOf2.class);
        schemas.put("SendMessage202ResponseOneOf3", SendMessage202ResponseOneOf3.class);
        schemas.put("SendMessage202ResponseOneOf4", SendMessage202ResponseOneOf4.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SendMessage202Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SendMessage202ResponseOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendMessage202ResponseOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendMessage202ResponseOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendMessage202ResponseOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendMessage202ResponseOneOf4) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4");
    }

    /**
     * Get the actual instance, which can be the following:
     * SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4
     *
     * @return The actual instance (SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SendMessage202ResponseOneOf`. If the actual instance is not `SendMessage202ResponseOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage202ResponseOneOf`
     * @throws ClassCastException if the instance is not `SendMessage202ResponseOneOf`
     */
    public SendMessage202ResponseOneOf getSendMessage202ResponseOneOf() throws ClassCastException {
        return (SendMessage202ResponseOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendMessage202ResponseOneOf1`. If the actual instance is not `SendMessage202ResponseOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage202ResponseOneOf1`
     * @throws ClassCastException if the instance is not `SendMessage202ResponseOneOf1`
     */
    public SendMessage202ResponseOneOf1 getSendMessage202ResponseOneOf1() throws ClassCastException {
        return (SendMessage202ResponseOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendMessage202ResponseOneOf2`. If the actual instance is not `SendMessage202ResponseOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage202ResponseOneOf2`
     * @throws ClassCastException if the instance is not `SendMessage202ResponseOneOf2`
     */
    public SendMessage202ResponseOneOf2 getSendMessage202ResponseOneOf2() throws ClassCastException {
        return (SendMessage202ResponseOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendMessage202ResponseOneOf3`. If the actual instance is not `SendMessage202ResponseOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage202ResponseOneOf3`
     * @throws ClassCastException if the instance is not `SendMessage202ResponseOneOf3`
     */
    public SendMessage202ResponseOneOf3 getSendMessage202ResponseOneOf3() throws ClassCastException {
        return (SendMessage202ResponseOneOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendMessage202ResponseOneOf4`. If the actual instance is not `SendMessage202ResponseOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage202ResponseOneOf4`
     * @throws ClassCastException if the instance is not `SendMessage202ResponseOneOf4`
     */
    public SendMessage202ResponseOneOf4 getSendMessage202ResponseOneOf4() throws ClassCastException {
        return (SendMessage202ResponseOneOf4)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SendMessage202Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SendMessage202ResponseOneOf
        try {
            SendMessage202ResponseOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendMessage202ResponseOneOf1
        try {
            SendMessage202ResponseOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendMessage202ResponseOneOf2
        try {
            SendMessage202ResponseOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendMessage202ResponseOneOf3
        try {
            SendMessage202ResponseOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendMessage202ResponseOneOf4
        try {
            SendMessage202ResponseOneOf4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage202ResponseOneOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for SendMessage202Response with oneOf schemas: SendMessage202ResponseOneOf, SendMessage202ResponseOneOf1, SendMessage202ResponseOneOf2, SendMessage202ResponseOneOf3, SendMessage202ResponseOneOf4. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SendMessage202Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SendMessage202Response
     * @throws IOException if the JSON string is invalid with respect to SendMessage202Response
     */
    public static SendMessage202Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SendMessage202Response.class);
    }

    /**
     * Convert an instance of SendMessage202Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

