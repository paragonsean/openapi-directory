/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorChannel;
import org.openapitools.client.model.ErrorChannelParams;
import org.openapitools.client.model.ErrorClientReference;
import org.openapitools.client.model.ErrorInvalidJson;
import org.openapitools.client.model.ErrorMessageParams;
import org.openapitools.client.model.ErrorMessageParamsInvalidParametersInner;
import org.openapitools.client.model.ErrorMessageType;
import org.openapitools.client.model.ErrorRecipient;
import org.openapitools.client.model.ErrorSender;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendMessage422Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SendMessage422Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SendMessage422Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SendMessage422Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ErrorInvalidJson> adapterErrorInvalidJson = gson.getDelegateAdapter(this, TypeToken.get(ErrorInvalidJson.class));
            final TypeAdapter<ErrorChannel> adapterErrorChannel = gson.getDelegateAdapter(this, TypeToken.get(ErrorChannel.class));
            final TypeAdapter<ErrorChannelParams> adapterErrorChannelParams = gson.getDelegateAdapter(this, TypeToken.get(ErrorChannelParams.class));
            final TypeAdapter<ErrorSender> adapterErrorSender = gson.getDelegateAdapter(this, TypeToken.get(ErrorSender.class));
            final TypeAdapter<ErrorRecipient> adapterErrorRecipient = gson.getDelegateAdapter(this, TypeToken.get(ErrorRecipient.class));
            final TypeAdapter<ErrorMessageType> adapterErrorMessageType = gson.getDelegateAdapter(this, TypeToken.get(ErrorMessageType.class));
            final TypeAdapter<ErrorMessageParams> adapterErrorMessageParams = gson.getDelegateAdapter(this, TypeToken.get(ErrorMessageParams.class));
            final TypeAdapter<ErrorClientReference> adapterErrorClientReference = gson.getDelegateAdapter(this, TypeToken.get(ErrorClientReference.class));

            return (TypeAdapter<T>) new TypeAdapter<SendMessage422Response>() {
                @Override
                public void write(JsonWriter out, SendMessage422Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ErrorInvalidJson`
                    if (value.getActualInstance() instanceof ErrorInvalidJson) {
                        JsonElement element = adapterErrorInvalidJson.toJsonTree((ErrorInvalidJson)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorChannel`
                    if (value.getActualInstance() instanceof ErrorChannel) {
                        JsonElement element = adapterErrorChannel.toJsonTree((ErrorChannel)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorChannelParams`
                    if (value.getActualInstance() instanceof ErrorChannelParams) {
                        JsonElement element = adapterErrorChannelParams.toJsonTree((ErrorChannelParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorSender`
                    if (value.getActualInstance() instanceof ErrorSender) {
                        JsonElement element = adapterErrorSender.toJsonTree((ErrorSender)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorRecipient`
                    if (value.getActualInstance() instanceof ErrorRecipient) {
                        JsonElement element = adapterErrorRecipient.toJsonTree((ErrorRecipient)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorMessageType`
                    if (value.getActualInstance() instanceof ErrorMessageType) {
                        JsonElement element = adapterErrorMessageType.toJsonTree((ErrorMessageType)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorMessageParams`
                    if (value.getActualInstance() instanceof ErrorMessageParams) {
                        JsonElement element = adapterErrorMessageParams.toJsonTree((ErrorMessageParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorClientReference`
                    if (value.getActualInstance() instanceof ErrorClientReference) {
                        JsonElement element = adapterErrorClientReference.toJsonTree((ErrorClientReference)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender");
                }

                @Override
                public SendMessage422Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ErrorInvalidJson
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorInvalidJson.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorInvalidJson;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorInvalidJson'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorInvalidJson failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorInvalidJson'", e);
                    }
                    // deserialize ErrorChannel
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorChannel.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorChannel;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorChannel'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorChannel failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorChannel'", e);
                    }
                    // deserialize ErrorChannelParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorChannelParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorChannelParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorChannelParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorChannelParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorChannelParams'", e);
                    }
                    // deserialize ErrorSender
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorSender.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorSender;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorSender'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorSender failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorSender'", e);
                    }
                    // deserialize ErrorRecipient
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorRecipient.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorRecipient;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorRecipient'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorRecipient failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorRecipient'", e);
                    }
                    // deserialize ErrorMessageType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorMessageType.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorMessageType;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorMessageType'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorMessageType failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorMessageType'", e);
                    }
                    // deserialize ErrorMessageParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorMessageParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorMessageParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorMessageParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorMessageParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorMessageParams'", e);
                    }
                    // deserialize ErrorClientReference
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorClientReference.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorClientReference;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ErrorClientReference'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorClientReference failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorClientReference'", e);
                    }

                    if (match == 1) {
                        SendMessage422Response ret = new SendMessage422Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SendMessage422Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SendMessage422Response() {
        super("oneOf", Boolean.FALSE);
    }

    public SendMessage422Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ErrorInvalidJson", ErrorInvalidJson.class);
        schemas.put("ErrorChannel", ErrorChannel.class);
        schemas.put("ErrorChannelParams", ErrorChannelParams.class);
        schemas.put("ErrorSender", ErrorSender.class);
        schemas.put("ErrorRecipient", ErrorRecipient.class);
        schemas.put("ErrorMessageType", ErrorMessageType.class);
        schemas.put("ErrorMessageParams", ErrorMessageParams.class);
        schemas.put("ErrorClientReference", ErrorClientReference.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SendMessage422Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ErrorInvalidJson) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorChannel) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorChannelParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorSender) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorRecipient) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorMessageType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorMessageParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorClientReference) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender");
    }

    /**
     * Get the actual instance, which can be the following:
     * ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender
     *
     * @return The actual instance (ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ErrorInvalidJson`. If the actual instance is not `ErrorInvalidJson`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorInvalidJson`
     * @throws ClassCastException if the instance is not `ErrorInvalidJson`
     */
    public ErrorInvalidJson getErrorInvalidJson() throws ClassCastException {
        return (ErrorInvalidJson)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorChannel`. If the actual instance is not `ErrorChannel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorChannel`
     * @throws ClassCastException if the instance is not `ErrorChannel`
     */
    public ErrorChannel getErrorChannel() throws ClassCastException {
        return (ErrorChannel)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorChannelParams`. If the actual instance is not `ErrorChannelParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorChannelParams`
     * @throws ClassCastException if the instance is not `ErrorChannelParams`
     */
    public ErrorChannelParams getErrorChannelParams() throws ClassCastException {
        return (ErrorChannelParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorSender`. If the actual instance is not `ErrorSender`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorSender`
     * @throws ClassCastException if the instance is not `ErrorSender`
     */
    public ErrorSender getErrorSender() throws ClassCastException {
        return (ErrorSender)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorRecipient`. If the actual instance is not `ErrorRecipient`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorRecipient`
     * @throws ClassCastException if the instance is not `ErrorRecipient`
     */
    public ErrorRecipient getErrorRecipient() throws ClassCastException {
        return (ErrorRecipient)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorMessageType`. If the actual instance is not `ErrorMessageType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorMessageType`
     * @throws ClassCastException if the instance is not `ErrorMessageType`
     */
    public ErrorMessageType getErrorMessageType() throws ClassCastException {
        return (ErrorMessageType)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorMessageParams`. If the actual instance is not `ErrorMessageParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorMessageParams`
     * @throws ClassCastException if the instance is not `ErrorMessageParams`
     */
    public ErrorMessageParams getErrorMessageParams() throws ClassCastException {
        return (ErrorMessageParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorClientReference`. If the actual instance is not `ErrorClientReference`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorClientReference`
     * @throws ClassCastException if the instance is not `ErrorClientReference`
     */
    public ErrorClientReference getErrorClientReference() throws ClassCastException {
        return (ErrorClientReference)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SendMessage422Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ErrorInvalidJson
        try {
            ErrorInvalidJson.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorInvalidJson failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorChannel
        try {
            ErrorChannel.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorChannel failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorChannelParams
        try {
            ErrorChannelParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorChannelParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorSender
        try {
            ErrorSender.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorSender failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorRecipient
        try {
            ErrorRecipient.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorRecipient failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorMessageType
        try {
            ErrorMessageType.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorMessageType failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorMessageParams
        try {
            ErrorMessageParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorMessageParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorClientReference
        try {
            ErrorClientReference.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorClientReference failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for SendMessage422Response with oneOf schemas: ErrorChannel, ErrorChannelParams, ErrorClientReference, ErrorInvalidJson, ErrorMessageParams, ErrorMessageType, ErrorRecipient, ErrorSender. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SendMessage422Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SendMessage422Response
     * @throws IOException if the JSON string is invalid with respect to SendMessage422Response
     */
    public static SendMessage422Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SendMessage422Response.class);
    }

    /**
     * Convert an instance of SendMessage422Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

