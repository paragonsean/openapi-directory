/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel specific metadata for SMS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundMessageSMSSms {
  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_NUM_MESSAGES = "num_messages";
  @SerializedName(SERIALIZED_NAME_NUM_MESSAGES)
  private String numMessages;

  public InboundMessageSMSSms() {
  }

  public InboundMessageSMSSms keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * The first word of the message sent to uppercase.
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public InboundMessageSMSSms numMessages(String numMessages) {
    this.numMessages = numMessages;
    return this;
  }

  /**
   * The number of inbound SMS messages concatenated together to comprise this message. SMS messages are 160 characters, if an inbound message exceeds that size they are concatenated together to forma single message. This number indicates how many messages formed this webhook.
   * @return numMessages
   */
  @javax.annotation.Nullable
  public String getNumMessages() {
    return numMessages;
  }

  public void setNumMessages(String numMessages) {
    this.numMessages = numMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundMessageSMSSms inboundMessageSMSSms = (InboundMessageSMSSms) o;
    return Objects.equals(this.keyword, inboundMessageSMSSms.keyword) &&
        Objects.equals(this.numMessages, inboundMessageSMSSms.numMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyword, numMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundMessageSMSSms {\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    numMessages: ").append(toIndentedString(numMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyword");
    openapiFields.add("num_messages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundMessageSMSSms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundMessageSMSSms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundMessageSMSSms is not found in the empty JSON string", InboundMessageSMSSms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundMessageSMSSms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundMessageSMSSms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("num_messages") != null && !jsonObj.get("num_messages").isJsonNull()) && !jsonObj.get("num_messages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `num_messages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("num_messages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundMessageSMSSms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundMessageSMSSms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundMessageSMSSms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundMessageSMSSms.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundMessageSMSSms>() {
           @Override
           public void write(JsonWriter out, InboundMessageSMSSms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundMessageSMSSms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundMessageSMSSms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundMessageSMSSms
   * @throws IOException if the JSON string is invalid with respect to InboundMessageSMSSms
   */
  public static InboundMessageSMSSms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundMessageSMSSms.class);
  }

  /**
   * Convert an instance of InboundMessageSMSSms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

