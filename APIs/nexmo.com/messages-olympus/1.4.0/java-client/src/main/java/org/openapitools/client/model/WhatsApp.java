/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Location1Location;
import org.openapitools.client.model.Template1Template;
import org.openapitools.client.model.WhatsAppOneOf;
import org.openapitools.client.model.WhatsAppOneOf1;
import org.openapitools.client.model.WhatsAppOneOf2;
import org.openapitools.client.model.WhatsAppOneOf2AllOfImage;
import org.openapitools.client.model.WhatsAppOneOf3;
import org.openapitools.client.model.WhatsAppOneOf3AllOfAudio;
import org.openapitools.client.model.WhatsAppOneOf4;
import org.openapitools.client.model.WhatsAppOneOf4AllOfVideo;
import org.openapitools.client.model.WhatsAppOneOf5;
import org.openapitools.client.model.WhatsAppOneOf5AllOfFile;
import org.openapitools.client.model.WhatsAppOneOf6;
import org.openapitools.client.model.WhatsAppOneOf6AllOfWhatsapp;
import org.openapitools.client.model.WhatsAppOneOf7;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WhatsApp extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(WhatsApp.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WhatsApp.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WhatsApp' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WhatsAppOneOf> adapterWhatsAppOneOf = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf.class));
            final TypeAdapter<WhatsAppOneOf1> adapterWhatsAppOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf1.class));
            final TypeAdapter<WhatsAppOneOf2> adapterWhatsAppOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf2.class));
            final TypeAdapter<WhatsAppOneOf3> adapterWhatsAppOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf3.class));
            final TypeAdapter<WhatsAppOneOf4> adapterWhatsAppOneOf4 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf4.class));
            final TypeAdapter<WhatsAppOneOf5> adapterWhatsAppOneOf5 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf5.class));
            final TypeAdapter<WhatsAppOneOf6> adapterWhatsAppOneOf6 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf6.class));
            final TypeAdapter<WhatsAppOneOf7> adapterWhatsAppOneOf7 = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppOneOf7.class));

            return (TypeAdapter<T>) new TypeAdapter<WhatsApp>() {
                @Override
                public void write(JsonWriter out, WhatsApp value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `WhatsAppOneOf`
                    if (value.getActualInstance() instanceof WhatsAppOneOf) {
                        JsonElement element = adapterWhatsAppOneOf.toJsonTree((WhatsAppOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf1`
                    if (value.getActualInstance() instanceof WhatsAppOneOf1) {
                        JsonElement element = adapterWhatsAppOneOf1.toJsonTree((WhatsAppOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf2`
                    if (value.getActualInstance() instanceof WhatsAppOneOf2) {
                        JsonElement element = adapterWhatsAppOneOf2.toJsonTree((WhatsAppOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf3`
                    if (value.getActualInstance() instanceof WhatsAppOneOf3) {
                        JsonElement element = adapterWhatsAppOneOf3.toJsonTree((WhatsAppOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf4`
                    if (value.getActualInstance() instanceof WhatsAppOneOf4) {
                        JsonElement element = adapterWhatsAppOneOf4.toJsonTree((WhatsAppOneOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf5`
                    if (value.getActualInstance() instanceof WhatsAppOneOf5) {
                        JsonElement element = adapterWhatsAppOneOf5.toJsonTree((WhatsAppOneOf5)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf6`
                    if (value.getActualInstance() instanceof WhatsAppOneOf6) {
                        JsonElement element = adapterWhatsAppOneOf6.toJsonTree((WhatsAppOneOf6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WhatsAppOneOf7`
                    if (value.getActualInstance() instanceof WhatsAppOneOf7) {
                        JsonElement element = adapterWhatsAppOneOf7.toJsonTree((WhatsAppOneOf7)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7");
                }

                @Override
                public WhatsApp read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize WhatsAppOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf'", e);
                    }
                    // deserialize WhatsAppOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf1'", e);
                    }
                    // deserialize WhatsAppOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf2'", e);
                    }
                    // deserialize WhatsAppOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf3'", e);
                    }
                    // deserialize WhatsAppOneOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf4'", e);
                    }
                    // deserialize WhatsAppOneOf5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf5.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf5;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf5'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf5 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf5'", e);
                    }
                    // deserialize WhatsAppOneOf6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf6.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf6;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf6'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf6'", e);
                    }
                    // deserialize WhatsAppOneOf7
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WhatsAppOneOf7.validateJsonElement(jsonElement);
                        actualAdapter = adapterWhatsAppOneOf7;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WhatsAppOneOf7'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WhatsAppOneOf7 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WhatsAppOneOf7'", e);
                    }

                    if (match == 1) {
                        WhatsApp ret = new WhatsApp();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for WhatsApp: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public WhatsApp() {
        super("oneOf", Boolean.FALSE);
    }

    public WhatsApp(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("WhatsAppOneOf", WhatsAppOneOf.class);
        schemas.put("WhatsAppOneOf1", WhatsAppOneOf1.class);
        schemas.put("WhatsAppOneOf2", WhatsAppOneOf2.class);
        schemas.put("WhatsAppOneOf3", WhatsAppOneOf3.class);
        schemas.put("WhatsAppOneOf4", WhatsAppOneOf4.class);
        schemas.put("WhatsAppOneOf5", WhatsAppOneOf5.class);
        schemas.put("WhatsAppOneOf6", WhatsAppOneOf6.class);
        schemas.put("WhatsAppOneOf7", WhatsAppOneOf7.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return WhatsApp.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof WhatsAppOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf5) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf6) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WhatsAppOneOf7) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7");
    }

    /**
     * Get the actual instance, which can be the following:
     * WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7
     *
     * @return The actual instance (WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `WhatsAppOneOf`. If the actual instance is not `WhatsAppOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf`
     */
    public WhatsAppOneOf getWhatsAppOneOf() throws ClassCastException {
        return (WhatsAppOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf1`. If the actual instance is not `WhatsAppOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf1`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf1`
     */
    public WhatsAppOneOf1 getWhatsAppOneOf1() throws ClassCastException {
        return (WhatsAppOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf2`. If the actual instance is not `WhatsAppOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf2`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf2`
     */
    public WhatsAppOneOf2 getWhatsAppOneOf2() throws ClassCastException {
        return (WhatsAppOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf3`. If the actual instance is not `WhatsAppOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf3`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf3`
     */
    public WhatsAppOneOf3 getWhatsAppOneOf3() throws ClassCastException {
        return (WhatsAppOneOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf4`. If the actual instance is not `WhatsAppOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf4`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf4`
     */
    public WhatsAppOneOf4 getWhatsAppOneOf4() throws ClassCastException {
        return (WhatsAppOneOf4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf5`. If the actual instance is not `WhatsAppOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf5`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf5`
     */
    public WhatsAppOneOf5 getWhatsAppOneOf5() throws ClassCastException {
        return (WhatsAppOneOf5)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf6`. If the actual instance is not `WhatsAppOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf6`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf6`
     */
    public WhatsAppOneOf6 getWhatsAppOneOf6() throws ClassCastException {
        return (WhatsAppOneOf6)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WhatsAppOneOf7`. If the actual instance is not `WhatsAppOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WhatsAppOneOf7`
     * @throws ClassCastException if the instance is not `WhatsAppOneOf7`
     */
    public WhatsAppOneOf7 getWhatsAppOneOf7() throws ClassCastException {
        return (WhatsAppOneOf7)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to WhatsApp
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with WhatsAppOneOf
        try {
            WhatsAppOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf1
        try {
            WhatsAppOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf2
        try {
            WhatsAppOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf3
        try {
            WhatsAppOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf4
        try {
            WhatsAppOneOf4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf5
        try {
            WhatsAppOneOf5.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf5 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf6
        try {
            WhatsAppOneOf6.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WhatsAppOneOf7
        try {
            WhatsAppOneOf7.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WhatsAppOneOf7 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for WhatsApp with oneOf schemas: WhatsAppOneOf, WhatsAppOneOf1, WhatsAppOneOf2, WhatsAppOneOf3, WhatsAppOneOf4, WhatsAppOneOf5, WhatsAppOneOf6, WhatsAppOneOf7. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of WhatsApp given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WhatsApp
     * @throws IOException if the JSON string is invalid with respect to WhatsApp
     */
    public static WhatsApp fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WhatsApp.class);
    }

    /**
     * Convert an instance of WhatsApp to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

