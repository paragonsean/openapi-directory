/*
 * Messages API
 * The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as SMS, MMS, WhatsApp, Viber and Facebook Messenger
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MessageStatusBaseError;
import org.openapitools.client.model.MessageStatusBaseUsage;
import org.openapitools.client.model.MessageStatusMMS;
import org.openapitools.client.model.MessageStatusMessenger;
import org.openapitools.client.model.MessageStatusSMS;
import org.openapitools.client.model.MessageStatusViber;
import org.openapitools.client.model.MessageStatusWhatsApp;
import org.openapitools.client.model.WhatsApp1Whatsapp;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:41.170851-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageStatusRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MessageStatusRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MessageStatusRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MessageStatusRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MessageStatusSMS> adapterMessageStatusSMS = gson.getDelegateAdapter(this, TypeToken.get(MessageStatusSMS.class));
            final TypeAdapter<MessageStatusMMS> adapterMessageStatusMMS = gson.getDelegateAdapter(this, TypeToken.get(MessageStatusMMS.class));
            final TypeAdapter<MessageStatusWhatsApp> adapterMessageStatusWhatsApp = gson.getDelegateAdapter(this, TypeToken.get(MessageStatusWhatsApp.class));
            final TypeAdapter<MessageStatusMessenger> adapterMessageStatusMessenger = gson.getDelegateAdapter(this, TypeToken.get(MessageStatusMessenger.class));
            final TypeAdapter<MessageStatusViber> adapterMessageStatusViber = gson.getDelegateAdapter(this, TypeToken.get(MessageStatusViber.class));

            return (TypeAdapter<T>) new TypeAdapter<MessageStatusRequest>() {
                @Override
                public void write(JsonWriter out, MessageStatusRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MessageStatusSMS`
                    if (value.getActualInstance() instanceof MessageStatusSMS) {
                        JsonElement element = adapterMessageStatusSMS.toJsonTree((MessageStatusSMS)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageStatusMMS`
                    if (value.getActualInstance() instanceof MessageStatusMMS) {
                        JsonElement element = adapterMessageStatusMMS.toJsonTree((MessageStatusMMS)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageStatusWhatsApp`
                    if (value.getActualInstance() instanceof MessageStatusWhatsApp) {
                        JsonElement element = adapterMessageStatusWhatsApp.toJsonTree((MessageStatusWhatsApp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageStatusMessenger`
                    if (value.getActualInstance() instanceof MessageStatusMessenger) {
                        JsonElement element = adapterMessageStatusMessenger.toJsonTree((MessageStatusMessenger)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageStatusViber`
                    if (value.getActualInstance() instanceof MessageStatusViber) {
                        JsonElement element = adapterMessageStatusViber.toJsonTree((MessageStatusViber)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp");
                }

                @Override
                public MessageStatusRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MessageStatusSMS
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageStatusSMS.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageStatusSMS;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageStatusSMS'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageStatusSMS failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageStatusSMS'", e);
                    }
                    // deserialize MessageStatusMMS
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageStatusMMS.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageStatusMMS;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageStatusMMS'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageStatusMMS failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageStatusMMS'", e);
                    }
                    // deserialize MessageStatusWhatsApp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageStatusWhatsApp.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageStatusWhatsApp;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageStatusWhatsApp'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageStatusWhatsApp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageStatusWhatsApp'", e);
                    }
                    // deserialize MessageStatusMessenger
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageStatusMessenger.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageStatusMessenger;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageStatusMessenger'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageStatusMessenger failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageStatusMessenger'", e);
                    }
                    // deserialize MessageStatusViber
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageStatusViber.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageStatusViber;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageStatusViber'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageStatusViber failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageStatusViber'", e);
                    }

                    if (match == 1) {
                        MessageStatusRequest ret = new MessageStatusRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for MessageStatusRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MessageStatusRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public MessageStatusRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MessageStatusSMS", MessageStatusSMS.class);
        schemas.put("MessageStatusMMS", MessageStatusMMS.class);
        schemas.put("MessageStatusWhatsApp", MessageStatusWhatsApp.class);
        schemas.put("MessageStatusMessenger", MessageStatusMessenger.class);
        schemas.put("MessageStatusViber", MessageStatusViber.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MessageStatusRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MessageStatusSMS) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageStatusMMS) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageStatusWhatsApp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageStatusMessenger) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageStatusViber) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp");
    }

    /**
     * Get the actual instance, which can be the following:
     * MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp
     *
     * @return The actual instance (MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MessageStatusSMS`. If the actual instance is not `MessageStatusSMS`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStatusSMS`
     * @throws ClassCastException if the instance is not `MessageStatusSMS`
     */
    public MessageStatusSMS getMessageStatusSMS() throws ClassCastException {
        return (MessageStatusSMS)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageStatusMMS`. If the actual instance is not `MessageStatusMMS`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStatusMMS`
     * @throws ClassCastException if the instance is not `MessageStatusMMS`
     */
    public MessageStatusMMS getMessageStatusMMS() throws ClassCastException {
        return (MessageStatusMMS)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageStatusWhatsApp`. If the actual instance is not `MessageStatusWhatsApp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStatusWhatsApp`
     * @throws ClassCastException if the instance is not `MessageStatusWhatsApp`
     */
    public MessageStatusWhatsApp getMessageStatusWhatsApp() throws ClassCastException {
        return (MessageStatusWhatsApp)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageStatusMessenger`. If the actual instance is not `MessageStatusMessenger`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStatusMessenger`
     * @throws ClassCastException if the instance is not `MessageStatusMessenger`
     */
    public MessageStatusMessenger getMessageStatusMessenger() throws ClassCastException {
        return (MessageStatusMessenger)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageStatusViber`. If the actual instance is not `MessageStatusViber`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageStatusViber`
     * @throws ClassCastException if the instance is not `MessageStatusViber`
     */
    public MessageStatusViber getMessageStatusViber() throws ClassCastException {
        return (MessageStatusViber)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MessageStatusRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with MessageStatusSMS
        try {
            MessageStatusSMS.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageStatusSMS failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageStatusMMS
        try {
            MessageStatusMMS.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageStatusMMS failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageStatusWhatsApp
        try {
            MessageStatusWhatsApp.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageStatusWhatsApp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageStatusMessenger
        try {
            MessageStatusMessenger.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageStatusMessenger failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageStatusViber
        try {
            MessageStatusViber.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageStatusViber failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for MessageStatusRequest with oneOf schemas: MessageStatusMMS, MessageStatusMessenger, MessageStatusSMS, MessageStatusViber, MessageStatusWhatsApp. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of MessageStatusRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MessageStatusRequest
     * @throws IOException if the JSON string is invalid with respect to MessageStatusRequest
     */
    public static MessageStatusRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MessageStatusRequest.class);
    }

    /**
     * Convert an instance of MessageStatusRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

