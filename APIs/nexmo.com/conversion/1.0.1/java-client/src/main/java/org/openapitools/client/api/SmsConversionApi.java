/*
 * Nexmo Conversion API
 * The Conversion API allows you to tell Nexmo about the reliability of your 2FA communications. Sending conversion data back to us means that Nexmo can deliver messages faster and more reliably. The conversion data you send us is confidential: Nexmo does not share it with third parties. In order to identify the carriers who provide the best performance, Nexmo continually tests the routes we use to deliver SMS and voice calls. Using Adaptive Routing™, Nexmo actively reroutes messages through different carrier routes and ensures faster and more reliable delivery for your messages. The route choice is made using millions of real-time conversion data points.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsConversionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsConversionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsConversionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for smsConversion
     * @param messageId The ID you receive in the response to a request. * From the Verify API - use the &#x60;event_id&#x60; in the response to Verify Check. * From the SMS API - use the &#x60;message-id&#x60; * From the Text-To-Speech API - use the &#x60;call-id&#x60; * From the Text-To-Speech-Prompt API - use the &#x60;call-id&#x60; (required)
     * @param delivered Set to _true_ if your user replied to the message you sent. Otherwise, set to _false_. **Note**: for curl, use 0 and 1. (required)
     * @param timestamp When the user completed your call-to-action (e.g. visited your website, installed your app) in [UTC±00:00](https://en.wikipedia.org/wiki/UTC%C2%B100:00) format: _yyyy-MM-dd HH:mm:ss_. If you do not set this parameter, Nexmo uses the time it receives this request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong credentials </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Conversion has not been enabled for your account </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Invalid parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsConversionCall(String messageId, Boolean delivered, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message-id", messageId));
        }

        if (delivered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivered", delivered));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSig", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smsConversionValidateBeforeCall(String messageId, Boolean delivered, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling smsConversion(Async)");
        }

        // verify the required parameter 'delivered' is set
        if (delivered == null) {
            throw new ApiException("Missing the required parameter 'delivered' when calling smsConversion(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling smsConversion(Async)");
        }

        return smsConversionCall(messageId, delivered, timestamp, _callback);

    }

    /**
     * Tell Nexmo if your SMS message was successful
     * Send a Conversion API request with information about the SMS message identified by &#x60;message-id&#x60;. Nexmo uses your conversion data and internal information about &#x60;message-id&#x60; to help improve our routing of messages in the future.
     * @param messageId The ID you receive in the response to a request. * From the Verify API - use the &#x60;event_id&#x60; in the response to Verify Check. * From the SMS API - use the &#x60;message-id&#x60; * From the Text-To-Speech API - use the &#x60;call-id&#x60; * From the Text-To-Speech-Prompt API - use the &#x60;call-id&#x60; (required)
     * @param delivered Set to _true_ if your user replied to the message you sent. Otherwise, set to _false_. **Note**: for curl, use 0 and 1. (required)
     * @param timestamp When the user completed your call-to-action (e.g. visited your website, installed your app) in [UTC±00:00](https://en.wikipedia.org/wiki/UTC%C2%B100:00) format: _yyyy-MM-dd HH:mm:ss_. If you do not set this parameter, Nexmo uses the time it receives this request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong credentials </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Conversion has not been enabled for your account </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Invalid parameters </td><td>  -  </td></tr>
     </table>
     */
    public void smsConversion(String messageId, Boolean delivered, String timestamp) throws ApiException {
        smsConversionWithHttpInfo(messageId, delivered, timestamp);
    }

    /**
     * Tell Nexmo if your SMS message was successful
     * Send a Conversion API request with information about the SMS message identified by &#x60;message-id&#x60;. Nexmo uses your conversion data and internal information about &#x60;message-id&#x60; to help improve our routing of messages in the future.
     * @param messageId The ID you receive in the response to a request. * From the Verify API - use the &#x60;event_id&#x60; in the response to Verify Check. * From the SMS API - use the &#x60;message-id&#x60; * From the Text-To-Speech API - use the &#x60;call-id&#x60; * From the Text-To-Speech-Prompt API - use the &#x60;call-id&#x60; (required)
     * @param delivered Set to _true_ if your user replied to the message you sent. Otherwise, set to _false_. **Note**: for curl, use 0 and 1. (required)
     * @param timestamp When the user completed your call-to-action (e.g. visited your website, installed your app) in [UTC±00:00](https://en.wikipedia.org/wiki/UTC%C2%B100:00) format: _yyyy-MM-dd HH:mm:ss_. If you do not set this parameter, Nexmo uses the time it receives this request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong credentials </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Conversion has not been enabled for your account </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Invalid parameters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> smsConversionWithHttpInfo(String messageId, Boolean delivered, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = smsConversionValidateBeforeCall(messageId, delivered, timestamp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Tell Nexmo if your SMS message was successful (asynchronously)
     * Send a Conversion API request with information about the SMS message identified by &#x60;message-id&#x60;. Nexmo uses your conversion data and internal information about &#x60;message-id&#x60; to help improve our routing of messages in the future.
     * @param messageId The ID you receive in the response to a request. * From the Verify API - use the &#x60;event_id&#x60; in the response to Verify Check. * From the SMS API - use the &#x60;message-id&#x60; * From the Text-To-Speech API - use the &#x60;call-id&#x60; * From the Text-To-Speech-Prompt API - use the &#x60;call-id&#x60; (required)
     * @param delivered Set to _true_ if your user replied to the message you sent. Otherwise, set to _false_. **Note**: for curl, use 0 and 1. (required)
     * @param timestamp When the user completed your call-to-action (e.g. visited your website, installed your app) in [UTC±00:00](https://en.wikipedia.org/wiki/UTC%C2%B100:00) format: _yyyy-MM-dd HH:mm:ss_. If you do not set this parameter, Nexmo uses the time it receives this request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong credentials </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Conversion has not been enabled for your account </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Invalid parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsConversionAsync(String messageId, Boolean delivered, String timestamp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = smsConversionValidateBeforeCall(messageId, delivered, timestamp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
