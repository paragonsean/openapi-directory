/*
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateCallRequestBaseToInner;
import org.openapitools.client.model.EndpointPhoneFrom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCallRequestBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:31.401268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCallRequestBase {
  /**
   * The HTTP method used to send event information to &#x60;event_url&#x60;.
   */
  @JsonAdapter(EventMethodEnum.Adapter.class)
  public enum EventMethodEnum {
    POST("POST"),
    
    GET("GET");

    private String value;

    EventMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventMethodEnum fromValue(String value) {
      for (EventMethodEnum b : EventMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_METHOD = "event_method";
  @SerializedName(SERIALIZED_NAME_EVENT_METHOD)
  private EventMethodEnum eventMethod = EventMethodEnum.POST;

  public static final String SERIALIZED_NAME_EVENT_URL = "event_url";
  @SerializedName(SERIALIZED_NAME_EVENT_URL)
  private List<URI> eventUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private EndpointPhoneFrom from;

  public static final String SERIALIZED_NAME_LENGTH_TIMER = "length_timer";
  @SerializedName(SERIALIZED_NAME_LENGTH_TIMER)
  private Integer lengthTimer = 7200;

  /**
   * Configure the behavior when Vonage detects that the call is answered by voicemail. If &#x60;continue&#x60;, Vonage sends an HTTP request to &#x60;event_url&#x60; with the Call event machine. If &#x60;hangup&#x60;, Vonage ends the call.
   */
  @JsonAdapter(MachineDetectionEnum.Adapter.class)
  public enum MachineDetectionEnum {
    CONTINUE("continue"),
    
    HANGUP("hangup");

    private String value;

    MachineDetectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MachineDetectionEnum fromValue(String value) {
      for (MachineDetectionEnum b : MachineDetectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MachineDetectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineDetectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineDetectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MachineDetectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MachineDetectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MACHINE_DETECTION = "machine_detection";
  @SerializedName(SERIALIZED_NAME_MACHINE_DETECTION)
  private MachineDetectionEnum machineDetection;

  public static final String SERIALIZED_NAME_RANDOM_FROM_NUMBER = "random_from_number";
  @SerializedName(SERIALIZED_NAME_RANDOM_FROM_NUMBER)
  private Boolean randomFromNumber = false;

  public static final String SERIALIZED_NAME_RINGING_TIMER = "ringing_timer";
  @SerializedName(SERIALIZED_NAME_RINGING_TIMER)
  private Integer ringingTimer = 60;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<CreateCallRequestBaseToInner> to = new ArrayList<>();

  public CreateCallRequestBase() {
  }

  public CreateCallRequestBase eventMethod(EventMethodEnum eventMethod) {
    this.eventMethod = eventMethod;
    return this;
  }

  /**
   * The HTTP method used to send event information to &#x60;event_url&#x60;.
   * @return eventMethod
   */
  @javax.annotation.Nullable
  public EventMethodEnum getEventMethod() {
    return eventMethod;
  }

  public void setEventMethod(EventMethodEnum eventMethod) {
    this.eventMethod = eventMethod;
  }


  public CreateCallRequestBase eventUrl(List<URI> eventUrl) {
    this.eventUrl = eventUrl;
    return this;
  }

  public CreateCallRequestBase addEventUrlItem(URI eventUrlItem) {
    if (this.eventUrl == null) {
      this.eventUrl = new ArrayList<>();
    }
    this.eventUrl.add(eventUrlItem);
    return this;
  }

  /**
   * **Required** unless &#x60;event_url&#x60; is configured at the application level, see [Create an Application](/api/application.v2#createApplication)  The webhook endpoint where call progress events are sent to. For more information about the values sent, see [Event webhook](/voice/voice-api/webhook-reference#event-webhook). 
   * @return eventUrl
   */
  @javax.annotation.Nullable
  public List<URI> getEventUrl() {
    return eventUrl;
  }

  public void setEventUrl(List<URI> eventUrl) {
    this.eventUrl = eventUrl;
  }


  public CreateCallRequestBase from(EndpointPhoneFrom from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public EndpointPhoneFrom getFrom() {
    return from;
  }

  public void setFrom(EndpointPhoneFrom from) {
    this.from = from;
  }


  public CreateCallRequestBase lengthTimer(Integer lengthTimer) {
    this.lengthTimer = lengthTimer;
    return this;
  }

  /**
   * Set the number of seconds that elapse before Vonage hangs up after the call state changes to answered.
   * minimum: 1
   * maximum: 7200
   * @return lengthTimer
   */
  @javax.annotation.Nullable
  public Integer getLengthTimer() {
    return lengthTimer;
  }

  public void setLengthTimer(Integer lengthTimer) {
    this.lengthTimer = lengthTimer;
  }


  public CreateCallRequestBase machineDetection(MachineDetectionEnum machineDetection) {
    this.machineDetection = machineDetection;
    return this;
  }

  /**
   * Configure the behavior when Vonage detects that the call is answered by voicemail. If &#x60;continue&#x60;, Vonage sends an HTTP request to &#x60;event_url&#x60; with the Call event machine. If &#x60;hangup&#x60;, Vonage ends the call.
   * @return machineDetection
   */
  @javax.annotation.Nullable
  public MachineDetectionEnum getMachineDetection() {
    return machineDetection;
  }

  public void setMachineDetection(MachineDetectionEnum machineDetection) {
    this.machineDetection = machineDetection;
  }


  public CreateCallRequestBase randomFromNumber(Boolean randomFromNumber) {
    this.randomFromNumber = randomFromNumber;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; to use random phone number as &#x60;from&#x60;. The number will be selected from the list of the numbers assigned to the current application. &#x60;random_from_number: true&#x60; cannot be used together with &#x60;from&#x60;.
   * @return randomFromNumber
   */
  @javax.annotation.Nullable
  public Boolean getRandomFromNumber() {
    return randomFromNumber;
  }

  public void setRandomFromNumber(Boolean randomFromNumber) {
    this.randomFromNumber = randomFromNumber;
  }


  public CreateCallRequestBase ringingTimer(Integer ringingTimer) {
    this.ringingTimer = ringingTimer;
    return this;
  }

  /**
   * Set the number of seconds that elapse before Vonage hangs up after the call state changes to ‘ringing’.
   * minimum: 1
   * maximum: 120
   * @return ringingTimer
   */
  @javax.annotation.Nullable
  public Integer getRingingTimer() {
    return ringingTimer;
  }

  public void setRingingTimer(Integer ringingTimer) {
    this.ringingTimer = ringingTimer;
  }


  public CreateCallRequestBase to(List<CreateCallRequestBaseToInner> to) {
    this.to = to;
    return this;
  }

  public CreateCallRequestBase addToItem(CreateCallRequestBaseToInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public List<CreateCallRequestBaseToInner> getTo() {
    return to;
  }

  public void setTo(List<CreateCallRequestBaseToInner> to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCallRequestBase createCallRequestBase = (CreateCallRequestBase) o;
    return Objects.equals(this.eventMethod, createCallRequestBase.eventMethod) &&
        Objects.equals(this.eventUrl, createCallRequestBase.eventUrl) &&
        Objects.equals(this.from, createCallRequestBase.from) &&
        Objects.equals(this.lengthTimer, createCallRequestBase.lengthTimer) &&
        Objects.equals(this.machineDetection, createCallRequestBase.machineDetection) &&
        Objects.equals(this.randomFromNumber, createCallRequestBase.randomFromNumber) &&
        Objects.equals(this.ringingTimer, createCallRequestBase.ringingTimer) &&
        Objects.equals(this.to, createCallRequestBase.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventMethod, eventUrl, from, lengthTimer, machineDetection, randomFromNumber, ringingTimer, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCallRequestBase {\n");
    sb.append("    eventMethod: ").append(toIndentedString(eventMethod)).append("\n");
    sb.append("    eventUrl: ").append(toIndentedString(eventUrl)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lengthTimer: ").append(toIndentedString(lengthTimer)).append("\n");
    sb.append("    machineDetection: ").append(toIndentedString(machineDetection)).append("\n");
    sb.append("    randomFromNumber: ").append(toIndentedString(randomFromNumber)).append("\n");
    sb.append("    ringingTimer: ").append(toIndentedString(ringingTimer)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_method");
    openapiFields.add("event_url");
    openapiFields.add("from");
    openapiFields.add("length_timer");
    openapiFields.add("machine_detection");
    openapiFields.add("random_from_number");
    openapiFields.add("ringing_timer");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCallRequestBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCallRequestBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCallRequestBase is not found in the empty JSON string", CreateCallRequestBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCallRequestBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCallRequestBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCallRequestBase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_method") != null && !jsonObj.get("event_method").isJsonNull()) && !jsonObj.get("event_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_method").toString()));
      }
      // validate the optional field `event_method`
      if (jsonObj.get("event_method") != null && !jsonObj.get("event_method").isJsonNull()) {
        EventMethodEnum.validateJsonElement(jsonObj.get("event_method"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event_url") != null && !jsonObj.get("event_url").isJsonNull() && !jsonObj.get("event_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_url` to be an array in the JSON string but got `%s`", jsonObj.get("event_url").toString()));
      }
      // validate the required field `from`
      EndpointPhoneFrom.validateJsonElement(jsonObj.get("from"));
      if ((jsonObj.get("machine_detection") != null && !jsonObj.get("machine_detection").isJsonNull()) && !jsonObj.get("machine_detection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machine_detection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machine_detection").toString()));
      }
      // validate the optional field `machine_detection`
      if (jsonObj.get("machine_detection") != null && !jsonObj.get("machine_detection").isJsonNull()) {
        MachineDetectionEnum.validateJsonElement(jsonObj.get("machine_detection"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }

      JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
      // validate the required field `to` (array)
      for (int i = 0; i < jsonArrayto.size(); i++) {
        CreateCallRequestBaseToInner.validateJsonElement(jsonArrayto.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCallRequestBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCallRequestBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCallRequestBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCallRequestBase.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCallRequestBase>() {
           @Override
           public void write(JsonWriter out, CreateCallRequestBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCallRequestBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCallRequestBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCallRequestBase
   * @throws IOException if the JSON string is invalid with respect to CreateCallRequestBase
   */
  public static CreateCallRequestBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCallRequestBase.class);
  }

  /**
   * Convert an instance of CreateCallRequestBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

