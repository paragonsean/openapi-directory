/*
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCallRequest;
import org.openapitools.client.model.CreateCallResponse;
import org.openapitools.client.model.GetCallResponse;
import org.openapitools.client.model.GetCallsResponse;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.UpdateCallRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCall
     * @param createCallRequest Call Details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallCall(CreateCallRequest createCallRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCallRequest;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCallValidateBeforeCall(CreateCallRequest createCallRequest, final ApiCallback _callback) throws ApiException {
        return createCallCall(createCallRequest, _callback);

    }

    /**
     * Create an outbound call
     * Create an outbound Call
     * @param createCallRequest Call Details (optional)
     * @return CreateCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateCallResponse createCall(CreateCallRequest createCallRequest) throws ApiException {
        ApiResponse<CreateCallResponse> localVarResp = createCallWithHttpInfo(createCallRequest);
        return localVarResp.getData();
    }

    /**
     * Create an outbound call
     * Create an outbound Call
     * @param createCallRequest Call Details (optional)
     * @return ApiResponse&lt;CreateCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCallResponse> createCallWithHttpInfo(CreateCallRequest createCallRequest) throws ApiException {
        okhttp3.Call localVarCall = createCallValidateBeforeCall(createCallRequest, null);
        Type localVarReturnType = new TypeToken<CreateCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an outbound call (asynchronously)
     * Create an outbound Call
     * @param createCallRequest Call Details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallAsync(CreateCallRequest createCallRequest, final ApiCallback<CreateCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCallValidateBeforeCall(createCallRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCall
     * @param uuid UUID of the Call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getCall(Async)");
        }

        return getCallCall(uuid, _callback);

    }

    /**
     * Get detail of a specific call
     * Get detail of a specific call
     * @param uuid UUID of the Call (required)
     * @return GetCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetCallResponse getCall(String uuid) throws ApiException {
        ApiResponse<GetCallResponse> localVarResp = getCallWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Get detail of a specific call
     * Get detail of a specific call
     * @param uuid UUID of the Call (required)
     * @return ApiResponse&lt;GetCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCallResponse> getCallWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = getCallValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<GetCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detail of a specific call (asynchronously)
     * Get detail of a specific call
     * @param uuid UUID of the Call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallAsync(String uuid, final ApiCallback<GetCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<GetCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalls
     * @param status Filter by call status (optional)
     * @param dateStart Return the records that occurred after this point in time (optional)
     * @param dateEnd Return the records that occurred before this point in time (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Either ascending or  descending order. (optional, default to asc)
     * @param conversationUuid Return all the records associated with a specific conversation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallsCall(String status, OffsetDateTime dateStart, OffsetDateTime dateEnd, Integer pageSize, Integer recordIndex, String order, UUID conversationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (recordIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("record_index", recordIndex));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (conversationUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conversation_uuid", conversationUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallsValidateBeforeCall(String status, OffsetDateTime dateStart, OffsetDateTime dateEnd, Integer pageSize, Integer recordIndex, String order, UUID conversationUuid, final ApiCallback _callback) throws ApiException {
        return getCallsCall(status, dateStart, dateEnd, pageSize, recordIndex, order, conversationUuid, _callback);

    }

    /**
     * Get details of your calls
     * Get details of your calls
     * @param status Filter by call status (optional)
     * @param dateStart Return the records that occurred after this point in time (optional)
     * @param dateEnd Return the records that occurred before this point in time (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Either ascending or  descending order. (optional, default to asc)
     * @param conversationUuid Return all the records associated with a specific conversation. (optional)
     * @return GetCallsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCallsResponse getCalls(String status, OffsetDateTime dateStart, OffsetDateTime dateEnd, Integer pageSize, Integer recordIndex, String order, UUID conversationUuid) throws ApiException {
        ApiResponse<GetCallsResponse> localVarResp = getCallsWithHttpInfo(status, dateStart, dateEnd, pageSize, recordIndex, order, conversationUuid);
        return localVarResp.getData();
    }

    /**
     * Get details of your calls
     * Get details of your calls
     * @param status Filter by call status (optional)
     * @param dateStart Return the records that occurred after this point in time (optional)
     * @param dateEnd Return the records that occurred before this point in time (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Either ascending or  descending order. (optional, default to asc)
     * @param conversationUuid Return all the records associated with a specific conversation. (optional)
     * @return ApiResponse&lt;GetCallsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCallsResponse> getCallsWithHttpInfo(String status, OffsetDateTime dateStart, OffsetDateTime dateEnd, Integer pageSize, Integer recordIndex, String order, UUID conversationUuid) throws ApiException {
        okhttp3.Call localVarCall = getCallsValidateBeforeCall(status, dateStart, dateEnd, pageSize, recordIndex, order, conversationUuid, null);
        Type localVarReturnType = new TypeToken<GetCallsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of your calls (asynchronously)
     * Get details of your calls
     * @param status Filter by call status (optional)
     * @param dateStart Return the records that occurred after this point in time (optional)
     * @param dateEnd Return the records that occurred before this point in time (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Either ascending or  descending order. (optional, default to asc)
     * @param conversationUuid Return all the records associated with a specific conversation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallsAsync(String status, OffsetDateTime dateStart, OffsetDateTime dateEnd, Integer pageSize, Integer recordIndex, String order, UUID conversationUuid, final ApiCallback<GetCallsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallsValidateBeforeCall(status, dateStart, dateEnd, pageSize, recordIndex, order, conversationUuid, _callback);
        Type localVarReturnType = new TypeToken<GetCallsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCall
     * @param uuid UUID of the Call (required)
     * @param updateCallRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallCall(String uuid, UpdateCallRequest updateCallRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCallRequest;

        // create path and map variables
        String localVarPath = "/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallValidateBeforeCall(String uuid, UpdateCallRequest updateCallRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCall(Async)");
        }

        // verify the required parameter 'updateCallRequest' is set
        if (updateCallRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCallRequest' when calling updateCall(Async)");
        }

        return updateCallCall(uuid, updateCallRequest, _callback);

    }

    /**
     * Modify an in progress call
     * Modify an in progress call
     * @param uuid UUID of the Call (required)
     * @param updateCallRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateCall(String uuid, UpdateCallRequest updateCallRequest) throws ApiException {
        updateCallWithHttpInfo(uuid, updateCallRequest);
    }

    /**
     * Modify an in progress call
     * Modify an in progress call
     * @param uuid UUID of the Call (required)
     * @param updateCallRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCallWithHttpInfo(String uuid, UpdateCallRequest updateCallRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCallValidateBeforeCall(uuid, updateCallRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify an in progress call (asynchronously)
     * Modify an in progress call
     * @param uuid UUID of the Call (required)
     * @param updateCallRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallAsync(String uuid, UpdateCallRequest updateCallRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallValidateBeforeCall(uuid, updateCallRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
