/*
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:31.401268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartStreamRequest {
  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level = "0";

  public static final String SERIALIZED_NAME_LOOP = "loop";
  @SerializedName(SERIALIZED_NAME_LOOP)
  private Integer loop = 1;

  public static final String SERIALIZED_NAME_STREAM_URL = "stream_url";
  @SerializedName(SERIALIZED_NAME_STREAM_URL)
  private List<String> streamUrl = new ArrayList<>();

  public StartStreamRequest() {
  }

  public StartStreamRequest level(String level) {
    this.level = level;
    return this;
  }

  /**
   * Set the audio level of the stream in the range &#x60;-1 &gt;&#x3D; level &lt;&#x3D; 1&#x60; with a precision of 0.1. The default value is 0.
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public StartStreamRequest loop(Integer loop) {
    this.loop = loop;
    return this;
  }

  /**
   * the number of times to play the file, 0 for infinite
   * @return loop
   */
  @javax.annotation.Nullable
  public Integer getLoop() {
    return loop;
  }

  public void setLoop(Integer loop) {
    this.loop = loop;
  }


  public StartStreamRequest streamUrl(List<String> streamUrl) {
    this.streamUrl = streamUrl;
    return this;
  }

  public StartStreamRequest addStreamUrlItem(String streamUrlItem) {
    if (this.streamUrl == null) {
      this.streamUrl = new ArrayList<>();
    }
    this.streamUrl.add(streamUrlItem);
    return this;
  }

  /**
   * Get streamUrl
   * @return streamUrl
   */
  @javax.annotation.Nonnull
  public List<String> getStreamUrl() {
    return streamUrl;
  }

  public void setStreamUrl(List<String> streamUrl) {
    this.streamUrl = streamUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartStreamRequest startStreamRequest = (StartStreamRequest) o;
    return Objects.equals(this.level, startStreamRequest.level) &&
        Objects.equals(this.loop, startStreamRequest.loop) &&
        Objects.equals(this.streamUrl, startStreamRequest.streamUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(level, loop, streamUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartStreamRequest {\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    loop: ").append(toIndentedString(loop)).append("\n");
    sb.append("    streamUrl: ").append(toIndentedString(streamUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("level");
    openapiFields.add("loop");
    openapiFields.add("stream_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stream_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartStreamRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartStreamRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartStreamRequest is not found in the empty JSON string", StartStreamRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartStreamRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartStreamRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartStreamRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("stream_url") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("stream_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_url` to be an array in the JSON string but got `%s`", jsonObj.get("stream_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartStreamRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartStreamRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartStreamRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartStreamRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartStreamRequest>() {
           @Override
           public void write(JsonWriter out, StartStreamRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartStreamRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartStreamRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartStreamRequest
   * @throws IOException if the JSON string is invalid with respect to StartStreamRequest
   */
  public static StartStreamRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartStreamRequest.class);
  }

  /**
   * Convert an instance of StartStreamRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

