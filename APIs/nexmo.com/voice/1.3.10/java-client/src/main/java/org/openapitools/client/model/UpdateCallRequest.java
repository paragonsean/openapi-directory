/*
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateCallRequestEarmuff;
import org.openapitools.client.model.UpdateCallRequestHangup;
import org.openapitools.client.model.UpdateCallRequestMute;
import org.openapitools.client.model.UpdateCallRequestTransferAnswerUrl;
import org.openapitools.client.model.UpdateCallRequestTransferAnswerUrlDestination;
import org.openapitools.client.model.UpdateCallRequestTransferNcco;
import org.openapitools.client.model.UpdateCallRequestUnearmuff;
import org.openapitools.client.model.UpdateCallRequestUnmute;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:31.401268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateCallRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateCallRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateCallRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateCallRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateCallRequestTransferNcco> adapterUpdateCallRequestTransferNcco = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestTransferNcco.class));
            final TypeAdapter<UpdateCallRequestTransferAnswerUrl> adapterUpdateCallRequestTransferAnswerUrl = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestTransferAnswerUrl.class));
            final TypeAdapter<UpdateCallRequestHangup> adapterUpdateCallRequestHangup = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestHangup.class));
            final TypeAdapter<UpdateCallRequestMute> adapterUpdateCallRequestMute = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestMute.class));
            final TypeAdapter<UpdateCallRequestUnmute> adapterUpdateCallRequestUnmute = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestUnmute.class));
            final TypeAdapter<UpdateCallRequestEarmuff> adapterUpdateCallRequestEarmuff = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestEarmuff.class));
            final TypeAdapter<UpdateCallRequestUnearmuff> adapterUpdateCallRequestUnearmuff = gson.getDelegateAdapter(this, TypeToken.get(UpdateCallRequestUnearmuff.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateCallRequest>() {
                @Override
                public void write(JsonWriter out, UpdateCallRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UpdateCallRequestTransferNcco`
                    if (value.getActualInstance() instanceof UpdateCallRequestTransferNcco) {
                        JsonElement element = adapterUpdateCallRequestTransferNcco.toJsonTree((UpdateCallRequestTransferNcco)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestTransferAnswerUrl`
                    if (value.getActualInstance() instanceof UpdateCallRequestTransferAnswerUrl) {
                        JsonElement element = adapterUpdateCallRequestTransferAnswerUrl.toJsonTree((UpdateCallRequestTransferAnswerUrl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestHangup`
                    if (value.getActualInstance() instanceof UpdateCallRequestHangup) {
                        JsonElement element = adapterUpdateCallRequestHangup.toJsonTree((UpdateCallRequestHangup)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestMute`
                    if (value.getActualInstance() instanceof UpdateCallRequestMute) {
                        JsonElement element = adapterUpdateCallRequestMute.toJsonTree((UpdateCallRequestMute)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestUnmute`
                    if (value.getActualInstance() instanceof UpdateCallRequestUnmute) {
                        JsonElement element = adapterUpdateCallRequestUnmute.toJsonTree((UpdateCallRequestUnmute)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestEarmuff`
                    if (value.getActualInstance() instanceof UpdateCallRequestEarmuff) {
                        JsonElement element = adapterUpdateCallRequestEarmuff.toJsonTree((UpdateCallRequestEarmuff)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdateCallRequestUnearmuff`
                    if (value.getActualInstance() instanceof UpdateCallRequestUnearmuff) {
                        JsonElement element = adapterUpdateCallRequestUnearmuff.toJsonTree((UpdateCallRequestUnearmuff)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute");
                }

                @Override
                public UpdateCallRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UpdateCallRequestTransferNcco
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestTransferNcco.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestTransferNcco;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestTransferNcco'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestTransferNcco failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestTransferNcco'", e);
                    }
                    // deserialize UpdateCallRequestTransferAnswerUrl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestTransferAnswerUrl.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestTransferAnswerUrl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestTransferAnswerUrl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestTransferAnswerUrl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestTransferAnswerUrl'", e);
                    }
                    // deserialize UpdateCallRequestHangup
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestHangup.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestHangup;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestHangup'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestHangup failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestHangup'", e);
                    }
                    // deserialize UpdateCallRequestMute
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestMute.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestMute;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestMute'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestMute failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestMute'", e);
                    }
                    // deserialize UpdateCallRequestUnmute
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestUnmute.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestUnmute;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestUnmute'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestUnmute failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestUnmute'", e);
                    }
                    // deserialize UpdateCallRequestEarmuff
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestEarmuff.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestEarmuff;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestEarmuff'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestEarmuff failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestEarmuff'", e);
                    }
                    // deserialize UpdateCallRequestUnearmuff
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdateCallRequestUnearmuff.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdateCallRequestUnearmuff;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdateCallRequestUnearmuff'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdateCallRequestUnearmuff failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdateCallRequestUnearmuff'", e);
                    }

                    if (match == 1) {
                        UpdateCallRequest ret = new UpdateCallRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateCallRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpdateCallRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateCallRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("UpdateCallRequestTransferNcco", UpdateCallRequestTransferNcco.class);
        schemas.put("UpdateCallRequestTransferAnswerUrl", UpdateCallRequestTransferAnswerUrl.class);
        schemas.put("UpdateCallRequestHangup", UpdateCallRequestHangup.class);
        schemas.put("UpdateCallRequestMute", UpdateCallRequestMute.class);
        schemas.put("UpdateCallRequestUnmute", UpdateCallRequestUnmute.class);
        schemas.put("UpdateCallRequestEarmuff", UpdateCallRequestEarmuff.class);
        schemas.put("UpdateCallRequestUnearmuff", UpdateCallRequestUnearmuff.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateCallRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof UpdateCallRequestTransferNcco) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestTransferAnswerUrl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestHangup) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestMute) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestUnmute) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestEarmuff) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdateCallRequestUnearmuff) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute");
    }

    /**
     * Get the actual instance, which can be the following:
     * UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute
     *
     * @return The actual instance (UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpdateCallRequestTransferNcco`. If the actual instance is not `UpdateCallRequestTransferNcco`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestTransferNcco`
     * @throws ClassCastException if the instance is not `UpdateCallRequestTransferNcco`
     */
    public UpdateCallRequestTransferNcco getUpdateCallRequestTransferNcco() throws ClassCastException {
        return (UpdateCallRequestTransferNcco)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestTransferAnswerUrl`. If the actual instance is not `UpdateCallRequestTransferAnswerUrl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestTransferAnswerUrl`
     * @throws ClassCastException if the instance is not `UpdateCallRequestTransferAnswerUrl`
     */
    public UpdateCallRequestTransferAnswerUrl getUpdateCallRequestTransferAnswerUrl() throws ClassCastException {
        return (UpdateCallRequestTransferAnswerUrl)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestHangup`. If the actual instance is not `UpdateCallRequestHangup`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestHangup`
     * @throws ClassCastException if the instance is not `UpdateCallRequestHangup`
     */
    public UpdateCallRequestHangup getUpdateCallRequestHangup() throws ClassCastException {
        return (UpdateCallRequestHangup)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestMute`. If the actual instance is not `UpdateCallRequestMute`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestMute`
     * @throws ClassCastException if the instance is not `UpdateCallRequestMute`
     */
    public UpdateCallRequestMute getUpdateCallRequestMute() throws ClassCastException {
        return (UpdateCallRequestMute)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestUnmute`. If the actual instance is not `UpdateCallRequestUnmute`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestUnmute`
     * @throws ClassCastException if the instance is not `UpdateCallRequestUnmute`
     */
    public UpdateCallRequestUnmute getUpdateCallRequestUnmute() throws ClassCastException {
        return (UpdateCallRequestUnmute)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestEarmuff`. If the actual instance is not `UpdateCallRequestEarmuff`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestEarmuff`
     * @throws ClassCastException if the instance is not `UpdateCallRequestEarmuff`
     */
    public UpdateCallRequestEarmuff getUpdateCallRequestEarmuff() throws ClassCastException {
        return (UpdateCallRequestEarmuff)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdateCallRequestUnearmuff`. If the actual instance is not `UpdateCallRequestUnearmuff`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdateCallRequestUnearmuff`
     * @throws ClassCastException if the instance is not `UpdateCallRequestUnearmuff`
     */
    public UpdateCallRequestUnearmuff getUpdateCallRequestUnearmuff() throws ClassCastException {
        return (UpdateCallRequestUnearmuff)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdateCallRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with UpdateCallRequestTransferNcco
        try {
            UpdateCallRequestTransferNcco.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestTransferNcco failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestTransferAnswerUrl
        try {
            UpdateCallRequestTransferAnswerUrl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestTransferAnswerUrl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestHangup
        try {
            UpdateCallRequestHangup.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestHangup failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestMute
        try {
            UpdateCallRequestMute.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestMute failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestUnmute
        try {
            UpdateCallRequestUnmute.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestUnmute failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestEarmuff
        try {
            UpdateCallRequestEarmuff.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestEarmuff failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdateCallRequestUnearmuff
        try {
            UpdateCallRequestUnearmuff.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdateCallRequestUnearmuff failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for UpdateCallRequest with oneOf schemas: UpdateCallRequestEarmuff, UpdateCallRequestHangup, UpdateCallRequestMute, UpdateCallRequestTransferAnswerUrl, UpdateCallRequestTransferNcco, UpdateCallRequestUnearmuff, UpdateCallRequestUnmute. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UpdateCallRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateCallRequest
     * @throws IOException if the JSON string is invalid with respect to UpdateCallRequest
     */
    public static UpdateCallRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateCallRequest.class);
    }

    /**
     * Convert an instance of UpdateCallRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

