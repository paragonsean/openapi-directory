/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCallRequest from '../model/CreateCallRequest';
import CreateCallResponse from '../model/CreateCallResponse';
import GetCallResponse from '../model/GetCallResponse';
import GetCallsResponse from '../model/GetCallsResponse';
import UpdateCallRequest from '../model/UpdateCallRequest';

/**
* Calls service.
* @module api/CallsApi
* @version 1.3.10
*/
export default class CallsApi {

    /**
    * Constructs a new CallsApi. 
    * @alias module:api/CallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCall operation.
     * @callback module:api/CallsApi~createCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an outbound call
     * Create an outbound Call
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCallRequest} [createCallRequest] Call Details
     * @param {module:api/CallsApi~createCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCallResponse}
     */
    createCall(opts, callback) {
      opts = opts || {};
      let postBody = opts['createCallRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCallResponse;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCall operation.
     * @callback module:api/CallsApi~getCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detail of a specific call
     * Get detail of a specific call
     * @param {String} uuid UUID of the Call
     * @param {module:api/CallsApi~getCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallResponse}
     */
    getCall(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getCall");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCallResponse;
      return this.apiClient.callApi(
        '/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalls operation.
     * @callback module:api/CallsApi~getCallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of your calls
     * Get details of your calls
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Filter by call status
     * @param {Date} [dateStart] Return the records that occurred after this point in time
     * @param {Date} [dateEnd] Return the records that occurred before this point in time
     * @param {Number} [pageSize = 10)] Return this amount of records in the response
     * @param {Number} [recordIndex = 0)] Return calls from this index in the response
     * @param {module:model/String} [order = 'asc')] Either ascending or  descending order.
     * @param {String} [conversationUuid] Return all the records associated with a specific conversation.
     * @param {module:api/CallsApi~getCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallsResponse}
     */
    getCalls(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'page_size': opts['pageSize'],
        'record_index': opts['recordIndex'],
        'order': opts['order'],
        'conversation_uuid': opts['conversationUuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCallsResponse;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCall operation.
     * @callback module:api/CallsApi~updateCallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify an in progress call
     * Modify an in progress call
     * @param {String} uuid UUID of the Call
     * @param {module:model/UpdateCallRequest} updateCallRequest 
     * @param {module:api/CallsApi~updateCallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCall(uuid, updateCallRequest, callback) {
      let postBody = updateCallRequest;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateCall");
      }
      // verify the required parameter 'updateCallRequest' is set
      if (updateCallRequest === undefined || updateCallRequest === null) {
        throw new Error("Missing the required parameter 'updateCallRequest' when calling updateCall");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
