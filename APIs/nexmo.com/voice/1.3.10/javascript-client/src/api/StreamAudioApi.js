/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StartStreamRequest from '../model/StartStreamRequest';
import StartStreamResponse from '../model/StartStreamResponse';
import StopStreamResponse from '../model/StopStreamResponse';

/**
* StreamAudio service.
* @module api/StreamAudioApi
* @version 1.3.10
*/
export default class StreamAudioApi {

    /**
    * Constructs a new StreamAudioApi. 
    * @alias module:api/StreamAudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the startStream operation.
     * @callback module:api/StreamAudioApi~startStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play an audio file into a call
     * Play an audio file into a call
     * @param {String} uuid UUID of the Call Leg
     * @param {module:model/StartStreamRequest} startStreamRequest action to perform
     * @param {module:api/StreamAudioApi~startStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartStreamResponse}
     */
    startStream(uuid, startStreamRequest, callback) {
      let postBody = startStreamRequest;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling startStream");
      }
      // verify the required parameter 'startStreamRequest' is set
      if (startStreamRequest === undefined || startStreamRequest === null) {
        throw new Error("Missing the required parameter 'startStreamRequest' when calling startStream");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartStreamResponse;
      return this.apiClient.callApi(
        '/{uuid}/stream', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopStream operation.
     * @callback module:api/StreamAudioApi~stopStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop playing an audio file into a call
     * Stop playing an audio file into a call
     * @param {String} uuid UUID of the Call Leg
     * @param {module:api/StreamAudioApi~stopStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopStreamResponse}
     */
    stopStream(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling stopStream");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopStreamResponse;
      return this.apiClient.callApi(
        '/{uuid}/stream', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
