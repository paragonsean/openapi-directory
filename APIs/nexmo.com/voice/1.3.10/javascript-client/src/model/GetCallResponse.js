/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Direction from './Direction';
import From from './From';
import GetCallResponseLinks from './GetCallResponseLinks';
import To from './To';

/**
 * The GetCallResponse model module.
 * @module model/GetCallResponse
 * @version 1.3.10
 */
class GetCallResponse {
    /**
     * Constructs a new <code>GetCallResponse</code>.
     * @alias module:model/GetCallResponse
     */
    constructor() { 
        
        GetCallResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetCallResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetCallResponse} obj Optional instance to populate.
     * @return {module:model/GetCallResponse} The populated <code>GetCallResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetCallResponse();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = GetCallResponseLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('conversation_uuid')) {
                obj['conversation_uuid'] = ApiClient.convertToType(data['conversation_uuid'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = Direction.constructFromObject(data['direction']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = From.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = To.constructFromObject(data['to']);
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetCallResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetCallResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          GetCallResponseLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['conversation_uuid'] && !(typeof data['conversation_uuid'] === 'string' || data['conversation_uuid'] instanceof String)) {
            throw new Error("Expected the field `conversation_uuid` to be a primitive type in the JSON string but got " + data['conversation_uuid']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['end_time'] && !(typeof data['end_time'] === 'string' || data['end_time'] instanceof String)) {
            throw new Error("Expected the field `end_time` to be a primitive type in the JSON string but got " + data['end_time']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          From.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['rate'] && !(typeof data['rate'] === 'string' || data['rate'] instanceof String)) {
            throw new Error("Expected the field `rate` to be a primitive type in the JSON string but got " + data['rate']);
        }
        // ensure the json data is a string
        if (data['start_time'] && !(typeof data['start_time'] === 'string' || data['start_time'] instanceof String)) {
            throw new Error("Expected the field `start_time` to be a primitive type in the JSON string but got " + data['start_time']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
          To.validateJSON(data['to']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/GetCallResponseLinks} _links
 */
GetCallResponse.prototype['_links'] = undefined;

/**
 * The unique identifier for the conversation this call leg is part of.
 * @member {String} conversation_uuid
 */
GetCallResponse.prototype['conversation_uuid'] = undefined;

/**
 * @member {module:model/Direction} direction
 */
GetCallResponse.prototype['direction'] = undefined;

/**
 * The time elapsed for the call to take place in seconds. This is only sent if `status` is `completed`.
 * @member {String} duration
 */
GetCallResponse.prototype['duration'] = undefined;

/**
 * The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For xample, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.
 * @member {String} end_time
 */
GetCallResponse.prototype['end_time'] = undefined;

/**
 * @member {module:model/From} from
 */
GetCallResponse.prototype['from'] = undefined;

/**
 * The Mobile Country Code Mobile Network Code ([MCCMNC](https://en.wikipedia.org/wiki/Mobile_country_code)) for the carrier network used to make this call. This is only sent if `status` is `completed`.
 * @member {String} network
 */
GetCallResponse.prototype['network'] = undefined;

/**
 * The total price charged for this call. This is only sent if `status` is `completed`.
 * @member {String} price
 */
GetCallResponse.prototype['price'] = undefined;

/**
 * The price per minute for this call. This is only sent if `status` is `completed`.
 * @member {String} rate
 */
GetCallResponse.prototype['rate'] = undefined;

/**
 * The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For example, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.
 * @member {String} start_time
 */
GetCallResponse.prototype['start_time'] = undefined;

/**
 * The status of the call. [See possible values](https://developer.nexmo.com/voice/voice-api/guides/call-flow#event-objects)
 * @member {String} status
 */
GetCallResponse.prototype['status'] = undefined;

/**
 * @member {module:model/To} to
 */
GetCallResponse.prototype['to'] = undefined;

/**
 * The unique identifier for this call leg. The UUID is created when your call request is accepted by Vonage. You use the UUID in all requests for individual live calls
 * @member {String} uuid
 */
GetCallResponse.prototype['uuid'] = undefined;






export default GetCallResponse;

