/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Language from './Language';
import VoiceName from './VoiceName';

/**
 * The StartTalkRequest model module.
 * @module model/StartTalkRequest
 * @version 1.3.10
 */
class StartTalkRequest {
    /**
     * Constructs a new <code>StartTalkRequest</code>.
     * @alias module:model/StartTalkRequest
     * @param text {String} The text to read
     */
    constructor(text) { 
        
        StartTalkRequest.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['level'] = '0';
        obj['loop'] = 1;
        obj['premium'] = false;
        obj['style'] = 0;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>StartTalkRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTalkRequest} obj Optional instance to populate.
     * @return {module:model/StartTalkRequest} The populated <code>StartTalkRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTalkRequest();

            if (data.hasOwnProperty('language')) {
                obj['language'] = Language.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('loop')) {
                obj['loop'] = ApiClient.convertToType(data['loop'], 'Number');
            }
            if (data.hasOwnProperty('premium')) {
                obj['premium'] = ApiClient.convertToType(data['premium'], 'Boolean');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('voice_name')) {
                obj['voice_name'] = VoiceName.constructFromObject(data['voice_name']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTalkRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTalkRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTalkRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

StartTalkRequest.RequiredProperties = ["text"];

/**
 * @member {module:model/Language} language
 */
StartTalkRequest.prototype['language'] = undefined;

/**
 * The volume level that the speech is played. This can be any value between `-1` to `1` in `0.1` increments, with `0` being the default.
 * @member {String} level
 * @default '0'
 */
StartTalkRequest.prototype['level'] = '0';

/**
 * The number of times to repeat the text the file, 0 for infinite
 * @member {Number} loop
 * @default 1
 */
StartTalkRequest.prototype['loop'] = 1;

/**
 * Set to true to use the premium version of the specified style if available, otherwise the standard version will be used. The default value is false. You can find more information about Premium Voices in the [Text-To-Speech guide](/voice/voice-api/guides/text-to-speech#premium-voices).
 * @member {Boolean} premium
 * @default false
 */
StartTalkRequest.prototype['premium'] = false;

/**
 * The vocal style (vocal range, tessitura, and timbre) to use
 * @member {Number} style
 * @default 0
 */
StartTalkRequest.prototype['style'] = 0;

/**
 * The text to read
 * @member {String} text
 */
StartTalkRequest.prototype['text'] = undefined;

/**
 * @member {module:model/VoiceName} voice_name
 */
StartTalkRequest.prototype['voice_name'] = undefined;






export default StartTalkRequest;

