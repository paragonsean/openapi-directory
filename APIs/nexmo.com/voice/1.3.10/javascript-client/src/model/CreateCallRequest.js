/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateCallRequestAnswerUrl from './CreateCallRequestAnswerUrl';
import CreateCallRequestBaseToInner from './CreateCallRequestBaseToInner';
import CreateCallRequestNcco from './CreateCallRequestNcco';
import EndpointPhoneFrom from './EndpointPhoneFrom';

/**
 * The CreateCallRequest model module.
 * @module model/CreateCallRequest
 * @version 1.3.10
 */
class CreateCallRequest {
    /**
     * Constructs a new <code>CreateCallRequest</code>.
     * @alias module:model/CreateCallRequest
     * @param {(module:model/CreateCallRequestAnswerUrl|module:model/CreateCallRequestNcco)} instance The actual instance to initialize CreateCallRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateCallRequestNcco") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateCallRequestNcco.validateJSON(instance); // throw an exception if no match
                // create CreateCallRequestNcco from JS object
                this.actualInstance = CreateCallRequestNcco.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateCallRequestNcco
            errorMessages.push("Failed to construct CreateCallRequestNcco: " + err)
        }

        try {
            if (typeof instance === "CreateCallRequestAnswerUrl") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateCallRequestAnswerUrl.validateJSON(instance); // throw an exception if no match
                // create CreateCallRequestAnswerUrl from JS object
                this.actualInstance = CreateCallRequestAnswerUrl.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateCallRequestAnswerUrl
            errorMessages.push("Failed to construct CreateCallRequestAnswerUrl: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateCallRequest` with oneOf schemas CreateCallRequestAnswerUrl, CreateCallRequestNcco. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateCallRequest` with oneOf schemas CreateCallRequestAnswerUrl, CreateCallRequestNcco. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateCallRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCallRequest} obj Optional instance to populate.
     * @return {module:model/CreateCallRequest} The populated <code>CreateCallRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateCallRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateCallRequestAnswerUrl</code>, <code>CreateCallRequestNcco</code>.
     * @return {(module:model/CreateCallRequestAnswerUrl|module:model/CreateCallRequestNcco)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateCallRequestAnswerUrl</code>, <code>CreateCallRequestNcco</code>.
     * @param {(module:model/CreateCallRequestAnswerUrl|module:model/CreateCallRequestNcco)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateCallRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateCallRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateCallRequest} An instance of CreateCallRequest.
     */
    static fromJSON = function(json_string){
        return CreateCallRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The [Nexmo Call Control Object](/voice/voice-api/ncco-reference) to use for this call. 
 * @member {Array.<Object>} ncco
 */
CreateCallRequest.prototype['ncco'] = undefined;

/**
 * The HTTP method used to send event information to `event_url`.
 * @member {module:model/CreateCallRequest.EventMethodEnum} event_method
 * @default 'POST'
 */
CreateCallRequest.prototype['event_method'] = 'POST';

/**
 * **Required** unless `event_url` is configured at the application level, see [Create an Application](/api/application.v2#createApplication)  The webhook endpoint where call progress events are sent to. For more information about the values sent, see [Event webhook](/voice/voice-api/webhook-reference#event-webhook). 
 * @member {Array.<String>} event_url
 */
CreateCallRequest.prototype['event_url'] = undefined;

/**
 * @member {module:model/EndpointPhoneFrom} from
 */
CreateCallRequest.prototype['from'] = undefined;

/**
 * Set the number of seconds that elapse before Vonage hangs up after the call state changes to answered.
 * @member {Number} length_timer
 * @default 7200
 */
CreateCallRequest.prototype['length_timer'] = 7200;

/**
 * Configure the behavior when Vonage detects that the call is answered by voicemail. If `continue`, Vonage sends an HTTP request to `event_url` with the Call event machine. If `hangup`, Vonage ends the call.
 * @member {module:model/CreateCallRequest.MachineDetectionEnum} machine_detection
 */
CreateCallRequest.prototype['machine_detection'] = undefined;

/**
 * Set to `true` to use random phone number as `from`. The number will be selected from the list of the numbers assigned to the current application. `random_from_number: true` cannot be used together with `from`.
 * @member {Boolean} random_from_number
 * @default false
 */
CreateCallRequest.prototype['random_from_number'] = false;

/**
 * Set the number of seconds that elapse before Vonage hangs up after the call state changes to ‘ringing’.
 * @member {Number} ringing_timer
 * @default 60
 */
CreateCallRequest.prototype['ringing_timer'] = 60;

/**
 * @member {Array.<module:model/CreateCallRequestBaseToInner>} to
 */
CreateCallRequest.prototype['to'] = undefined;

/**
 * The HTTP method used to send event information to answer_url.
 * @member {module:model/CreateCallRequest.AnswerMethodEnum} answer_method
 * @default 'GET'
 */
CreateCallRequest.prototype['answer_method'] = 'GET';

/**
 * The webhook endpoint where you provide the [Nexmo Call Control Object](/voice/voice-api/ncco-reference) that governs this call. 
 * @member {Array.<String>} answer_url
 */
CreateCallRequest.prototype['answer_url'] = undefined;


CreateCallRequest.OneOf = ["CreateCallRequestAnswerUrl", "CreateCallRequestNcco"];

export default CreateCallRequest;

