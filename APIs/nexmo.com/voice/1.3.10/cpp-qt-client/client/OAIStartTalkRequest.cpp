/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTalkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTalkRequest::OAIStartTalkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTalkRequest::OAIStartTalkRequest() {
    this->initializeModel();
}

OAIStartTalkRequest::~OAIStartTalkRequest() {}

void OAIStartTalkRequest::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_loop_isSet = false;
    m_loop_isValid = false;

    m_premium_isSet = false;
    m_premium_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_voice_name_isSet = false;
    m_voice_name_isValid = false;
}

void OAIStartTalkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTalkRequest::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_loop_isValid = ::OpenAPI::fromJsonValue(m_loop, json[QString("loop")]);
    m_loop_isSet = !json[QString("loop")].isNull() && m_loop_isValid;

    m_premium_isValid = ::OpenAPI::fromJsonValue(m_premium, json[QString("premium")]);
    m_premium_isSet = !json[QString("premium")].isNull() && m_premium_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_voice_name_isValid = ::OpenAPI::fromJsonValue(m_voice_name, json[QString("voice_name")]);
    m_voice_name_isSet = !json[QString("voice_name")].isNull() && m_voice_name_isValid;
}

QString OAIStartTalkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTalkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_loop_isSet) {
        obj.insert(QString("loop"), ::OpenAPI::toJsonValue(m_loop));
    }
    if (m_premium_isSet) {
        obj.insert(QString("premium"), ::OpenAPI::toJsonValue(m_premium));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_voice_name.isSet()) {
        obj.insert(QString("voice_name"), ::OpenAPI::toJsonValue(m_voice_name));
    }
    return obj;
}

OAILanguage OAIStartTalkRequest::getLanguage() const {
    return m_language;
}
void OAIStartTalkRequest::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIStartTalkRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIStartTalkRequest::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIStartTalkRequest::getLevel() const {
    return m_level;
}
void OAIStartTalkRequest::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIStartTalkRequest::is_level_Set() const{
    return m_level_isSet;
}

bool OAIStartTalkRequest::is_level_Valid() const{
    return m_level_isValid;
}

qint32 OAIStartTalkRequest::getLoop() const {
    return m_loop;
}
void OAIStartTalkRequest::setLoop(const qint32 &loop) {
    m_loop = loop;
    m_loop_isSet = true;
}

bool OAIStartTalkRequest::is_loop_Set() const{
    return m_loop_isSet;
}

bool OAIStartTalkRequest::is_loop_Valid() const{
    return m_loop_isValid;
}

bool OAIStartTalkRequest::isPremium() const {
    return m_premium;
}
void OAIStartTalkRequest::setPremium(const bool &premium) {
    m_premium = premium;
    m_premium_isSet = true;
}

bool OAIStartTalkRequest::is_premium_Set() const{
    return m_premium_isSet;
}

bool OAIStartTalkRequest::is_premium_Valid() const{
    return m_premium_isValid;
}

qint32 OAIStartTalkRequest::getStyle() const {
    return m_style;
}
void OAIStartTalkRequest::setStyle(const qint32 &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIStartTalkRequest::is_style_Set() const{
    return m_style_isSet;
}

bool OAIStartTalkRequest::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIStartTalkRequest::getText() const {
    return m_text;
}
void OAIStartTalkRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStartTalkRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStartTalkRequest::is_text_Valid() const{
    return m_text_isValid;
}

OAIVoice_name OAIStartTalkRequest::getVoiceName() const {
    return m_voice_name;
}
void OAIStartTalkRequest::setVoiceName(const OAIVoice_name &voice_name) {
    m_voice_name = voice_name;
    m_voice_name_isSet = true;
}

bool OAIStartTalkRequest::is_voice_name_Set() const{
    return m_voice_name_isSet;
}

bool OAIStartTalkRequest::is_voice_name_Valid() const{
    return m_voice_name_isValid;
}

bool OAIStartTalkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTalkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
