/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCallsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCallsResponse::OAIGetCallsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCallsResponse::OAIGetCallsResponse() {
    this->initializeModel();
}

OAIGetCallsResponse::~OAIGetCallsResponse() {}

void OAIGetCallsResponse::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_record_index_isSet = false;
    m_record_index_isValid = false;
}

void OAIGetCallsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCallsResponse::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_record_index_isValid = ::OpenAPI::fromJsonValue(m_record_index, json[QString("record_index")]);
    m_record_index_isSet = !json[QString("record_index")].isNull() && m_record_index_isValid;
}

QString OAIGetCallsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCallsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_record_index_isSet) {
        obj.insert(QString("record_index"), ::OpenAPI::toJsonValue(m_record_index));
    }
    return obj;
}

OAIGetCallsResponse__embedded OAIGetCallsResponse::getEmbedded() const {
    return m__embedded;
}
void OAIGetCallsResponse::setEmbedded(const OAIGetCallsResponse__embedded &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIGetCallsResponse::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIGetCallsResponse::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIGetCallsResponse__links OAIGetCallsResponse::getLinks() const {
    return m__links;
}
void OAIGetCallsResponse::setLinks(const OAIGetCallsResponse__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGetCallsResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGetCallsResponse::is__links_Valid() const{
    return m__links_isValid;
}

qint32 OAIGetCallsResponse::getCount() const {
    return m_count;
}
void OAIGetCallsResponse::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGetCallsResponse::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGetCallsResponse::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIGetCallsResponse::getPageSize() const {
    return m_page_size;
}
void OAIGetCallsResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetCallsResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetCallsResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

qint32 OAIGetCallsResponse::getRecordIndex() const {
    return m_record_index;
}
void OAIGetCallsResponse::setRecordIndex(const qint32 &record_index) {
    m_record_index = record_index;
    m_record_index_isSet = true;
}

bool OAIGetCallsResponse::is_record_index_Set() const{
    return m_record_index_isSet;
}

bool OAIGetCallsResponse::is_record_index_Valid() const{
    return m_record_index_isValid;
}

bool OAIGetCallsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCallsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
