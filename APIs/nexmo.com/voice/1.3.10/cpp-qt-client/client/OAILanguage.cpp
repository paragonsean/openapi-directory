/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguage::OAILanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguage::OAILanguage() {
    this->initializeModel();
}

OAILanguage::~OAILanguage() {}

void OAILanguage::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILanguage::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILanguage::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ar", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::AR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ca-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CA_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cmn-CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CMN_CN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cmn-TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CMN_TW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cs-CZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CS_CZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cy-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CY_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("da-DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::DA_DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("el-GR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EL_GR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB-WLS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_GB_WLS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-ZA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN_ZA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ES_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-MX", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ES_MX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ES_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EU_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fi-FI", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FI_FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fil-PH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FIL_PH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FR_CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("he-IL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HE_IL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HI_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hu-HU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HU_HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id-ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ID_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("is-IS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::IS_IS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it-IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja-JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko-KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::KO_KR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nb-NO", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::NB_NO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nl-NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::NL_NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("no-NO", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::NO_NO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pl-PL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::PL_PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::PT_BR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-PT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::PT_PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ro-RO", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::RO_RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ru-RU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::RU_RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sk-SK", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::SK_SK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sv-SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::SV_SE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("th-TH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TH_TH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tr-TR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TR_TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uk-UA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::UK_UA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vi-VN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::VI_VN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("yue-CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::YUE_CN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILanguage::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILanguage::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILanguage::AR:
            val = "ar";
            break;
        case eOAILanguage::CA_ES:
            val = "ca-ES";
            break;
        case eOAILanguage::CMN_CN:
            val = "cmn-CN";
            break;
        case eOAILanguage::CMN_TW:
            val = "cmn-TW";
            break;
        case eOAILanguage::CS_CZ:
            val = "cs-CZ";
            break;
        case eOAILanguage::CY_GB:
            val = "cy-GB";
            break;
        case eOAILanguage::DA_DK:
            val = "da-DK";
            break;
        case eOAILanguage::DE_DE:
            val = "de-DE";
            break;
        case eOAILanguage::EL_GR:
            val = "el-GR";
            break;
        case eOAILanguage::EN_AU:
            val = "en-AU";
            break;
        case eOAILanguage::EN_GB:
            val = "en-GB";
            break;
        case eOAILanguage::EN_GB_WLS:
            val = "en-GB-WLS";
            break;
        case eOAILanguage::EN_IN:
            val = "en-IN";
            break;
        case eOAILanguage::EN_US:
            val = "en-US";
            break;
        case eOAILanguage::EN_ZA:
            val = "en-ZA";
            break;
        case eOAILanguage::ES_ES:
            val = "es-ES";
            break;
        case eOAILanguage::ES_MX:
            val = "es-MX";
            break;
        case eOAILanguage::ES_US:
            val = "es-US";
            break;
        case eOAILanguage::EU_ES:
            val = "eu-ES";
            break;
        case eOAILanguage::FI_FI:
            val = "fi-FI";
            break;
        case eOAILanguage::FIL_PH:
            val = "fil-PH";
            break;
        case eOAILanguage::FR_CA:
            val = "fr-CA";
            break;
        case eOAILanguage::FR_FR:
            val = "fr-FR";
            break;
        case eOAILanguage::HE_IL:
            val = "he-IL";
            break;
        case eOAILanguage::HI_IN:
            val = "hi-IN";
            break;
        case eOAILanguage::HU_HU:
            val = "hu-HU";
            break;
        case eOAILanguage::ID_ID:
            val = "id-ID";
            break;
        case eOAILanguage::IS_IS:
            val = "is-IS";
            break;
        case eOAILanguage::IT_IT:
            val = "it-IT";
            break;
        case eOAILanguage::JA_JP:
            val = "ja-JP";
            break;
        case eOAILanguage::KO_KR:
            val = "ko-KR";
            break;
        case eOAILanguage::NB_NO:
            val = "nb-NO";
            break;
        case eOAILanguage::NL_NL:
            val = "nl-NL";
            break;
        case eOAILanguage::NO_NO:
            val = "no-NO";
            break;
        case eOAILanguage::PL_PL:
            val = "pl-PL";
            break;
        case eOAILanguage::PT_BR:
            val = "pt-BR";
            break;
        case eOAILanguage::PT_PT:
            val = "pt-PT";
            break;
        case eOAILanguage::RO_RO:
            val = "ro-RO";
            break;
        case eOAILanguage::RU_RU:
            val = "ru-RU";
            break;
        case eOAILanguage::SK_SK:
            val = "sk-SK";
            break;
        case eOAILanguage::SV_SE:
            val = "sv-SE";
            break;
        case eOAILanguage::TH_TH:
            val = "th-TH";
            break;
        case eOAILanguage::TR_TR:
            val = "tr-TR";
            break;
        case eOAILanguage::UK_UA:
            val = "uk-UA";
            break;
        case eOAILanguage::VI_VN:
            val = "vi-VN";
            break;
        case eOAILanguage::YUE_CN:
            val = "yue-CN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILanguage::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILanguage::eOAILanguage OAILanguage::getValue() const {
    return m_value;
}

void OAILanguage::setValue(const OAILanguage::eOAILanguage& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILanguage::isSet() const {
    
    return m_value_isSet;
}

bool OAILanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
