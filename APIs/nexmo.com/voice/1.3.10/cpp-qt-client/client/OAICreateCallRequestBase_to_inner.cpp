/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCallRequestBase_to_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCallRequestBase_to_inner::OAICreateCallRequestBase_to_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCallRequestBase_to_inner::OAICreateCallRequestBase_to_inner() {
    this->initializeModel();
}

OAICreateCallRequestBase_to_inner::~OAICreateCallRequestBase_to_inner() {}

void OAICreateCallRequestBase_to_inner::initializeModel() {

    m_dtmf_answer_isSet = false;
    m_dtmf_answer_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;
}

void OAICreateCallRequestBase_to_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCallRequestBase_to_inner::fromJsonObject(QJsonObject json) {

    m_dtmf_answer_isValid = ::OpenAPI::fromJsonValue(m_dtmf_answer, json[QString("dtmfAnswer")]);
    m_dtmf_answer_isSet = !json[QString("dtmfAnswer")].isNull() && m_dtmf_answer_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content-type")]);
    m_content_type_isSet = !json[QString("content-type")].isNull() && m_content_type_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;
}

QString OAICreateCallRequestBase_to_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCallRequestBase_to_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_dtmf_answer_isSet) {
        obj.insert(QString("dtmfAnswer"), ::OpenAPI::toJsonValue(m_dtmf_answer));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content-type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    return obj;
}

QString OAICreateCallRequestBase_to_inner::getDtmfAnswer() const {
    return m_dtmf_answer;
}
void OAICreateCallRequestBase_to_inner::setDtmfAnswer(const QString &dtmf_answer) {
    m_dtmf_answer = dtmf_answer;
    m_dtmf_answer_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_dtmf_answer_Set() const{
    return m_dtmf_answer_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_dtmf_answer_Valid() const{
    return m_dtmf_answer_isValid;
}

QString OAICreateCallRequestBase_to_inner::getNumber() const {
    return m_number;
}
void OAICreateCallRequestBase_to_inner::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICreateCallRequestBase_to_inner::getType() const {
    return m_type;
}
void OAICreateCallRequestBase_to_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateCallRequestBase_to_inner::getUri() const {
    return m_uri;
}
void OAICreateCallRequestBase_to_inner::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAICreateCallRequestBase_to_inner::getContentType() const {
    return m_content_type;
}
void OAICreateCallRequestBase_to_inner::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIEndpointWebsocket_headers OAICreateCallRequestBase_to_inner::getHeaders() const {
    return m_headers;
}
void OAICreateCallRequestBase_to_inner::setHeaders(const OAIEndpointWebsocket_headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAICreateCallRequestBase_to_inner::getExtension() const {
    return m_extension;
}
void OAICreateCallRequestBase_to_inner::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAICreateCallRequestBase_to_inner::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAICreateCallRequestBase_to_inner::is_extension_Valid() const{
    return m_extension_isValid;
}

bool OAICreateCallRequestBase_to_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dtmf_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCallRequestBase_to_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_type_isValid && m_content_type_isValid && m_extension_isValid && true;
}

} // namespace OpenAPI
