/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCallResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCallResponse::OAIGetCallResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCallResponse::OAIGetCallResponse() {
    this->initializeModel();
}

OAIGetCallResponse::~OAIGetCallResponse() {}

void OAIGetCallResponse::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_conversation_uuid_isSet = false;
    m_conversation_uuid_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIGetCallResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCallResponse::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_conversation_uuid_isValid = ::OpenAPI::fromJsonValue(m_conversation_uuid, json[QString("conversation_uuid")]);
    m_conversation_uuid_isSet = !json[QString("conversation_uuid")].isNull() && m_conversation_uuid_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIGetCallResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCallResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_conversation_uuid_isSet) {
        obj.insert(QString("conversation_uuid"), ::OpenAPI::toJsonValue(m_conversation_uuid));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAIGetCallResponse__links OAIGetCallResponse::getLinks() const {
    return m__links;
}
void OAIGetCallResponse::setLinks(const OAIGetCallResponse__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGetCallResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGetCallResponse::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIGetCallResponse::getConversationUuid() const {
    return m_conversation_uuid;
}
void OAIGetCallResponse::setConversationUuid(const QString &conversation_uuid) {
    m_conversation_uuid = conversation_uuid;
    m_conversation_uuid_isSet = true;
}

bool OAIGetCallResponse::is_conversation_uuid_Set() const{
    return m_conversation_uuid_isSet;
}

bool OAIGetCallResponse::is_conversation_uuid_Valid() const{
    return m_conversation_uuid_isValid;
}

OAIDirection OAIGetCallResponse::getDirection() const {
    return m_direction;
}
void OAIGetCallResponse::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIGetCallResponse::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIGetCallResponse::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIGetCallResponse::getDuration() const {
    return m_duration;
}
void OAIGetCallResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGetCallResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGetCallResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIGetCallResponse::getEndTime() const {
    return m_end_time;
}
void OAIGetCallResponse::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetCallResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetCallResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIFrom OAIGetCallResponse::getFrom() const {
    return m_from;
}
void OAIGetCallResponse::setFrom(const OAIFrom &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIGetCallResponse::is_from_Set() const{
    return m_from_isSet;
}

bool OAIGetCallResponse::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIGetCallResponse::getNetwork() const {
    return m_network;
}
void OAIGetCallResponse::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetCallResponse::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetCallResponse::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGetCallResponse::getPrice() const {
    return m_price;
}
void OAIGetCallResponse::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGetCallResponse::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGetCallResponse::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIGetCallResponse::getRate() const {
    return m_rate;
}
void OAIGetCallResponse::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIGetCallResponse::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIGetCallResponse::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIGetCallResponse::getStartTime() const {
    return m_start_time;
}
void OAIGetCallResponse::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetCallResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetCallResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGetCallResponse::getStatus() const {
    return m_status;
}
void OAIGetCallResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetCallResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetCallResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAITo OAIGetCallResponse::getTo() const {
    return m_to;
}
void OAIGetCallResponse::setTo(const OAITo &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIGetCallResponse::is_to_Set() const{
    return m_to_isSet;
}

bool OAIGetCallResponse::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIGetCallResponse::getUuid() const {
    return m_uuid;
}
void OAIGetCallResponse::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIGetCallResponse::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIGetCallResponse::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIGetCallResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCallResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
