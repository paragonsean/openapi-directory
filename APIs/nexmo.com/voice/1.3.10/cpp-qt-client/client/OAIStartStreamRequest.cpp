/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartStreamRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartStreamRequest::OAIStartStreamRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartStreamRequest::OAIStartStreamRequest() {
    this->initializeModel();
}

OAIStartStreamRequest::~OAIStartStreamRequest() {}

void OAIStartStreamRequest::initializeModel() {

    m_level_isSet = false;
    m_level_isValid = false;

    m_loop_isSet = false;
    m_loop_isValid = false;

    m_stream_url_isSet = false;
    m_stream_url_isValid = false;
}

void OAIStartStreamRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartStreamRequest::fromJsonObject(QJsonObject json) {

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_loop_isValid = ::OpenAPI::fromJsonValue(m_loop, json[QString("loop")]);
    m_loop_isSet = !json[QString("loop")].isNull() && m_loop_isValid;

    m_stream_url_isValid = ::OpenAPI::fromJsonValue(m_stream_url, json[QString("stream_url")]);
    m_stream_url_isSet = !json[QString("stream_url")].isNull() && m_stream_url_isValid;
}

QString OAIStartStreamRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartStreamRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_loop_isSet) {
        obj.insert(QString("loop"), ::OpenAPI::toJsonValue(m_loop));
    }
    if (m_stream_url.size() > 0) {
        obj.insert(QString("stream_url"), ::OpenAPI::toJsonValue(m_stream_url));
    }
    return obj;
}

QString OAIStartStreamRequest::getLevel() const {
    return m_level;
}
void OAIStartStreamRequest::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIStartStreamRequest::is_level_Set() const{
    return m_level_isSet;
}

bool OAIStartStreamRequest::is_level_Valid() const{
    return m_level_isValid;
}

qint32 OAIStartStreamRequest::getLoop() const {
    return m_loop;
}
void OAIStartStreamRequest::setLoop(const qint32 &loop) {
    m_loop = loop;
    m_loop_isSet = true;
}

bool OAIStartStreamRequest::is_loop_Set() const{
    return m_loop_isSet;
}

bool OAIStartStreamRequest::is_loop_Valid() const{
    return m_loop_isValid;
}

QList<QString> OAIStartStreamRequest::getStreamUrl() const {
    return m_stream_url;
}
void OAIStartStreamRequest::setStreamUrl(const QList<QString> &stream_url) {
    m_stream_url = stream_url;
    m_stream_url_isSet = true;
}

bool OAIStartStreamRequest::is_stream_url_Set() const{
    return m_stream_url_isSet;
}

bool OAIStartStreamRequest::is_stream_url_Valid() const{
    return m_stream_url_isValid;
}

bool OAIStartStreamRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartStreamRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_url_isValid && true;
}

} // namespace OpenAPI
