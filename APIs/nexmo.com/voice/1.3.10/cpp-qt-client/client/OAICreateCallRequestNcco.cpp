/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCallRequestNcco.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCallRequestNcco::OAICreateCallRequestNcco(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCallRequestNcco::OAICreateCallRequestNcco() {
    this->initializeModel();
}

OAICreateCallRequestNcco::~OAICreateCallRequestNcco() {}

void OAICreateCallRequestNcco::initializeModel() {

    m_event_method_isSet = false;
    m_event_method_isValid = false;

    m_event_url_isSet = false;
    m_event_url_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_length_timer_isSet = false;
    m_length_timer_isValid = false;

    m_machine_detection_isSet = false;
    m_machine_detection_isValid = false;

    m_random_from_number_isSet = false;
    m_random_from_number_isValid = false;

    m_ringing_timer_isSet = false;
    m_ringing_timer_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_ncco_isSet = false;
    m_ncco_isValid = false;
}

void OAICreateCallRequestNcco::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCallRequestNcco::fromJsonObject(QJsonObject json) {

    m_event_method_isValid = ::OpenAPI::fromJsonValue(m_event_method, json[QString("event_method")]);
    m_event_method_isSet = !json[QString("event_method")].isNull() && m_event_method_isValid;

    m_event_url_isValid = ::OpenAPI::fromJsonValue(m_event_url, json[QString("event_url")]);
    m_event_url_isSet = !json[QString("event_url")].isNull() && m_event_url_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_length_timer_isValid = ::OpenAPI::fromJsonValue(m_length_timer, json[QString("length_timer")]);
    m_length_timer_isSet = !json[QString("length_timer")].isNull() && m_length_timer_isValid;

    m_machine_detection_isValid = ::OpenAPI::fromJsonValue(m_machine_detection, json[QString("machine_detection")]);
    m_machine_detection_isSet = !json[QString("machine_detection")].isNull() && m_machine_detection_isValid;

    m_random_from_number_isValid = ::OpenAPI::fromJsonValue(m_random_from_number, json[QString("random_from_number")]);
    m_random_from_number_isSet = !json[QString("random_from_number")].isNull() && m_random_from_number_isValid;

    m_ringing_timer_isValid = ::OpenAPI::fromJsonValue(m_ringing_timer, json[QString("ringing_timer")]);
    m_ringing_timer_isSet = !json[QString("ringing_timer")].isNull() && m_ringing_timer_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_ncco_isValid = ::OpenAPI::fromJsonValue(m_ncco, json[QString("ncco")]);
    m_ncco_isSet = !json[QString("ncco")].isNull() && m_ncco_isValid;
}

QString OAICreateCallRequestNcco::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCallRequestNcco::asJsonObject() const {
    QJsonObject obj;
    if (m_event_method_isSet) {
        obj.insert(QString("event_method"), ::OpenAPI::toJsonValue(m_event_method));
    }
    if (m_event_url.size() > 0) {
        obj.insert(QString("event_url"), ::OpenAPI::toJsonValue(m_event_url));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_length_timer_isSet) {
        obj.insert(QString("length_timer"), ::OpenAPI::toJsonValue(m_length_timer));
    }
    if (m_machine_detection_isSet) {
        obj.insert(QString("machine_detection"), ::OpenAPI::toJsonValue(m_machine_detection));
    }
    if (m_random_from_number_isSet) {
        obj.insert(QString("random_from_number"), ::OpenAPI::toJsonValue(m_random_from_number));
    }
    if (m_ringing_timer_isSet) {
        obj.insert(QString("ringing_timer"), ::OpenAPI::toJsonValue(m_ringing_timer));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_ncco.size() > 0) {
        obj.insert(QString("ncco"), ::OpenAPI::toJsonValue(m_ncco));
    }
    return obj;
}

QString OAICreateCallRequestNcco::getEventMethod() const {
    return m_event_method;
}
void OAICreateCallRequestNcco::setEventMethod(const QString &event_method) {
    m_event_method = event_method;
    m_event_method_isSet = true;
}

bool OAICreateCallRequestNcco::is_event_method_Set() const{
    return m_event_method_isSet;
}

bool OAICreateCallRequestNcco::is_event_method_Valid() const{
    return m_event_method_isValid;
}

QList<QString> OAICreateCallRequestNcco::getEventUrl() const {
    return m_event_url;
}
void OAICreateCallRequestNcco::setEventUrl(const QList<QString> &event_url) {
    m_event_url = event_url;
    m_event_url_isSet = true;
}

bool OAICreateCallRequestNcco::is_event_url_Set() const{
    return m_event_url_isSet;
}

bool OAICreateCallRequestNcco::is_event_url_Valid() const{
    return m_event_url_isValid;
}

OAIEndpointPhoneFrom OAICreateCallRequestNcco::getFrom() const {
    return m_from;
}
void OAICreateCallRequestNcco::setFrom(const OAIEndpointPhoneFrom &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICreateCallRequestNcco::is_from_Set() const{
    return m_from_isSet;
}

bool OAICreateCallRequestNcco::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAICreateCallRequestNcco::getLengthTimer() const {
    return m_length_timer;
}
void OAICreateCallRequestNcco::setLengthTimer(const qint32 &length_timer) {
    m_length_timer = length_timer;
    m_length_timer_isSet = true;
}

bool OAICreateCallRequestNcco::is_length_timer_Set() const{
    return m_length_timer_isSet;
}

bool OAICreateCallRequestNcco::is_length_timer_Valid() const{
    return m_length_timer_isValid;
}

QString OAICreateCallRequestNcco::getMachineDetection() const {
    return m_machine_detection;
}
void OAICreateCallRequestNcco::setMachineDetection(const QString &machine_detection) {
    m_machine_detection = machine_detection;
    m_machine_detection_isSet = true;
}

bool OAICreateCallRequestNcco::is_machine_detection_Set() const{
    return m_machine_detection_isSet;
}

bool OAICreateCallRequestNcco::is_machine_detection_Valid() const{
    return m_machine_detection_isValid;
}

bool OAICreateCallRequestNcco::isRandomFromNumber() const {
    return m_random_from_number;
}
void OAICreateCallRequestNcco::setRandomFromNumber(const bool &random_from_number) {
    m_random_from_number = random_from_number;
    m_random_from_number_isSet = true;
}

bool OAICreateCallRequestNcco::is_random_from_number_Set() const{
    return m_random_from_number_isSet;
}

bool OAICreateCallRequestNcco::is_random_from_number_Valid() const{
    return m_random_from_number_isValid;
}

qint32 OAICreateCallRequestNcco::getRingingTimer() const {
    return m_ringing_timer;
}
void OAICreateCallRequestNcco::setRingingTimer(const qint32 &ringing_timer) {
    m_ringing_timer = ringing_timer;
    m_ringing_timer_isSet = true;
}

bool OAICreateCallRequestNcco::is_ringing_timer_Set() const{
    return m_ringing_timer_isSet;
}

bool OAICreateCallRequestNcco::is_ringing_timer_Valid() const{
    return m_ringing_timer_isValid;
}

QList<OAICreateCallRequestBase_to_inner> OAICreateCallRequestNcco::getTo() const {
    return m_to;
}
void OAICreateCallRequestNcco::setTo(const QList<OAICreateCallRequestBase_to_inner> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICreateCallRequestNcco::is_to_Set() const{
    return m_to_isSet;
}

bool OAICreateCallRequestNcco::is_to_Valid() const{
    return m_to_isValid;
}

QList<OAIObject> OAICreateCallRequestNcco::getNcco() const {
    return m_ncco;
}
void OAICreateCallRequestNcco::setNcco(const QList<OAIObject> &ncco) {
    m_ncco = ncco;
    m_ncco_isSet = true;
}

bool OAICreateCallRequestNcco::is_ncco_Set() const{
    return m_ncco_isSet;
}

bool OAICreateCallRequestNcco::is_ncco_Valid() const{
    return m_ncco_isValid;
}

bool OAICreateCallRequestNcco::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ringing_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ncco.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCallRequestNcco::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_to_isValid && m_ncco_isValid && true;
}

} // namespace OpenAPI
