/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICallsApi_H
#define OAI_OAICallsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCallResponse.h"
#include "OAICreateCall_request.h"
#include "OAIGetCallResponse.h"
#include "OAIGetCallsResponse.h"
#include "OAIUpdateCall_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICallsApi : public QObject {
    Q_OBJECT

public:
    OAICallsApi(const int timeOut = 0);
    ~OAICallsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_call_request OAICreateCall_request [optional]
    */
    virtual void createCall(const ::OpenAPI::OptionalParam<OAICreateCall_request> &oai_create_call_request = ::OpenAPI::OptionalParam<OAICreateCall_request>());

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getCall(const QString &uuid);

    /**
    * @param[in]  status QString [optional]
    * @param[in]  date_start QDateTime [optional]
    * @param[in]  date_end QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  record_index qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  conversation_uuid QString [optional]
    */
    virtual void getCalls(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &record_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversation_uuid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  uuid QString [required]
    * @param[in]  oai_update_call_request OAIUpdateCall_request [required]
    */
    virtual void updateCall(const QString &uuid, const OAIUpdateCall_request &oai_update_call_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCallCallback(OAIHttpRequestWorker *worker);
    void getCallCallback(OAIHttpRequestWorker *worker);
    void getCallsCallback(OAIHttpRequestWorker *worker);
    void updateCallCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCallSignal(OAICreateCallResponse summary);
    void getCallSignal(OAIGetCallResponse summary);
    void getCallsSignal(OAIGetCallsResponse summary);
    void updateCallSignal();


    void createCallSignalFull(OAIHttpRequestWorker *worker, OAICreateCallResponse summary);
    void getCallSignalFull(OAIHttpRequestWorker *worker, OAIGetCallResponse summary);
    void getCallsSignalFull(OAIHttpRequestWorker *worker, OAIGetCallsResponse summary);
    void updateCallSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createCallSignalError() instead")
    void createCallSignalE(OAICreateCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalError(OAICreateCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallSignalError() instead")
    void getCallSignalE(OAIGetCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallSignalError(OAIGetCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallsSignalError() instead")
    void getCallsSignalE(OAIGetCallsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallsSignalError(OAIGetCallsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallSignalError() instead")
    void updateCallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCallSignalErrorFull() instead")
    void createCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallSignalErrorFull() instead")
    void getCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallsSignalErrorFull() instead")
    void getCallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallSignalErrorFull() instead")
    void updateCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
