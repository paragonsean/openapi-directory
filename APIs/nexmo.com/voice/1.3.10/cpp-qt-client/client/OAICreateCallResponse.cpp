/**
 * Voice API
 * The Voice API lets you create outbound calls, control in-progress calls and get information about historical calls. More information about the Voice API can be found at <https://developer.nexmo.com/voice/voice-api/overview>.
 *
 * The version of the OpenAPI document: 1.3.10
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCallResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCallResponse::OAICreateCallResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCallResponse::OAICreateCallResponse() {
    this->initializeModel();
}

OAICreateCallResponse::~OAICreateCallResponse() {}

void OAICreateCallResponse::initializeModel() {

    m_conversation_uuid_isSet = false;
    m_conversation_uuid_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAICreateCallResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCallResponse::fromJsonObject(QJsonObject json) {

    m_conversation_uuid_isValid = ::OpenAPI::fromJsonValue(m_conversation_uuid, json[QString("conversation_uuid")]);
    m_conversation_uuid_isSet = !json[QString("conversation_uuid")].isNull() && m_conversation_uuid_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAICreateCallResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCallResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_uuid_isSet) {
        obj.insert(QString("conversation_uuid"), ::OpenAPI::toJsonValue(m_conversation_uuid));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAICreateCallResponse::getConversationUuid() const {
    return m_conversation_uuid;
}
void OAICreateCallResponse::setConversationUuid(const QString &conversation_uuid) {
    m_conversation_uuid = conversation_uuid;
    m_conversation_uuid_isSet = true;
}

bool OAICreateCallResponse::is_conversation_uuid_Set() const{
    return m_conversation_uuid_isSet;
}

bool OAICreateCallResponse::is_conversation_uuid_Valid() const{
    return m_conversation_uuid_isValid;
}

OAIDirection OAICreateCallResponse::getDirection() const {
    return m_direction;
}
void OAICreateCallResponse::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICreateCallResponse::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICreateCallResponse::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAICreateCallResponse::getStatus() const {
    return m_status;
}
void OAICreateCallResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateCallResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateCallResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateCallResponse::getUuid() const {
    return m_uuid;
}
void OAICreateCallResponse::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAICreateCallResponse::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAICreateCallResponse::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAICreateCallResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCallResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
