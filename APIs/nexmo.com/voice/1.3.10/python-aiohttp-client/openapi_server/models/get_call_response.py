# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.get_call_response_links import GetCallResponseLinks
from openapi_server.models.model_from import ModelFrom
from openapi_server.models.to import To
from openapi_server import util


class GetCallResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: GetCallResponseLinks=None, conversation_uuid: str=None, direction: Direction=None, duration: str=None, end_time: str=None, _from: ModelFrom=None, network: str=None, price: str=None, rate: str=None, start_time: str=None, status: str=None, to: To=None, uuid: str=None):
        """GetCallResponse - a model defined in OpenAPI

        :param links: The links of this GetCallResponse.
        :param conversation_uuid: The conversation_uuid of this GetCallResponse.
        :param direction: The direction of this GetCallResponse.
        :param duration: The duration of this GetCallResponse.
        :param end_time: The end_time of this GetCallResponse.
        :param _from: The _from of this GetCallResponse.
        :param network: The network of this GetCallResponse.
        :param price: The price of this GetCallResponse.
        :param rate: The rate of this GetCallResponse.
        :param start_time: The start_time of this GetCallResponse.
        :param status: The status of this GetCallResponse.
        :param to: The to of this GetCallResponse.
        :param uuid: The uuid of this GetCallResponse.
        """
        self.openapi_types = {
            'links': GetCallResponseLinks,
            'conversation_uuid': str,
            'direction': Direction,
            'duration': str,
            'end_time': str,
            '_from': ModelFrom,
            'network': str,
            'price': str,
            'rate': str,
            'start_time': str,
            'status': str,
            'to': To,
            'uuid': str
        }

        self.attribute_map = {
            'links': '_links',
            'conversation_uuid': 'conversation_uuid',
            'direction': 'direction',
            'duration': 'duration',
            'end_time': 'end_time',
            '_from': 'from',
            'network': 'network',
            'price': 'price',
            'rate': 'rate',
            'start_time': 'start_time',
            'status': 'status',
            'to': 'to',
            'uuid': 'uuid'
        }

        self._links = links
        self._conversation_uuid = conversation_uuid
        self._direction = direction
        self._duration = duration
        self._end_time = end_time
        self.__from = _from
        self._network = network
        self._price = price
        self._rate = rate
        self._start_time = start_time
        self._status = status
        self._to = to
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCallResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCallResponse of this GetCallResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this GetCallResponse.


        :return: The links of this GetCallResponse.
        :rtype: GetCallResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetCallResponse.


        :param links: The links of this GetCallResponse.
        :type links: GetCallResponseLinks
        """

        self._links = links

    @property
    def conversation_uuid(self):
        """Gets the conversation_uuid of this GetCallResponse.

        The unique identifier for the conversation this call leg is part of.

        :return: The conversation_uuid of this GetCallResponse.
        :rtype: str
        """
        return self._conversation_uuid

    @conversation_uuid.setter
    def conversation_uuid(self, conversation_uuid):
        """Sets the conversation_uuid of this GetCallResponse.

        The unique identifier for the conversation this call leg is part of.

        :param conversation_uuid: The conversation_uuid of this GetCallResponse.
        :type conversation_uuid: str
        """

        self._conversation_uuid = conversation_uuid

    @property
    def direction(self):
        """Gets the direction of this GetCallResponse.


        :return: The direction of this GetCallResponse.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GetCallResponse.


        :param direction: The direction of this GetCallResponse.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this GetCallResponse.

        The time elapsed for the call to take place in seconds. This is only sent if `status` is `completed`.

        :return: The duration of this GetCallResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetCallResponse.

        The time elapsed for the call to take place in seconds. This is only sent if `status` is `completed`.

        :param duration: The duration of this GetCallResponse.
        :type duration: str
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this GetCallResponse.

        The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For xample, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.

        :return: The end_time of this GetCallResponse.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetCallResponse.

        The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For xample, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.

        :param end_time: The end_time of this GetCallResponse.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def _from(self):
        """Gets the _from of this GetCallResponse.


        :return: The _from of this GetCallResponse.
        :rtype: ModelFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetCallResponse.


        :param _from: The _from of this GetCallResponse.
        :type _from: ModelFrom
        """

        self.__from = _from

    @property
    def network(self):
        """Gets the network of this GetCallResponse.

        The Mobile Country Code Mobile Network Code ([MCCMNC](https://en.wikipedia.org/wiki/Mobile_country_code)) for the carrier network used to make this call. This is only sent if `status` is `completed`.

        :return: The network of this GetCallResponse.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetCallResponse.

        The Mobile Country Code Mobile Network Code ([MCCMNC](https://en.wikipedia.org/wiki/Mobile_country_code)) for the carrier network used to make this call. This is only sent if `status` is `completed`.

        :param network: The network of this GetCallResponse.
        :type network: str
        """

        self._network = network

    @property
    def price(self):
        """Gets the price of this GetCallResponse.

        The total price charged for this call. This is only sent if `status` is `completed`.

        :return: The price of this GetCallResponse.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetCallResponse.

        The total price charged for this call. This is only sent if `status` is `completed`.

        :param price: The price of this GetCallResponse.
        :type price: str
        """

        self._price = price

    @property
    def rate(self):
        """Gets the rate of this GetCallResponse.

        The price per minute for this call. This is only sent if `status` is `completed`.

        :return: The rate of this GetCallResponse.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this GetCallResponse.

        The price per minute for this call. This is only sent if `status` is `completed`.

        :param rate: The rate of this GetCallResponse.
        :type rate: str
        """

        self._rate = rate

    @property
    def start_time(self):
        """Gets the start_time of this GetCallResponse.

        The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For example, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.

        :return: The start_time of this GetCallResponse.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetCallResponse.

        The time the call started in the following format: `YYYY-MM-DD HH:MM:SS`. For example, `2020-01-01 12:00:00`. This is only sent if `status` is `completed`.

        :param start_time: The start_time of this GetCallResponse.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this GetCallResponse.

        The status of the call. [See possible values](https://developer.nexmo.com/voice/voice-api/guides/call-flow#event-objects)

        :return: The status of this GetCallResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCallResponse.

        The status of the call. [See possible values](https://developer.nexmo.com/voice/voice-api/guides/call-flow#event-objects)

        :param status: The status of this GetCallResponse.
        :type status: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this GetCallResponse.


        :return: The to of this GetCallResponse.
        :rtype: To
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetCallResponse.


        :param to: The to of this GetCallResponse.
        :type to: To
        """

        self._to = to

    @property
    def uuid(self):
        """Gets the uuid of this GetCallResponse.

        The unique identifier for this call leg. The UUID is created when your call request is accepted by Vonage. You use the UUID in all requests for individual live calls

        :return: The uuid of this GetCallResponse.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this GetCallResponse.

        The unique identifier for this call leg. The UUID is created when your call request is accepted by Vonage. You use the UUID in all requests for individual live calls

        :param uuid: The uuid of this GetCallResponse.
        :type uuid: str
        """

        self._uuid = uuid
