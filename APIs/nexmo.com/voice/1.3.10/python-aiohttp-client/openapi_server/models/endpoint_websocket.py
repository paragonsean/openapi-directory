# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_websocket_headers import EndpointWebsocketHeaders
from openapi_server import util


class EndpointWebsocket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, headers: EndpointWebsocketHeaders=None, type: str=None, uri: str=None):
        """EndpointWebsocket - a model defined in OpenAPI

        :param content_type: The content_type of this EndpointWebsocket.
        :param headers: The headers of this EndpointWebsocket.
        :param type: The type of this EndpointWebsocket.
        :param uri: The uri of this EndpointWebsocket.
        """
        self.openapi_types = {
            'content_type': str,
            'headers': EndpointWebsocketHeaders,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'content_type': 'content-type',
            'headers': 'headers',
            'type': 'type',
            'uri': 'uri'
        }

        self._content_type = content_type
        self._headers = headers
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointWebsocket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointWebsocket of this EndpointWebsocket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this EndpointWebsocket.


        :return: The content_type of this EndpointWebsocket.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this EndpointWebsocket.


        :param content_type: The content_type of this EndpointWebsocket.
        :type content_type: str
        """
        allowed_values = ["audio/l16;rate=8000", "audio/l16;rate=16000"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def headers(self):
        """Gets the headers of this EndpointWebsocket.


        :return: The headers of this EndpointWebsocket.
        :rtype: EndpointWebsocketHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EndpointWebsocket.


        :param headers: The headers of this EndpointWebsocket.
        :type headers: EndpointWebsocketHeaders
        """

        self._headers = headers

    @property
    def type(self):
        """Gets the type of this EndpointWebsocket.

        The type of connection. Must be `websocket`

        :return: The type of this EndpointWebsocket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EndpointWebsocket.

        The type of connection. Must be `websocket`

        :param type: The type of this EndpointWebsocket.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this EndpointWebsocket.


        :return: The uri of this EndpointWebsocket.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EndpointWebsocket.


        :param uri: The uri of this EndpointWebsocket.
        :type uri: str
        """
        if uri is not None and len(uri) > 50:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `50`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri
