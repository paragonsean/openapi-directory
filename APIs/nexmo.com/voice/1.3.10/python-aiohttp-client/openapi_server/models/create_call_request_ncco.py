# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_call_request_base_to_inner import CreateCallRequestBaseToInner
from openapi_server.models.endpoint_phone_from import EndpointPhoneFrom
from openapi_server import util


class CreateCallRequestNcco(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_method: str='POST', event_url: List[str]=None, _from: EndpointPhoneFrom=None, length_timer: int=7200, machine_detection: str=None, random_from_number: bool=False, ringing_timer: int=60, to: List[CreateCallRequestBaseToInner]=None, ncco: List[object]=None):
        """CreateCallRequestNcco - a model defined in OpenAPI

        :param event_method: The event_method of this CreateCallRequestNcco.
        :param event_url: The event_url of this CreateCallRequestNcco.
        :param _from: The _from of this CreateCallRequestNcco.
        :param length_timer: The length_timer of this CreateCallRequestNcco.
        :param machine_detection: The machine_detection of this CreateCallRequestNcco.
        :param random_from_number: The random_from_number of this CreateCallRequestNcco.
        :param ringing_timer: The ringing_timer of this CreateCallRequestNcco.
        :param to: The to of this CreateCallRequestNcco.
        :param ncco: The ncco of this CreateCallRequestNcco.
        """
        self.openapi_types = {
            'event_method': str,
            'event_url': List[str],
            '_from': EndpointPhoneFrom,
            'length_timer': int,
            'machine_detection': str,
            'random_from_number': bool,
            'ringing_timer': int,
            'to': List[CreateCallRequestBaseToInner],
            'ncco': List[object]
        }

        self.attribute_map = {
            'event_method': 'event_method',
            'event_url': 'event_url',
            '_from': 'from',
            'length_timer': 'length_timer',
            'machine_detection': 'machine_detection',
            'random_from_number': 'random_from_number',
            'ringing_timer': 'ringing_timer',
            'to': 'to',
            'ncco': 'ncco'
        }

        self._event_method = event_method
        self._event_url = event_url
        self.__from = _from
        self._length_timer = length_timer
        self._machine_detection = machine_detection
        self._random_from_number = random_from_number
        self._ringing_timer = ringing_timer
        self._to = to
        self._ncco = ncco

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCallRequestNcco':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCallRequestNcco of this CreateCallRequestNcco.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_method(self):
        """Gets the event_method of this CreateCallRequestNcco.

        The HTTP method used to send event information to `event_url`.

        :return: The event_method of this CreateCallRequestNcco.
        :rtype: str
        """
        return self._event_method

    @event_method.setter
    def event_method(self, event_method):
        """Sets the event_method of this CreateCallRequestNcco.

        The HTTP method used to send event information to `event_url`.

        :param event_method: The event_method of this CreateCallRequestNcco.
        :type event_method: str
        """
        allowed_values = ["POST", "GET"]  # noqa: E501
        if event_method not in allowed_values:
            raise ValueError(
                "Invalid value for `event_method` ({0}), must be one of {1}"
                .format(event_method, allowed_values)
            )

        self._event_method = event_method

    @property
    def event_url(self):
        """Gets the event_url of this CreateCallRequestNcco.

        **Required** unless `event_url` is configured at the application level, see [Create an Application](/api/application.v2#createApplication)  The webhook endpoint where call progress events are sent to. For more information about the values sent, see [Event webhook](/voice/voice-api/webhook-reference#event-webhook). 

        :return: The event_url of this CreateCallRequestNcco.
        :rtype: List[str]
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this CreateCallRequestNcco.

        **Required** unless `event_url` is configured at the application level, see [Create an Application](/api/application.v2#createApplication)  The webhook endpoint where call progress events are sent to. For more information about the values sent, see [Event webhook](/voice/voice-api/webhook-reference#event-webhook). 

        :param event_url: The event_url of this CreateCallRequestNcco.
        :type event_url: List[str]
        """

        self._event_url = event_url

    @property
    def _from(self):
        """Gets the _from of this CreateCallRequestNcco.


        :return: The _from of this CreateCallRequestNcco.
        :rtype: EndpointPhoneFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CreateCallRequestNcco.


        :param _from: The _from of this CreateCallRequestNcco.
        :type _from: EndpointPhoneFrom
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def length_timer(self):
        """Gets the length_timer of this CreateCallRequestNcco.

        Set the number of seconds that elapse before Vonage hangs up after the call state changes to answered.

        :return: The length_timer of this CreateCallRequestNcco.
        :rtype: int
        """
        return self._length_timer

    @length_timer.setter
    def length_timer(self, length_timer):
        """Sets the length_timer of this CreateCallRequestNcco.

        Set the number of seconds that elapse before Vonage hangs up after the call state changes to answered.

        :param length_timer: The length_timer of this CreateCallRequestNcco.
        :type length_timer: int
        """
        if length_timer is not None and length_timer > 7200:
            raise ValueError("Invalid value for `length_timer`, must be a value less than or equal to `7200`")
        if length_timer is not None and length_timer < 1:
            raise ValueError("Invalid value for `length_timer`, must be a value greater than or equal to `1`")

        self._length_timer = length_timer

    @property
    def machine_detection(self):
        """Gets the machine_detection of this CreateCallRequestNcco.

        Configure the behavior when Vonage detects that the call is answered by voicemail. If `continue`, Vonage sends an HTTP request to `event_url` with the Call event machine. If `hangup`, Vonage ends the call.

        :return: The machine_detection of this CreateCallRequestNcco.
        :rtype: str
        """
        return self._machine_detection

    @machine_detection.setter
    def machine_detection(self, machine_detection):
        """Sets the machine_detection of this CreateCallRequestNcco.

        Configure the behavior when Vonage detects that the call is answered by voicemail. If `continue`, Vonage sends an HTTP request to `event_url` with the Call event machine. If `hangup`, Vonage ends the call.

        :param machine_detection: The machine_detection of this CreateCallRequestNcco.
        :type machine_detection: str
        """
        allowed_values = ["continue", "hangup"]  # noqa: E501
        if machine_detection not in allowed_values:
            raise ValueError(
                "Invalid value for `machine_detection` ({0}), must be one of {1}"
                .format(machine_detection, allowed_values)
            )

        self._machine_detection = machine_detection

    @property
    def random_from_number(self):
        """Gets the random_from_number of this CreateCallRequestNcco.

        Set to `true` to use random phone number as `from`. The number will be selected from the list of the numbers assigned to the current application. `random_from_number: true` cannot be used together with `from`.

        :return: The random_from_number of this CreateCallRequestNcco.
        :rtype: bool
        """
        return self._random_from_number

    @random_from_number.setter
    def random_from_number(self, random_from_number):
        """Sets the random_from_number of this CreateCallRequestNcco.

        Set to `true` to use random phone number as `from`. The number will be selected from the list of the numbers assigned to the current application. `random_from_number: true` cannot be used together with `from`.

        :param random_from_number: The random_from_number of this CreateCallRequestNcco.
        :type random_from_number: bool
        """

        self._random_from_number = random_from_number

    @property
    def ringing_timer(self):
        """Gets the ringing_timer of this CreateCallRequestNcco.

        Set the number of seconds that elapse before Vonage hangs up after the call state changes to ‘ringing’.

        :return: The ringing_timer of this CreateCallRequestNcco.
        :rtype: int
        """
        return self._ringing_timer

    @ringing_timer.setter
    def ringing_timer(self, ringing_timer):
        """Sets the ringing_timer of this CreateCallRequestNcco.

        Set the number of seconds that elapse before Vonage hangs up after the call state changes to ‘ringing’.

        :param ringing_timer: The ringing_timer of this CreateCallRequestNcco.
        :type ringing_timer: int
        """
        if ringing_timer is not None and ringing_timer > 120:
            raise ValueError("Invalid value for `ringing_timer`, must be a value less than or equal to `120`")
        if ringing_timer is not None and ringing_timer < 1:
            raise ValueError("Invalid value for `ringing_timer`, must be a value greater than or equal to `1`")

        self._ringing_timer = ringing_timer

    @property
    def to(self):
        """Gets the to of this CreateCallRequestNcco.


        :return: The to of this CreateCallRequestNcco.
        :rtype: List[CreateCallRequestBaseToInner]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CreateCallRequestNcco.


        :param to: The to of this CreateCallRequestNcco.
        :type to: List[CreateCallRequestBaseToInner]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def ncco(self):
        """Gets the ncco of this CreateCallRequestNcco.

        The [Nexmo Call Control Object](/voice/voice-api/ncco-reference) to use for this call. 

        :return: The ncco of this CreateCallRequestNcco.
        :rtype: List[object]
        """
        return self._ncco

    @ncco.setter
    def ncco(self, ncco):
        """Sets the ncco of this CreateCallRequestNcco.

        The [Nexmo Call Control Object](/voice/voice-api/ncco-reference) to use for this call. 

        :param ncco: The ncco of this CreateCallRequestNcco.
        :type ncco: List[object]
        """
        if ncco is None:
            raise ValueError("Invalid value for `ncco`, must not be `None`")

        self._ncco = ncco
