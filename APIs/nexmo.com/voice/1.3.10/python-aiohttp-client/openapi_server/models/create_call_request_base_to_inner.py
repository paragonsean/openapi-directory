# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_phone_to import EndpointPhoneTo
from openapi_server.models.endpoint_sip import EndpointSip
from openapi_server.models.endpoint_vbc_extension import EndpointVBCExtension
from openapi_server.models.endpoint_websocket import EndpointWebsocket
from openapi_server.models.endpoint_websocket_headers import EndpointWebsocketHeaders
import re
from openapi_server import util


class CreateCallRequestBaseToInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dtmf_answer: str=None, number: str=None, type: str=None, uri: str=None, content_type: str=None, headers: EndpointWebsocketHeaders=None, extension: str=None):
        """CreateCallRequestBaseToInner - a model defined in OpenAPI

        :param dtmf_answer: The dtmf_answer of this CreateCallRequestBaseToInner.
        :param number: The number of this CreateCallRequestBaseToInner.
        :param type: The type of this CreateCallRequestBaseToInner.
        :param uri: The uri of this CreateCallRequestBaseToInner.
        :param content_type: The content_type of this CreateCallRequestBaseToInner.
        :param headers: The headers of this CreateCallRequestBaseToInner.
        :param extension: The extension of this CreateCallRequestBaseToInner.
        """
        self.openapi_types = {
            'dtmf_answer': str,
            'number': str,
            'type': str,
            'uri': str,
            'content_type': str,
            'headers': EndpointWebsocketHeaders,
            'extension': str
        }

        self.attribute_map = {
            'dtmf_answer': 'dtmfAnswer',
            'number': 'number',
            'type': 'type',
            'uri': 'uri',
            'content_type': 'content-type',
            'headers': 'headers',
            'extension': 'extension'
        }

        self._dtmf_answer = dtmf_answer
        self._number = number
        self._type = type
        self._uri = uri
        self._content_type = content_type
        self._headers = headers
        self._extension = extension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCallRequestBaseToInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCallRequestBase_to_inner of this CreateCallRequestBaseToInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dtmf_answer(self):
        """Gets the dtmf_answer of this CreateCallRequestBaseToInner.

        Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf) to send when the call is answered

        :return: The dtmf_answer of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._dtmf_answer

    @dtmf_answer.setter
    def dtmf_answer(self, dtmf_answer):
        """Sets the dtmf_answer of this CreateCallRequestBaseToInner.

        Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf) to send when the call is answered

        :param dtmf_answer: The dtmf_answer of this CreateCallRequestBaseToInner.
        :type dtmf_answer: str
        """

        self._dtmf_answer = dtmf_answer

    @property
    def number(self):
        """Gets the number of this CreateCallRequestBaseToInner.

        The phone number to connect to

        :return: The number of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateCallRequestBaseToInner.

        The phone number to connect to

        :param number: The number of this CreateCallRequestBaseToInner.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 15:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `15`")
        if number is not None and len(number) < 7:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `7`")
        if number is not None and not re.search(r'\d{7,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/\d{7,15}/`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this CreateCallRequestBaseToInner.

        The type of connection. Must be `vbc`

        :return: The type of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCallRequestBaseToInner.

        The type of connection. Must be `vbc`

        :param type: The type of this CreateCallRequestBaseToInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this CreateCallRequestBaseToInner.


        :return: The uri of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CreateCallRequestBaseToInner.


        :param uri: The uri of this CreateCallRequestBaseToInner.
        :type uri: str
        """
        if uri is not None and len(uri) > 50:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `50`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri

    @property
    def content_type(self):
        """Gets the content_type of this CreateCallRequestBaseToInner.


        :return: The content_type of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CreateCallRequestBaseToInner.


        :param content_type: The content_type of this CreateCallRequestBaseToInner.
        :type content_type: str
        """
        allowed_values = ["audio/l16;rate=8000", "audio/l16;rate=16000"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def headers(self):
        """Gets the headers of this CreateCallRequestBaseToInner.


        :return: The headers of this CreateCallRequestBaseToInner.
        :rtype: EndpointWebsocketHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this CreateCallRequestBaseToInner.


        :param headers: The headers of this CreateCallRequestBaseToInner.
        :type headers: EndpointWebsocketHeaders
        """

        self._headers = headers

    @property
    def extension(self):
        """Gets the extension of this CreateCallRequestBaseToInner.


        :return: The extension of this CreateCallRequestBaseToInner.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this CreateCallRequestBaseToInner.


        :param extension: The extension of this CreateCallRequestBaseToInner.
        :type extension: str
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")

        self._extension = extension
