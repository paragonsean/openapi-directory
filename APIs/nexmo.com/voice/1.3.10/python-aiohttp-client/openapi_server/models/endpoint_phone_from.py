# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EndpointPhoneFrom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: str=None, type: str=None):
        """EndpointPhoneFrom - a model defined in OpenAPI

        :param number: The number of this EndpointPhoneFrom.
        :param type: The type of this EndpointPhoneFrom.
        """
        self.openapi_types = {
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'number': 'number',
            'type': 'type'
        }

        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointPhoneFrom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointPhoneFrom of this EndpointPhoneFrom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this EndpointPhoneFrom.

        The phone number to connect to

        :return: The number of this EndpointPhoneFrom.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this EndpointPhoneFrom.

        The phone number to connect to

        :param number: The number of this EndpointPhoneFrom.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 15:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `15`")
        if number is not None and len(number) < 7:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `7`")
        if number is not None and not re.search(r'\d{7,15}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/\d{7,15}/`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this EndpointPhoneFrom.

        The type of connection. Must be `phone`

        :return: The type of this EndpointPhoneFrom.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EndpointPhoneFrom.

        The type of connection. Must be `phone`

        :param type: The type of this EndpointPhoneFrom.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
