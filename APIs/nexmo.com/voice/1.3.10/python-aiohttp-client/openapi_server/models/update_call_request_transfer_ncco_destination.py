# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateCallRequestTransferNccoDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ncco: List[object]=None, type: str=None):
        """UpdateCallRequestTransferNccoDestination - a model defined in OpenAPI

        :param ncco: The ncco of this UpdateCallRequestTransferNccoDestination.
        :param type: The type of this UpdateCallRequestTransferNccoDestination.
        """
        self.openapi_types = {
            'ncco': List[object],
            'type': str
        }

        self.attribute_map = {
            'ncco': 'ncco',
            'type': 'type'
        }

        self._ncco = ncco
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCallRequestTransferNccoDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCallRequestTransferNcco_destination of this UpdateCallRequestTransferNccoDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ncco(self):
        """Gets the ncco of this UpdateCallRequestTransferNccoDestination.

        Refer to the [NCCO Guide](https://developer.nexmo.com/voice/voice-api/ncco-reference) for a description of possible NCCO parameters.

        :return: The ncco of this UpdateCallRequestTransferNccoDestination.
        :rtype: List[object]
        """
        return self._ncco

    @ncco.setter
    def ncco(self, ncco):
        """Sets the ncco of this UpdateCallRequestTransferNccoDestination.

        Refer to the [NCCO Guide](https://developer.nexmo.com/voice/voice-api/ncco-reference) for a description of possible NCCO parameters.

        :param ncco: The ncco of this UpdateCallRequestTransferNccoDestination.
        :type ncco: List[object]
        """
        if ncco is None:
            raise ValueError("Invalid value for `ncco`, must not be `None`")

        self._ncco = ncco

    @property
    def type(self):
        """Gets the type of this UpdateCallRequestTransferNccoDestination.

        Always `ncco`

        :return: The type of this UpdateCallRequestTransferNccoDestination.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateCallRequestTransferNccoDestination.

        Always `ncco`

        :param type: The type of this UpdateCallRequestTransferNccoDestination.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
