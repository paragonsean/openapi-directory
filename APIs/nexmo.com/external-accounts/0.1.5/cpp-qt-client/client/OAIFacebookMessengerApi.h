/**
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFacebookMessengerApi_H
#define OAI_OAIFacebookMessengerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI401Response.h"
#include "OAI403Response.h"
#include "OAICreateMessengerAccount_400_response.h"
#include "OAICreateMessengerAccount_request.h"
#include "OAIMessengerAccountResponse.h"
#include "OAIUpdateMessengerAccount_200_response.h"
#include "OAIUpdateMessengerAccount_400_response.h"
#include "OAIUpdateMessengerAccount_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFacebookMessengerApi : public QObject {
    Q_OBJECT

public:
    OAIFacebookMessengerApi(const int timeOut = 0);
    ~OAIFacebookMessengerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_messenger_account_request OAICreateMessengerAccount_request [required]
    */
    virtual void createMessengerAccount(const OAICreateMessengerAccount_request &oai_create_messenger_account_request);

    /**
    * @param[in]  external_id QString [required]
    */
    virtual void deleteMessengerAccount(const QString &external_id);

    /**
    * @param[in]  external_id QString [required]
    */
    virtual void getMessengerAccount(const QString &external_id);

    /**
    * @param[in]  external_id QString [required]
    * @param[in]  oai_update_messenger_account_request OAIUpdateMessengerAccount_request [required]
    */
    virtual void updateMessengerAccount(const QString &external_id, const OAIUpdateMessengerAccount_request &oai_update_messenger_account_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMessengerAccountCallback(OAIHttpRequestWorker *worker);
    void deleteMessengerAccountCallback(OAIHttpRequestWorker *worker);
    void getMessengerAccountCallback(OAIHttpRequestWorker *worker);
    void updateMessengerAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMessengerAccountSignal(OAIMessengerAccountResponse summary);
    void deleteMessengerAccountSignal();
    void getMessengerAccountSignal(OAIMessengerAccountResponse summary);
    void updateMessengerAccountSignal(OAIUpdateMessengerAccount_200_response summary);


    void createMessengerAccountSignalFull(OAIHttpRequestWorker *worker, OAIMessengerAccountResponse summary);
    void deleteMessengerAccountSignalFull(OAIHttpRequestWorker *worker);
    void getMessengerAccountSignalFull(OAIHttpRequestWorker *worker, OAIMessengerAccountResponse summary);
    void updateMessengerAccountSignalFull(OAIHttpRequestWorker *worker, OAIUpdateMessengerAccount_200_response summary);

    Q_DECL_DEPRECATED_X("Use createMessengerAccountSignalError() instead")
    void createMessengerAccountSignalE(OAIMessengerAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMessengerAccountSignalError(OAIMessengerAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessengerAccountSignalError() instead")
    void deleteMessengerAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessengerAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessengerAccountSignalError() instead")
    void getMessengerAccountSignalE(OAIMessengerAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessengerAccountSignalError(OAIMessengerAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessengerAccountSignalError() instead")
    void updateMessengerAccountSignalE(OAIUpdateMessengerAccount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessengerAccountSignalError(OAIUpdateMessengerAccount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMessengerAccountSignalErrorFull() instead")
    void createMessengerAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMessengerAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessengerAccountSignalErrorFull() instead")
    void deleteMessengerAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessengerAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessengerAccountSignalErrorFull() instead")
    void getMessengerAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessengerAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessengerAccountSignalErrorFull() instead")
    void updateMessengerAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessengerAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
