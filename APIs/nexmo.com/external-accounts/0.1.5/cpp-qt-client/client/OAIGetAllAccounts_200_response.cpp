/**
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAllAccounts_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAllAccounts_200_response::OAIGetAllAccounts_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAllAccounts_200_response::OAIGetAllAccounts_200_response() {
    this->initializeModel();
}

OAIGetAllAccounts_200_response::~OAIGetAllAccounts_200_response() {}

void OAIGetAllAccounts_200_response::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIGetAllAccounts_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAllAccounts_200_response::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("page_number")]);
    m_page_number_isSet = !json[QString("page_number")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;
}

QString OAIGetAllAccounts_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAllAccounts_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.size() > 0) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("page_number"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QList<OAIGetAllAccountResponse> OAIGetAllAccounts_200_response::getEmbedded() const {
    return m__embedded;
}
void OAIGetAllAccounts_200_response::setEmbedded(const QList<OAIGetAllAccountResponse> &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIGetAllAccounts_200_response::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIGetAllAccounts_200_response::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIGetAllAccounts_200_response__links OAIGetAllAccounts_200_response::getLinks() const {
    return m__links;
}
void OAIGetAllAccounts_200_response::setLinks(const OAIGetAllAccounts_200_response__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGetAllAccounts_200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGetAllAccounts_200_response::is__links_Valid() const{
    return m__links_isValid;
}

qint32 OAIGetAllAccounts_200_response::getPageNumber() const {
    return m_page_number;
}
void OAIGetAllAccounts_200_response::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIGetAllAccounts_200_response::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIGetAllAccounts_200_response::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIGetAllAccounts_200_response::getPageSize() const {
    return m_page_size;
}
void OAIGetAllAccounts_200_response::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetAllAccounts_200_response::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetAllAccounts_200_response::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIGetAllAccounts_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAllAccounts_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
