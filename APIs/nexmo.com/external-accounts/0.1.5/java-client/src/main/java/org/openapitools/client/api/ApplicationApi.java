/*
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountResponse;
import org.openapitools.client.model.LinkApplication403Response;
import org.openapitools.client.model.LinkApplication409Response;
import org.openapitools.client.model.LinkApplicationRequest;
import org.openapitools.client.model.Model401Response;
import org.openapitools.client.model.UnliWithoutApplicationnkApplication403Response;
import org.openapitools.client.model.UnliWithoutApplicationnkApplication409Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for linkApplication
     * @param provider Provider of the account you want to assign an application to (required)
     * @param externalId External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number. (required)
     * @param linkApplicationRequest Request body can contain any of the following. Please note, the only one application can be linked to the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkApplicationCall(String provider, String externalId, LinkApplicationRequest linkApplicationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkApplicationRequest;

        // create path and map variables
        String localVarPath = "/{provider}/{external_id}/applications"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkApplicationValidateBeforeCall(String provider, String externalId, LinkApplicationRequest linkApplicationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling linkApplication(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling linkApplication(Async)");
        }

        // verify the required parameter 'linkApplicationRequest' is set
        if (linkApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'linkApplicationRequest' when calling linkApplication(Async)");
        }

        return linkApplicationCall(provider, externalId, linkApplicationRequest, _callback);

    }

    /**
     * Link application to an account
     * 
     * @param provider Provider of the account you want to assign an application to (required)
     * @param externalId External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number. (required)
     * @param linkApplicationRequest Request body can contain any of the following. Please note, the only one application can be linked to the account. (required)
     * @return AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public AccountResponse linkApplication(String provider, String externalId, LinkApplicationRequest linkApplicationRequest) throws ApiException {
        ApiResponse<AccountResponse> localVarResp = linkApplicationWithHttpInfo(provider, externalId, linkApplicationRequest);
        return localVarResp.getData();
    }

    /**
     * Link application to an account
     * 
     * @param provider Provider of the account you want to assign an application to (required)
     * @param externalId External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number. (required)
     * @param linkApplicationRequest Request body can contain any of the following. Please note, the only one application can be linked to the account. (required)
     * @return ApiResponse&lt;AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResponse> linkApplicationWithHttpInfo(String provider, String externalId, LinkApplicationRequest linkApplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = linkApplicationValidateBeforeCall(provider, externalId, linkApplicationRequest, null);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link application to an account (asynchronously)
     * 
     * @param provider Provider of the account you want to assign an application to (required)
     * @param externalId External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number. (required)
     * @param linkApplicationRequest Request body can contain any of the following. Please note, the only one application can be linked to the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkApplicationAsync(String provider, String externalId, LinkApplicationRequest linkApplicationRequest, final ApiCallback<AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkApplicationValidateBeforeCall(provider, externalId, linkApplicationRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unliWithoutApplicationnkApplication
     * @param provider Provider of the account you want to unlink an application from (required)
     * @param externalId External id of the account you want to unlink an application from (required)
     * @param applicationId Id of the application you want to unlink (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unliWithoutApplicationnkApplicationCall(String provider, String externalId, String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{provider}/{external_id}/applications/{application_id}"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()))
            .replace("{" + "application_id" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unliWithoutApplicationnkApplicationValidateBeforeCall(String provider, String externalId, String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling unliWithoutApplicationnkApplication(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling unliWithoutApplicationnkApplication(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling unliWithoutApplicationnkApplication(Async)");
        }

        return unliWithoutApplicationnkApplicationCall(provider, externalId, applicationId, _callback);

    }

    /**
     * Unlink application from an account
     * 
     * @param provider Provider of the account you want to unlink an application from (required)
     * @param externalId External id of the account you want to unlink an application from (required)
     * @param applicationId Id of the application you want to unlink (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public void unliWithoutApplicationnkApplication(String provider, String externalId, String applicationId) throws ApiException {
        unliWithoutApplicationnkApplicationWithHttpInfo(provider, externalId, applicationId);
    }

    /**
     * Unlink application from an account
     * 
     * @param provider Provider of the account you want to unlink an application from (required)
     * @param externalId External id of the account you want to unlink an application from (required)
     * @param applicationId Id of the application you want to unlink (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unliWithoutApplicationnkApplicationWithHttpInfo(String provider, String externalId, String applicationId) throws ApiException {
        okhttp3.Call localVarCall = unliWithoutApplicationnkApplicationValidateBeforeCall(provider, externalId, applicationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlink application from an account (asynchronously)
     * 
     * @param provider Provider of the account you want to unlink an application from (required)
     * @param externalId External id of the account you want to unlink an application from (required)
     * @param applicationId Id of the application you want to unlink (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unliWithoutApplicationnkApplicationAsync(String provider, String externalId, String applicationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unliWithoutApplicationnkApplicationValidateBeforeCall(provider, externalId, applicationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
