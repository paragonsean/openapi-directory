/*
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateMessengerAccount400Response;
import org.openapitools.client.model.CreateMessengerAccountRequest;
import org.openapitools.client.model.MessengerAccountResponse;
import org.openapitools.client.model.Model401Response;
import org.openapitools.client.model.Model403Response;
import org.openapitools.client.model.UpdateMessengerAccount200Response;
import org.openapitools.client.model.UpdateMessengerAccount400Response;
import org.openapitools.client.model.UpdateMessengerAccountRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacebookMessengerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacebookMessengerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacebookMessengerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMessengerAccount
     * @param createMessengerAccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessengerAccountCall(CreateMessengerAccountRequest createMessengerAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessengerAccountRequest;

        // create path and map variables
        String localVarPath = "/messenger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessengerAccountValidateBeforeCall(CreateMessengerAccountRequest createMessengerAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMessengerAccountRequest' is set
        if (createMessengerAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createMessengerAccountRequest' when calling createMessengerAccount(Async)");
        }

        return createMessengerAccountCall(createMessengerAccountRequest, _callback);

    }

    /**
     * Create a Messenger account
     * 
     * @param createMessengerAccountRequest  (required)
     * @return MessengerAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public MessengerAccountResponse createMessengerAccount(CreateMessengerAccountRequest createMessengerAccountRequest) throws ApiException {
        ApiResponse<MessengerAccountResponse> localVarResp = createMessengerAccountWithHttpInfo(createMessengerAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Messenger account
     * 
     * @param createMessengerAccountRequest  (required)
     * @return ApiResponse&lt;MessengerAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessengerAccountResponse> createMessengerAccountWithHttpInfo(CreateMessengerAccountRequest createMessengerAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createMessengerAccountValidateBeforeCall(createMessengerAccountRequest, null);
        Type localVarReturnType = new TypeToken<MessengerAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Messenger account (asynchronously)
     * 
     * @param createMessengerAccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessengerAccountAsync(CreateMessengerAccountRequest createMessengerAccountRequest, final ApiCallback<MessengerAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessengerAccountValidateBeforeCall(createMessengerAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<MessengerAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessengerAccount
     * @param externalId External id of the account you want to delete. In this case it is the Facebook Page ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessengerAccountCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messenger/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessengerAccountValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling deleteMessengerAccount(Async)");
        }

        return deleteMessengerAccountCall(externalId, _callback);

    }

    /**
     * Delete a Messenger account
     * 
     * @param externalId External id of the account you want to delete. In this case it is the Facebook Page ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessengerAccount(String externalId) throws ApiException {
        deleteMessengerAccountWithHttpInfo(externalId);
    }

    /**
     * Delete a Messenger account
     * 
     * @param externalId External id of the account you want to delete. In this case it is the Facebook Page ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessengerAccountWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessengerAccountValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Messenger account (asynchronously)
     * 
     * @param externalId External id of the account you want to delete. In this case it is the Facebook Page ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessengerAccountAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessengerAccountValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessengerAccount
     * @param externalId External id of the account you want to retrieve. In this case it is the Facebook Page ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessengerAccountCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messenger/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessengerAccountValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getMessengerAccount(Async)");
        }

        return getMessengerAccountCall(externalId, _callback);

    }

    /**
     * Retrieve a Messenger account
     * 
     * @param externalId External id of the account you want to retrieve. In this case it is the Facebook Page ID. (required)
     * @return MessengerAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public MessengerAccountResponse getMessengerAccount(String externalId) throws ApiException {
        ApiResponse<MessengerAccountResponse> localVarResp = getMessengerAccountWithHttpInfo(externalId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Messenger account
     * 
     * @param externalId External id of the account you want to retrieve. In this case it is the Facebook Page ID. (required)
     * @return ApiResponse&lt;MessengerAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessengerAccountResponse> getMessengerAccountWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = getMessengerAccountValidateBeforeCall(externalId, null);
        Type localVarReturnType = new TypeToken<MessengerAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Messenger account (asynchronously)
     * 
     * @param externalId External id of the account you want to retrieve. In this case it is the Facebook Page ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessengerAccountAsync(String externalId, final ApiCallback<MessengerAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessengerAccountValidateBeforeCall(externalId, _callback);
        Type localVarReturnType = new TypeToken<MessengerAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessengerAccount
     * @param externalId External id of the account you want to update. In this case it is the Facebook Page ID. (required)
     * @param updateMessengerAccountRequest Request body can contain any of the following (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessengerAccountCall(String externalId, UpdateMessengerAccountRequest updateMessengerAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessengerAccountRequest;

        // create path and map variables
        String localVarPath = "/messenger/{external_id}"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessengerAccountValidateBeforeCall(String externalId, UpdateMessengerAccountRequest updateMessengerAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling updateMessengerAccount(Async)");
        }

        // verify the required parameter 'updateMessengerAccountRequest' is set
        if (updateMessengerAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMessengerAccountRequest' when calling updateMessengerAccount(Async)");
        }

        return updateMessengerAccountCall(externalId, updateMessengerAccountRequest, _callback);

    }

    /**
     * Update a Messenger account
     * 
     * @param externalId External id of the account you want to update. In this case it is the Facebook Page ID. (required)
     * @param updateMessengerAccountRequest Request body can contain any of the following (required)
     * @return UpdateMessengerAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMessengerAccount200Response updateMessengerAccount(String externalId, UpdateMessengerAccountRequest updateMessengerAccountRequest) throws ApiException {
        ApiResponse<UpdateMessengerAccount200Response> localVarResp = updateMessengerAccountWithHttpInfo(externalId, updateMessengerAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Messenger account
     * 
     * @param externalId External id of the account you want to update. In this case it is the Facebook Page ID. (required)
     * @param updateMessengerAccountRequest Request body can contain any of the following (required)
     * @return ApiResponse&lt;UpdateMessengerAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMessengerAccount200Response> updateMessengerAccountWithHttpInfo(String externalId, UpdateMessengerAccountRequest updateMessengerAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMessengerAccountValidateBeforeCall(externalId, updateMessengerAccountRequest, null);
        Type localVarReturnType = new TypeToken<UpdateMessengerAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Messenger account (asynchronously)
     * 
     * @param externalId External id of the account you want to update. In this case it is the Facebook Page ID. (required)
     * @param updateMessengerAccountRequest Request body can contain any of the following (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessengerAccountAsync(String externalId, UpdateMessengerAccountRequest updateMessengerAccountRequest, final ApiCallback<UpdateMessengerAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessengerAccountValidateBeforeCall(externalId, updateMessengerAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateMessengerAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
