# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessengerAccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, api_key: str=None, applications: List[str]=None, external_id: str=None, name: str=None, provider: str=None):
        """MessengerAccountResponse - a model defined in OpenAPI

        :param access_token: The access_token of this MessengerAccountResponse.
        :param api_key: The api_key of this MessengerAccountResponse.
        :param applications: The applications of this MessengerAccountResponse.
        :param external_id: The external_id of this MessengerAccountResponse.
        :param name: The name of this MessengerAccountResponse.
        :param provider: The provider of this MessengerAccountResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'api_key': str,
            'applications': List[str],
            'external_id': str,
            'name': str,
            'provider': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'api_key': 'api_key',
            'applications': 'applications',
            'external_id': 'external_id',
            'name': 'name',
            'provider': 'provider'
        }

        self._access_token = access_token
        self._api_key = api_key
        self._applications = applications
        self._external_id = external_id
        self._name = name
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessengerAccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessengerAccountResponse of this MessengerAccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this MessengerAccountResponse.

        The provider access token

        :return: The access_token of this MessengerAccountResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this MessengerAccountResponse.

        The provider access token

        :param access_token: The access_token of this MessengerAccountResponse.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def api_key(self):
        """Gets the api_key of this MessengerAccountResponse.

        The external api key for this account

        :return: The api_key of this MessengerAccountResponse.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MessengerAccountResponse.

        The external api key for this account

        :param api_key: The api_key of this MessengerAccountResponse.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def applications(self):
        """Gets the applications of this MessengerAccountResponse.

        The array of associated application ids

        :return: The applications of this MessengerAccountResponse.
        :rtype: List[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this MessengerAccountResponse.

        The array of associated application ids

        :param applications: The applications of this MessengerAccountResponse.
        :type applications: List[str]
        """

        self._applications = applications

    @property
    def external_id(self):
        """Gets the external_id of this MessengerAccountResponse.

        The external identifier for this account

        :return: The external_id of this MessengerAccountResponse.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MessengerAccountResponse.

        The external identifier for this account

        :param external_id: The external_id of this MessengerAccountResponse.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this MessengerAccountResponse.

        The account name

        :return: The name of this MessengerAccountResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MessengerAccountResponse.

        The account name

        :param name: The name of this MessengerAccountResponse.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this MessengerAccountResponse.

        The provider (will be `messenger`).

        :return: The provider of this MessengerAccountResponse.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this MessengerAccountResponse.

        The provider (will be `messenger`).

        :param provider: The provider of this MessengerAccountResponse.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
