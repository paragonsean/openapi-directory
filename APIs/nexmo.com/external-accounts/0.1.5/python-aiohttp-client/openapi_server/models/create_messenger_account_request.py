# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMessengerAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, applications: List[str]=None, external_id: str=None, name: str=None):
        """CreateMessengerAccountRequest - a model defined in OpenAPI

        :param access_token: The access_token of this CreateMessengerAccountRequest.
        :param applications: The applications of this CreateMessengerAccountRequest.
        :param external_id: The external_id of this CreateMessengerAccountRequest.
        :param name: The name of this CreateMessengerAccountRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'applications': List[str],
            'external_id': str,
            'name': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'applications': 'applications',
            'external_id': 'external_id',
            'name': 'name'
        }

        self._access_token = access_token
        self._applications = applications
        self._external_id = external_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMessengerAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMessengerAccount_request of this CreateMessengerAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this CreateMessengerAccountRequest.

        This is the Facebook Business Page token. You can obtain the token using one of the following methods:  * Linking your Facebook Business Page to your account [with our Dashboard tool](https://dashboard.nexmo.com/messages/social-channels/facebook-connect) * Requesting a Page Access Token using the steps in the [Facebook token reference](https://developers.facebook.com/docs/pages/access-tokens/) 

        :return: The access_token of this CreateMessengerAccountRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CreateMessengerAccountRequest.

        This is the Facebook Business Page token. You can obtain the token using one of the following methods:  * Linking your Facebook Business Page to your account [with our Dashboard tool](https://dashboard.nexmo.com/messages/social-channels/facebook-connect) * Requesting a Page Access Token using the steps in the [Facebook token reference](https://developers.facebook.com/docs/pages/access-tokens/) 

        :param access_token: The access_token of this CreateMessengerAccountRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def applications(self):
        """Gets the applications of this CreateMessengerAccountRequest.

        Contains a list of application IDs which are linked to the account. <ul> <li>There is just one application allowed per an account.</li> <li>The application type must be type \"messages\".</li> </ul> For more information see [Application API spec](https://developer.nexmo.com/api/application.v2)

        :return: The applications of this CreateMessengerAccountRequest.
        :rtype: List[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this CreateMessengerAccountRequest.

        Contains a list of application IDs which are linked to the account. <ul> <li>There is just one application allowed per an account.</li> <li>The application type must be type \"messages\".</li> </ul> For more information see [Application API spec](https://developer.nexmo.com/api/application.v2)

        :param applications: The applications of this CreateMessengerAccountRequest.
        :type applications: List[str]
        """
        if applications is not None and len(applications) > 1:
            raise ValueError("Invalid value for `applications`, number of items must be less than or equal to `1`")
        if applications is not None and len(applications) < 0:
            raise ValueError("Invalid value for `applications`, number of items must be greater than or equal to `0`")

        self._applications = applications

    @property
    def external_id(self):
        """Gets the external_id of this CreateMessengerAccountRequest.

        This is the unique identifier within the provider's domain. In this case it is the Page ID for your Facebook Page. Go to your Facebook Page, click \"Settings\", click \"Messenger platform \" scroll down to \"Messenger link\" to find your Page ID.

        :return: The external_id of this CreateMessengerAccountRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateMessengerAccountRequest.

        This is the unique identifier within the provider's domain. In this case it is the Page ID for your Facebook Page. Go to your Facebook Page, click \"Settings\", click \"Messenger platform \" scroll down to \"Messenger link\" to find your Page ID.

        :param external_id: The external_id of this CreateMessengerAccountRequest.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this CreateMessengerAccountRequest.

        Custom account name

        :return: The name of this CreateMessengerAccountRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMessengerAccountRequest.

        Custom account name

        :param name: The name of this CreateMessengerAccountRequest.
        :type name: str
        """

        self._name = name
