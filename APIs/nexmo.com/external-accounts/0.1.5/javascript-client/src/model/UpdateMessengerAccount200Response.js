/**
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateMessengerAccount200Response model module.
 * @module model/UpdateMessengerAccount200Response
 * @version 0.1.5
 */
class UpdateMessengerAccount200Response {
    /**
     * Constructs a new <code>UpdateMessengerAccount200Response</code>.
     * @alias module:model/UpdateMessengerAccount200Response
     * @param accessToken {String} The provider access token
     * @param apiKey {String} The external api key for this account
     * @param externalId {String} The external identifier for this account. In this case it is the Facebook Page ID.
     * @param provider {String} The provider (will be `messenger`).
     */
    constructor(accessToken, apiKey, externalId, provider) { 
        
        UpdateMessengerAccount200Response.initialize(this, accessToken, apiKey, externalId, provider);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, apiKey, externalId, provider) { 
        obj['access_token'] = accessToken;
        obj['api_key'] = apiKey;
        obj['external_id'] = externalId;
        obj['provider'] = provider;
    }

    /**
     * Constructs a <code>UpdateMessengerAccount200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMessengerAccount200Response} obj Optional instance to populate.
     * @return {module:model/UpdateMessengerAccount200Response} The populated <code>UpdateMessengerAccount200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMessengerAccount200Response();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('api_key')) {
                obj['api_key'] = ApiClient.convertToType(data['api_key'], 'String');
            }
            if (data.hasOwnProperty('applications')) {
                obj['applications'] = ApiClient.convertToType(data['applications'], ['String']);
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMessengerAccount200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMessengerAccount200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateMessengerAccount200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['api_key'] && !(typeof data['api_key'] === 'string' || data['api_key'] instanceof String)) {
            throw new Error("Expected the field `api_key` to be a primitive type in the JSON string but got " + data['api_key']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applications'])) {
            throw new Error("Expected the field `applications` to be an array in the JSON data but got " + data['applications']);
        }
        // ensure the json data is a string
        if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
            throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }

        return true;
    }


}

UpdateMessengerAccount200Response.RequiredProperties = ["access_token", "api_key", "external_id", "provider"];

/**
 * The provider access token
 * @member {String} access_token
 */
UpdateMessengerAccount200Response.prototype['access_token'] = undefined;

/**
 * The external api key for this account
 * @member {String} api_key
 */
UpdateMessengerAccount200Response.prototype['api_key'] = undefined;

/**
 * The array of associated application ids
 * @member {Array.<String>} applications
 */
UpdateMessengerAccount200Response.prototype['applications'] = undefined;

/**
 * The external identifier for this account. In this case it is the Facebook Page ID.
 * @member {String} external_id
 */
UpdateMessengerAccount200Response.prototype['external_id'] = undefined;

/**
 * The account name
 * @member {String} name
 */
UpdateMessengerAccount200Response.prototype['name'] = undefined;

/**
 * The provider (will be `messenger`).
 * @member {String} provider
 */
UpdateMessengerAccount200Response.prototype['provider'] = undefined;






export default UpdateMessengerAccount200Response;

