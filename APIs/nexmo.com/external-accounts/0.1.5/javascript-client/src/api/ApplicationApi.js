/**
 * External Accounts API
 * The External Accounts API is used to manage accounts for Viber Business Messages, Facebook Messenger and Whatsapp for use in the [Messages](https://developer.nexmo.com/messages/overview) and [Dispatch](https://developer.nexmo.com/dispatch/overview) APIs.
 *
 * The version of the OpenAPI document: 0.1.5
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountResponse from '../model/AccountResponse';
import LinkApplication403Response from '../model/LinkApplication403Response';
import LinkApplication409Response from '../model/LinkApplication409Response';
import LinkApplicationRequest from '../model/LinkApplicationRequest';
import Model401Response from '../model/Model401Response';
import UnliWithoutApplicationnkApplication403Response from '../model/UnliWithoutApplicationnkApplication403Response';
import UnliWithoutApplicationnkApplication409Response from '../model/UnliWithoutApplicationnkApplication409Response';

/**
* Application service.
* @module api/ApplicationApi
* @version 0.1.5
*/
export default class ApplicationApi {

    /**
    * Constructs a new ApplicationApi. 
    * @alias module:api/ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the linkApplication operation.
     * @callback module:api/ApplicationApi~linkApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link application to an account
     * @param {module:model/String} provider Provider of the account you want to assign an application to
     * @param {String} externalId External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number.
     * @param {module:model/LinkApplicationRequest} linkApplicationRequest Request body can contain any of the following. Please note, the only one application can be linked to the account.
     * @param {module:api/ApplicationApi~linkApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountResponse}
     */
    linkApplication(provider, externalId, linkApplicationRequest, callback) {
      let postBody = linkApplicationRequest;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling linkApplication");
      }
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling linkApplication");
      }
      // verify the required parameter 'linkApplicationRequest' is set
      if (linkApplicationRequest === undefined || linkApplicationRequest === null) {
        throw new Error("Missing the required parameter 'linkApplicationRequest' when calling linkApplication");
      }

      let pathParams = {
        'provider': provider,
        'external_id': externalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountResponse;
      return this.apiClient.callApi(
        '/{provider}/{external_id}/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unliWithoutApplicationnkApplication operation.
     * @callback module:api/ApplicationApi~unliWithoutApplicationnkApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink application from an account
     * @param {module:model/String} provider Provider of the account you want to unlink an application from
     * @param {String} externalId External id of the account you want to unlink an application from
     * @param {String} applicationId Id of the application you want to unlink
     * @param {module:api/ApplicationApi~unliWithoutApplicationnkApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unliWithoutApplicationnkApplication(provider, externalId, applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling unliWithoutApplicationnkApplication");
      }
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling unliWithoutApplicationnkApplication");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling unliWithoutApplicationnkApplication");
      }

      let pathParams = {
        'provider': provider,
        'external_id': externalId,
        'application_id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{provider}/{external_id}/applications/{application_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
