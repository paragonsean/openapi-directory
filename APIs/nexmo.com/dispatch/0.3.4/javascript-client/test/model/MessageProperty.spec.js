/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DispatchApi);
  }
}(this, function(expect, DispatchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DispatchApi.MessageProperty();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessageProperty', function() {
    it('should create an instance of MessageProperty', function() {
      // uncomment below and update the code to test MessageProperty
      //var instance = new DispatchApi.MessageProperty();
      //expect(instance).to.be.a(DispatchApi.MessageProperty);
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new DispatchApi.MessageProperty();
      //expect(instance).to.be();
    });

    it('should have the property messenger (base name: "messenger")', function() {
      // uncomment below and update the code to test the property messenger
      //var instance = new DispatchApi.MessageProperty();
      //expect(instance).to.be();
    });

    it('should have the property viberServiceMsg (base name: "viber_service_msg")', function() {
      // uncomment below and update the code to test the property viberServiceMsg
      //var instance = new DispatchApi.MessageProperty();
      //expect(instance).to.be();
    });

    it('should have the property whatsapp (base name: "whatsapp")', function() {
      // uncomment below and update the code to test the property whatsapp
      //var instance = new DispatchApi.MessageProperty();
      //expect(instance).to.be();
    });

  });

}));
