/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FinalReportLinks from './FinalReportLinks';
import FinalReportUsage from './FinalReportUsage';

/**
 * The FinalReport model module.
 * @module model/FinalReport
 * @version 0.3.4
 */
class FinalReport {
    /**
     * Constructs a new <code>FinalReport</code>.
     * @alias module:model/FinalReport
     */
    constructor() { 
        
        FinalReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FinalReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FinalReport} obj Optional instance to populate.
     * @return {module:model/FinalReport} The populated <code>FinalReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinalReport();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = FinalReportLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('dispatch_uuid')) {
                obj['dispatch_uuid'] = ApiClient.convertToType(data['dispatch_uuid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = FinalReportUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinalReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinalReport</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          FinalReportLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['dispatch_uuid'] && !(typeof data['dispatch_uuid'] === 'string' || data['dispatch_uuid'] instanceof String)) {
            throw new Error("Expected the field `dispatch_uuid` to be a primitive type in the JSON string but got " + data['dispatch_uuid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          FinalReportUsage.validateJSON(data['usage']);
        }

        return true;
    }


}



/**
 * @member {module:model/FinalReportLinks} _links
 */
FinalReport.prototype['_links'] = undefined;

/**
 * @member {String} dispatch_uuid
 */
FinalReport.prototype['dispatch_uuid'] = undefined;

/**
 * @member {module:model/FinalReport.StatusEnum} status
 */
FinalReport.prototype['status'] = undefined;

/**
 * @member {module:model/FinalReport.TemplateEnum} template
 */
FinalReport.prototype['template'] = undefined;

/**
 * The datetime of when the event occurred.
 * @member {String} timestamp
 */
FinalReport.prototype['timestamp'] = undefined;

/**
 * @member {module:model/FinalReportUsage} usage
 */
FinalReport.prototype['usage'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FinalReport['StatusEnum'] = {

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};


/**
 * Allowed values for the <code>template</code> property.
 * @enum {String}
 * @readonly
 */
FinalReport['TemplateEnum'] = {

    /**
     * value: "failover"
     * @const
     */
    "failover": "failover"
};



export default FinalReport;

