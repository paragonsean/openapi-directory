/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FailoverProperty from './FailoverProperty';
import FromProperty from './FromProperty';
import MessageProperty from './MessageProperty';
import SendMessage from './SendMessage';
import SendWithFailoverMessage from './SendWithFailoverMessage';
import ToProperty from './ToProperty';

/**
 * The CreateWorkflowWorkflowInner model module.
 * @module model/CreateWorkflowWorkflowInner
 * @version 0.3.4
 */
class CreateWorkflowWorkflowInner {
    /**
     * Constructs a new <code>CreateWorkflowWorkflowInner</code>.
     * @alias module:model/CreateWorkflowWorkflowInner
     * @param {(module:model/SendMessage|module:model/SendWithFailoverMessage)} instance The actual instance to initialize CreateWorkflowWorkflowInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SendWithFailoverMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendWithFailoverMessage.validateJSON(instance); // throw an exception if no match
                // create SendWithFailoverMessage from JS object
                this.actualInstance = SendWithFailoverMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendWithFailoverMessage
            errorMessages.push("Failed to construct SendWithFailoverMessage: " + err)
        }

        try {
            if (typeof instance === "SendMessage") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SendMessage.validateJSON(instance); // throw an exception if no match
                // create SendMessage from JS object
                this.actualInstance = SendMessage.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SendMessage
            errorMessages.push("Failed to construct SendMessage: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateWorkflowWorkflowInner` with oneOf schemas SendMessage, SendWithFailoverMessage. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateWorkflowWorkflowInner` with oneOf schemas SendMessage, SendWithFailoverMessage. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateWorkflowWorkflowInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateWorkflowWorkflowInner} obj Optional instance to populate.
     * @return {module:model/CreateWorkflowWorkflowInner} The populated <code>CreateWorkflowWorkflowInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateWorkflowWorkflowInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>SendMessage</code>, <code>SendWithFailoverMessage</code>.
     * @return {(module:model/SendMessage|module:model/SendWithFailoverMessage)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SendMessage</code>, <code>SendWithFailoverMessage</code>.
     * @param {(module:model/SendMessage|module:model/SendWithFailoverMessage)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateWorkflowWorkflowInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateWorkflowWorkflowInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateWorkflowWorkflowInner} An instance of CreateWorkflowWorkflowInner.
     */
    static fromJSON = function(json_string){
        return CreateWorkflowWorkflowInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/FailoverProperty} failover
 */
CreateWorkflowWorkflowInner.prototype['failover'] = undefined;

/**
 * @member {module:model/FromProperty} from
 */
CreateWorkflowWorkflowInner.prototype['from'] = undefined;

/**
 * @member {module:model/MessageProperty} message
 */
CreateWorkflowWorkflowInner.prototype['message'] = undefined;

/**
 * @member {module:model/ToProperty} to
 */
CreateWorkflowWorkflowInner.prototype['to'] = undefined;


CreateWorkflowWorkflowInner.OneOf = ["SendMessage", "SendWithFailoverMessage"];

export default CreateWorkflowWorkflowInner;

