/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AudioProperty from './model/AudioProperty';
import CreateWorkflow from './model/CreateWorkflow';
import CreateWorkflowWorkflowInner from './model/CreateWorkflowWorkflowInner';
import Error from './model/Error';
import ErrorInvalidParameters from './model/ErrorInvalidParameters';
import FailoverProperty from './model/FailoverProperty';
import FileProperty from './model/FileProperty';
import FinalReport from './model/FinalReport';
import FinalReportLinks from './model/FinalReportLinks';
import FinalReportLinksMessagesInner from './model/FinalReportLinksMessagesInner';
import FinalReportUsage from './model/FinalReportUsage';
import FromProperty from './model/FromProperty';
import ImageProperty from './model/ImageProperty';
import MessageProperty from './model/MessageProperty';
import MessagePropertyContent from './model/MessagePropertyContent';
import MessagePropertyMessenger from './model/MessagePropertyMessenger';
import MessagePropertyViberServiceMsg from './model/MessagePropertyViberServiceMsg';
import MessagePropertyWhatsapp from './model/MessagePropertyWhatsapp';
import MessageStatus from './model/MessageStatus';
import MessageStatusError from './model/MessageStatusError';
import MessageStatusLinks from './model/MessageStatusLinks';
import MessageStatusLinksWorkflow from './model/MessageStatusLinksWorkflow';
import MessageStatusUsage from './model/MessageStatusUsage';
import Response from './model/Response';
import SendMessage from './model/SendMessage';
import SendWithFailoverMessage from './model/SendWithFailoverMessage';
import TemplateProperty from './model/TemplateProperty';
import TemplatePropertyParametersInner from './model/TemplatePropertyParametersInner';
import ToProperty from './model/ToProperty';
import VideoProperty from './model/VideoProperty';
import DefaultApi from './api/DefaultApi';


/**
* The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DispatchApi = require('index'); // See note below*.
* var xxxSvc = new DispatchApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DispatchApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DispatchApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DispatchApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.3.4
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AudioProperty model constructor.
     * @property {module:model/AudioProperty}
     */
    AudioProperty,

    /**
     * The CreateWorkflow model constructor.
     * @property {module:model/CreateWorkflow}
     */
    CreateWorkflow,

    /**
     * The CreateWorkflowWorkflowInner model constructor.
     * @property {module:model/CreateWorkflowWorkflowInner}
     */
    CreateWorkflowWorkflowInner,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorInvalidParameters model constructor.
     * @property {module:model/ErrorInvalidParameters}
     */
    ErrorInvalidParameters,

    /**
     * The FailoverProperty model constructor.
     * @property {module:model/FailoverProperty}
     */
    FailoverProperty,

    /**
     * The FileProperty model constructor.
     * @property {module:model/FileProperty}
     */
    FileProperty,

    /**
     * The FinalReport model constructor.
     * @property {module:model/FinalReport}
     */
    FinalReport,

    /**
     * The FinalReportLinks model constructor.
     * @property {module:model/FinalReportLinks}
     */
    FinalReportLinks,

    /**
     * The FinalReportLinksMessagesInner model constructor.
     * @property {module:model/FinalReportLinksMessagesInner}
     */
    FinalReportLinksMessagesInner,

    /**
     * The FinalReportUsage model constructor.
     * @property {module:model/FinalReportUsage}
     */
    FinalReportUsage,

    /**
     * The FromProperty model constructor.
     * @property {module:model/FromProperty}
     */
    FromProperty,

    /**
     * The ImageProperty model constructor.
     * @property {module:model/ImageProperty}
     */
    ImageProperty,

    /**
     * The MessageProperty model constructor.
     * @property {module:model/MessageProperty}
     */
    MessageProperty,

    /**
     * The MessagePropertyContent model constructor.
     * @property {module:model/MessagePropertyContent}
     */
    MessagePropertyContent,

    /**
     * The MessagePropertyMessenger model constructor.
     * @property {module:model/MessagePropertyMessenger}
     */
    MessagePropertyMessenger,

    /**
     * The MessagePropertyViberServiceMsg model constructor.
     * @property {module:model/MessagePropertyViberServiceMsg}
     */
    MessagePropertyViberServiceMsg,

    /**
     * The MessagePropertyWhatsapp model constructor.
     * @property {module:model/MessagePropertyWhatsapp}
     */
    MessagePropertyWhatsapp,

    /**
     * The MessageStatus model constructor.
     * @property {module:model/MessageStatus}
     */
    MessageStatus,

    /**
     * The MessageStatusError model constructor.
     * @property {module:model/MessageStatusError}
     */
    MessageStatusError,

    /**
     * The MessageStatusLinks model constructor.
     * @property {module:model/MessageStatusLinks}
     */
    MessageStatusLinks,

    /**
     * The MessageStatusLinksWorkflow model constructor.
     * @property {module:model/MessageStatusLinksWorkflow}
     */
    MessageStatusLinksWorkflow,

    /**
     * The MessageStatusUsage model constructor.
     * @property {module:model/MessageStatusUsage}
     */
    MessageStatusUsage,

    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response,

    /**
     * The SendMessage model constructor.
     * @property {module:model/SendMessage}
     */
    SendMessage,

    /**
     * The SendWithFailoverMessage model constructor.
     * @property {module:model/SendWithFailoverMessage}
     */
    SendWithFailoverMessage,

    /**
     * The TemplateProperty model constructor.
     * @property {module:model/TemplateProperty}
     */
    TemplateProperty,

    /**
     * The TemplatePropertyParametersInner model constructor.
     * @property {module:model/TemplatePropertyParametersInner}
     */
    TemplatePropertyParametersInner,

    /**
     * The ToProperty model constructor.
     * @property {module:model/ToProperty}
     */
    ToProperty,

    /**
     * The VideoProperty model constructor.
     * @property {module:model/VideoProperty}
     */
    VideoProperty,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
