/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MessagePropertyContent;
import org.openapitools.client.model.MessagePropertyMessenger;
import org.openapitools.client.model.MessagePropertyViberServiceMsg;
import org.openapitools.client.model.MessagePropertyWhatsapp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessageProperty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageProperty {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private MessagePropertyContent content;

  public static final String SERIALIZED_NAME_MESSENGER = "messenger";
  @SerializedName(SERIALIZED_NAME_MESSENGER)
  private MessagePropertyMessenger messenger;

  public static final String SERIALIZED_NAME_VIBER_SERVICE_MSG = "viber_service_msg";
  @SerializedName(SERIALIZED_NAME_VIBER_SERVICE_MSG)
  private MessagePropertyViberServiceMsg viberServiceMsg;

  public static final String SERIALIZED_NAME_WHATSAPP = "whatsapp";
  @SerializedName(SERIALIZED_NAME_WHATSAPP)
  private MessagePropertyWhatsapp whatsapp;

  public MessageProperty() {
  }

  public MessageProperty content(MessagePropertyContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public MessagePropertyContent getContent() {
    return content;
  }

  public void setContent(MessagePropertyContent content) {
    this.content = content;
  }


  public MessageProperty messenger(MessagePropertyMessenger messenger) {
    this.messenger = messenger;
    return this;
  }

  /**
   * Get messenger
   * @return messenger
   */
  @javax.annotation.Nullable
  public MessagePropertyMessenger getMessenger() {
    return messenger;
  }

  public void setMessenger(MessagePropertyMessenger messenger) {
    this.messenger = messenger;
  }


  public MessageProperty viberServiceMsg(MessagePropertyViberServiceMsg viberServiceMsg) {
    this.viberServiceMsg = viberServiceMsg;
    return this;
  }

  /**
   * Get viberServiceMsg
   * @return viberServiceMsg
   */
  @javax.annotation.Nullable
  public MessagePropertyViberServiceMsg getViberServiceMsg() {
    return viberServiceMsg;
  }

  public void setViberServiceMsg(MessagePropertyViberServiceMsg viberServiceMsg) {
    this.viberServiceMsg = viberServiceMsg;
  }


  public MessageProperty whatsapp(MessagePropertyWhatsapp whatsapp) {
    this.whatsapp = whatsapp;
    return this;
  }

  /**
   * Get whatsapp
   * @return whatsapp
   */
  @javax.annotation.Nullable
  public MessagePropertyWhatsapp getWhatsapp() {
    return whatsapp;
  }

  public void setWhatsapp(MessagePropertyWhatsapp whatsapp) {
    this.whatsapp = whatsapp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageProperty messageProperty = (MessageProperty) o;
    return Objects.equals(this.content, messageProperty.content) &&
        Objects.equals(this.messenger, messageProperty.messenger) &&
        Objects.equals(this.viberServiceMsg, messageProperty.viberServiceMsg) &&
        Objects.equals(this.whatsapp, messageProperty.whatsapp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, messenger, viberServiceMsg, whatsapp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageProperty {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    messenger: ").append(toIndentedString(messenger)).append("\n");
    sb.append("    viberServiceMsg: ").append(toIndentedString(viberServiceMsg)).append("\n");
    sb.append("    whatsapp: ").append(toIndentedString(whatsapp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("messenger");
    openapiFields.add("viber_service_msg");
    openapiFields.add("whatsapp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageProperty is not found in the empty JSON string", MessageProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageProperty.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `content`
      MessagePropertyContent.validateJsonElement(jsonObj.get("content"));
      // validate the optional field `messenger`
      if (jsonObj.get("messenger") != null && !jsonObj.get("messenger").isJsonNull()) {
        MessagePropertyMessenger.validateJsonElement(jsonObj.get("messenger"));
      }
      // validate the optional field `viber_service_msg`
      if (jsonObj.get("viber_service_msg") != null && !jsonObj.get("viber_service_msg").isJsonNull()) {
        MessagePropertyViberServiceMsg.validateJsonElement(jsonObj.get("viber_service_msg"));
      }
      // validate the optional field `whatsapp`
      if (jsonObj.get("whatsapp") != null && !jsonObj.get("whatsapp").isJsonNull()) {
        MessagePropertyWhatsapp.validateJsonElement(jsonObj.get("whatsapp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageProperty>() {
           @Override
           public void write(JsonWriter out, MessageProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageProperty
   * @throws IOException if the JSON string is invalid with respect to MessageProperty
   */
  public static MessageProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageProperty.class);
  }

  /**
   * Convert an instance of MessageProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

