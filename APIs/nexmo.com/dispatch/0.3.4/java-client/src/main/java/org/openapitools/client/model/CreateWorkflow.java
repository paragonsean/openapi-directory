/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateWorkflowWorkflowInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorkflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkflow {
  /**
   * The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover
   */
  @JsonAdapter(TemplateEnum.Adapter.class)
  public enum TemplateEnum {
    FAILOVER("failover");

    private String value;

    TemplateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateEnum fromValue(String value) {
      for (TemplateEnum b : TemplateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemplateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private TemplateEnum template;

  public static final String SERIALIZED_NAME_WORKFLOW = "workflow";
  @SerializedName(SERIALIZED_NAME_WORKFLOW)
  private List<CreateWorkflowWorkflowInner> workflow = new ArrayList<>();

  public CreateWorkflow() {
  }

  public CreateWorkflow template(TemplateEnum template) {
    this.template = template;
    return this;
  }

  /**
   * The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateEnum getTemplate() {
    return template;
  }

  public void setTemplate(TemplateEnum template) {
    this.template = template;
  }


  public CreateWorkflow workflow(List<CreateWorkflowWorkflowInner> workflow) {
    this.workflow = workflow;
    return this;
  }

  public CreateWorkflow addWorkflowItem(CreateWorkflowWorkflowInner workflowItem) {
    if (this.workflow == null) {
      this.workflow = new ArrayList<>();
    }
    this.workflow.add(workflowItem);
    return this;
  }

  /**
   * Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.
   * @return workflow
   */
  @javax.annotation.Nullable
  public List<CreateWorkflowWorkflowInner> getWorkflow() {
    return workflow;
  }

  public void setWorkflow(List<CreateWorkflowWorkflowInner> workflow) {
    this.workflow = workflow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkflow createWorkflow = (CreateWorkflow) o;
    return Objects.equals(this.template, createWorkflow.template) &&
        Objects.equals(this.workflow, createWorkflow.workflow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, workflow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkflow {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    workflow: ").append(toIndentedString(workflow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("template");
    openapiFields.add("workflow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorkflow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorkflow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkflow is not found in the empty JSON string", CreateWorkflow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkflow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkflow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateEnum.validateJsonElement(jsonObj.get("template"));
      }
      if (jsonObj.get("workflow") != null && !jsonObj.get("workflow").isJsonNull()) {
        JsonArray jsonArrayworkflow = jsonObj.getAsJsonArray("workflow");
        if (jsonArrayworkflow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workflow").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workflow` to be an array in the JSON string but got `%s`", jsonObj.get("workflow").toString()));
          }

          // validate the optional field `workflow` (array)
          for (int i = 0; i < jsonArrayworkflow.size(); i++) {
            CreateWorkflowWorkflowInner.validateJsonElement(jsonArrayworkflow.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkflow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkflow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkflow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkflow.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkflow>() {
           @Override
           public void write(JsonWriter out, CreateWorkflow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkflow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorkflow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorkflow
   * @throws IOException if the JSON string is invalid with respect to CreateWorkflow
   */
  public static CreateWorkflow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkflow.class);
  }

  /**
   * Convert an instance of CreateWorkflow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

