/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailoverProperty;
import org.openapitools.client.model.FromProperty;
import org.openapitools.client.model.MessageProperty;
import org.openapitools.client.model.SendMessage;
import org.openapitools.client.model.SendWithFailoverMessage;
import org.openapitools.client.model.ToProperty;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkflowWorkflowInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateWorkflowWorkflowInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateWorkflowWorkflowInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateWorkflowWorkflowInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SendWithFailoverMessage> adapterSendWithFailoverMessage = gson.getDelegateAdapter(this, TypeToken.get(SendWithFailoverMessage.class));
            final TypeAdapter<SendMessage> adapterSendMessage = gson.getDelegateAdapter(this, TypeToken.get(SendMessage.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateWorkflowWorkflowInner>() {
                @Override
                public void write(JsonWriter out, CreateWorkflowWorkflowInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SendWithFailoverMessage`
                    if (value.getActualInstance() instanceof SendWithFailoverMessage) {
                        JsonElement element = adapterSendWithFailoverMessage.toJsonTree((SendWithFailoverMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SendMessage`
                    if (value.getActualInstance() instanceof SendMessage) {
                        JsonElement element = adapterSendMessage.toJsonTree((SendMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: SendMessage, SendWithFailoverMessage");
                }

                @Override
                public CreateWorkflowWorkflowInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SendWithFailoverMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendWithFailoverMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendWithFailoverMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendWithFailoverMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendWithFailoverMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendWithFailoverMessage'", e);
                    }
                    // deserialize SendMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SendMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSendMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SendMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SendMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SendMessage'", e);
                    }

                    if (match == 1) {
                        CreateWorkflowWorkflowInner ret = new CreateWorkflowWorkflowInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateWorkflowWorkflowInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateWorkflowWorkflowInner() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateWorkflowWorkflowInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SendWithFailoverMessage", SendWithFailoverMessage.class);
        schemas.put("SendMessage", SendMessage.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateWorkflowWorkflowInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * SendMessage, SendWithFailoverMessage
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SendWithFailoverMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SendMessage) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be SendMessage, SendWithFailoverMessage");
    }

    /**
     * Get the actual instance, which can be the following:
     * SendMessage, SendWithFailoverMessage
     *
     * @return The actual instance (SendMessage, SendWithFailoverMessage)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SendWithFailoverMessage`. If the actual instance is not `SendWithFailoverMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendWithFailoverMessage`
     * @throws ClassCastException if the instance is not `SendWithFailoverMessage`
     */
    public SendWithFailoverMessage getSendWithFailoverMessage() throws ClassCastException {
        return (SendWithFailoverMessage)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SendMessage`. If the actual instance is not `SendMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SendMessage`
     * @throws ClassCastException if the instance is not `SendMessage`
     */
    public SendMessage getSendMessage() throws ClassCastException {
        return (SendMessage)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateWorkflowWorkflowInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SendWithFailoverMessage
        try {
            SendWithFailoverMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendWithFailoverMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SendMessage
        try {
            SendMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SendMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CreateWorkflowWorkflowInner with oneOf schemas: SendMessage, SendWithFailoverMessage. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CreateWorkflowWorkflowInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateWorkflowWorkflowInner
     * @throws IOException if the JSON string is invalid with respect to CreateWorkflowWorkflowInner
     */
    public static CreateWorkflowWorkflowInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateWorkflowWorkflowInner.class);
    }

    /**
     * Convert an instance of CreateWorkflowWorkflowInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

