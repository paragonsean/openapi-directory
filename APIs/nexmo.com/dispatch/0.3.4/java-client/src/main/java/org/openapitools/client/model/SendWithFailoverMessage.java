/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailoverProperty;
import org.openapitools.client.model.FromProperty;
import org.openapitools.client.model.MessageProperty;
import org.openapitools.client.model.ToProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Send With Failover Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendWithFailoverMessage {
  public static final String SERIALIZED_NAME_FAILOVER = "failover";
  @SerializedName(SERIALIZED_NAME_FAILOVER)
  private FailoverProperty failover;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private FromProperty from;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageProperty message;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private ToProperty to;

  public SendWithFailoverMessage() {
  }

  public SendWithFailoverMessage failover(FailoverProperty failover) {
    this.failover = failover;
    return this;
  }

  /**
   * Get failover
   * @return failover
   */
  @javax.annotation.Nullable
  public FailoverProperty getFailover() {
    return failover;
  }

  public void setFailover(FailoverProperty failover) {
    this.failover = failover;
  }


  public SendWithFailoverMessage from(FromProperty from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public FromProperty getFrom() {
    return from;
  }

  public void setFrom(FromProperty from) {
    this.from = from;
  }


  public SendWithFailoverMessage message(MessageProperty message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public MessageProperty getMessage() {
    return message;
  }

  public void setMessage(MessageProperty message) {
    this.message = message;
  }


  public SendWithFailoverMessage to(ToProperty to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public ToProperty getTo() {
    return to;
  }

  public void setTo(ToProperty to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendWithFailoverMessage sendWithFailoverMessage = (SendWithFailoverMessage) o;
    return Objects.equals(this.failover, sendWithFailoverMessage.failover) &&
        Objects.equals(this.from, sendWithFailoverMessage.from) &&
        Objects.equals(this.message, sendWithFailoverMessage.message) &&
        Objects.equals(this.to, sendWithFailoverMessage.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failover, from, message, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendWithFailoverMessage {\n");
    sb.append("    failover: ").append(toIndentedString(failover)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failover");
    openapiFields.add("from");
    openapiFields.add("message");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendWithFailoverMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendWithFailoverMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendWithFailoverMessage is not found in the empty JSON string", SendWithFailoverMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendWithFailoverMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendWithFailoverMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendWithFailoverMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failover`
      if (jsonObj.get("failover") != null && !jsonObj.get("failover").isJsonNull()) {
        FailoverProperty.validateJsonElement(jsonObj.get("failover"));
      }
      // validate the required field `from`
      FromProperty.validateJsonElement(jsonObj.get("from"));
      // validate the required field `message`
      MessageProperty.validateJsonElement(jsonObj.get("message"));
      // validate the required field `to`
      ToProperty.validateJsonElement(jsonObj.get("to"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendWithFailoverMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendWithFailoverMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendWithFailoverMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendWithFailoverMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<SendWithFailoverMessage>() {
           @Override
           public void write(JsonWriter out, SendWithFailoverMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendWithFailoverMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendWithFailoverMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendWithFailoverMessage
   * @throws IOException if the JSON string is invalid with respect to SendWithFailoverMessage
   */
  public static SendWithFailoverMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendWithFailoverMessage.class);
  }

  /**
   * Convert an instance of SendWithFailoverMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

