/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioProperty;
import org.openapitools.client.model.FileProperty;
import org.openapitools.client.model.ImageProperty;
import org.openapitools.client.model.TemplateProperty;
import org.openapitools.client.model.VideoProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagePropertyContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagePropertyContent {
  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private AudioProperty audio;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private FileProperty _file;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageProperty image;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private TemplateProperty template;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * The type of message that you are sending.  **Messenger**: supports &#x60;text&#x60;, &#x60;image&#x60;, &#x60;audio&#x60;, &#x60;video&#x60; and &#x60;file&#x60;.  **Viber Business Messages**: supports &#x60;image&#x60; and &#x60;text&#x60;.  **WhatsApp**: supports &#x60;template&#x60;, &#x60;text&#x60;, &#x60;image&#x60;, &#x60;audio&#x60;, &#x60;video&#x60; and &#x60;file&#x60;.  **SMS**: supports &#x60;text&#x60;. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text"),
    
    IMAGE("image"),
    
    AUDIO("audio"),
    
    VIDEO("video"),
    
    FILE("file"),
    
    TEMPLATE("template"),
    
    CUSTOM("custom");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private VideoProperty video;

  public MessagePropertyContent() {
  }

  public MessagePropertyContent audio(AudioProperty audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nullable
  public AudioProperty getAudio() {
    return audio;
  }

  public void setAudio(AudioProperty audio) {
    this.audio = audio;
  }


  public MessagePropertyContent _file(FileProperty _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public FileProperty getFile() {
    return _file;
  }

  public void setFile(FileProperty _file) {
    this._file = _file;
  }


  public MessagePropertyContent image(ImageProperty image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ImageProperty getImage() {
    return image;
  }

  public void setImage(ImageProperty image) {
    this.image = image;
  }


  public MessagePropertyContent template(TemplateProperty template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateProperty getTemplate() {
    return template;
  }

  public void setTemplate(TemplateProperty template) {
    this.template = template;
  }


  public MessagePropertyContent text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text of the message.  **Messenger**: Is limited to 640 characters  **SMS** or **Viber**: Is 1000 characters  **WhatsApp**: is 4096 characters 
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public MessagePropertyContent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of message that you are sending.  **Messenger**: supports &#x60;text&#x60;, &#x60;image&#x60;, &#x60;audio&#x60;, &#x60;video&#x60; and &#x60;file&#x60;.  **Viber Business Messages**: supports &#x60;image&#x60; and &#x60;text&#x60;.  **WhatsApp**: supports &#x60;template&#x60;, &#x60;text&#x60;, &#x60;image&#x60;, &#x60;audio&#x60;, &#x60;video&#x60; and &#x60;file&#x60;.  **SMS**: supports &#x60;text&#x60;. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MessagePropertyContent video(VideoProperty video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public VideoProperty getVideo() {
    return video;
  }

  public void setVideo(VideoProperty video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePropertyContent messagePropertyContent = (MessagePropertyContent) o;
    return Objects.equals(this.audio, messagePropertyContent.audio) &&
        Objects.equals(this._file, messagePropertyContent._file) &&
        Objects.equals(this.image, messagePropertyContent.image) &&
        Objects.equals(this.template, messagePropertyContent.template) &&
        Objects.equals(this.text, messagePropertyContent.text) &&
        Objects.equals(this.type, messagePropertyContent.type) &&
        Objects.equals(this.video, messagePropertyContent.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, _file, image, template, text, type, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePropertyContent {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio");
    openapiFields.add("file");
    openapiFields.add("image");
    openapiFields.add("template");
    openapiFields.add("text");
    openapiFields.add("type");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagePropertyContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagePropertyContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagePropertyContent is not found in the empty JSON string", MessagePropertyContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagePropertyContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagePropertyContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessagePropertyContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audio`
      if (jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) {
        AudioProperty.validateJsonElement(jsonObj.get("audio"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        FileProperty.validateJsonElement(jsonObj.get("file"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ImageProperty.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateProperty.validateJsonElement(jsonObj.get("template"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        VideoProperty.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagePropertyContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagePropertyContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagePropertyContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagePropertyContent.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagePropertyContent>() {
           @Override
           public void write(JsonWriter out, MessagePropertyContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagePropertyContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagePropertyContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagePropertyContent
   * @throws IOException if the JSON string is invalid with respect to MessagePropertyContent
   */
  public static MessagePropertyContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagePropertyContent.class);
  }

  /**
   * Convert an instance of MessagePropertyContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

