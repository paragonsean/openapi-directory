/*
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Please note that last message does not have failover attribute inside it. All other messages must contain a failover attribute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:22.529563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverProperty {
  /**
   * Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.
   */
  @JsonAdapter(ConditionStatusEnum.Adapter.class)
  public enum ConditionStatusEnum {
    DELIVERED("delivered"),
    
    READ("read");

    private String value;

    ConditionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionStatusEnum fromValue(String value) {
      for (ConditionStatusEnum b : ConditionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITION_STATUS = "condition_status";
  @SerializedName(SERIALIZED_NAME_CONDITION_STATUS)
  private ConditionStatusEnum conditionStatus;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiry_time";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private Integer expiryTime;

  public FailoverProperty() {
  }

  public FailoverProperty conditionStatus(ConditionStatusEnum conditionStatus) {
    this.conditionStatus = conditionStatus;
    return this;
  }

  /**
   * Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.
   * @return conditionStatus
   */
  @javax.annotation.Nullable
  public ConditionStatusEnum getConditionStatus() {
    return conditionStatus;
  }

  public void setConditionStatus(ConditionStatusEnum conditionStatus) {
    this.conditionStatus = conditionStatus;
  }


  public FailoverProperty expiryTime(Integer expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * In seconds. Minimum value is 15 and maximum value is 86,400 seconds (1 day).
   * minimum: 15
   * maximum: 86400
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public Integer getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(Integer expiryTime) {
    this.expiryTime = expiryTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverProperty failoverProperty = (FailoverProperty) o;
    return Objects.equals(this.conditionStatus, failoverProperty.conditionStatus) &&
        Objects.equals(this.expiryTime, failoverProperty.expiryTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionStatus, expiryTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverProperty {\n");
    sb.append("    conditionStatus: ").append(toIndentedString(conditionStatus)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition_status");
    openapiFields.add("expiry_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverProperty is not found in the empty JSON string", FailoverProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("condition_status") != null && !jsonObj.get("condition_status").isJsonNull()) && !jsonObj.get("condition_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_status").toString()));
      }
      // validate the optional field `condition_status`
      if (jsonObj.get("condition_status") != null && !jsonObj.get("condition_status").isJsonNull()) {
        ConditionStatusEnum.validateJsonElement(jsonObj.get("condition_status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverProperty>() {
           @Override
           public void write(JsonWriter out, FailoverProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverProperty
   * @throws IOException if the JSON string is invalid with respect to FailoverProperty
   */
  public static FailoverProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverProperty.class);
  }

  /**
   * Convert an instance of FailoverProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

