/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateProperty::OAITemplateProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateProperty::OAITemplateProperty() {
    this->initializeModel();
}

OAITemplateProperty::~OAITemplateProperty() {}

void OAITemplateProperty::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAITemplateProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateProperty::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAITemplateProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAITemplateProperty::getName() const {
    return m_name;
}
void OAITemplateProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateProperty::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITemplateProperty_parameters_inner> OAITemplateProperty::getParameters() const {
    return m_parameters;
}
void OAITemplateProperty::setParameters(const QList<OAITemplateProperty_parameters_inner> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITemplateProperty::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITemplateProperty::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAITemplateProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
