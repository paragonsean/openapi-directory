/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverProperty::OAIFailoverProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverProperty::OAIFailoverProperty() {
    this->initializeModel();
}

OAIFailoverProperty::~OAIFailoverProperty() {}

void OAIFailoverProperty::initializeModel() {

    m_condition_status_isSet = false;
    m_condition_status_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;
}

void OAIFailoverProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverProperty::fromJsonObject(QJsonObject json) {

    m_condition_status_isValid = ::OpenAPI::fromJsonValue(m_condition_status, json[QString("condition_status")]);
    m_condition_status_isSet = !json[QString("condition_status")].isNull() && m_condition_status_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiry_time")]);
    m_expiry_time_isSet = !json[QString("expiry_time")].isNull() && m_expiry_time_isValid;
}

QString OAIFailoverProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_status_isSet) {
        obj.insert(QString("condition_status"), ::OpenAPI::toJsonValue(m_condition_status));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiry_time"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    return obj;
}

QString OAIFailoverProperty::getConditionStatus() const {
    return m_condition_status;
}
void OAIFailoverProperty::setConditionStatus(const QString &condition_status) {
    m_condition_status = condition_status;
    m_condition_status_isSet = true;
}

bool OAIFailoverProperty::is_condition_status_Set() const{
    return m_condition_status_isSet;
}

bool OAIFailoverProperty::is_condition_status_Valid() const{
    return m_condition_status_isValid;
}

qint32 OAIFailoverProperty::getExpiryTime() const {
    return m_expiry_time;
}
void OAIFailoverProperty::setExpiryTime(const qint32 &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIFailoverProperty::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIFailoverProperty::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

bool OAIFailoverProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
