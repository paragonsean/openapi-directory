/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToProperty::OAIToProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToProperty::OAIToProperty() {
    this->initializeModel();
}

OAIToProperty::~OAIToProperty() {}

void OAIToProperty::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIToProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToProperty::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIToProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIToProperty::getId() const {
    return m_id;
}
void OAIToProperty::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIToProperty::is_id_Set() const{
    return m_id_isSet;
}

bool OAIToProperty::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIToProperty::getNumber() const {
    return m_number;
}
void OAIToProperty::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIToProperty::is_number_Set() const{
    return m_number_isSet;
}

bool OAIToProperty::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIToProperty::getType() const {
    return m_type;
}
void OAIToProperty::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIToProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIToProperty::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIToProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
