/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateProperty_parameters_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateProperty_parameters_inner::OAITemplateProperty_parameters_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateProperty_parameters_inner::OAITemplateProperty_parameters_inner() {
    this->initializeModel();
}

OAITemplateProperty_parameters_inner::~OAITemplateProperty_parameters_inner() {}

void OAITemplateProperty_parameters_inner::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;
}

void OAITemplateProperty_parameters_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateProperty_parameters_inner::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;
}

QString OAITemplateProperty_parameters_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateProperty_parameters_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    return obj;
}

QString OAITemplateProperty_parameters_inner::getRDefault() const {
    return m_r_default;
}
void OAITemplateProperty_parameters_inner::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAITemplateProperty_parameters_inner::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAITemplateProperty_parameters_inner::is_r_default_Valid() const{
    return m_r_default_isValid;
}

bool OAITemplateProperty_parameters_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateProperty_parameters_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
