/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatus__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatus__links::OAIMessageStatus__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatus__links::OAIMessageStatus__links() {
    this->initializeModel();
}

OAIMessageStatus__links::~OAIMessageStatus__links() {}

void OAIMessageStatus__links::initializeModel() {

    m_workflow_isSet = false;
    m_workflow_isValid = false;
}

void OAIMessageStatus__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatus__links::fromJsonObject(QJsonObject json) {

    m_workflow_isValid = ::OpenAPI::fromJsonValue(m_workflow, json[QString("workflow")]);
    m_workflow_isSet = !json[QString("workflow")].isNull() && m_workflow_isValid;
}

QString OAIMessageStatus__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatus__links::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow.isSet()) {
        obj.insert(QString("workflow"), ::OpenAPI::toJsonValue(m_workflow));
    }
    return obj;
}

OAIMessageStatus__links_workflow OAIMessageStatus__links::getWorkflow() const {
    return m_workflow;
}
void OAIMessageStatus__links::setWorkflow(const OAIMessageStatus__links_workflow &workflow) {
    m_workflow = workflow;
    m_workflow_isSet = true;
}

bool OAIMessageStatus__links::is_workflow_Set() const{
    return m_workflow_isSet;
}

bool OAIMessageStatus__links::is_workflow_Valid() const{
    return m_workflow_isValid;
}

bool OAIMessageStatus__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatus__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
