/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFinalReport__links_messages_inner.h
 *
 * 
 */

#ifndef OAIFinalReport__links_messages_inner_H
#define OAIFinalReport__links_messages_inner_H

#include <QJsonObject>

#include "OAIMessageStatus_usage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageStatus_usage;

class OAIFinalReport__links_messages_inner : public OAIObject {
public:
    OAIFinalReport__links_messages_inner();
    OAIFinalReport__links_messages_inner(QString json);
    ~OAIFinalReport__links_messages_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    QString getMessageUuid() const;
    void setMessageUuid(const QString &message_uuid);
    bool is_message_uuid_Set() const;
    bool is_message_uuid_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIMessageStatus_usage getUsage() const;
    void setUsage(const OAIMessageStatus_usage &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    QString m_message_uuid;
    bool m_message_uuid_isSet;
    bool m_message_uuid_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIMessageStatus_usage m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFinalReport__links_messages_inner)

#endif // OAIFinalReport__links_messages_inner_H
