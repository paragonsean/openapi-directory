/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageProperty_whatsapp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageProperty_whatsapp::OAIMessageProperty_whatsapp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageProperty_whatsapp::OAIMessageProperty_whatsapp() {
    this->initializeModel();
}

OAIMessageProperty_whatsapp::~OAIMessageProperty_whatsapp() {}

void OAIMessageProperty_whatsapp::initializeModel() {

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIMessageProperty_whatsapp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageProperty_whatsapp::fromJsonObject(QJsonObject json) {

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIMessageProperty_whatsapp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageProperty_whatsapp::asJsonObject() const {
    QJsonObject obj;
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIMessageProperty_whatsapp::getLocale() const {
    return m_locale;
}
void OAIMessageProperty_whatsapp::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIMessageProperty_whatsapp::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIMessageProperty_whatsapp::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIMessageProperty_whatsapp::getPolicy() const {
    return m_policy;
}
void OAIMessageProperty_whatsapp::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIMessageProperty_whatsapp::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIMessageProperty_whatsapp::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIMessageProperty_whatsapp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageProperty_whatsapp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
