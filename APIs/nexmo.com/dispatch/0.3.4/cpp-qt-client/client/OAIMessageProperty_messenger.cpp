/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageProperty_messenger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageProperty_messenger::OAIMessageProperty_messenger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageProperty_messenger::OAIMessageProperty_messenger() {
    this->initializeModel();
}

OAIMessageProperty_messenger::~OAIMessageProperty_messenger() {}

void OAIMessageProperty_messenger::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIMessageProperty_messenger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageProperty_messenger::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIMessageProperty_messenger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageProperty_messenger::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAIMessageProperty_messenger::getCategory() const {
    return m_category;
}
void OAIMessageProperty_messenger::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMessageProperty_messenger::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMessageProperty_messenger::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIMessageProperty_messenger::getTag() const {
    return m_tag;
}
void OAIMessageProperty_messenger::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIMessageProperty_messenger::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIMessageProperty_messenger::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIMessageProperty_messenger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageProperty_messenger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
