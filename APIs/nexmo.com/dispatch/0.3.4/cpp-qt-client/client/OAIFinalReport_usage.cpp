/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinalReport_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinalReport_usage::OAIFinalReport_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinalReport_usage::OAIFinalReport_usage() {
    this->initializeModel();
}

OAIFinalReport_usage::~OAIFinalReport_usage() {}

void OAIFinalReport_usage::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIFinalReport_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinalReport_usage::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIFinalReport_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinalReport_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAIFinalReport_usage::getCurrency() const {
    return m_currency;
}
void OAIFinalReport_usage::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIFinalReport_usage::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIFinalReport_usage::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIFinalReport_usage::getPrice() const {
    return m_price;
}
void OAIFinalReport_usage::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFinalReport_usage::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFinalReport_usage::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIFinalReport_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinalReport_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
