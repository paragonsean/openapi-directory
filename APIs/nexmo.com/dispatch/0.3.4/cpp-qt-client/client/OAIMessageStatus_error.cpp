/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatus_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatus_error::OAIMessageStatus_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatus_error::OAIMessageStatus_error() {
    this->initializeModel();
}

OAIMessageStatus_error::~OAIMessageStatus_error() {}

void OAIMessageStatus_error::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIMessageStatus_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatus_error::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIMessageStatus_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatus_error::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

qint32 OAIMessageStatus_error::getCode() const {
    return m_code;
}
void OAIMessageStatus_error::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMessageStatus_error::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMessageStatus_error::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIMessageStatus_error::getReason() const {
    return m_reason;
}
void OAIMessageStatus_error::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMessageStatus_error::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMessageStatus_error::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIMessageStatus_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatus_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
