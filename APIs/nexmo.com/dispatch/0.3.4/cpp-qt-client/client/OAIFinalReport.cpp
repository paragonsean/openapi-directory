/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinalReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinalReport::OAIFinalReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinalReport::OAIFinalReport() {
    this->initializeModel();
}

OAIFinalReport::~OAIFinalReport() {}

void OAIFinalReport::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_dispatch_uuid_isSet = false;
    m_dispatch_uuid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIFinalReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinalReport::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_dispatch_uuid_isValid = ::OpenAPI::fromJsonValue(m_dispatch_uuid, json[QString("dispatch_uuid")]);
    m_dispatch_uuid_isSet = !json[QString("dispatch_uuid")].isNull() && m_dispatch_uuid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIFinalReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinalReport::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_dispatch_uuid_isSet) {
        obj.insert(QString("dispatch_uuid"), ::OpenAPI::toJsonValue(m_dispatch_uuid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

OAIFinalReport__links OAIFinalReport::getLinks() const {
    return m__links;
}
void OAIFinalReport::setLinks(const OAIFinalReport__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIFinalReport::is__links_Set() const{
    return m__links_isSet;
}

bool OAIFinalReport::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIFinalReport::getDispatchUuid() const {
    return m_dispatch_uuid;
}
void OAIFinalReport::setDispatchUuid(const QString &dispatch_uuid) {
    m_dispatch_uuid = dispatch_uuid;
    m_dispatch_uuid_isSet = true;
}

bool OAIFinalReport::is_dispatch_uuid_Set() const{
    return m_dispatch_uuid_isSet;
}

bool OAIFinalReport::is_dispatch_uuid_Valid() const{
    return m_dispatch_uuid_isValid;
}

QString OAIFinalReport::getStatus() const {
    return m_status;
}
void OAIFinalReport::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFinalReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFinalReport::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFinalReport::getRTemplate() const {
    return m_r_template;
}
void OAIFinalReport::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIFinalReport::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIFinalReport::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIFinalReport::getTimestamp() const {
    return m_timestamp;
}
void OAIFinalReport::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIFinalReport::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIFinalReport::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIFinalReport_usage OAIFinalReport::getUsage() const {
    return m_usage;
}
void OAIFinalReport::setUsage(const OAIFinalReport_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIFinalReport::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIFinalReport::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIFinalReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinalReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
