/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageProperty::OAIImageProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageProperty::OAIImageProperty() {
    this->initializeModel();
}

OAIImageProperty::~OAIImageProperty() {}

void OAIImageProperty::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIImageProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageProperty::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIImageProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIImageProperty::getCaption() const {
    return m_caption;
}
void OAIImageProperty::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIImageProperty::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIImageProperty::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIImageProperty::getUrl() const {
    return m_url;
}
void OAIImageProperty::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageProperty::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageProperty::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIImageProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
