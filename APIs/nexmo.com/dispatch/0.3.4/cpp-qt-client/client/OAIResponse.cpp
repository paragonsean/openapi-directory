/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_dispatch_uuid_isSet = false;
    m_dispatch_uuid_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_dispatch_uuid_isValid = ::OpenAPI::fromJsonValue(m_dispatch_uuid, json[QString("dispatch_uuid")]);
    m_dispatch_uuid_isSet = !json[QString("dispatch_uuid")].isNull() && m_dispatch_uuid_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dispatch_uuid_isSet) {
        obj.insert(QString("dispatch_uuid"), ::OpenAPI::toJsonValue(m_dispatch_uuid));
    }
    return obj;
}

QString OAIResponse::getDispatchUuid() const {
    return m_dispatch_uuid;
}
void OAIResponse::setDispatchUuid(const QString &dispatch_uuid) {
    m_dispatch_uuid = dispatch_uuid;
    m_dispatch_uuid_isSet = true;
}

bool OAIResponse::is_dispatch_uuid_Set() const{
    return m_dispatch_uuid_isSet;
}

bool OAIResponse::is_dispatch_uuid_Valid() const{
    return m_dispatch_uuid_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dispatch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dispatch_uuid_isValid && true;
}

} // namespace OpenAPI
