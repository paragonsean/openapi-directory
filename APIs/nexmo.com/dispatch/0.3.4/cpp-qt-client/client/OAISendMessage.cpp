/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendMessage::OAISendMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendMessage::OAISendMessage() {
    this->initializeModel();
}

OAISendMessage::~OAISendMessage() {}

void OAISendMessage::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISendMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendMessage::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISendMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

OAIFromProperty OAISendMessage::getFrom() const {
    return m_from;
}
void OAISendMessage::setFrom(const OAIFromProperty &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendMessage::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendMessage::is_from_Valid() const{
    return m_from_isValid;
}

OAIMessageProperty OAISendMessage::getMessage() const {
    return m_message;
}
void OAISendMessage::setMessage(const OAIMessageProperty &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISendMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAISendMessage::is_message_Valid() const{
    return m_message_isValid;
}

OAIToProperty OAISendMessage::getTo() const {
    return m_to;
}
void OAISendMessage::setTo(const OAIToProperty &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendMessage::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendMessage::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISendMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_message_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
