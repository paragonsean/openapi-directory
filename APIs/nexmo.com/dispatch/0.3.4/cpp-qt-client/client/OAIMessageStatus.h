/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageStatus.h
 *
 * The callbacks for the message status are the same as defined in the Messaging API. The only difference will be that dispatch_uuid and link will be appended.
 */

#ifndef OAIMessageStatus_H
#define OAIMessageStatus_H

#include <QJsonObject>

#include "OAIFromProperty.h"
#include "OAIMessageStatus__links.h"
#include "OAIMessageStatus_error.h"
#include "OAIMessageStatus_usage.h"
#include "OAIToProperty.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageStatus__links;
class OAIMessageStatus_error;
class OAIFromProperty;
class OAIToProperty;
class OAIMessageStatus_usage;

class OAIMessageStatus : public OAIObject {
public:
    OAIMessageStatus();
    OAIMessageStatus(QString json);
    ~OAIMessageStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMessageStatus__links getLinks() const;
    void setLinks(const OAIMessageStatus__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    OAIMessageStatus_error getError() const;
    void setError(const OAIMessageStatus_error &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    OAIFromProperty getFrom() const;
    void setFrom(const OAIFromProperty &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getMessageUuid() const;
    void setMessageUuid(const QString &message_uuid);
    bool is_message_uuid_Set() const;
    bool is_message_uuid_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIToProperty getTo() const;
    void setTo(const OAIToProperty &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    OAIMessageStatus_usage getUsage() const;
    void setUsage(const OAIMessageStatus_usage &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMessageStatus__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    OAIMessageStatus_error m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    OAIFromProperty m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_message_uuid;
    bool m_message_uuid_isSet;
    bool m_message_uuid_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIToProperty m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    OAIMessageStatus_usage m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageStatus)

#endif // OAIMessageStatus_H
