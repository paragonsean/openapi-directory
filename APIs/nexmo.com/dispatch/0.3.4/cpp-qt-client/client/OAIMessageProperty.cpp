/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageProperty::OAIMessageProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageProperty::OAIMessageProperty() {
    this->initializeModel();
}

OAIMessageProperty::~OAIMessageProperty() {}

void OAIMessageProperty::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_messenger_isSet = false;
    m_messenger_isValid = false;

    m_viber_service_msg_isSet = false;
    m_viber_service_msg_isValid = false;

    m_whatsapp_isSet = false;
    m_whatsapp_isValid = false;
}

void OAIMessageProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageProperty::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_messenger_isValid = ::OpenAPI::fromJsonValue(m_messenger, json[QString("messenger")]);
    m_messenger_isSet = !json[QString("messenger")].isNull() && m_messenger_isValid;

    m_viber_service_msg_isValid = ::OpenAPI::fromJsonValue(m_viber_service_msg, json[QString("viber_service_msg")]);
    m_viber_service_msg_isSet = !json[QString("viber_service_msg")].isNull() && m_viber_service_msg_isValid;

    m_whatsapp_isValid = ::OpenAPI::fromJsonValue(m_whatsapp, json[QString("whatsapp")]);
    m_whatsapp_isSet = !json[QString("whatsapp")].isNull() && m_whatsapp_isValid;
}

QString OAIMessageProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_messenger.isSet()) {
        obj.insert(QString("messenger"), ::OpenAPI::toJsonValue(m_messenger));
    }
    if (m_viber_service_msg.isSet()) {
        obj.insert(QString("viber_service_msg"), ::OpenAPI::toJsonValue(m_viber_service_msg));
    }
    if (m_whatsapp.isSet()) {
        obj.insert(QString("whatsapp"), ::OpenAPI::toJsonValue(m_whatsapp));
    }
    return obj;
}

OAIMessageProperty_content OAIMessageProperty::getContent() const {
    return m_content;
}
void OAIMessageProperty::setContent(const OAIMessageProperty_content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIMessageProperty::is_content_Set() const{
    return m_content_isSet;
}

bool OAIMessageProperty::is_content_Valid() const{
    return m_content_isValid;
}

OAIMessageProperty_messenger OAIMessageProperty::getMessenger() const {
    return m_messenger;
}
void OAIMessageProperty::setMessenger(const OAIMessageProperty_messenger &messenger) {
    m_messenger = messenger;
    m_messenger_isSet = true;
}

bool OAIMessageProperty::is_messenger_Set() const{
    return m_messenger_isSet;
}

bool OAIMessageProperty::is_messenger_Valid() const{
    return m_messenger_isValid;
}

OAIMessageProperty_viber_service_msg OAIMessageProperty::getViberServiceMsg() const {
    return m_viber_service_msg;
}
void OAIMessageProperty::setViberServiceMsg(const OAIMessageProperty_viber_service_msg &viber_service_msg) {
    m_viber_service_msg = viber_service_msg;
    m_viber_service_msg_isSet = true;
}

bool OAIMessageProperty::is_viber_service_msg_Set() const{
    return m_viber_service_msg_isSet;
}

bool OAIMessageProperty::is_viber_service_msg_Valid() const{
    return m_viber_service_msg_isValid;
}

OAIMessageProperty_whatsapp OAIMessageProperty::getWhatsapp() const {
    return m_whatsapp;
}
void OAIMessageProperty::setWhatsapp(const OAIMessageProperty_whatsapp &whatsapp) {
    m_whatsapp = whatsapp;
    m_whatsapp_isSet = true;
}

bool OAIMessageProperty::is_whatsapp_Set() const{
    return m_whatsapp_isSet;
}

bool OAIMessageProperty::is_whatsapp_Valid() const{
    return m_whatsapp_isValid;
}

bool OAIMessageProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messenger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_viber_service_msg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whatsapp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && true;
}

} // namespace OpenAPI
