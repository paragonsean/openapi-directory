/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFinalReport.h
 *
 * 
 */

#ifndef OAIFinalReport_H
#define OAIFinalReport_H

#include <QJsonObject>

#include "OAIFinalReport__links.h"
#include "OAIFinalReport_usage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFinalReport__links;
class OAIFinalReport_usage;

class OAIFinalReport : public OAIObject {
public:
    OAIFinalReport();
    OAIFinalReport(QString json);
    ~OAIFinalReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFinalReport__links getLinks() const;
    void setLinks(const OAIFinalReport__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getDispatchUuid() const;
    void setDispatchUuid(const QString &dispatch_uuid);
    bool is_dispatch_uuid_Set() const;
    bool is_dispatch_uuid_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIFinalReport_usage getUsage() const;
    void setUsage(const OAIFinalReport_usage &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFinalReport__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_dispatch_uuid;
    bool m_dispatch_uuid_isSet;
    bool m_dispatch_uuid_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIFinalReport_usage m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFinalReport)

#endif // OAIFinalReport_H
