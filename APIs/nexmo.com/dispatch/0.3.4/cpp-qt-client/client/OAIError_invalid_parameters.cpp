/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_invalid_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_invalid_parameters::OAIError_invalid_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_invalid_parameters::OAIError_invalid_parameters() {
    this->initializeModel();
}

OAIError_invalid_parameters::~OAIError_invalid_parameters() {}

void OAIError_invalid_parameters::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIError_invalid_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_invalid_parameters::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIError_invalid_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_invalid_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIError_invalid_parameters::getName() const {
    return m_name;
}
void OAIError_invalid_parameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIError_invalid_parameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIError_invalid_parameters::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIError_invalid_parameters::getReason() const {
    return m_reason;
}
void OAIError_invalid_parameters::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIError_invalid_parameters::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIError_invalid_parameters::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIError_invalid_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_invalid_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
