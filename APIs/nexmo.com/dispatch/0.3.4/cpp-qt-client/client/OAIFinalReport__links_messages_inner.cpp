/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinalReport__links_messages_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinalReport__links_messages_inner::OAIFinalReport__links_messages_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinalReport__links_messages_inner::OAIFinalReport__links_messages_inner() {
    this->initializeModel();
}

OAIFinalReport__links_messages_inner::~OAIFinalReport__links_messages_inner() {}

void OAIFinalReport__links_messages_inner::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_message_uuid_isSet = false;
    m_message_uuid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIFinalReport__links_messages_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinalReport__links_messages_inner::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_message_uuid_isValid = ::OpenAPI::fromJsonValue(m_message_uuid, json[QString("message_uuid")]);
    m_message_uuid_isSet = !json[QString("message_uuid")].isNull() && m_message_uuid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIFinalReport__links_messages_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinalReport__links_messages_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_message_uuid_isSet) {
        obj.insert(QString("message_uuid"), ::OpenAPI::toJsonValue(m_message_uuid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIFinalReport__links_messages_inner::getChannel() const {
    return m_channel;
}
void OAIFinalReport__links_messages_inner::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIFinalReport__links_messages_inner::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIFinalReport__links_messages_inner::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIFinalReport__links_messages_inner::getHref() const {
    return m_href;
}
void OAIFinalReport__links_messages_inner::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIFinalReport__links_messages_inner::is_href_Set() const{
    return m_href_isSet;
}

bool OAIFinalReport__links_messages_inner::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIFinalReport__links_messages_inner::getMessageUuid() const {
    return m_message_uuid;
}
void OAIFinalReport__links_messages_inner::setMessageUuid(const QString &message_uuid) {
    m_message_uuid = message_uuid;
    m_message_uuid_isSet = true;
}

bool OAIFinalReport__links_messages_inner::is_message_uuid_Set() const{
    return m_message_uuid_isSet;
}

bool OAIFinalReport__links_messages_inner::is_message_uuid_Valid() const{
    return m_message_uuid_isValid;
}

QString OAIFinalReport__links_messages_inner::getStatus() const {
    return m_status;
}
void OAIFinalReport__links_messages_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFinalReport__links_messages_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFinalReport__links_messages_inner::is_status_Valid() const{
    return m_status_isValid;
}

OAIMessageStatus_usage OAIFinalReport__links_messages_inner::getUsage() const {
    return m_usage;
}
void OAIFinalReport__links_messages_inner::setUsage(const OAIMessageStatus_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIFinalReport__links_messages_inner::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIFinalReport__links_messages_inner::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIFinalReport__links_messages_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinalReport__links_messages_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
