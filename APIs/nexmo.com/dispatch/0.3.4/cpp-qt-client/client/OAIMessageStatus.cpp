/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatus::OAIMessageStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatus::OAIMessageStatus() {
    this->initializeModel();
}

OAIMessageStatus::~OAIMessageStatus() {}

void OAIMessageStatus::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_uuid_isSet = false;
    m_message_uuid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIMessageStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatus::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_uuid_isValid = ::OpenAPI::fromJsonValue(m_message_uuid, json[QString("message_uuid")]);
    m_message_uuid_isSet = !json[QString("message_uuid")].isNull() && m_message_uuid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIMessageStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatus::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_uuid_isSet) {
        obj.insert(QString("message_uuid"), ::OpenAPI::toJsonValue(m_message_uuid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

OAIMessageStatus__links OAIMessageStatus::getLinks() const {
    return m__links;
}
void OAIMessageStatus::setLinks(const OAIMessageStatus__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIMessageStatus::is__links_Set() const{
    return m__links_isSet;
}

bool OAIMessageStatus::is__links_Valid() const{
    return m__links_isValid;
}

OAIMessageStatus_error OAIMessageStatus::getError() const {
    return m_error;
}
void OAIMessageStatus::setError(const OAIMessageStatus_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMessageStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMessageStatus::is_error_Valid() const{
    return m_error_isValid;
}

OAIFromProperty OAIMessageStatus::getFrom() const {
    return m_from;
}
void OAIMessageStatus::setFrom(const OAIFromProperty &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessageStatus::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessageStatus::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessageStatus::getMessageUuid() const {
    return m_message_uuid;
}
void OAIMessageStatus::setMessageUuid(const QString &message_uuid) {
    m_message_uuid = message_uuid;
    m_message_uuid_isSet = true;
}

bool OAIMessageStatus::is_message_uuid_Set() const{
    return m_message_uuid_isSet;
}

bool OAIMessageStatus::is_message_uuid_Valid() const{
    return m_message_uuid_isValid;
}

QString OAIMessageStatus::getStatus() const {
    return m_status;
}
void OAIMessageStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessageStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessageStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessageStatus::getTimestamp() const {
    return m_timestamp;
}
void OAIMessageStatus::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMessageStatus::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMessageStatus::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIToProperty OAIMessageStatus::getTo() const {
    return m_to;
}
void OAIMessageStatus::setTo(const OAIToProperty &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessageStatus::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessageStatus::is_to_Valid() const{
    return m_to_isValid;
}

OAIMessageStatus_usage OAIMessageStatus::getUsage() const {
    return m_usage;
}
void OAIMessageStatus::setUsage(const OAIMessageStatus_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIMessageStatus::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIMessageStatus::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIMessageStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
