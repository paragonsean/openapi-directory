/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatus__links_workflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatus__links_workflow::OAIMessageStatus__links_workflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatus__links_workflow::OAIMessageStatus__links_workflow() {
    this->initializeModel();
}

OAIMessageStatus__links_workflow::~OAIMessageStatus__links_workflow() {}

void OAIMessageStatus__links_workflow::initializeModel() {

    m_dispatch_uuid_isSet = false;
    m_dispatch_uuid_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;
}

void OAIMessageStatus__links_workflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatus__links_workflow::fromJsonObject(QJsonObject json) {

    m_dispatch_uuid_isValid = ::OpenAPI::fromJsonValue(m_dispatch_uuid, json[QString("dispatch_uuid")]);
    m_dispatch_uuid_isSet = !json[QString("dispatch_uuid")].isNull() && m_dispatch_uuid_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;
}

QString OAIMessageStatus__links_workflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatus__links_workflow::asJsonObject() const {
    QJsonObject obj;
    if (m_dispatch_uuid_isSet) {
        obj.insert(QString("dispatch_uuid"), ::OpenAPI::toJsonValue(m_dispatch_uuid));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    return obj;
}

QString OAIMessageStatus__links_workflow::getDispatchUuid() const {
    return m_dispatch_uuid;
}
void OAIMessageStatus__links_workflow::setDispatchUuid(const QString &dispatch_uuid) {
    m_dispatch_uuid = dispatch_uuid;
    m_dispatch_uuid_isSet = true;
}

bool OAIMessageStatus__links_workflow::is_dispatch_uuid_Set() const{
    return m_dispatch_uuid_isSet;
}

bool OAIMessageStatus__links_workflow::is_dispatch_uuid_Valid() const{
    return m_dispatch_uuid_isValid;
}

QString OAIMessageStatus__links_workflow::getHref() const {
    return m_href;
}
void OAIMessageStatus__links_workflow::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIMessageStatus__links_workflow::is_href_Set() const{
    return m_href_isSet;
}

bool OAIMessageStatus__links_workflow::is_href_Valid() const{
    return m_href_isValid;
}

bool OAIMessageStatus__links_workflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dispatch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatus__links_workflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
