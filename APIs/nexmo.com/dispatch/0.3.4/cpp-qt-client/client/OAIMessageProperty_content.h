/**
 * Dispatch API
 * The Dispatch API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the Messages API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also receive status webhooks from the messages resource for each delivery and read event. This API is currently in Beta.
 *
 * The version of the OpenAPI document: 0.3.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageProperty_content.h
 *
 * 
 */

#ifndef OAIMessageProperty_content_H
#define OAIMessageProperty_content_H

#include <QJsonObject>

#include "OAIAudioProperty.h"
#include "OAIFileProperty.h"
#include "OAIImageProperty.h"
#include "OAITemplateProperty.h"
#include "OAIVideoProperty.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioProperty;
class OAIFileProperty;
class OAIImageProperty;
class OAITemplateProperty;
class OAIVideoProperty;

class OAIMessageProperty_content : public OAIObject {
public:
    OAIMessageProperty_content();
    OAIMessageProperty_content(QString json);
    ~OAIMessageProperty_content() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioProperty getAudio() const;
    void setAudio(const OAIAudioProperty &audio);
    bool is_audio_Set() const;
    bool is_audio_Valid() const;

    OAIFileProperty getFile() const;
    void setFile(const OAIFileProperty &file);
    bool is_file_Set() const;
    bool is_file_Valid() const;

    OAIImageProperty getImage() const;
    void setImage(const OAIImageProperty &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    OAITemplateProperty getRTemplate() const;
    void setRTemplate(const OAITemplateProperty &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIVideoProperty getVideo() const;
    void setVideo(const OAIVideoProperty &video);
    bool is_video_Set() const;
    bool is_video_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioProperty m_audio;
    bool m_audio_isSet;
    bool m_audio_isValid;

    OAIFileProperty m_file;
    bool m_file_isSet;
    bool m_file_isValid;

    OAIImageProperty m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    OAITemplateProperty m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIVideoProperty m_video;
    bool m_video_isSet;
    bool m_video_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageProperty_content)

#endif // OAIMessageProperty_content_H
