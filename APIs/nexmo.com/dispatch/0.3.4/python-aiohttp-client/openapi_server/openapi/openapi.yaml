openapi: 3.0.0
info:
  contact:
    email: devrel@vonage.com
    name: Vonage DevRel
    url: https://developer.nexmo.com/
  description: The Dispatch API enables the developer to specify a multiple message
    workflow. A workflow follows a template. The first one we are adding is the failover
    template. The failover template instructs the Messages API to first send a message
    to the specified channel. If that message fails immediately or if the condition_status
    is not reached within the given time period the next message is sent. The developer
    will also receive status webhooks from the messages resource for each delivery
    and read event. This API is currently in Beta.
  title: Dispatch API
  version: 0.3.4
  x-label: Beta
  x-logo:
    url: https://www.vonage.com/content/dam/vonage/us-en/api/illustrations/Mobile_APIs_Services.svg
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/nexmo/api-specification/master/definitions/dispatch.yml
    version: "3.0"
  x-providerName: nexmo.com
  x-serviceName: dispatch
servers:
- url: https://api.nexmo.com/v0.1/dispatch
paths:
  /:
    post:
      callbacks:
        final-report:
          '{$request.body#/callback}':
            post:
              description: The final workflow callback is sent when The condition_status
                was met within the expiry_time. If we take the example API call above.
                If we received a delivered status at 300 seconds (within the expiry_time)
                the workflow would be marked as completed. We would not send an SMS.
                We would then send the final callback. The final message in the failover
                is delivered. If the message Errors on the last step we will send
                the final callback. Please note GET is not currently supported. You
                will notice we have an href to a resource in some of the callbacks.
                These will fail to load but we wanted to maintain the same structure
                so that we can seamlessly integrate GET later.
              operationId: final-report
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/finalReport'
                required: true
              responses:
                "200":
                  description: Your server returns this code if it accepts the callback
              summary: The Final Report
              x-example-path: /webhooks/final-report
              x-callback-request: true
        message-status:
          '{$request.body#/callback}':
            post:
              description: status of the message read or delivered etc.
              operationId: message-status
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/MessageStatus'
                required: true
              responses:
                "200":
                  description: Your server returns this code if it accepts the callback
              summary: Message Status
              x-example-path: /webhooks/message-status
              x-callback-request: true
      operationId: create_workflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWorkflow'
        description: Please note that last message does not have failover attribute
          inside it. All other messages must contain a failover attribute.
        required: true
        x-hide-request: true
        x-body-name: body
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      security:
      - bearerAuth: []
      - basicAuth: []
      summary: Create a workflow
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  schemas:
    AudioProperty:
      properties:
        url:
          description: "The URL of the audio attachment. `messenger` supports .mp3.\
            \ `whatsapp` supports .aac, .m4a, .amr, .mp3 and .opus."
          example: https://example.com/audio.mp3
          maxLength: 2000
          minLength: 1
          title: url
          type: string
      title: AudioProperty
      type: object
    Error:
      description: The error format is standardized to the 4xx/5xx range with a code
        and a human readable explanation.
      example:
        instance: instance
        detail: Your request parameters did not validate.
        type: https://www.nexmo.com/messages/Errors#InvalidParams
        invalid_parameters:
          reason: Invalid `from` parameter
          name: Invalid `from` parameter
      properties:
        detail:
          example: Your request parameters did not validate.
          title: detail
          type: string
        instance:
          title: instance
          type: string
          example: null
        invalid_parameters:
          $ref: '#/components/schemas/Error_invalid_parameters'
        type:
          example: https://www.nexmo.com/messages/Errors#InvalidParams
          title: type
          type: string
      required:
      - detail
      - instance
      - title
      - type
      title: Error
      type: object
    FailoverProperty:
      description: Please note that last message does not have failover attribute
        inside it. All other messages must contain a failover attribute.
      properties:
        condition_status:
          description: Set the status the message must reach in the expiry_time before
            failing over. Options are delivered or read.
          enum:
          - delivered
          - read
          example: delivered
          title: condition_status
          type: string
        expiry_time:
          description: "In seconds. Minimum value is 15 and maximum value is 86,400\
            \ seconds (1 day)."
          example: 600
          maximum: 86400
          minimum: 15
          title: expiry_time
          type: integer
      title: FailoverProperty
      type: object
    FileProperty:
      properties:
        caption:
          description: Additional text to accompany the image. Supported by WhatsApp
            and MMS.
          example: Additional text to accompany the image.
          maxLength: 3000
          minLength: 1
          title: caption
          type: string
        url:
          description: "The URL of the file attachment. `messenger` supports a wide\
            \ range of attachments including .zip, .csv and .pdf. `whatsapp` supports\
            \ .pdf, .doc(x), .ppt(x) and .xls(x)."
          example: https://example.com/file.zip
          maxLength: 2000
          minLength: 1
          title: url
          type: string
      title: FileProperty
      type: object
    FromProperty:
      example:
        number: "447700900000"
        id: "0123456789012345"
        type: sms
      properties:
        id:
          description: |
            Your ID for the platform that you are sending from.

            **Messenger**: This value should be the `to.id` value you received in the inbound messenger event.

            **Viber**: This is your Service Message ID given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).

            **SMS**: **MMS**: or **WhatsApp** This value is not required.
          example: "0123456789012345"
          maxLength: 50
          minLength: 1
          title: id
          type: string
        number:
          description: |
            **SMS**: or **MMS**: The phone number of the message sender in the [E.164](https://en.wikipedia.org/wiki/E.164) format.

            **WhatsApp**: This is your WhatsApp Business Number given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).

            **Messenger**: or **Viber**: This value is not required.
          example: "447700900000"
          maxLength: 50
          minLength: 1
          title: number
          type: string
        type:
          description: The type of message that you want to send.
          enum:
          - sms
          - viber_service_msg
          - messenger
          - whatsapp
          example: sms
          title: type
          type: string
      required:
      - type
      title: FromProperty
      type: object
    ImageProperty:
      properties:
        caption:
          description: Additional text to accompany the image. Supported by WhatsApp
            and MMS.
          example: Additional text to accompany the image.
          maxLength: 3000
          minLength: 1
          title: caption
          type: string
        url:
          description: "The URL of the image attachment. `messenger` and `mms` supports\
            \ .jpg, .jpeg, .png and .gif. `viber_service_msg` supports .jpg .jpeg,\
            \ and .png. `whatsapp` supports .jpg .jpeg, and .png."
          example: https://example.com/image.jpg
          maxLength: 2000
          minLength: 1
          title: url
          type: string
      title: ImageProperty
      type: object
    MessageProperty:
      properties:
        content:
          $ref: '#/components/schemas/MessageProperty_content'
        messenger:
          $ref: '#/components/schemas/MessageProperty_messenger'
        viber_service_msg:
          $ref: '#/components/schemas/MessageProperty_viber_service_msg'
        whatsapp:
          $ref: '#/components/schemas/MessageProperty_whatsapp'
      required:
      - content
      title: MessageProperty
      type: object
    MessageStatus:
      description: The callbacks for the message status are the same as defined in
        the Messaging API. The only difference will be that dispatch_uuid and link
        will be appended.
      example:
        _links:
          workflow:
            dispatch_uuid: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
            href: /workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab
        usage:
          price: "0.0333"
          currency: EUR
        from:
          number: "447700900000"
          id: "0123456789012345"
          type: sms
        message_uuid: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
        to:
          number: "447700900000"
          id: "0123456789012345"
          type: sms
        error:
          reason: Not part of the provider network
          code: 1300
        status: delivered
        timestamp: 2020-01-01T14:00:00.000Z
      properties:
        _links:
          $ref: '#/components/schemas/MessageStatus__links'
        error:
          $ref: '#/components/schemas/MessageStatus_error'
        from:
          $ref: '#/components/schemas/FromProperty'
        message_uuid:
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: message_uuid
          type: string
        status:
          description: The status of the message.
          enum:
          - submitted
          - delivered
          - read
          - rejected
          - undeliverable
          example: delivered
          title: status
          type: string
        timestamp:
          description: The datetime of when the event occurred.
          example: 2020-01-01T14:00:00.000Z
          format: ISO 8601
          title: timestamp
          type: string
        to:
          $ref: '#/components/schemas/ToProperty'
        usage:
          $ref: '#/components/schemas/MessageStatus_usage'
      title: MessageStatus
      type: object
    Response:
      example:
        dispatch_uuid: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
      properties:
        dispatch_uuid:
          description: The parent ID for workflow request.
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: dispatch_uuid
          type: string
      required:
      - dispatch_uuid
      title: Response
      type: object
    TemplateProperty:
      properties:
        name:
          description: The name of the template.
          example: whatsapp:hsm:technology:vonage:verify
          title: name
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TemplateProperty_parameters_inner'
          title: parameters
          type: array
      title: TemplateProperty
      type: object
    TimestampProperty:
      description: The datetime of when the event occurred.
      example: 2020-01-01T14:00:00.000Z
      format: ISO 8601
      title: timestamp
      type: string
    ToProperty:
      example:
        number: "447700900000"
        id: "0123456789012345"
        type: sms
      properties:
        id:
          description: |
            The ID of the message recipient.

            **Messenger**: This value should be the `from.id` value you received in the inbound messenger event.

            **SMS**: or **Viber**: or **WhatsApp** This value is not required.
          example: "0123456789012345"
          maxLength: 50
          minLength: 1
          title: id
          type: string
        number:
          description: |
            **SMS**: or **MMS**: or **Viber**: or **WhatsApp** The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.

            **Messenger**: This value is not required.
          example: "447700900000"
          maxLength: 50
          minLength: 1
          title: number
          type: string
        type:
          description: The type of message that you want to send.
          enum:
          - sms
          - viber_service_msg
          - messenger
          - whatsapp
          example: sms
          title: type
          type: string
      required:
      - type
      title: ToProperty
      type: object
    VideoProperty:
      properties:
        url:
          description: |
            The URL of the video attachment.

            **messenger** supports .mp4

            **whatsapp** supports .mp4 and .3gpp. Note, only H.264 video codec and AAC audio codec is supported.
          example: https://example.com/video.mp4
          maxLength: 2000
          minLength: 1
          title: url
          type: string
      title: VideoProperty
      type: object
    createWorkflow:
      properties:
        template:
          description: The template that the Dispatch API will execute. For the initial
            version of the API the only available value will be failover
          enum:
          - failover
          example: failover
          title: template
          type: string
        workflow:
          description: Contains a message object that must reflect the current /messages
            resource. All parameters within the content object reflect the /messages
            docs.
          items:
            $ref: '#/components/schemas/createWorkflow_workflow_inner'
          title: workflow
          type: array
      title: createWorkflow
      type: object
    finalReport:
      properties:
        _links:
          $ref: '#/components/schemas/finalReport__links'
        dispatch_uuid:
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: dispatch_uuid
          type: string
        status:
          enum:
          - completed
          - error
          example: completed
          title: status
          type: string
        template:
          enum:
          - failover
          example: failover
          title: template
          type: string
        timestamp:
          description: The datetime of when the event occurred.
          example: 2020-01-01T14:00:00.000Z
          format: ISO 8601
          title: timestamp
          type: string
        usage:
          $ref: '#/components/schemas/finalReport_usage'
      title: finalReport
      type: object
    sendMessage:
      description: Send Message
      properties:
        from:
          $ref: '#/components/schemas/FromProperty'
        message:
          $ref: '#/components/schemas/MessageProperty'
        to:
          $ref: '#/components/schemas/ToProperty'
      required:
      - from
      - message
      - to
      title: sendMessage
      type: object
    sendWithFailoverMessage:
      description: Send With Failover Message
      properties:
        failover:
          $ref: '#/components/schemas/FailoverProperty'
        from:
          $ref: '#/components/schemas/FromProperty'
        message:
          $ref: '#/components/schemas/MessageProperty'
        to:
          $ref: '#/components/schemas/ToProperty'
      required:
      - from
      - message
      - to
      title: sendWithFailoverMessage
      type: object
    Error_invalid_parameters:
      example:
        reason: Invalid `from` parameter
        name: Invalid `from` parameter
      properties:
        name:
          example: Invalid `from` parameter
          title: name
          type: string
        reason:
          example: Invalid `from` parameter
          title: reason
          type: string
      title: Error_invalid_parameters
      type: object
    MessageProperty_content:
      properties:
        audio:
          $ref: '#/components/schemas/AudioProperty'
        file:
          $ref: '#/components/schemas/FileProperty'
        image:
          $ref: '#/components/schemas/ImageProperty'
        template:
          $ref: '#/components/schemas/TemplateProperty'
        text:
          description: |
            The text of the message.

            **Messenger**: Is limited to 640 characters

            **SMS** or **Viber**: Is 1000 characters

            **WhatsApp**: is 4096 characters
          example: "Vonage Verification code: 64873. Valid for 10 minutes."
          maxLength: 4096
          minLength: 1
          title: text
          type: string
        type:
          description: |
            The type of message that you are sending.

            **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.

            **Viber Business Messages**: supports `image` and `text`.

            **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.

            **SMS**: supports `text`.
          enum:
          - text
          - image
          - audio
          - video
          - file
          - template
          - custom
          example: text
          title: type
          type: string
        video:
          $ref: '#/components/schemas/VideoProperty'
      required:
      - type
      title: MessageProperty_content
      type: object
    MessageProperty_messenger:
      properties:
        category:
          description: "The use of different category tags enables the business to\
            \ send messages for different use cases. For Facebook Messenger they need\
            \ to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types).\
            \ Vonage maps our `category` to their `messaging_type`. If `message_tag`\
            \ is used, then an additional `tag` for that type is mandatory. By default\
            \ Vonage sends the `response` category to Facebook Messenger."
          enum:
          - response
          - update
          - message_tag
          example: message_tag
          title: category
          type: string
        tag:
          description: "‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'"
          example: ticket_update
          title: tag
          type: string
      title: MessageProperty_messenger
      type: object
    MessageProperty_viber_service_msg:
      properties:
        category:
          description: "The use of different category tags enables the business to\
            \ send messages for different use cases. For Viber Business Messages the\
            \ first message sent from a business to a user must be personal, informative\
            \ and a targeted message - not promotional. By default Vonage sends the\
            \ `transaction` category to Viber Business Messages."
          enum:
          - transaction
          - promotion
          example: transaction
          title: category
          type: string
        ttl:
          description: Only valid for Viber Business Messages. Set the time-to-live
            of message to be delivered in seconds. i.e. if the message is not delivered
            in 600 seconds then delete the message.
          example: 600
          maximum: 86400
          minimum: 30
          title: ttl
          type: integer
      title: MessageProperty_viber_service_msg
      type: object
    MessageProperty_whatsapp:
      properties:
        locale:
          description: "We are using the industry standard, BCP 47, for locales. So\
            \ in your API call to the /messages API you will need to put “en-GB” and\
            \ this will refer to the “en_GB” template for WhatsApp. A full list of\
            \ the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations)."
          example: en-GB
          title: locale
          type: string
        policy:
          description: "Please note that WhatsApp will deprecate `fallback` policy\
            \ in January 2020. There are two policies that you can specify when sending\
            \ a Message Template: `deterministic` and `fallback`. `deterministic`\
            \ — Deliver the Message Template in exactly the language and locale asked\
            \ for. `fallback` — Deliver the Message Template in the language that\
            \ matches users language/locale setting on device. If one can not be found,\
            \ deliver using the specified fallback language."
          enum:
          - fallback
          - deterministic
          example: deterministic
          title: policy
          type: string
      title: MessageProperty_whatsapp
      type: object
    MessageStatus__links_workflow:
      example:
        dispatch_uuid: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
        href: /workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab
      properties:
        dispatch_uuid:
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: dispatch_uuid
          type: string
        href:
          description: Please note GET is not currently supported
          example: /workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: href
          type: string
      title: MessageStatus__links_workflow
      type: object
    MessageStatus__links:
      example:
        workflow:
          dispatch_uuid: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          href: /workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab
      properties:
        workflow:
          $ref: '#/components/schemas/MessageStatus__links_workflow'
      title: MessageStatus__links
      type: object
    MessageStatus_error:
      example:
        reason: Not part of the provider network
        code: 1300
      properties:
        code:
          description: "The error code. See [our errors list](/api-errors/messages-olympus)\
            \ for a list of possible errors"
          example: 1300
          title: code
          type: integer
        reason:
          description: "Text describing the error. See [our errors list](/api-errors/messages-olympus)\
            \ for a list of possible errors"
          example: Not part of the provider network
          title: reason
          type: string
      title: MessageStatus_error
      type: object
    MessageStatus_usage:
      example:
        price: "0.0333"
        currency: EUR
      properties:
        currency:
          description: The charge currency in ISO 4217 format.
          enum:
          - EUR
          example: EUR
          title: currency
          type: string
        price:
          description: The charge amount as a stringified number.
          example: "0.0333"
          title: price
          type: string
      title: MessageStatus_usage
      type: object
    TemplateProperty_parameters_inner:
      properties:
        default:
          description: "The parameters are an array. The first value being {{1}} in\
            \ the template."
          example: "1234"
          title: default
          type: string
      title: TemplateProperty_parameters_inner
      type: object
    createWorkflow_workflow_inner:
      oneOf:
      - $ref: '#/components/schemas/sendWithFailoverMessage'
      - $ref: '#/components/schemas/sendMessage'
      title: createWorkflow_workflow_inner
    finalReport__links_messages_inner:
      properties:
        channel:
          enum:
          - messenger
          - viber_sevice_msg
          - sms
          - whatsapp
          - mms
          example: viber_service_msg
          title: channel
          type: string
        href:
          description: Please note GET is not currently supported
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: href
          type: string
        message_uuid:
          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab
          title: message_uuid
          type: string
        status:
          enum:
          - submitted
          - delivered
          - read
          - rejected
          - undeliverable
          title: status
          type: string
        usage:
          $ref: '#/components/schemas/MessageStatus_usage'
      title: finalReport__links_messages_inner
      type: object
    finalReport__links:
      properties:
        messages:
          items:
            $ref: '#/components/schemas/finalReport__links_messages_inner'
          title: messages
          type: array
      title: finalReport__links
      type: object
    finalReport_usage:
      description: This is the total cost of your Workflow request. Please note if
        a preceding message in the workflow request is delivered after the final message
        in the workflow is delivered it may not reflect the true total cost of the
        workflow.
      properties:
        currency:
          description: The charge currency in ISO 4217 format.
          enum:
          - EUR
          example: EUR
          title: currency
          type: string
        price:
          description: The charge amount as a stringified number.
          example: "0.02"
          title: price
          type: string
      title: finalReport_usage
      type: object
      x-nexmo-developer-collection-description-shown: true
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_basicAuth
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: openapi_server.controllers.security_controller.info_from_bearerAuth
