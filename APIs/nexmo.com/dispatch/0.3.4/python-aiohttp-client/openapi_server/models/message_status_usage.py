# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageStatusUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, price: str=None):
        """MessageStatusUsage - a model defined in OpenAPI

        :param currency: The currency of this MessageStatusUsage.
        :param price: The price of this MessageStatusUsage.
        """
        self.openapi_types = {
            'currency': str,
            'price': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'price': 'price'
        }

        self._currency = currency
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageStatusUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageStatus_usage of this MessageStatusUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this MessageStatusUsage.

        The charge currency in ISO 4217 format.

        :return: The currency of this MessageStatusUsage.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MessageStatusUsage.

        The charge currency in ISO 4217 format.

        :param currency: The currency of this MessageStatusUsage.
        :type currency: str
        """
        allowed_values = ["EUR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def price(self):
        """Gets the price of this MessageStatusUsage.

        The charge amount as a stringified number.

        :return: The price of this MessageStatusUsage.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MessageStatusUsage.

        The charge amount as a stringified number.

        :param price: The price of this MessageStatusUsage.
        :type price: str
        """

        self._price = price
