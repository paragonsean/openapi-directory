# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workflow_workflow_inner import CreateWorkflowWorkflowInner
from openapi_server import util


class CreateWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template: str=None, workflow: List[CreateWorkflowWorkflowInner]=None):
        """CreateWorkflow - a model defined in OpenAPI

        :param template: The template of this CreateWorkflow.
        :param workflow: The workflow of this CreateWorkflow.
        """
        self.openapi_types = {
            'template': str,
            'workflow': List[CreateWorkflowWorkflowInner]
        }

        self.attribute_map = {
            'template': 'template',
            'workflow': 'workflow'
        }

        self._template = template
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createWorkflow of this CreateWorkflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self):
        """Gets the template of this CreateWorkflow.

        The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover

        :return: The template of this CreateWorkflow.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateWorkflow.

        The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover

        :param template: The template of this CreateWorkflow.
        :type template: str
        """
        allowed_values = ["failover"]  # noqa: E501
        if template not in allowed_values:
            raise ValueError(
                "Invalid value for `template` ({0}), must be one of {1}"
                .format(template, allowed_values)
            )

        self._template = template

    @property
    def workflow(self):
        """Gets the workflow of this CreateWorkflow.

        Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.

        :return: The workflow of this CreateWorkflow.
        :rtype: List[CreateWorkflowWorkflowInner]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this CreateWorkflow.

        Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.

        :param workflow: The workflow of this CreateWorkflow.
        :type workflow: List[CreateWorkflowWorkflowInner]
        """

        self._workflow = workflow
