# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_status: str=None, expiry_time: int=None):
        """FailoverProperty - a model defined in OpenAPI

        :param condition_status: The condition_status of this FailoverProperty.
        :param expiry_time: The expiry_time of this FailoverProperty.
        """
        self.openapi_types = {
            'condition_status': str,
            'expiry_time': int
        }

        self.attribute_map = {
            'condition_status': 'condition_status',
            'expiry_time': 'expiry_time'
        }

        self._condition_status = condition_status
        self._expiry_time = expiry_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverProperty of this FailoverProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_status(self):
        """Gets the condition_status of this FailoverProperty.

        Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.

        :return: The condition_status of this FailoverProperty.
        :rtype: str
        """
        return self._condition_status

    @condition_status.setter
    def condition_status(self, condition_status):
        """Sets the condition_status of this FailoverProperty.

        Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.

        :param condition_status: The condition_status of this FailoverProperty.
        :type condition_status: str
        """
        allowed_values = ["delivered", "read"]  # noqa: E501
        if condition_status not in allowed_values:
            raise ValueError(
                "Invalid value for `condition_status` ({0}), must be one of {1}"
                .format(condition_status, allowed_values)
            )

        self._condition_status = condition_status

    @property
    def expiry_time(self):
        """Gets the expiry_time of this FailoverProperty.

        In seconds. Minimum value is 15 and maximum value is 86,400 seconds (1 day).

        :return: The expiry_time of this FailoverProperty.
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this FailoverProperty.

        In seconds. Minimum value is 15 and maximum value is 86,400 seconds (1 day).

        :param expiry_time: The expiry_time of this FailoverProperty.
        :type expiry_time: int
        """
        if expiry_time is not None and expiry_time > 86400:
            raise ValueError("Invalid value for `expiry_time`, must be a value less than or equal to `86400`")
        if expiry_time is not None and expiry_time < 15:
            raise ValueError("Invalid value for `expiry_time`, must be a value greater than or equal to `15`")

        self._expiry_time = expiry_time
