# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.final_report_links import FinalReportLinks
from openapi_server.models.final_report_usage import FinalReportUsage
from openapi_server import util


class FinalReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: FinalReportLinks=None, dispatch_uuid: str=None, status: str=None, template: str=None, timestamp: str=None, usage: FinalReportUsage=None):
        """FinalReport - a model defined in OpenAPI

        :param links: The links of this FinalReport.
        :param dispatch_uuid: The dispatch_uuid of this FinalReport.
        :param status: The status of this FinalReport.
        :param template: The template of this FinalReport.
        :param timestamp: The timestamp of this FinalReport.
        :param usage: The usage of this FinalReport.
        """
        self.openapi_types = {
            'links': FinalReportLinks,
            'dispatch_uuid': str,
            'status': str,
            'template': str,
            'timestamp': str,
            'usage': FinalReportUsage
        }

        self.attribute_map = {
            'links': '_links',
            'dispatch_uuid': 'dispatch_uuid',
            'status': 'status',
            'template': 'template',
            'timestamp': 'timestamp',
            'usage': 'usage'
        }

        self._links = links
        self._dispatch_uuid = dispatch_uuid
        self._status = status
        self._template = template
        self._timestamp = timestamp
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinalReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The finalReport of this FinalReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this FinalReport.


        :return: The links of this FinalReport.
        :rtype: FinalReportLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FinalReport.


        :param links: The links of this FinalReport.
        :type links: FinalReportLinks
        """

        self._links = links

    @property
    def dispatch_uuid(self):
        """Gets the dispatch_uuid of this FinalReport.


        :return: The dispatch_uuid of this FinalReport.
        :rtype: str
        """
        return self._dispatch_uuid

    @dispatch_uuid.setter
    def dispatch_uuid(self, dispatch_uuid):
        """Sets the dispatch_uuid of this FinalReport.


        :param dispatch_uuid: The dispatch_uuid of this FinalReport.
        :type dispatch_uuid: str
        """

        self._dispatch_uuid = dispatch_uuid

    @property
    def status(self):
        """Gets the status of this FinalReport.


        :return: The status of this FinalReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FinalReport.


        :param status: The status of this FinalReport.
        :type status: str
        """
        allowed_values = ["completed", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def template(self):
        """Gets the template of this FinalReport.


        :return: The template of this FinalReport.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this FinalReport.


        :param template: The template of this FinalReport.
        :type template: str
        """
        allowed_values = ["failover"]  # noqa: E501
        if template not in allowed_values:
            raise ValueError(
                "Invalid value for `template` ({0}), must be one of {1}"
                .format(template, allowed_values)
            )

        self._template = template

    @property
    def timestamp(self):
        """Gets the timestamp of this FinalReport.

        The datetime of when the event occurred.

        :return: The timestamp of this FinalReport.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FinalReport.

        The datetime of when the event occurred.

        :param timestamp: The timestamp of this FinalReport.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def usage(self):
        """Gets the usage of this FinalReport.


        :return: The usage of this FinalReport.
        :rtype: FinalReportUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this FinalReport.


        :param usage: The usage of this FinalReport.
        :type usage: FinalReportUsage
        """

        self._usage = usage
