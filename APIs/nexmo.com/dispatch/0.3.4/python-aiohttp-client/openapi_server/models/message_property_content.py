# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_property import AudioProperty
from openapi_server.models.file_property import FileProperty
from openapi_server.models.image_property import ImageProperty
from openapi_server.models.template_property import TemplateProperty
from openapi_server.models.video_property import VideoProperty
from openapi_server import util


class MessagePropertyContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: AudioProperty=None, file: FileProperty=None, image: ImageProperty=None, template: TemplateProperty=None, text: str=None, type: str=None, video: VideoProperty=None):
        """MessagePropertyContent - a model defined in OpenAPI

        :param audio: The audio of this MessagePropertyContent.
        :param file: The file of this MessagePropertyContent.
        :param image: The image of this MessagePropertyContent.
        :param template: The template of this MessagePropertyContent.
        :param text: The text of this MessagePropertyContent.
        :param type: The type of this MessagePropertyContent.
        :param video: The video of this MessagePropertyContent.
        """
        self.openapi_types = {
            'audio': AudioProperty,
            'file': FileProperty,
            'image': ImageProperty,
            'template': TemplateProperty,
            'text': str,
            'type': str,
            'video': VideoProperty
        }

        self.attribute_map = {
            'audio': 'audio',
            'file': 'file',
            'image': 'image',
            'template': 'template',
            'text': 'text',
            'type': 'type',
            'video': 'video'
        }

        self._audio = audio
        self._file = file
        self._image = image
        self._template = template
        self._text = text
        self._type = type
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePropertyContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageProperty_content of this MessagePropertyContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this MessagePropertyContent.


        :return: The audio of this MessagePropertyContent.
        :rtype: AudioProperty
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this MessagePropertyContent.


        :param audio: The audio of this MessagePropertyContent.
        :type audio: AudioProperty
        """

        self._audio = audio

    @property
    def file(self):
        """Gets the file of this MessagePropertyContent.


        :return: The file of this MessagePropertyContent.
        :rtype: FileProperty
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this MessagePropertyContent.


        :param file: The file of this MessagePropertyContent.
        :type file: FileProperty
        """

        self._file = file

    @property
    def image(self):
        """Gets the image of this MessagePropertyContent.


        :return: The image of this MessagePropertyContent.
        :rtype: ImageProperty
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MessagePropertyContent.


        :param image: The image of this MessagePropertyContent.
        :type image: ImageProperty
        """

        self._image = image

    @property
    def template(self):
        """Gets the template of this MessagePropertyContent.


        :return: The template of this MessagePropertyContent.
        :rtype: TemplateProperty
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this MessagePropertyContent.


        :param template: The template of this MessagePropertyContent.
        :type template: TemplateProperty
        """

        self._template = template

    @property
    def text(self):
        """Gets the text of this MessagePropertyContent.

        The text of the message.  **Messenger**: Is limited to 640 characters  **SMS** or **Viber**: Is 1000 characters  **WhatsApp**: is 4096 characters 

        :return: The text of this MessagePropertyContent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessagePropertyContent.

        The text of the message.  **Messenger**: Is limited to 640 characters  **SMS** or **Viber**: Is 1000 characters  **WhatsApp**: is 4096 characters 

        :param text: The text of this MessagePropertyContent.
        :type text: str
        """
        if text is not None and len(text) > 4096:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `4096`")
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this MessagePropertyContent.

        The type of message that you are sending.  **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.  **Viber Business Messages**: supports `image` and `text`.  **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.  **SMS**: supports `text`. 

        :return: The type of this MessagePropertyContent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessagePropertyContent.

        The type of message that you are sending.  **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.  **Viber Business Messages**: supports `image` and `text`.  **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.  **SMS**: supports `text`. 

        :param type: The type of this MessagePropertyContent.
        :type type: str
        """
        allowed_values = ["text", "image", "audio", "video", "file", "template", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def video(self):
        """Gets the video of this MessagePropertyContent.


        :return: The video of this MessagePropertyContent.
        :rtype: VideoProperty
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this MessagePropertyContent.


        :param video: The video of this MessagePropertyContent.
        :type video: VideoProperty
        """

        self._video = video
