# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagePropertyWhatsapp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locale: str=None, policy: str=None):
        """MessagePropertyWhatsapp - a model defined in OpenAPI

        :param locale: The locale of this MessagePropertyWhatsapp.
        :param policy: The policy of this MessagePropertyWhatsapp.
        """
        self.openapi_types = {
            'locale': str,
            'policy': str
        }

        self.attribute_map = {
            'locale': 'locale',
            'policy': 'policy'
        }

        self._locale = locale
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePropertyWhatsapp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageProperty_whatsapp of this MessagePropertyWhatsapp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locale(self):
        """Gets the locale of this MessagePropertyWhatsapp.

        We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).

        :return: The locale of this MessagePropertyWhatsapp.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this MessagePropertyWhatsapp.

        We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).

        :param locale: The locale of this MessagePropertyWhatsapp.
        :type locale: str
        """

        self._locale = locale

    @property
    def policy(self):
        """Gets the policy of this MessagePropertyWhatsapp.

        Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.

        :return: The policy of this MessagePropertyWhatsapp.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this MessagePropertyWhatsapp.

        Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.

        :param policy: The policy of this MessagePropertyWhatsapp.
        :type policy: str
        """
        allowed_values = ["fallback", "deterministic"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy
