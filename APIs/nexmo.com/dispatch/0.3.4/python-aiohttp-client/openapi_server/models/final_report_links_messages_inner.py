# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_status_usage import MessageStatusUsage
from openapi_server import util


class FinalReportLinksMessagesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, href: str=None, message_uuid: str=None, status: str=None, usage: MessageStatusUsage=None):
        """FinalReportLinksMessagesInner - a model defined in OpenAPI

        :param channel: The channel of this FinalReportLinksMessagesInner.
        :param href: The href of this FinalReportLinksMessagesInner.
        :param message_uuid: The message_uuid of this FinalReportLinksMessagesInner.
        :param status: The status of this FinalReportLinksMessagesInner.
        :param usage: The usage of this FinalReportLinksMessagesInner.
        """
        self.openapi_types = {
            'channel': str,
            'href': str,
            'message_uuid': str,
            'status': str,
            'usage': MessageStatusUsage
        }

        self.attribute_map = {
            'channel': 'channel',
            'href': 'href',
            'message_uuid': 'message_uuid',
            'status': 'status',
            'usage': 'usage'
        }

        self._channel = channel
        self._href = href
        self._message_uuid = message_uuid
        self._status = status
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinalReportLinksMessagesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The finalReport__links_messages_inner of this FinalReportLinksMessagesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this FinalReportLinksMessagesInner.


        :return: The channel of this FinalReportLinksMessagesInner.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this FinalReportLinksMessagesInner.


        :param channel: The channel of this FinalReportLinksMessagesInner.
        :type channel: str
        """
        allowed_values = ["messenger", "viber_sevice_msg", "sms", "whatsapp", "mms"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def href(self):
        """Gets the href of this FinalReportLinksMessagesInner.

        Please note GET is not currently supported

        :return: The href of this FinalReportLinksMessagesInner.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FinalReportLinksMessagesInner.

        Please note GET is not currently supported

        :param href: The href of this FinalReportLinksMessagesInner.
        :type href: str
        """

        self._href = href

    @property
    def message_uuid(self):
        """Gets the message_uuid of this FinalReportLinksMessagesInner.


        :return: The message_uuid of this FinalReportLinksMessagesInner.
        :rtype: str
        """
        return self._message_uuid

    @message_uuid.setter
    def message_uuid(self, message_uuid):
        """Sets the message_uuid of this FinalReportLinksMessagesInner.


        :param message_uuid: The message_uuid of this FinalReportLinksMessagesInner.
        :type message_uuid: str
        """

        self._message_uuid = message_uuid

    @property
    def status(self):
        """Gets the status of this FinalReportLinksMessagesInner.


        :return: The status of this FinalReportLinksMessagesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FinalReportLinksMessagesInner.


        :param status: The status of this FinalReportLinksMessagesInner.
        :type status: str
        """
        allowed_values = ["submitted", "delivered", "read", "rejected", "undeliverable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def usage(self):
        """Gets the usage of this FinalReportLinksMessagesInner.


        :return: The usage of this FinalReportLinksMessagesInner.
        :rtype: MessageStatusUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this FinalReportLinksMessagesInner.


        :param usage: The usage of this FinalReportLinksMessagesInner.
        :type usage: MessageStatusUsage
        """

        self._usage = usage
