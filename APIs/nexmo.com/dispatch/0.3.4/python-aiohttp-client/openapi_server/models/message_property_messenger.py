# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagePropertyMessenger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, tag: str=None):
        """MessagePropertyMessenger - a model defined in OpenAPI

        :param category: The category of this MessagePropertyMessenger.
        :param tag: The tag of this MessagePropertyMessenger.
        """
        self.openapi_types = {
            'category': str,
            'tag': str
        }

        self.attribute_map = {
            'category': 'category',
            'tag': 'tag'
        }

        self._category = category
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePropertyMessenger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageProperty_messenger of this MessagePropertyMessenger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this MessagePropertyMessenger.

        The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.

        :return: The category of this MessagePropertyMessenger.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MessagePropertyMessenger.

        The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.

        :param category: The category of this MessagePropertyMessenger.
        :type category: str
        """
        allowed_values = ["response", "update", "message_tag"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def tag(self):
        """Gets the tag of this MessagePropertyMessenger.

        ‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'

        :return: The tag of this MessagePropertyMessenger.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this MessagePropertyMessenger.

        ‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'

        :param tag: The tag of this MessagePropertyMessenger.
        :type tag: str
        """

        self._tag = tag
