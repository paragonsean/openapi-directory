# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failover_property import FailoverProperty
from openapi_server.models.from_property import FromProperty
from openapi_server.models.message_property import MessageProperty
from openapi_server.models.send_message import SendMessage
from openapi_server.models.send_with_failover_message import SendWithFailoverMessage
from openapi_server.models.to_property import ToProperty
from openapi_server import util


class CreateWorkflowWorkflowInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover: FailoverProperty=None, _from: FromProperty=None, message: MessageProperty=None, to: ToProperty=None):
        """CreateWorkflowWorkflowInner - a model defined in OpenAPI

        :param failover: The failover of this CreateWorkflowWorkflowInner.
        :param _from: The _from of this CreateWorkflowWorkflowInner.
        :param message: The message of this CreateWorkflowWorkflowInner.
        :param to: The to of this CreateWorkflowWorkflowInner.
        """
        self.openapi_types = {
            'failover': FailoverProperty,
            '_from': FromProperty,
            'message': MessageProperty,
            'to': ToProperty
        }

        self.attribute_map = {
            'failover': 'failover',
            '_from': 'from',
            'message': 'message',
            'to': 'to'
        }

        self._failover = failover
        self.__from = _from
        self._message = message
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkflowWorkflowInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createWorkflow_workflow_inner of this CreateWorkflowWorkflowInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover(self):
        """Gets the failover of this CreateWorkflowWorkflowInner.


        :return: The failover of this CreateWorkflowWorkflowInner.
        :rtype: FailoverProperty
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this CreateWorkflowWorkflowInner.


        :param failover: The failover of this CreateWorkflowWorkflowInner.
        :type failover: FailoverProperty
        """

        self._failover = failover

    @property
    def _from(self):
        """Gets the _from of this CreateWorkflowWorkflowInner.


        :return: The _from of this CreateWorkflowWorkflowInner.
        :rtype: FromProperty
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CreateWorkflowWorkflowInner.


        :param _from: The _from of this CreateWorkflowWorkflowInner.
        :type _from: FromProperty
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def message(self):
        """Gets the message of this CreateWorkflowWorkflowInner.


        :return: The message of this CreateWorkflowWorkflowInner.
        :rtype: MessageProperty
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateWorkflowWorkflowInner.


        :param message: The message of this CreateWorkflowWorkflowInner.
        :type message: MessageProperty
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def to(self):
        """Gets the to of this CreateWorkflowWorkflowInner.


        :return: The to of this CreateWorkflowWorkflowInner.
        :rtype: ToProperty
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CreateWorkflowWorkflowInner.


        :param to: The to of this CreateWorkflowWorkflowInner.
        :type to: ToProperty
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
