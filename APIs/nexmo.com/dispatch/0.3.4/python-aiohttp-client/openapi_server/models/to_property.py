# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ToProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, number: str=None, type: str=None):
        """ToProperty - a model defined in OpenAPI

        :param id: The id of this ToProperty.
        :param number: The number of this ToProperty.
        :param type: The type of this ToProperty.
        """
        self.openapi_types = {
            'id': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'number': 'number',
            'type': 'type'
        }

        self._id = id
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ToProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ToProperty of this ToProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ToProperty.

        The ID of the message recipient.  **Messenger**: This value should be the `from.id` value you received in the inbound messenger event.  **SMS**: or **Viber**: or **WhatsApp** This value is not required. 

        :return: The id of this ToProperty.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ToProperty.

        The ID of the message recipient.  **Messenger**: This value should be the `from.id` value you received in the inbound messenger event.  **SMS**: or **Viber**: or **WhatsApp** This value is not required. 

        :param id: The id of this ToProperty.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def number(self):
        """Gets the number of this ToProperty.

        **SMS**: or **MMS**: or **Viber**: or **WhatsApp** The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.  **Messenger**: This value is not required. 

        :return: The number of this ToProperty.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ToProperty.

        **SMS**: or **MMS**: or **Viber**: or **WhatsApp** The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.  **Messenger**: This value is not required. 

        :param number: The number of this ToProperty.
        :type number: str
        """
        if number is not None and len(number) > 50:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `50`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this ToProperty.

        The type of message that you want to send.

        :return: The type of this ToProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ToProperty.

        The type of message that you want to send.

        :param type: The type of this ToProperty.
        :type type: str
        """
        allowed_values = ["sms", "viber_service_msg", "messenger", "whatsapp"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
