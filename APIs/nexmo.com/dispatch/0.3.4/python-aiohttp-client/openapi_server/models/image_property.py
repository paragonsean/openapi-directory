# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, url: str=None):
        """ImageProperty - a model defined in OpenAPI

        :param caption: The caption of this ImageProperty.
        :param url: The url of this ImageProperty.
        """
        self.openapi_types = {
            'caption': str,
            'url': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'url': 'url'
        }

        self._caption = caption
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageProperty of this ImageProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this ImageProperty.

        Additional text to accompany the image. Supported by WhatsApp and MMS.

        :return: The caption of this ImageProperty.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ImageProperty.

        Additional text to accompany the image. Supported by WhatsApp and MMS.

        :param caption: The caption of this ImageProperty.
        :type caption: str
        """
        if caption is not None and len(caption) > 3000:
            raise ValueError("Invalid value for `caption`, length must be less than or equal to `3000`")
        if caption is not None and len(caption) < 1:
            raise ValueError("Invalid value for `caption`, length must be greater than or equal to `1`")

        self._caption = caption

    @property
    def url(self):
        """Gets the url of this ImageProperty.

        The URL of the image attachment. `messenger` and `mms` supports .jpg, .jpeg, .png and .gif. `viber_service_msg` supports .jpg .jpeg, and .png. `whatsapp` supports .jpg .jpeg, and .png.

        :return: The url of this ImageProperty.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageProperty.

        The URL of the image attachment. `messenger` and `mms` supports .jpg, .jpeg, .png and .gif. `viber_service_msg` supports .jpg .jpeg, and .png. `whatsapp` supports .jpg .jpeg, and .png.

        :param url: The url of this ImageProperty.
        :type url: str
        """
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url
