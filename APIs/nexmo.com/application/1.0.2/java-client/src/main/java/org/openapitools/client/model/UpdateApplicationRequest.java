/*
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:17.722302-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationRequest {
  public static final String SERIALIZED_NAME_ANSWER_METHOD = "answer_method";
  @SerializedName(SERIALIZED_NAME_ANSWER_METHOD)
  private String answerMethod = "GET";

  public static final String SERIALIZED_NAME_ANSWER_URL = "answer_url";
  @SerializedName(SERIALIZED_NAME_ANSWER_URL)
  private String answerUrl;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_API_SECRET = "api_secret";
  @SerializedName(SERIALIZED_NAME_API_SECRET)
  private String apiSecret;

  public static final String SERIALIZED_NAME_EVENT_METHOD = "event_method";
  @SerializedName(SERIALIZED_NAME_EVENT_METHOD)
  private String eventMethod = "POST";

  public static final String SERIALIZED_NAME_EVENT_URL = "event_url";
  @SerializedName(SERIALIZED_NAME_EVENT_URL)
  private String eventUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The Nexmo product or products that you access with this application. Currently &#x60;voice&#x60; and &#x60;messages&#x60; application types are supported. You  can&#39;t change the type of application.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VOICE("voice"),
    
    MESSAGES("messages");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public UpdateApplicationRequest() {
  }

  public UpdateApplicationRequest answerMethod(String answerMethod) {
    this.answerMethod = answerMethod;
    return this;
  }

  /**
   * The HTTP method used to make the request to &#x60;answer_url&#x60;. The default value is &#x60;GET&#x60;.
   * @return answerMethod
   */
  @javax.annotation.Nullable
  public String getAnswerMethod() {
    return answerMethod;
  }

  public void setAnswerMethod(String answerMethod) {
    this.answerMethod = answerMethod;
  }


  public UpdateApplicationRequest answerUrl(String answerUrl) {
    this.answerUrl = answerUrl;
    return this;
  }

  /**
   * The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to &#x60;answer_url&#x60;.
   * @return answerUrl
   */
  @javax.annotation.Nullable
  public String getAnswerUrl() {
    return answerUrl;
  }

  public void setAnswerUrl(String answerUrl) {
    this.answerUrl = answerUrl;
  }


  public UpdateApplicationRequest apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
   * @return apiKey
   */
  @javax.annotation.Nonnull
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public UpdateApplicationRequest apiSecret(String apiSecret) {
    this.apiSecret = apiSecret;
    return this;
  }

  /**
   * You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
   * @return apiSecret
   */
  @javax.annotation.Nonnull
  public String getApiSecret() {
    return apiSecret;
  }

  public void setApiSecret(String apiSecret) {
    this.apiSecret = apiSecret;
  }


  public UpdateApplicationRequest eventMethod(String eventMethod) {
    this.eventMethod = eventMethod;
    return this;
  }

  /**
   * The HTTP method used to send event information to &#x60;event_url&#x60;. The default value is POST.
   * @return eventMethod
   */
  @javax.annotation.Nullable
  public String getEventMethod() {
    return eventMethod;
  }

  public void setEventMethod(String eventMethod) {
    this.eventMethod = eventMethod;
  }


  public UpdateApplicationRequest eventUrl(String eventUrl) {
    this.eventUrl = eventUrl;
    return this;
  }

  /**
   * Nexmo sends event information asynchronously to this URL when status changes.
   * @return eventUrl
   */
  @javax.annotation.Nullable
  public String getEventUrl() {
    return eventUrl;
  }

  public void setEventUrl(String eventUrl) {
    this.eventUrl = eventUrl;
  }


  public UpdateApplicationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of your application.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateApplicationRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The Nexmo product or products that you access with this application. Currently &#x60;voice&#x60; and &#x60;messages&#x60; application types are supported. You  can&#39;t change the type of application.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationRequest updateApplicationRequest = (UpdateApplicationRequest) o;
    return Objects.equals(this.answerMethod, updateApplicationRequest.answerMethod) &&
        Objects.equals(this.answerUrl, updateApplicationRequest.answerUrl) &&
        Objects.equals(this.apiKey, updateApplicationRequest.apiKey) &&
        Objects.equals(this.apiSecret, updateApplicationRequest.apiSecret) &&
        Objects.equals(this.eventMethod, updateApplicationRequest.eventMethod) &&
        Objects.equals(this.eventUrl, updateApplicationRequest.eventUrl) &&
        Objects.equals(this.name, updateApplicationRequest.name) &&
        Objects.equals(this.type, updateApplicationRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerMethod, answerUrl, apiKey, apiSecret, eventMethod, eventUrl, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationRequest {\n");
    sb.append("    answerMethod: ").append(toIndentedString(answerMethod)).append("\n");
    sb.append("    answerUrl: ").append(toIndentedString(answerUrl)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiSecret: ").append(toIndentedString(apiSecret)).append("\n");
    sb.append("    eventMethod: ").append(toIndentedString(eventMethod)).append("\n");
    sb.append("    eventUrl: ").append(toIndentedString(eventUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answer_method");
    openapiFields.add("answer_url");
    openapiFields.add("api_key");
    openapiFields.add("api_secret");
    openapiFields.add("event_method");
    openapiFields.add("event_url");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api_key");
    openapiRequiredFields.add("api_secret");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationRequest is not found in the empty JSON string", UpdateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answer_method") != null && !jsonObj.get("answer_method").isJsonNull()) && !jsonObj.get("answer_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer_method").toString()));
      }
      if ((jsonObj.get("answer_url") != null && !jsonObj.get("answer_url").isJsonNull()) && !jsonObj.get("answer_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer_url").toString()));
      }
      if (!jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if (!jsonObj.get("api_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_secret").toString()));
      }
      if ((jsonObj.get("event_method") != null && !jsonObj.get("event_method").isJsonNull()) && !jsonObj.get("event_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_method").toString()));
      }
      if ((jsonObj.get("event_url") != null && !jsonObj.get("event_url").isJsonNull()) && !jsonObj.get("event_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationRequest
   */
  public static UpdateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

