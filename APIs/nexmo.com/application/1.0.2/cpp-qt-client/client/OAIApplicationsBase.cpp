/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationsBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationsBase::OAIApplicationsBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationsBase::OAIApplicationsBase() {
    this->initializeModel();
}

OAIApplicationsBase::~OAIApplicationsBase() {}

void OAIApplicationsBase::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_page_index_isSet = false;
    m_page_index_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIApplicationsBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationsBase::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_page_index_isValid = ::OpenAPI::fromJsonValue(m_page_index, json[QString("page_index")]);
    m_page_index_isSet = !json[QString("page_index")].isNull() && m_page_index_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;
}

QString OAIApplicationsBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationsBase::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_page_index_isSet) {
        obj.insert(QString("page_index"), ::OpenAPI::toJsonValue(m_page_index));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

OAIApplicationsBase__embedded OAIApplicationsBase::getEmbedded() const {
    return m__embedded;
}
void OAIApplicationsBase::setEmbedded(const OAIApplicationsBase__embedded &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIApplicationsBase::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIApplicationsBase::is__embedded_Valid() const{
    return m__embedded_isValid;
}

qint32 OAIApplicationsBase::getCount() const {
    return m_count;
}
void OAIApplicationsBase::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIApplicationsBase::is_count_Set() const{
    return m_count_isSet;
}

bool OAIApplicationsBase::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIApplicationsBase::getPageIndex() const {
    return m_page_index;
}
void OAIApplicationsBase::setPageIndex(const qint32 &page_index) {
    m_page_index = page_index;
    m_page_index_isSet = true;
}

bool OAIApplicationsBase::is_page_index_Set() const{
    return m_page_index_isSet;
}

bool OAIApplicationsBase::is_page_index_Valid() const{
    return m_page_index_isValid;
}

qint32 OAIApplicationsBase::getPageSize() const {
    return m_page_size;
}
void OAIApplicationsBase::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIApplicationsBase::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIApplicationsBase::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIApplicationsBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationsBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
