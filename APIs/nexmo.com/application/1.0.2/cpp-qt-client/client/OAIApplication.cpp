/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_messages.isSet()) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_voice.isSet()) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

OAILinks OAIApplication::getLinks() const {
    return m__links;
}
void OAIApplication::setLinks(const OAILinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIApplication::is__links_Set() const{
    return m__links_isSet;
}

bool OAIApplication::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIApplication::getId() const {
    return m_id;
}
void OAIApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplication::is_id_Valid() const{
    return m_id_isValid;
}

OAIKeys OAIApplication::getKeys() const {
    return m_keys;
}
void OAIApplication::setKeys(const OAIKeys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIApplication::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIApplication::is_keys_Valid() const{
    return m_keys_isValid;
}

OAIMessages OAIApplication::getMessages() const {
    return m_messages;
}
void OAIApplication::setMessages(const OAIMessages &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIApplication::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIApplication::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

OAIVoice OAIApplication::getVoice() const {
    return m_voice;
}
void OAIApplication::setVoice(const OAIVoice &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIApplication::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIApplication::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && m_name_isValid && m_voice_isValid && true;
}

} // namespace OpenAPI
