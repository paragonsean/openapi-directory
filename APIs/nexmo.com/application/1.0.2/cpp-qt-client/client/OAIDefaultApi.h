/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIApplicationCreated.h"
#include "OAIApplications.h"
#include "OAICreateApplication_request.h"
#include "OAIUpdateApplication_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_application_request OAICreateApplication_request [optional]
    */
    virtual void createApplication(const ::OpenAPI::OptionalParam<OAICreateApplication_request> &oai_create_application_request = ::OpenAPI::OptionalParam<OAICreateApplication_request>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteApplication(const QString &app_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void retrieveApplication(const QString &api_key, const QString &api_secret, const QString &app_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_index qint32 [optional]
    */
    virtual void retrieveApplications(const QString &api_key, const QString &api_secret, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_update_application_request OAIUpdateApplication_request [optional]
    */
    virtual void updateApplication(const QString &app_id, const ::OpenAPI::OptionalParam<OAIUpdateApplication_request> &oai_update_application_request = ::OpenAPI::OptionalParam<OAIUpdateApplication_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createApplicationCallback(OAIHttpRequestWorker *worker);
    void deleteApplicationCallback(OAIHttpRequestWorker *worker);
    void retrieveApplicationCallback(OAIHttpRequestWorker *worker);
    void retrieveApplicationsCallback(OAIHttpRequestWorker *worker);
    void updateApplicationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createApplicationSignal(OAIApplicationCreated summary);
    void deleteApplicationSignal();
    void retrieveApplicationSignal(OAIApplication summary);
    void retrieveApplicationsSignal(OAIApplications summary);
    void updateApplicationSignal(OAIApplication summary);


    void createApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplicationCreated summary);
    void deleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void retrieveApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void retrieveApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplications summary);
    void updateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalError() instead")
    void createApplicationSignalE(OAIApplicationCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalError(OAIApplicationCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalError() instead")
    void deleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveApplicationSignalError() instead")
    void retrieveApplicationSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveApplicationSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveApplicationsSignalError() instead")
    void retrieveApplicationsSignalE(OAIApplications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveApplicationsSignalError(OAIApplications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSignalError() instead")
    void updateApplicationSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalErrorFull() instead")
    void createApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalErrorFull() instead")
    void deleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveApplicationSignalErrorFull() instead")
    void retrieveApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveApplicationsSignalErrorFull() instead")
    void retrieveApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSignalErrorFull() instead")
    void updateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
