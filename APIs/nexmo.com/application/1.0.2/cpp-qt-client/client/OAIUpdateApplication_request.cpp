/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplication_request::OAIUpdateApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplication_request::OAIUpdateApplication_request() {
    this->initializeModel();
}

OAIUpdateApplication_request::~OAIUpdateApplication_request() {}

void OAIUpdateApplication_request::initializeModel() {

    m_answer_method_isSet = false;
    m_answer_method_isValid = false;

    m_answer_url_isSet = false;
    m_answer_url_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_api_secret_isSet = false;
    m_api_secret_isValid = false;

    m_event_method_isSet = false;
    m_event_method_isValid = false;

    m_event_url_isSet = false;
    m_event_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplication_request::fromJsonObject(QJsonObject json) {

    m_answer_method_isValid = ::OpenAPI::fromJsonValue(m_answer_method, json[QString("answer_method")]);
    m_answer_method_isSet = !json[QString("answer_method")].isNull() && m_answer_method_isValid;

    m_answer_url_isValid = ::OpenAPI::fromJsonValue(m_answer_url, json[QString("answer_url")]);
    m_answer_url_isSet = !json[QString("answer_url")].isNull() && m_answer_url_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_api_secret_isValid = ::OpenAPI::fromJsonValue(m_api_secret, json[QString("api_secret")]);
    m_api_secret_isSet = !json[QString("api_secret")].isNull() && m_api_secret_isValid;

    m_event_method_isValid = ::OpenAPI::fromJsonValue(m_event_method, json[QString("event_method")]);
    m_event_method_isSet = !json[QString("event_method")].isNull() && m_event_method_isValid;

    m_event_url_isValid = ::OpenAPI::fromJsonValue(m_event_url, json[QString("event_url")]);
    m_event_url_isSet = !json[QString("event_url")].isNull() && m_event_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdateApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_method_isSet) {
        obj.insert(QString("answer_method"), ::OpenAPI::toJsonValue(m_answer_method));
    }
    if (m_answer_url_isSet) {
        obj.insert(QString("answer_url"), ::OpenAPI::toJsonValue(m_answer_url));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_api_secret_isSet) {
        obj.insert(QString("api_secret"), ::OpenAPI::toJsonValue(m_api_secret));
    }
    if (m_event_method_isSet) {
        obj.insert(QString("event_method"), ::OpenAPI::toJsonValue(m_event_method));
    }
    if (m_event_url_isSet) {
        obj.insert(QString("event_url"), ::OpenAPI::toJsonValue(m_event_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUpdateApplication_request::getAnswerMethod() const {
    return m_answer_method;
}
void OAIUpdateApplication_request::setAnswerMethod(const QString &answer_method) {
    m_answer_method = answer_method;
    m_answer_method_isSet = true;
}

bool OAIUpdateApplication_request::is_answer_method_Set() const{
    return m_answer_method_isSet;
}

bool OAIUpdateApplication_request::is_answer_method_Valid() const{
    return m_answer_method_isValid;
}

QString OAIUpdateApplication_request::getAnswerUrl() const {
    return m_answer_url;
}
void OAIUpdateApplication_request::setAnswerUrl(const QString &answer_url) {
    m_answer_url = answer_url;
    m_answer_url_isSet = true;
}

bool OAIUpdateApplication_request::is_answer_url_Set() const{
    return m_answer_url_isSet;
}

bool OAIUpdateApplication_request::is_answer_url_Valid() const{
    return m_answer_url_isValid;
}

QString OAIUpdateApplication_request::getApiKey() const {
    return m_api_key;
}
void OAIUpdateApplication_request::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIUpdateApplication_request::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIUpdateApplication_request::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIUpdateApplication_request::getApiSecret() const {
    return m_api_secret;
}
void OAIUpdateApplication_request::setApiSecret(const QString &api_secret) {
    m_api_secret = api_secret;
    m_api_secret_isSet = true;
}

bool OAIUpdateApplication_request::is_api_secret_Set() const{
    return m_api_secret_isSet;
}

bool OAIUpdateApplication_request::is_api_secret_Valid() const{
    return m_api_secret_isValid;
}

QString OAIUpdateApplication_request::getEventMethod() const {
    return m_event_method;
}
void OAIUpdateApplication_request::setEventMethod(const QString &event_method) {
    m_event_method = event_method;
    m_event_method_isSet = true;
}

bool OAIUpdateApplication_request::is_event_method_Set() const{
    return m_event_method_isSet;
}

bool OAIUpdateApplication_request::is_event_method_Valid() const{
    return m_event_method_isValid;
}

QString OAIUpdateApplication_request::getEventUrl() const {
    return m_event_url;
}
void OAIUpdateApplication_request::setEventUrl(const QString &event_url) {
    m_event_url = event_url;
    m_event_url_isSet = true;
}

bool OAIUpdateApplication_request::is_event_url_Set() const{
    return m_event_url_isSet;
}

bool OAIUpdateApplication_request::is_event_url_Valid() const{
    return m_event_url_isValid;
}

QString OAIUpdateApplication_request::getName() const {
    return m_name;
}
void OAIUpdateApplication_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateApplication_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateApplication_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateApplication_request::getType() const {
    return m_type;
}
void OAIUpdateApplication_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateApplication_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateApplication_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_api_secret_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
