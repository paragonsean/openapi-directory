/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_webhooks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_webhooks_inner::OAIMessages_webhooks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_webhooks_inner::OAIMessages_webhooks_inner() {
    this->initializeModel();
}

OAIMessages_webhooks_inner::~OAIMessages_webhooks_inner() {}

void OAIMessages_webhooks_inner::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;
}

void OAIMessages_webhooks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_webhooks_inner::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("endpoint_type")]);
    m_endpoint_type_isSet = !json[QString("endpoint_type")].isNull() && m_endpoint_type_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("http_method")]);
    m_http_method_isSet = !json[QString("http_method")].isNull() && m_http_method_isValid;
}

QString OAIMessages_webhooks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_webhooks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("endpoint_type"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("http_method"), ::OpenAPI::toJsonValue(m_http_method));
    }
    return obj;
}

QString OAIMessages_webhooks_inner::getEndpoint() const {
    return m_endpoint;
}
void OAIMessages_webhooks_inner::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIMessages_webhooks_inner::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIMessages_webhooks_inner::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIMessages_webhooks_inner::getEndpointType() const {
    return m_endpoint_type;
}
void OAIMessages_webhooks_inner::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIMessages_webhooks_inner::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIMessages_webhooks_inner::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIMessages_webhooks_inner::getHttpMethod() const {
    return m_http_method;
}
void OAIMessages_webhooks_inner::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIMessages_webhooks_inner::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIMessages_webhooks_inner::is_http_method_Valid() const{
    return m_http_method_isValid;
}

bool OAIMessages_webhooks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_webhooks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_isValid && m_endpoint_type_isValid && m_http_method_isValid && true;
}

} // namespace OpenAPI
