# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applications_base_embedded import ApplicationsBaseEmbedded
from openapi_server.models.links import Links
from openapi_server import util


class Applications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: ApplicationsBaseEmbedded=None, links: Links=None, count: int=None, page_index: int=None, page_size: int=None):
        """Applications - a model defined in OpenAPI

        :param embedded: The embedded of this Applications.
        :param links: The links of this Applications.
        :param count: The count of this Applications.
        :param page_index: The page_index of this Applications.
        :param page_size: The page_size of this Applications.
        """
        self.openapi_types = {
            'embedded': ApplicationsBaseEmbedded,
            'links': Links,
            'count': int,
            'page_index': int,
            'page_size': int
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'count': 'count',
            'page_index': 'page_index',
            'page_size': 'page_size'
        }

        self._embedded = embedded
        self._links = links
        self._count = count
        self._page_index = page_index
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Applications':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The applications of this Applications.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this Applications.


        :return: The embedded of this Applications.
        :rtype: ApplicationsBaseEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Applications.


        :param embedded: The embedded of this Applications.
        :type embedded: ApplicationsBaseEmbedded
        """
        if embedded is None:
            raise ValueError("Invalid value for `embedded`, must not be `None`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Applications.


        :return: The links of this Applications.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Applications.


        :param links: The links of this Applications.
        :type links: Links
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def count(self):
        """Gets the count of this Applications.

        The number of items associated with your account.

        :return: The count of this Applications.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Applications.

        The number of items associated with your account.

        :param count: The count of this Applications.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def page_index(self):
        """Gets the page_index of this Applications.

        The offset from the first page.

        :return: The page_index of this Applications.
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this Applications.

        The offset from the first page.

        :param page_index: The page_index of this Applications.
        :type page_index: int
        """
        if page_index is None:
            raise ValueError("Invalid value for `page_index`, must not be `None`")

        self._page_index = page_index

    @property
    def page_size(self):
        """Gets the page_size of this Applications.

        The number of items returned on each call to this endpoint. The default is 10 records.

        :return: The page_size of this Applications.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Applications.

        The number of items returned on each call to this endpoint. The default is 10 records.

        :param page_size: The page_size of this Applications.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")

        self._page_size = page_size
