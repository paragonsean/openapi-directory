# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_method: str='GET', answer_url: str=None, api_key: str=None, api_secret: str=None, event_method: str='POST', event_url: str=None, name: str=None, type: str=None):
        """UpdateApplicationRequest - a model defined in OpenAPI

        :param answer_method: The answer_method of this UpdateApplicationRequest.
        :param answer_url: The answer_url of this UpdateApplicationRequest.
        :param api_key: The api_key of this UpdateApplicationRequest.
        :param api_secret: The api_secret of this UpdateApplicationRequest.
        :param event_method: The event_method of this UpdateApplicationRequest.
        :param event_url: The event_url of this UpdateApplicationRequest.
        :param name: The name of this UpdateApplicationRequest.
        :param type: The type of this UpdateApplicationRequest.
        """
        self.openapi_types = {
            'answer_method': str,
            'answer_url': str,
            'api_key': str,
            'api_secret': str,
            'event_method': str,
            'event_url': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'answer_method': 'answer_method',
            'answer_url': 'answer_url',
            'api_key': 'api_key',
            'api_secret': 'api_secret',
            'event_method': 'event_method',
            'event_url': 'event_url',
            'name': 'name',
            'type': 'type'
        }

        self._answer_method = answer_method
        self._answer_url = answer_url
        self._api_key = api_key
        self._api_secret = api_secret
        self._event_method = event_method
        self._event_url = event_url
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateApplication_request of this UpdateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_method(self):
        """Gets the answer_method of this UpdateApplicationRequest.

        The HTTP method used to make the request to `answer_url`. The default value is `GET`.

        :return: The answer_method of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._answer_method

    @answer_method.setter
    def answer_method(self, answer_method):
        """Sets the answer_method of this UpdateApplicationRequest.

        The HTTP method used to make the request to `answer_url`. The default value is `GET`.

        :param answer_method: The answer_method of this UpdateApplicationRequest.
        :type answer_method: str
        """

        self._answer_method = answer_method

    @property
    def answer_url(self):
        """Gets the answer_url of this UpdateApplicationRequest.

        The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to `answer_url`.

        :return: The answer_url of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._answer_url

    @answer_url.setter
    def answer_url(self, answer_url):
        """Sets the answer_url of this UpdateApplicationRequest.

        The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to `answer_url`.

        :param answer_url: The answer_url of this UpdateApplicationRequest.
        :type answer_url: str
        """

        self._answer_url = answer_url

    @property
    def api_key(self):
        """Gets the api_key of this UpdateApplicationRequest.

        You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)

        :return: The api_key of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this UpdateApplicationRequest.

        You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)

        :param api_key: The api_key of this UpdateApplicationRequest.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this UpdateApplicationRequest.

        You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)

        :return: The api_secret of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this UpdateApplicationRequest.

        You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)

        :param api_secret: The api_secret of this UpdateApplicationRequest.
        :type api_secret: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")

        self._api_secret = api_secret

    @property
    def event_method(self):
        """Gets the event_method of this UpdateApplicationRequest.

        The HTTP method used to send event information to `event_url`. The default value is POST.

        :return: The event_method of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._event_method

    @event_method.setter
    def event_method(self, event_method):
        """Sets the event_method of this UpdateApplicationRequest.

        The HTTP method used to send event information to `event_url`. The default value is POST.

        :param event_method: The event_method of this UpdateApplicationRequest.
        :type event_method: str
        """

        self._event_method = event_method

    @property
    def event_url(self):
        """Gets the event_url of this UpdateApplicationRequest.

        Nexmo sends event information asynchronously to this URL when status changes.

        :return: The event_url of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this UpdateApplicationRequest.

        Nexmo sends event information asynchronously to this URL when status changes.

        :param event_url: The event_url of this UpdateApplicationRequest.
        :type event_url: str
        """

        self._event_url = event_url

    @property
    def name(self):
        """Gets the name of this UpdateApplicationRequest.

        The name of your application.

        :return: The name of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateApplicationRequest.

        The name of your application.

        :param name: The name of this UpdateApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this UpdateApplicationRequest.

        The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported. You  can't change the type of application.

        :return: The type of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateApplicationRequest.

        The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported. You  can't change the type of application.

        :param type: The type of this UpdateApplicationRequest.
        :type type: str
        """
        allowed_values = ["voice", "messages"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
