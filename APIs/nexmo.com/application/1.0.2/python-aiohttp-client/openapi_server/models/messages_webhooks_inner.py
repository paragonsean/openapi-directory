# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagesWebhooksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: str=None, endpoint_type: str=None, http_method: str=None):
        """MessagesWebhooksInner - a model defined in OpenAPI

        :param endpoint: The endpoint of this MessagesWebhooksInner.
        :param endpoint_type: The endpoint_type of this MessagesWebhooksInner.
        :param http_method: The http_method of this MessagesWebhooksInner.
        """
        self.openapi_types = {
            'endpoint': str,
            'endpoint_type': str,
            'http_method': str
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'endpoint_type': 'endpoint_type',
            'http_method': 'http_method'
        }

        self._endpoint = endpoint
        self._endpoint_type = endpoint_type
        self._http_method = http_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesWebhooksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_webhooks_inner of this MessagesWebhooksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this MessagesWebhooksInner.

        `inbound_url`: The URL where inbound messages are delivered. `status_url`: The URL where message status is delivered.

        :return: The endpoint of this MessagesWebhooksInner.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this MessagesWebhooksInner.

        `inbound_url`: The URL where inbound messages are delivered. `status_url`: The URL where message status is delivered.

        :param endpoint: The endpoint of this MessagesWebhooksInner.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this MessagesWebhooksInner.


        :return: The endpoint_type of this MessagesWebhooksInner.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this MessagesWebhooksInner.


        :param endpoint_type: The endpoint_type of this MessagesWebhooksInner.
        :type endpoint_type: str
        """
        allowed_values = ["inbound_url", "status_url"]  # noqa: E501
        if endpoint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type

    @property
    def http_method(self):
        """Gets the http_method of this MessagesWebhooksInner.

        The HTTP method used to send data to the `inbound_url` or `status_url`. Default is POST.

        :return: The http_method of this MessagesWebhooksInner.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this MessagesWebhooksInner.

        The HTTP method used to send data to the `inbound_url` or `status_url`. Default is POST.

        :param http_method: The http_method of this MessagesWebhooksInner.
        :type http_method: str
        """
        allowed_values = ["GET", "POST"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method
