# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keys import Keys
from openapi_server.models.links import Links
from openapi_server.models.messages import Messages
from openapi_server.models.voice import Voice
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Links=None, id: str=None, keys: Keys=None, messages: Messages=None, name: str=None, voice: Voice=None):
        """Application - a model defined in OpenAPI

        :param links: The links of this Application.
        :param id: The id of this Application.
        :param keys: The keys of this Application.
        :param messages: The messages of this Application.
        :param name: The name of this Application.
        :param voice: The voice of this Application.
        """
        self.openapi_types = {
            'links': Links,
            'id': str,
            'keys': Keys,
            'messages': Messages,
            'name': str,
            'voice': Voice
        }

        self.attribute_map = {
            'links': '_links',
            'id': 'id',
            'keys': 'keys',
            'messages': 'messages',
            'name': 'name',
            'voice': 'voice'
        }

        self._links = links
        self._id = id
        self._keys = keys
        self._messages = messages
        self._name = name
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Application.


        :return: The links of this Application.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Application.


        :param links: The links of this Application.
        :type links: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this Application.

        The ID allocated to your application by Nexmo.

        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.

        The ID allocated to your application by Nexmo.

        :param id: The id of this Application.
        :type id: str
        """

        self._id = id

    @property
    def keys(self):
        """Gets the keys of this Application.


        :return: The keys of this Application.
        :rtype: Keys
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this Application.


        :param keys: The keys of this Application.
        :type keys: Keys
        """

        self._keys = keys

    @property
    def messages(self):
        """Gets the messages of this Application.


        :return: The messages of this Application.
        :rtype: Messages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Application.


        :param messages: The messages of this Application.
        :type messages: Messages
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def name(self):
        """Gets the name of this Application.

        The name of your application

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        The name of your application

        :param name: The name of this Application.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def voice(self):
        """Gets the voice of this Application.


        :return: The voice of this Application.
        :rtype: Voice
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this Application.


        :param voice: The voice of this Application.
        :type voice: Voice
        """
        if voice is None:
            raise ValueError("Invalid value for `voice`, must not be `None`")

        self._voice = voice
