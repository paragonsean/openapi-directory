/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateApplicationRequest model module.
 * @module model/CreateApplicationRequest
 * @version 1.0.2
 */
class CreateApplicationRequest {
    /**
     * Constructs a new <code>CreateApplicationRequest</code>.
     * @alias module:model/CreateApplicationRequest
     * @param apiKey {String} You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param apiSecret {String} You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param name {String} The name of your application.
     * @param type {module:model/CreateApplicationRequest.TypeEnum} The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported.
     */
    constructor(apiKey, apiSecret, name, type) { 
        
        CreateApplicationRequest.initialize(this, apiKey, apiSecret, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiKey, apiSecret, name, type) { 
        obj['api_key'] = apiKey;
        obj['api_secret'] = apiSecret;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreateApplicationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateApplicationRequest} obj Optional instance to populate.
     * @return {module:model/CreateApplicationRequest} The populated <code>CreateApplicationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateApplicationRequest();

            if (data.hasOwnProperty('answer_method')) {
                obj['answer_method'] = ApiClient.convertToType(data['answer_method'], 'String');
            }
            if (data.hasOwnProperty('answer_url')) {
                obj['answer_url'] = ApiClient.convertToType(data['answer_url'], 'String');
            }
            if (data.hasOwnProperty('api_key')) {
                obj['api_key'] = ApiClient.convertToType(data['api_key'], 'String');
            }
            if (data.hasOwnProperty('api_secret')) {
                obj['api_secret'] = ApiClient.convertToType(data['api_secret'], 'String');
            }
            if (data.hasOwnProperty('event_method')) {
                obj['event_method'] = ApiClient.convertToType(data['event_method'], 'String');
            }
            if (data.hasOwnProperty('event_url')) {
                obj['event_url'] = ApiClient.convertToType(data['event_url'], 'String');
            }
            if (data.hasOwnProperty('inbound_method')) {
                obj['inbound_method'] = ApiClient.convertToType(data['inbound_method'], 'String');
            }
            if (data.hasOwnProperty('inbound_url')) {
                obj['inbound_url'] = ApiClient.convertToType(data['inbound_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status_method')) {
                obj['status_method'] = ApiClient.convertToType(data['status_method'], 'String');
            }
            if (data.hasOwnProperty('status_url')) {
                obj['status_url'] = ApiClient.convertToType(data['status_url'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateApplicationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateApplicationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateApplicationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['answer_method'] && !(typeof data['answer_method'] === 'string' || data['answer_method'] instanceof String)) {
            throw new Error("Expected the field `answer_method` to be a primitive type in the JSON string but got " + data['answer_method']);
        }
        // ensure the json data is a string
        if (data['answer_url'] && !(typeof data['answer_url'] === 'string' || data['answer_url'] instanceof String)) {
            throw new Error("Expected the field `answer_url` to be a primitive type in the JSON string but got " + data['answer_url']);
        }
        // ensure the json data is a string
        if (data['api_key'] && !(typeof data['api_key'] === 'string' || data['api_key'] instanceof String)) {
            throw new Error("Expected the field `api_key` to be a primitive type in the JSON string but got " + data['api_key']);
        }
        // ensure the json data is a string
        if (data['api_secret'] && !(typeof data['api_secret'] === 'string' || data['api_secret'] instanceof String)) {
            throw new Error("Expected the field `api_secret` to be a primitive type in the JSON string but got " + data['api_secret']);
        }
        // ensure the json data is a string
        if (data['event_method'] && !(typeof data['event_method'] === 'string' || data['event_method'] instanceof String)) {
            throw new Error("Expected the field `event_method` to be a primitive type in the JSON string but got " + data['event_method']);
        }
        // ensure the json data is a string
        if (data['event_url'] && !(typeof data['event_url'] === 'string' || data['event_url'] instanceof String)) {
            throw new Error("Expected the field `event_url` to be a primitive type in the JSON string but got " + data['event_url']);
        }
        // ensure the json data is a string
        if (data['inbound_method'] && !(typeof data['inbound_method'] === 'string' || data['inbound_method'] instanceof String)) {
            throw new Error("Expected the field `inbound_method` to be a primitive type in the JSON string but got " + data['inbound_method']);
        }
        // ensure the json data is a string
        if (data['inbound_url'] && !(typeof data['inbound_url'] === 'string' || data['inbound_url'] instanceof String)) {
            throw new Error("Expected the field `inbound_url` to be a primitive type in the JSON string but got " + data['inbound_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status_method'] && !(typeof data['status_method'] === 'string' || data['status_method'] instanceof String)) {
            throw new Error("Expected the field `status_method` to be a primitive type in the JSON string but got " + data['status_method']);
        }
        // ensure the json data is a string
        if (data['status_url'] && !(typeof data['status_url'] === 'string' || data['status_url'] instanceof String)) {
            throw new Error("Expected the field `status_url` to be a primitive type in the JSON string but got " + data['status_url']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CreateApplicationRequest.RequiredProperties = ["api_key", "api_secret", "name", "type"];

/**
 * The HTTP method used to make the request to `answer_url`. The default value is `GET`.
 * @member {String} answer_method
 */
CreateApplicationRequest.prototype['answer_method'] = undefined;

/**
 * The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to `answer_url`. Required for inbound calls only.
 * @member {String} answer_url
 */
CreateApplicationRequest.prototype['answer_url'] = undefined;

/**
 * You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
 * @member {String} api_key
 */
CreateApplicationRequest.prototype['api_key'] = undefined;

/**
 * You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
 * @member {String} api_secret
 */
CreateApplicationRequest.prototype['api_secret'] = undefined;

/**
 * The HTTP method used to send event information to `event_url`. The default value is `POST`. For `voice` type applications only.
 * @member {String} event_method
 */
CreateApplicationRequest.prototype['event_method'] = undefined;

/**
 * Nexmo sends event information asynchronously to this URL when status changes for `voice` applications. Always required for `voice` applications.
 * @member {String} event_url
 */
CreateApplicationRequest.prototype['event_url'] = undefined;

/**
 * The HTTP method used to send event information to `inbound_url`. The default value is `POST`. For `messages` type applications only.
 * @member {String} inbound_method
 */
CreateApplicationRequest.prototype['inbound_method'] = undefined;

/**
 * Nexmo sends a request to this URL when an inbound message is received. Required for `messages` type applications only.
 * @member {String} inbound_url
 */
CreateApplicationRequest.prototype['inbound_url'] = undefined;

/**
 * The name of your application.
 * @member {String} name
 */
CreateApplicationRequest.prototype['name'] = undefined;

/**
 * The HTTP method used to send event information to `status_url`. The default value is `POST`. For `messages` type applications only.
 * @member {String} status_method
 */
CreateApplicationRequest.prototype['status_method'] = undefined;

/**
 * Nexmo sends event information asynchronously to this URL when status changes. Required for `messages` type applications only.
 * @member {String} status_url
 */
CreateApplicationRequest.prototype['status_url'] = undefined;

/**
 * The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported.
 * @member {module:model/CreateApplicationRequest.TypeEnum} type
 */
CreateApplicationRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateApplicationRequest['TypeEnum'] = {

    /**
     * value: "voice"
     * @const
     */
    "voice": "voice",

    /**
     * value: "messages"
     * @const
     */
    "messages": "messages"
};



export default CreateApplicationRequest;

