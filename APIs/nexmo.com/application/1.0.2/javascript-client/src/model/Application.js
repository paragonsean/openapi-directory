/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Keys from './Keys';
import Links from './Links';
import Messages from './Messages';
import Voice from './Voice';

/**
 * The Application model module.
 * @module model/Application
 * @version 1.0.2
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * @alias module:model/Application
     * @param messages {module:model/Messages} 
     * @param name {String} The name of your application
     * @param voice {module:model/Voice} 
     */
    constructor(messages, name, voice) { 
        
        Application.initialize(this, messages, name, voice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messages, name, voice) { 
        obj['messages'] = messages;
        obj['name'] = name;
        obj['voice'] = voice;
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = Links.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('keys')) {
                obj['keys'] = Keys.constructFromObject(data['keys']);
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = Messages.constructFromObject(data['messages']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('voice')) {
                obj['voice'] = Voice.constructFromObject(data['voice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Application</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Application</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Application.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          Links.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `keys`
        if (data['keys']) { // data not null
          Keys.validateJSON(data['keys']);
        }
        // validate the optional field `messages`
        if (data['messages']) { // data not null
          Messages.validateJSON(data['messages']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `voice`
        if (data['voice']) { // data not null
          Voice.validateJSON(data['voice']);
        }

        return true;
    }


}

Application.RequiredProperties = ["messages", "name", "voice"];

/**
 * @member {module:model/Links} _links
 */
Application.prototype['_links'] = undefined;

/**
 * The ID allocated to your application by Nexmo.
 * @member {String} id
 */
Application.prototype['id'] = undefined;

/**
 * @member {module:model/Keys} keys
 */
Application.prototype['keys'] = undefined;

/**
 * @member {module:model/Messages} messages
 */
Application.prototype['messages'] = undefined;

/**
 * The name of your application
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * @member {module:model/Voice} voice
 */
Application.prototype['voice'] = undefined;






export default Application;

