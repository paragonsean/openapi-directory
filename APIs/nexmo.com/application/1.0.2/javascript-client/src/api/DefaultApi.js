/**
 * Nexmo Application API
 * <div class=\"Vlt-callout Vlt-callout--critical\"> <i></i> <div class=\"Vlt-callout__content\">   <h4>Applications V1 is deprecated</h4>   This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards </div> </div> A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import ApplicationCreated from '../model/ApplicationCreated';
import Applications from '../model/Applications';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Application
     * You use a `POST` request to create a new application.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateApplicationRequest} [createApplicationRequest] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCreated}
     */
    createApplication(opts, callback) {
      opts = opts || {};
      let postBody = opts['createApplicationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationCreated;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy Application
     * You use a `DELETE` request to delete a single application.
     * @param {String} appId The ID allocated to your application by Nexmo.
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplication(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApplication");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{app_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveApplication operation.
     * @callback module:api/DefaultApi~retrieveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Application
     * You use a `GET` request to retrieve details about a single application.
     * @param {String} apiKey You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param {String} apiSecret You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param {String} appId The ID allocated to your application by Nexmo.
     * @param {module:api/DefaultApi~retrieveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    retrieveApplication(apiKey, apiSecret, appId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrieveApplication");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling retrieveApplication");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling retrieveApplication");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/{app_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveApplications operation.
     * @callback module:api/DefaultApi~retrieveApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Applications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Applications
     * You use a `GET` request to retrieve details of all applications associated with your account.
     * @param {String} apiKey You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param {String} apiSecret You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 10)] Set the number of items returned on each call to this endpoint. The default is 10 records.
     * @param {Number} [pageIndex = 0)] Set the offset from the first page. The default value is `0`.
     * @param {module:api/DefaultApi~retrieveApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Applications}
     */
    retrieveApplications(apiKey, apiSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrieveApplications");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling retrieveApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'page_size': opts['pageSize'],
        'page_index': opts['pageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Applications;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Application
     * You use a `PUT` request to update an existing application.
     * @param {String} appId The ID allocated to your application by Nexmo.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateApplicationRequest} [updateApplicationRequest] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    updateApplication(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateApplicationRequest'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApplication");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/{app_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
