/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelToOneOf from './ChannelToOneOf';
import Model0 from './Model0';
import Model2 from './Model2';
import Model3 from './Model3';
import Model4 from './Model4';

/**
 * The ChannelTo model module.
 * @module model/ChannelTo
 * @version 2.0.1
 */
class ChannelTo {
    /**
     * Constructs a new <code>ChannelTo</code>.
     * @alias module:model/ChannelTo
     * @param {(module:model/ChannelToOneOf|module:model/Model0|module:model/Model2|module:model/Model3|module:model/Model4)} instance The actual instance to initialize ChannelTo.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Model0") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Model0.validateJSON(instance); // throw an exception if no match
                // create Model0 from JS object
                this.actualInstance = Model0.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Model0
            errorMessages.push("Failed to construct Model0: " + err)
        }

        try {
            if (typeof instance === "ChannelToOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelToOneOf.validateJSON(instance); // throw an exception if no match
                // create ChannelToOneOf from JS object
                this.actualInstance = ChannelToOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelToOneOf
            errorMessages.push("Failed to construct ChannelToOneOf: " + err)
        }

        try {
            if (typeof instance === "Model2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Model2.validateJSON(instance); // throw an exception if no match
                // create Model2 from JS object
                this.actualInstance = Model2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Model2
            errorMessages.push("Failed to construct Model2: " + err)
        }

        try {
            if (typeof instance === "Model3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Model3.validateJSON(instance); // throw an exception if no match
                // create Model3 from JS object
                this.actualInstance = Model3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Model3
            errorMessages.push("Failed to construct Model3: " + err)
        }

        try {
            if (typeof instance === "Model4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Model4.validateJSON(instance); // throw an exception if no match
                // create Model4 from JS object
                this.actualInstance = Model4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Model4
            errorMessages.push("Failed to construct Model4: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ChannelTo` with oneOf schemas ChannelToOneOf, Model0, Model2, Model3, Model4. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ChannelTo` with oneOf schemas ChannelToOneOf, Model0, Model2, Model3, Model4. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ChannelTo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelTo} obj Optional instance to populate.
     * @return {module:model/ChannelTo} The populated <code>ChannelTo</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ChannelTo(data);
    }

    /**
     * Gets the actual instance, which can be <code>ChannelToOneOf</code>, <code>Model0</code>, <code>Model2</code>, <code>Model3</code>, <code>Model4</code>.
     * @return {(module:model/ChannelToOneOf|module:model/Model0|module:model/Model2|module:model/Model3|module:model/Model4)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ChannelToOneOf</code>, <code>Model0</code>, <code>Model2</code>, <code>Model3</code>, <code>Model4</code>.
     * @param {(module:model/ChannelToOneOf|module:model/Model0|module:model/Model2|module:model/Model3|module:model/Model4)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ChannelTo.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ChannelTo from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ChannelTo} An instance of ChannelTo.
     */
    static fromJSON = function(json_string){
        return ChannelTo.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf) to send when the call is answered
 * @member {String} dtmfAnswer
 */
ChannelTo.prototype['dtmfAnswer'] = undefined;

/**
 * @member {Number} number
 */
ChannelTo.prototype['number'] = undefined;

/**
 * The type of connection. Must be `phone`
 * @member {String} type
 */
ChannelTo.prototype['type'] = undefined;


ChannelTo.OneOf = ["ChannelToOneOf", "Model0", "Model2", "Model3", "Model4"];

export default ChannelTo;

