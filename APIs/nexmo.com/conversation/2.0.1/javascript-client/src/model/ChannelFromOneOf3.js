/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelFromOneOf3Headers from './ChannelFromOneOf3Headers';

/**
 * The ChannelFromOneOf3 model module.
 * @module model/ChannelFromOneOf3
 * @version 2.0.1
 */
class ChannelFromOneOf3 {
    /**
     * Constructs a new <code>ChannelFromOneOf3</code>.
     * Connect to a Websocket
     * @alias module:model/ChannelFromOneOf3
     * @param contentType {module:model/ChannelFromOneOf3.ContentTypeEnum} 
     * @param type {String} The type of connection. Must be `websocket`
     */
    constructor(contentType, type) { 
        
        ChannelFromOneOf3.initialize(this, contentType, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, type) { 
        obj['content-type'] = contentType;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ChannelFromOneOf3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelFromOneOf3} obj Optional instance to populate.
     * @return {module:model/ChannelFromOneOf3} The populated <code>ChannelFromOneOf3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelFromOneOf3();

            if (data.hasOwnProperty('content-type')) {
                obj['content-type'] = ApiClient.convertToType(data['content-type'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ChannelFromOneOf3Headers.constructFromObject(data['headers']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelFromOneOf3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelFromOneOf3</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelFromOneOf3.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content-type'] && !(typeof data['content-type'] === 'string' || data['content-type'] instanceof String)) {
            throw new Error("Expected the field `content-type` to be a primitive type in the JSON string but got " + data['content-type']);
        }
        // validate the optional field `headers`
        if (data['headers']) { // data not null
          ChannelFromOneOf3Headers.validateJSON(data['headers']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

ChannelFromOneOf3.RequiredProperties = ["content-type", "type"];

/**
 * @member {module:model/ChannelFromOneOf3.ContentTypeEnum} content-type
 */
ChannelFromOneOf3.prototype['content-type'] = undefined;

/**
 * @member {module:model/ChannelFromOneOf3Headers} headers
 */
ChannelFromOneOf3.prototype['headers'] = undefined;

/**
 * The type of connection. Must be `websocket`
 * @member {String} type
 */
ChannelFromOneOf3.prototype['type'] = undefined;

/**
 * @member {String} uri
 */
ChannelFromOneOf3.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>content-type</code> property.
 * @enum {String}
 * @readonly
 */
ChannelFromOneOf3['ContentTypeEnum'] = {

    /**
     * value: "audio/l16;rate=8000"
     * @const
     */
    "8000": "audio/l16;rate=8000",

    /**
     * value: "audio/l16;rate=16000"
     * @const
     */
    "16000": "audio/l16;rate=16000"
};



export default ChannelFromOneOf3;

