/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Channel from './Channel';
import MemberAction from './MemberAction';

/**
 * The CreateMemberRequest model module.
 * @module model/CreateMemberRequest
 * @version 2.0.1
 */
class CreateMemberRequest {
    /**
     * Constructs a new <code>CreateMemberRequest</code>.
     * Create a Member in invite state 
     * @alias module:model/CreateMemberRequest
     * @param channel {module:model/Channel} 
     * @param userId {String} User ID
     */
    constructor(channel, userId) { 
        
        CreateMemberRequest.initialize(this, channel, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, userId) { 
        obj['channel'] = channel;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>CreateMemberRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMemberRequest} obj Optional instance to populate.
     * @return {module:model/CreateMemberRequest} The populated <code>CreateMemberRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMemberRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = MemberAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = Channel.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('knocking_id')) {
                obj['knocking_id'] = ApiClient.convertToType(data['knocking_id'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], Object);
            }
            if (data.hasOwnProperty('member_id')) {
                obj['member_id'] = ApiClient.convertToType(data['member_id'], 'String');
            }
            if (data.hasOwnProperty('member_id_inviting')) {
                obj['member_id_inviting'] = ApiClient.convertToType(data['member_id_inviting'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMemberRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMemberRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMemberRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          Channel.validateJSON(data['channel']);
        }
        // ensure the json data is a string
        if (data['knocking_id'] && !(typeof data['knocking_id'] === 'string' || data['knocking_id'] instanceof String)) {
            throw new Error("Expected the field `knocking_id` to be a primitive type in the JSON string but got " + data['knocking_id']);
        }
        // ensure the json data is a string
        if (data['member_id'] && !(typeof data['member_id'] === 'string' || data['member_id'] instanceof String)) {
            throw new Error("Expected the field `member_id` to be a primitive type in the JSON string but got " + data['member_id']);
        }
        // ensure the json data is a string
        if (data['member_id_inviting'] && !(typeof data['member_id_inviting'] === 'string' || data['member_id_inviting'] instanceof String)) {
            throw new Error("Expected the field `member_id_inviting` to be a primitive type in the JSON string but got " + data['member_id_inviting']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

CreateMemberRequest.RequiredProperties = ["channel", "user_id"];

/**
 * @member {module:model/MemberAction} action
 */
CreateMemberRequest.prototype['action'] = undefined;

/**
 * @member {module:model/Channel} channel
 */
CreateMemberRequest.prototype['channel'] = undefined;

/**
 * Knocker ID. A knocker is a pre-member of a conversation who does not exist yet
 * @member {String} knocking_id
 */
CreateMemberRequest.prototype['knocking_id'] = undefined;

/**
 * Media Object
 * @member {Object} media
 */
CreateMemberRequest.prototype['media'] = undefined;

/**
 * Member ID
 * @member {String} member_id
 */
CreateMemberRequest.prototype['member_id'] = undefined;

/**
 * Member ID of the member that sends the invitation
 * @member {String} member_id_inviting
 */
CreateMemberRequest.prototype['member_id_inviting'] = undefined;

/**
 * User ID
 * @member {String} user_id
 */
CreateMemberRequest.prototype['user_id'] = undefined;






export default CreateMemberRequest;

