/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelFromOneOf from './ChannelFromOneOf';
import ChannelFromOneOf1 from './ChannelFromOneOf1';
import ChannelFromOneOf2 from './ChannelFromOneOf2';
import ChannelFromOneOf3 from './ChannelFromOneOf3';
import ChannelFromOneOf3Headers from './ChannelFromOneOf3Headers';
import ChannelFromOneOf4 from './ChannelFromOneOf4';

/**
 * The ChannelFrom model module.
 * @module model/ChannelFrom
 * @version 2.0.1
 */
class ChannelFrom {
    /**
     * Constructs a new <code>ChannelFrom</code>.
     * @alias module:model/ChannelFrom
     * @param {(module:model/ChannelFromOneOf|module:model/ChannelFromOneOf1|module:model/ChannelFromOneOf2|module:model/ChannelFromOneOf3|module:model/ChannelFromOneOf4)} instance The actual instance to initialize ChannelFrom.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ChannelFromOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFromOneOf.validateJSON(instance); // throw an exception if no match
                // create ChannelFromOneOf from JS object
                this.actualInstance = ChannelFromOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFromOneOf
            errorMessages.push("Failed to construct ChannelFromOneOf: " + err)
        }

        try {
            if (typeof instance === "ChannelFromOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFromOneOf1.validateJSON(instance); // throw an exception if no match
                // create ChannelFromOneOf1 from JS object
                this.actualInstance = ChannelFromOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFromOneOf1
            errorMessages.push("Failed to construct ChannelFromOneOf1: " + err)
        }

        try {
            if (typeof instance === "ChannelFromOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFromOneOf2.validateJSON(instance); // throw an exception if no match
                // create ChannelFromOneOf2 from JS object
                this.actualInstance = ChannelFromOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFromOneOf2
            errorMessages.push("Failed to construct ChannelFromOneOf2: " + err)
        }

        try {
            if (typeof instance === "ChannelFromOneOf3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFromOneOf3.validateJSON(instance); // throw an exception if no match
                // create ChannelFromOneOf3 from JS object
                this.actualInstance = ChannelFromOneOf3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFromOneOf3
            errorMessages.push("Failed to construct ChannelFromOneOf3: " + err)
        }

        try {
            if (typeof instance === "ChannelFromOneOf4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFromOneOf4.validateJSON(instance); // throw an exception if no match
                // create ChannelFromOneOf4 from JS object
                this.actualInstance = ChannelFromOneOf4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFromOneOf4
            errorMessages.push("Failed to construct ChannelFromOneOf4: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ChannelFrom` with oneOf schemas ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ChannelFrom` with oneOf schemas ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ChannelFrom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelFrom} obj Optional instance to populate.
     * @return {module:model/ChannelFrom} The populated <code>ChannelFrom</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ChannelFrom(data);
    }

    /**
     * Gets the actual instance, which can be <code>ChannelFromOneOf</code>, <code>ChannelFromOneOf1</code>, <code>ChannelFromOneOf2</code>, <code>ChannelFromOneOf3</code>, <code>ChannelFromOneOf4</code>.
     * @return {(module:model/ChannelFromOneOf|module:model/ChannelFromOneOf1|module:model/ChannelFromOneOf2|module:model/ChannelFromOneOf3|module:model/ChannelFromOneOf4)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ChannelFromOneOf</code>, <code>ChannelFromOneOf1</code>, <code>ChannelFromOneOf2</code>, <code>ChannelFromOneOf3</code>, <code>ChannelFromOneOf4</code>.
     * @param {(module:model/ChannelFromOneOf|module:model/ChannelFromOneOf1|module:model/ChannelFromOneOf2|module:model/ChannelFromOneOf3|module:model/ChannelFromOneOf4)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ChannelFrom.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ChannelFrom from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ChannelFrom} An instance of ChannelFrom.
     */
    static fromJSON = function(json_string){
        return ChannelFrom.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The type of connection. Must be `vbc`
 * @member {String} type
 */
ChannelFrom.prototype['type'] = undefined;

/**
 * The username to connect to
 * @member {String} user
 */
ChannelFrom.prototype['user'] = undefined;

/**
 * The phone number to connect to
 * @member {String} number
 */
ChannelFrom.prototype['number'] = undefined;

/**
 * @member {String} uri
 */
ChannelFrom.prototype['uri'] = undefined;

/**
 * @member {module:model/ChannelFrom.ContentTypeEnum} content-type
 */
ChannelFrom.prototype['content-type'] = undefined;

/**
 * @member {module:model/ChannelFromOneOf3Headers} headers
 */
ChannelFrom.prototype['headers'] = undefined;

/**
 * @member {String} extension
 */
ChannelFrom.prototype['extension'] = undefined;


ChannelFrom.OneOf = ["ChannelFromOneOf", "ChannelFromOneOf1", "ChannelFromOneOf2", "ChannelFromOneOf3", "ChannelFromOneOf4"];

export default ChannelFrom;

