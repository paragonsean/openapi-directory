/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinksConversation from './LinksConversation';
import RetrieveConversation200ResponseMembersInner from './RetrieveConversation200ResponseMembersInner';
import RetrieveConversation200ResponseProperties from './RetrieveConversation200ResponseProperties';
import TimestampResConversation from './TimestampResConversation';

/**
 * The RetrieveConversation200Response model module.
 * @module model/RetrieveConversation200Response
 * @version 2.0.1
 */
class RetrieveConversation200Response {
    /**
     * Constructs a new <code>RetrieveConversation200Response</code>.
     * Conversation Object
     * @alias module:model/RetrieveConversation200Response
     * @param uuid {String} The unique identifier for this conversation
     */
    constructor(uuid) { 
        
        RetrieveConversation200Response.initialize(this, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid) { 
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>RetrieveConversation200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetrieveConversation200Response} obj Optional instance to populate.
     * @return {module:model/RetrieveConversation200Response} The populated <code>RetrieveConversation200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetrieveConversation200Response();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksConversation.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('api_key')) {
                obj['api_key'] = ApiClient.convertToType(data['api_key'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [RetrieveConversation200ResponseMembersInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = ApiClient.convertToType(data['numbers'], Object);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = RetrieveConversation200ResponseProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('sequence_number')) {
                obj['sequence_number'] = ApiClient.convertToType(data['sequence_number'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = TimestampResConversation.constructFromObject(data['timestamp']);
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetrieveConversation200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetrieveConversation200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RetrieveConversation200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          LinksConversation.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['api_key'] && !(typeof data['api_key'] === 'string' || data['api_key'] instanceof String)) {
            throw new Error("Expected the field `api_key` to be a primitive type in the JSON string but got " + data['api_key']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        if (data['members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['members'])) {
                throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
            }
            // validate the optional field `members` (array)
            for (const item of data['members']) {
                RetrieveConversation200ResponseMembersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          RetrieveConversation200ResponseProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['sequence_number'] && !(typeof data['sequence_number'] === 'string' || data['sequence_number'] instanceof String)) {
            throw new Error("Expected the field `sequence_number` to be a primitive type in the JSON string but got " + data['sequence_number']);
        }
        // validate the optional field `timestamp`
        if (data['timestamp']) { // data not null
          TimestampResConversation.validateJSON(data['timestamp']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

RetrieveConversation200Response.RequiredProperties = ["uuid"];

/**
 * @member {module:model/LinksConversation} _links
 */
RetrieveConversation200Response.prototype['_links'] = undefined;

/**
 * The API key for your account
 * @member {String} api_key
 */
RetrieveConversation200Response.prototype['api_key'] = undefined;

/**
 * The display name for the conversation. It does not have to be unique
 * @member {String} display_name
 */
RetrieveConversation200Response.prototype['display_name'] = undefined;

/**
 * Users associated to this conversation as members
 * @member {Array.<module:model/RetrieveConversation200ResponseMembersInner>} members
 */
RetrieveConversation200Response.prototype['members'] = undefined;

/**
 * Unique name for a conversation
 * @member {String} name
 */
RetrieveConversation200Response.prototype['name'] = undefined;

/**
 * @member {Object} numbers
 */
RetrieveConversation200Response.prototype['numbers'] = undefined;

/**
 * @member {module:model/RetrieveConversation200ResponseProperties} properties
 */
RetrieveConversation200Response.prototype['properties'] = undefined;

/**
 * The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)
 * @member {String} sequence_number
 */
RetrieveConversation200Response.prototype['sequence_number'] = undefined;

/**
 * @member {module:model/TimestampResConversation} timestamp
 */
RetrieveConversation200Response.prototype['timestamp'] = undefined;

/**
 * The unique identifier for this conversation
 * @member {String} uuid
 */
RetrieveConversation200Response.prototype['uuid'] = undefined;






export default RetrieveConversation200Response;

