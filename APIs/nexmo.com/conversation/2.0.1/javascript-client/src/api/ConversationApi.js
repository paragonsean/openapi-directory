/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateConversation200Response from '../model/CreateConversation200Response';
import CreateConversationRequest from '../model/CreateConversationRequest';
import ListConversations200Response from '../model/ListConversations200Response';
import RecordConversationRequest from '../model/RecordConversationRequest';
import RetrieveConversation200Response from '../model/RetrieveConversation200Response';

/**
* Conversation service.
* @module api/ConversationApi
* @version 2.0.1
*/
export default class ConversationApi {

    /**
    * Constructs a new ConversationApi. 
    * @alias module:api/ConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConversation operation.
     * @callback module:api/ConversationApi~createConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConversation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a conversation
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateConversationRequest} [createConversationRequest] Conversation Request Payload Object
     * @param {module:api/ConversationApi~createConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConversation200Response}
     */
    createConversation(opts, callback) {
      opts = opts || {};
      let postBody = opts['createConversationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConversation200Response;
      return this.apiClient.callApi(
        '/conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConversation operation.
     * @callback module:api/ConversationApi~deleteConversationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation
     * @param {String} conversationId Conversation ID
     * @param {module:api/ConversationApi~deleteConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConversation(conversationId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling deleteConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversations operation.
     * @callback module:api/ConversationApi~listConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversations200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List conversations
     * This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).  List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
     * @param {Object} opts Optional parameters
     * @param {String} [dateStart] Return the records that occurred after this point in time.
     * @param {String} [dateEnd] Return the records that occurred before this point in time.
     * @param {Number} [pageSize = 10)] Return this amount of records in the response
     * @param {Number} [recordIndex = 0)] Return calls from this index in the response
     * @param {module:model/String} [order = 'asc')] Return the records in ascending or descending order.
     * @param {module:api/ConversationApi~listConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversations200Response}
     */
    listConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'page_size': opts['pageSize'],
        'record_index': opts['recordIndex'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversations200Response;
      return this.apiClient.callApi(
        '/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordConversation operation.
     * @callback module:api/ConversationApi~recordConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record a conversation
     * @param {String} conversationId Conversation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordConversationRequest} [recordConversationRequest] Record Conversation Request Payload Object
     * @param {module:api/ConversationApi~recordConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recordConversation(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['recordConversationRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling recordConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.nexmo.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/conversations/{conversation_id}/record', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceConversation operation.
     * @callback module:api/ConversationApi~replaceConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConversation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a conversation
     * @param {String} conversationId Conversation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateConversationRequest} [createConversationRequest] Conversation Request Payload Object
     * @param {module:api/ConversationApi~replaceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConversation200Response}
     */
    replaceConversation(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createConversationRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling replaceConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConversation200Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveConversation operation.
     * @callback module:api/ConversationApi~retrieveConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveConversation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a conversation
     * @param {String} conversationId Conversation ID
     * @param {module:api/ConversationApi~retrieveConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveConversation200Response}
     */
    retrieveConversation(conversationId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling retrieveConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveConversation200Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
