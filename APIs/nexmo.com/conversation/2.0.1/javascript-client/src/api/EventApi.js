/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateEvent201Response from '../model/CreateEvent201Response';
import CreateEventRequest from '../model/CreateEventRequest';
import EventRetrieved from '../model/EventRetrieved';

/**
* Event service.
* @module api/EventApi
* @version 2.0.1
*/
export default class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEvent operation.
     * @callback module:api/EventApi~createEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEvent201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an event
     * @param {String} conversationId Conversation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateEventRequest} [createEventRequest] 
     * @param {module:api/EventApi~createEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEvent201Response}
     */
    createEvent(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEventRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling createEvent");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEvent201Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvent operation.
     * @callback module:api/EventApi~deleteEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event
     * @param {String} conversationId Conversation ID
     * @param {String} eventId Event ID
     * @param {module:api/EventApi~deleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEvent(conversationId, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling deleteEvent");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteEvent");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events/{event_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/EventApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRetrieved} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an event
     * @param {String} conversationId Conversation ID
     * @param {String} eventId Event ID
     * @param {module:api/EventApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRetrieved}
     */
    getEvent(conversationId, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getEvent");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEvent");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventRetrieved;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events/{event_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/EventApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventRetrieved>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List events
     * This endpoint is **DEPRECATED**. Please use [/v0.2/events](/api/conversation.v2#get-events).
     * @param {String} conversationId Conversation ID
     * @param {module:api/EventApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventRetrieved>}
     */
    getEvents(conversationId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getEvents");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventRetrieved];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
