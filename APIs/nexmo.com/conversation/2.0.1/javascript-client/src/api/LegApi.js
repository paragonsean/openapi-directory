/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListLegs200Response from '../model/ListLegs200Response';

/**
* Leg service.
* @module api/LegApi
* @version 2.0.1
*/
export default class LegApi {

    /**
    * Constructs a new LegApi. 
    * @alias module:api/LegApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLeg operation.
     * @callback module:api/LegApi~deleteLegCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a leg
     * @param {String} legId Leg ID
     * @param {module:api/LegApi~deleteLegCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLeg(legId, callback) {
      let postBody = null;
      // verify the required parameter 'legId' is set
      if (legId === undefined || legId === null) {
        throw new Error("Missing the required parameter 'legId' when calling deleteLeg");
      }

      let pathParams = {
        'leg_id': legId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/legs/{leg_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLegs operation.
     * @callback module:api/LegApi~listLegsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLegs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List legs
     * @param {module:api/LegApi~listLegsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLegs200Response}
     */
    listLegs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLegs200Response;
      return this.apiClient.callApi(
        '/legs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
