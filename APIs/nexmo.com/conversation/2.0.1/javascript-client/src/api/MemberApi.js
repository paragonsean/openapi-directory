/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMember201Response from '../model/CreateMember201Response';
import CreateMemberRequest from '../model/CreateMemberRequest';
import GetMember200Response from '../model/GetMember200Response';
import GetMembers200ResponseInner from '../model/GetMembers200ResponseInner';
import UpdateMemberRequest from '../model/UpdateMemberRequest';

/**
* Member service.
* @module api/MemberApi
* @version 2.0.1
*/
export default class MemberApi {

    /**
    * Constructs a new MemberApi. 
    * @alias module:api/MemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMember operation.
     * @callback module:api/MemberApi~createMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMember201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a member
     * @param {String} conversationId Conversation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMemberRequest} [createMemberRequest] 
     * @param {module:api/MemberApi~createMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMember201Response}
     */
    createMember(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMemberRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling createMember");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMember201Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMember operation.
     * @callback module:api/MemberApi~deleteMemberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a member
     * @param {String} conversationId Conversation ID
     * @param {String} memberId Member ID
     * @param {module:api/MemberApi~deleteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMember(conversationId, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling deleteMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling deleteMember");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/members/{member_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMember operation.
     * @callback module:api/MemberApi~getMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMember200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a member
     * @param {String} conversationId Conversation ID
     * @param {String} memberId Member ID
     * @param {module:api/MemberApi~getMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMember200Response}
     */
    getMember(conversationId, memberId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getMember");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMember200Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/members/{member_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembers operation.
     * @callback module:api/MemberApi~getMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMembers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     * @param {String} conversationId Conversation ID
     * @param {module:api/MemberApi~getMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMembers200ResponseInner>}
     */
    getMembers(conversationId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getMembers");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMembers200ResponseInner];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMember operation.
     * @callback module:api/MemberApi~updateMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMember200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a member
     * @param {String} conversationId Conversation ID
     * @param {String} memberId Member ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMemberRequest} [updateMemberRequest] 
     * @param {module:api/MemberApi~updateMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMember200Response}
     */
    updateMember(conversationId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateMemberRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling updateMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling updateMember");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'member_id': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMember200Response;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/members/{member_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
