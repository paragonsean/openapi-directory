/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConversationApi);
  }
}(this, function(expect, ConversationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListLegs200ResponseEmbeddedLegsInner', function() {
    it('should create an instance of ListLegs200ResponseEmbeddedLegsInner', function() {
      // uncomment below and update the code to test ListLegs200ResponseEmbeddedLegsInner
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be.a(ConversationApi.ListLegs200ResponseEmbeddedLegsInner);
    });

    it('should have the property embedded (base name: "_embedded")', function() {
      // uncomment below and update the code to test the property embedded
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property conversationUuid (base name: "conversation_uuid")', function() {
      // uncomment below and update the code to test the property conversationUuid
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property startEnd (base name: "start_end")', function() {
      // uncomment below and update the code to test the property startEnd
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new ConversationApi.ListLegs200ResponseEmbeddedLegsInner();
      //expect(instance).to.be();
    });

  });

}));
