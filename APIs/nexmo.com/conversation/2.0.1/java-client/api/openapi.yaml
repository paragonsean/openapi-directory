openapi: 3.0.0
info:
  contact:
    email: devrel@vonage.com
    name: Vonage DevRel
    url: https://developer.nexmo.com/
  description: "The Conversation API enables you to build conversation features where\
    \ communication can take place across multiple mediums including IP Messaging,\
    \ PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations\
    \ is maintained though each communication event taking place within a conversation,\
    \ no matter the medium."
  title: Conversation API
  version: 2.0.1
  x-label: Beta
  x-logo:
    url: https://www.vonage.com/content/dam/vonage/us-en/api/illustrations/Mobile_APIs_Services.svg
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/nexmo/api-specification/master/definitions/conversation.yml
    version: "3.0"
  x-providerName: nexmo.com
  x-serviceName: conversation
servers:
- url: https://api.nexmo.com/v0.1
security:
- bearerAuth: []
tags:
- description: A conversation is a shared core component that Vonage APIs rely on.
    Conversations happen over multiple mediums and and can have associated Users through
    Memberships.
  name: conversation
- description: "The concept of a user exists in Vonage APIs, you can associate one\
    \ with a user in your own application if you choose. A user can have multiple\
    \ memberships to conversations and can communicate with other users through various\
    \ different mediums."
  name: user
- description: Memberships connect users with conversations. Each membership has one
    conversation and one user however a user can have many memberships to conversations
    just as conversations can have many members.
  name: member
- description: "Events are actions that occur within a conversation. Examples of this\
    \ includes: Text events from members, or invite events from users"
  name: event
- description: "A leg can be a video call, IP call, or PSTN call that users participate\
    \ in using multiple platforms. With this endpoint you can retrieve the details\
    \ about all of the legs that took place in your application."
  name: leg
- description: Rtc actions. Any rtc action related (like starting a new rtc connection).
  name: rtc
paths:
  /conversations:
    get:
      deprecated: true
      description: |-
        This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).

        List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
      operationId: listConversations
      parameters:
      - description: Return the records that occurred after this point in time.
        explode: true
        in: query
        name: date_start
        required: false
        schema:
          example: 2018-01-01 10:00:00
          format: dateTime
          type: string
        style: form
      - description: Return the records that occurred before this point in time.
        explode: true
        in: query
        name: date_end
        required: false
        schema:
          example: 2018-01-01 12:00:00
          format: dateTime
          type: string
        style: form
      - description: Return this amount of records in the response
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          $ref: '#/components/schemas/page_size'
        style: form
      - description: Return calls from this index in the response
        explode: true
        in: query
        name: record_index
        required: false
        schema:
          $ref: '#/components/schemas/record_index'
        style: form
      - description: Return the records in ascending or descending order.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listConversations_200_response'
          description: List Conversations Response Payload Object.
      summary: List conversations
      tags:
      - conversation
      x-accepts:
      - application/json
    post:
      operationId: createConversation
      requestBody:
        $ref: '#/components/requestBodies/Conversation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createConversation_200_response'
          description: Create / Update Conversation Response Payload Object
      summary: Create a conversation
      tags:
      - conversation
      x-content-type: application/json
      x-accepts:
      - application/json
  /conversations/{conversation_id}:
    delete:
      operationId: deleteConversation
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Empty JSON payload
                example: {}
                type: object
          description: Success response with empty JSON
      summary: Delete a conversation
      tags:
      - conversation
      x-accepts:
      - application/json
    get:
      operationId: retrieveConversation
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retrieveConversation_200_response'
          description: Retrieve a conversation
      summary: Retrieve a conversation
      tags:
      - conversation
      x-accepts:
      - application/json
    put:
      operationId: replaceConversation
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Conversation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createConversation_200_response'
          description: Create / Update Conversation Response Payload Object
      summary: Update a conversation
      tags:
      - conversation
      x-content-type: application/json
      x-accepts:
      - application/json
  /conversations/{conversation_id}/events:
    get:
      deprecated: true
      description: "This endpoint is **DEPRECATED**. Please use [/v0.2/events](/api/conversation.v2#get-events)."
      operationId: getEvents
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/event_retrieved'
                type: array
          description: Retrieve Events Response Payload Object
      summary: List events
      tags:
      - event
      x-accepts:
      - application/json
    post:
      operationId: createEvent
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEvent_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEvent_201_response'
          description: Create New Event Response Payload Object
      summary: Create an event
      tags:
      - event
      x-content-type: application/json
      x-accepts:
      - application/json
  /conversations/{conversation_id}/events/{event_id}:
    delete:
      operationId: deleteEvent
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      - description: Event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Empty JSON payload
                example: {}
                type: object
          description: Success response with empty JSON
      summary: Delete an event
      tags:
      - event
      x-accepts:
      - application/json
    get:
      operationId: getEvent
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      - description: Event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_retrieved'
          description: Retrieve an event Content Payload
      summary: Retrieve an event
      tags:
      - event
      x-accepts:
      - application/json
  /conversations/{conversation_id}/members:
    get:
      deprecated: true
      description: "This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members)."
      operationId: getMembers
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getMembers_200_response_inner'
                type: array
          description: Members List Object
      summary: List members
      tags:
      - member
      x-accepts:
      - application/json
    post:
      operationId: createMember
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMember_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMember_201_response'
          description: 'Create or invite Member in invite state '
      summary: Create a member
      tags:
      - member
      x-content-type: application/json
      x-accepts:
      - application/json
  /conversations/{conversation_id}/members/{member_id}:
    delete:
      operationId: deleteMember
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      - description: Member ID
        explode: false
        in: path
        name: member_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Empty JSON payload
                example: {}
                type: object
          description: Success response with empty JSON
      summary: Delete a member
      tags:
      - member
      x-accepts:
      - application/json
    get:
      operationId: getMember
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      - description: Member ID
        explode: false
        in: path
        name: member_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMember_200_response'
          description: Retrieve member payload
      summary: Retrieve a member
      tags:
      - member
      x-accepts:
      - application/json
    put:
      operationId: updateMember
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      - description: Member ID
        explode: false
        in: path
        name: member_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMember_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMember_200_response'
          description: Member retrieved
      summary: Update a member
      tags:
      - member
      x-content-type: application/json
      x-accepts:
      - application/json
  /conversations/{conversation_id}/record:
    put:
      operationId: recordConversation
      parameters:
      - description: Conversation ID
        example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
        explode: false
        in: path
        name: conversation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/RecordConversation'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Record a conversation
      tags:
      - conversation
      x-content-type: application/json
      x-accepts:
      - application/json
    servers:
    - description: "Override base path for the PUT /conversations/{conversation_id}/record\
        \ operation"
      url: https://api.nexmo.com/v1
  /legs:
    get:
      operationId: listLegs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listLegs_200_response'
          description: List Legs Successfully
      summary: List legs
      tags:
      - leg
      x-accepts:
      - application/json
  /legs/{leg_id}:
    delete:
      operationId: deleteLeg
      parameters:
      - description: Leg ID
        explode: false
        in: path
        name: leg_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Empty JSON payload
                example: {}
                type: object
          description: Success response with empty JSON
      summary: Delete a leg
      tags:
      - leg
      x-accepts:
      - application/json
  /users:
    get:
      deprecated: true
      description: "This endpoint is **DEPRECATED**. Please use [/v0.2/users](/api/conversation.v2#get-users)."
      operationId: getUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getUsers_200_response_inner'
                type: array
          description: List of users
      summary: List users
      tags:
      - user
      x-accepts:
      - application/json
    post:
      description: "Note: Users must be created with an admin JWT."
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUser_200_response'
          description: Create a user response
      summary: Create a user
      tags:
      - user
      x-content-type: application/json
      x-accepts:
      - application/json
  /users/{user_id}:
    delete:
      operationId: deleteUser
      parameters:
      - description: User ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Empty JSON payload
                example: {}
                type: object
          description: Success response with empty JSON
      summary: Delete a user
      tags:
      - user
      x-accepts:
      - application/json
    get:
      operationId: getUser
      parameters:
      - description: User ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUser_200_response'
          description: Retrieve a user
      summary: Retrieve a user
      tags:
      - user
      x-accepts:
      - application/json
    put:
      operationId: updateUser
      parameters:
      - description: User ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUser_200_response'
          description: Retrieve a user
      summary: Update a user
      tags:
      - user
      x-content-type: application/json
      x-accepts:
      - application/json
  /users/{user_id}/conversations:
    get:
      operationId: getuserConversations
      parameters:
      - description: User ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getuserConversations_200_response_inner'
                type: array
          description: List user conversations
      summary: List user conversations
      tags:
      - user
      x-accepts:
      - application/json
components:
  parameters:
    conversation_id:
      description: Conversation ID
      example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22
      explode: false
      in: path
      name: conversation_id
      required: true
      schema:
        type: string
      style: simple
    date_end:
      description: Return the records that occurred before this point in time.
      explode: true
      in: query
      name: date_end
      required: false
      schema:
        example: 2018-01-01 12:00:00
        format: dateTime
        type: string
      style: form
    date_start:
      description: Return the records that occurred after this point in time.
      explode: true
      in: query
      name: date_start
      required: false
      schema:
        example: 2018-01-01 10:00:00
        format: dateTime
        type: string
      style: form
    event_id:
      description: Event ID
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        type: string
      style: simple
    leg_id:
      description: Leg ID
      explode: false
      in: path
      name: leg_id
      required: true
      schema:
        type: string
      style: simple
    member_id:
      description: Member ID
      explode: false
      in: path
      name: member_id
      required: true
      schema:
        type: string
      style: simple
    order:
      description: Return the records in ascending or descending order.
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: asc
        enum:
        - asc
        - desc
        - ASC
        - DESC
        type: string
      style: form
    page_size:
      description: Return this amount of records in the response
      explode: true
      in: query
      name: page_size
      required: false
      schema:
        $ref: '#/components/schemas/page_size'
      style: form
    record_index:
      description: Return calls from this index in the response
      explode: true
      in: query
      name: record_index
      required: false
      schema:
        $ref: '#/components/schemas/record_index'
      style: form
    user_id:
      description: User ID
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: string
      style: simple
  requestBodies:
    Conversation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createConversation_request'
      description: Conversation Request Payload Object
    EmptyBody:
      content:
        application/json:
          schema:
            example: {}
            type: object
      description: Conversation Request Payload Object
      required: true
    RecordConversation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/recordConversation_request'
      description: Record Conversation Request Payload Object
  responses:
    ConversationLite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createConversation_200_response'
      description: Create / Update Conversation Response Payload Object
    SuccessEmptyJSON:
      content:
        application/json:
          schema:
            description: Empty JSON payload
            example: {}
            type: object
      description: Success response with empty JSON
  schemas:
    _links_conversation:
      example:
        self:
          href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        self:
          $ref: '#/components/schemas/listConversations_200_response__embedded_conversations_inner__links_self'
      type: object
    _links_conversations_list:
      description: A series of links between resources in this API in the http://stateless.co/hal_specification.html.
      example:
        self:
          href: https://api.nexmo.com/v0.1/conversations?page_size=2&record_index=10&
      properties:
        self:
          $ref: '#/components/schemas/_links_conversations_list_self'
      required:
      - self
      type: object
    action:
      description: Recording Action
      enum:
      - start
      - stop
      example: start
      type: string
    channel:
      description: "A user who joins a conversation as a member can have one channel\
        \ per membership type. Channels can be `app`, `phone`, `sip`, `websocket`,\
        \ or `vbc`"
      example:
        leg_ids:
        - leg_id: a595959595959595995
        - leg_id: a595959595959595995
        leg_id: a595959595959595995
        from:
          type: app
          user: jamie
        to:
          number: "{}"
          dtmfAnswer: p*123#
          type: phone
        type: phone
      properties:
        from:
          $ref: '#/components/schemas/channel_from'
        leg_id:
          description: The id of the leg. rtc_id and call_id are leg id
          example: a595959595959595995
          type: string
        leg_ids:
          description: "Leg ids associated with this Channel. The first item in the\
            \ array represents the main active Leg. The second item, if exists, represents\
            \ a screen-share Leg."
          items:
            $ref: '#/components/schemas/channel_leg_ids_inner'
          type: array
        to:
          $ref: '#/components/schemas/channel_to'
        type:
          $ref: '#/components/schemas/channel_type'
      type: object
    channel_number:
      description: this can be a phone number or a random string
      example: a447700900585
      type: string
    channel_type:
      description: Channel type
      enum:
      - app
      - phone
      - sip
      - websocket
      - vbc
      example: phone
      type: string
    conversation_id:
      description: The unique identifier for this conversation
      example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
      type: string
    conversation_properties:
      description: Conversation properties
      properties:
        ttl:
          description: Time to leave. After how many seconds an empty conversation
            is deleted.
          example: 60
          type: number
      type: object
    display_name:
      description: The display name for the conversation. It does not have to be unique
      example: Customer Chat
      type: string
    display_name_user:
      description: A string to be displayed as user name. It does not need to be unique
      example: My User Name
      type: string
    event_body:
      description: Event Body
      example:
        text: My Text
      type: object
    event_id:
      description: Event id. This is a progressive integer
      example: "5"
      type: string
    event_method:
      default: POST
      description: The HTTP method used to send event information to event_url.
      example: POST
      type: string
    event_retrieved:
      description: Retrieve Events Response Payload Object Item
      example:
        from: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1
        id: "5"
        state: invited
        to: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        body:
          text: My Text
        type: text
        timestamp: 2020-01-01T14:00:00.00Z
      properties:
        body:
          description: Event Body
          example:
            text: My Text
          type: object
        from:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        href:
          description: A link towards a conversation event included in Conversation
            API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1
          format: url
          type: string
        id:
          description: Event id. This is a progressive integer
          example: "5"
          type: string
        state:
          $ref: '#/components/schemas/member_state'
        timestamp:
          description: Time of creation
          example: 2020-01-01T14:00:00.00Z
          type: string
        to:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        type:
          description: Event type
          example: text
          type: string
      required:
      - body
      - href
      - id
      - timestamp
      - type
      type: object
    event_type:
      description: Event type
      example: text
      type: string
    event_url:
      description: The webhook endpoint where recording progress events are sent to.
      example:
      - https://example.com/event
      items:
        format: url
        type: string
      type: array
      x-nexmo-developer-collection-description-shown: true
    format:
      default: mp3
      description: Record the Conversation in a specific format.
      enum:
      - mp3
      - wav
      example: mp3
      type: string
    href:
      description: A link towards a resources included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
      format: url
      type: string
    href_conversation:
      description: A link towards a conversation included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
      format: url
      type: string
    href_conversations_list:
      description: A link towards a conversations list included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations?page_size=2&record_index=10&
      format: url
      type: string
    href_event:
      description: A link towards a conversation event included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1
      format: url
      type: string
    href_member:
      description: A link towards a member included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391
      format: url
      type: string
    href_rtc:
      description: A link towards a rtc (leg) included in Conversation API
      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/rtc/7777777777777
      format: url
      type: string
    href_user:
      description: A link towards a user included in Conversation API
      example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
      format: url
      type: string
    image_url:
      description: A link to an image for conversations' and users' avatars
      example: https://example.com/image.png
      format: url
      type: string
    initiator:
      example:
        joined:
          isSystem: true
          member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        joined:
          $ref: '#/components/schemas/initiator_joined'
      type: object
    knocker_id:
      description: Knocker ID. A knocker is a pre-member of a conversation who does
        not exist yet
      example: a972836a-450f-35fa-156c-52a2ab5b7d25
      type: string
    leg_id:
      description: The id of the leg. rtc_id and call_id are leg id
      example: a595959595959595995
      type: string
    leg_state:
      description: Leg Status
      enum:
      - terminated
      example: terminated
      type: string
    media:
      description: Media Object
      example:
        audio_settings:
          earmuffed: false
          enabled: false
          muted: false
      properties: {}
      type: object
    member_action:
      description: Invite or join a member to a conversation
      enum:
      - invite
      - join
      example: join
      type: string
    member_id:
      description: Member ID
      example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
      type: string
    member_id_inviting:
      description: Member ID of the member that sends the invitation
      example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
      type: string
    member_state:
      description: "The state that the member is in. Possible values are `invited`,\
        \ `joined`, `left`, or `unknown`"
      enum:
      - invited
      - joined
      - left
      - unknown
      example: invited
      type: string
    name:
      description: Unique name
      example: my_unique_name
      type: string
    name_conversation:
      description: Unique name for a conversation
      example: customer_chat
      type: string
    name_user:
      description: Unique name for a user
      example: my_user_name
      type: string
    page_size:
      default: 10
      description: The amount of records returned in this response
      example: 50
      maximum: 100
      minimum: 1
      type: number
    record_index:
      default: 0
      description: "Return `page_size` amount of conversations from this index in\
        \ the response. That is, if your request returns 300 conversations, set `record_index`\
        \ to 5 in order to return conversations 50 to 59. The default value is 0.\
        \ That is, the first `page_size` calls."
      example: 0
      minimum: 0
      type: number
    split:
      default: conversation
      description: Record the sent and received audio in separate channels of a stereo
        recording
      example: conversation
      type: string
    timestamp:
      description: Timestamp
      example: 2020-01-01T14:00:00.00Z
      type: string
    timestamp_created:
      description: Time of creation
      example: 2020-01-01T14:00:00.00Z
      type: string
    timestamp_destroyed:
      description: Time of last update
      example: 2020-01-01T14:20:00.00Z
      type: string
    timestamp_leg_end_time:
      description: Time of leg end
      example: 2020-01-01T14:00:00.00Z
      type: string
    timestamp_leg_start_time:
      description: Time of leg start
      example: 2020-01-01T14:00:00.00Z
      type: string
    timestamp_obj_leg:
      properties:
        end:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
        request:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
        start:
          description: Time of creation
          example: 2020-01-01T14:00:00.00Z
          type: string
      type: object
    timestamp_res_conversation:
      example:
        destroyed: 2020-01-01T14:20:00.00Z
        created: 2020-01-01T14:00:00.00Z
        updated: 2020-01-01T14:05:00.00Z
      properties:
        created:
          description: Time of creation
          example: 2020-01-01T14:00:00.00Z
          type: string
        destroyed:
          description: Time of last update
          example: 2020-01-01T14:20:00.00Z
          type: string
        updated:
          description: Time of last update
          example: 2020-01-01T14:05:00.00Z
          type: string
      type: object
    timestamp_res_event:
      description: Time of event creation
      example: 2020-01-01T14:00:00.00Z
      type: string
    timestamp_res_member:
      example:
        left: 2020-01-01T14:00:00.00Z
        joined: 2020-01-01T14:00:00.00Z
        invited: 2020-01-01T14:00:00.00Z
      properties:
        invited:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
        joined:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
        left:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
      type: object
    timestamp_updated:
      description: Time of last update
      example: 2020-01-01T14:05:00.00Z
      type: string
    user_id:
      description: User ID
      example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      type: string
    user_id_or_user_name:
      description: user name or user id of the inviter
      example: someone_else_user_name
      type: string
    listConversations_200_response__embedded_conversations_inner__links_self:
      example:
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a conversation included in Conversation API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
      type: object
    listConversations_200_response__embedded_conversations_inner__links:
      example:
        self:
          href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        self:
          $ref: '#/components/schemas/listConversations_200_response__embedded_conversations_inner__links_self'
      type: object
    listConversations_200_response__embedded_conversations_inner:
      example:
        _links:
          self:
            href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
        name: customer_chat
        uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        _links:
          $ref: '#/components/schemas/listConversations_200_response__embedded_conversations_inner__links'
        name:
          description: Unique name for a conversation
          example: customer_chat
          type: string
        uuid:
          description: The unique identifier for this conversation
          example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      required:
      - href
      - name
      - uuid
      type: object
    listConversations_200_response__embedded:
      description: "A list of conversation objects. See the [get details of a specific\
        \ conversation](#retrieveConversation) response fields for a description of\
        \ the nested objects"
      example:
        conversations:
        - _links:
            self:
              href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
          name: customer_chat
          uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
        - _links:
            self:
              href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
          name: customer_chat
          uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        conversations:
          items:
            $ref: '#/components/schemas/listConversations_200_response__embedded_conversations_inner'
          type: array
      required:
      - conversations
      type: object
    listConversations_200_response:
      example:
        record_index: 0
        _embedded:
          conversations:
          - _links:
              self:
                href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
            name: customer_chat
            uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          - _links:
              self:
                href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
            name: customer_chat
            uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
        _links:
          self:
            href: https://api.nexmo.com/v0.1/conversations?page_size=2&record_index=10&
        count: 100
        page_size: 50
      properties:
        _embedded:
          $ref: '#/components/schemas/listConversations_200_response__embedded'
        _links:
          $ref: '#/components/schemas/_links_conversations_list'
        count:
          description: The total number of records returned by your request.
          example: 100
          type: number
        page_size:
          default: 10
          description: The amount of records returned in this response
          example: 50
          maximum: 100
          minimum: 1
          type: number
        record_index:
          default: 0
          description: "Return `page_size` amount of conversations from this index\
            \ in the response. That is, if your request returns 300 conversations,\
            \ set `record_index` to 5 in order to return conversations 50 to 59. The\
            \ default value is 0. That is, the first `page_size` calls."
          example: 0
          minimum: 0
          type: number
      required:
      - _embedded
      - _links
      - count
      - page_size
      - record_index
      type: object
    createConversation_request:
      properties:
        display_name:
          description: The display name for the conversation. It does not have to
            be unique
          example: Customer Chat
          type: string
        image_url:
          description: A link to an image for conversations' and users' avatars
          example: https://example.com/image.png
          format: url
          type: string
        name:
          description: Unique name for a conversation
          example: customer_chat
          type: string
        properties:
          $ref: '#/components/schemas/conversation_properties'
      type: object
    createConversation_200_response:
      example:
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
        id: CON-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a conversation included in Conversation API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: The unique identifier for this conversation
          example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      required:
      - href
      - id
      type: object
    retrieveConversation_200_response_members_inner:
      example:
        member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
        initiator:
          joined:
            isSystem: true
            member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
            user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
        channel:
          leg_ids:
          - leg_id: a595959595959595995
          - leg_id: a595959595959595995
          leg_id: a595959595959595995
          from:
            type: app
            user: jamie
          to:
            number: "{}"
            dtmfAnswer: p*123#
            type: phone
          type: phone
        name: my_user_name
        state: invited
        timestamp:
          left: 2020-01-01T14:00:00.00Z
          joined: 2020-01-01T14:00:00.00Z
          invited: 2020-01-01T14:00:00.00Z
      properties:
        channel:
          $ref: '#/components/schemas/channel'
        initiator:
          $ref: '#/components/schemas/initiator'
        member_id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
        state:
          $ref: '#/components/schemas/member_state'
        timestamp:
          $ref: '#/components/schemas/timestamp_res_member'
        user_id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      type: object
    retrieveConversation_200_response_properties:
      example:
        video: false
      properties:
        video:
          example: false
          type: boolean
      type: object
    retrieveConversation_200_response:
      description: Conversation Object
      example:
        sequence_number: "1"
        _links:
          self:
            href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
        api_key: api_key
        members:
        - member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          initiator:
            joined:
              isSystem: true
              member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
              user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          channel:
            leg_ids:
            - leg_id: a595959595959595995
            - leg_id: a595959595959595995
            leg_id: a595959595959595995
            from:
              type: app
              user: jamie
            to:
              number: "{}"
              dtmfAnswer: p*123#
              type: phone
            type: phone
          name: my_user_name
          state: invited
          timestamp:
            left: 2020-01-01T14:00:00.00Z
            joined: 2020-01-01T14:00:00.00Z
            invited: 2020-01-01T14:00:00.00Z
        - member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          initiator:
            joined:
              isSystem: true
              member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
              user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          channel:
            leg_ids:
            - leg_id: a595959595959595995
            - leg_id: a595959595959595995
            leg_id: a595959595959595995
            from:
              type: app
              user: jamie
            to:
              number: "{}"
              dtmfAnswer: p*123#
              type: phone
            type: phone
          name: my_user_name
          state: invited
          timestamp:
            left: 2020-01-01T14:00:00.00Z
            joined: 2020-01-01T14:00:00.00Z
            invited: 2020-01-01T14:00:00.00Z
        name: customer_chat
        numbers: "{}"
        display_name: Customer Chat
        uuid: CON-63f61863-4a51-4f6b-86e1-46edebio0391
        properties:
          video: false
        timestamp:
          destroyed: 2020-01-01T14:20:00.00Z
          created: 2020-01-01T14:00:00.00Z
          updated: 2020-01-01T14:05:00.00Z
      properties:
        _links:
          $ref: '#/components/schemas/_links_conversation'
        api_key:
          description: The API key for your account
          type: string
        display_name:
          description: The display name for the conversation. It does not have to
            be unique
          example: Customer Chat
          type: string
        members:
          description: Users associated to this conversation as members
          items:
            $ref: '#/components/schemas/retrieveConversation_200_response_members_inner'
          type: array
        name:
          description: Unique name for a conversation
          example: customer_chat
          type: string
        numbers:
          properties: {}
          type: object
        properties:
          $ref: '#/components/schemas/retrieveConversation_200_response_properties'
        sequence_number:
          description: "The last Event ID in this conversation. This ID can be used\
            \ to [retrieve a specific event](#getEvent)"
          example: "1"
          type: string
        timestamp:
          $ref: '#/components/schemas/timestamp_res_conversation'
        uuid:
          description: The unique identifier for this conversation
          example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      required:
      - uuid
      type: object
    createEvent_request:
      description: Create New Event Request Payload Object
      properties:
        body:
          description: Event Body
          example:
            text: My Text
          type: object
        from:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        to:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        type:
          description: Event type
          example: text
          type: string
      required:
      - from
      - type
      type: object
    createEvent_201_response:
      description: Create New Event Response Payload Object
      example:
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1
        id: "5"
        timestamp: 2020-01-01T14:00:00.00Z
      properties:
        href:
          description: A link towards a conversation event included in Conversation
            API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1
          format: url
          type: string
        id:
          description: Event id. This is a progressive integer
          example: "5"
          type: string
        timestamp:
          description: Time of event creation
          example: 2020-01-01T14:00:00.00Z
          type: string
      type: object
    getMembers_200_response_inner:
      example:
        user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
        user_name: my_user_name
        name: my_user_name
        state: invited
      properties:
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
        state:
          $ref: '#/components/schemas/member_state'
        user_id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        user_name:
          description: Unique name for a user
          example: my_user_name
          type: string
      required:
      - name
      - state
      - user_id
      - user_name
      type: object
    createMember_request:
      description: 'Create a Member in invite state '
      properties:
        action:
          $ref: '#/components/schemas/member_action'
        channel:
          $ref: '#/components/schemas/channel'
        knocking_id:
          description: Knocker ID. A knocker is a pre-member of a conversation who
            does not exist yet
          example: a972836a-450f-35fa-156c-52a2ab5b7d25
          type: string
        media:
          description: Media Object
          example:
            audio_settings:
              earmuffed: false
              enabled: false
              muted: false
          properties: {}
          type: object
        member_id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        member_id_inviting:
          description: Member ID of the member that sends the invitation
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        user_id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      required:
      - channel
      - user_id
      type: object
    createMember_201_response:
      example:
        user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
        initiator:
          joined:
            isSystem: true
            member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
            user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
        channel:
          leg_ids:
          - leg_id: a595959595959595995
          - leg_id: a595959595959595995
          leg_id: a595959595959595995
          from:
            type: app
            user: jamie
          to:
            number: "{}"
            dtmfAnswer: p*123#
            type: phone
          type: phone
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        state: invited
        timestamp:
          left: 2020-01-01T14:00:00.00Z
          joined: 2020-01-01T14:00:00.00Z
          invited: 2020-01-01T14:00:00.00Z
      properties:
        channel:
          $ref: '#/components/schemas/channel'
        href:
          description: A link towards a member included in Conversation API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        initiator:
          $ref: '#/components/schemas/initiator'
        state:
          $ref: '#/components/schemas/member_state'
        timestamp:
          $ref: '#/components/schemas/timestamp_res_member'
        user_id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      type: object
    getMember_200_response:
      example:
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a member included in Conversation API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
    updateMember_request:
      properties:
        action:
          $ref: '#/components/schemas/member_action'
        channel:
          $ref: '#/components/schemas/channel'
    recordConversation_request:
      properties:
        action:
          $ref: '#/components/schemas/action'
        event_method:
          default: POST
          description: The HTTP method used to send event information to event_url.
          example: POST
          type: string
        event_url:
          description: The webhook endpoint where recording progress events are sent
            to.
          example:
          - https://example.com/event
          items:
            format: url
            type: string
          type: array
          x-nexmo-developer-collection-description-shown: true
        format:
          $ref: '#/components/schemas/format'
        split:
          default: conversation
          description: Record the sent and received audio in separate channels of
            a stereo recording
          example: conversation
          type: string
      required:
      - action
      type: object
    listLegs_200_response__embedded_legs_inner:
      properties:
        _embedded:
          type: object
        _links:
          type: object
        conversation_uuid:
          description: The unique identifier for this conversation
          example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        from:
          type: object
        start_end:
          description: Time of leg end
          example: 2020-01-01T14:00:00.00Z
          type: string
        start_time:
          description: Time of leg start
          example: 2020-01-01T14:00:00.00Z
          type: string
        state:
          $ref: '#/components/schemas/leg_state'
        to:
          type: object
        type:
          $ref: '#/components/schemas/channel_type'
        uuid:
          description: The id of the leg. rtc_id and call_id are leg id
          example: a595959595959595995
          type: string
      required:
      - href
      - name
      - uuid
      type: object
    listLegs_200_response__embedded:
      description: "A list of conversation objects. See the [get details of a specific\
        \ conversation](#retrieveConversation) response fields for a description of\
        \ the nested objects"
      properties:
        legs:
          items:
            $ref: '#/components/schemas/listLegs_200_response__embedded_legs_inner'
          type: array
      required:
      - legs
      type: object
    listLegs_200_response__links_self:
      properties:
        href:
          type: string
      type: object
    listLegs_200_response__links:
      properties:
        self:
          $ref: '#/components/schemas/listLegs_200_response__links_self'
      required:
      - self
      type: object
    listLegs_200_response:
      description: List Legs Response Payload Object
      example:
        _embedded:
          legs:
          - _links:
              self:
                href: https://api.nexmo.com/v0.1/legs/2a71f8a1-b6f1-42b3-9eef-c69729e17513
            conversation_uuid: CON-511d076b-9d39-498c-baa7-b7a4bfbd6e32
            end_time: ""
            from:
              type: app
            rtc:
              session_id: SES-84ebef0d-321a-47e6-8446-f4fcc5ca74b9
              state: terminated
            start_time: ""
            status: completed
            to:
              type: app
            type: app
            uuid: 2a71f8a1-b6f1-42b3-9eef-c69729e17513
        _links:
          self:
            href: https://api.nexmo.com/v0.1/legs
        count: 1
        page_size: 10
        record_index: 0
      properties:
        _embedded:
          $ref: '#/components/schemas/listLegs_200_response__embedded'
        _links:
          $ref: '#/components/schemas/listLegs_200_response__links'
        count:
          description: The total number of records returned by your request.
          example: 100
          type: number
        page_size:
          default: 10
          description: The amount of records returned in this response
          example: 50
          maximum: 100
          minimum: 1
          type: number
        record_index:
          default: 0
          description: "Return `page_size` amount of conversations from this index\
            \ in the response. That is, if your request returns 300 conversations,\
            \ set `record_index` to 5 in order to return conversations 50 to 59. The\
            \ default value is 0. That is, the first `page_size` calls."
          example: 0
          minimum: 0
          type: number
      required:
      - _embedded
      - _links
      - count
      - page_size
      - record_index
      type: object
    getUsers_200_response_inner:
      example:
        name: my_user_name
        href: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
        id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a user included in Conversation API
          example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
      type: object
    createUser_request:
      description: 'Create a Member in invite state '
      properties:
        display_name:
          description: A string to be displayed as user name. It does not need to
            be unique
          example: My User Name
          type: string
        image_url:
          description: A link to an image for conversations' and users' avatars
          example: https://example.com/image.png
          format: url
          type: string
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
      type: object
    createUser_200_response:
      example:
        href: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
        id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a user included in Conversation API
          example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      type: object
    getUser_200_response:
      example:
        name: my_user_name
        href: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
        id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
    updateUser_request:
      properties:
        channels:
          $ref: '#/components/schemas/channel'
        display_name:
          description: A string to be displayed as user name. It does not need to
            be unique
          example: My User Name
          type: string
        image_url:
          description: A link to an image for conversations' and users' avatars
          example: https://example.com/image.png
          format: url
          type: string
        name:
          description: Unique name for a user
          example: my_user_name
          type: string
    updateUser_200_response:
      example:
        href: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
        id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        href:
          description: A link towards a user included in Conversation API
          example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
    getuserConversations_200_response_inner_timestamp:
      example:
        created: 2020-01-01T14:00:00.00Z
      properties:
        created:
          description: Timestamp
          example: 2020-01-01T14:00:00.00Z
          type: string
      type: object
    getuserConversations_200_response_inner:
      example:
        member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        sequence_number: 123
        image_url: https://example.com/image.png
        name: customer_chat
        href: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
        id: CON-63f61863-4a51-4f6b-86e1-46edebio0391
        state: invited
        display_name: Customer Chat
        timestamp:
          created: 2020-01-01T14:00:00.00Z
      properties:
        display_name:
          description: The display name for the conversation. It does not have to
            be unique
          example: Customer Chat
          type: string
        href:
          description: A link towards a resources included in Conversation API
          example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391
          format: url
          type: string
        id:
          description: The unique identifier for this conversation
          example: CON-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        image_url:
          description: A link to an image for conversations' and users' avatars
          example: https://example.com/image.png
          format: url
          type: string
        member_id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        name:
          description: Unique name for a conversation
          example: customer_chat
          type: string
        sequence_number:
          description: the id of the last event of the conversation (event's id is
            an incremental number
          example: 123
          format: url
          type: integer
        state:
          $ref: '#/components/schemas/member_state'
        timestamp:
          $ref: '#/components/schemas/getuserConversations_200_response_inner_timestamp'
      type: object
    _links_conversations_list_self:
      example:
        href: https://api.nexmo.com/v0.1/conversations?page_size=2&record_index=10&
      properties:
        href:
          description: A link towards a conversations list included in Conversation
            API
          example: https://api.nexmo.com/v0.1/conversations?page_size=2&record_index=10&
          format: url
          type: string
      required:
      - href
      type: object
    channel_from_oneOf:
      description: Connect to an App User
      example:
        type: app
        user: jamie
      properties:
        type:
          description: The type of connection. Must be `app`
          example: app
          type: string
        user:
          description: The username to connect to
          example: jamie
          type: string
      required:
      - type
      - user
      type: object
    channel_from_oneOf_1:
      description: Connect to a Phone (PSTN) number
      properties:
        number:
          description: The phone number to connect to
          example: "14155550100"
          maxLength: 15
          minLength: 7
          pattern: "\\d{7,15}"
          type: string
        type:
          description: The type of connection. Must be `phone`
          example: phone
          type: string
      required:
      - number
      - type
      type: object
    channel_from_oneOf_2:
      description: Connect to a SIP Endpoint
      properties:
        type:
          description: The type of connection. Must be `sip`
          example: sip
          type: string
        uri:
          description: The SIP URI to connect to
          example: sip:rebekka@sip.example.com
          maxLength: 50
          minLength: 1
          type: string
      required:
      - type
      type: object
    channel_from_oneOf_3_headers:
      description: Details of the Websocket you want to connect to
      properties:
        customer_id:
          description: This is an example header. You can provide any headers you
            may need
          example: ABC123
          type: string
      type: object
    channel_from_oneOf_3:
      description: Connect to a Websocket
      properties:
        content-type:
          enum:
          - audio/l16;rate=8000
          - audio/l16;rate=16000
          example: audio/l16;rate=16000
          type: string
        headers:
          $ref: '#/components/schemas/channel_from_oneOf_3_headers'
        type:
          description: The type of connection. Must be `websocket`
          example: websocket
          type: string
        uri:
          example: wss://example.com/socket
          maxLength: 50
          minLength: 1
          type: string
      required:
      - content-type
      - type
      type: object
    channel_from_oneOf_4:
      description: Connect to a VBC extension
      properties:
        extension:
          example: "1234"
          type: string
        type:
          description: The type of connection. Must be `vbc`
          example: vbc
          type: string
      required:
      - extension
      - type
      type: object
    channel_from:
      oneOf:
      - $ref: '#/components/schemas/channel_from_oneOf'
      - $ref: '#/components/schemas/channel_from_oneOf_1'
      - $ref: '#/components/schemas/channel_from_oneOf_2'
      - $ref: '#/components/schemas/channel_from_oneOf_3'
      - $ref: '#/components/schemas/channel_from_oneOf_4'
    channel_leg_ids_inner:
      example:
        leg_id: a595959595959595995
      properties:
        leg_id:
          description: The id of the leg. rtc_id and call_id are leg id
          example: a595959595959595995
          type: string
    channel_to_oneOf:
      description: Connect to a Phone (PSTN) number
      example:
        number: "{}"
        dtmfAnswer: p*123#
        type: phone
      properties:
        dtmfAnswer:
          description: "Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf)\
            \ to send when the call is answered"
          example: p*123#
          type: string
        number:
          $ref: '#/components/schemas/channel/properties/from/oneOf/1/properties/number'
        type:
          description: The type of connection. Must be `phone`
          example: phone
          type: string
      required:
      - number
      - type
      type: object
    channel_to:
      oneOf:
      - $ref: '#/components/schemas/channel/properties/from/oneOf/0'
      - $ref: '#/components/schemas/channel_to_oneOf'
      - $ref: '#/components/schemas/channel/properties/from/oneOf/2'
      - $ref: '#/components/schemas/channel/properties/from/oneOf/3'
      - $ref: '#/components/schemas/channel/properties/from/oneOf/4'
    initiator_joined:
      example:
        isSystem: true
        member_id: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
        user_id: USR-63f61863-4a51-4f6b-86e1-46edebio0391
      properties:
        isSystem:
          description: '`true` if the user was invited by an admin JWT. `user_id`
            and `member_id` will not exist if `true`'
          type: boolean
        member_id:
          description: Member ID
          example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
        user_id:
          description: User ID
          example: USR-63f61863-4a51-4f6b-86e1-46edebio0391
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

