/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUser200Response;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.GetUser200Response;
import org.openapitools.client.model.GetUsers200ResponseInner;
import org.openapitools.client.model.GetuserConversations200ResponseInner;
import org.openapitools.client.model.UpdateUser200Response;
import org.openapitools.client.model.UpdateUserRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Create a user
     *
     * Note: Users must be created with an admin JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        CreateUser200Response response = api.createUser(createUserRequest);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        Object response = api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        GetUser200Response response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * List users
     *
     * This endpoint is **DEPRECATED**. Please use [/v0.2/users](/api/conversation.v2#get-users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        List<GetUsers200ResponseInner> response = api.getUsers();
        // TODO: test validations
    }

    /**
     * List user conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getuserConversationsTest() throws ApiException {
        String userId = null;
        List<GetuserConversations200ResponseInner> response = api.getuserConversations(userId);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        UpdateUserRequest updateUserRequest = null;
        UpdateUser200Response response = api.updateUser(userId, updateUserRequest);
        // TODO: test validations
    }

}
