/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateMember201Response;
import org.openapitools.client.model.CreateMemberRequest;
import org.openapitools.client.model.GetMember200Response;
import org.openapitools.client.model.GetMembers200ResponseInner;
import org.openapitools.client.model.UpdateMemberRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MemberApi
 */
@Disabled
public class MemberApiTest {

    private final MemberApi api = new MemberApi();

    /**
     * Create a member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMemberTest() throws ApiException {
        String conversationId = null;
        CreateMemberRequest createMemberRequest = null;
        CreateMember201Response response = api.createMember(conversationId, createMemberRequest);
        // TODO: test validations
    }

    /**
     * Delete a member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        String conversationId = null;
        String memberId = null;
        Object response = api.deleteMember(conversationId, memberId);
        // TODO: test validations
    }

    /**
     * Retrieve a member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberTest() throws ApiException {
        String conversationId = null;
        String memberId = null;
        GetMember200Response response = api.getMember(conversationId, memberId);
        // TODO: test validations
    }

    /**
     * List members
     *
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersTest() throws ApiException {
        String conversationId = null;
        List<GetMembers200ResponseInner> response = api.getMembers(conversationId);
        // TODO: test validations
    }

    /**
     * Update a member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMemberTest() throws ApiException {
        String conversationId = null;
        String memberId = null;
        UpdateMemberRequest updateMemberRequest = null;
        GetMember200Response response = api.updateMember(conversationId, memberId, updateMemberRequest);
        // TODO: test validations
    }

}
