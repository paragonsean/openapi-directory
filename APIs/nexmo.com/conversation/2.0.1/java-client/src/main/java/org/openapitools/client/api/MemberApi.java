/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateMember201Response;
import org.openapitools.client.model.CreateMemberRequest;
import org.openapitools.client.model.GetMember200Response;
import org.openapitools.client.model.GetMembers200ResponseInner;
import org.openapitools.client.model.UpdateMemberRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMember
     * @param conversationId Conversation ID (required)
     * @param createMemberRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create or invite Member in invite state  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberCall(String conversationId, CreateMemberRequest createMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMemberRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/members"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMemberValidateBeforeCall(String conversationId, CreateMemberRequest createMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling createMember(Async)");
        }

        return createMemberCall(conversationId, createMemberRequest, _callback);

    }

    /**
     * Create a member
     * 
     * @param conversationId Conversation ID (required)
     * @param createMemberRequest  (optional)
     * @return CreateMember201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create or invite Member in invite state  </td><td>  -  </td></tr>
     </table>
     */
    public CreateMember201Response createMember(String conversationId, CreateMemberRequest createMemberRequest) throws ApiException {
        ApiResponse<CreateMember201Response> localVarResp = createMemberWithHttpInfo(conversationId, createMemberRequest);
        return localVarResp.getData();
    }

    /**
     * Create a member
     * 
     * @param conversationId Conversation ID (required)
     * @param createMemberRequest  (optional)
     * @return ApiResponse&lt;CreateMember201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create or invite Member in invite state  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMember201Response> createMemberWithHttpInfo(String conversationId, CreateMemberRequest createMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = createMemberValidateBeforeCall(conversationId, createMemberRequest, null);
        Type localVarReturnType = new TypeToken<CreateMember201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a member (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param createMemberRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create or invite Member in invite state  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberAsync(String conversationId, CreateMemberRequest createMemberRequest, final ApiCallback<CreateMember201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMemberValidateBeforeCall(conversationId, createMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateMember201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMember
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberCall(String conversationId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/members/{member_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMemberValidateBeforeCall(String conversationId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling deleteMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteMember(Async)");
        }

        return deleteMemberCall(conversationId, memberId, _callback);

    }

    /**
     * Delete a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMember(String conversationId, String memberId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMemberWithHttpInfo(conversationId, memberId);
        return localVarResp.getData();
    }

    /**
     * Delete a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMemberWithHttpInfo(String conversationId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(conversationId, memberId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a member (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberAsync(String conversationId, String memberId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(conversationId, memberId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMember
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve member payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberCall(String conversationId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/members/{member_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberValidateBeforeCall(String conversationId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling getMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getMember(Async)");
        }

        return getMemberCall(conversationId, memberId, _callback);

    }

    /**
     * Retrieve a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @return GetMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve member payload </td><td>  -  </td></tr>
     </table>
     */
    public GetMember200Response getMember(String conversationId, String memberId) throws ApiException {
        ApiResponse<GetMember200Response> localVarResp = getMemberWithHttpInfo(conversationId, memberId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @return ApiResponse&lt;GetMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve member payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMember200Response> getMemberWithHttpInfo(String conversationId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = getMemberValidateBeforeCall(conversationId, memberId, null);
        Type localVarReturnType = new TypeToken<GetMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a member (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve member payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMemberAsync(String conversationId, String memberId, final ApiCallback<GetMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberValidateBeforeCall(conversationId, memberId, _callback);
        Type localVarReturnType = new TypeToken<GetMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembers
     * @param conversationId Conversation ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Members List Object </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMembersCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/members"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling getMembers(Async)");
        }

        return getMembersCall(conversationId, _callback);

    }

    /**
     * List members
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     * @param conversationId Conversation ID (required)
     * @return List&lt;GetMembers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Members List Object </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<GetMembers200ResponseInner> getMembers(String conversationId) throws ApiException {
        ApiResponse<List<GetMembers200ResponseInner>> localVarResp = getMembersWithHttpInfo(conversationId);
        return localVarResp.getData();
    }

    /**
     * List members
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     * @param conversationId Conversation ID (required)
     * @return ApiResponse&lt;List&lt;GetMembers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Members List Object </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<GetMembers200ResponseInner>> getMembersWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = getMembersValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<List<GetMembers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List members (asynchronously)
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     * @param conversationId Conversation ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Members List Object </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMembersAsync(String conversationId, final ApiCallback<List<GetMembers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<List<GetMembers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMember
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param updateMemberRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberCall(String conversationId, String memberId, UpdateMemberRequest updateMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMemberRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/members/{member_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String conversationId, String memberId, UpdateMemberRequest updateMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling updateMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateMember(Async)");
        }

        return updateMemberCall(conversationId, memberId, updateMemberRequest, _callback);

    }

    /**
     * Update a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param updateMemberRequest  (optional)
     * @return GetMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member retrieved </td><td>  -  </td></tr>
     </table>
     */
    public GetMember200Response updateMember(String conversationId, String memberId, UpdateMemberRequest updateMemberRequest) throws ApiException {
        ApiResponse<GetMember200Response> localVarResp = updateMemberWithHttpInfo(conversationId, memberId, updateMemberRequest);
        return localVarResp.getData();
    }

    /**
     * Update a member
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param updateMemberRequest  (optional)
     * @return ApiResponse&lt;GetMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMember200Response> updateMemberWithHttpInfo(String conversationId, String memberId, UpdateMemberRequest updateMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(conversationId, memberId, updateMemberRequest, null);
        Type localVarReturnType = new TypeToken<GetMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a member (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param memberId Member ID (required)
     * @param updateMemberRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Member retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberAsync(String conversationId, String memberId, UpdateMemberRequest updateMemberRequest, final ApiCallback<GetMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(conversationId, memberId, updateMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<GetMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
