/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Format;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordConversationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordConversationRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Action action;

  public static final String SERIALIZED_NAME_EVENT_METHOD = "event_method";
  @SerializedName(SERIALIZED_NAME_EVENT_METHOD)
  private String eventMethod = "POST";

  public static final String SERIALIZED_NAME_EVENT_URL = "event_url";
  @SerializedName(SERIALIZED_NAME_EVENT_URL)
  private List<String> eventUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format = Format.MP3;

  public static final String SERIALIZED_NAME_SPLIT = "split";
  @SerializedName(SERIALIZED_NAME_SPLIT)
  private String split = "conversation";

  public RecordConversationRequest() {
  }

  public RecordConversationRequest action(Action action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public Action getAction() {
    return action;
  }

  public void setAction(Action action) {
    this.action = action;
  }


  public RecordConversationRequest eventMethod(String eventMethod) {
    this.eventMethod = eventMethod;
    return this;
  }

  /**
   * The HTTP method used to send event information to event_url.
   * @return eventMethod
   */
  @javax.annotation.Nullable
  public String getEventMethod() {
    return eventMethod;
  }

  public void setEventMethod(String eventMethod) {
    this.eventMethod = eventMethod;
  }


  public RecordConversationRequest eventUrl(List<String> eventUrl) {
    this.eventUrl = eventUrl;
    return this;
  }

  public RecordConversationRequest addEventUrlItem(String eventUrlItem) {
    if (this.eventUrl == null) {
      this.eventUrl = new ArrayList<>();
    }
    this.eventUrl.add(eventUrlItem);
    return this;
  }

  /**
   * The webhook endpoint where recording progress events are sent to.
   * @return eventUrl
   */
  @javax.annotation.Nullable
  public List<String> getEventUrl() {
    return eventUrl;
  }

  public void setEventUrl(List<String> eventUrl) {
    this.eventUrl = eventUrl;
  }


  public RecordConversationRequest format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public RecordConversationRequest split(String split) {
    this.split = split;
    return this;
  }

  /**
   * Record the sent and received audio in separate channels of a stereo recording
   * @return split
   */
  @javax.annotation.Nullable
  public String getSplit() {
    return split;
  }

  public void setSplit(String split) {
    this.split = split;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordConversationRequest recordConversationRequest = (RecordConversationRequest) o;
    return Objects.equals(this.action, recordConversationRequest.action) &&
        Objects.equals(this.eventMethod, recordConversationRequest.eventMethod) &&
        Objects.equals(this.eventUrl, recordConversationRequest.eventUrl) &&
        Objects.equals(this.format, recordConversationRequest.format) &&
        Objects.equals(this.split, recordConversationRequest.split);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, eventMethod, eventUrl, format, split);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordConversationRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    eventMethod: ").append(toIndentedString(eventMethod)).append("\n");
    sb.append("    eventUrl: ").append(toIndentedString(eventUrl)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    split: ").append(toIndentedString(split)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("event_method");
    openapiFields.add("event_url");
    openapiFields.add("format");
    openapiFields.add("split");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordConversationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordConversationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordConversationRequest is not found in the empty JSON string", RecordConversationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordConversationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordConversationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordConversationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      Action.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("event_method") != null && !jsonObj.get("event_method").isJsonNull()) && !jsonObj.get("event_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_method").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event_url") != null && !jsonObj.get("event_url").isJsonNull() && !jsonObj.get("event_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_url` to be an array in the JSON string but got `%s`", jsonObj.get("event_url").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        Format.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("split") != null && !jsonObj.get("split").isJsonNull()) && !jsonObj.get("split").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `split` to be a primitive type in the JSON string but got `%s`", jsonObj.get("split").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordConversationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordConversationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordConversationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordConversationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordConversationRequest>() {
           @Override
           public void write(JsonWriter out, RecordConversationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordConversationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordConversationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordConversationRequest
   * @throws IOException if the JSON string is invalid with respect to RecordConversationRequest
   */
  public static RecordConversationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordConversationRequest.class);
  }

  /**
   * Convert an instance of RecordConversationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

