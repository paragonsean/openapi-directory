/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateConversation200Response;
import org.openapitools.client.model.CreateConversationRequest;
import org.openapitools.client.model.ListConversations200Response;
import org.openapitools.client.model.RecordConversationRequest;
import org.openapitools.client.model.RetrieveConversation200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConversation
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationCall(CreateConversationRequest createConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConversationRequest;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConversationValidateBeforeCall(CreateConversationRequest createConversationRequest, final ApiCallback _callback) throws ApiException {
        return createConversationCall(createConversationRequest, _callback);

    }

    /**
     * Create a conversation
     * 
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @return CreateConversation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateConversation200Response createConversation(CreateConversationRequest createConversationRequest) throws ApiException {
        ApiResponse<CreateConversation200Response> localVarResp = createConversationWithHttpInfo(createConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a conversation
     * 
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @return ApiResponse&lt;CreateConversation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConversation200Response> createConversationWithHttpInfo(CreateConversationRequest createConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = createConversationValidateBeforeCall(createConversationRequest, null);
        Type localVarReturnType = new TypeToken<CreateConversation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a conversation (asynchronously)
     * 
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationAsync(CreateConversationRequest createConversationRequest, final ApiCallback<CreateConversation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConversationValidateBeforeCall(createConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateConversation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConversation
     * @param conversationId Conversation ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConversationValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling deleteConversation(Async)");
        }

        return deleteConversationCall(conversationId, _callback);

    }

    /**
     * Delete a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteConversation(String conversationId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteConversationWithHttpInfo(conversationId);
        return localVarResp.getData();
    }

    /**
     * Delete a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteConversationWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = deleteConversationValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a conversation (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response with empty JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationAsync(String conversationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConversationValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConversations
     * @param dateStart Return the records that occurred after this point in time. (optional)
     * @param dateEnd Return the records that occurred before this point in time. (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Return the records in ascending or descending order. (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Conversations Response Payload Object. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listConversationsCall(String dateStart, String dateEnd, BigDecimal pageSize, BigDecimal recordIndex, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (recordIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("record_index", recordIndex));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationsValidateBeforeCall(String dateStart, String dateEnd, BigDecimal pageSize, BigDecimal recordIndex, String order, final ApiCallback _callback) throws ApiException {
        return listConversationsCall(dateStart, dateEnd, pageSize, recordIndex, order, _callback);

    }

    /**
     * List conversations
     * This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).  List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
     * @param dateStart Return the records that occurred after this point in time. (optional)
     * @param dateEnd Return the records that occurred before this point in time. (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Return the records in ascending or descending order. (optional, default to asc)
     * @return ListConversations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Conversations Response Payload Object. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListConversations200Response listConversations(String dateStart, String dateEnd, BigDecimal pageSize, BigDecimal recordIndex, String order) throws ApiException {
        ApiResponse<ListConversations200Response> localVarResp = listConversationsWithHttpInfo(dateStart, dateEnd, pageSize, recordIndex, order);
        return localVarResp.getData();
    }

    /**
     * List conversations
     * This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).  List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
     * @param dateStart Return the records that occurred after this point in time. (optional)
     * @param dateEnd Return the records that occurred before this point in time. (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Return the records in ascending or descending order. (optional, default to asc)
     * @return ApiResponse&lt;ListConversations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Conversations Response Payload Object. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListConversations200Response> listConversationsWithHttpInfo(String dateStart, String dateEnd, BigDecimal pageSize, BigDecimal recordIndex, String order) throws ApiException {
        okhttp3.Call localVarCall = listConversationsValidateBeforeCall(dateStart, dateEnd, pageSize, recordIndex, order, null);
        Type localVarReturnType = new TypeToken<ListConversations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List conversations (asynchronously)
     * This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).  List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
     * @param dateStart Return the records that occurred after this point in time. (optional)
     * @param dateEnd Return the records that occurred before this point in time. (optional)
     * @param pageSize Return this amount of records in the response (optional, default to 10)
     * @param recordIndex Return calls from this index in the response (optional, default to 0)
     * @param order Return the records in ascending or descending order. (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Conversations Response Payload Object. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listConversationsAsync(String dateStart, String dateEnd, BigDecimal pageSize, BigDecimal recordIndex, String order, final ApiCallback<ListConversations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationsValidateBeforeCall(dateStart, dateEnd, pageSize, recordIndex, order, _callback);
        Type localVarReturnType = new TypeToken<ListConversations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordConversation
     * @param conversationId Conversation ID (required)
     * @param recordConversationRequest Record Conversation Request Payload Object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordConversationCall(String conversationId, RecordConversationRequest recordConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.nexmo.com/v1" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordConversationRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/record"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordConversationValidateBeforeCall(String conversationId, RecordConversationRequest recordConversationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling recordConversation(Async)");
        }

        return recordConversationCall(conversationId, recordConversationRequest, _callback);

    }

    /**
     * Record a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @param recordConversationRequest Record Conversation Request Payload Object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void recordConversation(String conversationId, RecordConversationRequest recordConversationRequest) throws ApiException {
        recordConversationWithHttpInfo(conversationId, recordConversationRequest);
    }

    /**
     * Record a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @param recordConversationRequest Record Conversation Request Payload Object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recordConversationWithHttpInfo(String conversationId, RecordConversationRequest recordConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = recordConversationValidateBeforeCall(conversationId, recordConversationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Record a conversation (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param recordConversationRequest Record Conversation Request Payload Object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordConversationAsync(String conversationId, RecordConversationRequest recordConversationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordConversationValidateBeforeCall(conversationId, recordConversationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceConversation
     * @param conversationId Conversation ID (required)
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceConversationCall(String conversationId, CreateConversationRequest createConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConversationRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceConversationValidateBeforeCall(String conversationId, CreateConversationRequest createConversationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling replaceConversation(Async)");
        }

        return replaceConversationCall(conversationId, createConversationRequest, _callback);

    }

    /**
     * Update a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @return CreateConversation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateConversation200Response replaceConversation(String conversationId, CreateConversationRequest createConversationRequest) throws ApiException {
        ApiResponse<CreateConversation200Response> localVarResp = replaceConversationWithHttpInfo(conversationId, createConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Update a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @return ApiResponse&lt;CreateConversation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConversation200Response> replaceConversationWithHttpInfo(String conversationId, CreateConversationRequest createConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceConversationValidateBeforeCall(conversationId, createConversationRequest, null);
        Type localVarReturnType = new TypeToken<CreateConversation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a conversation (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param createConversationRequest Conversation Request Payload Object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create / Update Conversation Response Payload Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceConversationAsync(String conversationId, CreateConversationRequest createConversationRequest, final ApiCallback<CreateConversation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceConversationValidateBeforeCall(conversationId, createConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateConversation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveConversation
     * @param conversationId Conversation ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a conversation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConversationCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveConversationValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling retrieveConversation(Async)");
        }

        return retrieveConversationCall(conversationId, _callback);

    }

    /**
     * Retrieve a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @return RetrieveConversation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a conversation </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveConversation200Response retrieveConversation(String conversationId) throws ApiException {
        ApiResponse<RetrieveConversation200Response> localVarResp = retrieveConversationWithHttpInfo(conversationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a conversation
     * 
     * @param conversationId Conversation ID (required)
     * @return ApiResponse&lt;RetrieveConversation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a conversation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveConversation200Response> retrieveConversationWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = retrieveConversationValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<RetrieveConversation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a conversation (asynchronously)
     * 
     * @param conversationId Conversation ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a conversation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConversationAsync(String conversationId, final ApiCallback<RetrieveConversation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveConversationValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveConversation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
