/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ChannelToOneOf;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelTo extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChannelTo.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChannelTo.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChannelTo' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Model0> adapterModel0 = gson.getDelegateAdapter(this, TypeToken.get(Model0.class));
            final TypeAdapter<ChannelToOneOf> adapterChannelToOneOf = gson.getDelegateAdapter(this, TypeToken.get(ChannelToOneOf.class));
            final TypeAdapter<Model2> adapterModel2 = gson.getDelegateAdapter(this, TypeToken.get(Model2.class));
            final TypeAdapter<Model3> adapterModel3 = gson.getDelegateAdapter(this, TypeToken.get(Model3.class));
            final TypeAdapter<Model4> adapterModel4 = gson.getDelegateAdapter(this, TypeToken.get(Model4.class));

            return (TypeAdapter<T>) new TypeAdapter<ChannelTo>() {
                @Override
                public void write(JsonWriter out, ChannelTo value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Model0`
                    if (value.getActualInstance() instanceof Model0) {
                        JsonElement element = adapterModel0.toJsonTree((Model0)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelToOneOf`
                    if (value.getActualInstance() instanceof ChannelToOneOf) {
                        JsonElement element = adapterChannelToOneOf.toJsonTree((ChannelToOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Model2`
                    if (value.getActualInstance() instanceof Model2) {
                        JsonElement element = adapterModel2.toJsonTree((Model2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Model3`
                    if (value.getActualInstance() instanceof Model3) {
                        JsonElement element = adapterModel3.toJsonTree((Model3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Model4`
                    if (value.getActualInstance() instanceof Model4) {
                        JsonElement element = adapterModel4.toJsonTree((Model4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ChannelToOneOf, Model0, Model2, Model3, Model4");
                }

                @Override
                public ChannelTo read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Model0
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Model0.validateJsonElement(jsonElement);
                        actualAdapter = adapterModel0;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Model0'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Model0 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Model0'", e);
                    }
                    // deserialize ChannelToOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelToOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelToOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelToOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelToOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelToOneOf'", e);
                    }
                    // deserialize Model2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Model2.validateJsonElement(jsonElement);
                        actualAdapter = adapterModel2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Model2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Model2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Model2'", e);
                    }
                    // deserialize Model3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Model3.validateJsonElement(jsonElement);
                        actualAdapter = adapterModel3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Model3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Model3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Model3'", e);
                    }
                    // deserialize Model4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Model4.validateJsonElement(jsonElement);
                        actualAdapter = adapterModel4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Model4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Model4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Model4'", e);
                    }

                    if (match == 1) {
                        ChannelTo ret = new ChannelTo();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ChannelTo: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ChannelTo() {
        super("oneOf", Boolean.FALSE);
    }

    public ChannelTo(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Model0", Model0.class);
        schemas.put("ChannelToOneOf", ChannelToOneOf.class);
        schemas.put("Model2", Model2.class);
        schemas.put("Model3", Model3.class);
        schemas.put("Model4", Model4.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ChannelTo.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ChannelToOneOf, Model0, Model2, Model3, Model4
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Model0) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelToOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Model2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Model3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Model4) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ChannelToOneOf, Model0, Model2, Model3, Model4");
    }

    /**
     * Get the actual instance, which can be the following:
     * ChannelToOneOf, Model0, Model2, Model3, Model4
     *
     * @return The actual instance (ChannelToOneOf, Model0, Model2, Model3, Model4)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Model0`. If the actual instance is not `Model0`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Model0`
     * @throws ClassCastException if the instance is not `Model0`
     */
    public Model0 getModel0() throws ClassCastException {
        return (Model0)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelToOneOf`. If the actual instance is not `ChannelToOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelToOneOf`
     * @throws ClassCastException if the instance is not `ChannelToOneOf`
     */
    public ChannelToOneOf getChannelToOneOf() throws ClassCastException {
        return (ChannelToOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Model2`. If the actual instance is not `Model2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Model2`
     * @throws ClassCastException if the instance is not `Model2`
     */
    public Model2 getModel2() throws ClassCastException {
        return (Model2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Model3`. If the actual instance is not `Model3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Model3`
     * @throws ClassCastException if the instance is not `Model3`
     */
    public Model3 getModel3() throws ClassCastException {
        return (Model3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Model4`. If the actual instance is not `Model4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Model4`
     * @throws ClassCastException if the instance is not `Model4`
     */
    public Model4 getModel4() throws ClassCastException {
        return (Model4)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ChannelTo
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Model0
        try {
            Model0.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Model0 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelToOneOf
        try {
            ChannelToOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelToOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Model2
        try {
            Model2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Model2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Model3
        try {
            Model3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Model3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Model4
        try {
            Model4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Model4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ChannelTo with oneOf schemas: ChannelToOneOf, Model0, Model2, Model3, Model4. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ChannelTo given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChannelTo
     * @throws IOException if the JSON string is invalid with respect to ChannelTo
     */
    public static ChannelTo fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChannelTo.class);
    }

    /**
     * Convert an instance of ChannelTo to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

