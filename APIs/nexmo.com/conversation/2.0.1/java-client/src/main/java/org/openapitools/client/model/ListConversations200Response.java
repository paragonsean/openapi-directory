/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.LinksConversationsList;
import org.openapitools.client.model.ListConversations200ResponseEmbedded;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListConversations200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListConversations200Response {
  public static final String SERIALIZED_NAME_EMBEDDED = "_embedded";
  @SerializedName(SERIALIZED_NAME_EMBEDDED)
  private ListConversations200ResponseEmbedded embedded;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private LinksConversationsList links;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private BigDecimal pageSize = new BigDecimal("10");

  public static final String SERIALIZED_NAME_RECORD_INDEX = "record_index";
  @SerializedName(SERIALIZED_NAME_RECORD_INDEX)
  private BigDecimal recordIndex = new BigDecimal("0");

  public ListConversations200Response() {
  }

  public ListConversations200Response embedded(ListConversations200ResponseEmbedded embedded) {
    this.embedded = embedded;
    return this;
  }

  /**
   * Get embedded
   * @return embedded
   */
  @javax.annotation.Nonnull
  public ListConversations200ResponseEmbedded getEmbedded() {
    return embedded;
  }

  public void setEmbedded(ListConversations200ResponseEmbedded embedded) {
    this.embedded = embedded;
  }


  public ListConversations200Response links(LinksConversationsList links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public LinksConversationsList getLinks() {
    return links;
  }

  public void setLinks(LinksConversationsList links) {
    this.links = links;
  }


  public ListConversations200Response count(BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * The total number of records returned by your request.
   * @return count
   */
  @javax.annotation.Nonnull
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public ListConversations200Response pageSize(BigDecimal pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The amount of records returned in this response
   * minimum: 1
   * maximum: 100
   * @return pageSize
   */
  @javax.annotation.Nonnull
  public BigDecimal getPageSize() {
    return pageSize;
  }

  public void setPageSize(BigDecimal pageSize) {
    this.pageSize = pageSize;
  }


  public ListConversations200Response recordIndex(BigDecimal recordIndex) {
    this.recordIndex = recordIndex;
    return this;
  }

  /**
   * Return &#x60;page_size&#x60; amount of conversations from this index in the response. That is, if your request returns 300 conversations, set &#x60;record_index&#x60; to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first &#x60;page_size&#x60; calls.
   * minimum: 0
   * @return recordIndex
   */
  @javax.annotation.Nonnull
  public BigDecimal getRecordIndex() {
    return recordIndex;
  }

  public void setRecordIndex(BigDecimal recordIndex) {
    this.recordIndex = recordIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListConversations200Response listConversations200Response = (ListConversations200Response) o;
    return Objects.equals(this.embedded, listConversations200Response.embedded) &&
        Objects.equals(this.links, listConversations200Response.links) &&
        Objects.equals(this.count, listConversations200Response.count) &&
        Objects.equals(this.pageSize, listConversations200Response.pageSize) &&
        Objects.equals(this.recordIndex, listConversations200Response.recordIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embedded, links, count, pageSize, recordIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListConversations200Response {\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    recordIndex: ").append(toIndentedString(recordIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_embedded");
    openapiFields.add("_links");
    openapiFields.add("count");
    openapiFields.add("page_size");
    openapiFields.add("record_index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_embedded");
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("page_size");
    openapiRequiredFields.add("record_index");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListConversations200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListConversations200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListConversations200Response is not found in the empty JSON string", ListConversations200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListConversations200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListConversations200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListConversations200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `_embedded`
      ListConversations200ResponseEmbedded.validateJsonElement(jsonObj.get("_embedded"));
      // validate the required field `_links`
      LinksConversationsList.validateJsonElement(jsonObj.get("_links"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListConversations200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListConversations200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListConversations200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListConversations200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ListConversations200Response>() {
           @Override
           public void write(JsonWriter out, ListConversations200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListConversations200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListConversations200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListConversations200Response
   * @throws IOException if the JSON string is invalid with respect to ListConversations200Response
   */
  public static ListConversations200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListConversations200Response.class);
  }

  /**
   * Convert an instance of ListConversations200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

