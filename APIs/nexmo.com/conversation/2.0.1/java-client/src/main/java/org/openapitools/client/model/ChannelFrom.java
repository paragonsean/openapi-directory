/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelFromOneOf;
import org.openapitools.client.model.ChannelFromOneOf1;
import org.openapitools.client.model.ChannelFromOneOf2;
import org.openapitools.client.model.ChannelFromOneOf3;
import org.openapitools.client.model.ChannelFromOneOf3Headers;
import org.openapitools.client.model.ChannelFromOneOf4;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelFrom extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChannelFrom.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChannelFrom.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChannelFrom' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ChannelFromOneOf> adapterChannelFromOneOf = gson.getDelegateAdapter(this, TypeToken.get(ChannelFromOneOf.class));
            final TypeAdapter<ChannelFromOneOf1> adapterChannelFromOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(ChannelFromOneOf1.class));
            final TypeAdapter<ChannelFromOneOf2> adapterChannelFromOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(ChannelFromOneOf2.class));
            final TypeAdapter<ChannelFromOneOf3> adapterChannelFromOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(ChannelFromOneOf3.class));
            final TypeAdapter<ChannelFromOneOf4> adapterChannelFromOneOf4 = gson.getDelegateAdapter(this, TypeToken.get(ChannelFromOneOf4.class));

            return (TypeAdapter<T>) new TypeAdapter<ChannelFrom>() {
                @Override
                public void write(JsonWriter out, ChannelFrom value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ChannelFromOneOf`
                    if (value.getActualInstance() instanceof ChannelFromOneOf) {
                        JsonElement element = adapterChannelFromOneOf.toJsonTree((ChannelFromOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelFromOneOf1`
                    if (value.getActualInstance() instanceof ChannelFromOneOf1) {
                        JsonElement element = adapterChannelFromOneOf1.toJsonTree((ChannelFromOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelFromOneOf2`
                    if (value.getActualInstance() instanceof ChannelFromOneOf2) {
                        JsonElement element = adapterChannelFromOneOf2.toJsonTree((ChannelFromOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelFromOneOf3`
                    if (value.getActualInstance() instanceof ChannelFromOneOf3) {
                        JsonElement element = adapterChannelFromOneOf3.toJsonTree((ChannelFromOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelFromOneOf4`
                    if (value.getActualInstance() instanceof ChannelFromOneOf4) {
                        JsonElement element = adapterChannelFromOneOf4.toJsonTree((ChannelFromOneOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4");
                }

                @Override
                public ChannelFrom read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ChannelFromOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFromOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFromOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFromOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFromOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFromOneOf'", e);
                    }
                    // deserialize ChannelFromOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFromOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFromOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFromOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFromOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFromOneOf1'", e);
                    }
                    // deserialize ChannelFromOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFromOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFromOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFromOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFromOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFromOneOf2'", e);
                    }
                    // deserialize ChannelFromOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFromOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFromOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFromOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFromOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFromOneOf3'", e);
                    }
                    // deserialize ChannelFromOneOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFromOneOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFromOneOf4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFromOneOf4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFromOneOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFromOneOf4'", e);
                    }

                    if (match == 1) {
                        ChannelFrom ret = new ChannelFrom();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ChannelFrom: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ChannelFrom() {
        super("oneOf", Boolean.FALSE);
    }

    public ChannelFrom(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ChannelFromOneOf", ChannelFromOneOf.class);
        schemas.put("ChannelFromOneOf1", ChannelFromOneOf1.class);
        schemas.put("ChannelFromOneOf2", ChannelFromOneOf2.class);
        schemas.put("ChannelFromOneOf3", ChannelFromOneOf3.class);
        schemas.put("ChannelFromOneOf4", ChannelFromOneOf4.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ChannelFrom.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ChannelFromOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelFromOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelFromOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelFromOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelFromOneOf4) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4");
    }

    /**
     * Get the actual instance, which can be the following:
     * ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4
     *
     * @return The actual instance (ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChannelFromOneOf`. If the actual instance is not `ChannelFromOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFromOneOf`
     * @throws ClassCastException if the instance is not `ChannelFromOneOf`
     */
    public ChannelFromOneOf getChannelFromOneOf() throws ClassCastException {
        return (ChannelFromOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelFromOneOf1`. If the actual instance is not `ChannelFromOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFromOneOf1`
     * @throws ClassCastException if the instance is not `ChannelFromOneOf1`
     */
    public ChannelFromOneOf1 getChannelFromOneOf1() throws ClassCastException {
        return (ChannelFromOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelFromOneOf2`. If the actual instance is not `ChannelFromOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFromOneOf2`
     * @throws ClassCastException if the instance is not `ChannelFromOneOf2`
     */
    public ChannelFromOneOf2 getChannelFromOneOf2() throws ClassCastException {
        return (ChannelFromOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelFromOneOf3`. If the actual instance is not `ChannelFromOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFromOneOf3`
     * @throws ClassCastException if the instance is not `ChannelFromOneOf3`
     */
    public ChannelFromOneOf3 getChannelFromOneOf3() throws ClassCastException {
        return (ChannelFromOneOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelFromOneOf4`. If the actual instance is not `ChannelFromOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFromOneOf4`
     * @throws ClassCastException if the instance is not `ChannelFromOneOf4`
     */
    public ChannelFromOneOf4 getChannelFromOneOf4() throws ClassCastException {
        return (ChannelFromOneOf4)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ChannelFrom
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ChannelFromOneOf
        try {
            ChannelFromOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFromOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelFromOneOf1
        try {
            ChannelFromOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFromOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelFromOneOf2
        try {
            ChannelFromOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFromOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelFromOneOf3
        try {
            ChannelFromOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFromOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelFromOneOf4
        try {
            ChannelFromOneOf4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFromOneOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ChannelFrom with oneOf schemas: ChannelFromOneOf, ChannelFromOneOf1, ChannelFromOneOf2, ChannelFromOneOf3, ChannelFromOneOf4. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ChannelFrom given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChannelFrom
     * @throws IOException if the JSON string is invalid with respect to ChannelFrom
     */
    public static ChannelFrom fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChannelFrom.class);
    }

    /**
     * Convert an instance of ChannelFrom to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

