/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinksConversation;
import org.openapitools.client.model.RetrieveConversation200ResponseMembersInner;
import org.openapitools.client.model.RetrieveConversation200ResponseProperties;
import org.openapitools.client.model.TimestampResConversation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversation Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetrieveConversation200Response {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private LinksConversation links;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<RetrieveConversation200ResponseMembersInner> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  private Object numbers;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private RetrieveConversation200ResponseProperties properties;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequence_number";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private TimestampResConversation timestamp;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public RetrieveConversation200Response() {
  }

  public RetrieveConversation200Response links(LinksConversation links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public LinksConversation getLinks() {
    return links;
  }

  public void setLinks(LinksConversation links) {
    this.links = links;
  }


  public RetrieveConversation200Response apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * The API key for your account
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public RetrieveConversation200Response displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the conversation. It does not have to be unique
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RetrieveConversation200Response members(List<RetrieveConversation200ResponseMembersInner> members) {
    this.members = members;
    return this;
  }

  public RetrieveConversation200Response addMembersItem(RetrieveConversation200ResponseMembersInner membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Users associated to this conversation as members
   * @return members
   */
  @javax.annotation.Nullable
  public List<RetrieveConversation200ResponseMembersInner> getMembers() {
    return members;
  }

  public void setMembers(List<RetrieveConversation200ResponseMembersInner> members) {
    this.members = members;
  }


  public RetrieveConversation200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique name for a conversation
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RetrieveConversation200Response numbers(Object numbers) {
    this.numbers = numbers;
    return this;
  }

  /**
   * Get numbers
   * @return numbers
   */
  @javax.annotation.Nullable
  public Object getNumbers() {
    return numbers;
  }

  public void setNumbers(Object numbers) {
    this.numbers = numbers;
  }


  public RetrieveConversation200Response properties(RetrieveConversation200ResponseProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public RetrieveConversation200ResponseProperties getProperties() {
    return properties;
  }

  public void setProperties(RetrieveConversation200ResponseProperties properties) {
    this.properties = properties;
  }


  public RetrieveConversation200Response sequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public String getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public RetrieveConversation200Response timestamp(TimestampResConversation timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public TimestampResConversation getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(TimestampResConversation timestamp) {
    this.timestamp = timestamp;
  }


  public RetrieveConversation200Response uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The unique identifier for this conversation
   * @return uuid
   */
  @javax.annotation.Nonnull
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveConversation200Response retrieveConversation200Response = (RetrieveConversation200Response) o;
    return Objects.equals(this.links, retrieveConversation200Response.links) &&
        Objects.equals(this.apiKey, retrieveConversation200Response.apiKey) &&
        Objects.equals(this.displayName, retrieveConversation200Response.displayName) &&
        Objects.equals(this.members, retrieveConversation200Response.members) &&
        Objects.equals(this.name, retrieveConversation200Response.name) &&
        Objects.equals(this.numbers, retrieveConversation200Response.numbers) &&
        Objects.equals(this.properties, retrieveConversation200Response.properties) &&
        Objects.equals(this.sequenceNumber, retrieveConversation200Response.sequenceNumber) &&
        Objects.equals(this.timestamp, retrieveConversation200Response.timestamp) &&
        Objects.equals(this.uuid, retrieveConversation200Response.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, apiKey, displayName, members, name, numbers, properties, sequenceNumber, timestamp, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveConversation200Response {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("api_key");
    openapiFields.add("display_name");
    openapiFields.add("members");
    openapiFields.add("name");
    openapiFields.add("numbers");
    openapiFields.add("properties");
    openapiFields.add("sequence_number");
    openapiFields.add("timestamp");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveConversation200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveConversation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveConversation200Response is not found in the empty JSON string", RetrieveConversation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveConversation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveConversation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveConversation200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        LinksConversation.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            RetrieveConversation200ResponseMembersInner.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        RetrieveConversation200ResponseProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if ((jsonObj.get("sequence_number") != null && !jsonObj.get("sequence_number").isJsonNull()) && !jsonObj.get("sequence_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequence_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequence_number").toString()));
      }
      // validate the optional field `timestamp`
      if (jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) {
        TimestampResConversation.validateJsonElement(jsonObj.get("timestamp"));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveConversation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveConversation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveConversation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveConversation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveConversation200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveConversation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveConversation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveConversation200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveConversation200Response
   * @throws IOException if the JSON string is invalid with respect to RetrieveConversation200Response
   */
  public static RetrieveConversation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveConversation200Response.class);
  }

  /**
   * Convert an instance of RetrieveConversation200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

