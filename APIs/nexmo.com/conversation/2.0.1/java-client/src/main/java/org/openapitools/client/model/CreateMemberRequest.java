/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.MemberAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create a Member in invite state 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMemberRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private MemberAction action;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public static final String SERIALIZED_NAME_KNOCKING_ID = "knocking_id";
  @SerializedName(SERIALIZED_NAME_KNOCKING_ID)
  private String knockingId;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private Object media;

  public static final String SERIALIZED_NAME_MEMBER_ID = "member_id";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private String memberId;

  public static final String SERIALIZED_NAME_MEMBER_ID_INVITING = "member_id_inviting";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID_INVITING)
  private String memberIdInviting;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public CreateMemberRequest() {
  }

  public CreateMemberRequest action(MemberAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public MemberAction getAction() {
    return action;
  }

  public void setAction(MemberAction action) {
    this.action = action;
  }


  public CreateMemberRequest channel(Channel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }


  public CreateMemberRequest knockingId(String knockingId) {
    this.knockingId = knockingId;
    return this;
  }

  /**
   * Knocker ID. A knocker is a pre-member of a conversation who does not exist yet
   * @return knockingId
   */
  @javax.annotation.Nullable
  public String getKnockingId() {
    return knockingId;
  }

  public void setKnockingId(String knockingId) {
    this.knockingId = knockingId;
  }


  public CreateMemberRequest media(Object media) {
    this.media = media;
    return this;
  }

  /**
   * Media Object
   * @return media
   */
  @javax.annotation.Nullable
  public Object getMedia() {
    return media;
  }

  public void setMedia(Object media) {
    this.media = media;
  }


  public CreateMemberRequest memberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  /**
   * Member ID
   * @return memberId
   */
  @javax.annotation.Nullable
  public String getMemberId() {
    return memberId;
  }

  public void setMemberId(String memberId) {
    this.memberId = memberId;
  }


  public CreateMemberRequest memberIdInviting(String memberIdInviting) {
    this.memberIdInviting = memberIdInviting;
    return this;
  }

  /**
   * Member ID of the member that sends the invitation
   * @return memberIdInviting
   */
  @javax.annotation.Nullable
  public String getMemberIdInviting() {
    return memberIdInviting;
  }

  public void setMemberIdInviting(String memberIdInviting) {
    this.memberIdInviting = memberIdInviting;
  }


  public CreateMemberRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMemberRequest createMemberRequest = (CreateMemberRequest) o;
    return Objects.equals(this.action, createMemberRequest.action) &&
        Objects.equals(this.channel, createMemberRequest.channel) &&
        Objects.equals(this.knockingId, createMemberRequest.knockingId) &&
        Objects.equals(this.media, createMemberRequest.media) &&
        Objects.equals(this.memberId, createMemberRequest.memberId) &&
        Objects.equals(this.memberIdInviting, createMemberRequest.memberIdInviting) &&
        Objects.equals(this.userId, createMemberRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, channel, knockingId, media, memberId, memberIdInviting, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMemberRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    knockingId: ").append(toIndentedString(knockingId)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    memberIdInviting: ").append(toIndentedString(memberIdInviting)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("channel");
    openapiFields.add("knocking_id");
    openapiFields.add("media");
    openapiFields.add("member_id");
    openapiFields.add("member_id_inviting");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMemberRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMemberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMemberRequest is not found in the empty JSON string", CreateMemberRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMemberRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMemberRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMemberRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        MemberAction.validateJsonElement(jsonObj.get("action"));
      }
      // validate the required field `channel`
      Channel.validateJsonElement(jsonObj.get("channel"));
      if ((jsonObj.get("knocking_id") != null && !jsonObj.get("knocking_id").isJsonNull()) && !jsonObj.get("knocking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knocking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knocking_id").toString()));
      }
      if ((jsonObj.get("member_id") != null && !jsonObj.get("member_id").isJsonNull()) && !jsonObj.get("member_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_id").toString()));
      }
      if ((jsonObj.get("member_id_inviting") != null && !jsonObj.get("member_id_inviting").isJsonNull()) && !jsonObj.get("member_id_inviting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_id_inviting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_id_inviting").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMemberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMemberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMemberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMemberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMemberRequest>() {
           @Override
           public void write(JsonWriter out, CreateMemberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMemberRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMemberRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMemberRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMemberRequest
   */
  public static CreateMemberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMemberRequest.class);
  }

  /**
   * Convert an instance of CreateMemberRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

