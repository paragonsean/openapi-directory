/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelFrom;
import org.openapitools.client.model.ChannelLegIdsInner;
import org.openapitools.client.model.ChannelTo;
import org.openapitools.client.model.ChannelType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A user who joins a conversation as a member can have one channel per membership type. Channels can be &#x60;app&#x60;, &#x60;phone&#x60;, &#x60;sip&#x60;, &#x60;websocket&#x60;, or &#x60;vbc&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:44.447365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private ChannelFrom from;

  public static final String SERIALIZED_NAME_LEG_ID = "leg_id";
  @SerializedName(SERIALIZED_NAME_LEG_ID)
  private String legId;

  public static final String SERIALIZED_NAME_LEG_IDS = "leg_ids";
  @SerializedName(SERIALIZED_NAME_LEG_IDS)
  private List<ChannelLegIdsInner> legIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private ChannelTo to;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelType type;

  public Channel() {
  }

  public Channel from(ChannelFrom from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public ChannelFrom getFrom() {
    return from;
  }

  public void setFrom(ChannelFrom from) {
    this.from = from;
  }


  public Channel legId(String legId) {
    this.legId = legId;
    return this;
  }

  /**
   * The id of the leg. rtc_id and call_id are leg id
   * @return legId
   */
  @javax.annotation.Nullable
  public String getLegId() {
    return legId;
  }

  public void setLegId(String legId) {
    this.legId = legId;
  }


  public Channel legIds(List<ChannelLegIdsInner> legIds) {
    this.legIds = legIds;
    return this;
  }

  public Channel addLegIdsItem(ChannelLegIdsInner legIdsItem) {
    if (this.legIds == null) {
      this.legIds = new ArrayList<>();
    }
    this.legIds.add(legIdsItem);
    return this;
  }

  /**
   * Leg ids associated with this Channel. The first item in the array represents the main active Leg. The second item, if exists, represents a screen-share Leg.
   * @return legIds
   */
  @javax.annotation.Nullable
  public List<ChannelLegIdsInner> getLegIds() {
    return legIds;
  }

  public void setLegIds(List<ChannelLegIdsInner> legIds) {
    this.legIds = legIds;
  }


  public Channel to(ChannelTo to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public ChannelTo getTo() {
    return to;
  }

  public void setTo(ChannelTo to) {
    this.to = to;
  }


  public Channel type(ChannelType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChannelType getType() {
    return type;
  }

  public void setType(ChannelType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.from, channel.from) &&
        Objects.equals(this.legId, channel.legId) &&
        Objects.equals(this.legIds, channel.legIds) &&
        Objects.equals(this.to, channel.to) &&
        Objects.equals(this.type, channel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, legId, legIds, to, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    legId: ").append(toIndentedString(legId)).append("\n");
    sb.append("    legIds: ").append(toIndentedString(legIds)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("leg_id");
    openapiFields.add("leg_ids");
    openapiFields.add("to");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        ChannelFrom.validateJsonElement(jsonObj.get("from"));
      }
      if ((jsonObj.get("leg_id") != null && !jsonObj.get("leg_id").isJsonNull()) && !jsonObj.get("leg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leg_id").toString()));
      }
      if (jsonObj.get("leg_ids") != null && !jsonObj.get("leg_ids").isJsonNull()) {
        JsonArray jsonArraylegIds = jsonObj.getAsJsonArray("leg_ids");
        if (jsonArraylegIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leg_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leg_ids` to be an array in the JSON string but got `%s`", jsonObj.get("leg_ids").toString()));
          }

          // validate the optional field `leg_ids` (array)
          for (int i = 0; i < jsonArraylegIds.size(); i++) {
            ChannelLegIdsInner.validateJsonElement(jsonArraylegIds.get(i));
          };
        }
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        ChannelTo.validateJsonElement(jsonObj.get("to"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ChannelType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

