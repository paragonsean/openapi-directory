/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEvent_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEvent_201_response::OAICreateEvent_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEvent_201_response::OAICreateEvent_201_response() {
    this->initializeModel();
}

OAICreateEvent_201_response::~OAICreateEvent_201_response() {}

void OAICreateEvent_201_response::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAICreateEvent_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEvent_201_response::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAICreateEvent_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEvent_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAICreateEvent_201_response::getHref() const {
    return m_href;
}
void OAICreateEvent_201_response::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICreateEvent_201_response::is_href_Set() const{
    return m_href_isSet;
}

bool OAICreateEvent_201_response::is_href_Valid() const{
    return m_href_isValid;
}

QString OAICreateEvent_201_response::getId() const {
    return m_id;
}
void OAICreateEvent_201_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateEvent_201_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateEvent_201_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateEvent_201_response::getTimestamp() const {
    return m_timestamp;
}
void OAICreateEvent_201_response::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICreateEvent_201_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICreateEvent_201_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAICreateEvent_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEvent_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
