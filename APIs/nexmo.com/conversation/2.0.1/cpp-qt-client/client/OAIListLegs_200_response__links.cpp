/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLegs_200_response__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLegs_200_response__links::OAIListLegs_200_response__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLegs_200_response__links::OAIListLegs_200_response__links() {
    this->initializeModel();
}

OAIListLegs_200_response__links::~OAIListLegs_200_response__links() {}

void OAIListLegs_200_response__links::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIListLegs_200_response__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLegs_200_response__links::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIListLegs_200_response__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLegs_200_response__links::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIListLegs_200_response__links_self OAIListLegs_200_response__links::getSelf() const {
    return m_self;
}
void OAIListLegs_200_response__links::setSelf(const OAIListLegs_200_response__links_self &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIListLegs_200_response__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIListLegs_200_response__links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIListLegs_200_response__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLegs_200_response__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_self_isValid && true;
}

} // namespace OpenAPI
