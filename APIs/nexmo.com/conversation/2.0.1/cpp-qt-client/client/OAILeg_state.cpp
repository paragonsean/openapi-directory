/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeg_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeg_state::OAILeg_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeg_state::OAILeg_state() {
    this->initializeModel();
}

OAILeg_state::~OAILeg_state() {}

void OAILeg_state::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILeg_state::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILeg_state::fromJson(QString jsonString) {
    
    if ( jsonString.compare("terminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILeg_state::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILeg_state::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILeg_state::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILeg_state::TERMINATED:
            val = "terminated";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILeg_state::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILeg_state::eOAILeg_state OAILeg_state::getValue() const {
    return m_value;
}

void OAILeg_state::setValue(const OAILeg_state::eOAILeg_state& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILeg_state::isSet() const {
    
    return m_value_isSet;
}

bool OAILeg_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
