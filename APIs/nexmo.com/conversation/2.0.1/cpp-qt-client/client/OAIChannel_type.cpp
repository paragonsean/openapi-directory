/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel_type::OAIChannel_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel_type::OAIChannel_type() {
    this->initializeModel();
}

OAIChannel_type::~OAIChannel_type() {}

void OAIChannel_type::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChannel_type::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChannel_type::fromJson(QString jsonString) {
    
    if ( jsonString.compare("app", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannel_type::APP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("phone", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannel_type::PHONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sip", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannel_type::SIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("websocket", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannel_type::WEBSOCKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vbc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannel_type::VBC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChannel_type::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChannel_type::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChannel_type::APP:
            val = "app";
            break;
        case eOAIChannel_type::PHONE:
            val = "phone";
            break;
        case eOAIChannel_type::SIP:
            val = "sip";
            break;
        case eOAIChannel_type::WEBSOCKET:
            val = "websocket";
            break;
        case eOAIChannel_type::VBC:
            val = "vbc";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChannel_type::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChannel_type::eOAIChannel_type OAIChannel_type::getValue() const {
    return m_value;
}

void OAIChannel_type::setValue(const OAIChannel_type::eOAIChannel_type& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChannel_type::isSet() const {
    
    return m_value_isSet;
}

bool OAIChannel_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
