/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAction::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAction::fromJson(QString jsonString) {
    
    if ( jsonString.compare("start", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAction::START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAction::STOP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAction::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAction::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAction::START:
            val = "start";
            break;
        case eOAIAction::STOP:
            val = "stop";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAction::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAction::eOAIAction OAIAction::getValue() const {
    return m_value;
}

void OAIAction::setValue(const OAIAction::eOAIAction& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAction::isSet() const {
    
    return m_value_isSet;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
