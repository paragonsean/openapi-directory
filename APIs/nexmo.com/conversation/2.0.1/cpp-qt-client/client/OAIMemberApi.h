/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMemberApi_H
#define OAI_OAIMemberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateMember_201_response.h"
#include "OAICreateMember_request.h"
#include "OAIGetMember_200_response.h"
#include "OAIGetMembers_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateMember_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMemberApi : public QObject {
    Q_OBJECT

public:
    OAIMemberApi(const int timeOut = 0);
    ~OAIMemberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  oai_create_member_request OAICreateMember_request [optional]
    */
    virtual void createMember(const QString &conversation_id, const ::OpenAPI::OptionalParam<OAICreateMember_request> &oai_create_member_request = ::OpenAPI::OptionalParam<OAICreateMember_request>());

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void deleteMember(const QString &conversation_id, const QString &member_id);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void getMember(const QString &conversation_id, const QString &member_id);

    /**
    * @param[in]  conversation_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getMembers(const QString &conversation_id);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  oai_update_member_request OAIUpdateMember_request [optional]
    */
    virtual void updateMember(const QString &conversation_id, const QString &member_id, const ::OpenAPI::OptionalParam<OAIUpdateMember_request> &oai_update_member_request = ::OpenAPI::OptionalParam<OAIUpdateMember_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMemberCallback(OAIHttpRequestWorker *worker);
    void deleteMemberCallback(OAIHttpRequestWorker *worker);
    void getMemberCallback(OAIHttpRequestWorker *worker);
    void getMembersCallback(OAIHttpRequestWorker *worker);
    void updateMemberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMemberSignal(OAICreateMember_201_response summary);
    void deleteMemberSignal(OAIObject summary);
    void getMemberSignal(OAIGetMember_200_response summary);
    void getMembersSignal(QList<OAIGetMembers_200_response_inner> summary);
    void updateMemberSignal(OAIGetMember_200_response summary);


    void createMemberSignalFull(OAIHttpRequestWorker *worker, OAICreateMember_201_response summary);
    void deleteMemberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getMemberSignalFull(OAIHttpRequestWorker *worker, OAIGetMember_200_response summary);
    void getMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetMembers_200_response_inner> summary);
    void updateMemberSignalFull(OAIHttpRequestWorker *worker, OAIGetMember_200_response summary);

    Q_DECL_DEPRECATED_X("Use createMemberSignalError() instead")
    void createMemberSignalE(OAICreateMember_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMemberSignalError(OAICreateMember_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMemberSignalError() instead")
    void deleteMemberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMemberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMemberSignalError() instead")
    void getMemberSignalE(OAIGetMember_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMemberSignalError(OAIGetMember_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMembersSignalError() instead")
    void getMembersSignalE(QList<OAIGetMembers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMembersSignalError(QList<OAIGetMembers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMemberSignalError() instead")
    void updateMemberSignalE(OAIGetMember_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMemberSignalError(OAIGetMember_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMemberSignalErrorFull() instead")
    void createMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMemberSignalErrorFull() instead")
    void deleteMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMemberSignalErrorFull() instead")
    void getMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMembersSignalErrorFull() instead")
    void getMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMemberSignalErrorFull() instead")
    void updateMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
