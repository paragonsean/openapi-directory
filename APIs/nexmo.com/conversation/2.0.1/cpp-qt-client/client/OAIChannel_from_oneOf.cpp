/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel_from_oneOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel_from_oneOf::OAIChannel_from_oneOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel_from_oneOf::OAIChannel_from_oneOf() {
    this->initializeModel();
}

OAIChannel_from_oneOf::~OAIChannel_from_oneOf() {}

void OAIChannel_from_oneOf::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIChannel_from_oneOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel_from_oneOf::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIChannel_from_oneOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel_from_oneOf::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIChannel_from_oneOf::getType() const {
    return m_type;
}
void OAIChannel_from_oneOf::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel_from_oneOf::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel_from_oneOf::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChannel_from_oneOf::getUser() const {
    return m_user;
}
void OAIChannel_from_oneOf::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIChannel_from_oneOf::is_user_Set() const{
    return m_user_isSet;
}

bool OAIChannel_from_oneOf::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIChannel_from_oneOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel_from_oneOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
