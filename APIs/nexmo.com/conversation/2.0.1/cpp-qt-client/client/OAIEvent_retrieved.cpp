/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_retrieved.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_retrieved::OAIEvent_retrieved(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_retrieved::OAIEvent_retrieved() {
    this->initializeModel();
}

OAIEvent_retrieved::~OAIEvent_retrieved() {}

void OAIEvent_retrieved::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEvent_retrieved::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_retrieved::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEvent_retrieved::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_retrieved::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIEvent_retrieved::getBody() const {
    return m_body;
}
void OAIEvent_retrieved::setBody(const OAIObject &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIEvent_retrieved::is_body_Set() const{
    return m_body_isSet;
}

bool OAIEvent_retrieved::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIEvent_retrieved::getFrom() const {
    return m_from;
}
void OAIEvent_retrieved::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIEvent_retrieved::is_from_Set() const{
    return m_from_isSet;
}

bool OAIEvent_retrieved::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIEvent_retrieved::getHref() const {
    return m_href;
}
void OAIEvent_retrieved::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIEvent_retrieved::is_href_Set() const{
    return m_href_isSet;
}

bool OAIEvent_retrieved::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIEvent_retrieved::getId() const {
    return m_id;
}
void OAIEvent_retrieved::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent_retrieved::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent_retrieved::is_id_Valid() const{
    return m_id_isValid;
}

OAIMember_state OAIEvent_retrieved::getState() const {
    return m_state;
}
void OAIEvent_retrieved::setState(const OAIMember_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEvent_retrieved::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEvent_retrieved::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIEvent_retrieved::getTimestamp() const {
    return m_timestamp;
}
void OAIEvent_retrieved::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEvent_retrieved::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEvent_retrieved::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIEvent_retrieved::getTo() const {
    return m_to;
}
void OAIEvent_retrieved::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIEvent_retrieved::is_to_Set() const{
    return m_to_isSet;
}

bool OAIEvent_retrieved::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIEvent_retrieved::getType() const {
    return m_type;
}
void OAIEvent_retrieved::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent_retrieved::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent_retrieved::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEvent_retrieved::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_retrieved::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_href_isValid && m_id_isValid && m_timestamp_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
