/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetuserConversations_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetuserConversations_200_response_inner::OAIGetuserConversations_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetuserConversations_200_response_inner::OAIGetuserConversations_200_response_inner() {
    this->initializeModel();
}

OAIGetuserConversations_200_response_inner::~OAIGetuserConversations_200_response_inner() {}

void OAIGetuserConversations_200_response_inner::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIGetuserConversations_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetuserConversations_200_response_inner::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequence_number")]);
    m_sequence_number_isSet = !json[QString("sequence_number")].isNull() && m_sequence_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIGetuserConversations_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetuserConversations_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequence_number"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIGetuserConversations_200_response_inner::getDisplayName() const {
    return m_display_name;
}
void OAIGetuserConversations_200_response_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGetuserConversations_200_response_inner::getHref() const {
    return m_href;
}
void OAIGetuserConversations_200_response_inner::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_href_Set() const{
    return m_href_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIGetuserConversations_200_response_inner::getId() const {
    return m_id;
}
void OAIGetuserConversations_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetuserConversations_200_response_inner::getImageUrl() const {
    return m_image_url;
}
void OAIGetuserConversations_200_response_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGetuserConversations_200_response_inner::getMemberId() const {
    return m_member_id;
}
void OAIGetuserConversations_200_response_inner::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIGetuserConversations_200_response_inner::getName() const {
    return m_name;
}
void OAIGetuserConversations_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetuserConversations_200_response_inner::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIGetuserConversations_200_response_inner::setSequenceNumber(const qint32 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

OAIMember_state OAIGetuserConversations_200_response_inner::getState() const {
    return m_state;
}
void OAIGetuserConversations_200_response_inner::setState(const OAIMember_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

OAIGetuserConversations_200_response_inner_timestamp OAIGetuserConversations_200_response_inner::getTimestamp() const {
    return m_timestamp;
}
void OAIGetuserConversations_200_response_inner::setTimestamp(const OAIGetuserConversations_200_response_inner_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGetuserConversations_200_response_inner::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGetuserConversations_200_response_inner::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIGetuserConversations_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetuserConversations_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
