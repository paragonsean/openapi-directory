/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUser_200_response.h"
#include "OAICreateUser_request.h"
#include "OAIGetUser_200_response.h"
#include "OAIGetUsers_200_response_inner.h"
#include "OAIGetuserConversations_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateUser_200_response.h"
#include "OAIUpdateUser_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_user_request OAICreateUser_request [optional]
    */
    virtual void createUser(const ::OpenAPI::OptionalParam<OAICreateUser_request> &oai_create_user_request = ::OpenAPI::OptionalParam<OAICreateUser_request>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void deleteUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUser(const QString &user_id);


    Q_DECL_DEPRECATED virtual void getUsers();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getuserConversations(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_user_request OAIUpdateUser_request [optional]
    */
    virtual void updateUser(const QString &user_id, const ::OpenAPI::OptionalParam<OAIUpdateUser_request> &oai_update_user_request = ::OpenAPI::OptionalParam<OAIUpdateUser_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void getuserConversationsCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUserSignal(OAICreateUser_200_response summary);
    void deleteUserSignal(OAIObject summary);
    void getUserSignal(OAIGetUser_200_response summary);
    void getUsersSignal(QList<OAIGetUsers_200_response_inner> summary);
    void getuserConversationsSignal(QList<OAIGetuserConversations_200_response_inner> summary);
    void updateUserSignal(OAIUpdateUser_200_response summary);


    void createUserSignalFull(OAIHttpRequestWorker *worker, OAICreateUser_200_response summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIGetUser_200_response summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetUsers_200_response_inner> summary);
    void getuserConversationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetuserConversations_200_response_inner> summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUser_200_response summary);

    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAICreateUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAICreateUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIGetUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIGetUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(QList<OAIGetUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(QList<OAIGetUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getuserConversationsSignalError() instead")
    void getuserConversationsSignalE(QList<OAIGetuserConversations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getuserConversationsSignalError(QList<OAIGetuserConversations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUpdateUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUpdateUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getuserConversationsSignalErrorFull() instead")
    void getuserConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getuserConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
