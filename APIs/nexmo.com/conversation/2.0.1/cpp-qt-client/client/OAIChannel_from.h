/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannel_from.h
 *
 * 
 */

#ifndef OAIChannel_from_H
#define OAIChannel_from_H

#include <QJsonObject>

#include "OAIChannel_from_oneOf.h"
#include "OAIChannel_from_oneOf_1.h"
#include "OAIChannel_from_oneOf_2.h"
#include "OAIChannel_from_oneOf_3.h"
#include "OAIChannel_from_oneOf_3_headers.h"
#include "OAIChannel_from_oneOf_4.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannel_from_oneOf_3_headers;

class OAIChannel_from : public OAIObject {
public:
    OAIChannel_from();
    OAIChannel_from(QString json);
    ~OAIChannel_from() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAIChannel_from_oneOf_3_headers getHeaders() const;
    void setHeaders(const OAIChannel_from_oneOf_3_headers &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getExtension() const;
    void setExtension(const QString &extension);
    bool is_extension_Set() const;
    bool is_extension_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAIChannel_from_oneOf_3_headers m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_extension;
    bool m_extension_isSet;
    bool m_extension_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannel_from)

#endif // OAIChannel_from_H
