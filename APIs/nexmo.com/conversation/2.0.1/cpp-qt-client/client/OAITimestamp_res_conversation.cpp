/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimestamp_res_conversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimestamp_res_conversation::OAITimestamp_res_conversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimestamp_res_conversation::OAITimestamp_res_conversation() {
    this->initializeModel();
}

OAITimestamp_res_conversation::~OAITimestamp_res_conversation() {}

void OAITimestamp_res_conversation::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_destroyed_isSet = false;
    m_destroyed_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAITimestamp_res_conversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimestamp_res_conversation::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_destroyed_isValid = ::OpenAPI::fromJsonValue(m_destroyed, json[QString("destroyed")]);
    m_destroyed_isSet = !json[QString("destroyed")].isNull() && m_destroyed_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAITimestamp_res_conversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimestamp_res_conversation::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_destroyed_isSet) {
        obj.insert(QString("destroyed"), ::OpenAPI::toJsonValue(m_destroyed));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAITimestamp_res_conversation::getCreated() const {
    return m_created;
}
void OAITimestamp_res_conversation::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITimestamp_res_conversation::is_created_Set() const{
    return m_created_isSet;
}

bool OAITimestamp_res_conversation::is_created_Valid() const{
    return m_created_isValid;
}

QString OAITimestamp_res_conversation::getDestroyed() const {
    return m_destroyed;
}
void OAITimestamp_res_conversation::setDestroyed(const QString &destroyed) {
    m_destroyed = destroyed;
    m_destroyed_isSet = true;
}

bool OAITimestamp_res_conversation::is_destroyed_Set() const{
    return m_destroyed_isSet;
}

bool OAITimestamp_res_conversation::is_destroyed_Valid() const{
    return m_destroyed_isValid;
}

QString OAITimestamp_res_conversation::getUpdated() const {
    return m_updated;
}
void OAITimestamp_res_conversation::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITimestamp_res_conversation::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITimestamp_res_conversation::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAITimestamp_res_conversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destroyed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimestamp_res_conversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
