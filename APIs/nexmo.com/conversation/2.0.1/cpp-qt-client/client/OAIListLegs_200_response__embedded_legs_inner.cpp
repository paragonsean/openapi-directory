/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLegs_200_response__embedded_legs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLegs_200_response__embedded_legs_inner::OAIListLegs_200_response__embedded_legs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLegs_200_response__embedded_legs_inner::OAIListLegs_200_response__embedded_legs_inner() {
    this->initializeModel();
}

OAIListLegs_200_response__embedded_legs_inner::~OAIListLegs_200_response__embedded_legs_inner() {}

void OAIListLegs_200_response__embedded_legs_inner::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_conversation_uuid_isSet = false;
    m_conversation_uuid_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_start_end_isSet = false;
    m_start_end_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIListLegs_200_response__embedded_legs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLegs_200_response__embedded_legs_inner::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_conversation_uuid_isValid = ::OpenAPI::fromJsonValue(m_conversation_uuid, json[QString("conversation_uuid")]);
    m_conversation_uuid_isSet = !json[QString("conversation_uuid")].isNull() && m_conversation_uuid_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_start_end_isValid = ::OpenAPI::fromJsonValue(m_start_end, json[QString("start_end")]);
    m_start_end_isSet = !json[QString("start_end")].isNull() && m_start_end_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIListLegs_200_response__embedded_legs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLegs_200_response__embedded_legs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded_isSet) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links_isSet) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_conversation_uuid_isSet) {
        obj.insert(QString("conversation_uuid"), ::OpenAPI::toJsonValue(m_conversation_uuid));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_start_end_isSet) {
        obj.insert(QString("start_end"), ::OpenAPI::toJsonValue(m_start_end));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAIObject OAIListLegs_200_response__embedded_legs_inner::getEmbedded() const {
    return m__embedded;
}
void OAIListLegs_200_response__embedded_legs_inner::setEmbedded(const OAIObject &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIObject OAIListLegs_200_response__embedded_legs_inner::getLinks() const {
    return m__links;
}
void OAIListLegs_200_response__embedded_legs_inner::setLinks(const OAIObject &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is__links_Set() const{
    return m__links_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIListLegs_200_response__embedded_legs_inner::getConversationUuid() const {
    return m_conversation_uuid;
}
void OAIListLegs_200_response__embedded_legs_inner::setConversationUuid(const QString &conversation_uuid) {
    m_conversation_uuid = conversation_uuid;
    m_conversation_uuid_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_conversation_uuid_Set() const{
    return m_conversation_uuid_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_conversation_uuid_Valid() const{
    return m_conversation_uuid_isValid;
}

OAIObject OAIListLegs_200_response__embedded_legs_inner::getFrom() const {
    return m_from;
}
void OAIListLegs_200_response__embedded_legs_inner::setFrom(const OAIObject &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_from_Set() const{
    return m_from_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIListLegs_200_response__embedded_legs_inner::getStartEnd() const {
    return m_start_end;
}
void OAIListLegs_200_response__embedded_legs_inner::setStartEnd(const QString &start_end) {
    m_start_end = start_end;
    m_start_end_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_start_end_Set() const{
    return m_start_end_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_start_end_Valid() const{
    return m_start_end_isValid;
}

QString OAIListLegs_200_response__embedded_legs_inner::getStartTime() const {
    return m_start_time;
}
void OAIListLegs_200_response__embedded_legs_inner::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAILeg_state OAIListLegs_200_response__embedded_legs_inner::getState() const {
    return m_state;
}
void OAIListLegs_200_response__embedded_legs_inner::setState(const OAILeg_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAIListLegs_200_response__embedded_legs_inner::getTo() const {
    return m_to;
}
void OAIListLegs_200_response__embedded_legs_inner::setTo(const OAIObject &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_to_Set() const{
    return m_to_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_to_Valid() const{
    return m_to_isValid;
}

OAIChannel_type OAIListLegs_200_response__embedded_legs_inner::getType() const {
    return m_type;
}
void OAIListLegs_200_response__embedded_legs_inner::setType(const OAIChannel_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListLegs_200_response__embedded_legs_inner::getUuid() const {
    return m_uuid;
}
void OAIListLegs_200_response__embedded_legs_inner::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIListLegs_200_response__embedded_legs_inner::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIListLegs_200_response__embedded_legs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLegs_200_response__embedded_legs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uuid_isValid && true;
}

} // namespace OpenAPI
