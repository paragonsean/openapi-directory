/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConversation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConversation_request::OAICreateConversation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConversation_request::OAICreateConversation_request() {
    this->initializeModel();
}

OAICreateConversation_request::~OAICreateConversation_request() {}

void OAICreateConversation_request::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICreateConversation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConversation_request::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICreateConversation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConversation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAICreateConversation_request::getDisplayName() const {
    return m_display_name;
}
void OAICreateConversation_request::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateConversation_request::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateConversation_request::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreateConversation_request::getImageUrl() const {
    return m_image_url;
}
void OAICreateConversation_request::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAICreateConversation_request::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAICreateConversation_request::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAICreateConversation_request::getName() const {
    return m_name;
}
void OAICreateConversation_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConversation_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConversation_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIConversation_properties OAICreateConversation_request::getProperties() const {
    return m_properties;
}
void OAICreateConversation_request::setProperties(const OAIConversation_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateConversation_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateConversation_request::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICreateConversation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConversation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
