/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_properties::OAIConversation_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_properties::OAIConversation_properties() {
    this->initializeModel();
}

OAIConversation_properties::~OAIConversation_properties() {}

void OAIConversation_properties::initializeModel() {

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIConversation_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_properties::fromJsonObject(QJsonObject json) {

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIConversation_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

double OAIConversation_properties::getTtl() const {
    return m_ttl;
}
void OAIConversation_properties::setTtl(const double &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIConversation_properties::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIConversation_properties::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIConversation_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
