/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUser_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUser_200_response::OAIUpdateUser_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUser_200_response::OAIUpdateUser_200_response() {
    this->initializeModel();
}

OAIUpdateUser_200_response::~OAIUpdateUser_200_response() {}

void OAIUpdateUser_200_response::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIUpdateUser_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUser_200_response::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIUpdateUser_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUser_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIUpdateUser_200_response::getHref() const {
    return m_href;
}
void OAIUpdateUser_200_response::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIUpdateUser_200_response::is_href_Set() const{
    return m_href_isSet;
}

bool OAIUpdateUser_200_response::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIUpdateUser_200_response::getId() const {
    return m_id;
}
void OAIUpdateUser_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateUser_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateUser_200_response::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUpdateUser_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUser_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
