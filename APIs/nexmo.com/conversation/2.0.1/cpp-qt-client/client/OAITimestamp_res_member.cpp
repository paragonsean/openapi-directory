/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimestamp_res_member.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimestamp_res_member::OAITimestamp_res_member(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimestamp_res_member::OAITimestamp_res_member() {
    this->initializeModel();
}

OAITimestamp_res_member::~OAITimestamp_res_member() {}

void OAITimestamp_res_member::initializeModel() {

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_joined_isSet = false;
    m_joined_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;
}

void OAITimestamp_res_member::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimestamp_res_member::fromJsonObject(QJsonObject json) {

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_joined_isValid = ::OpenAPI::fromJsonValue(m_joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;
}

QString OAITimestamp_res_member::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimestamp_res_member::asJsonObject() const {
    QJsonObject obj;
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_joined_isSet) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(m_joined));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    return obj;
}

QString OAITimestamp_res_member::getInvited() const {
    return m_invited;
}
void OAITimestamp_res_member::setInvited(const QString &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAITimestamp_res_member::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAITimestamp_res_member::is_invited_Valid() const{
    return m_invited_isValid;
}

QString OAITimestamp_res_member::getJoined() const {
    return m_joined;
}
void OAITimestamp_res_member::setJoined(const QString &joined) {
    m_joined = joined;
    m_joined_isSet = true;
}

bool OAITimestamp_res_member::is_joined_Set() const{
    return m_joined_isSet;
}

bool OAITimestamp_res_member::is_joined_Valid() const{
    return m_joined_isValid;
}

QString OAITimestamp_res_member::getLeft() const {
    return m_left;
}
void OAITimestamp_res_member::setLeft(const QString &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAITimestamp_res_member::is_left_Set() const{
    return m_left_isSet;
}

bool OAITimestamp_res_member::is_left_Valid() const{
    return m_left_isValid;
}

bool OAITimestamp_res_member::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimestamp_res_member::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
