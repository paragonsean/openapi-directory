/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel_from_oneOf_4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel_from_oneOf_4::OAIChannel_from_oneOf_4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel_from_oneOf_4::OAIChannel_from_oneOf_4() {
    this->initializeModel();
}

OAIChannel_from_oneOf_4::~OAIChannel_from_oneOf_4() {}

void OAIChannel_from_oneOf_4::initializeModel() {

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannel_from_oneOf_4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel_from_oneOf_4::fromJsonObject(QJsonObject json) {

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannel_from_oneOf_4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel_from_oneOf_4::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChannel_from_oneOf_4::getExtension() const {
    return m_extension;
}
void OAIChannel_from_oneOf_4::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIChannel_from_oneOf_4::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIChannel_from_oneOf_4::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIChannel_from_oneOf_4::getType() const {
    return m_type;
}
void OAIChannel_from_oneOf_4::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel_from_oneOf_4::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel_from_oneOf_4::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannel_from_oneOf_4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel_from_oneOf_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_extension_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
