/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveConversation_200_response_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveConversation_200_response_properties::OAIRetrieveConversation_200_response_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveConversation_200_response_properties::OAIRetrieveConversation_200_response_properties() {
    this->initializeModel();
}

OAIRetrieveConversation_200_response_properties::~OAIRetrieveConversation_200_response_properties() {}

void OAIRetrieveConversation_200_response_properties::initializeModel() {

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIRetrieveConversation_200_response_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveConversation_200_response_properties::fromJsonObject(QJsonObject json) {

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIRetrieveConversation_200_response_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveConversation_200_response_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_video_isSet) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

bool OAIRetrieveConversation_200_response_properties::isVideo() const {
    return m_video;
}
void OAIRetrieveConversation_200_response_properties::setVideo(const bool &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIRetrieveConversation_200_response_properties::is_video_Set() const{
    return m_video_isSet;
}

bool OAIRetrieveConversation_200_response_properties::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIRetrieveConversation_200_response_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_video_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveConversation_200_response_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
