/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInitiator_joined.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInitiator_joined::OAIInitiator_joined(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInitiator_joined::OAIInitiator_joined() {
    this->initializeModel();
}

OAIInitiator_joined::~OAIInitiator_joined() {}

void OAIInitiator_joined::initializeModel() {

    m_is_system_isSet = false;
    m_is_system_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIInitiator_joined::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInitiator_joined::fromJsonObject(QJsonObject json) {

    m_is_system_isValid = ::OpenAPI::fromJsonValue(m_is_system, json[QString("isSystem")]);
    m_is_system_isSet = !json[QString("isSystem")].isNull() && m_is_system_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIInitiator_joined::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInitiator_joined::asJsonObject() const {
    QJsonObject obj;
    if (m_is_system_isSet) {
        obj.insert(QString("isSystem"), ::OpenAPI::toJsonValue(m_is_system));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIInitiator_joined::isIsSystem() const {
    return m_is_system;
}
void OAIInitiator_joined::setIsSystem(const bool &is_system) {
    m_is_system = is_system;
    m_is_system_isSet = true;
}

bool OAIInitiator_joined::is_is_system_Set() const{
    return m_is_system_isSet;
}

bool OAIInitiator_joined::is_is_system_Valid() const{
    return m_is_system_isValid;
}

QString OAIInitiator_joined::getMemberId() const {
    return m_member_id;
}
void OAIInitiator_joined::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIInitiator_joined::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIInitiator_joined::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIInitiator_joined::getUserId() const {
    return m_user_id;
}
void OAIInitiator_joined::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIInitiator_joined::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIInitiator_joined::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIInitiator_joined::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInitiator_joined::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
