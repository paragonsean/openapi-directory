/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetuserConversations_200_response_inner_timestamp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetuserConversations_200_response_inner_timestamp::OAIGetuserConversations_200_response_inner_timestamp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetuserConversations_200_response_inner_timestamp::OAIGetuserConversations_200_response_inner_timestamp() {
    this->initializeModel();
}

OAIGetuserConversations_200_response_inner_timestamp::~OAIGetuserConversations_200_response_inner_timestamp() {}

void OAIGetuserConversations_200_response_inner_timestamp::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;
}

void OAIGetuserConversations_200_response_inner_timestamp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetuserConversations_200_response_inner_timestamp::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;
}

QString OAIGetuserConversations_200_response_inner_timestamp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetuserConversations_200_response_inner_timestamp::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    return obj;
}

QString OAIGetuserConversations_200_response_inner_timestamp::getCreated() const {
    return m_created;
}
void OAIGetuserConversations_200_response_inner_timestamp::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGetuserConversations_200_response_inner_timestamp::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGetuserConversations_200_response_inner_timestamp::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIGetuserConversations_200_response_inner_timestamp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetuserConversations_200_response_inner_timestamp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
