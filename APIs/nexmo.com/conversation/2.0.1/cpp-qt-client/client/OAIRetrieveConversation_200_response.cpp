/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveConversation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveConversation_200_response::OAIRetrieveConversation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveConversation_200_response::OAIRetrieveConversation_200_response() {
    this->initializeModel();
}

OAIRetrieveConversation_200_response::~OAIRetrieveConversation_200_response() {}

void OAIRetrieveConversation_200_response::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIRetrieveConversation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveConversation_200_response::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequence_number")]);
    m_sequence_number_isSet = !json[QString("sequence_number")].isNull() && m_sequence_number_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIRetrieveConversation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveConversation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_numbers_isSet) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequence_number"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAI_links_conversation OAIRetrieveConversation_200_response::getLinks() const {
    return m__links;
}
void OAIRetrieveConversation_200_response::setLinks(const OAI_links_conversation &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIRetrieveConversation_200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIRetrieveConversation_200_response::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIRetrieveConversation_200_response::getApiKey() const {
    return m_api_key;
}
void OAIRetrieveConversation_200_response::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIRetrieveConversation_200_response::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIRetrieveConversation_200_response::getDisplayName() const {
    return m_display_name;
}
void OAIRetrieveConversation_200_response::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRetrieveConversation_200_response::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIRetrieveConversation_200_response_members_inner> OAIRetrieveConversation_200_response::getMembers() const {
    return m_members;
}
void OAIRetrieveConversation_200_response::setMembers(const QList<OAIRetrieveConversation_200_response_members_inner> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_members_Set() const{
    return m_members_isSet;
}

bool OAIRetrieveConversation_200_response::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIRetrieveConversation_200_response::getName() const {
    return m_name;
}
void OAIRetrieveConversation_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRetrieveConversation_200_response::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIRetrieveConversation_200_response::getNumbers() const {
    return m_numbers;
}
void OAIRetrieveConversation_200_response::setNumbers(const OAIObject &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAIRetrieveConversation_200_response::is_numbers_Valid() const{
    return m_numbers_isValid;
}

OAIRetrieveConversation_200_response_properties OAIRetrieveConversation_200_response::getProperties() const {
    return m_properties;
}
void OAIRetrieveConversation_200_response::setProperties(const OAIRetrieveConversation_200_response_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRetrieveConversation_200_response::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIRetrieveConversation_200_response::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIRetrieveConversation_200_response::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIRetrieveConversation_200_response::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

OAITimestamp_res_conversation OAIRetrieveConversation_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIRetrieveConversation_200_response::setTimestamp(const OAITimestamp_res_conversation &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRetrieveConversation_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRetrieveConversation_200_response::getUuid() const {
    return m_uuid;
}
void OAIRetrieveConversation_200_response::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIRetrieveConversation_200_response::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIRetrieveConversation_200_response::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIRetrieveConversation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveConversation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uuid_isValid && true;
}

} // namespace OpenAPI
