/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMember_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMember_201_response::OAICreateMember_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMember_201_response::OAICreateMember_201_response() {
    this->initializeModel();
}

OAICreateMember_201_response::~OAICreateMember_201_response() {}

void OAICreateMember_201_response::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICreateMember_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMember_201_response::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICreateMember_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMember_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initiator.isSet()) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIChannel OAICreateMember_201_response::getChannel() const {
    return m_channel;
}
void OAICreateMember_201_response::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICreateMember_201_response::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICreateMember_201_response::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAICreateMember_201_response::getHref() const {
    return m_href;
}
void OAICreateMember_201_response::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICreateMember_201_response::is_href_Set() const{
    return m_href_isSet;
}

bool OAICreateMember_201_response::is_href_Valid() const{
    return m_href_isValid;
}

QString OAICreateMember_201_response::getId() const {
    return m_id;
}
void OAICreateMember_201_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateMember_201_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateMember_201_response::is_id_Valid() const{
    return m_id_isValid;
}

OAIInitiator OAICreateMember_201_response::getInitiator() const {
    return m_initiator;
}
void OAICreateMember_201_response::setInitiator(const OAIInitiator &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAICreateMember_201_response::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAICreateMember_201_response::is_initiator_Valid() const{
    return m_initiator_isValid;
}

OAIMember_state OAICreateMember_201_response::getState() const {
    return m_state;
}
void OAICreateMember_201_response::setState(const OAIMember_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateMember_201_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateMember_201_response::is_state_Valid() const{
    return m_state_isValid;
}

OAITimestamp_res_member OAICreateMember_201_response::getTimestamp() const {
    return m_timestamp;
}
void OAICreateMember_201_response::setTimestamp(const OAITimestamp_res_member &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICreateMember_201_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICreateMember_201_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAICreateMember_201_response::getUserId() const {
    return m_user_id;
}
void OAICreateMember_201_response::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICreateMember_201_response::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICreateMember_201_response::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICreateMember_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMember_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
