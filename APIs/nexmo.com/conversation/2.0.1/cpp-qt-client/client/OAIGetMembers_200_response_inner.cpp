/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMembers_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMembers_200_response_inner::OAIGetMembers_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMembers_200_response_inner::OAIGetMembers_200_response_inner() {
    this->initializeModel();
}

OAIGetMembers_200_response_inner::~OAIGetMembers_200_response_inner() {}

void OAIGetMembers_200_response_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIGetMembers_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMembers_200_response_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAIGetMembers_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMembers_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIGetMembers_200_response_inner::getName() const {
    return m_name;
}
void OAIGetMembers_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetMembers_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetMembers_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIMember_state OAIGetMembers_200_response_inner::getState() const {
    return m_state;
}
void OAIGetMembers_200_response_inner::setState(const OAIMember_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetMembers_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetMembers_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGetMembers_200_response_inner::getUserId() const {
    return m_user_id;
}
void OAIGetMembers_200_response_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetMembers_200_response_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetMembers_200_response_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIGetMembers_200_response_inner::getUserName() const {
    return m_user_name;
}
void OAIGetMembers_200_response_inner::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIGetMembers_200_response_inner::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIGetMembers_200_response_inner::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIGetMembers_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMembers_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_state_isValid && m_user_id_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
