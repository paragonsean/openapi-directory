/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInitiator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInitiator::OAIInitiator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInitiator::OAIInitiator() {
    this->initializeModel();
}

OAIInitiator::~OAIInitiator() {}

void OAIInitiator::initializeModel() {

    m_joined_isSet = false;
    m_joined_isValid = false;
}

void OAIInitiator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInitiator::fromJsonObject(QJsonObject json) {

    m_joined_isValid = ::OpenAPI::fromJsonValue(m_joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;
}

QString OAIInitiator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInitiator::asJsonObject() const {
    QJsonObject obj;
    if (m_joined.isSet()) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(m_joined));
    }
    return obj;
}

OAIInitiator_joined OAIInitiator::getJoined() const {
    return m_joined;
}
void OAIInitiator::setJoined(const OAIInitiator_joined &joined) {
    m_joined = joined;
    m_joined_isSet = true;
}

bool OAIInitiator::is_joined_Set() const{
    return m_joined_isSet;
}

bool OAIInitiator::is_joined_Valid() const{
    return m_joined_isValid;
}

bool OAIInitiator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_joined.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInitiator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
