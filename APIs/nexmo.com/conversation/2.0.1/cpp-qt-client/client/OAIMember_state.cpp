/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_state::OAIMember_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_state::OAIMember_state() {
    this->initializeModel();
}

OAIMember_state::~OAIMember_state() {}

void OAIMember_state::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMember_state::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMember_state::fromJson(QString jsonString) {
    
    if ( jsonString.compare("invited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMember_state::INVITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("joined", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMember_state::JOINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("left", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMember_state::LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMember_state::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMember_state::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMember_state::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMember_state::INVITED:
            val = "invited";
            break;
        case eOAIMember_state::JOINED:
            val = "joined";
            break;
        case eOAIMember_state::LEFT:
            val = "left";
            break;
        case eOAIMember_state::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMember_state::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMember_state::eOAIMember_state OAIMember_state::getValue() const {
    return m_value;
}

void OAIMember_state::setValue(const OAIMember_state::eOAIMember_state& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMember_state::isSet() const {
    
    return m_value_isSet;
}

bool OAIMember_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
