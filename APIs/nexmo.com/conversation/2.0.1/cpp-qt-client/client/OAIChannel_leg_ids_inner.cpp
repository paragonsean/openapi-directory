/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel_leg_ids_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel_leg_ids_inner::OAIChannel_leg_ids_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel_leg_ids_inner::OAIChannel_leg_ids_inner() {
    this->initializeModel();
}

OAIChannel_leg_ids_inner::~OAIChannel_leg_ids_inner() {}

void OAIChannel_leg_ids_inner::initializeModel() {

    m_leg_id_isSet = false;
    m_leg_id_isValid = false;
}

void OAIChannel_leg_ids_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel_leg_ids_inner::fromJsonObject(QJsonObject json) {

    m_leg_id_isValid = ::OpenAPI::fromJsonValue(m_leg_id, json[QString("leg_id")]);
    m_leg_id_isSet = !json[QString("leg_id")].isNull() && m_leg_id_isValid;
}

QString OAIChannel_leg_ids_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel_leg_ids_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_leg_id_isSet) {
        obj.insert(QString("leg_id"), ::OpenAPI::toJsonValue(m_leg_id));
    }
    return obj;
}

QString OAIChannel_leg_ids_inner::getLegId() const {
    return m_leg_id;
}
void OAIChannel_leg_ids_inner::setLegId(const QString &leg_id) {
    m_leg_id = leg_id;
    m_leg_id_isSet = true;
}

bool OAIChannel_leg_ids_inner::is_leg_id_Set() const{
    return m_leg_id_isSet;
}

bool OAIChannel_leg_ids_inner::is_leg_id_Valid() const{
    return m_leg_id_isValid;
}

bool OAIChannel_leg_ids_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_leg_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel_leg_ids_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
