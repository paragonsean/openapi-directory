/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListLegs_200_response.h
 *
 * List Legs Response Payload Object
 */

#ifndef OAIListLegs_200_response_H
#define OAIListLegs_200_response_H

#include <QJsonObject>

#include "OAIListLegs_200_response__embedded.h"
#include "OAIListLegs_200_response__links.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListLegs_200_response__embedded;
class OAIListLegs_200_response__links;

class OAIListLegs_200_response : public OAIObject {
public:
    OAIListLegs_200_response();
    OAIListLegs_200_response(QString json);
    ~OAIListLegs_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIListLegs_200_response__embedded getEmbedded() const;
    void setEmbedded(const OAIListLegs_200_response__embedded &_embedded);
    bool is__embedded_Set() const;
    bool is__embedded_Valid() const;

    OAIListLegs_200_response__links getLinks() const;
    void setLinks(const OAIListLegs_200_response__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    double getCount() const;
    void setCount(const double &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    double getPageSize() const;
    void setPageSize(const double &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    double getRecordIndex() const;
    void setRecordIndex(const double &record_index);
    bool is_record_index_Set() const;
    bool is_record_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIListLegs_200_response__embedded m__embedded;
    bool m__embedded_isSet;
    bool m__embedded_isValid;

    OAIListLegs_200_response__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    double m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    double m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    double m_record_index;
    bool m_record_index_isSet;
    bool m_record_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListLegs_200_response)

#endif // OAIListLegs_200_response_H
