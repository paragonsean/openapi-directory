/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormat::OAIFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormat::OAIFormat() {
    this->initializeModel();
}

OAIFormat::~OAIFormat() {}

void OAIFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("mp3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::MP3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("wav", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::WAV;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFormat::MP3:
            val = "mp3";
            break;
        case eOAIFormat::WAV:
            val = "wav";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFormat::eOAIFormat OAIFormat::getValue() const {
    return m_value;
}

void OAIFormat::setValue(const OAIFormat::eOAIFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
