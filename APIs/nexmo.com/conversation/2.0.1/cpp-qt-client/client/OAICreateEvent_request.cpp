/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEvent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEvent_request::OAICreateEvent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEvent_request::OAICreateEvent_request() {
    this->initializeModel();
}

OAICreateEvent_request::~OAICreateEvent_request() {}

void OAICreateEvent_request::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateEvent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEvent_request::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateEvent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEvent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAICreateEvent_request::getBody() const {
    return m_body;
}
void OAICreateEvent_request::setBody(const OAIObject &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICreateEvent_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAICreateEvent_request::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICreateEvent_request::getFrom() const {
    return m_from;
}
void OAICreateEvent_request::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICreateEvent_request::is_from_Set() const{
    return m_from_isSet;
}

bool OAICreateEvent_request::is_from_Valid() const{
    return m_from_isValid;
}

QString OAICreateEvent_request::getTo() const {
    return m_to;
}
void OAICreateEvent_request::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICreateEvent_request::is_to_Set() const{
    return m_to_isSet;
}

bool OAICreateEvent_request::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICreateEvent_request::getType() const {
    return m_type;
}
void OAICreateEvent_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateEvent_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateEvent_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateEvent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEvent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
