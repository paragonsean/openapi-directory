/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUser_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUser_request::OAIUpdateUser_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUser_request::OAIUpdateUser_request() {
    this->initializeModel();
}

OAIUpdateUser_request::~OAIUpdateUser_request() {}

void OAIUpdateUser_request::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUpdateUser_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUser_request::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUpdateUser_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUser_request::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.isSet()) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIChannel OAIUpdateUser_request::getChannels() const {
    return m_channels;
}
void OAIUpdateUser_request::setChannels(const OAIChannel &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIUpdateUser_request::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIUpdateUser_request::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIUpdateUser_request::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateUser_request::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateUser_request::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateUser_request::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUpdateUser_request::getImageUrl() const {
    return m_image_url;
}
void OAIUpdateUser_request::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIUpdateUser_request::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIUpdateUser_request::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIUpdateUser_request::getName() const {
    return m_name;
}
void OAIUpdateUser_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateUser_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateUser_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateUser_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUser_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
