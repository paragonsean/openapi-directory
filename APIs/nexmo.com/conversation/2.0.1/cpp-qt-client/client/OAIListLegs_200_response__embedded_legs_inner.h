/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListLegs_200_response__embedded_legs_inner.h
 *
 * 
 */

#ifndef OAIListLegs_200_response__embedded_legs_inner_H
#define OAIListLegs_200_response__embedded_legs_inner_H

#include <QJsonObject>

#include "OAIChannel_type.h"
#include "OAILeg_state.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListLegs_200_response__embedded_legs_inner : public OAIObject {
public:
    OAIListLegs_200_response__embedded_legs_inner();
    OAIListLegs_200_response__embedded_legs_inner(QString json);
    ~OAIListLegs_200_response__embedded_legs_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getEmbedded() const;
    void setEmbedded(const OAIObject &_embedded);
    bool is__embedded_Set() const;
    bool is__embedded_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getConversationUuid() const;
    void setConversationUuid(const QString &conversation_uuid);
    bool is_conversation_uuid_Set() const;
    bool is_conversation_uuid_Valid() const;

    OAIObject getFrom() const;
    void setFrom(const OAIObject &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getStartEnd() const;
    void setStartEnd(const QString &start_end);
    bool is_start_end_Set() const;
    bool is_start_end_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAILeg_state getState() const;
    void setState(const OAILeg_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIObject getTo() const;
    void setTo(const OAIObject &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    OAIChannel_type getType() const;
    void setType(const OAIChannel_type &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m__embedded;
    bool m__embedded_isSet;
    bool m__embedded_isValid;

    OAIObject m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_conversation_uuid;
    bool m_conversation_uuid_isSet;
    bool m_conversation_uuid_isValid;

    OAIObject m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_start_end;
    bool m_start_end_isSet;
    bool m_start_end_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAILeg_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIObject m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    OAIChannel_type m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListLegs_200_response__embedded_legs_inner)

#endif // OAIListLegs_200_response__embedded_legs_inner_H
