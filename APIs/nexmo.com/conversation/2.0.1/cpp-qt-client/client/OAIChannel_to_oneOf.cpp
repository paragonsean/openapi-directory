/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel_to_oneOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel_to_oneOf::OAIChannel_to_oneOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel_to_oneOf::OAIChannel_to_oneOf() {
    this->initializeModel();
}

OAIChannel_to_oneOf::~OAIChannel_to_oneOf() {}

void OAIChannel_to_oneOf::initializeModel() {

    m_dtmf_answer_isSet = false;
    m_dtmf_answer_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannel_to_oneOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel_to_oneOf::fromJsonObject(QJsonObject json) {

    m_dtmf_answer_isValid = ::OpenAPI::fromJsonValue(m_dtmf_answer, json[QString("dtmfAnswer")]);
    m_dtmf_answer_isSet = !json[QString("dtmfAnswer")].isNull() && m_dtmf_answer_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannel_to_oneOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel_to_oneOf::asJsonObject() const {
    QJsonObject obj;
    if (m_dtmf_answer_isSet) {
        obj.insert(QString("dtmfAnswer"), ::OpenAPI::toJsonValue(m_dtmf_answer));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChannel_to_oneOf::getDtmfAnswer() const {
    return m_dtmf_answer;
}
void OAIChannel_to_oneOf::setDtmfAnswer(const QString &dtmf_answer) {
    m_dtmf_answer = dtmf_answer;
    m_dtmf_answer_isSet = true;
}

bool OAIChannel_to_oneOf::is_dtmf_answer_Set() const{
    return m_dtmf_answer_isSet;
}

bool OAIChannel_to_oneOf::is_dtmf_answer_Valid() const{
    return m_dtmf_answer_isValid;
}

double OAIChannel_to_oneOf::getNumber() const {
    return m_number;
}
void OAIChannel_to_oneOf::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIChannel_to_oneOf::is_number_Set() const{
    return m_number_isSet;
}

bool OAIChannel_to_oneOf::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIChannel_to_oneOf::getType() const {
    return m_type;
}
void OAIChannel_to_oneOf::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel_to_oneOf::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel_to_oneOf::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannel_to_oneOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dtmf_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel_to_oneOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
