/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListConversations_200_response__embedded_conversations_inner.h
 *
 * 
 */

#ifndef OAIListConversations_200_response__embedded_conversations_inner_H
#define OAIListConversations_200_response__embedded_conversations_inner_H

#include <QJsonObject>

#include "OAIListConversations_200_response__embedded_conversations_inner__links.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListConversations_200_response__embedded_conversations_inner__links;

class OAIListConversations_200_response__embedded_conversations_inner : public OAIObject {
public:
    OAIListConversations_200_response__embedded_conversations_inner();
    OAIListConversations_200_response__embedded_conversations_inner(QString json);
    ~OAIListConversations_200_response__embedded_conversations_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIListConversations_200_response__embedded_conversations_inner__links getLinks() const;
    void setLinks(const OAIListConversations_200_response__embedded_conversations_inner__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIListConversations_200_response__embedded_conversations_inner__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListConversations_200_response__embedded_conversations_inner)

#endif // OAIListConversations_200_response__embedded_conversations_inner_H
