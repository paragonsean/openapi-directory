/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListConversations_200_response__embedded.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListConversations_200_response__embedded::OAIListConversations_200_response__embedded(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListConversations_200_response__embedded::OAIListConversations_200_response__embedded() {
    this->initializeModel();
}

OAIListConversations_200_response__embedded::~OAIListConversations_200_response__embedded() {}

void OAIListConversations_200_response__embedded::initializeModel() {

    m_conversations_isSet = false;
    m_conversations_isValid = false;
}

void OAIListConversations_200_response__embedded::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListConversations_200_response__embedded::fromJsonObject(QJsonObject json) {

    m_conversations_isValid = ::OpenAPI::fromJsonValue(m_conversations, json[QString("conversations")]);
    m_conversations_isSet = !json[QString("conversations")].isNull() && m_conversations_isValid;
}

QString OAIListConversations_200_response__embedded::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListConversations_200_response__embedded::asJsonObject() const {
    QJsonObject obj;
    if (m_conversations.size() > 0) {
        obj.insert(QString("conversations"), ::OpenAPI::toJsonValue(m_conversations));
    }
    return obj;
}

QList<OAIListConversations_200_response__embedded_conversations_inner> OAIListConversations_200_response__embedded::getConversations() const {
    return m_conversations;
}
void OAIListConversations_200_response__embedded::setConversations(const QList<OAIListConversations_200_response__embedded_conversations_inner> &conversations) {
    m_conversations = conversations;
    m_conversations_isSet = true;
}

bool OAIListConversations_200_response__embedded::is_conversations_Set() const{
    return m_conversations_isSet;
}

bool OAIListConversations_200_response__embedded::is_conversations_Valid() const{
    return m_conversations_isValid;
}

bool OAIListConversations_200_response__embedded::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListConversations_200_response__embedded::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conversations_isValid && true;
}

} // namespace OpenAPI
