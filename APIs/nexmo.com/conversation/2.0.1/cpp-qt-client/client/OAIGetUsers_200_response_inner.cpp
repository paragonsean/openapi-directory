/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUsers_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUsers_200_response_inner::OAIGetUsers_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUsers_200_response_inner::OAIGetUsers_200_response_inner() {
    this->initializeModel();
}

OAIGetUsers_200_response_inner::~OAIGetUsers_200_response_inner() {}

void OAIGetUsers_200_response_inner::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGetUsers_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUsers_200_response_inner::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGetUsers_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUsers_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGetUsers_200_response_inner::getHref() const {
    return m_href;
}
void OAIGetUsers_200_response_inner::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIGetUsers_200_response_inner::is_href_Set() const{
    return m_href_isSet;
}

bool OAIGetUsers_200_response_inner::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIGetUsers_200_response_inner::getId() const {
    return m_id;
}
void OAIGetUsers_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetUsers_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetUsers_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetUsers_200_response_inner::getName() const {
    return m_name;
}
void OAIGetUsers_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetUsers_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetUsers_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetUsers_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUsers_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
