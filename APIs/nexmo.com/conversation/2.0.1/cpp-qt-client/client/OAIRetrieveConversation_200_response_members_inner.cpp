/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveConversation_200_response_members_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveConversation_200_response_members_inner::OAIRetrieveConversation_200_response_members_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveConversation_200_response_members_inner::OAIRetrieveConversation_200_response_members_inner() {
    this->initializeModel();
}

OAIRetrieveConversation_200_response_members_inner::~OAIRetrieveConversation_200_response_members_inner() {}

void OAIRetrieveConversation_200_response_members_inner::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRetrieveConversation_200_response_members_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveConversation_200_response_members_inner::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIRetrieveConversation_200_response_members_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveConversation_200_response_members_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_initiator.isSet()) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIChannel OAIRetrieveConversation_200_response_members_inner::getChannel() const {
    return m_channel;
}
void OAIRetrieveConversation_200_response_members_inner::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIInitiator OAIRetrieveConversation_200_response_members_inner::getInitiator() const {
    return m_initiator;
}
void OAIRetrieveConversation_200_response_members_inner::setInitiator(const OAIInitiator &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_initiator_Valid() const{
    return m_initiator_isValid;
}

QString OAIRetrieveConversation_200_response_members_inner::getMemberId() const {
    return m_member_id;
}
void OAIRetrieveConversation_200_response_members_inner::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIRetrieveConversation_200_response_members_inner::getName() const {
    return m_name;
}
void OAIRetrieveConversation_200_response_members_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIMember_state OAIRetrieveConversation_200_response_members_inner::getState() const {
    return m_state;
}
void OAIRetrieveConversation_200_response_members_inner::setState(const OAIMember_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_state_Valid() const{
    return m_state_isValid;
}

OAITimestamp_res_member OAIRetrieveConversation_200_response_members_inner::getTimestamp() const {
    return m_timestamp;
}
void OAIRetrieveConversation_200_response_members_inner::setTimestamp(const OAITimestamp_res_member &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRetrieveConversation_200_response_members_inner::getUserId() const {
    return m_user_id;
}
void OAIRetrieveConversation_200_response_members_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRetrieveConversation_200_response_members_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRetrieveConversation_200_response_members_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRetrieveConversation_200_response_members_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveConversation_200_response_members_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
