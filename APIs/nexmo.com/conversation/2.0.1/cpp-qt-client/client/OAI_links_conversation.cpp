/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_links_conversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_links_conversation::OAI_links_conversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_links_conversation::OAI_links_conversation() {
    this->initializeModel();
}

OAI_links_conversation::~OAI_links_conversation() {}

void OAI_links_conversation::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAI_links_conversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_links_conversation::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAI_links_conversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_links_conversation::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIListConversations_200_response__embedded_conversations_inner__links_self OAI_links_conversation::getSelf() const {
    return m_self;
}
void OAI_links_conversation::setSelf(const OAIListConversations_200_response__embedded_conversations_inner__links_self &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAI_links_conversation::is_self_Set() const{
    return m_self_isSet;
}

bool OAI_links_conversation::is_self_Valid() const{
    return m_self_isValid;
}

bool OAI_links_conversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_links_conversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
