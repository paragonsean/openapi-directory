/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListConversations_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListConversations_200_response::OAIListConversations_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListConversations_200_response::OAIListConversations_200_response() {
    this->initializeModel();
}

OAIListConversations_200_response::~OAIListConversations_200_response() {}

void OAIListConversations_200_response::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_record_index_isSet = false;
    m_record_index_isValid = false;
}

void OAIListConversations_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListConversations_200_response::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_record_index_isValid = ::OpenAPI::fromJsonValue(m_record_index, json[QString("record_index")]);
    m_record_index_isSet = !json[QString("record_index")].isNull() && m_record_index_isValid;
}

QString OAIListConversations_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListConversations_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_record_index_isSet) {
        obj.insert(QString("record_index"), ::OpenAPI::toJsonValue(m_record_index));
    }
    return obj;
}

OAIListConversations_200_response__embedded OAIListConversations_200_response::getEmbedded() const {
    return m__embedded;
}
void OAIListConversations_200_response::setEmbedded(const OAIListConversations_200_response__embedded &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIListConversations_200_response::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIListConversations_200_response::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAI_links_conversations_list OAIListConversations_200_response::getLinks() const {
    return m__links;
}
void OAIListConversations_200_response::setLinks(const OAI_links_conversations_list &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIListConversations_200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIListConversations_200_response::is__links_Valid() const{
    return m__links_isValid;
}

double OAIListConversations_200_response::getCount() const {
    return m_count;
}
void OAIListConversations_200_response::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIListConversations_200_response::is_count_Set() const{
    return m_count_isSet;
}

bool OAIListConversations_200_response::is_count_Valid() const{
    return m_count_isValid;
}

double OAIListConversations_200_response::getPageSize() const {
    return m_page_size;
}
void OAIListConversations_200_response::setPageSize(const double &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListConversations_200_response::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListConversations_200_response::is_page_size_Valid() const{
    return m_page_size_isValid;
}

double OAIListConversations_200_response::getRecordIndex() const {
    return m_record_index;
}
void OAIListConversations_200_response::setRecordIndex(const double &record_index) {
    m_record_index = record_index;
    m_record_index_isSet = true;
}

bool OAIListConversations_200_response::is_record_index_Set() const{
    return m_record_index_isSet;
}

bool OAIListConversations_200_response::is_record_index_Valid() const{
    return m_record_index_isValid;
}

bool OAIListConversations_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListConversations_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__embedded_isValid && m__links_isValid && m_count_isValid && m_page_size_isValid && m_record_index_isValid && true;
}

} // namespace OpenAPI
