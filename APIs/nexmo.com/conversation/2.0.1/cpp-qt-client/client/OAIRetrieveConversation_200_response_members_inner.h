/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetrieveConversation_200_response_members_inner.h
 *
 * 
 */

#ifndef OAIRetrieveConversation_200_response_members_inner_H
#define OAIRetrieveConversation_200_response_members_inner_H

#include <QJsonObject>

#include "OAIChannel.h"
#include "OAIInitiator.h"
#include "OAIMember_state.h"
#include "OAITimestamp_res_member.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannel;
class OAIInitiator;
class OAITimestamp_res_member;

class OAIRetrieveConversation_200_response_members_inner : public OAIObject {
public:
    OAIRetrieveConversation_200_response_members_inner();
    OAIRetrieveConversation_200_response_members_inner(QString json);
    ~OAIRetrieveConversation_200_response_members_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChannel getChannel() const;
    void setChannel(const OAIChannel &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    OAIInitiator getInitiator() const;
    void setInitiator(const OAIInitiator &initiator);
    bool is_initiator_Set() const;
    bool is_initiator_Valid() const;

    QString getMemberId() const;
    void setMemberId(const QString &member_id);
    bool is_member_id_Set() const;
    bool is_member_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIMember_state getState() const;
    void setState(const OAIMember_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAITimestamp_res_member getTimestamp() const;
    void setTimestamp(const OAITimestamp_res_member &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChannel m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    OAIInitiator m_initiator;
    bool m_initiator_isSet;
    bool m_initiator_isValid;

    QString m_member_id;
    bool m_member_id_isSet;
    bool m_member_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIMember_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAITimestamp_res_member m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetrieveConversation_200_response_members_inner)

#endif // OAIRetrieveConversation_200_response_members_inner_H
