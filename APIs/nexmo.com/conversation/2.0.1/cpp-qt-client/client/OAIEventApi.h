/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventApi_H
#define OAI_OAIEventApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateEvent_201_response.h"
#include "OAICreateEvent_request.h"
#include "OAIEvent_retrieved.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventApi : public QObject {
    Q_OBJECT

public:
    OAIEventApi(const int timeOut = 0);
    ~OAIEventApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  oai_create_event_request OAICreateEvent_request [optional]
    */
    virtual void createEvent(const QString &conversation_id, const ::OpenAPI::OptionalParam<OAICreateEvent_request> &oai_create_event_request = ::OpenAPI::OptionalParam<OAICreateEvent_request>());

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  event_id QString [required]
    */
    virtual void deleteEvent(const QString &conversation_id, const QString &event_id);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  event_id QString [required]
    */
    virtual void getEvent(const QString &conversation_id, const QString &event_id);

    /**
    * @param[in]  conversation_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getEvents(const QString &conversation_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEventCallback(OAIHttpRequestWorker *worker);
    void deleteEventCallback(OAIHttpRequestWorker *worker);
    void getEventCallback(OAIHttpRequestWorker *worker);
    void getEventsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEventSignal(OAICreateEvent_201_response summary);
    void deleteEventSignal(OAIObject summary);
    void getEventSignal(OAIEvent_retrieved summary);
    void getEventsSignal(QList<OAIEvent_retrieved> summary);


    void createEventSignalFull(OAIHttpRequestWorker *worker, OAICreateEvent_201_response summary);
    void deleteEventSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getEventSignalFull(OAIHttpRequestWorker *worker, OAIEvent_retrieved summary);
    void getEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent_retrieved> summary);

    Q_DECL_DEPRECATED_X("Use createEventSignalError() instead")
    void createEventSignalE(OAICreateEvent_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventSignalError(OAICreateEvent_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventSignalError() instead")
    void deleteEventSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalError() instead")
    void getEventSignalE(OAIEvent_retrieved summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalError(OAIEvent_retrieved summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalError() instead")
    void getEventsSignalE(QList<OAIEvent_retrieved> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalError(QList<OAIEvent_retrieved> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEventSignalErrorFull() instead")
    void createEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventSignalErrorFull() instead")
    void deleteEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalErrorFull() instead")
    void getEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalErrorFull() instead")
    void getEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
