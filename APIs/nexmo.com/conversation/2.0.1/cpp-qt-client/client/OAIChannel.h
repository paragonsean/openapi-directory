/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannel.h
 *
 * A user who joins a conversation as a member can have one channel per membership type. Channels can be &#x60;app&#x60;, &#x60;phone&#x60;, &#x60;sip&#x60;, &#x60;websocket&#x60;, or &#x60;vbc&#x60;
 */

#ifndef OAIChannel_H
#define OAIChannel_H

#include <QJsonObject>

#include "OAIChannel_from.h"
#include "OAIChannel_leg_ids_inner.h"
#include "OAIChannel_to.h"
#include "OAIChannel_type.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannel_from;
class OAIChannel_leg_ids_inner;
class OAIChannel_to;

class OAIChannel : public OAIObject {
public:
    OAIChannel();
    OAIChannel(QString json);
    ~OAIChannel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChannel_from getFrom() const;
    void setFrom(const OAIChannel_from &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getLegId() const;
    void setLegId(const QString &leg_id);
    bool is_leg_id_Set() const;
    bool is_leg_id_Valid() const;

    QList<OAIChannel_leg_ids_inner> getLegIds() const;
    void setLegIds(const QList<OAIChannel_leg_ids_inner> &leg_ids);
    bool is_leg_ids_Set() const;
    bool is_leg_ids_Valid() const;

    OAIChannel_to getTo() const;
    void setTo(const OAIChannel_to &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    OAIChannel_type getType() const;
    void setType(const OAIChannel_type &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChannel_from m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_leg_id;
    bool m_leg_id_isSet;
    bool m_leg_id_isValid;

    QList<OAIChannel_leg_ids_inner> m_leg_ids;
    bool m_leg_ids_isSet;
    bool m_leg_ids_isValid;

    OAIChannel_to m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    OAIChannel_type m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannel)

#endif // OAIChannel_H
