/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationApi_H
#define OAI_OAIConversationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateConversation_200_response.h"
#include "OAICreateConversation_request.h"
#include "OAIListConversations_200_response.h"
#include "OAIObject.h"
#include "OAIRecordConversation_request.h"
#include "OAIRetrieveConversation_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationApi(const int timeOut = 0);
    ~OAIConversationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_conversation_request OAICreateConversation_request [optional]
    */
    virtual void createConversation(const ::OpenAPI::OptionalParam<OAICreateConversation_request> &oai_create_conversation_request = ::OpenAPI::OptionalParam<OAICreateConversation_request>());

    /**
    * @param[in]  conversation_id QString [required]
    */
    virtual void deleteConversation(const QString &conversation_id);

    /**
    * @param[in]  date_start QString [optional]
    * @param[in]  date_end QString [optional]
    * @param[in]  page_size double [optional]
    * @param[in]  record_index double [optional]
    * @param[in]  order QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listConversations(const ::OpenAPI::OptionalParam<QString> &date_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &record_index = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  oai_record_conversation_request OAIRecordConversation_request [optional]
    */
    virtual void recordConversation(const QString &conversation_id, const ::OpenAPI::OptionalParam<OAIRecordConversation_request> &oai_record_conversation_request = ::OpenAPI::OptionalParam<OAIRecordConversation_request>());

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  oai_create_conversation_request OAICreateConversation_request [optional]
    */
    virtual void replaceConversation(const QString &conversation_id, const ::OpenAPI::OptionalParam<OAICreateConversation_request> &oai_create_conversation_request = ::OpenAPI::OptionalParam<OAICreateConversation_request>());

    /**
    * @param[in]  conversation_id QString [required]
    */
    virtual void retrieveConversation(const QString &conversation_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConversationCallback(OAIHttpRequestWorker *worker);
    void deleteConversationCallback(OAIHttpRequestWorker *worker);
    void listConversationsCallback(OAIHttpRequestWorker *worker);
    void recordConversationCallback(OAIHttpRequestWorker *worker);
    void replaceConversationCallback(OAIHttpRequestWorker *worker);
    void retrieveConversationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConversationSignal(OAICreateConversation_200_response summary);
    void deleteConversationSignal(OAIObject summary);
    void listConversationsSignal(OAIListConversations_200_response summary);
    void recordConversationSignal();
    void replaceConversationSignal(OAICreateConversation_200_response summary);
    void retrieveConversationSignal(OAIRetrieveConversation_200_response summary);


    void createConversationSignalFull(OAIHttpRequestWorker *worker, OAICreateConversation_200_response summary);
    void deleteConversationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void listConversationsSignalFull(OAIHttpRequestWorker *worker, OAIListConversations_200_response summary);
    void recordConversationSignalFull(OAIHttpRequestWorker *worker);
    void replaceConversationSignalFull(OAIHttpRequestWorker *worker, OAICreateConversation_200_response summary);
    void retrieveConversationSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveConversation_200_response summary);

    Q_DECL_DEPRECATED_X("Use createConversationSignalError() instead")
    void createConversationSignalE(OAICreateConversation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationSignalError(OAICreateConversation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationSignalError() instead")
    void deleteConversationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationsSignalError() instead")
    void listConversationsSignalE(OAIListConversations_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationsSignalError(OAIListConversations_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordConversationSignalError() instead")
    void recordConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recordConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceConversationSignalError() instead")
    void replaceConversationSignalE(OAICreateConversation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceConversationSignalError(OAICreateConversation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveConversationSignalError() instead")
    void retrieveConversationSignalE(OAIRetrieveConversation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveConversationSignalError(OAIRetrieveConversation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConversationSignalErrorFull() instead")
    void createConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationSignalErrorFull() instead")
    void deleteConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationsSignalErrorFull() instead")
    void listConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordConversationSignalErrorFull() instead")
    void recordConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceConversationSignalErrorFull() instead")
    void replaceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveConversationSignalErrorFull() instead")
    void retrieveConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
