/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMember_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMember_request::OAICreateMember_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMember_request::OAICreateMember_request() {
    this->initializeModel();
}

OAICreateMember_request::~OAICreateMember_request() {}

void OAICreateMember_request::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_knocking_id_isSet = false;
    m_knocking_id_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_id_inviting_isSet = false;
    m_member_id_inviting_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICreateMember_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMember_request::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_knocking_id_isValid = ::OpenAPI::fromJsonValue(m_knocking_id, json[QString("knocking_id")]);
    m_knocking_id_isSet = !json[QString("knocking_id")].isNull() && m_knocking_id_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_member_id_inviting_isValid = ::OpenAPI::fromJsonValue(m_member_id_inviting, json[QString("member_id_inviting")]);
    m_member_id_inviting_isSet = !json[QString("member_id_inviting")].isNull() && m_member_id_inviting_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICreateMember_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMember_request::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_knocking_id_isSet) {
        obj.insert(QString("knocking_id"), ::OpenAPI::toJsonValue(m_knocking_id));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_id_inviting_isSet) {
        obj.insert(QString("member_id_inviting"), ::OpenAPI::toJsonValue(m_member_id_inviting));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIMember_action OAICreateMember_request::getAction() const {
    return m_action;
}
void OAICreateMember_request::setAction(const OAIMember_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateMember_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateMember_request::is_action_Valid() const{
    return m_action_isValid;
}

OAIChannel OAICreateMember_request::getChannel() const {
    return m_channel;
}
void OAICreateMember_request::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICreateMember_request::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICreateMember_request::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAICreateMember_request::getKnockingId() const {
    return m_knocking_id;
}
void OAICreateMember_request::setKnockingId(const QString &knocking_id) {
    m_knocking_id = knocking_id;
    m_knocking_id_isSet = true;
}

bool OAICreateMember_request::is_knocking_id_Set() const{
    return m_knocking_id_isSet;
}

bool OAICreateMember_request::is_knocking_id_Valid() const{
    return m_knocking_id_isValid;
}

OAIObject OAICreateMember_request::getMedia() const {
    return m_media;
}
void OAICreateMember_request::setMedia(const OAIObject &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAICreateMember_request::is_media_Set() const{
    return m_media_isSet;
}

bool OAICreateMember_request::is_media_Valid() const{
    return m_media_isValid;
}

QString OAICreateMember_request::getMemberId() const {
    return m_member_id;
}
void OAICreateMember_request::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAICreateMember_request::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAICreateMember_request::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAICreateMember_request::getMemberIdInviting() const {
    return m_member_id_inviting;
}
void OAICreateMember_request::setMemberIdInviting(const QString &member_id_inviting) {
    m_member_id_inviting = member_id_inviting;
    m_member_id_inviting_isSet = true;
}

bool OAICreateMember_request::is_member_id_inviting_Set() const{
    return m_member_id_inviting_isSet;
}

bool OAICreateMember_request::is_member_id_inviting_Valid() const{
    return m_member_id_inviting_isValid;
}

QString OAICreateMember_request::getUserId() const {
    return m_user_id;
}
void OAICreateMember_request::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICreateMember_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICreateMember_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICreateMember_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_knocking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_inviting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMember_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
