/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMember_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMember_request::OAIUpdateMember_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMember_request::OAIUpdateMember_request() {
    this->initializeModel();
}

OAIUpdateMember_request::~OAIUpdateMember_request() {}

void OAIUpdateMember_request::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;
}

void OAIUpdateMember_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMember_request::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;
}

QString OAIUpdateMember_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMember_request::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    return obj;
}

OAIMember_action OAIUpdateMember_request::getAction() const {
    return m_action;
}
void OAIUpdateMember_request::setAction(const OAIMember_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateMember_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateMember_request::is_action_Valid() const{
    return m_action_isValid;
}

OAIChannel OAIUpdateMember_request::getChannel() const {
    return m_channel;
}
void OAIUpdateMember_request::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIUpdateMember_request::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIUpdateMember_request::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIUpdateMember_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMember_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
