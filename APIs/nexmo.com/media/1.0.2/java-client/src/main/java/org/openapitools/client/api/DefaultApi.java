/*
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListAndSearchMediaItems200Response;
import org.openapitools.client.model.Media;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAMediaItem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAMediaItemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/:id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAMediaItemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAMediaItemCall(_callback);

    }

    /**
     * Delete a media item
     * Delete a previously created media item by ID.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAMediaItem() throws ApiException {
        deleteAMediaItemWithHttpInfo();
    }

    /**
     * Delete a media item
     * Delete a previously created media item by ID.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAMediaItemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAMediaItemValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a media item (asynchronously)
     * Delete a previously created media item by ID.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAMediaItemAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAMediaItemValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAndSearchMediaItems
     * @param order The order of search results. (optional, default to descending)
     * @param pageIndex Which page to retrieve in pagination (optional, default to 0)
     * @param pageSize How many items at most per page (optional, default to 20)
     * @param startTime Retrieve results created on or after this timestap. (optional, default to 1 week ago)
     * @param endTime Retrieve results created on or before this timestamp. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAndSearchMediaItemsCall(String order, Integer pageIndex, Integer pageSize, String startTime, String endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_index", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAndSearchMediaItemsValidateBeforeCall(String order, Integer pageIndex, Integer pageSize, String startTime, String endTime, final ApiCallback _callback) throws ApiException {
        return listAndSearchMediaItemsCall(order, pageIndex, pageSize, startTime, endTime, _callback);

    }

    /**
     * List and search media items
     * Retrieve information about multiple media items with the ability to search and paginate.
     * @param order The order of search results. (optional, default to descending)
     * @param pageIndex Which page to retrieve in pagination (optional, default to 0)
     * @param pageSize How many items at most per page (optional, default to 20)
     * @param startTime Retrieve results created on or after this timestap. (optional, default to 1 week ago)
     * @param endTime Retrieve results created on or before this timestamp. (optional)
     * @return ListAndSearchMediaItems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ListAndSearchMediaItems200Response listAndSearchMediaItems(String order, Integer pageIndex, Integer pageSize, String startTime, String endTime) throws ApiException {
        ApiResponse<ListAndSearchMediaItems200Response> localVarResp = listAndSearchMediaItemsWithHttpInfo(order, pageIndex, pageSize, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * List and search media items
     * Retrieve information about multiple media items with the ability to search and paginate.
     * @param order The order of search results. (optional, default to descending)
     * @param pageIndex Which page to retrieve in pagination (optional, default to 0)
     * @param pageSize How many items at most per page (optional, default to 20)
     * @param startTime Retrieve results created on or after this timestap. (optional, default to 1 week ago)
     * @param endTime Retrieve results created on or before this timestamp. (optional)
     * @return ApiResponse&lt;ListAndSearchMediaItems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAndSearchMediaItems200Response> listAndSearchMediaItemsWithHttpInfo(String order, Integer pageIndex, Integer pageSize, String startTime, String endTime) throws ApiException {
        okhttp3.Call localVarCall = listAndSearchMediaItemsValidateBeforeCall(order, pageIndex, pageSize, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<ListAndSearchMediaItems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List and search media items (asynchronously)
     * Retrieve information about multiple media items with the ability to search and paginate.
     * @param order The order of search results. (optional, default to descending)
     * @param pageIndex Which page to retrieve in pagination (optional, default to 0)
     * @param pageSize How many items at most per page (optional, default to 20)
     * @param startTime Retrieve results created on or after this timestap. (optional, default to 1 week ago)
     * @param endTime Retrieve results created on or before this timestamp. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAndSearchMediaItemsAsync(String order, Integer pageIndex, Integer pageSize, String startTime, String endTime, final ApiCallback<ListAndSearchMediaItems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAndSearchMediaItemsValidateBeforeCall(order, pageIndex, pageSize, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<ListAndSearchMediaItems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAMediaItem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAMediaItemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/:id/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAMediaItemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retrieveAMediaItemCall(_callback);

    }

    /**
     * Retrieve a media item
     * Retrieve information about a single media item
     * @return Media
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public Media retrieveAMediaItem() throws ApiException {
        ApiResponse<Media> localVarResp = retrieveAMediaItemWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve a media item
     * Retrieve information about a single media item
     * @return ApiResponse&lt;Media&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Media> retrieveAMediaItemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retrieveAMediaItemValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a media item (asynchronously)
     * Retrieve information about a single media item
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAMediaItemAsync(final ApiCallback<Media> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAMediaItemValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAMediaItem
     * @param description A description of the media file. (optional)
     * @param maxDownloadsAllowed The maximum number of times the file may be downloaded. Unlimited when not provided. (optional)
     * @param metadataPrimary A string containing metadata about the media file. (optional)
     * @param metadataSecondary A string containing further metadata about the media file. (optional)
     * @param mimeType The MIME type of the media file. (optional)
     * @param _public Whether the item is publicly available without authentication. (optional)
     * @param title A string containing a title for the media file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAMediaItemCall(String description, Integer maxDownloadsAllowed, String metadataPrimary, String metadataSecondary, String mimeType, Boolean _public, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/:id/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (maxDownloadsAllowed != null) {
            localVarFormParams.put("max_downloads_allowed", maxDownloadsAllowed);
        }

        if (metadataPrimary != null) {
            localVarFormParams.put("metadata_primary", metadataPrimary);
        }

        if (metadataSecondary != null) {
            localVarFormParams.put("metadata_secondary", metadataSecondary);
        }

        if (mimeType != null) {
            localVarFormParams.put("mime_type", mimeType);
        }

        if (_public != null) {
            localVarFormParams.put("public", _public);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAMediaItemValidateBeforeCall(String description, Integer maxDownloadsAllowed, String metadataPrimary, String metadataSecondary, String mimeType, Boolean _public, String title, final ApiCallback _callback) throws ApiException {
        return updateAMediaItemCall(description, maxDownloadsAllowed, metadataPrimary, metadataSecondary, mimeType, _public, title, _callback);

    }

    /**
     * Update a media item
     * Update a previously created media item by ID.
     * @param description A description of the media file. (optional)
     * @param maxDownloadsAllowed The maximum number of times the file may be downloaded. Unlimited when not provided. (optional)
     * @param metadataPrimary A string containing metadata about the media file. (optional)
     * @param metadataSecondary A string containing further metadata about the media file. (optional)
     * @param mimeType The MIME type of the media file. (optional)
     * @param _public Whether the item is publicly available without authentication. (optional)
     * @param title A string containing a title for the media file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public void updateAMediaItem(String description, Integer maxDownloadsAllowed, String metadataPrimary, String metadataSecondary, String mimeType, Boolean _public, String title) throws ApiException {
        updateAMediaItemWithHttpInfo(description, maxDownloadsAllowed, metadataPrimary, metadataSecondary, mimeType, _public, title);
    }

    /**
     * Update a media item
     * Update a previously created media item by ID.
     * @param description A description of the media file. (optional)
     * @param maxDownloadsAllowed The maximum number of times the file may be downloaded. Unlimited when not provided. (optional)
     * @param metadataPrimary A string containing metadata about the media file. (optional)
     * @param metadataSecondary A string containing further metadata about the media file. (optional)
     * @param mimeType The MIME type of the media file. (optional)
     * @param _public Whether the item is publicly available without authentication. (optional)
     * @param title A string containing a title for the media file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAMediaItemWithHttpInfo(String description, Integer maxDownloadsAllowed, String metadataPrimary, String metadataSecondary, String mimeType, Boolean _public, String title) throws ApiException {
        okhttp3.Call localVarCall = updateAMediaItemValidateBeforeCall(description, maxDownloadsAllowed, metadataPrimary, metadataSecondary, mimeType, _public, title, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a media item (asynchronously)
     * Update a previously created media item by ID.
     * @param description A description of the media file. (optional)
     * @param maxDownloadsAllowed The maximum number of times the file may be downloaded. Unlimited when not provided. (optional)
     * @param metadataPrimary A string containing metadata about the media file. (optional)
     * @param metadataSecondary A string containing further metadata about the media file. (optional)
     * @param mimeType The MIME type of the media file. (optional)
     * @param _public Whether the item is publicly available without authentication. (optional)
     * @param title A string containing a title for the media file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAMediaItemAsync(String description, Integer maxDownloadsAllowed, String metadataPrimary, String metadataSecondary, String mimeType, Boolean _public, String title, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAMediaItemValidateBeforeCall(description, maxDownloadsAllowed, metadataPrimary, metadataSecondary, mimeType, _public, title, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
