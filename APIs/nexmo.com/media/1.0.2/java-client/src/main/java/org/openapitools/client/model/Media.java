/*
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Media
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:14.119606-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Media {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAX_DOWNLOADS_ALLOWED = "max_downloads_allowed";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOADS_ALLOWED)
  private Integer maxDownloadsAllowed;

  public static final String SERIALIZED_NAME_MEDIA_SIZE = "media_size";
  @SerializedName(SERIALIZED_NAME_MEDIA_SIZE)
  private Integer mediaSize;

  public static final String SERIALIZED_NAME_METADATA_PRIMARY = "metadata_primary";
  @SerializedName(SERIALIZED_NAME_METADATA_PRIMARY)
  private String metadataPrimary;

  public static final String SERIALIZED_NAME_METADATA_SECONDARY = "metadata_secondary";
  @SerializedName(SERIALIZED_NAME_METADATA_SECONDARY)
  private String metadataSecondary;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_ORIGINAL_FILE_NAME = "original_file_name";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILE_NAME)
  private String originalFileName;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_TIME_CREATED = "time_created";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_TIME_LAST_UPDATED = "time_last_updated";
  @SerializedName(SERIALIZED_NAME_TIME_LAST_UPDATED)
  private String timeLastUpdated;

  public static final String SERIALIZED_NAME_TIMES_DOWNLOADED = "times_downloaded";
  @SerializedName(SERIALIZED_NAME_TIMES_DOWNLOADED)
  private Integer timesDownloaded;

  public Media() {
  }

  public Media accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of your Nexmo account. This is the same as your API key.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Media etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Media id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A UUID representing the object.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Media maxDownloadsAllowed(Integer maxDownloadsAllowed) {
    this.maxDownloadsAllowed = maxDownloadsAllowed;
    return this;
  }

  /**
   * The maximum number of times the file may be downloaded.
   * @return maxDownloadsAllowed
   */
  @javax.annotation.Nullable
  public Integer getMaxDownloadsAllowed() {
    return maxDownloadsAllowed;
  }

  public void setMaxDownloadsAllowed(Integer maxDownloadsAllowed) {
    this.maxDownloadsAllowed = maxDownloadsAllowed;
  }


  public Media mediaSize(Integer mediaSize) {
    this.mediaSize = mediaSize;
    return this;
  }

  /**
   * The size of the file in bytes
   * @return mediaSize
   */
  @javax.annotation.Nullable
  public Integer getMediaSize() {
    return mediaSize;
  }

  public void setMediaSize(Integer mediaSize) {
    this.mediaSize = mediaSize;
  }


  public Media metadataPrimary(String metadataPrimary) {
    this.metadataPrimary = metadataPrimary;
    return this;
  }

  /**
   * A user set string containing metadata about the media file.
   * @return metadataPrimary
   */
  @javax.annotation.Nullable
  public String getMetadataPrimary() {
    return metadataPrimary;
  }

  public void setMetadataPrimary(String metadataPrimary) {
    this.metadataPrimary = metadataPrimary;
  }


  public Media metadataSecondary(String metadataSecondary) {
    this.metadataSecondary = metadataSecondary;
    return this;
  }

  /**
   * A user set string containing further metadata about the media file.
   * @return metadataSecondary
   */
  @javax.annotation.Nullable
  public String getMetadataSecondary() {
    return metadataSecondary;
  }

  public void setMetadataSecondary(String metadataSecondary) {
    this.metadataSecondary = metadataSecondary;
  }


  public Media mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The IETF MIME type of the file.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public Media originalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
    return this;
  }

  /**
   * The filename of the object as it was originally uploaded.
   * @return originalFileName
   */
  @javax.annotation.Nullable
  public String getOriginalFileName() {
    return originalFileName;
  }

  public void setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
  }


  public Media _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Whether the item is available for download without authentication.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public Media storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * An internal identifier of how the file is stored.
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public Media timeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * A timestamp for the time that the file was created
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public String getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }


  public Media timeLastUpdated(String timeLastUpdated) {
    this.timeLastUpdated = timeLastUpdated;
    return this;
  }

  /**
   * A timestamp for the time that the file was last modified
   * @return timeLastUpdated
   */
  @javax.annotation.Nullable
  public String getTimeLastUpdated() {
    return timeLastUpdated;
  }

  public void setTimeLastUpdated(String timeLastUpdated) {
    this.timeLastUpdated = timeLastUpdated;
  }


  public Media timesDownloaded(Integer timesDownloaded) {
    this.timesDownloaded = timesDownloaded;
    return this;
  }

  /**
   * The number of times the file has been downloaded.
   * @return timesDownloaded
   */
  @javax.annotation.Nullable
  public Integer getTimesDownloaded() {
    return timesDownloaded;
  }

  public void setTimesDownloaded(Integer timesDownloaded) {
    this.timesDownloaded = timesDownloaded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Media media = (Media) o;
    return Objects.equals(this.accountId, media.accountId) &&
        Objects.equals(this.etag, media.etag) &&
        Objects.equals(this.id, media.id) &&
        Objects.equals(this.maxDownloadsAllowed, media.maxDownloadsAllowed) &&
        Objects.equals(this.mediaSize, media.mediaSize) &&
        Objects.equals(this.metadataPrimary, media.metadataPrimary) &&
        Objects.equals(this.metadataSecondary, media.metadataSecondary) &&
        Objects.equals(this.mimeType, media.mimeType) &&
        Objects.equals(this.originalFileName, media.originalFileName) &&
        Objects.equals(this._public, media._public) &&
        Objects.equals(this.storeId, media.storeId) &&
        Objects.equals(this.timeCreated, media.timeCreated) &&
        Objects.equals(this.timeLastUpdated, media.timeLastUpdated) &&
        Objects.equals(this.timesDownloaded, media.timesDownloaded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, etag, id, maxDownloadsAllowed, mediaSize, metadataPrimary, metadataSecondary, mimeType, originalFileName, _public, storeId, timeCreated, timeLastUpdated, timesDownloaded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Media {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxDownloadsAllowed: ").append(toIndentedString(maxDownloadsAllowed)).append("\n");
    sb.append("    mediaSize: ").append(toIndentedString(mediaSize)).append("\n");
    sb.append("    metadataPrimary: ").append(toIndentedString(metadataPrimary)).append("\n");
    sb.append("    metadataSecondary: ").append(toIndentedString(metadataSecondary)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    originalFileName: ").append(toIndentedString(originalFileName)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeLastUpdated: ").append(toIndentedString(timeLastUpdated)).append("\n");
    sb.append("    timesDownloaded: ").append(toIndentedString(timesDownloaded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("max_downloads_allowed");
    openapiFields.add("media_size");
    openapiFields.add("metadata_primary");
    openapiFields.add("metadata_secondary");
    openapiFields.add("mime_type");
    openapiFields.add("original_file_name");
    openapiFields.add("public");
    openapiFields.add("store_id");
    openapiFields.add("time_created");
    openapiFields.add("time_last_updated");
    openapiFields.add("times_downloaded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Media
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Media.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Media is not found in the empty JSON string", Media.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Media.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Media` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("metadata_primary") != null && !jsonObj.get("metadata_primary").isJsonNull()) && !jsonObj.get("metadata_primary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_primary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_primary").toString()));
      }
      if ((jsonObj.get("metadata_secondary") != null && !jsonObj.get("metadata_secondary").isJsonNull()) && !jsonObj.get("metadata_secondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_secondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_secondary").toString()));
      }
      if ((jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if ((jsonObj.get("original_file_name") != null && !jsonObj.get("original_file_name").isJsonNull()) && !jsonObj.get("original_file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_file_name").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if ((jsonObj.get("time_created") != null && !jsonObj.get("time_created").isJsonNull()) && !jsonObj.get("time_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_created").toString()));
      }
      if ((jsonObj.get("time_last_updated") != null && !jsonObj.get("time_last_updated").isJsonNull()) && !jsonObj.get("time_last_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_last_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_last_updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Media.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Media' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Media> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Media.class));

       return (TypeAdapter<T>) new TypeAdapter<Media>() {
           @Override
           public void write(JsonWriter out, Media value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Media read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Media given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Media
   * @throws IOException if the JSON string is invalid with respect to Media
   */
  public static Media fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Media.class);
  }

  /**
   * Convert an instance of Media to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

