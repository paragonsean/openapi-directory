# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, etag: str=None, id: str=None, max_downloads_allowed: int=None, media_size: int=None, metadata_primary: str=None, metadata_secondary: str=None, mime_type: str=None, original_file_name: str=None, public: bool=None, store_id: str=None, time_created: str=None, time_last_updated: str=None, times_downloaded: int=None):
        """Media - a model defined in OpenAPI

        :param account_id: The account_id of this Media.
        :param etag: The etag of this Media.
        :param id: The id of this Media.
        :param max_downloads_allowed: The max_downloads_allowed of this Media.
        :param media_size: The media_size of this Media.
        :param metadata_primary: The metadata_primary of this Media.
        :param metadata_secondary: The metadata_secondary of this Media.
        :param mime_type: The mime_type of this Media.
        :param original_file_name: The original_file_name of this Media.
        :param public: The public of this Media.
        :param store_id: The store_id of this Media.
        :param time_created: The time_created of this Media.
        :param time_last_updated: The time_last_updated of this Media.
        :param times_downloaded: The times_downloaded of this Media.
        """
        self.openapi_types = {
            'account_id': str,
            'etag': str,
            'id': str,
            'max_downloads_allowed': int,
            'media_size': int,
            'metadata_primary': str,
            'metadata_secondary': str,
            'mime_type': str,
            'original_file_name': str,
            'public': bool,
            'store_id': str,
            'time_created': str,
            'time_last_updated': str,
            'times_downloaded': int
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'etag': 'etag',
            'id': 'id',
            'max_downloads_allowed': 'max_downloads_allowed',
            'media_size': 'media_size',
            'metadata_primary': 'metadata_primary',
            'metadata_secondary': 'metadata_secondary',
            'mime_type': 'mime_type',
            'original_file_name': 'original_file_name',
            'public': 'public',
            'store_id': 'store_id',
            'time_created': 'time_created',
            'time_last_updated': 'time_last_updated',
            'times_downloaded': 'times_downloaded'
        }

        self._account_id = account_id
        self._etag = etag
        self._id = id
        self._max_downloads_allowed = max_downloads_allowed
        self._media_size = media_size
        self._metadata_primary = metadata_primary
        self._metadata_secondary = metadata_secondary
        self._mime_type = mime_type
        self._original_file_name = original_file_name
        self._public = public
        self._store_id = store_id
        self._time_created = time_created
        self._time_last_updated = time_last_updated
        self._times_downloaded = times_downloaded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Media.

        The ID of your Nexmo account. This is the same as your API key.

        :return: The account_id of this Media.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Media.

        The ID of your Nexmo account. This is the same as your API key.

        :param account_id: The account_id of this Media.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def etag(self):
        """Gets the etag of this Media.

        An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)

        :return: The etag of this Media.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Media.

        An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)

        :param etag: The etag of this Media.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Media.

        A UUID representing the object.

        :return: The id of this Media.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Media.

        A UUID representing the object.

        :param id: The id of this Media.
        :type id: str
        """

        self._id = id

    @property
    def max_downloads_allowed(self):
        """Gets the max_downloads_allowed of this Media.

        The maximum number of times the file may be downloaded.

        :return: The max_downloads_allowed of this Media.
        :rtype: int
        """
        return self._max_downloads_allowed

    @max_downloads_allowed.setter
    def max_downloads_allowed(self, max_downloads_allowed):
        """Sets the max_downloads_allowed of this Media.

        The maximum number of times the file may be downloaded.

        :param max_downloads_allowed: The max_downloads_allowed of this Media.
        :type max_downloads_allowed: int
        """

        self._max_downloads_allowed = max_downloads_allowed

    @property
    def media_size(self):
        """Gets the media_size of this Media.

        The size of the file in bytes

        :return: The media_size of this Media.
        :rtype: int
        """
        return self._media_size

    @media_size.setter
    def media_size(self, media_size):
        """Sets the media_size of this Media.

        The size of the file in bytes

        :param media_size: The media_size of this Media.
        :type media_size: int
        """

        self._media_size = media_size

    @property
    def metadata_primary(self):
        """Gets the metadata_primary of this Media.

        A user set string containing metadata about the media file.

        :return: The metadata_primary of this Media.
        :rtype: str
        """
        return self._metadata_primary

    @metadata_primary.setter
    def metadata_primary(self, metadata_primary):
        """Sets the metadata_primary of this Media.

        A user set string containing metadata about the media file.

        :param metadata_primary: The metadata_primary of this Media.
        :type metadata_primary: str
        """

        self._metadata_primary = metadata_primary

    @property
    def metadata_secondary(self):
        """Gets the metadata_secondary of this Media.

        A user set string containing further metadata about the media file.

        :return: The metadata_secondary of this Media.
        :rtype: str
        """
        return self._metadata_secondary

    @metadata_secondary.setter
    def metadata_secondary(self, metadata_secondary):
        """Sets the metadata_secondary of this Media.

        A user set string containing further metadata about the media file.

        :param metadata_secondary: The metadata_secondary of this Media.
        :type metadata_secondary: str
        """

        self._metadata_secondary = metadata_secondary

    @property
    def mime_type(self):
        """Gets the mime_type of this Media.

        The IETF MIME type of the file.

        :return: The mime_type of this Media.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Media.

        The IETF MIME type of the file.

        :param mime_type: The mime_type of this Media.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def original_file_name(self):
        """Gets the original_file_name of this Media.

        The filename of the object as it was originally uploaded.

        :return: The original_file_name of this Media.
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this Media.

        The filename of the object as it was originally uploaded.

        :param original_file_name: The original_file_name of this Media.
        :type original_file_name: str
        """

        self._original_file_name = original_file_name

    @property
    def public(self):
        """Gets the public of this Media.

        Whether the item is available for download without authentication.

        :return: The public of this Media.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Media.

        Whether the item is available for download without authentication.

        :param public: The public of this Media.
        :type public: bool
        """

        self._public = public

    @property
    def store_id(self):
        """Gets the store_id of this Media.

        An internal identifier of how the file is stored.

        :return: The store_id of this Media.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this Media.

        An internal identifier of how the file is stored.

        :param store_id: The store_id of this Media.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def time_created(self):
        """Gets the time_created of this Media.

        A timestamp for the time that the file was created

        :return: The time_created of this Media.
        :rtype: str
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Media.

        A timestamp for the time that the file was created

        :param time_created: The time_created of this Media.
        :type time_created: str
        """

        self._time_created = time_created

    @property
    def time_last_updated(self):
        """Gets the time_last_updated of this Media.

        A timestamp for the time that the file was last modified

        :return: The time_last_updated of this Media.
        :rtype: str
        """
        return self._time_last_updated

    @time_last_updated.setter
    def time_last_updated(self, time_last_updated):
        """Sets the time_last_updated of this Media.

        A timestamp for the time that the file was last modified

        :param time_last_updated: The time_last_updated of this Media.
        :type time_last_updated: str
        """

        self._time_last_updated = time_last_updated

    @property
    def times_downloaded(self):
        """Gets the times_downloaded of this Media.

        The number of times the file has been downloaded.

        :return: The times_downloaded of this Media.
        :rtype: int
        """
        return self._times_downloaded

    @times_downloaded.setter
    def times_downloaded(self, times_downloaded):
        """Sets the times_downloaded of this Media.

        The number of times the file has been downloaded.

        :param times_downloaded: The times_downloaded of this Media.
        :type times_downloaded: int
        """

        self._times_downloaded = times_downloaded
