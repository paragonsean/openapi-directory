/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Media model module.
 * @module model/Media
 * @version 1.0.2
 */
class Media {
    /**
     * Constructs a new <code>Media</code>.
     * @alias module:model/Media
     */
    constructor() { 
        
        Media.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Media} obj Optional instance to populate.
     * @return {module:model/Media} The populated <code>Media</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Media();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('max_downloads_allowed')) {
                obj['max_downloads_allowed'] = ApiClient.convertToType(data['max_downloads_allowed'], 'Number');
            }
            if (data.hasOwnProperty('media_size')) {
                obj['media_size'] = ApiClient.convertToType(data['media_size'], 'Number');
            }
            if (data.hasOwnProperty('metadata_primary')) {
                obj['metadata_primary'] = ApiClient.convertToType(data['metadata_primary'], 'String');
            }
            if (data.hasOwnProperty('metadata_secondary')) {
                obj['metadata_secondary'] = ApiClient.convertToType(data['metadata_secondary'], 'String');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('original_file_name')) {
                obj['original_file_name'] = ApiClient.convertToType(data['original_file_name'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('time_created')) {
                obj['time_created'] = ApiClient.convertToType(data['time_created'], 'String');
            }
            if (data.hasOwnProperty('time_last_updated')) {
                obj['time_last_updated'] = ApiClient.convertToType(data['time_last_updated'], 'String');
            }
            if (data.hasOwnProperty('times_downloaded')) {
                obj['times_downloaded'] = ApiClient.convertToType(data['times_downloaded'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Media</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Media</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['metadata_primary'] && !(typeof data['metadata_primary'] === 'string' || data['metadata_primary'] instanceof String)) {
            throw new Error("Expected the field `metadata_primary` to be a primitive type in the JSON string but got " + data['metadata_primary']);
        }
        // ensure the json data is a string
        if (data['metadata_secondary'] && !(typeof data['metadata_secondary'] === 'string' || data['metadata_secondary'] instanceof String)) {
            throw new Error("Expected the field `metadata_secondary` to be a primitive type in the JSON string but got " + data['metadata_secondary']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['original_file_name'] && !(typeof data['original_file_name'] === 'string' || data['original_file_name'] instanceof String)) {
            throw new Error("Expected the field `original_file_name` to be a primitive type in the JSON string but got " + data['original_file_name']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['time_created'] && !(typeof data['time_created'] === 'string' || data['time_created'] instanceof String)) {
            throw new Error("Expected the field `time_created` to be a primitive type in the JSON string but got " + data['time_created']);
        }
        // ensure the json data is a string
        if (data['time_last_updated'] && !(typeof data['time_last_updated'] === 'string' || data['time_last_updated'] instanceof String)) {
            throw new Error("Expected the field `time_last_updated` to be a primitive type in the JSON string but got " + data['time_last_updated']);
        }

        return true;
    }


}



/**
 * The ID of your Nexmo account. This is the same as your API key.
 * @member {String} account_id
 */
Media.prototype['account_id'] = undefined;

/**
 * An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)
 * @member {String} etag
 */
Media.prototype['etag'] = undefined;

/**
 * A UUID representing the object.
 * @member {String} id
 */
Media.prototype['id'] = undefined;

/**
 * The maximum number of times the file may be downloaded.
 * @member {Number} max_downloads_allowed
 */
Media.prototype['max_downloads_allowed'] = undefined;

/**
 * The size of the file in bytes
 * @member {Number} media_size
 */
Media.prototype['media_size'] = undefined;

/**
 * A user set string containing metadata about the media file.
 * @member {String} metadata_primary
 */
Media.prototype['metadata_primary'] = undefined;

/**
 * A user set string containing further metadata about the media file.
 * @member {String} metadata_secondary
 */
Media.prototype['metadata_secondary'] = undefined;

/**
 * The IETF MIME type of the file.
 * @member {String} mime_type
 */
Media.prototype['mime_type'] = undefined;

/**
 * The filename of the object as it was originally uploaded.
 * @member {String} original_file_name
 */
Media.prototype['original_file_name'] = undefined;

/**
 * Whether the item is available for download without authentication.
 * @member {Boolean} public
 */
Media.prototype['public'] = undefined;

/**
 * An internal identifier of how the file is stored.
 * @member {String} store_id
 */
Media.prototype['store_id'] = undefined;

/**
 * A timestamp for the time that the file was created
 * @member {String} time_created
 */
Media.prototype['time_created'] = undefined;

/**
 * A timestamp for the time that the file was last modified
 * @member {String} time_last_updated
 */
Media.prototype['time_last_updated'] = undefined;

/**
 * The number of times the file has been downloaded.
 * @member {Number} times_downloaded
 */
Media.prototype['times_downloaded'] = undefined;






export default Media;

