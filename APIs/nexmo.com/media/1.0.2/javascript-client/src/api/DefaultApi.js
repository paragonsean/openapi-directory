/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListAndSearchMediaItems200Response from '../model/ListAndSearchMediaItems200Response';
import Media from '../model/Media';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAMediaItem operation.
     * @callback module:api/DefaultApi~deleteAMediaItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a media item
     * Delete a previously created media item by ID.
     * @param {module:api/DefaultApi~deleteAMediaItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAMediaItem(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/:id', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAndSearchMediaItems operation.
     * @callback module:api/DefaultApi~listAndSearchMediaItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAndSearchMediaItems200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search media items
     * Retrieve information about multiple media items with the ability to search and paginate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order = 'descending')] The order of search results.
     * @param {Number} [pageIndex = 0)] Which page to retrieve in pagination
     * @param {Number} [pageSize = 20)] How many items at most per page
     * @param {String} [startTime = '1 week ago')] Retrieve results created on or after this timestap.
     * @param {String} [endTime] Retrieve results created on or before this timestamp.
     * @param {module:api/DefaultApi~listAndSearchMediaItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAndSearchMediaItems200Response}
     */
    listAndSearchMediaItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'page_index': opts['pageIndex'],
        'page_size': opts['pageSize'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAndSearchMediaItems200Response;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAMediaItem operation.
     * @callback module:api/DefaultApi~retrieveAMediaItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Media} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a media item
     * Retrieve information about a single media item
     * @param {module:api/DefaultApi~retrieveAMediaItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Media}
     */
    retrieveAMediaItem(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Media;
      return this.apiClient.callApi(
        '/:id/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAMediaItem operation.
     * @callback module:api/DefaultApi~updateAMediaItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a media item
     * Update a previously created media item by ID.
     * @param {Object} opts Optional parameters
     * @param {String} [description] A description of the media file.
     * @param {Number} [maxDownloadsAllowed] The maximum number of times the file may be downloaded. Unlimited when not provided.
     * @param {String} [metadataPrimary] A string containing metadata about the media file.
     * @param {String} [metadataSecondary] A string containing further metadata about the media file.
     * @param {String} [mimeType] The MIME type of the media file.
     * @param {Boolean} [_public] Whether the item is publicly available without authentication.
     * @param {String} [title] A string containing a title for the media file.
     * @param {module:api/DefaultApi~updateAMediaItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAMediaItem(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'max_downloads_allowed': opts['maxDownloadsAllowed'],
        'metadata_primary': opts['metadataPrimary'],
        'metadata_secondary': opts['metadataSecondary'],
        'mime_type': opts['mimeType'],
        'public': opts['_public'],
        'title': opts['title']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/:id/info', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
