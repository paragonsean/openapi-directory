/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MediaApi);
  }
}(this, function(expect, MediaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MediaApi.Media();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Media', function() {
    it('should create an instance of Media', function() {
      // uncomment below and update the code to test Media
      //var instance = new MediaApi.Media();
      //expect(instance).to.be.a(MediaApi.Media);
    });

    it('should have the property accountId (base name: "account_id")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property maxDownloadsAllowed (base name: "max_downloads_allowed")', function() {
      // uncomment below and update the code to test the property maxDownloadsAllowed
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property mediaSize (base name: "media_size")', function() {
      // uncomment below and update the code to test the property mediaSize
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property metadataPrimary (base name: "metadata_primary")', function() {
      // uncomment below and update the code to test the property metadataPrimary
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property metadataSecondary (base name: "metadata_secondary")', function() {
      // uncomment below and update the code to test the property metadataSecondary
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property mimeType (base name: "mime_type")', function() {
      // uncomment below and update the code to test the property mimeType
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property originalFileName (base name: "original_file_name")', function() {
      // uncomment below and update the code to test the property originalFileName
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property _public (base name: "public")', function() {
      // uncomment below and update the code to test the property _public
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property storeId (base name: "store_id")', function() {
      // uncomment below and update the code to test the property storeId
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property timeCreated (base name: "time_created")', function() {
      // uncomment below and update the code to test the property timeCreated
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property timeLastUpdated (base name: "time_last_updated")', function() {
      // uncomment below and update the code to test the property timeLastUpdated
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

    it('should have the property timesDownloaded (base name: "times_downloaded")', function() {
      // uncomment below and update the code to test the property timesDownloaded
      //var instance = new MediaApi.Media();
      //expect(instance).to.be();
    });

  });

}));
