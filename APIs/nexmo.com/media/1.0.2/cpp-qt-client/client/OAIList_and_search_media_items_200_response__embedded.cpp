/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_and_search_media_items_200_response__embedded.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_and_search_media_items_200_response__embedded::OAIList_and_search_media_items_200_response__embedded(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_and_search_media_items_200_response__embedded::OAIList_and_search_media_items_200_response__embedded() {
    this->initializeModel();
}

OAIList_and_search_media_items_200_response__embedded::~OAIList_and_search_media_items_200_response__embedded() {}

void OAIList_and_search_media_items_200_response__embedded::initializeModel() {

    m_media_isSet = false;
    m_media_isValid = false;
}

void OAIList_and_search_media_items_200_response__embedded::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_and_search_media_items_200_response__embedded::fromJsonObject(QJsonObject json) {

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;
}

QString OAIList_and_search_media_items_200_response__embedded::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_and_search_media_items_200_response__embedded::asJsonObject() const {
    QJsonObject obj;
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    return obj;
}

QList<OAIMedia> OAIList_and_search_media_items_200_response__embedded::getMedia() const {
    return m_media;
}
void OAIList_and_search_media_items_200_response__embedded::setMedia(const QList<OAIMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIList_and_search_media_items_200_response__embedded::is_media_Set() const{
    return m_media_isSet;
}

bool OAIList_and_search_media_items_200_response__embedded::is_media_Valid() const{
    return m_media_isValid;
}

bool OAIList_and_search_media_items_200_response__embedded::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_and_search_media_items_200_response__embedded::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
