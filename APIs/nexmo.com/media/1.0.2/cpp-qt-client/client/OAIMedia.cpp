/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMedia::OAIMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMedia::OAIMedia() {
    this->initializeModel();
}

OAIMedia::~OAIMedia() {}

void OAIMedia::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_downloads_allowed_isSet = false;
    m_max_downloads_allowed_isValid = false;

    m_media_size_isSet = false;
    m_media_size_isValid = false;

    m_metadata_primary_isSet = false;
    m_metadata_primary_isValid = false;

    m_metadata_secondary_isSet = false;
    m_metadata_secondary_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_original_file_name_isSet = false;
    m_original_file_name_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_last_updated_isSet = false;
    m_time_last_updated_isValid = false;

    m_times_downloaded_isSet = false;
    m_times_downloaded_isValid = false;
}

void OAIMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMedia::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_downloads_allowed_isValid = ::OpenAPI::fromJsonValue(m_max_downloads_allowed, json[QString("max_downloads_allowed")]);
    m_max_downloads_allowed_isSet = !json[QString("max_downloads_allowed")].isNull() && m_max_downloads_allowed_isValid;

    m_media_size_isValid = ::OpenAPI::fromJsonValue(m_media_size, json[QString("media_size")]);
    m_media_size_isSet = !json[QString("media_size")].isNull() && m_media_size_isValid;

    m_metadata_primary_isValid = ::OpenAPI::fromJsonValue(m_metadata_primary, json[QString("metadata_primary")]);
    m_metadata_primary_isSet = !json[QString("metadata_primary")].isNull() && m_metadata_primary_isValid;

    m_metadata_secondary_isValid = ::OpenAPI::fromJsonValue(m_metadata_secondary, json[QString("metadata_secondary")]);
    m_metadata_secondary_isSet = !json[QString("metadata_secondary")].isNull() && m_metadata_secondary_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_original_file_name_isValid = ::OpenAPI::fromJsonValue(m_original_file_name, json[QString("original_file_name")]);
    m_original_file_name_isSet = !json[QString("original_file_name")].isNull() && m_original_file_name_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("time_created")]);
    m_time_created_isSet = !json[QString("time_created")].isNull() && m_time_created_isValid;

    m_time_last_updated_isValid = ::OpenAPI::fromJsonValue(m_time_last_updated, json[QString("time_last_updated")]);
    m_time_last_updated_isSet = !json[QString("time_last_updated")].isNull() && m_time_last_updated_isValid;

    m_times_downloaded_isValid = ::OpenAPI::fromJsonValue(m_times_downloaded, json[QString("times_downloaded")]);
    m_times_downloaded_isSet = !json[QString("times_downloaded")].isNull() && m_times_downloaded_isValid;
}

QString OAIMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_downloads_allowed_isSet) {
        obj.insert(QString("max_downloads_allowed"), ::OpenAPI::toJsonValue(m_max_downloads_allowed));
    }
    if (m_media_size_isSet) {
        obj.insert(QString("media_size"), ::OpenAPI::toJsonValue(m_media_size));
    }
    if (m_metadata_primary_isSet) {
        obj.insert(QString("metadata_primary"), ::OpenAPI::toJsonValue(m_metadata_primary));
    }
    if (m_metadata_secondary_isSet) {
        obj.insert(QString("metadata_secondary"), ::OpenAPI::toJsonValue(m_metadata_secondary));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_original_file_name_isSet) {
        obj.insert(QString("original_file_name"), ::OpenAPI::toJsonValue(m_original_file_name));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("time_created"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_last_updated_isSet) {
        obj.insert(QString("time_last_updated"), ::OpenAPI::toJsonValue(m_time_last_updated));
    }
    if (m_times_downloaded_isSet) {
        obj.insert(QString("times_downloaded"), ::OpenAPI::toJsonValue(m_times_downloaded));
    }
    return obj;
}

QString OAIMedia::getAccountId() const {
    return m_account_id;
}
void OAIMedia::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMedia::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMedia::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIMedia::getEtag() const {
    return m_etag;
}
void OAIMedia::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIMedia::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIMedia::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIMedia::getId() const {
    return m_id;
}
void OAIMedia::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMedia::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMedia::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIMedia::getMaxDownloadsAllowed() const {
    return m_max_downloads_allowed;
}
void OAIMedia::setMaxDownloadsAllowed(const qint32 &max_downloads_allowed) {
    m_max_downloads_allowed = max_downloads_allowed;
    m_max_downloads_allowed_isSet = true;
}

bool OAIMedia::is_max_downloads_allowed_Set() const{
    return m_max_downloads_allowed_isSet;
}

bool OAIMedia::is_max_downloads_allowed_Valid() const{
    return m_max_downloads_allowed_isValid;
}

qint32 OAIMedia::getMediaSize() const {
    return m_media_size;
}
void OAIMedia::setMediaSize(const qint32 &media_size) {
    m_media_size = media_size;
    m_media_size_isSet = true;
}

bool OAIMedia::is_media_size_Set() const{
    return m_media_size_isSet;
}

bool OAIMedia::is_media_size_Valid() const{
    return m_media_size_isValid;
}

QString OAIMedia::getMetadataPrimary() const {
    return m_metadata_primary;
}
void OAIMedia::setMetadataPrimary(const QString &metadata_primary) {
    m_metadata_primary = metadata_primary;
    m_metadata_primary_isSet = true;
}

bool OAIMedia::is_metadata_primary_Set() const{
    return m_metadata_primary_isSet;
}

bool OAIMedia::is_metadata_primary_Valid() const{
    return m_metadata_primary_isValid;
}

QString OAIMedia::getMetadataSecondary() const {
    return m_metadata_secondary;
}
void OAIMedia::setMetadataSecondary(const QString &metadata_secondary) {
    m_metadata_secondary = metadata_secondary;
    m_metadata_secondary_isSet = true;
}

bool OAIMedia::is_metadata_secondary_Set() const{
    return m_metadata_secondary_isSet;
}

bool OAIMedia::is_metadata_secondary_Valid() const{
    return m_metadata_secondary_isValid;
}

QString OAIMedia::getMimeType() const {
    return m_mime_type;
}
void OAIMedia::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMedia::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMedia::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIMedia::getOriginalFileName() const {
    return m_original_file_name;
}
void OAIMedia::setOriginalFileName(const QString &original_file_name) {
    m_original_file_name = original_file_name;
    m_original_file_name_isSet = true;
}

bool OAIMedia::is_original_file_name_Set() const{
    return m_original_file_name_isSet;
}

bool OAIMedia::is_original_file_name_Valid() const{
    return m_original_file_name_isValid;
}

bool OAIMedia::isRPublic() const {
    return m_r_public;
}
void OAIMedia::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIMedia::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIMedia::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIMedia::getStoreId() const {
    return m_store_id;
}
void OAIMedia::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIMedia::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIMedia::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIMedia::getTimeCreated() const {
    return m_time_created;
}
void OAIMedia::setTimeCreated(const QString &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIMedia::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIMedia::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QString OAIMedia::getTimeLastUpdated() const {
    return m_time_last_updated;
}
void OAIMedia::setTimeLastUpdated(const QString &time_last_updated) {
    m_time_last_updated = time_last_updated;
    m_time_last_updated_isSet = true;
}

bool OAIMedia::is_time_last_updated_Set() const{
    return m_time_last_updated_isSet;
}

bool OAIMedia::is_time_last_updated_Valid() const{
    return m_time_last_updated_isValid;
}

qint32 OAIMedia::getTimesDownloaded() const {
    return m_times_downloaded;
}
void OAIMedia::setTimesDownloaded(const qint32 &times_downloaded) {
    m_times_downloaded = times_downloaded;
    m_times_downloaded_isSet = true;
}

bool OAIMedia::is_times_downloaded_Set() const{
    return m_times_downloaded_isSet;
}

bool OAIMedia::is_times_downloaded_Valid() const{
    return m_times_downloaded_isValid;
}

bool OAIMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_downloads_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_secondary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
