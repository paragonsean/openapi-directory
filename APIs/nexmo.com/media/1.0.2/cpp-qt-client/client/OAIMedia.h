/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMedia.h
 *
 * 
 */

#ifndef OAIMedia_H
#define OAIMedia_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMedia : public OAIObject {
public:
    OAIMedia();
    OAIMedia(QString json);
    ~OAIMedia() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMaxDownloadsAllowed() const;
    void setMaxDownloadsAllowed(const qint32 &max_downloads_allowed);
    bool is_max_downloads_allowed_Set() const;
    bool is_max_downloads_allowed_Valid() const;

    qint32 getMediaSize() const;
    void setMediaSize(const qint32 &media_size);
    bool is_media_size_Set() const;
    bool is_media_size_Valid() const;

    QString getMetadataPrimary() const;
    void setMetadataPrimary(const QString &metadata_primary);
    bool is_metadata_primary_Set() const;
    bool is_metadata_primary_Valid() const;

    QString getMetadataSecondary() const;
    void setMetadataSecondary(const QString &metadata_secondary);
    bool is_metadata_secondary_Set() const;
    bool is_metadata_secondary_Valid() const;

    QString getMimeType() const;
    void setMimeType(const QString &mime_type);
    bool is_mime_type_Set() const;
    bool is_mime_type_Valid() const;

    QString getOriginalFileName() const;
    void setOriginalFileName(const QString &original_file_name);
    bool is_original_file_name_Set() const;
    bool is_original_file_name_Valid() const;

    bool isRPublic() const;
    void setRPublic(const bool &r_public);
    bool is_r_public_Set() const;
    bool is_r_public_Valid() const;

    QString getStoreId() const;
    void setStoreId(const QString &store_id);
    bool is_store_id_Set() const;
    bool is_store_id_Valid() const;

    QString getTimeCreated() const;
    void setTimeCreated(const QString &time_created);
    bool is_time_created_Set() const;
    bool is_time_created_Valid() const;

    QString getTimeLastUpdated() const;
    void setTimeLastUpdated(const QString &time_last_updated);
    bool is_time_last_updated_Set() const;
    bool is_time_last_updated_Valid() const;

    qint32 getTimesDownloaded() const;
    void setTimesDownloaded(const qint32 &times_downloaded);
    bool is_times_downloaded_Set() const;
    bool is_times_downloaded_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_max_downloads_allowed;
    bool m_max_downloads_allowed_isSet;
    bool m_max_downloads_allowed_isValid;

    qint32 m_media_size;
    bool m_media_size_isSet;
    bool m_media_size_isValid;

    QString m_metadata_primary;
    bool m_metadata_primary_isSet;
    bool m_metadata_primary_isValid;

    QString m_metadata_secondary;
    bool m_metadata_secondary_isSet;
    bool m_metadata_secondary_isValid;

    QString m_mime_type;
    bool m_mime_type_isSet;
    bool m_mime_type_isValid;

    QString m_original_file_name;
    bool m_original_file_name_isSet;
    bool m_original_file_name_isValid;

    bool m_r_public;
    bool m_r_public_isSet;
    bool m_r_public_isValid;

    QString m_store_id;
    bool m_store_id_isSet;
    bool m_store_id_isValid;

    QString m_time_created;
    bool m_time_created_isSet;
    bool m_time_created_isValid;

    QString m_time_last_updated;
    bool m_time_last_updated_isSet;
    bool m_time_last_updated_isValid;

    qint32 m_times_downloaded;
    bool m_times_downloaded_isSet;
    bool m_times_downloaded_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMedia)

#endif // OAIMedia_H
