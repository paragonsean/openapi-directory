/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIList_and_search_media_items_200_response.h"
#include "OAIMedia.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void deleteAMediaItem();

    /**
    * @param[in]  order QString [optional]
    * @param[in]  page_index qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    */
    virtual void listAndSearchMediaItems(const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>());


    virtual void retrieveAMediaItem();

    /**
    * @param[in]  description QString [optional]
    * @param[in]  max_downloads_allowed qint32 [optional]
    * @param[in]  metadata_primary QString [optional]
    * @param[in]  metadata_secondary QString [optional]
    * @param[in]  mime_type QString [optional]
    * @param[in]  r_public bool [optional]
    * @param[in]  title QString [optional]
    */
    virtual void updateAMediaItem(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_downloads_allowed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metadata_primary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_secondary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mime_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_public = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAMediaItemCallback(OAIHttpRequestWorker *worker);
    void listAndSearchMediaItemsCallback(OAIHttpRequestWorker *worker);
    void retrieveAMediaItemCallback(OAIHttpRequestWorker *worker);
    void updateAMediaItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAMediaItemSignal();
    void listAndSearchMediaItemsSignal(OAIList_and_search_media_items_200_response summary);
    void retrieveAMediaItemSignal(OAIMedia summary);
    void updateAMediaItemSignal();


    void deleteAMediaItemSignalFull(OAIHttpRequestWorker *worker);
    void listAndSearchMediaItemsSignalFull(OAIHttpRequestWorker *worker, OAIList_and_search_media_items_200_response summary);
    void retrieveAMediaItemSignalFull(OAIHttpRequestWorker *worker, OAIMedia summary);
    void updateAMediaItemSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteAMediaItemSignalError() instead")
    void deleteAMediaItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAMediaItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAndSearchMediaItemsSignalError() instead")
    void listAndSearchMediaItemsSignalE(OAIList_and_search_media_items_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAndSearchMediaItemsSignalError(OAIList_and_search_media_items_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAMediaItemSignalError() instead")
    void retrieveAMediaItemSignalE(OAIMedia summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAMediaItemSignalError(OAIMedia summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAMediaItemSignalError() instead")
    void updateAMediaItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAMediaItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAMediaItemSignalErrorFull() instead")
    void deleteAMediaItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAMediaItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAndSearchMediaItemsSignalErrorFull() instead")
    void listAndSearchMediaItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAndSearchMediaItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAMediaItemSignalErrorFull() instead")
    void retrieveAMediaItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAMediaItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAMediaItemSignalErrorFull() instead")
    void updateAMediaItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAMediaItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
