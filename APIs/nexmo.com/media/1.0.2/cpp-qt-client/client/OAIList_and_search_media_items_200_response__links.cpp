/**
 * Media API
 * The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@nexmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_and_search_media_items_200_response__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_and_search_media_items_200_response__links::OAIList_and_search_media_items_200_response__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_and_search_media_items_200_response__links::OAIList_and_search_media_items_200_response__links() {
    this->initializeModel();
}

OAIList_and_search_media_items_200_response__links::~OAIList_and_search_media_items_200_response__links() {}

void OAIList_and_search_media_items_200_response__links::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIList_and_search_media_items_200_response__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_and_search_media_items_200_response__links::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIList_and_search_media_items_200_response__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_and_search_media_items_200_response__links::asJsonObject() const {
    QJsonObject obj;
    if (m_first.isSet()) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last.isSet()) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIList_and_search_media_items_200_response__links_first OAIList_and_search_media_items_200_response__links::getFirst() const {
    return m_first;
}
void OAIList_and_search_media_items_200_response__links::setFirst(const OAIList_and_search_media_items_200_response__links_first &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIList_and_search_media_items_200_response__links::is_first_Set() const{
    return m_first_isSet;
}

bool OAIList_and_search_media_items_200_response__links::is_first_Valid() const{
    return m_first_isValid;
}

OAIList_and_search_media_items_200_response__links_first OAIList_and_search_media_items_200_response__links::getLast() const {
    return m_last;
}
void OAIList_and_search_media_items_200_response__links::setLast(const OAIList_and_search_media_items_200_response__links_first &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIList_and_search_media_items_200_response__links::is_last_Set() const{
    return m_last_isSet;
}

bool OAIList_and_search_media_items_200_response__links::is_last_Valid() const{
    return m_last_isValid;
}

OAIList_and_search_media_items_200_response__links_first OAIList_and_search_media_items_200_response__links::getSelf() const {
    return m_self;
}
void OAIList_and_search_media_items_200_response__links::setSelf(const OAIList_and_search_media_items_200_response__links_first &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIList_and_search_media_items_200_response__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIList_and_search_media_items_200_response__links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIList_and_search_media_items_200_response__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_and_search_media_items_200_response__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
