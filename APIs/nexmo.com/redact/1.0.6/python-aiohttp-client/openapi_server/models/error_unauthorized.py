# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorUnauthorized(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_title: str=None, type: str=None):
        """ErrorUnauthorized - a model defined in OpenAPI

        :param error_title: The error_title of this ErrorUnauthorized.
        :param type: The type of this ErrorUnauthorized.
        """
        self.openapi_types = {
            'error_title': str,
            'type': str
        }

        self.attribute_map = {
            'error_title': 'error_title',
            'type': 'type'
        }

        self._error_title = error_title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorUnauthorized':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorUnauthorized of this ErrorUnauthorized.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_title(self):
        """Gets the error_title of this ErrorUnauthorized.

        Error title

        :return: The error_title of this ErrorUnauthorized.
        :rtype: str
        """
        return self._error_title

    @error_title.setter
    def error_title(self, error_title):
        """Sets the error_title of this ErrorUnauthorized.

        Error title

        :param error_title: The error_title of this ErrorUnauthorized.
        :type error_title: str
        """
        if error_title is None:
            raise ValueError("Invalid value for `error_title`, must not be `None`")

        self._error_title = error_title

    @property
    def type(self):
        """Gets the type of this ErrorUnauthorized.

        Machine readable error type

        :return: The type of this ErrorUnauthorized.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorUnauthorized.

        Machine readable error type

        :param type: The type of this ErrorUnauthorized.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
