/**
 * Redact API
 * The [Redact API](/redact/overview) helps organisations meet their privacy compliance obligations. It provides controlled, on-demand redaction of private information from transactional records in the long-term storage. Note, Redact API does not have the capability to redact the short-lived server logs that are retained for a few weeks. For SMS customers that need immediate redaction, Vonage suggests using [Advanced Auto-redact](/redact/overview#auto-redact-vs-redact-api).
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorUnauthorized.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorUnauthorized::OAIErrorUnauthorized(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorUnauthorized::OAIErrorUnauthorized() {
    this->initializeModel();
}

OAIErrorUnauthorized::~OAIErrorUnauthorized() {}

void OAIErrorUnauthorized::initializeModel() {

    m_error_title_isSet = false;
    m_error_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIErrorUnauthorized::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorUnauthorized::fromJsonObject(QJsonObject json) {

    m_error_title_isValid = ::OpenAPI::fromJsonValue(m_error_title, json[QString("error_title")]);
    m_error_title_isSet = !json[QString("error_title")].isNull() && m_error_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIErrorUnauthorized::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorUnauthorized::asJsonObject() const {
    QJsonObject obj;
    if (m_error_title_isSet) {
        obj.insert(QString("error_title"), ::OpenAPI::toJsonValue(m_error_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIErrorUnauthorized::getErrorTitle() const {
    return m_error_title;
}
void OAIErrorUnauthorized::setErrorTitle(const QString &error_title) {
    m_error_title = error_title;
    m_error_title_isSet = true;
}

bool OAIErrorUnauthorized::is_error_title_Set() const{
    return m_error_title_isSet;
}

bool OAIErrorUnauthorized::is_error_title_Valid() const{
    return m_error_title_isValid;
}

QString OAIErrorUnauthorized::getType() const {
    return m_type;
}
void OAIErrorUnauthorized::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIErrorUnauthorized::is_type_Set() const{
    return m_type_isSet;
}

bool OAIErrorUnauthorized::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIErrorUnauthorized::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorUnauthorized::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
