/**
 * Redact API
 * The [Redact API](/redact/overview) helps organisations meet their privacy compliance obligations. It provides controlled, on-demand redaction of private information from transactional records in the long-term storage. Note, Redact API does not have the capability to redact the short-lived server logs that are retained for a few weeks. For SMS customers that need immediate redaction, Vonage suggests using [Advanced Auto-redact](/redact/overview#auto-redact-vs-redact-api).
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorUnsupportedProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorUnsupportedProduct::OAIErrorUnsupportedProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorUnsupportedProduct::OAIErrorUnsupportedProduct() {
    this->initializeModel();
}

OAIErrorUnsupportedProduct::~OAIErrorUnsupportedProduct() {}

void OAIErrorUnsupportedProduct::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIErrorUnsupportedProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorUnsupportedProduct::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIErrorUnsupportedProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorUnsupportedProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIErrorUnsupportedProduct::getDetail() const {
    return m_detail;
}
void OAIErrorUnsupportedProduct::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIErrorUnsupportedProduct::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIErrorUnsupportedProduct::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIErrorUnsupportedProduct::getInstance() const {
    return m_instance;
}
void OAIErrorUnsupportedProduct::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIErrorUnsupportedProduct::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIErrorUnsupportedProduct::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIErrorUnsupportedProduct::getTitle() const {
    return m_title;
}
void OAIErrorUnsupportedProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErrorUnsupportedProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErrorUnsupportedProduct::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIErrorUnsupportedProduct::getType() const {
    return m_type;
}
void OAIErrorUnsupportedProduct::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIErrorUnsupportedProduct::is_type_Set() const{
    return m_type_isSet;
}

bool OAIErrorUnsupportedProduct::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIErrorUnsupportedProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorUnsupportedProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_isValid && m_instance_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
