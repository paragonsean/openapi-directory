/**
 * Redact API
 * The [Redact API](/redact/overview) helps organisations meet their privacy compliance obligations. It provides controlled, on-demand redaction of private information from transactional records in the long-term storage. Note, Redact API does not have the capability to redact the short-lived server logs that are retained for a few weeks. For SMS customers that need immediate redaction, Vonage suggests using [Advanced Auto-redact](/redact/overview#auto-redact-vs-redact-api).
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorInvalidJson model module.
 * @module model/ErrorInvalidJson
 * @version 1.0.6
 */
class ErrorInvalidJson {
    /**
     * Constructs a new <code>ErrorInvalidJson</code>.
     * Invalid JSON
     * @alias module:model/ErrorInvalidJson
     * @param detail {String} Additional information about the error
     * @param instance {String} Internal Trace ID
     * @param title {String} Generic error message
     * @param type {String} Link to error / remediation options
     */
    constructor(detail, instance, title, type) { 
        
        ErrorInvalidJson.initialize(this, detail, instance, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, instance, title, type) { 
        obj['detail'] = detail;
        obj['instance'] = instance;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ErrorInvalidJson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorInvalidJson} obj Optional instance to populate.
     * @return {module:model/ErrorInvalidJson} The populated <code>ErrorInvalidJson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorInvalidJson();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorInvalidJson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorInvalidJson</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorInvalidJson.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ErrorInvalidJson.RequiredProperties = ["detail", "instance", "title", "type"];

/**
 * Additional information about the error
 * @member {String} detail
 */
ErrorInvalidJson.prototype['detail'] = undefined;

/**
 * Internal Trace ID
 * @member {String} instance
 */
ErrorInvalidJson.prototype['instance'] = undefined;

/**
 * Generic error message
 * @member {String} title
 */
ErrorInvalidJson.prototype['title'] = undefined;

/**
 * Link to error / remediation options
 * @member {String} type
 */
ErrorInvalidJson.prototype['type'] = undefined;






export default ErrorInvalidJson;

