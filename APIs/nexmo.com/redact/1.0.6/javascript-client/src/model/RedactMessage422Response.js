/**
 * Redact API
 * The [Redact API](/redact/overview) helps organisations meet their privacy compliance obligations. It provides controlled, on-demand redaction of private information from transactional records in the long-term storage. Note, Redact API does not have the capability to redact the short-lived server logs that are retained for a few weeks. For SMS customers that need immediate redaction, Vonage suggests using [Advanced Auto-redact](/redact/overview#auto-redact-vs-redact-api).
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorInvalidJson from './ErrorInvalidJson';
import ErrorUnsupportedProduct from './ErrorUnsupportedProduct';

/**
 * The RedactMessage422Response model module.
 * @module model/RedactMessage422Response
 * @version 1.0.6
 */
class RedactMessage422Response {
    /**
     * Constructs a new <code>RedactMessage422Response</code>.
     * @alias module:model/RedactMessage422Response
     * @param {(module:model/ErrorInvalidJson|module:model/ErrorUnsupportedProduct)} instance The actual instance to initialize RedactMessage422Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ErrorInvalidJson") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorInvalidJson.validateJSON(instance); // throw an exception if no match
                // create ErrorInvalidJson from JS object
                this.actualInstance = ErrorInvalidJson.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorInvalidJson
            errorMessages.push("Failed to construct ErrorInvalidJson: " + err)
        }

        try {
            if (typeof instance === "ErrorUnsupportedProduct") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ErrorUnsupportedProduct.validateJSON(instance); // throw an exception if no match
                // create ErrorUnsupportedProduct from JS object
                this.actualInstance = ErrorUnsupportedProduct.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ErrorUnsupportedProduct
            errorMessages.push("Failed to construct ErrorUnsupportedProduct: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RedactMessage422Response` with oneOf schemas ErrorInvalidJson, ErrorUnsupportedProduct. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RedactMessage422Response` with oneOf schemas ErrorInvalidJson, ErrorUnsupportedProduct. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RedactMessage422Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedactMessage422Response} obj Optional instance to populate.
     * @return {module:model/RedactMessage422Response} The populated <code>RedactMessage422Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RedactMessage422Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>ErrorInvalidJson</code>, <code>ErrorUnsupportedProduct</code>.
     * @return {(module:model/ErrorInvalidJson|module:model/ErrorUnsupportedProduct)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ErrorInvalidJson</code>, <code>ErrorUnsupportedProduct</code>.
     * @param {(module:model/ErrorInvalidJson|module:model/ErrorUnsupportedProduct)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RedactMessage422Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RedactMessage422Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RedactMessage422Response} An instance of RedactMessage422Response.
     */
    static fromJSON = function(json_string){
        return RedactMessage422Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Additional information about the error
 * @member {String} detail
 */
RedactMessage422Response.prototype['detail'] = undefined;

/**
 * Internal Trace ID
 * @member {String} instance
 */
RedactMessage422Response.prototype['instance'] = undefined;

/**
 * Generic error message
 * @member {String} title
 */
RedactMessage422Response.prototype['title'] = undefined;

/**
 * Link to error / remediation options
 * @member {String} type
 */
RedactMessage422Response.prototype['type'] = undefined;


RedactMessage422Response.OneOf = ["ErrorInvalidJson", "ErrorUnsupportedProduct"];

export default RedactMessage422Response;

