/**
 * Redact API
 * The [Redact API](/redact/overview) helps organisations meet their privacy compliance obligations. It provides controlled, on-demand redaction of private information from transactional records in the long-term storage. Note, Redact API does not have the capability to redact the short-lived server logs that are retained for a few weeks. For SMS customers that need immediate redaction, Vonage suggests using [Advanced Auto-redact](/redact/overview#auto-redact-vs-redact-api).
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedactTransaction model module.
 * @module model/RedactTransaction
 * @version 1.0.6
 */
class RedactTransaction {
    /**
     * Constructs a new <code>RedactTransaction</code>.
     * @alias module:model/RedactTransaction
     * @param id {String} The transaction ID to redact
     * @param product {module:model/RedactTransaction.ProductEnum} Product name that the ID provided relates to
     * @param type {module:model/RedactTransaction.TypeEnum} Required if redacting SMS data
     */
    constructor(id, product, type) { 
        
        RedactTransaction.initialize(this, id, product, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, product, type) { 
        obj['id'] = id;
        obj['product'] = product;
        obj['type'] = type || 'outbound';
    }

    /**
     * Constructs a <code>RedactTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedactTransaction} obj Optional instance to populate.
     * @return {module:model/RedactTransaction} The populated <code>RedactTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedactTransaction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedactTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedactTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedactTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RedactTransaction.RequiredProperties = ["id", "product", "type"];

/**
 * The transaction ID to redact
 * @member {String} id
 */
RedactTransaction.prototype['id'] = undefined;

/**
 * Product name that the ID provided relates to
 * @member {module:model/RedactTransaction.ProductEnum} product
 */
RedactTransaction.prototype['product'] = undefined;

/**
 * Required if redacting SMS data
 * @member {module:model/RedactTransaction.TypeEnum} type
 * @default 'outbound'
 */
RedactTransaction.prototype['type'] = 'outbound';





/**
 * Allowed values for the <code>product</code> property.
 * @enum {String}
 * @readonly
 */
RedactTransaction['ProductEnum'] = {

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms",

    /**
     * value: "voice"
     * @const
     */
    "voice": "voice",

    /**
     * value: "number-insight"
     * @const
     */
    "number-insight": "number-insight",

    /**
     * value: "verify"
     * @const
     */
    "verify": "verify",

    /**
     * value: "verify-sdk"
     * @const
     */
    "verify-sdk": "verify-sdk",

    /**
     * value: "messages"
     * @const
     */
    "messages": "messages"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RedactTransaction['TypeEnum'] = {

    /**
     * value: "inbound"
     * @const
     */
    "inbound": "inbound",

    /**
     * value: "outbound"
     * @const
     */
    "outbound": "outbound"
};



export default RedactTransaction;

