# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_list_links import ConversationListLinks
from openapi_server.models.conversation_list_timestamp import ConversationListTimestamp
from openapi_server import util


class ConversationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ConversationListLinks=None, display_name: str=None, id: str=None, image_url: str=None, name: str=None, timestamp: ConversationListTimestamp=None):
        """ConversationList - a model defined in OpenAPI

        :param links: The links of this ConversationList.
        :param display_name: The display_name of this ConversationList.
        :param id: The id of this ConversationList.
        :param image_url: The image_url of this ConversationList.
        :param name: The name of this ConversationList.
        :param timestamp: The timestamp of this ConversationList.
        """
        self.openapi_types = {
            'links': ConversationListLinks,
            'display_name': str,
            'id': str,
            'image_url': str,
            'name': str,
            'timestamp': ConversationListTimestamp
        }

        self.attribute_map = {
            'links': '_links',
            'display_name': 'display_name',
            'id': 'id',
            'image_url': 'image_url',
            'name': 'name',
            'timestamp': 'timestamp'
        }

        self._links = links
        self._display_name = display_name
        self._id = id
        self._image_url = image_url
        self._name = name
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversation_list of this ConversationList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ConversationList.


        :return: The links of this ConversationList.
        :rtype: ConversationListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConversationList.


        :param links: The links of this ConversationList.
        :type links: ConversationListLinks
        """

        self._links = links

    @property
    def display_name(self):
        """Gets the display_name of this ConversationList.

        The public facing name of the conversation

        :return: The display_name of this ConversationList.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConversationList.

        The public facing name of the conversation

        :param display_name: The display_name of this ConversationList.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this ConversationList.

        The ID of the conversation

        :return: The id of this ConversationList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationList.

        The ID of the conversation

        :param id: The id of this ConversationList.
        :type id: str
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this ConversationList.

        An image URL that you associate with the conversation

        :return: The image_url of this ConversationList.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ConversationList.

        An image URL that you associate with the conversation

        :param image_url: The image_url of this ConversationList.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this ConversationList.

        Your internal conversation name. Must be unique

        :return: The name of this ConversationList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationList.

        Your internal conversation name. Must be unique

        :param name: The name of this ConversationList.
        :type name: str
        """

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this ConversationList.


        :return: The timestamp of this ConversationList.
        :rtype: ConversationListTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ConversationList.


        :param timestamp: The timestamp of this ConversationList.
        :type timestamp: ConversationListTimestamp
        """

        self._timestamp = timestamp
