# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_list_links import MemberListLinks
from openapi_server import util


class MemberList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: MemberListLinks=None, display_name: str=None, id: str=None, name: str=None, state: str=None, user_id: str=None):
        """MemberList - a model defined in OpenAPI

        :param links: The links of this MemberList.
        :param display_name: The display_name of this MemberList.
        :param id: The id of this MemberList.
        :param name: The name of this MemberList.
        :param state: The state of this MemberList.
        :param user_id: The user_id of this MemberList.
        """
        self.openapi_types = {
            'links': MemberListLinks,
            'display_name': str,
            'id': str,
            'name': str,
            'state': str,
            'user_id': str
        }

        self.attribute_map = {
            'links': '_links',
            'display_name': 'display_name',
            'id': 'id',
            'name': 'name',
            'state': 'state',
            'user_id': 'user_id'
        }

        self._links = links
        self._display_name = display_name
        self._id = id
        self._name = name
        self._state = state
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The member_list of this MemberList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this MemberList.


        :return: The links of this MemberList.
        :rtype: MemberListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MemberList.


        :param links: The links of this MemberList.
        :type links: MemberListLinks
        """

        self._links = links

    @property
    def display_name(self):
        """Gets the display_name of this MemberList.

        The display name of the User

        :return: The display_name of this MemberList.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MemberList.

        The display name of the User

        :param display_name: The display_name of this MemberList.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this MemberList.

        Member ID

        :return: The id of this MemberList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemberList.

        Member ID

        :param id: The id of this MemberList.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MemberList.

        The name of the User

        :return: The name of this MemberList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberList.

        The name of the User

        :param name: The name of this MemberList.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this MemberList.

        The state that the member is in for this conversation

        :return: The state of this MemberList.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MemberList.

        The state that the member is in for this conversation

        :param state: The state of this MemberList.
        :type state: str
        """
        allowed_values = ["INVITED", "JOINED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_id(self):
        """Gets the user_id of this MemberList.

        The ID of the User

        :return: The user_id of this MemberList.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MemberList.

        The ID of the User

        :param user_id: The user_id of this MemberList.
        :type user_id: str
        """

        self._user_id = user_id
