/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllEvents from './AllEvents';

/**
 * The GetEvents200ResponseEmbeddedData model module.
 * @module model/GetEvents200ResponseEmbeddedData
 * @version 1.0.1
 */
class GetEvents200ResponseEmbeddedData {
    /**
     * Constructs a new <code>GetEvents200ResponseEmbeddedData</code>.
     * @alias module:model/GetEvents200ResponseEmbeddedData
     */
    constructor() { 
        
        GetEvents200ResponseEmbeddedData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetEvents200ResponseEmbeddedData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetEvents200ResponseEmbeddedData} obj Optional instance to populate.
     * @return {module:model/GetEvents200ResponseEmbeddedData} The populated <code>GetEvents200ResponseEmbeddedData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetEvents200ResponseEmbeddedData();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [AllEvents]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetEvents200ResponseEmbeddedData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetEvents200ResponseEmbeddedData</code>.
     */
    static validateJSON(data) {
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                AllEvents.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of events matching the provided filter
 * @member {Array.<module:model/AllEvents>} events
 */
GetEvents200ResponseEmbeddedData.prototype['events'] = undefined;






export default GetEvents200ResponseEmbeddedData;

