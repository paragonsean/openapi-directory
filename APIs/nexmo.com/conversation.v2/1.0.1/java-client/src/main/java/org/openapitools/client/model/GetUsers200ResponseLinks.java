/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetUsers200ResponseLinksFirst;
import org.openapitools.client.model.GetUsers200ResponseLinksNext;
import org.openapitools.client.model.GetUsers200ResponseLinksPrev;
import org.openapitools.client.model.GetUsers200ResponseLinksSelf;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUsers200ResponseLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:17.146803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUsers200ResponseLinks {
  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private GetUsers200ResponseLinksFirst first;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private GetUsers200ResponseLinksNext next;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private GetUsers200ResponseLinksPrev prev;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private GetUsers200ResponseLinksSelf self;

  public GetUsers200ResponseLinks() {
  }

  public GetUsers200ResponseLinks first(GetUsers200ResponseLinksFirst first) {
    this.first = first;
    return this;
  }

  /**
   * Get first
   * @return first
   */
  @javax.annotation.Nullable
  public GetUsers200ResponseLinksFirst getFirst() {
    return first;
  }

  public void setFirst(GetUsers200ResponseLinksFirst first) {
    this.first = first;
  }


  public GetUsers200ResponseLinks next(GetUsers200ResponseLinksNext next) {
    this.next = next;
    return this;
  }

  /**
   * Get next
   * @return next
   */
  @javax.annotation.Nullable
  public GetUsers200ResponseLinksNext getNext() {
    return next;
  }

  public void setNext(GetUsers200ResponseLinksNext next) {
    this.next = next;
  }


  public GetUsers200ResponseLinks prev(GetUsers200ResponseLinksPrev prev) {
    this.prev = prev;
    return this;
  }

  /**
   * Get prev
   * @return prev
   */
  @javax.annotation.Nullable
  public GetUsers200ResponseLinksPrev getPrev() {
    return prev;
  }

  public void setPrev(GetUsers200ResponseLinksPrev prev) {
    this.prev = prev;
  }


  public GetUsers200ResponseLinks self(GetUsers200ResponseLinksSelf self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public GetUsers200ResponseLinksSelf getSelf() {
    return self;
  }

  public void setSelf(GetUsers200ResponseLinksSelf self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUsers200ResponseLinks getUsers200ResponseLinks = (GetUsers200ResponseLinks) o;
    return Objects.equals(this.first, getUsers200ResponseLinks.first) &&
        Objects.equals(this.next, getUsers200ResponseLinks.next) &&
        Objects.equals(this.prev, getUsers200ResponseLinks.prev) &&
        Objects.equals(this.self, getUsers200ResponseLinks.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(first, next, prev, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUsers200ResponseLinks {\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first");
    openapiFields.add("next");
    openapiFields.add("prev");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUsers200ResponseLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUsers200ResponseLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUsers200ResponseLinks is not found in the empty JSON string", GetUsers200ResponseLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUsers200ResponseLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUsers200ResponseLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `first`
      if (jsonObj.get("first") != null && !jsonObj.get("first").isJsonNull()) {
        GetUsers200ResponseLinksFirst.validateJsonElement(jsonObj.get("first"));
      }
      // validate the optional field `next`
      if (jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) {
        GetUsers200ResponseLinksNext.validateJsonElement(jsonObj.get("next"));
      }
      // validate the optional field `prev`
      if (jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) {
        GetUsers200ResponseLinksPrev.validateJsonElement(jsonObj.get("prev"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        GetUsers200ResponseLinksSelf.validateJsonElement(jsonObj.get("self"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUsers200ResponseLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUsers200ResponseLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUsers200ResponseLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUsers200ResponseLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUsers200ResponseLinks>() {
           @Override
           public void write(JsonWriter out, GetUsers200ResponseLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUsers200ResponseLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUsers200ResponseLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUsers200ResponseLinks
   * @throws IOException if the JSON string is invalid with respect to GetUsers200ResponseLinks
   */
  public static GetUsers200ResponseLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUsers200ResponseLinks.class);
  }

  /**
   * Convert an instance of GetUsers200ResponseLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

