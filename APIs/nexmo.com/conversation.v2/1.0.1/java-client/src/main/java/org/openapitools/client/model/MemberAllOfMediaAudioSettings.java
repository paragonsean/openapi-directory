/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current audio state for the member
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:17.146803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberAllOfMediaAudioSettings {
  public static final String SERIALIZED_NAME_EARMUFFED = "earmuffed";
  @SerializedName(SERIALIZED_NAME_EARMUFFED)
  private Boolean earmuffed;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MUTED = "muted";
  @SerializedName(SERIALIZED_NAME_MUTED)
  private Boolean muted;

  public MemberAllOfMediaAudioSettings() {
  }

  public MemberAllOfMediaAudioSettings earmuffed(Boolean earmuffed) {
    this.earmuffed = earmuffed;
    return this;
  }

  /**
   * Can the member hear other participants?
   * @return earmuffed
   */
  @javax.annotation.Nullable
  public Boolean getEarmuffed() {
    return earmuffed;
  }

  public void setEarmuffed(Boolean earmuffed) {
    this.earmuffed = earmuffed;
  }


  public MemberAllOfMediaAudioSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Is audio enabled?
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public MemberAllOfMediaAudioSettings muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

  /**
   * Can the member speak to other participants?
   * @return muted
   */
  @javax.annotation.Nullable
  public Boolean getMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberAllOfMediaAudioSettings memberAllOfMediaAudioSettings = (MemberAllOfMediaAudioSettings) o;
    return Objects.equals(this.earmuffed, memberAllOfMediaAudioSettings.earmuffed) &&
        Objects.equals(this.enabled, memberAllOfMediaAudioSettings.enabled) &&
        Objects.equals(this.muted, memberAllOfMediaAudioSettings.muted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earmuffed, enabled, muted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberAllOfMediaAudioSettings {\n");
    sb.append("    earmuffed: ").append(toIndentedString(earmuffed)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("earmuffed");
    openapiFields.add("enabled");
    openapiFields.add("muted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberAllOfMediaAudioSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberAllOfMediaAudioSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberAllOfMediaAudioSettings is not found in the empty JSON string", MemberAllOfMediaAudioSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberAllOfMediaAudioSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberAllOfMediaAudioSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberAllOfMediaAudioSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberAllOfMediaAudioSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberAllOfMediaAudioSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberAllOfMediaAudioSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberAllOfMediaAudioSettings>() {
           @Override
           public void write(JsonWriter out, MemberAllOfMediaAudioSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberAllOfMediaAudioSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberAllOfMediaAudioSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberAllOfMediaAudioSettings
   * @throws IOException if the JSON string is invalid with respect to MemberAllOfMediaAudioSettings
   */
  public static MemberAllOfMediaAudioSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberAllOfMediaAudioSettings.class);
  }

  /**
   * Convert an instance of MemberAllOfMediaAudioSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

