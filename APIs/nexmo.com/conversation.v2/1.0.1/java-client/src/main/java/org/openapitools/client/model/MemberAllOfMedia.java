/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MemberAllOfMediaAudioSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current media state for the member
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:17.146803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberAllOfMedia {
  public static final String SERIALIZED_NAME_AUDIO_SETTINGS = "audio_settings";
  @SerializedName(SERIALIZED_NAME_AUDIO_SETTINGS)
  private MemberAllOfMediaAudioSettings audioSettings;

  public MemberAllOfMedia() {
  }

  public MemberAllOfMedia audioSettings(MemberAllOfMediaAudioSettings audioSettings) {
    this.audioSettings = audioSettings;
    return this;
  }

  /**
   * Get audioSettings
   * @return audioSettings
   */
  @javax.annotation.Nullable
  public MemberAllOfMediaAudioSettings getAudioSettings() {
    return audioSettings;
  }

  public void setAudioSettings(MemberAllOfMediaAudioSettings audioSettings) {
    this.audioSettings = audioSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberAllOfMedia memberAllOfMedia = (MemberAllOfMedia) o;
    return Objects.equals(this.audioSettings, memberAllOfMedia.audioSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberAllOfMedia {\n");
    sb.append("    audioSettings: ").append(toIndentedString(audioSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberAllOfMedia
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberAllOfMedia.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberAllOfMedia is not found in the empty JSON string", MemberAllOfMedia.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberAllOfMedia.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberAllOfMedia` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audio_settings`
      if (jsonObj.get("audio_settings") != null && !jsonObj.get("audio_settings").isJsonNull()) {
        MemberAllOfMediaAudioSettings.validateJsonElement(jsonObj.get("audio_settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberAllOfMedia.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberAllOfMedia' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberAllOfMedia> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberAllOfMedia.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberAllOfMedia>() {
           @Override
           public void write(JsonWriter out, MemberAllOfMedia value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberAllOfMedia read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberAllOfMedia given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberAllOfMedia
   * @throws IOException if the JSON string is invalid with respect to MemberAllOfMedia
   */
  public static MemberAllOfMedia fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberAllOfMedia.class);
  }

  /**
   * Convert an instance of MemberAllOfMedia to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

