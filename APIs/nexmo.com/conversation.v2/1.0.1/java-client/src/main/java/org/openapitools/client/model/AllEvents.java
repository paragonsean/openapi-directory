/*
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomEvent;
import org.openapitools.client.model.EventLinks;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.MemberInvitedEvent;
import org.openapitools.client.model.MemberLeftEvent;
import org.openapitools.client.model.TextEvent;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:17.146803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllEvents extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AllEvents.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AllEvents.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AllEvents' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TextEvent> adapterTextEvent = gson.getDelegateAdapter(this, TypeToken.get(TextEvent.class));
            final TypeAdapter<CustomEvent> adapterCustomEvent = gson.getDelegateAdapter(this, TypeToken.get(CustomEvent.class));
            final TypeAdapter<MemberInvitedEvent> adapterMemberInvitedEvent = gson.getDelegateAdapter(this, TypeToken.get(MemberInvitedEvent.class));
            final TypeAdapter<MemberLeftEvent> adapterMemberLeftEvent = gson.getDelegateAdapter(this, TypeToken.get(MemberLeftEvent.class));

            return (TypeAdapter<T>) new TypeAdapter<AllEvents>() {
                @Override
                public void write(JsonWriter out, AllEvents value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TextEvent`
                    if (value.getActualInstance() instanceof TextEvent) {
                        JsonElement element = adapterTextEvent.toJsonTree((TextEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomEvent`
                    if (value.getActualInstance() instanceof CustomEvent) {
                        JsonElement element = adapterCustomEvent.toJsonTree((CustomEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberInvitedEvent`
                    if (value.getActualInstance() instanceof MemberInvitedEvent) {
                        JsonElement element = adapterMemberInvitedEvent.toJsonTree((MemberInvitedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberLeftEvent`
                    if (value.getActualInstance() instanceof MemberLeftEvent) {
                        JsonElement element = adapterMemberLeftEvent.toJsonTree((MemberLeftEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent");
                }

                @Override
                public AllEvents read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TextEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextEvent;
                        AllEvents ret = new AllEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextEvent'", e);
                    }
                    // deserialize CustomEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomEvent;
                        AllEvents ret = new AllEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomEvent'", e);
                    }
                    // deserialize MemberInvitedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberInvitedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberInvitedEvent;
                        AllEvents ret = new AllEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberInvitedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberInvitedEvent'", e);
                    }
                    // deserialize MemberLeftEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberLeftEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberLeftEvent;
                        AllEvents ret = new AllEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberLeftEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberLeftEvent'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for AllEvents: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AllEvents() {
        super("anyOf", Boolean.FALSE);
    }

    public AllEvents(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TextEvent", TextEvent.class);
        schemas.put("CustomEvent", CustomEvent.class);
        schemas.put("MemberInvitedEvent", MemberInvitedEvent.class);
        schemas.put("MemberLeftEvent", MemberLeftEvent.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AllEvents.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TextEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberInvitedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberLeftEvent) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent");
    }

    /**
     * Get the actual instance, which can be the following:
     * CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent
     *
     * @return The actual instance (CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextEvent`. If the actual instance is not `TextEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextEvent`
     * @throws ClassCastException if the instance is not `TextEvent`
     */
    public TextEvent getTextEvent() throws ClassCastException {
        return (TextEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomEvent`. If the actual instance is not `CustomEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomEvent`
     * @throws ClassCastException if the instance is not `CustomEvent`
     */
    public CustomEvent getCustomEvent() throws ClassCastException {
        return (CustomEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberInvitedEvent`. If the actual instance is not `MemberInvitedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberInvitedEvent`
     * @throws ClassCastException if the instance is not `MemberInvitedEvent`
     */
    public MemberInvitedEvent getMemberInvitedEvent() throws ClassCastException {
        return (MemberInvitedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberLeftEvent`. If the actual instance is not `MemberLeftEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberLeftEvent`
     * @throws ClassCastException if the instance is not `MemberLeftEvent`
     */
    public MemberLeftEvent getMemberLeftEvent() throws ClassCastException {
        return (MemberLeftEvent)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AllEvents
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TextEvent
        try {
            TextEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomEvent
        try {
            CustomEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberInvitedEvent
        try {
            MemberInvitedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberInvitedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberLeftEvent
        try {
            MemberLeftEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberLeftEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for AllEvents with anyOf schemas: CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of AllEvents given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AllEvents
     * @throws IOException if the JSON string is invalid with respect to AllEvents
     */
    public static AllEvents fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AllEvents.class);
    }

    /**
     * Convert an instance of AllEvents to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

