/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_list::OAIConversation_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_list::OAIConversation_list() {
    this->initializeModel();
}

OAIConversation_list::~OAIConversation_list() {}

void OAIConversation_list::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIConversation_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_list::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIConversation_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_list::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIConversation_list__links OAIConversation_list::getLinks() const {
    return m__links;
}
void OAIConversation_list::setLinks(const OAIConversation_list__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIConversation_list::is__links_Set() const{
    return m__links_isSet;
}

bool OAIConversation_list::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIConversation_list::getDisplayName() const {
    return m_display_name;
}
void OAIConversation_list::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConversation_list::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConversation_list::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIConversation_list::getId() const {
    return m_id;
}
void OAIConversation_list::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConversation_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConversation_list::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConversation_list::getImageUrl() const {
    return m_image_url;
}
void OAIConversation_list::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIConversation_list::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIConversation_list::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIConversation_list::getName() const {
    return m_name;
}
void OAIConversation_list::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConversation_list::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConversation_list::is_name_Valid() const{
    return m_name_isValid;
}

OAIConversation_list_timestamp OAIConversation_list::getTimestamp() const {
    return m_timestamp;
}
void OAIConversation_list::setTimestamp(const OAIConversation_list_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConversation_list::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConversation_list::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIConversation_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
