/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_conversations_200_response__embedded_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_conversations_200_response__embedded_data::OAIGet_conversations_200_response__embedded_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_conversations_200_response__embedded_data::OAIGet_conversations_200_response__embedded_data() {
    this->initializeModel();
}

OAIGet_conversations_200_response__embedded_data::~OAIGet_conversations_200_response__embedded_data() {}

void OAIGet_conversations_200_response__embedded_data::initializeModel() {

    m_conversations_isSet = false;
    m_conversations_isValid = false;
}

void OAIGet_conversations_200_response__embedded_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_conversations_200_response__embedded_data::fromJsonObject(QJsonObject json) {

    m_conversations_isValid = ::OpenAPI::fromJsonValue(m_conversations, json[QString("conversations")]);
    m_conversations_isSet = !json[QString("conversations")].isNull() && m_conversations_isValid;
}

QString OAIGet_conversations_200_response__embedded_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_conversations_200_response__embedded_data::asJsonObject() const {
    QJsonObject obj;
    if (m_conversations.size() > 0) {
        obj.insert(QString("conversations"), ::OpenAPI::toJsonValue(m_conversations));
    }
    return obj;
}

QList<OAIConversation_list> OAIGet_conversations_200_response__embedded_data::getConversations() const {
    return m_conversations;
}
void OAIGet_conversations_200_response__embedded_data::setConversations(const QList<OAIConversation_list> &conversations) {
    m_conversations = conversations;
    m_conversations_isSet = true;
}

bool OAIGet_conversations_200_response__embedded_data::is_conversations_Set() const{
    return m_conversations_isSet;
}

bool OAIGet_conversations_200_response__embedded_data::is_conversations_Valid() const{
    return m_conversations_isValid;
}

bool OAIGet_conversations_200_response__embedded_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_conversations_200_response__embedded_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
