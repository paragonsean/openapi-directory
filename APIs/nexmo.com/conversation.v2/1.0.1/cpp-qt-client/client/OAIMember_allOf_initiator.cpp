/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_allOf_initiator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_allOf_initiator::OAIMember_allOf_initiator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_allOf_initiator::OAIMember_allOf_initiator() {
    this->initializeModel();
}

OAIMember_allOf_initiator::~OAIMember_allOf_initiator() {}

void OAIMember_allOf_initiator::initializeModel() {

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_joined_isSet = false;
    m_joined_isValid = false;
}

void OAIMember_allOf_initiator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_allOf_initiator::fromJsonObject(QJsonObject json) {

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_joined_isValid = ::OpenAPI::fromJsonValue(m_joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;
}

QString OAIMember_allOf_initiator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_allOf_initiator::asJsonObject() const {
    QJsonObject obj;
    if (m_invited.isSet()) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_joined.isSet()) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(m_joined));
    }
    return obj;
}

OAIMember_allOf_initiator_invited OAIMember_allOf_initiator::getInvited() const {
    return m_invited;
}
void OAIMember_allOf_initiator::setInvited(const OAIMember_allOf_initiator_invited &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIMember_allOf_initiator::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIMember_allOf_initiator::is_invited_Valid() const{
    return m_invited_isValid;
}

OAIMember_allOf_initiator_invited OAIMember_allOf_initiator::getJoined() const {
    return m_joined;
}
void OAIMember_allOf_initiator::setJoined(const OAIMember_allOf_initiator_invited &joined) {
    m_joined = joined;
    m_joined_isSet = true;
}

bool OAIMember_allOf_initiator::is_joined_Set() const{
    return m_joined_isSet;
}

bool OAIMember_allOf_initiator::is_joined_Valid() const{
    return m_joined_isValid;
}

bool OAIMember_allOf_initiator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_allOf_initiator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
