/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_allOf_channel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_allOf_channel::OAIMember_allOf_channel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_allOf_channel::OAIMember_allOf_channel() {
    this->initializeModel();
}

OAIMember_allOf_channel::~OAIMember_allOf_channel() {}

void OAIMember_allOf_channel::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMember_allOf_channel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_allOf_channel::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMember_allOf_channel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_allOf_channel::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMember_allOf_channel::getType() const {
    return m_type;
}
void OAIMember_allOf_channel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMember_allOf_channel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMember_allOf_channel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMember_allOf_channel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_allOf_channel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
