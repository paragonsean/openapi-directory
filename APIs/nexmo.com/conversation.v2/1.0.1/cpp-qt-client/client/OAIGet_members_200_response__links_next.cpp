/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_members_200_response__links_next.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_members_200_response__links_next::OAIGet_members_200_response__links_next(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_members_200_response__links_next::OAIGet_members_200_response__links_next() {
    this->initializeModel();
}

OAIGet_members_200_response__links_next::~OAIGet_members_200_response__links_next() {}

void OAIGet_members_200_response__links_next::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;
}

void OAIGet_members_200_response__links_next::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_members_200_response__links_next::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;
}

QString OAIGet_members_200_response__links_next::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_members_200_response__links_next::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    return obj;
}

QString OAIGet_members_200_response__links_next::getHref() const {
    return m_href;
}
void OAIGet_members_200_response__links_next::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIGet_members_200_response__links_next::is_href_Set() const{
    return m_href_isSet;
}

bool OAIGet_members_200_response__links_next::is_href_Valid() const{
    return m_href_isValid;
}

bool OAIGet_members_200_response__links_next::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_members_200_response__links_next::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
