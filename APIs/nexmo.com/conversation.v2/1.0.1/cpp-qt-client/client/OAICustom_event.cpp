/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustom_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustom_event::OAICustom_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustom_event::OAICustom_event() {
    this->initializeModel();
}

OAICustom_event::~OAICustom_event() {}

void OAICustom_event::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICustom_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustom_event::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICustom_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustom_event::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIEvent__links OAICustom_event::getLinks() const {
    return m__links;
}
void OAICustom_event::setLinks(const OAIEvent__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICustom_event::is__links_Set() const{
    return m__links_isSet;
}

bool OAICustom_event::is__links_Valid() const{
    return m__links_isValid;
}

QString OAICustom_event::getFrom() const {
    return m_from;
}
void OAICustom_event::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICustom_event::is_from_Set() const{
    return m_from_isSet;
}

bool OAICustom_event::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAICustom_event::getId() const {
    return m_id;
}
void OAICustom_event::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustom_event::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustom_event::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustom_event::getTimestamp() const {
    return m_timestamp;
}
void OAICustom_event::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICustom_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICustom_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIObject OAICustom_event::getBody() const {
    return m_body;
}
void OAICustom_event::setBody(const OAIObject &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICustom_event::is_body_Set() const{
    return m_body_isSet;
}

bool OAICustom_event::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICustom_event::getType() const {
    return m_type;
}
void OAICustom_event::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustom_event::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustom_event::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICustom_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustom_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
