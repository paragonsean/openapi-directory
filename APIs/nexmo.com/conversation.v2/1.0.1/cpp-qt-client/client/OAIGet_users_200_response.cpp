/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_users_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_users_200_response::OAIGet_users_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_users_200_response::OAIGet_users_200_response() {
    this->initializeModel();
}

OAIGet_users_200_response::~OAIGet_users_200_response() {}

void OAIGet_users_200_response::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIGet_users_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_users_200_response::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;
}

QString OAIGet_users_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_users_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

OAIGet_users_200_response__embedded OAIGet_users_200_response::getEmbedded() const {
    return m__embedded;
}
void OAIGet_users_200_response::setEmbedded(const OAIGet_users_200_response__embedded &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIGet_users_200_response::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIGet_users_200_response::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIGet_users_200_response__links OAIGet_users_200_response::getLinks() const {
    return m__links;
}
void OAIGet_users_200_response::setLinks(const OAIGet_users_200_response__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGet_users_200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGet_users_200_response::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIGet_users_200_response::getCursor() const {
    return m_cursor;
}
void OAIGet_users_200_response::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIGet_users_200_response::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIGet_users_200_response::is_cursor_Valid() const{
    return m_cursor_isValid;
}

qint32 OAIGet_users_200_response::getPageSize() const {
    return m_page_size;
}
void OAIGet_users_200_response::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGet_users_200_response::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGet_users_200_response::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIGet_users_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_users_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
