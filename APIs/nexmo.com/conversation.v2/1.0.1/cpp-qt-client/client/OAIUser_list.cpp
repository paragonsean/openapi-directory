/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_list::OAIUser_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_list::OAIUser_list() {
    this->initializeModel();
}

OAIUser_list::~OAIUser_list() {}

void OAIUser_list::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUser_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_list::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUser_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_list::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIUser_links OAIUser_list::getLinks() const {
    return m__links;
}
void OAIUser_list::setLinks(const OAIUser_links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIUser_list::is__links_Set() const{
    return m__links_isSet;
}

bool OAIUser_list::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIUser_list::getId() const {
    return m_id;
}
void OAIUser_list::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser_list::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser_list::getName() const {
    return m_name;
}
void OAIUser_list::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser_list::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser_list::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUser_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
