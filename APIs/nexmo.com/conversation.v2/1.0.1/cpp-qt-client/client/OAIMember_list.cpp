/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_list::OAIMember_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_list::OAIMember_list() {
    this->initializeModel();
}

OAIMember_list::~OAIMember_list() {}

void OAIMember_list::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIMember_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_list::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIMember_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_list::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIMember_list__links OAIMember_list::getLinks() const {
    return m__links;
}
void OAIMember_list::setLinks(const OAIMember_list__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIMember_list::is__links_Set() const{
    return m__links_isSet;
}

bool OAIMember_list::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIMember_list::getDisplayName() const {
    return m_display_name;
}
void OAIMember_list::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMember_list::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMember_list::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMember_list::getId() const {
    return m_id;
}
void OAIMember_list::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMember_list::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMember_list::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMember_list::getName() const {
    return m_name;
}
void OAIMember_list::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMember_list::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMember_list::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMember_list::getState() const {
    return m_state;
}
void OAIMember_list::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMember_list::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMember_list::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMember_list::getUserId() const {
    return m_user_id;
}
void OAIMember_list::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMember_list::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMember_list::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIMember_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
