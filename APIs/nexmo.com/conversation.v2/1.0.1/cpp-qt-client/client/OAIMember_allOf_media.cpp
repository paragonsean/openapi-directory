/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_allOf_media.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_allOf_media::OAIMember_allOf_media(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_allOf_media::OAIMember_allOf_media() {
    this->initializeModel();
}

OAIMember_allOf_media::~OAIMember_allOf_media() {}

void OAIMember_allOf_media::initializeModel() {

    m_audio_settings_isSet = false;
    m_audio_settings_isValid = false;
}

void OAIMember_allOf_media::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_allOf_media::fromJsonObject(QJsonObject json) {

    m_audio_settings_isValid = ::OpenAPI::fromJsonValue(m_audio_settings, json[QString("audio_settings")]);
    m_audio_settings_isSet = !json[QString("audio_settings")].isNull() && m_audio_settings_isValid;
}

QString OAIMember_allOf_media::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_allOf_media::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_settings.isSet()) {
        obj.insert(QString("audio_settings"), ::OpenAPI::toJsonValue(m_audio_settings));
    }
    return obj;
}

OAIMember_allOf_media_audio_settings OAIMember_allOf_media::getAudioSettings() const {
    return m_audio_settings;
}
void OAIMember_allOf_media::setAudioSettings(const OAIMember_allOf_media_audio_settings &audio_settings) {
    m_audio_settings = audio_settings;
    m_audio_settings_isSet = true;
}

bool OAIMember_allOf_media::is_audio_settings_Set() const{
    return m_audio_settings_isSet;
}

bool OAIMember_allOf_media::is_audio_settings_Valid() const{
    return m_audio_settings_isValid;
}

bool OAIMember_allOf_media::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_allOf_media::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
