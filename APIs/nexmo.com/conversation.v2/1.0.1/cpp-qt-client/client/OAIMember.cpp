/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember::OAIMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember::OAIMember() {
    this->initializeModel();
}

OAIMember::~OAIMember() {}

void OAIMember::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_initiator.isSet()) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIMember_list__links OAIMember::getLinks() const {
    return m__links;
}
void OAIMember::setLinks(const OAIMember_list__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIMember::is__links_Set() const{
    return m__links_isSet;
}

bool OAIMember::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIMember::getDisplayName() const {
    return m_display_name;
}
void OAIMember::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMember::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMember::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMember::getId() const {
    return m_id;
}
void OAIMember::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMember::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMember::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMember::getName() const {
    return m_name;
}
void OAIMember::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMember::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMember::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMember::getState() const {
    return m_state;
}
void OAIMember::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMember::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMember::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMember::getUserId() const {
    return m_user_id;
}
void OAIMember::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMember::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMember::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIMember_allOf_channel OAIMember::getChannel() const {
    return m_channel;
}
void OAIMember::setChannel(const OAIMember_allOf_channel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIMember::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIMember::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIMember_allOf_initiator OAIMember::getInitiator() const {
    return m_initiator;
}
void OAIMember::setInitiator(const OAIMember_allOf_initiator &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIMember::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIMember::is_initiator_Valid() const{
    return m_initiator_isValid;
}

OAIMember_allOf_media OAIMember::getMedia() const {
    return m_media;
}
void OAIMember::setMedia(const OAIMember_allOf_media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIMember::is_media_Set() const{
    return m_media_isSet;
}

bool OAIMember::is_media_Valid() const{
    return m_media_isValid;
}

OAIMember_allOf_timestamp OAIMember::getTimestamp() const {
    return m_timestamp;
}
void OAIMember::setTimestamp(const OAIMember_allOf_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMember::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMember::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
