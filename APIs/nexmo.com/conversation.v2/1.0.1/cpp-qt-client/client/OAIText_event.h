/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIText_event.h
 *
 * 
 */

#ifndef OAIText_event_H
#define OAIText_event_H

#include <QJsonObject>

#include "OAIEvent__links.h"
#include "OAIText_event_allOf_body.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEvent__links;
class OAIText_event_allOf_body;

class OAIText_event : public OAIObject {
public:
    OAIText_event();
    OAIText_event(QString json);
    ~OAIText_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEvent__links getLinks() const;
    void setLinks(const OAIEvent__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIText_event_allOf_body getBody() const;
    void setBody(const OAIText_event_allOf_body &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    QString getConversationId() const;
    void setConversationId(const QString &conversation_id);
    bool is_conversation_id_Set() const;
    bool is_conversation_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEvent__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIText_event_allOf_body m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    QString m_conversation_id;
    bool m_conversation_id_isSet;
    bool m_conversation_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIText_event)

#endif // OAIText_event_H
