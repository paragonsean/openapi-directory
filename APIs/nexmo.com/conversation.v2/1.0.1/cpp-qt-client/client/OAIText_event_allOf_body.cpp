/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIText_event_allOf_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIText_event_allOf_body::OAIText_event_allOf_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIText_event_allOf_body::OAIText_event_allOf_body() {
    this->initializeModel();
}

OAIText_event_allOf_body::~OAIText_event_allOf_body() {}

void OAIText_event_allOf_body::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIText_event_allOf_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIText_event_allOf_body::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIText_event_allOf_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIText_event_allOf_body::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIText_event_allOf_body::getText() const {
    return m_text;
}
void OAIText_event_allOf_body::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIText_event_allOf_body::is_text_Set() const{
    return m_text_isSet;
}

bool OAIText_event_allOf_body::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIText_event_allOf_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIText_event_allOf_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
