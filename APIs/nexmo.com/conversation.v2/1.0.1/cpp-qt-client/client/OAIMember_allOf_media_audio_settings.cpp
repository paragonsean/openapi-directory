/**
 * Conversation API
 * The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember_allOf_media_audio_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember_allOf_media_audio_settings::OAIMember_allOf_media_audio_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember_allOf_media_audio_settings::OAIMember_allOf_media_audio_settings() {
    this->initializeModel();
}

OAIMember_allOf_media_audio_settings::~OAIMember_allOf_media_audio_settings() {}

void OAIMember_allOf_media_audio_settings::initializeModel() {

    m_earmuffed_isSet = false;
    m_earmuffed_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;
}

void OAIMember_allOf_media_audio_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember_allOf_media_audio_settings::fromJsonObject(QJsonObject json) {

    m_earmuffed_isValid = ::OpenAPI::fromJsonValue(m_earmuffed, json[QString("earmuffed")]);
    m_earmuffed_isSet = !json[QString("earmuffed")].isNull() && m_earmuffed_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;
}

QString OAIMember_allOf_media_audio_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember_allOf_media_audio_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_earmuffed_isSet) {
        obj.insert(QString("earmuffed"), ::OpenAPI::toJsonValue(m_earmuffed));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    return obj;
}

bool OAIMember_allOf_media_audio_settings::isEarmuffed() const {
    return m_earmuffed;
}
void OAIMember_allOf_media_audio_settings::setEarmuffed(const bool &earmuffed) {
    m_earmuffed = earmuffed;
    m_earmuffed_isSet = true;
}

bool OAIMember_allOf_media_audio_settings::is_earmuffed_Set() const{
    return m_earmuffed_isSet;
}

bool OAIMember_allOf_media_audio_settings::is_earmuffed_Valid() const{
    return m_earmuffed_isValid;
}

bool OAIMember_allOf_media_audio_settings::isEnabled() const {
    return m_enabled;
}
void OAIMember_allOf_media_audio_settings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIMember_allOf_media_audio_settings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIMember_allOf_media_audio_settings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIMember_allOf_media_audio_settings::isMuted() const {
    return m_muted;
}
void OAIMember_allOf_media_audio_settings::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIMember_allOf_media_audio_settings::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIMember_allOf_media_audio_settings::is_muted_Valid() const{
    return m_muted_isValid;
}

bool OAIMember_allOf_media_audio_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earmuffed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember_allOf_media_audio_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
