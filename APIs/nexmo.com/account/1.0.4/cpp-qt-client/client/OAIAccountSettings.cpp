/**
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSettings::OAIAccountSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSettings::OAIAccountSettings() {
    this->initializeModel();
}

OAIAccountSettings::~OAIAccountSettings() {}

void OAIAccountSettings::initializeModel() {

    m_dr_callback_url_isSet = false;
    m_dr_callback_url_isValid = false;

    m_max_calls_per_second_isSet = false;
    m_max_calls_per_second_isValid = false;

    m_max_inbound_request_isSet = false;
    m_max_inbound_request_isValid = false;

    m_max_outbound_request_isSet = false;
    m_max_outbound_request_isValid = false;

    m_mo_callback_url_isSet = false;
    m_mo_callback_url_isValid = false;
}

void OAIAccountSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSettings::fromJsonObject(QJsonObject json) {

    m_dr_callback_url_isValid = ::OpenAPI::fromJsonValue(m_dr_callback_url, json[QString("dr-callback-url")]);
    m_dr_callback_url_isSet = !json[QString("dr-callback-url")].isNull() && m_dr_callback_url_isValid;

    m_max_calls_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_calls_per_second, json[QString("max-calls-per-second")]);
    m_max_calls_per_second_isSet = !json[QString("max-calls-per-second")].isNull() && m_max_calls_per_second_isValid;

    m_max_inbound_request_isValid = ::OpenAPI::fromJsonValue(m_max_inbound_request, json[QString("max-inbound-request")]);
    m_max_inbound_request_isSet = !json[QString("max-inbound-request")].isNull() && m_max_inbound_request_isValid;

    m_max_outbound_request_isValid = ::OpenAPI::fromJsonValue(m_max_outbound_request, json[QString("max-outbound-request")]);
    m_max_outbound_request_isSet = !json[QString("max-outbound-request")].isNull() && m_max_outbound_request_isValid;

    m_mo_callback_url_isValid = ::OpenAPI::fromJsonValue(m_mo_callback_url, json[QString("mo-callback-url")]);
    m_mo_callback_url_isSet = !json[QString("mo-callback-url")].isNull() && m_mo_callback_url_isValid;
}

QString OAIAccountSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_dr_callback_url_isSet) {
        obj.insert(QString("dr-callback-url"), ::OpenAPI::toJsonValue(m_dr_callback_url));
    }
    if (m_max_calls_per_second_isSet) {
        obj.insert(QString("max-calls-per-second"), ::OpenAPI::toJsonValue(m_max_calls_per_second));
    }
    if (m_max_inbound_request_isSet) {
        obj.insert(QString("max-inbound-request"), ::OpenAPI::toJsonValue(m_max_inbound_request));
    }
    if (m_max_outbound_request_isSet) {
        obj.insert(QString("max-outbound-request"), ::OpenAPI::toJsonValue(m_max_outbound_request));
    }
    if (m_mo_callback_url_isSet) {
        obj.insert(QString("mo-callback-url"), ::OpenAPI::toJsonValue(m_mo_callback_url));
    }
    return obj;
}

QString OAIAccountSettings::getDrCallbackUrl() const {
    return m_dr_callback_url;
}
void OAIAccountSettings::setDrCallbackUrl(const QString &dr_callback_url) {
    m_dr_callback_url = dr_callback_url;
    m_dr_callback_url_isSet = true;
}

bool OAIAccountSettings::is_dr_callback_url_Set() const{
    return m_dr_callback_url_isSet;
}

bool OAIAccountSettings::is_dr_callback_url_Valid() const{
    return m_dr_callback_url_isValid;
}

qint32 OAIAccountSettings::getMaxCallsPerSecond() const {
    return m_max_calls_per_second;
}
void OAIAccountSettings::setMaxCallsPerSecond(const qint32 &max_calls_per_second) {
    m_max_calls_per_second = max_calls_per_second;
    m_max_calls_per_second_isSet = true;
}

bool OAIAccountSettings::is_max_calls_per_second_Set() const{
    return m_max_calls_per_second_isSet;
}

bool OAIAccountSettings::is_max_calls_per_second_Valid() const{
    return m_max_calls_per_second_isValid;
}

qint32 OAIAccountSettings::getMaxInboundRequest() const {
    return m_max_inbound_request;
}
void OAIAccountSettings::setMaxInboundRequest(const qint32 &max_inbound_request) {
    m_max_inbound_request = max_inbound_request;
    m_max_inbound_request_isSet = true;
}

bool OAIAccountSettings::is_max_inbound_request_Set() const{
    return m_max_inbound_request_isSet;
}

bool OAIAccountSettings::is_max_inbound_request_Valid() const{
    return m_max_inbound_request_isValid;
}

qint32 OAIAccountSettings::getMaxOutboundRequest() const {
    return m_max_outbound_request;
}
void OAIAccountSettings::setMaxOutboundRequest(const qint32 &max_outbound_request) {
    m_max_outbound_request = max_outbound_request;
    m_max_outbound_request_isSet = true;
}

bool OAIAccountSettings::is_max_outbound_request_Set() const{
    return m_max_outbound_request_isSet;
}

bool OAIAccountSettings::is_max_outbound_request_Valid() const{
    return m_max_outbound_request_isValid;
}

QString OAIAccountSettings::getMoCallbackUrl() const {
    return m_mo_callback_url;
}
void OAIAccountSettings::setMoCallbackUrl(const QString &mo_callback_url) {
    m_mo_callback_url = mo_callback_url;
    m_mo_callback_url_isSet = true;
}

bool OAIAccountSettings::is_mo_callback_url_Set() const{
    return m_mo_callback_url_isSet;
}

bool OAIAccountSettings::is_mo_callback_url_Valid() const{
    return m_mo_callback_url_isValid;
}

bool OAIAccountSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dr_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_calls_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_inbound_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_outbound_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mo_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
