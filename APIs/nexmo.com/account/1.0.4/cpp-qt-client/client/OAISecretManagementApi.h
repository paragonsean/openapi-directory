/**
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretManagementApi_H
#define OAI_OAISecretManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAPISecret_400_response.h"
#include "OAICreateSecretRequest.h"
#include "OAIErrorAPIKeyNotFound.h"
#include "OAIRetrieveAPISecret_404_response.h"
#include "OAIRetrieveAPISecrets_200_response.h"
#include "OAIRetrieveAPISecrets_401_response.h"
#include "OAIRevokeAPISecret_403_response.h"
#include "OAISecretInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretManagementApi : public QObject {
    Q_OBJECT

public:
    OAISecretManagementApi(const int timeOut = 0);
    ~OAISecretManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_create_secret_request OAICreateSecretRequest [required]
    */
    virtual void createAPISecret(const QString &api_key, const OAICreateSecretRequest &oai_create_secret_request);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  secret_id QString [required]
    */
    virtual void retrieveAPISecret(const QString &api_key, const QString &secret_id);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void retrieveAPISecrets(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  secret_id QString [required]
    */
    virtual void revokeAPISecret(const QString &api_key, const QString &secret_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAPISecretCallback(OAIHttpRequestWorker *worker);
    void retrieveAPISecretCallback(OAIHttpRequestWorker *worker);
    void retrieveAPISecretsCallback(OAIHttpRequestWorker *worker);
    void revokeAPISecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAPISecretSignal(OAISecretInfo summary);
    void retrieveAPISecretSignal(OAISecretInfo summary);
    void retrieveAPISecretsSignal(OAIRetrieveAPISecrets_200_response summary);
    void revokeAPISecretSignal();


    void createAPISecretSignalFull(OAIHttpRequestWorker *worker, OAISecretInfo summary);
    void retrieveAPISecretSignalFull(OAIHttpRequestWorker *worker, OAISecretInfo summary);
    void retrieveAPISecretsSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveAPISecrets_200_response summary);
    void revokeAPISecretSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createAPISecretSignalError() instead")
    void createAPISecretSignalE(OAISecretInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAPISecretSignalError(OAISecretInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPISecretSignalError() instead")
    void retrieveAPISecretSignalE(OAISecretInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPISecretSignalError(OAISecretInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPISecretsSignalError() instead")
    void retrieveAPISecretsSignalE(OAIRetrieveAPISecrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPISecretsSignalError(OAIRetrieveAPISecrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeAPISecretSignalError() instead")
    void revokeAPISecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeAPISecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAPISecretSignalErrorFull() instead")
    void createAPISecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAPISecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPISecretSignalErrorFull() instead")
    void retrieveAPISecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPISecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPISecretsSignalErrorFull() instead")
    void retrieveAPISecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPISecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeAPISecretSignalErrorFull() instead")
    void revokeAPISecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeAPISecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
