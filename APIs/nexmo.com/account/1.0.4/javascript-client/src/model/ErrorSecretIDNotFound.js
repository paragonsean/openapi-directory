/**
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorSecretIDNotFound model module.
 * @module model/ErrorSecretIDNotFound
 * @version 1.0.4
 */
class ErrorSecretIDNotFound {
    /**
     * Constructs a new <code>ErrorSecretIDNotFound</code>.
     * This secret ID was not recognised
     * @alias module:model/ErrorSecretIDNotFound
     * @param detail {String} More detail regarding this error, including the secret ID supplied
     * @param instance {String} Internal Trace ID
     * @param title {String} Description of the error
     * @param type {String} URL for further information
     */
    constructor(detail, instance, title, type) { 
        
        ErrorSecretIDNotFound.initialize(this, detail, instance, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, instance, title, type) { 
        obj['detail'] = detail;
        obj['instance'] = instance;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ErrorSecretIDNotFound</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorSecretIDNotFound} obj Optional instance to populate.
     * @return {module:model/ErrorSecretIDNotFound} The populated <code>ErrorSecretIDNotFound</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorSecretIDNotFound();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorSecretIDNotFound</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorSecretIDNotFound</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorSecretIDNotFound.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ErrorSecretIDNotFound.RequiredProperties = ["detail", "instance", "title", "type"];

/**
 * More detail regarding this error, including the secret ID supplied
 * @member {String} detail
 */
ErrorSecretIDNotFound.prototype['detail'] = undefined;

/**
 * Internal Trace ID
 * @member {String} instance
 */
ErrorSecretIDNotFound.prototype['instance'] = undefined;

/**
 * Description of the error
 * @member {String} title
 */
ErrorSecretIDNotFound.prototype['title'] = undefined;

/**
 * URL for further information
 * @member {String} type
 */
ErrorSecretIDNotFound.prototype['type'] = undefined;






export default ErrorSecretIDNotFound;

