/**
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAPISecret400Response from '../model/CreateAPISecret400Response';
import CreateSecretRequest from '../model/CreateSecretRequest';
import ErrorAPIKeyNotFound from '../model/ErrorAPIKeyNotFound';
import RetrieveAPISecret404Response from '../model/RetrieveAPISecret404Response';
import RetrieveAPISecrets200Response from '../model/RetrieveAPISecrets200Response';
import RetrieveAPISecrets401Response from '../model/RetrieveAPISecrets401Response';
import RevokeAPISecret403Response from '../model/RevokeAPISecret403Response';
import SecretInfo from '../model/SecretInfo';

/**
* SecretManagement service.
* @module api/SecretManagementApi
* @version 1.0.4
*/
export default class SecretManagementApi {

    /**
    * Constructs a new SecretManagementApi. 
    * @alias module:api/SecretManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAPISecret operation.
     * @callback module:api/SecretManagementApi~createAPISecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API Secret
     * @param {String} apiKey The API key to manage secrets for
     * @param {module:model/CreateSecretRequest} createSecretRequest 
     * @param {module:api/SecretManagementApi~createAPISecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretInfo}
     */
    createAPISecret(apiKey, createSecretRequest, callback) {
      let postBody = createSecretRequest;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createAPISecret");
      }
      // verify the required parameter 'createSecretRequest' is set
      if (createSecretRequest === undefined || createSecretRequest === null) {
        throw new Error("Missing the required parameter 'createSecretRequest' when calling createAPISecret");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretInfo;
      return this.apiClient.callApi(
        '/accounts/{api_key}/secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAPISecret operation.
     * @callback module:api/SecretManagementApi~retrieveAPISecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one API Secret
     * @param {String} apiKey The API key to manage secrets for
     * @param {String} secretId ID of the API Secret
     * @param {module:api/SecretManagementApi~retrieveAPISecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretInfo}
     */
    retrieveAPISecret(apiKey, secretId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrieveAPISecret");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling retrieveAPISecret");
      }

      let pathParams = {
        'api_key': apiKey,
        'secret_id': secretId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretInfo;
      return this.apiClient.callApi(
        '/accounts/{api_key}/secrets/{secret_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAPISecrets operation.
     * @callback module:api/SecretManagementApi~retrieveAPISecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveAPISecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve API Secrets
     * @param {String} apiKey The API key to manage secrets for
     * @param {module:api/SecretManagementApi~retrieveAPISecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveAPISecrets200Response}
     */
    retrieveAPISecrets(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retrieveAPISecrets");
      }

      let pathParams = {
        'api_key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveAPISecrets200Response;
      return this.apiClient.callApi(
        '/accounts/{api_key}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeAPISecret operation.
     * @callback module:api/SecretManagementApi~revokeAPISecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke an API Secret
     * @param {String} apiKey The API key to manage secrets for
     * @param {String} secretId ID of the API Secret
     * @param {module:api/SecretManagementApi~revokeAPISecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeAPISecret(apiKey, secretId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling revokeAPISecret");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling revokeAPISecret");
      }

      let pathParams = {
        'api_key': apiKey,
        'secret_id': secretId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{api_key}/secrets/{secret_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
