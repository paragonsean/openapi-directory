/**
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountSettings from '../model/AccountSettings';
import RegisterEmailRequest from '../model/RegisterEmailRequest';
import RegisterEmailResponse from '../model/RegisterEmailResponse';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version 1.0.4
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeAccountSettings operation.
     * @callback module:api/ConfigurationApi~changeAccountSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Account Settings
     * Update the default webhook URLs associated with your account:   * Callback URL for incoming SMS messages   * Callback URL for delivery receipts  Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param {String} apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com)
     * @param {Object} opts Optional parameters
     * @param {String} [drCallBackUrl] The webhook URL that Vonage makes a request to when a delivery receipt is available  for an SMS sent by one of your Vonage numbers. Send an empty string to unset this value.
     * @param {String} [moCallBackUrl] The default webhook URL for inbound SMS. If an SMS is received at a Vonage number  that does not have its own inbound SMS webhook configured, Vonage makes a request here. Send an empty string to unset this value.
     * @param {module:api/ConfigurationApi~changeAccountSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountSettings}
     */
    changeAccountSettings(apiKey, apiSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling changeAccountSettings");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling changeAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret
      };
      let headerParams = {
      };
      let formParams = {
        'drCallBackUrl': opts['drCallBackUrl'],
        'moCallBackUrl': opts['moCallBackUrl']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = AccountSettings;
      let basePaths = ['https://rest.nexmo.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/account/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the registerSender operation.
     * @callback module:api/ConfigurationApi~registerSenderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register an email sender
     * Register an email sender with an API Key for using email with Verify V2.
     * @param {String} apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com)
     * @param {module:model/RegisterEmailRequest} registerEmailRequest 
     * @param {module:api/ConfigurationApi~registerSenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterEmailResponse}
     */
    registerSender(apiKey, apiSecret, registerEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerEmailRequest;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling registerSender");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling registerSender");
      }
      // verify the required parameter 'registerEmailRequest' is set
      if (registerEmailRequest === undefined || registerEmailRequest === null) {
        throw new Error("Missing the required parameter 'registerEmailRequest' when calling registerSender");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterEmailResponse;
      let basePaths = ['https://rest.nexmo.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/account/register-sender', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
