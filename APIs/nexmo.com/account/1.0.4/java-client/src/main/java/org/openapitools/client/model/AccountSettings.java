/*
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:47.540337-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountSettings {
  public static final String SERIALIZED_NAME_DR_CALLBACK_URL = "dr-callback-url";
  @SerializedName(SERIALIZED_NAME_DR_CALLBACK_URL)
  private String drCallbackUrl;

  public static final String SERIALIZED_NAME_MAX_CALLS_PER_SECOND = "max-calls-per-second";
  @SerializedName(SERIALIZED_NAME_MAX_CALLS_PER_SECOND)
  private Integer maxCallsPerSecond;

  public static final String SERIALIZED_NAME_MAX_INBOUND_REQUEST = "max-inbound-request";
  @SerializedName(SERIALIZED_NAME_MAX_INBOUND_REQUEST)
  private Integer maxInboundRequest;

  public static final String SERIALIZED_NAME_MAX_OUTBOUND_REQUEST = "max-outbound-request";
  @SerializedName(SERIALIZED_NAME_MAX_OUTBOUND_REQUEST)
  private Integer maxOutboundRequest;

  public static final String SERIALIZED_NAME_MO_CALLBACK_URL = "mo-callback-url";
  @SerializedName(SERIALIZED_NAME_MO_CALLBACK_URL)
  private String moCallbackUrl;

  public AccountSettings() {
  }

  public AccountSettings drCallbackUrl(String drCallbackUrl) {
    this.drCallbackUrl = drCallbackUrl;
    return this;
  }

  /**
   * The current or updated delivery receipt webhook URI
   * @return drCallbackUrl
   */
  @javax.annotation.Nullable
  public String getDrCallbackUrl() {
    return drCallbackUrl;
  }

  public void setDrCallbackUrl(String drCallbackUrl) {
    this.drCallbackUrl = drCallbackUrl;
  }


  public AccountSettings maxCallsPerSecond(Integer maxCallsPerSecond) {
    this.maxCallsPerSecond = maxCallsPerSecond;
    return this;
  }

  /**
   * The maximum number of API calls per second.
   * @return maxCallsPerSecond
   */
  @javax.annotation.Nullable
  public Integer getMaxCallsPerSecond() {
    return maxCallsPerSecond;
  }

  public void setMaxCallsPerSecond(Integer maxCallsPerSecond) {
    this.maxCallsPerSecond = maxCallsPerSecond;
  }


  public AccountSettings maxInboundRequest(Integer maxInboundRequest) {
    this.maxInboundRequest = maxInboundRequest;
    return this;
  }

  /**
   * The maximum number of inbound messages per second.
   * @return maxInboundRequest
   */
  @javax.annotation.Nullable
  public Integer getMaxInboundRequest() {
    return maxInboundRequest;
  }

  public void setMaxInboundRequest(Integer maxInboundRequest) {
    this.maxInboundRequest = maxInboundRequest;
  }


  public AccountSettings maxOutboundRequest(Integer maxOutboundRequest) {
    this.maxOutboundRequest = maxOutboundRequest;
    return this;
  }

  /**
   * The maximum number of outbound messages per second.
   * @return maxOutboundRequest
   */
  @javax.annotation.Nullable
  public Integer getMaxOutboundRequest() {
    return maxOutboundRequest;
  }

  public void setMaxOutboundRequest(Integer maxOutboundRequest) {
    this.maxOutboundRequest = maxOutboundRequest;
  }


  public AccountSettings moCallbackUrl(String moCallbackUrl) {
    this.moCallbackUrl = moCallbackUrl;
    return this;
  }

  /**
   * The current or updated inbound message webhook URI
   * @return moCallbackUrl
   */
  @javax.annotation.Nullable
  public String getMoCallbackUrl() {
    return moCallbackUrl;
  }

  public void setMoCallbackUrl(String moCallbackUrl) {
    this.moCallbackUrl = moCallbackUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSettings accountSettings = (AccountSettings) o;
    return Objects.equals(this.drCallbackUrl, accountSettings.drCallbackUrl) &&
        Objects.equals(this.maxCallsPerSecond, accountSettings.maxCallsPerSecond) &&
        Objects.equals(this.maxInboundRequest, accountSettings.maxInboundRequest) &&
        Objects.equals(this.maxOutboundRequest, accountSettings.maxOutboundRequest) &&
        Objects.equals(this.moCallbackUrl, accountSettings.moCallbackUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drCallbackUrl, maxCallsPerSecond, maxInboundRequest, maxOutboundRequest, moCallbackUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSettings {\n");
    sb.append("    drCallbackUrl: ").append(toIndentedString(drCallbackUrl)).append("\n");
    sb.append("    maxCallsPerSecond: ").append(toIndentedString(maxCallsPerSecond)).append("\n");
    sb.append("    maxInboundRequest: ").append(toIndentedString(maxInboundRequest)).append("\n");
    sb.append("    maxOutboundRequest: ").append(toIndentedString(maxOutboundRequest)).append("\n");
    sb.append("    moCallbackUrl: ").append(toIndentedString(moCallbackUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dr-callback-url");
    openapiFields.add("max-calls-per-second");
    openapiFields.add("max-inbound-request");
    openapiFields.add("max-outbound-request");
    openapiFields.add("mo-callback-url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSettings is not found in the empty JSON string", AccountSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dr-callback-url") != null && !jsonObj.get("dr-callback-url").isJsonNull()) && !jsonObj.get("dr-callback-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dr-callback-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dr-callback-url").toString()));
      }
      if ((jsonObj.get("mo-callback-url") != null && !jsonObj.get("mo-callback-url").isJsonNull()) && !jsonObj.get("mo-callback-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mo-callback-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mo-callback-url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSettings>() {
           @Override
           public void write(JsonWriter out, AccountSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountSettings
   * @throws IOException if the JSON string is invalid with respect to AccountSettings
   */
  public static AccountSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSettings.class);
  }

  /**
   * Convert an instance of AccountSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

