/*
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountSettings;
import org.openapitools.client.model.RegisterEmailRequest;
import org.openapitools.client.model.RegisterEmailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeAccountSettings
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param drCallBackUrl The webhook URL that Vonage makes a request to when a delivery receipt is available  for an SMS sent by one of your Vonage numbers. Send an empty string to unset this value. (optional)
     * @param moCallBackUrl The default webhook URL for inbound SMS. If an SMS is received at a Vonage number  that does not have its own inbound SMS webhook configured, Vonage makes a request here. Send an empty string to unset this value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Settings were updated if supplied, the details of the current settings are included in the response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAccountSettingsCall(String apiKey, String apiSecret, String drCallBackUrl, String moCallBackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://rest.nexmo.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (drCallBackUrl != null) {
            localVarFormParams.put("drCallBackUrl", drCallBackUrl);
        }

        if (moCallBackUrl != null) {
            localVarFormParams.put("moCallBackUrl", moCallBackUrl);
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeAccountSettingsValidateBeforeCall(String apiKey, String apiSecret, String drCallBackUrl, String moCallBackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling changeAccountSettings(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling changeAccountSettings(Async)");
        }

        return changeAccountSettingsCall(apiKey, apiSecret, drCallBackUrl, moCallBackUrl, _callback);

    }

    /**
     * Change Account Settings
     * Update the default webhook URLs associated with your account:   * Callback URL for incoming SMS messages   * Callback URL for delivery receipts  Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param drCallBackUrl The webhook URL that Vonage makes a request to when a delivery receipt is available  for an SMS sent by one of your Vonage numbers. Send an empty string to unset this value. (optional)
     * @param moCallBackUrl The default webhook URL for inbound SMS. If an SMS is received at a Vonage number  that does not have its own inbound SMS webhook configured, Vonage makes a request here. Send an empty string to unset this value. (optional)
     * @return AccountSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Settings were updated if supplied, the details of the current settings are included in the response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public AccountSettings changeAccountSettings(String apiKey, String apiSecret, String drCallBackUrl, String moCallBackUrl) throws ApiException {
        ApiResponse<AccountSettings> localVarResp = changeAccountSettingsWithHttpInfo(apiKey, apiSecret, drCallBackUrl, moCallBackUrl);
        return localVarResp.getData();
    }

    /**
     * Change Account Settings
     * Update the default webhook URLs associated with your account:   * Callback URL for incoming SMS messages   * Callback URL for delivery receipts  Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param drCallBackUrl The webhook URL that Vonage makes a request to when a delivery receipt is available  for an SMS sent by one of your Vonage numbers. Send an empty string to unset this value. (optional)
     * @param moCallBackUrl The default webhook URL for inbound SMS. If an SMS is received at a Vonage number  that does not have its own inbound SMS webhook configured, Vonage makes a request here. Send an empty string to unset this value. (optional)
     * @return ApiResponse&lt;AccountSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Settings were updated if supplied, the details of the current settings are included in the response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSettings> changeAccountSettingsWithHttpInfo(String apiKey, String apiSecret, String drCallBackUrl, String moCallBackUrl) throws ApiException {
        okhttp3.Call localVarCall = changeAccountSettingsValidateBeforeCall(apiKey, apiSecret, drCallBackUrl, moCallBackUrl, null);
        Type localVarReturnType = new TypeToken<AccountSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Account Settings (asynchronously)
     * Update the default webhook URLs associated with your account:   * Callback URL for incoming SMS messages   * Callback URL for delivery receipts  Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param drCallBackUrl The webhook URL that Vonage makes a request to when a delivery receipt is available  for an SMS sent by one of your Vonage numbers. Send an empty string to unset this value. (optional)
     * @param moCallBackUrl The default webhook URL for inbound SMS. If an SMS is received at a Vonage number  that does not have its own inbound SMS webhook configured, Vonage makes a request here. Send an empty string to unset this value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Settings were updated if supplied, the details of the current settings are included in the response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAccountSettingsAsync(String apiKey, String apiSecret, String drCallBackUrl, String moCallBackUrl, final ApiCallback<AccountSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeAccountSettingsValidateBeforeCall(apiKey, apiSecret, drCallBackUrl, moCallBackUrl, _callback);
        Type localVarReturnType = new TypeToken<AccountSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerSender
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param registerEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerSenderCall(String apiKey, String apiSecret, RegisterEmailRequest registerEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://rest.nexmo.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerEmailRequest;

        // create path and map variables
        String localVarPath = "/account/register-sender";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerSenderValidateBeforeCall(String apiKey, String apiSecret, RegisterEmailRequest registerEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling registerSender(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling registerSender(Async)");
        }

        // verify the required parameter 'registerEmailRequest' is set
        if (registerEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'registerEmailRequest' when calling registerSender(Async)");
        }

        return registerSenderCall(apiKey, apiSecret, registerEmailRequest, _callback);

    }

    /**
     * Register an email sender
     * Register an email sender with an API Key for using email with Verify V2.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param registerEmailRequest  (required)
     * @return RegisterEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegisterEmailResponse registerSender(String apiKey, String apiSecret, RegisterEmailRequest registerEmailRequest) throws ApiException {
        ApiResponse<RegisterEmailResponse> localVarResp = registerSenderWithHttpInfo(apiKey, apiSecret, registerEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Register an email sender
     * Register an email sender with an API Key for using email with Verify V2.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param registerEmailRequest  (required)
     * @return ApiResponse&lt;RegisterEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterEmailResponse> registerSenderWithHttpInfo(String apiKey, String apiSecret, RegisterEmailRequest registerEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = registerSenderValidateBeforeCall(apiKey, apiSecret, registerEmailRequest, null);
        Type localVarReturnType = new TypeToken<RegisterEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register an email sender (asynchronously)
     * Register an email sender with an API Key for using email with Verify V2.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param registerEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerSenderAsync(String apiKey, String apiSecret, RegisterEmailRequest registerEmailRequest, final ApiCallback<RegisterEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerSenderValidateBeforeCall(apiKey, apiSecret, registerEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<RegisterEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
