/*
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAPISecret400ResponseInvalidParametersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAPISecret400Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:47.540337-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAPISecret400Response {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_INVALID_PARAMETERS = "invalid_parameters";
  @SerializedName(SERIALIZED_NAME_INVALID_PARAMETERS)
  private List<CreateAPISecret400ResponseInvalidParametersInner> invalidParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CreateAPISecret400Response() {
  }

  public CreateAPISecret400Response detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * More detail regarding this error, including the API key supplied
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public CreateAPISecret400Response instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Internal Trace ID
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }


  public CreateAPISecret400Response invalidParameters(List<CreateAPISecret400ResponseInvalidParametersInner> invalidParameters) {
    this.invalidParameters = invalidParameters;
    return this;
  }

  public CreateAPISecret400Response addInvalidParametersItem(CreateAPISecret400ResponseInvalidParametersInner invalidParametersItem) {
    if (this.invalidParameters == null) {
      this.invalidParameters = new ArrayList<>();
    }
    this.invalidParameters.add(invalidParametersItem);
    return this;
  }

  /**
   * Array of the parameters that are considered invalid, and explanations of why
   * @return invalidParameters
   */
  @javax.annotation.Nullable
  public List<CreateAPISecret400ResponseInvalidParametersInner> getInvalidParameters() {
    return invalidParameters;
  }

  public void setInvalidParameters(List<CreateAPISecret400ResponseInvalidParametersInner> invalidParameters) {
    this.invalidParameters = invalidParameters;
  }


  public CreateAPISecret400Response title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Description of the error
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateAPISecret400Response type(String type) {
    this.type = type;
    return this;
  }

  /**
   * URL for further information
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAPISecret400Response createAPISecret400Response = (CreateAPISecret400Response) o;
    return Objects.equals(this.detail, createAPISecret400Response.detail) &&
        Objects.equals(this.instance, createAPISecret400Response.instance) &&
        Objects.equals(this.invalidParameters, createAPISecret400Response.invalidParameters) &&
        Objects.equals(this.title, createAPISecret400Response.title) &&
        Objects.equals(this.type, createAPISecret400Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, instance, invalidParameters, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAPISecret400Response {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    invalidParameters: ").append(toIndentedString(invalidParameters)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("instance");
    openapiFields.add("invalid_parameters");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAPISecret400Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAPISecret400Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAPISecret400Response is not found in the empty JSON string", CreateAPISecret400Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAPISecret400Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAPISecret400Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if (jsonObj.get("invalid_parameters") != null && !jsonObj.get("invalid_parameters").isJsonNull()) {
        JsonArray jsonArrayinvalidParameters = jsonObj.getAsJsonArray("invalid_parameters");
        if (jsonArrayinvalidParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalid_parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalid_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("invalid_parameters").toString()));
          }

          // validate the optional field `invalid_parameters` (array)
          for (int i = 0; i < jsonArrayinvalidParameters.size(); i++) {
            CreateAPISecret400ResponseInvalidParametersInner.validateJsonElement(jsonArrayinvalidParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAPISecret400Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAPISecret400Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAPISecret400Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAPISecret400Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAPISecret400Response>() {
           @Override
           public void write(JsonWriter out, CreateAPISecret400Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAPISecret400Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAPISecret400Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAPISecret400Response
   * @throws IOException if the JSON string is invalid with respect to CreateAPISecret400Response
   */
  public static CreateAPISecret400Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAPISecret400Response.class);
  }

  /**
   * Convert an instance of CreateAPISecret400Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

