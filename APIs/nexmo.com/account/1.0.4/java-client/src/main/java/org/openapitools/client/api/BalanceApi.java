/*
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountBalance;
import org.openapitools.client.model.ErrorAuthenticationFailedAccountBalance;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.TopUpAccountBalance401Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BalanceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BalanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BalanceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccountBalance
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current balance of your account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBalanceCall(String apiKey, String apiSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://rest.nexmo.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/get-balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBalanceValidateBeforeCall(String apiKey, String apiSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getAccountBalance(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getAccountBalance(Async)");
        }

        return getAccountBalanceCall(apiKey, apiSecret, _callback);

    }

    /**
     * Get Account Balance
     * Retrieve the current balance of your Vonage API account
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @return AccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current balance of your account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public AccountBalance getAccountBalance(String apiKey, String apiSecret) throws ApiException {
        ApiResponse<AccountBalance> localVarResp = getAccountBalanceWithHttpInfo(apiKey, apiSecret);
        return localVarResp.getData();
    }

    /**
     * Get Account Balance
     * Retrieve the current balance of your Vonage API account
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @return ApiResponse&lt;AccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current balance of your account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountBalance> getAccountBalanceWithHttpInfo(String apiKey, String apiSecret) throws ApiException {
        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(apiKey, apiSecret, null);
        Type localVarReturnType = new TypeToken<AccountBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Balance (asynchronously)
     * Retrieve the current balance of your Vonage API account
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current balance of your account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised. You must supply your &#x60;api_key&#x60; and &#x60;api_secret&#x60; as query parameters to this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBalanceAsync(String apiKey, String apiSecret, final ApiCallback<AccountBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(apiKey, apiSecret, _callback);
        Type localVarReturnType = new TypeToken<AccountBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topUpAccountBalance
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param trx The transaction reference of the transaction when balance was added and auto-reload was enabled on your account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised </td><td>  -  </td></tr>
     </table>
     * Read more about automatic payments on the Knowledgebase
     * @see <a href="https://help.nexmo.com/hc/en-us/articles/205603248-How-do-I-set-up-automatic-payments-using-PayPal-or-credit-card-">Top Up Account Balance Documentation</a>
     */
    public okhttp3.Call topUpAccountBalanceCall(String apiKey, String apiSecret, String trx, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://rest.nexmo.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/top-up";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trx != null) {
            localVarFormParams.put("trx", trx);
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topUpAccountBalanceValidateBeforeCall(String apiKey, String apiSecret, String trx, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling topUpAccountBalance(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling topUpAccountBalance(Async)");
        }

        // verify the required parameter 'trx' is set
        if (trx == null) {
            throw new ApiException("Missing the required parameter 'trx' when calling topUpAccountBalance(Async)");
        }

        return topUpAccountBalanceCall(apiKey, apiSecret, trx, _callback);

    }

    /**
     * Top Up Account Balance
     * You can top up your account using this API when you have enabled auto-reload in the dashboard. The amount added by the top-up operation will be the same amount as was added in the payment when auto-reload was enabled. Your account balance is checked every 5-10 minutes and if it falls below the threshold and auto-reload is enabled, then it will be topped up automatically. Use this endpoint  if you need to top up at times when your credit may be exhausted more quickly than the auto-reload may occur.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param trx The transaction reference of the transaction when balance was added and auto-reload was enabled on your account. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised </td><td>  -  </td></tr>
     </table>
     * Read more about automatic payments on the Knowledgebase
     * @see <a href="https://help.nexmo.com/hc/en-us/articles/205603248-How-do-I-set-up-automatic-payments-using-PayPal-or-credit-card-">Top Up Account Balance Documentation</a>
     */
    public Success topUpAccountBalance(String apiKey, String apiSecret, String trx) throws ApiException {
        ApiResponse<Success> localVarResp = topUpAccountBalanceWithHttpInfo(apiKey, apiSecret, trx);
        return localVarResp.getData();
    }

    /**
     * Top Up Account Balance
     * You can top up your account using this API when you have enabled auto-reload in the dashboard. The amount added by the top-up operation will be the same amount as was added in the payment when auto-reload was enabled. Your account balance is checked every 5-10 minutes and if it falls below the threshold and auto-reload is enabled, then it will be topped up automatically. Use this endpoint  if you need to top up at times when your credit may be exhausted more quickly than the auto-reload may occur.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param trx The transaction reference of the transaction when balance was added and auto-reload was enabled on your account. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised </td><td>  -  </td></tr>
     </table>
     * Read more about automatic payments on the Knowledgebase
     * @see <a href="https://help.nexmo.com/hc/en-us/articles/205603248-How-do-I-set-up-automatic-payments-using-PayPal-or-credit-card-">Top Up Account Balance Documentation</a>
     */
    public ApiResponse<Success> topUpAccountBalanceWithHttpInfo(String apiKey, String apiSecret, String trx) throws ApiException {
        okhttp3.Call localVarCall = topUpAccountBalanceValidateBeforeCall(apiKey, apiSecret, trx, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top Up Account Balance (asynchronously)
     * You can top up your account using this API when you have enabled auto-reload in the dashboard. The amount added by the top-up operation will be the same amount as was added in the payment when auto-reload was enabled. Your account balance is checked every 5-10 minutes and if it falls below the threshold and auto-reload is enabled, then it will be topped up automatically. Use this endpoint  if you need to top up at times when your credit may be exhausted more quickly than the auto-reload may occur.
     * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com) (required)
     * @param trx The transaction reference of the transaction when balance was added and auto-reload was enabled on your account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorised </td><td>  -  </td></tr>
     </table>
     * Read more about automatic payments on the Knowledgebase
     * @see <a href="https://help.nexmo.com/hc/en-us/articles/205603248-How-do-I-set-up-automatic-payments-using-PayPal-or-credit-card-">Top Up Account Balance Documentation</a>
     */
    public okhttp3.Call topUpAccountBalanceAsync(String apiKey, String apiSecret, String trx, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = topUpAccountBalanceValidateBeforeCall(apiKey, apiSecret, trx, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
