/*
 * Account API
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateAPISecret400Response;
import org.openapitools.client.model.CreateSecretRequest;
import org.openapitools.client.model.ErrorAPIKeyNotFound;
import org.openapitools.client.model.RetrieveAPISecret404Response;
import org.openapitools.client.model.RetrieveAPISecrets200Response;
import org.openapitools.client.model.RetrieveAPISecrets401Response;
import org.openapitools.client.model.RevokeAPISecret403Response;
import org.openapitools.client.model.SecretInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecretManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecretManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAPISecret
     * @param apiKey The API key to manage secrets for (required)
     * @param createSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Secret created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPISecretCall(String apiKey, CreateSecretRequest createSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSecretRequest;

        // create path and map variables
        String localVarPath = "/accounts/{api_key}/secrets"
            .replace("{" + "api_key" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAPISecretValidateBeforeCall(String apiKey, CreateSecretRequest createSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createAPISecret(Async)");
        }

        // verify the required parameter 'createSecretRequest' is set
        if (createSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'createSecretRequest' when calling createAPISecret(Async)");
        }

        return createAPISecretCall(apiKey, createSecretRequest, _callback);

    }

    /**
     * Create API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param createSecretRequest  (required)
     * @return SecretInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Secret created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public SecretInfo createAPISecret(String apiKey, CreateSecretRequest createSecretRequest) throws ApiException {
        ApiResponse<SecretInfo> localVarResp = createAPISecretWithHttpInfo(apiKey, createSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param createSecretRequest  (required)
     * @return ApiResponse&lt;SecretInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Secret created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretInfo> createAPISecretWithHttpInfo(String apiKey, CreateSecretRequest createSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = createAPISecretValidateBeforeCall(apiKey, createSecretRequest, null);
        Type localVarReturnType = new TypeToken<SecretInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create API Secret (asynchronously)
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param createSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Secret created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. This usually indicates valid data but can also occur when a user has exceeded the allowed number of secrets on their account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPISecretAsync(String apiKey, CreateSecretRequest createSecretRequest, final ApiCallback<SecretInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAPISecretValidateBeforeCall(apiKey, createSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<SecretInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAPISecret
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API secret response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPISecretCall(String apiKey, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{api_key}/secrets/{secret_id}"
            .replace("{" + "api_key" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "secret_id" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAPISecretValidateBeforeCall(String apiKey, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling retrieveAPISecret(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling retrieveAPISecret(Async)");
        }

        return retrieveAPISecretCall(apiKey, secretId, _callback);

    }

    /**
     * Retrieve one API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @return SecretInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API secret response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public SecretInfo retrieveAPISecret(String apiKey, String secretId) throws ApiException {
        ApiResponse<SecretInfo> localVarResp = retrieveAPISecretWithHttpInfo(apiKey, secretId);
        return localVarResp.getData();
    }

    /**
     * Retrieve one API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @return ApiResponse&lt;SecretInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API secret response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretInfo> retrieveAPISecretWithHttpInfo(String apiKey, String secretId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAPISecretValidateBeforeCall(apiKey, secretId, null);
        Type localVarReturnType = new TypeToken<SecretInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve one API Secret (asynchronously)
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API secret response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPISecretAsync(String apiKey, String secretId, final ApiCallback<SecretInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAPISecretValidateBeforeCall(apiKey, secretId, _callback);
        Type localVarReturnType = new TypeToken<SecretInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAPISecrets
     * @param apiKey The API key to manage secrets for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of your current API secrets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPISecretsCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{api_key}/secrets"
            .replace("{" + "api_key" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAPISecretsValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling retrieveAPISecrets(Async)");
        }

        return retrieveAPISecretsCall(apiKey, _callback);

    }

    /**
     * Retrieve API Secrets
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @return RetrieveAPISecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of your current API secrets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveAPISecrets200Response retrieveAPISecrets(String apiKey) throws ApiException {
        ApiResponse<RetrieveAPISecrets200Response> localVarResp = retrieveAPISecretsWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve API Secrets
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @return ApiResponse&lt;RetrieveAPISecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of your current API secrets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAPISecrets200Response> retrieveAPISecretsWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = retrieveAPISecretsValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<RetrieveAPISecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve API Secrets (asynchronously)
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of your current API secrets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPISecretsAsync(String apiKey, final ApiCallback<RetrieveAPISecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAPISecretsValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAPISecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeAPISecret
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Revoked secret response (without body content) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation forbidden by permissions or because this is the only API secret and you are required to have at least one. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAPISecretCall(String apiKey, String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{api_key}/secrets/{secret_id}"
            .replace("{" + "api_key" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "secret_id" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAPISecretValidateBeforeCall(String apiKey, String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling revokeAPISecret(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling revokeAPISecret(Async)");
        }

        return revokeAPISecretCall(apiKey, secretId, _callback);

    }

    /**
     * Revoke an API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Revoked secret response (without body content) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation forbidden by permissions or because this is the only API secret and you are required to have at least one. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public void revokeAPISecret(String apiKey, String secretId) throws ApiException {
        revokeAPISecretWithHttpInfo(apiKey, secretId);
    }

    /**
     * Revoke an API Secret
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Revoked secret response (without body content) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation forbidden by permissions or because this is the only API secret and you are required to have at least one. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeAPISecretWithHttpInfo(String apiKey, String secretId) throws ApiException {
        okhttp3.Call localVarCall = revokeAPISecretValidateBeforeCall(apiKey, secretId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke an API Secret (asynchronously)
     * 
     * @param apiKey The API key to manage secrets for (required)
     * @param secretId ID of the API Secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Revoked secret response (without body content) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credentials are missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Operation forbidden by permissions or because this is the only API secret and you are required to have at least one. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAPISecretAsync(String apiKey, String secretId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAPISecretValidateBeforeCall(apiKey, secretId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
