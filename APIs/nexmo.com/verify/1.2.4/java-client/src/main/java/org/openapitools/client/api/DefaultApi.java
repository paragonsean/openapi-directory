/*
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VerifyCheck200Response;
import org.openapitools.client.model.VerifyControl200Response;
import org.openapitools.client.model.VerifyRequestWithPSD2200Response;
import org.openapitools.client.model.VerifySearch200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for verifyCheck
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param code The verification code entered by your user. (required)
     * @param requestId The Verify request to check. This is the &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param ipAddress (This field is no longer used) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCheckCall(String format, String apiKey, String apiSecret, String code, String requestId, String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (apiSecret != null) {
            localVarFormParams.put("api_secret", apiSecret);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (ipAddress != null) {
            localVarFormParams.put("ip_address", ipAddress);
        }

        if (requestId != null) {
            localVarFormParams.put("request_id", requestId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyCheckValidateBeforeCall(String format, String apiKey, String apiSecret, String code, String requestId, String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling verifyCheck(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling verifyCheck(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling verifyCheck(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling verifyCheck(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling verifyCheck(Async)");
        }

        return verifyCheckCall(format, apiKey, apiSecret, code, requestId, ipAddress, _callback);

    }

    /**
     * Verify Check
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification &#x60;code&#x60; that your user supplied, with the corresponding &#x60;request_id&#x60; from the Verify request. 2. Check the &#x60;status&#x60; of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param code The verification code entered by your user. (required)
     * @param requestId The Verify request to check. This is the &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param ipAddress (This field is no longer used) (optional)
     * @return VerifyCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyCheck200Response verifyCheck(String format, String apiKey, String apiSecret, String code, String requestId, String ipAddress) throws ApiException {
        ApiResponse<VerifyCheck200Response> localVarResp = verifyCheckWithHttpInfo(format, apiKey, apiSecret, code, requestId, ipAddress);
        return localVarResp.getData();
    }

    /**
     * Verify Check
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification &#x60;code&#x60; that your user supplied, with the corresponding &#x60;request_id&#x60; from the Verify request. 2. Check the &#x60;status&#x60; of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param code The verification code entered by your user. (required)
     * @param requestId The Verify request to check. This is the &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param ipAddress (This field is no longer used) (optional)
     * @return ApiResponse&lt;VerifyCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyCheck200Response> verifyCheckWithHttpInfo(String format, String apiKey, String apiSecret, String code, String requestId, String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = verifyCheckValidateBeforeCall(format, apiKey, apiSecret, code, requestId, ipAddress, null);
        Type localVarReturnType = new TypeToken<VerifyCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Check (asynchronously)
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification &#x60;code&#x60; that your user supplied, with the corresponding &#x60;request_id&#x60; from the Verify request. 2. Check the &#x60;status&#x60; of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param code The verification code entered by your user. (required)
     * @param requestId The Verify request to check. This is the &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param ipAddress (This field is no longer used) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCheckAsync(String format, String apiKey, String apiSecret, String code, String requestId, String ipAddress, final ApiCallback<VerifyCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyCheckValidateBeforeCall(format, apiKey, apiSecret, code, requestId, ipAddress, _callback);
        Type localVarReturnType = new TypeToken<VerifyCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyControl
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param cmd The possible commands are &#x60;cancel&#x60; to request cancellation of the verification process, or &#x60;trigger_next_event&#x60; to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
     * @param requestId The &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyControlCall(String format, String apiKey, String apiSecret, String cmd, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/control/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (apiSecret != null) {
            localVarFormParams.put("api_secret", apiSecret);
        }

        if (cmd != null) {
            localVarFormParams.put("cmd", cmd);
        }

        if (requestId != null) {
            localVarFormParams.put("request_id", requestId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyControlValidateBeforeCall(String format, String apiKey, String apiSecret, String cmd, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling verifyControl(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling verifyControl(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling verifyControl(Async)");
        }

        // verify the required parameter 'cmd' is set
        if (cmd == null) {
            throw new ApiException("Missing the required parameter 'cmd' when calling verifyControl(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling verifyControl(Async)");
        }

        return verifyControlCall(format, apiKey, apiSecret, cmd, requestId, _callback);

    }

    /**
     * Verify Control
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (&#x60;cmd&#x60;) for what you want to achieve.  2. Check the &#x60;status&#x60; in the response.   *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param cmd The possible commands are &#x60;cancel&#x60; to request cancellation of the verification process, or &#x60;trigger_next_event&#x60; to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
     * @param requestId The &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @return VerifyControl200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyControl200Response verifyControl(String format, String apiKey, String apiSecret, String cmd, String requestId) throws ApiException {
        ApiResponse<VerifyControl200Response> localVarResp = verifyControlWithHttpInfo(format, apiKey, apiSecret, cmd, requestId);
        return localVarResp.getData();
    }

    /**
     * Verify Control
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (&#x60;cmd&#x60;) for what you want to achieve.  2. Check the &#x60;status&#x60; in the response.   *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param cmd The possible commands are &#x60;cancel&#x60; to request cancellation of the verification process, or &#x60;trigger_next_event&#x60; to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
     * @param requestId The &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @return ApiResponse&lt;VerifyControl200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyControl200Response> verifyControlWithHttpInfo(String format, String apiKey, String apiSecret, String cmd, String requestId) throws ApiException {
        okhttp3.Call localVarCall = verifyControlValidateBeforeCall(format, apiKey, apiSecret, cmd, requestId, null);
        Type localVarReturnType = new TypeToken<VerifyControl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Control (asynchronously)
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (&#x60;cmd&#x60;) for what you want to achieve.  2. Check the &#x60;status&#x60; in the response.   *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param cmd The possible commands are &#x60;cancel&#x60; to request cancellation of the verification process, or &#x60;trigger_next_event&#x60; to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place. (required)
     * @param requestId The &#x60;request_id&#x60; you received in the response to the Verify request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyControlAsync(String format, String apiKey, String apiSecret, String cmd, String requestId, final ApiCallback<VerifyControl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyControlValidateBeforeCall(format, apiKey, apiSecret, cmd, requestId, _callback);
        Type localVarReturnType = new TypeToken<VerifyControl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyRequestWithPSD2
     * @param format The response format. (required)
     * @param amount The decimal amount of the payment to be confirmed, in Euros (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param payee An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for &#x60;bg-bg&#x60;, &#x60;ee-et&#x60;, &#x60;ga-ie&#x60;, &#x60;lv-lv&#x60;, &#x60;lt-lt&#x60;, &#x60;mt-mt&#x60;, &#x60;sk-sk&#x60;, &#x60;sk-si&#x60; (optional, default to en-gb)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRequestWithPSD2Call(String format, Float amount, String apiKey, String apiSecret, String number, String payee, Integer codeLength, String country, String lg, Integer nextEventWait, Integer pinExpiry, Integer workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/psd2/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarFormParams.put("amount", amount);
        }

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (apiSecret != null) {
            localVarFormParams.put("api_secret", apiSecret);
        }

        if (codeLength != null) {
            localVarFormParams.put("code_length", codeLength);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (lg != null) {
            localVarFormParams.put("lg", lg);
        }

        if (nextEventWait != null) {
            localVarFormParams.put("next_event_wait", nextEventWait);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (payee != null) {
            localVarFormParams.put("payee", payee);
        }

        if (pinExpiry != null) {
            localVarFormParams.put("pin_expiry", pinExpiry);
        }

        if (workflowId != null) {
            localVarFormParams.put("workflow_id", workflowId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyRequestWithPSD2ValidateBeforeCall(String format, Float amount, String apiKey, String apiSecret, String number, String payee, Integer codeLength, String country, String lg, Integer nextEventWait, Integer pinExpiry, Integer workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling verifyRequestWithPSD2(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling verifyRequestWithPSD2(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling verifyRequestWithPSD2(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling verifyRequestWithPSD2(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling verifyRequestWithPSD2(Async)");
        }

        // verify the required parameter 'payee' is set
        if (payee == null) {
            throw new ApiException("Missing the required parameter 'payee' when calling verifyRequestWithPSD2(Async)");
        }

        return verifyRequestWithPSD2Call(format, amount, apiKey, apiSecret, number, payee, codeLength, country, lg, nextEventWait, pinExpiry, workflowId, _callback);

    }

    /**
     * PSD2 (Payment Services Directive 2) Request
     * Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success). 3. Use the &#x60;request_id&#x60; field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     * @param format The response format. (required)
     * @param amount The decimal amount of the payment to be confirmed, in Euros (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param payee An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for &#x60;bg-bg&#x60;, &#x60;ee-et&#x60;, &#x60;ga-ie&#x60;, &#x60;lv-lv&#x60;, &#x60;lt-lt&#x60;, &#x60;mt-mt&#x60;, &#x60;sk-sk&#x60;, &#x60;sk-si&#x60; (optional, default to en-gb)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @return VerifyRequestWithPSD2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyRequestWithPSD2200Response verifyRequestWithPSD2(String format, Float amount, String apiKey, String apiSecret, String number, String payee, Integer codeLength, String country, String lg, Integer nextEventWait, Integer pinExpiry, Integer workflowId) throws ApiException {
        ApiResponse<VerifyRequestWithPSD2200Response> localVarResp = verifyRequestWithPSD2WithHttpInfo(format, amount, apiKey, apiSecret, number, payee, codeLength, country, lg, nextEventWait, pinExpiry, workflowId);
        return localVarResp.getData();
    }

    /**
     * PSD2 (Payment Services Directive 2) Request
     * Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success). 3. Use the &#x60;request_id&#x60; field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     * @param format The response format. (required)
     * @param amount The decimal amount of the payment to be confirmed, in Euros (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param payee An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for &#x60;bg-bg&#x60;, &#x60;ee-et&#x60;, &#x60;ga-ie&#x60;, &#x60;lv-lv&#x60;, &#x60;lt-lt&#x60;, &#x60;mt-mt&#x60;, &#x60;sk-sk&#x60;, &#x60;sk-si&#x60; (optional, default to en-gb)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @return ApiResponse&lt;VerifyRequestWithPSD2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyRequestWithPSD2200Response> verifyRequestWithPSD2WithHttpInfo(String format, Float amount, String apiKey, String apiSecret, String number, String payee, Integer codeLength, String country, String lg, Integer nextEventWait, Integer pinExpiry, Integer workflowId) throws ApiException {
        okhttp3.Call localVarCall = verifyRequestWithPSD2ValidateBeforeCall(format, amount, apiKey, apiSecret, number, payee, codeLength, country, lg, nextEventWait, pinExpiry, workflowId, null);
        Type localVarReturnType = new TypeToken<VerifyRequestWithPSD2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PSD2 (Payment Services Directive 2) Request (asynchronously)
     * Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success). 3. Use the &#x60;request_id&#x60; field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     * @param format The response format. (required)
     * @param amount The decimal amount of the payment to be confirmed, in Euros (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param payee An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for &#x60;bg-bg&#x60;, &#x60;ee-et&#x60;, &#x60;ga-ie&#x60;, &#x60;lv-lv&#x60;, &#x60;lt-lt&#x60;, &#x60;mt-mt&#x60;, &#x60;sk-sk&#x60;, &#x60;sk-si&#x60; (optional, default to en-gb)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRequestWithPSD2Async(String format, Float amount, String apiKey, String apiSecret, String number, String payee, Integer codeLength, String country, String lg, Integer nextEventWait, Integer pinExpiry, Integer workflowId, final ApiCallback<VerifyRequestWithPSD2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyRequestWithPSD2ValidateBeforeCall(format, amount, apiKey, apiSecret, number, payee, codeLength, country, lg, nextEventWait, pinExpiry, workflowId, _callback);
        Type localVarReturnType = new TypeToken<VerifyRequestWithPSD2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySearch
     * @param format The response format. (required)
     * @param apiKey  (required)
     * @param apiSecret  (required)
     * @param requestId The &#x60;request_id&#x60; you received in the Verify Request Response. Required if &#x60;request_ids&#x60; not provided. (required)
     * @param requestIds More than one &#x60;request_id&#x60;. Each &#x60;request_id&#x60; is a new parameter in the Verify Search request. Required if &#x60;request_id&#x60; not provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySearchCall(String format, String apiKey, String apiSecret, String requestId, List<String> requestIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_secret", apiSecret));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_id", requestId));
        }

        if (requestIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "request_ids", requestIds));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySearchValidateBeforeCall(String format, String apiKey, String apiSecret, String requestId, List<String> requestIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling verifySearch(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling verifySearch(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling verifySearch(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling verifySearch(Async)");
        }

        return verifySearchCall(format, apiKey, apiSecret, requestId, requestIds, _callback);

    }

    /**
     * Verify Search
     * Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the &#x60;request_id&#x60;s of the verification requests you are interested in. 2. Use the &#x60;status&#x60; of each verification request in the &#x60;checks&#x60; array of the response object to determine the outcome.  *Note that this endpoint is available by &#x60;POST&#x60; request as well as &#x60;GET&#x60;.*
     * @param format The response format. (required)
     * @param apiKey  (required)
     * @param apiSecret  (required)
     * @param requestId The &#x60;request_id&#x60; you received in the Verify Request Response. Required if &#x60;request_ids&#x60; not provided. (required)
     * @param requestIds More than one &#x60;request_id&#x60;. Each &#x60;request_id&#x60; is a new parameter in the Verify Search request. Required if &#x60;request_id&#x60; not provided. (optional)
     * @return VerifySearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifySearch200Response verifySearch(String format, String apiKey, String apiSecret, String requestId, List<String> requestIds) throws ApiException {
        ApiResponse<VerifySearch200Response> localVarResp = verifySearchWithHttpInfo(format, apiKey, apiSecret, requestId, requestIds);
        return localVarResp.getData();
    }

    /**
     * Verify Search
     * Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the &#x60;request_id&#x60;s of the verification requests you are interested in. 2. Use the &#x60;status&#x60; of each verification request in the &#x60;checks&#x60; array of the response object to determine the outcome.  *Note that this endpoint is available by &#x60;POST&#x60; request as well as &#x60;GET&#x60;.*
     * @param format The response format. (required)
     * @param apiKey  (required)
     * @param apiSecret  (required)
     * @param requestId The &#x60;request_id&#x60; you received in the Verify Request Response. Required if &#x60;request_ids&#x60; not provided. (required)
     * @param requestIds More than one &#x60;request_id&#x60;. Each &#x60;request_id&#x60; is a new parameter in the Verify Search request. Required if &#x60;request_id&#x60; not provided. (optional)
     * @return ApiResponse&lt;VerifySearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifySearch200Response> verifySearchWithHttpInfo(String format, String apiKey, String apiSecret, String requestId, List<String> requestIds) throws ApiException {
        okhttp3.Call localVarCall = verifySearchValidateBeforeCall(format, apiKey, apiSecret, requestId, requestIds, null);
        Type localVarReturnType = new TypeToken<VerifySearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Search (asynchronously)
     * Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the &#x60;request_id&#x60;s of the verification requests you are interested in. 2. Use the &#x60;status&#x60; of each verification request in the &#x60;checks&#x60; array of the response object to determine the outcome.  *Note that this endpoint is available by &#x60;POST&#x60; request as well as &#x60;GET&#x60;.*
     * @param format The response format. (required)
     * @param apiKey  (required)
     * @param apiSecret  (required)
     * @param requestId The &#x60;request_id&#x60; you received in the Verify Request Response. Required if &#x60;request_ids&#x60; not provided. (required)
     * @param requestIds More than one &#x60;request_id&#x60;. Each &#x60;request_id&#x60; is a new parameter in the Verify Search request. Required if &#x60;request_id&#x60; not provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySearchAsync(String format, String apiKey, String apiSecret, String requestId, List<String> requestIds, final ApiCallback<VerifySearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySearchValidateBeforeCall(format, apiKey, apiSecret, requestId, requestIds, _callback);
        Type localVarReturnType = new TypeToken<VerifySearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
