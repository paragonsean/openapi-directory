/*
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VerifyRequestWithPSD2200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for verifyRequest
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param brand An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: \\\&quot;Your &#x60;Acme Inc&#x60; PIN is ...\\\&quot; (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: &lt;https://developer.nexmo.com/verify/guides/verify-languages&gt; (optional, default to en-us)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinCode A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. &lt;b&gt;This feature is not enabled by default&lt;/b&gt; - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status &#x60;20&#x60; will be returned. (optional)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param senderId An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply. (optional, default to VERIFY)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRequestCall(String format, String apiKey, String apiSecret, String brand, String number, Integer codeLength, String country, String lg, Integer nextEventWait, String pinCode, Integer pinExpiry, String senderId, Integer workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (apiSecret != null) {
            localVarFormParams.put("api_secret", apiSecret);
        }

        if (brand != null) {
            localVarFormParams.put("brand", brand);
        }

        if (codeLength != null) {
            localVarFormParams.put("code_length", codeLength);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (lg != null) {
            localVarFormParams.put("lg", lg);
        }

        if (nextEventWait != null) {
            localVarFormParams.put("next_event_wait", nextEventWait);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (pinCode != null) {
            localVarFormParams.put("pin_code", pinCode);
        }

        if (pinExpiry != null) {
            localVarFormParams.put("pin_expiry", pinExpiry);
        }

        if (senderId != null) {
            localVarFormParams.put("sender_id", senderId);
        }

        if (workflowId != null) {
            localVarFormParams.put("workflow_id", workflowId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyRequestValidateBeforeCall(String format, String apiKey, String apiSecret, String brand, String number, Integer codeLength, String country, String lg, Integer nextEventWait, String pinCode, Integer pinExpiry, String senderId, Integer workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling verifyRequest(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling verifyRequest(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling verifyRequest(Async)");
        }

        // verify the required parameter 'brand' is set
        if (brand == null) {
            throw new ApiException("Missing the required parameter 'brand' when calling verifyRequest(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling verifyRequest(Async)");
        }

        return verifyRequestCall(format, apiKey, apiSecret, brand, number, codeLength, country, lg, nextEventWait, pinCode, pinExpiry, senderId, workflowId, _callback);

    }

    /**
     * Request a Verification
     * Use Verify request to generate and send a PIN to your user:  1. Create a request to send a verification code to your user.  2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success).  3. Use the &#x60;request_id&#x60; field in the response for the Verify check.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param brand An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: \\\&quot;Your &#x60;Acme Inc&#x60; PIN is ...\\\&quot; (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: &lt;https://developer.nexmo.com/verify/guides/verify-languages&gt; (optional, default to en-us)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinCode A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. &lt;b&gt;This feature is not enabled by default&lt;/b&gt; - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status &#x60;20&#x60; will be returned. (optional)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param senderId An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply. (optional, default to VERIFY)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @return VerifyRequestWithPSD2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyRequestWithPSD2200Response verifyRequest(String format, String apiKey, String apiSecret, String brand, String number, Integer codeLength, String country, String lg, Integer nextEventWait, String pinCode, Integer pinExpiry, String senderId, Integer workflowId) throws ApiException {
        ApiResponse<VerifyRequestWithPSD2200Response> localVarResp = verifyRequestWithHttpInfo(format, apiKey, apiSecret, brand, number, codeLength, country, lg, nextEventWait, pinCode, pinExpiry, senderId, workflowId);
        return localVarResp.getData();
    }

    /**
     * Request a Verification
     * Use Verify request to generate and send a PIN to your user:  1. Create a request to send a verification code to your user.  2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success).  3. Use the &#x60;request_id&#x60; field in the response for the Verify check.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param brand An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: \\\&quot;Your &#x60;Acme Inc&#x60; PIN is ...\\\&quot; (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: &lt;https://developer.nexmo.com/verify/guides/verify-languages&gt; (optional, default to en-us)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinCode A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. &lt;b&gt;This feature is not enabled by default&lt;/b&gt; - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status &#x60;20&#x60; will be returned. (optional)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param senderId An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply. (optional, default to VERIFY)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @return ApiResponse&lt;VerifyRequestWithPSD2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyRequestWithPSD2200Response> verifyRequestWithHttpInfo(String format, String apiKey, String apiSecret, String brand, String number, Integer codeLength, String country, String lg, Integer nextEventWait, String pinCode, Integer pinExpiry, String senderId, Integer workflowId) throws ApiException {
        okhttp3.Call localVarCall = verifyRequestValidateBeforeCall(format, apiKey, apiSecret, brand, number, codeLength, country, lg, nextEventWait, pinCode, pinExpiry, senderId, workflowId, null);
        Type localVarReturnType = new TypeToken<VerifyRequestWithPSD2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a Verification (asynchronously)
     * Use Verify request to generate and send a PIN to your user:  1. Create a request to send a verification code to your user.  2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success).  3. Use the &#x60;request_id&#x60; field in the response for the Verify check.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     * @param format The response format. (required)
     * @param apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com) (required)
     * @param brand An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: \\\&quot;Your &#x60;Acme Inc&#x60; PIN is ...\\\&quot; (required)
     * @param number The mobile or landline phone number to verify. Unless you are setting &#x60;country&#x60; explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format. (required)
     * @param codeLength The length of the verification code. (optional, default to 4)
     * @param country If you do not provide &#x60;number&#x60; in international format or you are not sure if &#x60;number&#x60; is correctly formatted, specify the two-character country code in &#x60;country&#x60;. Verify will then format the number for you. (optional)
     * @param lg By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the &#x60;number&#x60;. For example, the text message or TTS message for a &#x60;33*&#x60; number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: &lt;https://developer.nexmo.com/verify/guides/verify-languages&gt; (optional, default to en-us)
     * @param nextEventWait Specifies the wait time in seconds between attempts to deliver the verification code. (optional, default to 300)
     * @param pinCode A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. &lt;b&gt;This feature is not enabled by default&lt;/b&gt; - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status &#x60;20&#x60; will be returned. (optional)
     * @param pinExpiry How long the generated verification code is valid for, in seconds. When you specify both &#x60;pin_expiry&#x60; and &#x60;next_event_wait&#x60; then &#x60;pin_expiry&#x60; must be an integer multiple of &#x60;next_event_wait&#x60; otherwise &#x60;pin_expiry&#x60; is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings). (optional, default to 300)
     * @param senderId An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply. (optional, default to VERIFY)
     * @param workflowId Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events). (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRequestAsync(String format, String apiKey, String apiSecret, String brand, String number, Integer codeLength, String country, String lg, Integer nextEventWait, String pinCode, Integer pinExpiry, String senderId, Integer workflowId, final ApiCallback<VerifyRequestWithPSD2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyRequestValidateBeforeCall(format, apiKey, apiSecret, brand, number, codeLength, country, lg, nextEventWait, pinCode, pinExpiry, senderId, workflowId, _callback);
        Type localVarReturnType = new TypeToken<VerifyRequestWithPSD2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
