/*
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.VerifyCheck200Response;
import org.openapitools.client.model.VerifyControl200Response;
import org.openapitools.client.model.VerifyRequestWithPSD2200Response;
import org.openapitools.client.model.VerifySearch200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Verify Check
     *
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification &#x60;code&#x60; that your user supplied, with the corresponding &#x60;request_id&#x60; from the Verify request. 2. Check the &#x60;status&#x60; of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyCheckTest() throws ApiException {
        String format = null;
        String apiKey = null;
        String apiSecret = null;
        String code = null;
        String requestId = null;
        String ipAddress = null;
        VerifyCheck200Response response = api.verifyCheck(format, apiKey, apiSecret, code, requestId, ipAddress);
        // TODO: test validations
    }

    /**
     * Verify Control
     *
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (&#x60;cmd&#x60;) for what you want to achieve.  2. Check the &#x60;status&#x60; in the response.   *Note that this endpoint is available by &#x60;GET&#x60; request as well as &#x60;POST&#x60;.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyControlTest() throws ApiException {
        String format = null;
        String apiKey = null;
        String apiSecret = null;
        String cmd = null;
        String requestId = null;
        VerifyControl200Response response = api.verifyControl(format, apiKey, apiSecret, cmd, requestId);
        // TODO: test validations
    }

    /**
     * PSD2 (Payment Services Directive 2) Request
     *
     * Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the &#x60;status&#x60; field in the response to ensure that your request was successful (zero is success). 3. Use the &#x60;request_id&#x60; field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyRequestWithPSD2Test() throws ApiException {
        String format = null;
        Float amount = null;
        String apiKey = null;
        String apiSecret = null;
        String number = null;
        String payee = null;
        Integer codeLength = null;
        String country = null;
        String lg = null;
        Integer nextEventWait = null;
        Integer pinExpiry = null;
        Integer workflowId = null;
        VerifyRequestWithPSD2200Response response = api.verifyRequestWithPSD2(format, amount, apiKey, apiSecret, number, payee, codeLength, country, lg, nextEventWait, pinExpiry, workflowId);
        // TODO: test validations
    }

    /**
     * Verify Search
     *
     * Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the &#x60;request_id&#x60;s of the verification requests you are interested in. 2. Use the &#x60;status&#x60; of each verification request in the &#x60;checks&#x60; array of the response object to determine the outcome.  *Note that this endpoint is available by &#x60;POST&#x60; request as well as &#x60;GET&#x60;.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifySearchTest() throws ApiException {
        String format = null;
        String apiKey = null;
        String apiSecret = null;
        String requestId = null;
        List<String> requestIds = null;
        VerifySearch200Response response = api.verifySearch(format, apiKey, apiSecret, requestId, requestIds);
        // TODO: test validations
    }

}
