/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckResponse model module.
 * @module model/CheckResponse
 * @version 1.2.4
 */
class CheckResponse {
    /**
     * Constructs a new <code>CheckResponse</code>.
     * Success
     * @alias module:model/CheckResponse
     */
    constructor() { 
        
        CheckResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckResponse} obj Optional instance to populate.
     * @return {module:model/CheckResponse} The populated <code>CheckResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckResponse();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('estimated_price_messages_sent')) {
                obj['estimated_price_messages_sent'] = ApiClient.convertToType(data['estimated_price_messages_sent'], 'String');
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['estimated_price_messages_sent'] && !(typeof data['estimated_price_messages_sent'] === 'string' || data['estimated_price_messages_sent'] instanceof String)) {
            throw new Error("Expected the field `estimated_price_messages_sent` to be a primitive type in the JSON string but got " + data['estimated_price_messages_sent']);
        }
        // ensure the json data is a string
        if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
            throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The currency code.
 * @member {String} currency
 */
CheckResponse.prototype['currency'] = undefined;

/**
 * This field may not be present, depending on your pricing model. The value indicates the cost (in EUR) of the calls made and messages sent for the verification process. This value may be updated during and shortly after the request completes because user input events can overlap with message/call events. When this field is present, the total cost of the verification is the sum of this field and the `price` field. 
 * @member {String} estimated_price_messages_sent
 */
CheckResponse.prototype['estimated_price_messages_sent'] = undefined;

/**
 * The ID of the verification event, such as an SMS or TTS call.
 * @member {String} event_id
 */
CheckResponse.prototype['event_id'] = undefined;

/**
 * The cost incurred for this request.
 * @member {String} price
 */
CheckResponse.prototype['price'] = undefined;

/**
 * The `request_id` that you received in the response to the Verify request and used in the Verify check request.
 * @member {String} request_id
 */
CheckResponse.prototype['request_id'] = undefined;

/**
 * A value of `0` indicates that your user entered the correct code. If it is non-zero, check the `error_text`.
 * @member {String} status
 */
CheckResponse.prototype['status'] = undefined;






export default CheckResponse;

