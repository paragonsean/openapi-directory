/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SearchErrorResponse from './SearchErrorResponse';
import SearchResponse from './SearchResponse';
import SearchResponseChecksInner from './SearchResponseChecksInner';
import SearchResponseEventsInner from './SearchResponseEventsInner';

/**
 * The VerifySearch200Response model module.
 * @module model/VerifySearch200Response
 * @version 1.2.4
 */
class VerifySearch200Response {
    /**
     * Constructs a new <code>VerifySearch200Response</code>.
     * @alias module:model/VerifySearch200Response
     * @param {(module:model/SearchErrorResponse|module:model/SearchResponse)} instance The actual instance to initialize VerifySearch200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SearchResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SearchResponse.validateJSON(instance); // throw an exception if no match
                // create SearchResponse from JS object
                this.actualInstance = SearchResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SearchResponse
            errorMessages.push("Failed to construct SearchResponse: " + err)
        }

        try {
            if (typeof instance === "SearchErrorResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SearchErrorResponse.validateJSON(instance); // throw an exception if no match
                // create SearchErrorResponse from JS object
                this.actualInstance = SearchErrorResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SearchErrorResponse
            errorMessages.push("Failed to construct SearchErrorResponse: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `VerifySearch200Response` with oneOf schemas SearchErrorResponse, SearchResponse. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `VerifySearch200Response` with oneOf schemas SearchErrorResponse, SearchResponse. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>VerifySearch200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifySearch200Response} obj Optional instance to populate.
     * @return {module:model/VerifySearch200Response} The populated <code>VerifySearch200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new VerifySearch200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>SearchErrorResponse</code>, <code>SearchResponse</code>.
     * @return {(module:model/SearchErrorResponse|module:model/SearchResponse)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SearchErrorResponse</code>, <code>SearchResponse</code>.
     * @param {(module:model/SearchErrorResponse|module:model/SearchResponse)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = VerifySearch200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of VerifySearch200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/VerifySearch200Response} An instance of VerifySearch200Response.
     */
    static fromJSON = function(json_string){
        return VerifySearch200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The Vonage account ID the request was for.
 * @member {String} account_id
 */
VerifySearch200Response.prototype['account_id'] = undefined;

/**
 * The list of checks made for this verification and their outcomes.
 * @member {Array.<module:model/SearchResponseChecksInner>} checks
 */
VerifySearch200Response.prototype['checks'] = undefined;

/**
 * The currency code.
 * @member {String} currency
 */
VerifySearch200Response.prototype['currency'] = undefined;

/**
 * The date and time the verification request was completed. This response parameter is in the following format YYYY-MM-DD HH:MM:SS.
 * @member {String} date_finalized
 */
VerifySearch200Response.prototype['date_finalized'] = undefined;

/**
 * The date and time the verification request was submitted, in the following format YYYY-MM-DD HH:MM:SS.
 * @member {String} date_submitted
 */
VerifySearch200Response.prototype['date_submitted'] = undefined;

/**
 * This field may not be present, depending on your pricing model. The value indicates the cost (in EUR) of the calls made and messages sent for the verification process. This value may be updated during and shortly after the request completes because user input events can overlap with message/call events. When this field is present, the total cost of the verification is the sum of this field and the `price` field. 
 * @member {String} estimated_price_messages_sent
 */
VerifySearch200Response.prototype['estimated_price_messages_sent'] = undefined;

/**
 * The events that have taken place to verify this number, and their unique identifiers.
 * @member {Array.<module:model/SearchResponseEventsInner>} events
 */
VerifySearch200Response.prototype['events'] = undefined;

/**
 * The time the first verification attempt was made, in the following format YYYY-MM-DD HH:MM:SS.
 * @member {String} first_event_date
 */
VerifySearch200Response.prototype['first_event_date'] = undefined;

/**
 * The time the last verification attempt was made, in the following format YYYY-MM-DD HH:MM:SS.
 * @member {String} last_event_date
 */
VerifySearch200Response.prototype['last_event_date'] = undefined;

/**
 * The phone number this verification request was used for.
 * @member {String} number
 */
VerifySearch200Response.prototype['number'] = undefined;

/**
 * The cost incurred for this verification request.
 * @member {String} price
 */
VerifySearch200Response.prototype['price'] = undefined;

/**
 * The `request_id` that you received in the response to the Verify request and used in the Verify search request. May be empty in an error situation.
 * @member {String} request_id
 */
VerifySearch200Response.prototype['request_id'] = undefined;

/**
 * The `sender_id` you provided in the Verify request.
 * @member {String} sender_id
 * @default 'verify'
 */
VerifySearch200Response.prototype['sender_id'] = 'verify';

/**
 * Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 101 | You supplied an invalid `request_id`, or the data is not available. Note that for recently-completed requests, there can be a delay of up to 1 minute before the results are available in search. 
 * @member {module:model/VerifySearch200Response.StatusEnum} status
 */
VerifySearch200Response.prototype['status'] = undefined;

/**
 * If `status` is not `SUCCESS`, this message explains the issue encountered.
 * @member {String} error_text
 */
VerifySearch200Response.prototype['error_text'] = undefined;


VerifySearch200Response.OneOf = ["SearchErrorResponse", "SearchResponse"];

export default VerifySearch200Response;

