/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchResponseChecksInner model module.
 * @module model/SearchResponseChecksInner
 * @version 1.2.4
 */
class SearchResponseChecksInner {
    /**
     * Constructs a new <code>SearchResponseChecksInner</code>.
     * @alias module:model/SearchResponseChecksInner
     */
    constructor() { 
        
        SearchResponseChecksInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchResponseChecksInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResponseChecksInner} obj Optional instance to populate.
     * @return {module:model/SearchResponseChecksInner} The populated <code>SearchResponseChecksInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResponseChecksInner();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('date_received')) {
                obj['date_received'] = ApiClient.convertToType(data['date_received'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResponseChecksInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResponseChecksInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['date_received'] && !(typeof data['date_received'] === 'string' || data['date_received'] instanceof String)) {
            throw new Error("Expected the field `date_received` to be a primitive type in the JSON string but got " + data['date_received']);
        }
        // ensure the json data is a string
        if (data['ip_address'] && !(typeof data['ip_address'] === 'string' || data['ip_address'] instanceof String)) {
            throw new Error("Expected the field `ip_address` to be a primitive type in the JSON string but got " + data['ip_address']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The code supplied with this check request
 * @member {String} code
 */
SearchResponseChecksInner.prototype['code'] = undefined;

/**
 * The date and time this check was received (in the format YYYY-MM-DD HH:MM:SS)
 * @member {String} date_received
 */
SearchResponseChecksInner.prototype['date_received'] = undefined;

/**
 * The IP address, if available (this field is no longer used).
 * @member {String} ip_address
 */
SearchResponseChecksInner.prototype['ip_address'] = undefined;

/**
 * @member {module:model/SearchResponseChecksInner.StatusEnum} status
 */
SearchResponseChecksInner.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SearchResponseChecksInner['StatusEnum'] = {

    /**
     * value: "VALID"
     * @const
     */
    "VALID": "VALID",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID"
};



export default SearchResponseChecksInner;

