/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchErrorResponse model module.
 * @module model/SearchErrorResponse
 * @version 1.2.4
 */
class SearchErrorResponse {
    /**
     * Constructs a new <code>SearchErrorResponse</code>.
     * Error
     * @alias module:model/SearchErrorResponse
     */
    constructor() { 
        
        SearchErrorResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchErrorResponse} obj Optional instance to populate.
     * @return {module:model/SearchErrorResponse} The populated <code>SearchErrorResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchErrorResponse();

            if (data.hasOwnProperty('error_text')) {
                obj['error_text'] = ApiClient.convertToType(data['error_text'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchErrorResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchErrorResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error_text'] && !(typeof data['error_text'] === 'string' || data['error_text'] instanceof String)) {
            throw new Error("Expected the field `error_text` to be a primitive type in the JSON string but got " + data['error_text']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * If `status` is not `SUCCESS`, this message explains the issue encountered.
 * @member {String} error_text
 */
SearchErrorResponse.prototype['error_text'] = undefined;

/**
 * The `request_id` that you received in the response to the Verify request and used in the Verify search request. May be empty in an error situation.
 * @member {String} request_id
 */
SearchErrorResponse.prototype['request_id'] = undefined;

/**
 * Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 101 | You supplied an invalid `request_id`, or the data is not available. Note that for recently-completed requests, there can be a delay of up to 1 minute before the results are available in search. 
 * @member {module:model/SearchErrorResponse.StatusEnum} status
 */
SearchErrorResponse.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SearchErrorResponse['StatusEnum'] = {

    /**
     * value: "IN PROGRESS"
     * @const
     */
    "IN PROGRESS": "IN PROGRESS",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "101"
     * @const
     */
    "101": "101"
};



export default SearchErrorResponse;

