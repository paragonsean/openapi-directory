/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ControlErrorResponse from './ControlErrorResponse';
import ControlResponse from './ControlResponse';

/**
 * The VerifyControl200Response model module.
 * @module model/VerifyControl200Response
 * @version 1.2.4
 */
class VerifyControl200Response {
    /**
     * Constructs a new <code>VerifyControl200Response</code>.
     * @alias module:model/VerifyControl200Response
     * @param {(module:model/ControlErrorResponse|module:model/ControlResponse)} instance The actual instance to initialize VerifyControl200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ControlResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ControlResponse.validateJSON(instance); // throw an exception if no match
                // create ControlResponse from JS object
                this.actualInstance = ControlResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ControlResponse
            errorMessages.push("Failed to construct ControlResponse: " + err)
        }

        try {
            if (typeof instance === "ControlErrorResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ControlErrorResponse.validateJSON(instance); // throw an exception if no match
                // create ControlErrorResponse from JS object
                this.actualInstance = ControlErrorResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ControlErrorResponse
            errorMessages.push("Failed to construct ControlErrorResponse: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `VerifyControl200Response` with oneOf schemas ControlErrorResponse, ControlResponse. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `VerifyControl200Response` with oneOf schemas ControlErrorResponse, ControlResponse. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>VerifyControl200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyControl200Response} obj Optional instance to populate.
     * @return {module:model/VerifyControl200Response} The populated <code>VerifyControl200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new VerifyControl200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>ControlErrorResponse</code>, <code>ControlResponse</code>.
     * @return {(module:model/ControlErrorResponse|module:model/ControlResponse)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ControlErrorResponse</code>, <code>ControlResponse</code>.
     * @param {(module:model/ControlErrorResponse|module:model/ControlResponse)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = VerifyControl200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of VerifyControl200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/VerifyControl200Response} An instance of VerifyControl200Response.
     */
    static fromJSON = function(json_string){
        return VerifyControl200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The `cmd` you sent in the request.
 * @member {module:model/VerifyControl200Response.CommandEnum} command
 */
VerifyControl200Response.prototype['command'] = undefined;

/**
 * Code | Text | Description -- | -- | -- 0 | Success | The request was successfully accepted by Vonage. 1 | Throttled | You are trying to send more than the maximum of 30 requests per second. 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing. 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request. 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled. 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform. 6 | The Vonage platform was unable to process this message for the following reason: `$reason` | The request could not be routed. 8 | The api_key you supplied is for an account that has been barred from submitting messages. | 9 | Partner quota exceeded | Your account does not have sufficient credit to process this request. 19 | For `cancel`: Either you have not waited at least 30 secs after sending a Verify request before cancelling or Verify has made too many attempts to deliver the verification code for this request and you must now wait for the process to complete. For `trigger_next_event`: All attempts to deliver the verification code for this request have completed and there are no remaining events to advance to. 
 * @member {module:model/VerifyControl200Response.StatusEnum} status
 */
VerifyControl200Response.prototype['status'] = undefined;

/**
 * If the `status` is non-zero, this explains the error encountered.
 * @member {String} error_text
 */
VerifyControl200Response.prototype['error_text'] = undefined;


VerifyControl200Response.OneOf = ["ControlErrorResponse", "ControlResponse"];

export default VerifyControl200Response;

