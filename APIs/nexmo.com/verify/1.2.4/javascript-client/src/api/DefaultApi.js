/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VerifyCheck200Response from '../model/VerifyCheck200Response';
import VerifyControl200Response from '../model/VerifyControl200Response';
import VerifyRequestWithPSD2200Response from '../model/VerifyRequestWithPSD2200Response';
import VerifySearch200Response from '../model/VerifySearch200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.2.4
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the verifyCheck operation.
     * @callback module:api/DefaultApi~verifyCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyCheck200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Check
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.  1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request. 2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.  *Note that this endpoint is available by `GET` request as well as `POST`.*
     * @param {module:model/String} format The response format.
     * @param {String} apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} code The verification code entered by your user.
     * @param {String} requestId The Verify request to check. This is the `request_id` you received in the response to the Verify request.
     * @param {Object} opts Optional parameters
     * @param {String} [ipAddress] (This field is no longer used)
     * @param {module:api/DefaultApi~verifyCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyCheck200Response}
     */
    verifyCheck(format, apiKey, apiSecret, code, requestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling verifyCheck");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling verifyCheck");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling verifyCheck");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling verifyCheck");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling verifyCheck");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'code': code,
        'ip_address': opts['ipAddress'],
        'request_id': requestId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = VerifyCheck200Response;
      return this.apiClient.callApi(
        '/check/{format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyControl operation.
     * @callback module:api/DefaultApi~verifyControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyControl200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Control
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:   1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.  2. Check the `status` in the response.   *Note that this endpoint is available by `GET` request as well as `POST`.*
     * @param {module:model/String} format The response format.
     * @param {String} apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
     * @param {module:model/String} cmd The possible commands are `cancel` to request cancellation of the verification process, or `trigger_next_event` to advance  to the next verification event (if any). Cancellation is only possible 30 seconds after the start of the verification request and before the second event (either TTS or SMS) has taken place.
     * @param {String} requestId The `request_id` you received in the response to the Verify request.
     * @param {module:api/DefaultApi~verifyControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyControl200Response}
     */
    verifyControl(format, apiKey, apiSecret, cmd, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling verifyControl");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling verifyControl");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling verifyControl");
      }
      // verify the required parameter 'cmd' is set
      if (cmd === undefined || cmd === null) {
        throw new Error("Missing the required parameter 'cmd' when calling verifyControl");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling verifyControl");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'cmd': cmd,
        'request_id': requestId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = VerifyControl200Response;
      return this.apiClient.callApi(
        '/control/{format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyRequestWithPSD2 operation.
     * @callback module:api/DefaultApi~verifyRequestWithPSD2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyRequestWithPSD2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PSD2 (Payment Services Directive 2) Request
     * Use Verify request to generate and send a PIN to your user to authorize a payment: 1. Create a request to send a verification code to your user. 2. Check the `status` field in the response to ensure that your request was successful (zero is success). 3. Use the `request_id` field in the response for the Verify check. (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     * @param {module:model/String} format The response format.
     * @param {Number} amount The decimal amount of the payment to be confirmed, in Euros
     * @param {String} apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} number The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     * @param {String} payee An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [codeLength = 4)] The length of the verification code.
     * @param {String} [country] If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
     * @param {module:model/String} [lg = 'en-gb')] By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used. *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
     * @param {Number} [nextEventWait = 300)] Specifies the wait time in seconds between attempts to deliver the verification code.
     * @param {Number} [pinExpiry = 300)] How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
     * @param {module:model/Number} [workflowId = 1)] Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
     * @param {module:api/DefaultApi~verifyRequestWithPSD2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyRequestWithPSD2200Response}
     */
    verifyRequestWithPSD2(format, amount, apiKey, apiSecret, number, payee, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling verifyRequestWithPSD2");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling verifyRequestWithPSD2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling verifyRequestWithPSD2");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling verifyRequestWithPSD2");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling verifyRequestWithPSD2");
      }
      // verify the required parameter 'payee' is set
      if (payee === undefined || payee === null) {
        throw new Error("Missing the required parameter 'payee' when calling verifyRequestWithPSD2");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'amount': amount,
        'api_key': apiKey,
        'api_secret': apiSecret,
        'code_length': opts['codeLength'],
        'country': opts['country'],
        'lg': opts['lg'],
        'next_event_wait': opts['nextEventWait'],
        'number': number,
        'payee': payee,
        'pin_expiry': opts['pinExpiry'],
        'workflow_id': opts['workflowId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyRequestWithPSD2200Response;
      return this.apiClient.callApi(
        '/psd2/{format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySearch operation.
     * @callback module:api/DefaultApi~verifySearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifySearch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Search
     * Use Verify search to check the status of past or current verification requests:  1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in. 2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.  *Note that this endpoint is available by `POST` request as well as `GET`.*
     * @param {module:model/String} format The response format.
     * @param {String} apiKey 
     * @param {String} apiSecret 
     * @param {String} requestId The `request_id` you received in the Verify Request Response. Required if `request_ids` not provided.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestIds] More than one `request_id`. Each `request_id` is a new parameter in the Verify Search request. Required if `request_id` not provided.
     * @param {module:api/DefaultApi~verifySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifySearch200Response}
     */
    verifySearch(format, apiKey, apiSecret, requestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling verifySearch");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling verifySearch");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling verifySearch");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling verifySearch");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'request_id': requestId,
        'request_ids': this.apiClient.buildCollectionParam(opts['requestIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = VerifySearch200Response;
      return this.apiClient.callApi(
        '/search/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
