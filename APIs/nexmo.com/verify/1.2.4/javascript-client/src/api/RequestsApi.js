/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VerifyRequestWithPSD2200Response from '../model/VerifyRequestWithPSD2200Response';

/**
* Requests service.
* @module api/RequestsApi
* @version 1.2.4
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the verifyRequest operation.
     * @callback module:api/RequestsApi~verifyRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyRequestWithPSD2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a Verification
     * Use Verify request to generate and send a PIN to your user:  1. Create a request to send a verification code to your user.  2. Check the `status` field in the response to ensure that your request was successful (zero is success).  3. Use the `request_id` field in the response for the Verify check.  *Note that this endpoint is available by `GET` request as well as `POST`.*
     * @param {module:model/String} format The response format.
     * @param {String} apiKey You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} apiSecret You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
     * @param {String} brand An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: \\\"Your `Acme Inc` PIN is ...\\\"
     * @param {String} number The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [codeLength = 4)] The length of the verification code.
     * @param {String} [country] If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
     * @param {module:model/String} [lg = 'en-us')] By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: <https://developer.nexmo.com/verify/guides/verify-languages>
     * @param {Number} [nextEventWait = 300)] Specifies the wait time in seconds between attempts to deliver the verification code.
     * @param {String} [pinCode] A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. <b>This feature is not enabled by default</b> - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status `20` will be returned.
     * @param {Number} [pinExpiry = 300)] How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
     * @param {String} [senderId = 'VERIFY')] An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply.
     * @param {module:model/Number} [workflowId = 1)] Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
     * @param {module:api/RequestsApi~verifyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyRequestWithPSD2200Response}
     */
    verifyRequest(format, apiKey, apiSecret, brand, number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling verifyRequest");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling verifyRequest");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling verifyRequest");
      }
      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling verifyRequest");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling verifyRequest");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'api_secret': apiSecret,
        'brand': brand,
        'code_length': opts['codeLength'],
        'country': opts['country'],
        'lg': opts['lg'],
        'next_event_wait': opts['nextEventWait'],
        'number': number,
        'pin_code': opts['pinCode'],
        'pin_expiry': opts['pinExpiry'],
        'sender_id': opts['senderId'],
        'workflow_id': opts['workflowId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/xml'];
      let returnType = VerifyRequestWithPSD2200Response;
      return this.apiClient.callApi(
        '/{format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
