/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckResponse::OAICheckResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckResponse::OAICheckResponse() {
    this->initializeModel();
}

OAICheckResponse::~OAICheckResponse() {}

void OAICheckResponse::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_estimated_price_messages_sent_isSet = false;
    m_estimated_price_messages_sent_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICheckResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckResponse::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_estimated_price_messages_sent_isValid = ::OpenAPI::fromJsonValue(m_estimated_price_messages_sent, json[QString("estimated_price_messages_sent")]);
    m_estimated_price_messages_sent_isSet = !json[QString("estimated_price_messages_sent")].isNull() && m_estimated_price_messages_sent_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICheckResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_estimated_price_messages_sent_isSet) {
        obj.insert(QString("estimated_price_messages_sent"), ::OpenAPI::toJsonValue(m_estimated_price_messages_sent));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICheckResponse::getCurrency() const {
    return m_currency;
}
void OAICheckResponse::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICheckResponse::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICheckResponse::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICheckResponse::getEstimatedPriceMessagesSent() const {
    return m_estimated_price_messages_sent;
}
void OAICheckResponse::setEstimatedPriceMessagesSent(const QString &estimated_price_messages_sent) {
    m_estimated_price_messages_sent = estimated_price_messages_sent;
    m_estimated_price_messages_sent_isSet = true;
}

bool OAICheckResponse::is_estimated_price_messages_sent_Set() const{
    return m_estimated_price_messages_sent_isSet;
}

bool OAICheckResponse::is_estimated_price_messages_sent_Valid() const{
    return m_estimated_price_messages_sent_isValid;
}

QString OAICheckResponse::getEventId() const {
    return m_event_id;
}
void OAICheckResponse::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAICheckResponse::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAICheckResponse::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAICheckResponse::getPrice() const {
    return m_price;
}
void OAICheckResponse::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICheckResponse::is_price_Set() const{
    return m_price_isSet;
}

bool OAICheckResponse::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICheckResponse::getRequestId() const {
    return m_request_id;
}
void OAICheckResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICheckResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICheckResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICheckResponse::getStatus() const {
    return m_status;
}
void OAICheckResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICheckResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICheckResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICheckResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_price_messages_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
