/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkUnblock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkUnblock::OAINetworkUnblock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkUnblock::OAINetworkUnblock() {
    this->initializeModel();
}

OAINetworkUnblock::~OAINetworkUnblock() {}

void OAINetworkUnblock::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_unblock_duration_isSet = false;
    m_unblock_duration_isValid = false;
}

void OAINetworkUnblock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkUnblock::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_unblock_duration_isValid = ::OpenAPI::fromJsonValue(m_unblock_duration, json[QString("unblock_duration")]);
    m_unblock_duration_isSet = !json[QString("unblock_duration")].isNull() && m_unblock_duration_isValid;
}

QString OAINetworkUnblock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkUnblock::asJsonObject() const {
    QJsonObject obj;
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_unblock_duration_isSet) {
        obj.insert(QString("unblock_duration"), ::OpenAPI::toJsonValue(m_unblock_duration));
    }
    return obj;
}

QString OAINetworkUnblock::getNetwork() const {
    return m_network;
}
void OAINetworkUnblock::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkUnblock::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkUnblock::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAINetworkUnblock::getUnblockDuration() const {
    return m_unblock_duration;
}
void OAINetworkUnblock::setUnblockDuration(const qint32 &unblock_duration) {
    m_unblock_duration = unblock_duration;
    m_unblock_duration_isSet = true;
}

bool OAINetworkUnblock::is_unblock_duration_Set() const{
    return m_unblock_duration_isSet;
}

bool OAINetworkUnblock::is_unblock_duration_Valid() const{
    return m_unblock_duration_isValid;
}

bool OAINetworkUnblock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unblock_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkUnblock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
