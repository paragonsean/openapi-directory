/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse_checks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse_checks_inner::OAISearchResponse_checks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse_checks_inner::OAISearchResponse_checks_inner() {
    this->initializeModel();
}

OAISearchResponse_checks_inner::~OAISearchResponse_checks_inner() {}

void OAISearchResponse_checks_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_received_isSet = false;
    m_date_received_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISearchResponse_checks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse_checks_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_date_received_isValid = ::OpenAPI::fromJsonValue(m_date_received, json[QString("date_received")]);
    m_date_received_isSet = !json[QString("date_received")].isNull() && m_date_received_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISearchResponse_checks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse_checks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_received_isSet) {
        obj.insert(QString("date_received"), ::OpenAPI::toJsonValue(m_date_received));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISearchResponse_checks_inner::getCode() const {
    return m_code;
}
void OAISearchResponse_checks_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISearchResponse_checks_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAISearchResponse_checks_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAISearchResponse_checks_inner::getDateReceived() const {
    return m_date_received;
}
void OAISearchResponse_checks_inner::setDateReceived(const QString &date_received) {
    m_date_received = date_received;
    m_date_received_isSet = true;
}

bool OAISearchResponse_checks_inner::is_date_received_Set() const{
    return m_date_received_isSet;
}

bool OAISearchResponse_checks_inner::is_date_received_Valid() const{
    return m_date_received_isValid;
}

QString OAISearchResponse_checks_inner::getIpAddress() const {
    return m_ip_address;
}
void OAISearchResponse_checks_inner::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAISearchResponse_checks_inner::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAISearchResponse_checks_inner::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAISearchResponse_checks_inner::getStatus() const {
    return m_status;
}
void OAISearchResponse_checks_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchResponse_checks_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchResponse_checks_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISearchResponse_checks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse_checks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
