/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlResponse::OAIControlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlResponse::OAIControlResponse() {
    this->initializeModel();
}

OAIControlResponse::~OAIControlResponse() {}

void OAIControlResponse::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIControlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlResponse::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIControlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIControlResponse::getCommand() const {
    return m_command;
}
void OAIControlResponse::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIControlResponse::is_command_Set() const{
    return m_command_isSet;
}

bool OAIControlResponse::is_command_Valid() const{
    return m_command_isValid;
}

QString OAIControlResponse::getStatus() const {
    return m_status;
}
void OAIControlResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIControlResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIControlResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIControlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
