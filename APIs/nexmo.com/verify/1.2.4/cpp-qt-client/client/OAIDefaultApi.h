/**
 * Verify API
 * The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:  * Protecting against spam, by preventing spammers from creating multiple accounts * Monitoring suspicious activity, by forcing an account user to verify ownership of a number * Ensuring that you can reach your users at any time because you have their correct phone number More information is available at <https://developer.nexmo.com/verify>
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVerifyCheck_200_response.h"
#include "OAIVerifyControl_200_response.h"
#include "OAIVerifyRequestWithPSD2_200_response.h"
#include "OAIVerifySearch_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  code QString [required]
    * @param[in]  request_id QString [required]
    * @param[in]  ip_address QString [optional]
    */
    virtual void verifyCheck(const QString &format, const QString &api_key, const QString &api_secret, const QString &code, const QString &request_id, const ::OpenAPI::OptionalParam<QString> &ip_address = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  cmd QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void verifyControl(const QString &format, const QString &api_key, const QString &api_secret, const QString &cmd, const QString &request_id);

    /**
    * @param[in]  format QString [required]
    * @param[in]  amount float [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  number QString [required]
    * @param[in]  payee QString [required]
    * @param[in]  code_length qint32 [optional]
    * @param[in]  country QString [optional]
    * @param[in]  lg QString [optional]
    * @param[in]  next_event_wait qint32 [optional]
    * @param[in]  pin_expiry qint32 [optional]
    * @param[in]  workflow_id qint32 [optional]
    */
    virtual void verifyRequestWithPSD2(const QString &format, const float &amount, const QString &api_key, const QString &api_secret, const QString &number, const QString &payee, const ::OpenAPI::OptionalParam<qint32> &code_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &next_event_wait = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pin_expiry = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &workflow_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  request_id QString [required]
    * @param[in]  request_ids QList<QString> [optional]
    */
    virtual void verifySearch(const QString &format, const QString &api_key, const QString &api_secret, const QString &request_id, const ::OpenAPI::OptionalParam<QList<QString>> &request_ids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void verifyCheckCallback(OAIHttpRequestWorker *worker);
    void verifyControlCallback(OAIHttpRequestWorker *worker);
    void verifyRequestWithPSD2Callback(OAIHttpRequestWorker *worker);
    void verifySearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void verifyCheckSignal(OAIVerifyCheck_200_response summary);
    void verifyControlSignal(OAIVerifyControl_200_response summary);
    void verifyRequestWithPSD2Signal(OAIVerifyRequestWithPSD2_200_response summary);
    void verifySearchSignal(OAIVerifySearch_200_response summary);


    void verifyCheckSignalFull(OAIHttpRequestWorker *worker, OAIVerifyCheck_200_response summary);
    void verifyControlSignalFull(OAIHttpRequestWorker *worker, OAIVerifyControl_200_response summary);
    void verifyRequestWithPSD2SignalFull(OAIHttpRequestWorker *worker, OAIVerifyRequestWithPSD2_200_response summary);
    void verifySearchSignalFull(OAIHttpRequestWorker *worker, OAIVerifySearch_200_response summary);

    Q_DECL_DEPRECATED_X("Use verifyCheckSignalError() instead")
    void verifyCheckSignalE(OAIVerifyCheck_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyCheckSignalError(OAIVerifyCheck_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyControlSignalError() instead")
    void verifyControlSignalE(OAIVerifyControl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyControlSignalError(OAIVerifyControl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyRequestWithPSD2SignalError() instead")
    void verifyRequestWithPSD2SignalE(OAIVerifyRequestWithPSD2_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyRequestWithPSD2SignalError(OAIVerifyRequestWithPSD2_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySearchSignalError() instead")
    void verifySearchSignalE(OAIVerifySearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySearchSignalError(OAIVerifySearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use verifyCheckSignalErrorFull() instead")
    void verifyCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyControlSignalErrorFull() instead")
    void verifyControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyRequestWithPSD2SignalErrorFull() instead")
    void verifyRequestWithPSD2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyRequestWithPSD2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySearchSignalErrorFull() instead")
    void verifySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
