# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchResponseChecksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, date_received: str=None, ip_address: str=None, status: str=None):
        """SearchResponseChecksInner - a model defined in OpenAPI

        :param code: The code of this SearchResponseChecksInner.
        :param date_received: The date_received of this SearchResponseChecksInner.
        :param ip_address: The ip_address of this SearchResponseChecksInner.
        :param status: The status of this SearchResponseChecksInner.
        """
        self.openapi_types = {
            'code': str,
            'date_received': str,
            'ip_address': str,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'date_received': 'date_received',
            'ip_address': 'ip_address',
            'status': 'status'
        }

        self._code = code
        self._date_received = date_received
        self._ip_address = ip_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponseChecksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchResponse_checks_inner of this SearchResponseChecksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this SearchResponseChecksInner.

        The code supplied with this check request

        :return: The code of this SearchResponseChecksInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SearchResponseChecksInner.

        The code supplied with this check request

        :param code: The code of this SearchResponseChecksInner.
        :type code: str
        """

        self._code = code

    @property
    def date_received(self):
        """Gets the date_received of this SearchResponseChecksInner.

        The date and time this check was received (in the format YYYY-MM-DD HH:MM:SS)

        :return: The date_received of this SearchResponseChecksInner.
        :rtype: str
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this SearchResponseChecksInner.

        The date and time this check was received (in the format YYYY-MM-DD HH:MM:SS)

        :param date_received: The date_received of this SearchResponseChecksInner.
        :type date_received: str
        """

        self._date_received = date_received

    @property
    def ip_address(self):
        """Gets the ip_address of this SearchResponseChecksInner.

        The IP address, if available (this field is no longer used).

        :return: The ip_address of this SearchResponseChecksInner.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SearchResponseChecksInner.

        The IP address, if available (this field is no longer used).

        :param ip_address: The ip_address of this SearchResponseChecksInner.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def status(self):
        """Gets the status of this SearchResponseChecksInner.


        :return: The status of this SearchResponseChecksInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchResponseChecksInner.


        :param status: The status of this SearchResponseChecksInner.
        :type status: str
        """
        allowed_values = ["VALID", "INVALID"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
