# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, status: str=None):
        """RequestResponse - a model defined in OpenAPI

        :param request_id: The request_id of this RequestResponse.
        :param status: The status of this RequestResponse.
        """
        self.openapi_types = {
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'request_id': 'request_id',
            'status': 'status'
        }

        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The requestResponse of this RequestResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this RequestResponse.

        The unique ID of the Verify request. You need this `request_id` for the Verify check.

        :return: The request_id of this RequestResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RequestResponse.

        The unique ID of the Verify request. You need this `request_id` for the Verify check.

        :param request_id: The request_id of this RequestResponse.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 32:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `32`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this RequestResponse.

        Indicates the outcome of the request; zero is success

        :return: The status of this RequestResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RequestResponse.

        Indicates the outcome of the request; zero is success

        :param status: The status of this RequestResponse.
        :type status: str
        """

        self._status = status
