# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request_error_response import RequestErrorResponse
from openapi_server.models.request_response import RequestResponse
from openapi_server import util


class VerifyRequestWithPSD2200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, status: str=None, error_text: str=None, network: str=None):
        """VerifyRequestWithPSD2200Response - a model defined in OpenAPI

        :param request_id: The request_id of this VerifyRequestWithPSD2200Response.
        :param status: The status of this VerifyRequestWithPSD2200Response.
        :param error_text: The error_text of this VerifyRequestWithPSD2200Response.
        :param network: The network of this VerifyRequestWithPSD2200Response.
        """
        self.openapi_types = {
            'request_id': str,
            'status': str,
            'error_text': str,
            'network': str
        }

        self.attribute_map = {
            'request_id': 'request_id',
            'status': 'status',
            'error_text': 'error_text',
            'network': 'network'
        }

        self._request_id = request_id
        self._status = status
        self._error_text = error_text
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyRequestWithPSD2200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verifyRequestWithPSD2_200_response of this VerifyRequestWithPSD2200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this VerifyRequestWithPSD2200Response.

        The unique ID of the Verify request. This may be blank in an error situation.

        :return: The request_id of this VerifyRequestWithPSD2200Response.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this VerifyRequestWithPSD2200Response.

        The unique ID of the Verify request. This may be blank in an error situation.

        :param request_id: The request_id of this VerifyRequestWithPSD2200Response.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 32:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `32`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this VerifyRequestWithPSD2200Response.

        Code | Text | Description -- | -- | -- 0 | Success | The request was successfully accepted by Vonage. 1 | Throttled | You are trying to send more than the maximum of 30 requests per second. 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing. 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request. 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled. 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform. 6 | The Vonage platform was unable to process this message for the following reason: `$reason` | The request could not be routed. 7 | The number you are trying to verify is blacklisted for verification. | Returns a `network` property but no `request_id` will be present in the response. 8 | The api_key you supplied is for an account that has been barred from submitting messages. | 9 | Partner quota exceeded | Your account does not have sufficient credit to process this request. 10 | Concurrent verifications to the same number are not allowed. | This will return a `request_id`. 15 | The destination number is not in a supported network | The request has been rejected. Find out more about this error in the [Knowledge Base](https://help.nexmo.com/hc/en-us/articles/360018406532-Verify-On-demand-Service-to-High-Risk-Countries) 20 | This account does not support the parameter: pin_code. | Only certain accounts have the ability to set the `pin_code`. Please contact your account manager for more information. 29 | Non-Permitted Destination | Your Vonage account is still in demo mode. While in demo mode you must add target numbers to the approved list for your account. Add funds to your account to remove this limitation. 

        :return: The status of this VerifyRequestWithPSD2200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VerifyRequestWithPSD2200Response.

        Code | Text | Description -- | -- | -- 0 | Success | The request was successfully accepted by Vonage. 1 | Throttled | You are trying to send more than the maximum of 30 requests per second. 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing. 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request. 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled. 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform. 6 | The Vonage platform was unable to process this message for the following reason: `$reason` | The request could not be routed. 7 | The number you are trying to verify is blacklisted for verification. | Returns a `network` property but no `request_id` will be present in the response. 8 | The api_key you supplied is for an account that has been barred from submitting messages. | 9 | Partner quota exceeded | Your account does not have sufficient credit to process this request. 10 | Concurrent verifications to the same number are not allowed. | This will return a `request_id`. 15 | The destination number is not in a supported network | The request has been rejected. Find out more about this error in the [Knowledge Base](https://help.nexmo.com/hc/en-us/articles/360018406532-Verify-On-demand-Service-to-High-Risk-Countries) 20 | This account does not support the parameter: pin_code. | Only certain accounts have the ability to set the `pin_code`. Please contact your account manager for more information. 29 | Non-Permitted Destination | Your Vonage account is still in demo mode. While in demo mode you must add target numbers to the approved list for your account. Add funds to your account to remove this limitation. 

        :param status: The status of this VerifyRequestWithPSD2200Response.
        :type status: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "29"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error_text(self):
        """Gets the error_text of this VerifyRequestWithPSD2200Response.

        If `status` is non-zero, this explains the error encountered.

        :return: The error_text of this VerifyRequestWithPSD2200Response.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this VerifyRequestWithPSD2200Response.

        If `status` is non-zero, this explains the error encountered.

        :param error_text: The error_text of this VerifyRequestWithPSD2200Response.
        :type error_text: str
        """

        self._error_text = error_text

    @property
    def network(self):
        """Gets the network of this VerifyRequestWithPSD2200Response.

        The Network ID of the blocking network, if relevant to the error.

        :return: The network of this VerifyRequestWithPSD2200Response.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VerifyRequestWithPSD2200Response.

        The Network ID of the blocking network, if relevant to the error.

        :param network: The network of this VerifyRequestWithPSD2200Response.
        :type network: str
        """

        self._network = network
