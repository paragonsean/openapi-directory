# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_text: str=None, request_id: str=None, status: str=None):
        """SearchErrorResponse - a model defined in OpenAPI

        :param error_text: The error_text of this SearchErrorResponse.
        :param request_id: The request_id of this SearchErrorResponse.
        :param status: The status of this SearchErrorResponse.
        """
        self.openapi_types = {
            'error_text': str,
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'error_text': 'error_text',
            'request_id': 'request_id',
            'status': 'status'
        }

        self._error_text = error_text
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchErrorResponse of this SearchErrorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_text(self):
        """Gets the error_text of this SearchErrorResponse.

        If `status` is not `SUCCESS`, this message explains the issue encountered.

        :return: The error_text of this SearchErrorResponse.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this SearchErrorResponse.

        If `status` is not `SUCCESS`, this message explains the issue encountered.

        :param error_text: The error_text of this SearchErrorResponse.
        :type error_text: str
        """

        self._error_text = error_text

    @property
    def request_id(self):
        """Gets the request_id of this SearchErrorResponse.

        The `request_id` that you received in the response to the Verify request and used in the Verify search request. May be empty in an error situation.

        :return: The request_id of this SearchErrorResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SearchErrorResponse.

        The `request_id` that you received in the response to the Verify request and used in the Verify search request. May be empty in an error situation.

        :param request_id: The request_id of this SearchErrorResponse.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this SearchErrorResponse.

        Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 101 | You supplied an invalid `request_id`, or the data is not available. Note that for recently-completed requests, there can be a delay of up to 1 minute before the results are available in search. 

        :return: The status of this SearchErrorResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchErrorResponse.

        Code | Description -- | -- IN PROGRESS | The search is still in progress. SUCCESS | Your user entered a correct verification code. FAILED | Your user entered an incorrect code more than three times. EXPIRED | Your user did not enter a code before the `pin_expiry` time elapsed. CANCELLED | The verification process was cancelled by a Verify control request. 101 | You supplied an invalid `request_id`, or the data is not available. Note that for recently-completed requests, there can be a delay of up to 1 minute before the results are available in search. 

        :param status: The status of this SearchErrorResponse.
        :type status: str
        """
        allowed_values = ["IN PROGRESS", "FAILED", "EXPIRED", "CANCELLED", "101"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
