# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, estimated_price_messages_sent: str=None, event_id: str=None, price: str=None, request_id: str=None, status: str=None):
        """CheckResponse - a model defined in OpenAPI

        :param currency: The currency of this CheckResponse.
        :param estimated_price_messages_sent: The estimated_price_messages_sent of this CheckResponse.
        :param event_id: The event_id of this CheckResponse.
        :param price: The price of this CheckResponse.
        :param request_id: The request_id of this CheckResponse.
        :param status: The status of this CheckResponse.
        """
        self.openapi_types = {
            'currency': str,
            'estimated_price_messages_sent': str,
            'event_id': str,
            'price': str,
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'estimated_price_messages_sent': 'estimated_price_messages_sent',
            'event_id': 'event_id',
            'price': 'price',
            'request_id': 'request_id',
            'status': 'status'
        }

        self._currency = currency
        self._estimated_price_messages_sent = estimated_price_messages_sent
        self._event_id = event_id
        self._price = price
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checkResponse of this CheckResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this CheckResponse.

        The currency code.

        :return: The currency of this CheckResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckResponse.

        The currency code.

        :param currency: The currency of this CheckResponse.
        :type currency: str
        """

        self._currency = currency

    @property
    def estimated_price_messages_sent(self):
        """Gets the estimated_price_messages_sent of this CheckResponse.

        This field may not be present, depending on your pricing model. The value indicates the cost (in EUR) of the calls made and messages sent for the verification process. This value may be updated during and shortly after the request completes because user input events can overlap with message/call events. When this field is present, the total cost of the verification is the sum of this field and the `price` field. 

        :return: The estimated_price_messages_sent of this CheckResponse.
        :rtype: str
        """
        return self._estimated_price_messages_sent

    @estimated_price_messages_sent.setter
    def estimated_price_messages_sent(self, estimated_price_messages_sent):
        """Sets the estimated_price_messages_sent of this CheckResponse.

        This field may not be present, depending on your pricing model. The value indicates the cost (in EUR) of the calls made and messages sent for the verification process. This value may be updated during and shortly after the request completes because user input events can overlap with message/call events. When this field is present, the total cost of the verification is the sum of this field and the `price` field. 

        :param estimated_price_messages_sent: The estimated_price_messages_sent of this CheckResponse.
        :type estimated_price_messages_sent: str
        """

        self._estimated_price_messages_sent = estimated_price_messages_sent

    @property
    def event_id(self):
        """Gets the event_id of this CheckResponse.

        The ID of the verification event, such as an SMS or TTS call.

        :return: The event_id of this CheckResponse.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CheckResponse.

        The ID of the verification event, such as an SMS or TTS call.

        :param event_id: The event_id of this CheckResponse.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def price(self):
        """Gets the price of this CheckResponse.

        The cost incurred for this request.

        :return: The price of this CheckResponse.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CheckResponse.

        The cost incurred for this request.

        :param price: The price of this CheckResponse.
        :type price: str
        """

        self._price = price

    @property
    def request_id(self):
        """Gets the request_id of this CheckResponse.

        The `request_id` that you received in the response to the Verify request and used in the Verify check request.

        :return: The request_id of this CheckResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CheckResponse.

        The `request_id` that you received in the response to the Verify request and used in the Verify check request.

        :param request_id: The request_id of this CheckResponse.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this CheckResponse.

        A value of `0` indicates that your user entered the correct code. If it is non-zero, check the `error_text`.

        :return: The status of this CheckResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckResponse.

        A value of `0` indicates that your user entered the correct code. If it is non-zero, check the `error_text`.

        :param status: The status of this CheckResponse.
        :type status: str
        """

        self._status = status
