/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.AsrResponseGetReport;
import org.openapitools.client.model.AsrStatus;
import org.openapitools.client.model.ConversationsResponseGetReport;
import org.openapitools.client.model.Direction;
import org.openapitools.client.model.InAppVoiceResponseGetReport;
import org.openapitools.client.model.Links;
import org.openapitools.client.model.MessagesResponseGetReport;
import org.openapitools.client.model.NumberInsightResponseGetReport;
import org.openapitools.client.model.ProductAsr;
import org.openapitools.client.model.RequestStatus;
import org.openapitools.client.model.SmsResponseGetReport;
import org.openapitools.client.model.VerifyApiResponseGetReport;
import org.openapitools.client.model.VoiceCallResponseGetReport;
import org.openapitools.client.model.WebsocketCallResponseGetReport;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetReport200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetReport200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetReport200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetReport200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SmsResponseGetReport> adapterSmsResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(SmsResponseGetReport.class));
            final TypeAdapter<VoiceCallResponseGetReport> adapterVoiceCallResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(VoiceCallResponseGetReport.class));
            final TypeAdapter<InAppVoiceResponseGetReport> adapterInAppVoiceResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(InAppVoiceResponseGetReport.class));
            final TypeAdapter<WebsocketCallResponseGetReport> adapterWebsocketCallResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(WebsocketCallResponseGetReport.class));
            final TypeAdapter<VerifyApiResponseGetReport> adapterVerifyApiResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(VerifyApiResponseGetReport.class));
            final TypeAdapter<NumberInsightResponseGetReport> adapterNumberInsightResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(NumberInsightResponseGetReport.class));
            final TypeAdapter<MessagesResponseGetReport> adapterMessagesResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(MessagesResponseGetReport.class));
            final TypeAdapter<ConversationsResponseGetReport> adapterConversationsResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(ConversationsResponseGetReport.class));
            final TypeAdapter<AsrResponseGetReport> adapterAsrResponseGetReport = gson.getDelegateAdapter(this, TypeToken.get(AsrResponseGetReport.class));

            return (TypeAdapter<T>) new TypeAdapter<GetReport200Response>() {
                @Override
                public void write(JsonWriter out, GetReport200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SmsResponseGetReport`
                    if (value.getActualInstance() instanceof SmsResponseGetReport) {
                        JsonElement element = adapterSmsResponseGetReport.toJsonTree((SmsResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VoiceCallResponseGetReport`
                    if (value.getActualInstance() instanceof VoiceCallResponseGetReport) {
                        JsonElement element = adapterVoiceCallResponseGetReport.toJsonTree((VoiceCallResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InAppVoiceResponseGetReport`
                    if (value.getActualInstance() instanceof InAppVoiceResponseGetReport) {
                        JsonElement element = adapterInAppVoiceResponseGetReport.toJsonTree((InAppVoiceResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WebsocketCallResponseGetReport`
                    if (value.getActualInstance() instanceof WebsocketCallResponseGetReport) {
                        JsonElement element = adapterWebsocketCallResponseGetReport.toJsonTree((WebsocketCallResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VerifyApiResponseGetReport`
                    if (value.getActualInstance() instanceof VerifyApiResponseGetReport) {
                        JsonElement element = adapterVerifyApiResponseGetReport.toJsonTree((VerifyApiResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NumberInsightResponseGetReport`
                    if (value.getActualInstance() instanceof NumberInsightResponseGetReport) {
                        JsonElement element = adapterNumberInsightResponseGetReport.toJsonTree((NumberInsightResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessagesResponseGetReport`
                    if (value.getActualInstance() instanceof MessagesResponseGetReport) {
                        JsonElement element = adapterMessagesResponseGetReport.toJsonTree((MessagesResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConversationsResponseGetReport`
                    if (value.getActualInstance() instanceof ConversationsResponseGetReport) {
                        JsonElement element = adapterConversationsResponseGetReport.toJsonTree((ConversationsResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AsrResponseGetReport`
                    if (value.getActualInstance() instanceof AsrResponseGetReport) {
                        JsonElement element = adapterAsrResponseGetReport.toJsonTree((AsrResponseGetReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport");
                }

                @Override
                public GetReport200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SmsResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SmsResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterSmsResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SmsResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SmsResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SmsResponseGetReport'", e);
                    }
                    // deserialize VoiceCallResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VoiceCallResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterVoiceCallResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VoiceCallResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VoiceCallResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VoiceCallResponseGetReport'", e);
                    }
                    // deserialize InAppVoiceResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InAppVoiceResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterInAppVoiceResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InAppVoiceResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InAppVoiceResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InAppVoiceResponseGetReport'", e);
                    }
                    // deserialize WebsocketCallResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WebsocketCallResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWebsocketCallResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WebsocketCallResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WebsocketCallResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WebsocketCallResponseGetReport'", e);
                    }
                    // deserialize VerifyApiResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VerifyApiResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterVerifyApiResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VerifyApiResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VerifyApiResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VerifyApiResponseGetReport'", e);
                    }
                    // deserialize NumberInsightResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NumberInsightResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterNumberInsightResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NumberInsightResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NumberInsightResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NumberInsightResponseGetReport'", e);
                    }
                    // deserialize MessagesResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessagesResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessagesResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessagesResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessagesResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessagesResponseGetReport'", e);
                    }
                    // deserialize ConversationsResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConversationsResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterConversationsResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConversationsResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConversationsResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConversationsResponseGetReport'", e);
                    }
                    // deserialize AsrResponseGetReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AsrResponseGetReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterAsrResponseGetReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AsrResponseGetReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AsrResponseGetReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AsrResponseGetReport'", e);
                    }

                    if (match == 1) {
                        GetReport200Response ret = new GetReport200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetReport200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetReport200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetReport200Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SmsResponseGetReport", SmsResponseGetReport.class);
        schemas.put("VoiceCallResponseGetReport", VoiceCallResponseGetReport.class);
        schemas.put("InAppVoiceResponseGetReport", InAppVoiceResponseGetReport.class);
        schemas.put("WebsocketCallResponseGetReport", WebsocketCallResponseGetReport.class);
        schemas.put("VerifyApiResponseGetReport", VerifyApiResponseGetReport.class);
        schemas.put("NumberInsightResponseGetReport", NumberInsightResponseGetReport.class);
        schemas.put("MessagesResponseGetReport", MessagesResponseGetReport.class);
        schemas.put("ConversationsResponseGetReport", ConversationsResponseGetReport.class);
        schemas.put("AsrResponseGetReport", AsrResponseGetReport.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetReport200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SmsResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VoiceCallResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InAppVoiceResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WebsocketCallResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VerifyApiResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NumberInsightResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessagesResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConversationsResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AsrResponseGetReport) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport");
    }

    /**
     * Get the actual instance, which can be the following:
     * AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport
     *
     * @return The actual instance (AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SmsResponseGetReport`. If the actual instance is not `SmsResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SmsResponseGetReport`
     * @throws ClassCastException if the instance is not `SmsResponseGetReport`
     */
    public SmsResponseGetReport getSmsResponseGetReport() throws ClassCastException {
        return (SmsResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VoiceCallResponseGetReport`. If the actual instance is not `VoiceCallResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VoiceCallResponseGetReport`
     * @throws ClassCastException if the instance is not `VoiceCallResponseGetReport`
     */
    public VoiceCallResponseGetReport getVoiceCallResponseGetReport() throws ClassCastException {
        return (VoiceCallResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InAppVoiceResponseGetReport`. If the actual instance is not `InAppVoiceResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppVoiceResponseGetReport`
     * @throws ClassCastException if the instance is not `InAppVoiceResponseGetReport`
     */
    public InAppVoiceResponseGetReport getInAppVoiceResponseGetReport() throws ClassCastException {
        return (InAppVoiceResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WebsocketCallResponseGetReport`. If the actual instance is not `WebsocketCallResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WebsocketCallResponseGetReport`
     * @throws ClassCastException if the instance is not `WebsocketCallResponseGetReport`
     */
    public WebsocketCallResponseGetReport getWebsocketCallResponseGetReport() throws ClassCastException {
        return (WebsocketCallResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VerifyApiResponseGetReport`. If the actual instance is not `VerifyApiResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VerifyApiResponseGetReport`
     * @throws ClassCastException if the instance is not `VerifyApiResponseGetReport`
     */
    public VerifyApiResponseGetReport getVerifyApiResponseGetReport() throws ClassCastException {
        return (VerifyApiResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NumberInsightResponseGetReport`. If the actual instance is not `NumberInsightResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NumberInsightResponseGetReport`
     * @throws ClassCastException if the instance is not `NumberInsightResponseGetReport`
     */
    public NumberInsightResponseGetReport getNumberInsightResponseGetReport() throws ClassCastException {
        return (NumberInsightResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessagesResponseGetReport`. If the actual instance is not `MessagesResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessagesResponseGetReport`
     * @throws ClassCastException if the instance is not `MessagesResponseGetReport`
     */
    public MessagesResponseGetReport getMessagesResponseGetReport() throws ClassCastException {
        return (MessagesResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConversationsResponseGetReport`. If the actual instance is not `ConversationsResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConversationsResponseGetReport`
     * @throws ClassCastException if the instance is not `ConversationsResponseGetReport`
     */
    public ConversationsResponseGetReport getConversationsResponseGetReport() throws ClassCastException {
        return (ConversationsResponseGetReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AsrResponseGetReport`. If the actual instance is not `AsrResponseGetReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AsrResponseGetReport`
     * @throws ClassCastException if the instance is not `AsrResponseGetReport`
     */
    public AsrResponseGetReport getAsrResponseGetReport() throws ClassCastException {
        return (AsrResponseGetReport)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetReport200Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SmsResponseGetReport
        try {
            SmsResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SmsResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VoiceCallResponseGetReport
        try {
            VoiceCallResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VoiceCallResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InAppVoiceResponseGetReport
        try {
            InAppVoiceResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InAppVoiceResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WebsocketCallResponseGetReport
        try {
            WebsocketCallResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WebsocketCallResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VerifyApiResponseGetReport
        try {
            VerifyApiResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VerifyApiResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NumberInsightResponseGetReport
        try {
            NumberInsightResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NumberInsightResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessagesResponseGetReport
        try {
            MessagesResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessagesResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConversationsResponseGetReport
        try {
            ConversationsResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConversationsResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AsrResponseGetReport
        try {
            AsrResponseGetReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AsrResponseGetReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetReport200Response with oneOf schemas: AsrResponseGetReport, ConversationsResponseGetReport, InAppVoiceResponseGetReport, MessagesResponseGetReport, NumberInsightResponseGetReport, SmsResponseGetReport, VerifyApiResponseGetReport, VoiceCallResponseGetReport, WebsocketCallResponseGetReport. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetReport200Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetReport200Response
     * @throws IOException if the JSON string is invalid with respect to GetReport200Response
     */
    public static GetReport200Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetReport200Response.class);
    }

    /**
     * Convert an instance of GetReport200Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

