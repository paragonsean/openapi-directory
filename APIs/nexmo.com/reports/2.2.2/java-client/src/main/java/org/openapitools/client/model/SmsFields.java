/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Direction;
import org.openapitools.client.model.ProductSms;
import org.openapitools.client.model.SmsStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SMS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmsFields {
  public static final String SERIALIZED_NAME_ACCOUNT_REF = "account_ref";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_REF)
  private String accountRef;

  public static final String SERIALIZED_NAME_CLIENT_REF = "client_ref";
  @SerializedName(SERIALIZED_NAME_CLIENT_REF)
  private String clientRef;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private Direction direction;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_INCLUDE_MESSAGE = "include_message";
  @SerializedName(SERIALIZED_NAME_INCLUDE_MESSAGE)
  private Boolean includeMessage = false;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProductSms product;

  public static final String SERIALIZED_NAME_SHOW_CONCATENATED = "show_concatenated";
  @SerializedName(SERIALIZED_NAME_SHOW_CONCATENATED)
  private Boolean showConcatenated = false;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SmsStatus status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public SmsFields() {
  }

  public SmsFields accountRef(String accountRef) {
    this.accountRef = accountRef;
    return this;
  }

  /**
   * Search for messages with this &#x60;account_ref&#x60;.
   * @return accountRef
   */
  @javax.annotation.Nullable
  public String getAccountRef() {
    return accountRef;
  }

  public void setAccountRef(String accountRef) {
    this.accountRef = accountRef;
  }


  public SmsFields clientRef(String clientRef) {
    this.clientRef = clientRef;
    return this;
  }

  /**
   * Search for messages with this &#x60;client_ref&#x60;.
   * @return clientRef
   */
  @javax.annotation.Nullable
  public String getClientRef() {
    return clientRef;
  }

  public void setClientRef(String clientRef) {
    this.clientRef = clientRef;
  }


  public SmsFields direction(Direction direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nonnull
  public Direction getDirection() {
    return direction;
  }

  public void setDirection(Direction direction) {
    this.direction = direction;
  }


  public SmsFields from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Request from this number.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public SmsFields includeMessage(Boolean includeMessage) {
    this.includeMessage = includeMessage;
    return this;
  }

  /**
   * Include the text of messages in the report.
   * @return includeMessage
   */
  @javax.annotation.Nullable
  public Boolean getIncludeMessage() {
    return includeMessage;
  }

  public void setIncludeMessage(Boolean includeMessage) {
    this.includeMessage = includeMessage;
  }


  public SmsFields network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Network used to send the request.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public SmsFields product(ProductSms product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nonnull
  public ProductSms getProduct() {
    return product;
  }

  public void setProduct(ProductSms product) {
    this.product = product;
  }


  public SmsFields showConcatenated(Boolean showConcatenated) {
    this.showConcatenated = showConcatenated;
    return this;
  }

  /**
   * Indicates whether the SMS was split up into multiple parts (due to its length).
   * @return showConcatenated
   */
  @javax.annotation.Nullable
  public Boolean getShowConcatenated() {
    return showConcatenated;
  }

  public void setShowConcatenated(Boolean showConcatenated) {
    this.showConcatenated = showConcatenated;
  }


  public SmsFields status(SmsStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SmsStatus getStatus() {
    return status;
  }

  public void setStatus(SmsStatus status) {
    this.status = status;
  }


  public SmsFields to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Request to this number.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsFields smsFields = (SmsFields) o;
    return Objects.equals(this.accountRef, smsFields.accountRef) &&
        Objects.equals(this.clientRef, smsFields.clientRef) &&
        Objects.equals(this.direction, smsFields.direction) &&
        Objects.equals(this.from, smsFields.from) &&
        Objects.equals(this.includeMessage, smsFields.includeMessage) &&
        Objects.equals(this.network, smsFields.network) &&
        Objects.equals(this.product, smsFields.product) &&
        Objects.equals(this.showConcatenated, smsFields.showConcatenated) &&
        Objects.equals(this.status, smsFields.status) &&
        Objects.equals(this.to, smsFields.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountRef, clientRef, direction, from, includeMessage, network, product, showConcatenated, status, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsFields {\n");
    sb.append("    accountRef: ").append(toIndentedString(accountRef)).append("\n");
    sb.append("    clientRef: ").append(toIndentedString(clientRef)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    includeMessage: ").append(toIndentedString(includeMessage)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    showConcatenated: ").append(toIndentedString(showConcatenated)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_ref");
    openapiFields.add("client_ref");
    openapiFields.add("direction");
    openapiFields.add("from");
    openapiFields.add("include_message");
    openapiFields.add("network");
    openapiFields.add("product");
    openapiFields.add("show_concatenated");
    openapiFields.add("status");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("product");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmsFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmsFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmsFields is not found in the empty JSON string", SmsFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmsFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmsFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SmsFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_ref") != null && !jsonObj.get("account_ref").isJsonNull()) && !jsonObj.get("account_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_ref").toString()));
      }
      if ((jsonObj.get("client_ref") != null && !jsonObj.get("client_ref").isJsonNull()) && !jsonObj.get("client_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ref").toString()));
      }
      // validate the required field `direction`
      Direction.validateJsonElement(jsonObj.get("direction"));
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the required field `product`
      ProductSms.validateJsonElement(jsonObj.get("product"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SmsStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmsFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmsFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmsFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmsFields.class));

       return (TypeAdapter<T>) new TypeAdapter<SmsFields>() {
           @Override
           public void write(JsonWriter out, SmsFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmsFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmsFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmsFields
   * @throws IOException if the JSON string is invalid with respect to SmsFields
   */
  public static SmsFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmsFields.class);
  }

  /**
   * Convert an instance of SmsFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

