/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.ASR;
import org.openapitools.client.model.AsrStatus;
import org.openapitools.client.model.CONVERSATIONS;
import org.openapitools.client.model.Direction;
import org.openapitools.client.model.INAPPVOICE;
import org.openapitools.client.model.MESSAGES;
import org.openapitools.client.model.NUMBERINSIGHT;
import org.openapitools.client.model.ProductAsr;
import org.openapitools.client.model.SMS;
import org.openapitools.client.model.VERIFYAPI;
import org.openapitools.client.model.VOICECALL;
import org.openapitools.client.model.WEBSOCKETCALL;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAsyncReportRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateAsyncReportRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateAsyncReportRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateAsyncReportRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SMS> adapterSMS = gson.getDelegateAdapter(this, TypeToken.get(SMS.class));
            final TypeAdapter<VOICECALL> adapterVOICECALL = gson.getDelegateAdapter(this, TypeToken.get(VOICECALL.class));
            final TypeAdapter<INAPPVOICE> adapterINAPPVOICE = gson.getDelegateAdapter(this, TypeToken.get(INAPPVOICE.class));
            final TypeAdapter<WEBSOCKETCALL> adapterWEBSOCKETCALL = gson.getDelegateAdapter(this, TypeToken.get(WEBSOCKETCALL.class));
            final TypeAdapter<VERIFYAPI> adapterVERIFYAPI = gson.getDelegateAdapter(this, TypeToken.get(VERIFYAPI.class));
            final TypeAdapter<NUMBERINSIGHT> adapterNUMBERINSIGHT = gson.getDelegateAdapter(this, TypeToken.get(NUMBERINSIGHT.class));
            final TypeAdapter<MESSAGES> adapterMESSAGES = gson.getDelegateAdapter(this, TypeToken.get(MESSAGES.class));
            final TypeAdapter<CONVERSATIONS> adapterCONVERSATIONS = gson.getDelegateAdapter(this, TypeToken.get(CONVERSATIONS.class));
            final TypeAdapter<ASR> adapterASR = gson.getDelegateAdapter(this, TypeToken.get(ASR.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateAsyncReportRequest>() {
                @Override
                public void write(JsonWriter out, CreateAsyncReportRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SMS`
                    if (value.getActualInstance() instanceof SMS) {
                        JsonElement element = adapterSMS.toJsonTree((SMS)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VOICECALL`
                    if (value.getActualInstance() instanceof VOICECALL) {
                        JsonElement element = adapterVOICECALL.toJsonTree((VOICECALL)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `INAPPVOICE`
                    if (value.getActualInstance() instanceof INAPPVOICE) {
                        JsonElement element = adapterINAPPVOICE.toJsonTree((INAPPVOICE)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WEBSOCKETCALL`
                    if (value.getActualInstance() instanceof WEBSOCKETCALL) {
                        JsonElement element = adapterWEBSOCKETCALL.toJsonTree((WEBSOCKETCALL)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VERIFYAPI`
                    if (value.getActualInstance() instanceof VERIFYAPI) {
                        JsonElement element = adapterVERIFYAPI.toJsonTree((VERIFYAPI)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NUMBERINSIGHT`
                    if (value.getActualInstance() instanceof NUMBERINSIGHT) {
                        JsonElement element = adapterNUMBERINSIGHT.toJsonTree((NUMBERINSIGHT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MESSAGES`
                    if (value.getActualInstance() instanceof MESSAGES) {
                        JsonElement element = adapterMESSAGES.toJsonTree((MESSAGES)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CONVERSATIONS`
                    if (value.getActualInstance() instanceof CONVERSATIONS) {
                        JsonElement element = adapterCONVERSATIONS.toJsonTree((CONVERSATIONS)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ASR`
                    if (value.getActualInstance() instanceof ASR) {
                        JsonElement element = adapterASR.toJsonTree((ASR)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL");
                }

                @Override
                public CreateAsyncReportRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SMS
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SMS.validateJsonElement(jsonElement);
                        actualAdapter = adapterSMS;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SMS'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SMS failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SMS'", e);
                    }
                    // deserialize VOICECALL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VOICECALL.validateJsonElement(jsonElement);
                        actualAdapter = adapterVOICECALL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VOICECALL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VOICECALL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VOICECALL'", e);
                    }
                    // deserialize INAPPVOICE
                    try {
                        // validate the JSON object to see if any exception is thrown
                        INAPPVOICE.validateJsonElement(jsonElement);
                        actualAdapter = adapterINAPPVOICE;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'INAPPVOICE'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for INAPPVOICE failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'INAPPVOICE'", e);
                    }
                    // deserialize WEBSOCKETCALL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WEBSOCKETCALL.validateJsonElement(jsonElement);
                        actualAdapter = adapterWEBSOCKETCALL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WEBSOCKETCALL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WEBSOCKETCALL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WEBSOCKETCALL'", e);
                    }
                    // deserialize VERIFYAPI
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VERIFYAPI.validateJsonElement(jsonElement);
                        actualAdapter = adapterVERIFYAPI;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VERIFYAPI'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VERIFYAPI failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VERIFYAPI'", e);
                    }
                    // deserialize NUMBERINSIGHT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NUMBERINSIGHT.validateJsonElement(jsonElement);
                        actualAdapter = adapterNUMBERINSIGHT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NUMBERINSIGHT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NUMBERINSIGHT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NUMBERINSIGHT'", e);
                    }
                    // deserialize MESSAGES
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MESSAGES.validateJsonElement(jsonElement);
                        actualAdapter = adapterMESSAGES;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MESSAGES'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MESSAGES failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MESSAGES'", e);
                    }
                    // deserialize CONVERSATIONS
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CONVERSATIONS.validateJsonElement(jsonElement);
                        actualAdapter = adapterCONVERSATIONS;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CONVERSATIONS'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CONVERSATIONS failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CONVERSATIONS'", e);
                    }
                    // deserialize ASR
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ASR.validateJsonElement(jsonElement);
                        actualAdapter = adapterASR;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ASR'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ASR failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ASR'", e);
                    }

                    if (match == 1) {
                        CreateAsyncReportRequest ret = new CreateAsyncReportRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateAsyncReportRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateAsyncReportRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateAsyncReportRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SMS", SMS.class);
        schemas.put("VOICECALL", VOICECALL.class);
        schemas.put("INAPPVOICE", INAPPVOICE.class);
        schemas.put("WEBSOCKETCALL", WEBSOCKETCALL.class);
        schemas.put("VERIFYAPI", VERIFYAPI.class);
        schemas.put("NUMBERINSIGHT", NUMBERINSIGHT.class);
        schemas.put("MESSAGES", MESSAGES.class);
        schemas.put("CONVERSATIONS", CONVERSATIONS.class);
        schemas.put("ASR", ASR.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateAsyncReportRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SMS) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VOICECALL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof INAPPVOICE) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WEBSOCKETCALL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VERIFYAPI) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NUMBERINSIGHT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MESSAGES) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CONVERSATIONS) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ASR) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL");
    }

    /**
     * Get the actual instance, which can be the following:
     * ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL
     *
     * @return The actual instance (ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SMS`. If the actual instance is not `SMS`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SMS`
     * @throws ClassCastException if the instance is not `SMS`
     */
    public SMS getSMS() throws ClassCastException {
        return (SMS)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VOICECALL`. If the actual instance is not `VOICECALL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VOICECALL`
     * @throws ClassCastException if the instance is not `VOICECALL`
     */
    public VOICECALL getVOICECALL() throws ClassCastException {
        return (VOICECALL)super.getActualInstance();
    }
    /**
     * Get the actual instance of `INAPPVOICE`. If the actual instance is not `INAPPVOICE`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `INAPPVOICE`
     * @throws ClassCastException if the instance is not `INAPPVOICE`
     */
    public INAPPVOICE getINAPPVOICE() throws ClassCastException {
        return (INAPPVOICE)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WEBSOCKETCALL`. If the actual instance is not `WEBSOCKETCALL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WEBSOCKETCALL`
     * @throws ClassCastException if the instance is not `WEBSOCKETCALL`
     */
    public WEBSOCKETCALL getWEBSOCKETCALL() throws ClassCastException {
        return (WEBSOCKETCALL)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VERIFYAPI`. If the actual instance is not `VERIFYAPI`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VERIFYAPI`
     * @throws ClassCastException if the instance is not `VERIFYAPI`
     */
    public VERIFYAPI getVERIFYAPI() throws ClassCastException {
        return (VERIFYAPI)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NUMBERINSIGHT`. If the actual instance is not `NUMBERINSIGHT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NUMBERINSIGHT`
     * @throws ClassCastException if the instance is not `NUMBERINSIGHT`
     */
    public NUMBERINSIGHT getNUMBERINSIGHT() throws ClassCastException {
        return (NUMBERINSIGHT)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MESSAGES`. If the actual instance is not `MESSAGES`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MESSAGES`
     * @throws ClassCastException if the instance is not `MESSAGES`
     */
    public MESSAGES getMESSAGES() throws ClassCastException {
        return (MESSAGES)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CONVERSATIONS`. If the actual instance is not `CONVERSATIONS`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CONVERSATIONS`
     * @throws ClassCastException if the instance is not `CONVERSATIONS`
     */
    public CONVERSATIONS getCONVERSATIONS() throws ClassCastException {
        return (CONVERSATIONS)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ASR`. If the actual instance is not `ASR`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ASR`
     * @throws ClassCastException if the instance is not `ASR`
     */
    public ASR getASR() throws ClassCastException {
        return (ASR)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateAsyncReportRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SMS
        try {
            SMS.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SMS failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VOICECALL
        try {
            VOICECALL.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VOICECALL failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with INAPPVOICE
        try {
            INAPPVOICE.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for INAPPVOICE failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WEBSOCKETCALL
        try {
            WEBSOCKETCALL.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WEBSOCKETCALL failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VERIFYAPI
        try {
            VERIFYAPI.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VERIFYAPI failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NUMBERINSIGHT
        try {
            NUMBERINSIGHT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NUMBERINSIGHT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MESSAGES
        try {
            MESSAGES.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MESSAGES failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CONVERSATIONS
        try {
            CONVERSATIONS.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CONVERSATIONS failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ASR
        try {
            ASR.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ASR failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CreateAsyncReportRequest with oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CreateAsyncReportRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateAsyncReportRequest
     * @throws IOException if the JSON string is invalid with respect to CreateAsyncReportRequest
     */
    public static CreateAsyncReportRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateAsyncReportRequest.class);
    }

    /**
     * Convert an instance of CreateAsyncReportRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

