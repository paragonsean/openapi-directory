/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRecords422ResponseOneOf;
import org.openapitools.client.model.GetRecords422ResponseOneOf1;
import org.openapitools.client.model.GetRecords422ResponseOneOf1InvalidParametersInner;
import org.openapitools.client.model.GetRecords422ResponseOneOf2;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRecords422Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetRecords422Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetRecords422Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetRecords422Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetRecords422ResponseOneOf> adapterGetRecords422ResponseOneOf = gson.getDelegateAdapter(this, TypeToken.get(GetRecords422ResponseOneOf.class));
            final TypeAdapter<GetRecords422ResponseOneOf1> adapterGetRecords422ResponseOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords422ResponseOneOf1.class));
            final TypeAdapter<GetRecords422ResponseOneOf2> adapterGetRecords422ResponseOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords422ResponseOneOf2.class));

            return (TypeAdapter<T>) new TypeAdapter<GetRecords422Response>() {
                @Override
                public void write(JsonWriter out, GetRecords422Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetRecords422ResponseOneOf`
                    if (value.getActualInstance() instanceof GetRecords422ResponseOneOf) {
                        JsonElement element = adapterGetRecords422ResponseOneOf.toJsonTree((GetRecords422ResponseOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords422ResponseOneOf1`
                    if (value.getActualInstance() instanceof GetRecords422ResponseOneOf1) {
                        JsonElement element = adapterGetRecords422ResponseOneOf1.toJsonTree((GetRecords422ResponseOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords422ResponseOneOf2`
                    if (value.getActualInstance() instanceof GetRecords422ResponseOneOf2) {
                        JsonElement element = adapterGetRecords422ResponseOneOf2.toJsonTree((GetRecords422ResponseOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2");
                }

                @Override
                public GetRecords422Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetRecords422ResponseOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords422ResponseOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords422ResponseOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords422ResponseOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords422ResponseOneOf'", e);
                    }
                    // deserialize GetRecords422ResponseOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords422ResponseOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords422ResponseOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords422ResponseOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords422ResponseOneOf1'", e);
                    }
                    // deserialize GetRecords422ResponseOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords422ResponseOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords422ResponseOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords422ResponseOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords422ResponseOneOf2'", e);
                    }

                    if (match == 1) {
                        GetRecords422Response ret = new GetRecords422Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetRecords422Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetRecords422Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetRecords422Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetRecords422ResponseOneOf", GetRecords422ResponseOneOf.class);
        schemas.put("GetRecords422ResponseOneOf1", GetRecords422ResponseOneOf1.class);
        schemas.put("GetRecords422ResponseOneOf2", GetRecords422ResponseOneOf2.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetRecords422Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetRecords422ResponseOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords422ResponseOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords422ResponseOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2
     *
     * @return The actual instance (GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetRecords422ResponseOneOf`. If the actual instance is not `GetRecords422ResponseOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords422ResponseOneOf`
     * @throws ClassCastException if the instance is not `GetRecords422ResponseOneOf`
     */
    public GetRecords422ResponseOneOf getGetRecords422ResponseOneOf() throws ClassCastException {
        return (GetRecords422ResponseOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords422ResponseOneOf1`. If the actual instance is not `GetRecords422ResponseOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords422ResponseOneOf1`
     * @throws ClassCastException if the instance is not `GetRecords422ResponseOneOf1`
     */
    public GetRecords422ResponseOneOf1 getGetRecords422ResponseOneOf1() throws ClassCastException {
        return (GetRecords422ResponseOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords422ResponseOneOf2`. If the actual instance is not `GetRecords422ResponseOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords422ResponseOneOf2`
     * @throws ClassCastException if the instance is not `GetRecords422ResponseOneOf2`
     */
    public GetRecords422ResponseOneOf2 getGetRecords422ResponseOneOf2() throws ClassCastException {
        return (GetRecords422ResponseOneOf2)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetRecords422Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with GetRecords422ResponseOneOf
        try {
            GetRecords422ResponseOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords422ResponseOneOf1
        try {
            GetRecords422ResponseOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords422ResponseOneOf2
        try {
            GetRecords422ResponseOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords422ResponseOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetRecords422Response with oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetRecords422Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetRecords422Response
     * @throws IOException if the JSON string is invalid with respect to GetRecords422Response
     */
    public static GetRecords422Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetRecords422Response.class);
    }

    /**
     * Convert an instance of GetRecords422Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

