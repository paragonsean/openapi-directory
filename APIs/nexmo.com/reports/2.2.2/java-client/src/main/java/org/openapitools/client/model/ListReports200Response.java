/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListReports200ResponseReportsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListReports200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListReports200Response {
  public static final String SERIALIZED_NAME_ITEMS_COUNT = "items_count";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private Integer itemsCount;

  public static final String SERIALIZED_NAME_REPORTS = "reports";
  @SerializedName(SERIALIZED_NAME_REPORTS)
  private List<ListReports200ResponseReportsInner> reports = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELF_LINK = "self_link";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private URI selfLink;

  public ListReports200Response() {
  }

  public ListReports200Response itemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

  /**
   * The number of reports in the list.
   * @return itemsCount
   */
  @javax.annotation.Nullable
  public Integer getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
  }


  public ListReports200Response reports(List<ListReports200ResponseReportsInner> reports) {
    this.reports = reports;
    return this;
  }

  public ListReports200Response addReportsItem(ListReports200ResponseReportsInner reportsItem) {
    if (this.reports == null) {
      this.reports = new ArrayList<>();
    }
    this.reports.add(reportsItem);
    return this;
  }

  /**
   * The list of reports.
   * @return reports
   */
  @javax.annotation.Nullable
  public List<ListReports200ResponseReportsInner> getReports() {
    return reports;
  }

  public void setReports(List<ListReports200ResponseReportsInner> reports) {
    this.reports = reports;
  }


  public ListReports200Response selfLink(URI selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * URI of this search.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public URI getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(URI selfLink) {
    this.selfLink = selfLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListReports200Response listReports200Response = (ListReports200Response) o;
    return Objects.equals(this.itemsCount, listReports200Response.itemsCount) &&
        Objects.equals(this.reports, listReports200Response.reports) &&
        Objects.equals(this.selfLink, listReports200Response.selfLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemsCount, reports, selfLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListReports200Response {\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items_count");
    openapiFields.add("reports");
    openapiFields.add("self_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListReports200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListReports200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListReports200Response is not found in the empty JSON string", ListReports200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListReports200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListReports200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("reports") != null && !jsonObj.get("reports").isJsonNull()) {
        JsonArray jsonArrayreports = jsonObj.getAsJsonArray("reports");
        if (jsonArrayreports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reports` to be an array in the JSON string but got `%s`", jsonObj.get("reports").toString()));
          }

          // validate the optional field `reports` (array)
          for (int i = 0; i < jsonArrayreports.size(); i++) {
            ListReports200ResponseReportsInner.validateJsonElement(jsonArrayreports.get(i));
          };
        }
      }
      if ((jsonObj.get("self_link") != null && !jsonObj.get("self_link").isJsonNull()) && !jsonObj.get("self_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListReports200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListReports200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListReports200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListReports200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ListReports200Response>() {
           @Override
           public void write(JsonWriter out, ListReports200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListReports200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListReports200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListReports200Response
   * @throws IOException if the JSON string is invalid with respect to ListReports200Response
   */
  public static ListReports200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListReports200Response.class);
  }

  /**
   * Convert an instance of ListReports200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

