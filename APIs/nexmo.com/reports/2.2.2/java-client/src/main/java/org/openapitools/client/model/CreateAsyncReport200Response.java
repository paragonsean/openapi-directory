/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.AsrResponseCreateReport;
import org.openapitools.client.model.AsrStatus;
import org.openapitools.client.model.ConversationsResponseCreateReport;
import org.openapitools.client.model.Direction;
import org.openapitools.client.model.InAppVoiceResponseCreateReport;
import org.openapitools.client.model.LinksCreateReport;
import org.openapitools.client.model.MessagesResponseCreateReport;
import org.openapitools.client.model.NumberInsightResponseCreateReport;
import org.openapitools.client.model.ProductAsr;
import org.openapitools.client.model.RequestStatusCreateReport;
import org.openapitools.client.model.SmsResponseCreateReport;
import org.openapitools.client.model.VerifyApiResponseCreateReport;
import org.openapitools.client.model.VoiceCallResponseCreateReport;
import org.openapitools.client.model.WebsocketCallResponseCreateReport;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAsyncReport200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateAsyncReport200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateAsyncReport200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateAsyncReport200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SmsResponseCreateReport> adapterSmsResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(SmsResponseCreateReport.class));
            final TypeAdapter<VoiceCallResponseCreateReport> adapterVoiceCallResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(VoiceCallResponseCreateReport.class));
            final TypeAdapter<InAppVoiceResponseCreateReport> adapterInAppVoiceResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(InAppVoiceResponseCreateReport.class));
            final TypeAdapter<WebsocketCallResponseCreateReport> adapterWebsocketCallResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(WebsocketCallResponseCreateReport.class));
            final TypeAdapter<VerifyApiResponseCreateReport> adapterVerifyApiResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(VerifyApiResponseCreateReport.class));
            final TypeAdapter<NumberInsightResponseCreateReport> adapterNumberInsightResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(NumberInsightResponseCreateReport.class));
            final TypeAdapter<MessagesResponseCreateReport> adapterMessagesResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(MessagesResponseCreateReport.class));
            final TypeAdapter<ConversationsResponseCreateReport> adapterConversationsResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(ConversationsResponseCreateReport.class));
            final TypeAdapter<AsrResponseCreateReport> adapterAsrResponseCreateReport = gson.getDelegateAdapter(this, TypeToken.get(AsrResponseCreateReport.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateAsyncReport200Response>() {
                @Override
                public void write(JsonWriter out, CreateAsyncReport200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SmsResponseCreateReport`
                    if (value.getActualInstance() instanceof SmsResponseCreateReport) {
                        JsonElement element = adapterSmsResponseCreateReport.toJsonTree((SmsResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VoiceCallResponseCreateReport`
                    if (value.getActualInstance() instanceof VoiceCallResponseCreateReport) {
                        JsonElement element = adapterVoiceCallResponseCreateReport.toJsonTree((VoiceCallResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InAppVoiceResponseCreateReport`
                    if (value.getActualInstance() instanceof InAppVoiceResponseCreateReport) {
                        JsonElement element = adapterInAppVoiceResponseCreateReport.toJsonTree((InAppVoiceResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WebsocketCallResponseCreateReport`
                    if (value.getActualInstance() instanceof WebsocketCallResponseCreateReport) {
                        JsonElement element = adapterWebsocketCallResponseCreateReport.toJsonTree((WebsocketCallResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VerifyApiResponseCreateReport`
                    if (value.getActualInstance() instanceof VerifyApiResponseCreateReport) {
                        JsonElement element = adapterVerifyApiResponseCreateReport.toJsonTree((VerifyApiResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NumberInsightResponseCreateReport`
                    if (value.getActualInstance() instanceof NumberInsightResponseCreateReport) {
                        JsonElement element = adapterNumberInsightResponseCreateReport.toJsonTree((NumberInsightResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessagesResponseCreateReport`
                    if (value.getActualInstance() instanceof MessagesResponseCreateReport) {
                        JsonElement element = adapterMessagesResponseCreateReport.toJsonTree((MessagesResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConversationsResponseCreateReport`
                    if (value.getActualInstance() instanceof ConversationsResponseCreateReport) {
                        JsonElement element = adapterConversationsResponseCreateReport.toJsonTree((ConversationsResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AsrResponseCreateReport`
                    if (value.getActualInstance() instanceof AsrResponseCreateReport) {
                        JsonElement element = adapterAsrResponseCreateReport.toJsonTree((AsrResponseCreateReport)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport");
                }

                @Override
                public CreateAsyncReport200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SmsResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SmsResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterSmsResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SmsResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SmsResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SmsResponseCreateReport'", e);
                    }
                    // deserialize VoiceCallResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VoiceCallResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterVoiceCallResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VoiceCallResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VoiceCallResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VoiceCallResponseCreateReport'", e);
                    }
                    // deserialize InAppVoiceResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InAppVoiceResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterInAppVoiceResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InAppVoiceResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InAppVoiceResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InAppVoiceResponseCreateReport'", e);
                    }
                    // deserialize WebsocketCallResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WebsocketCallResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterWebsocketCallResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WebsocketCallResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WebsocketCallResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WebsocketCallResponseCreateReport'", e);
                    }
                    // deserialize VerifyApiResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VerifyApiResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterVerifyApiResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VerifyApiResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VerifyApiResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VerifyApiResponseCreateReport'", e);
                    }
                    // deserialize NumberInsightResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NumberInsightResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterNumberInsightResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NumberInsightResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NumberInsightResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NumberInsightResponseCreateReport'", e);
                    }
                    // deserialize MessagesResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessagesResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessagesResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessagesResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessagesResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessagesResponseCreateReport'", e);
                    }
                    // deserialize ConversationsResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConversationsResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterConversationsResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConversationsResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConversationsResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConversationsResponseCreateReport'", e);
                    }
                    // deserialize AsrResponseCreateReport
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AsrResponseCreateReport.validateJsonElement(jsonElement);
                        actualAdapter = adapterAsrResponseCreateReport;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AsrResponseCreateReport'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AsrResponseCreateReport failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AsrResponseCreateReport'", e);
                    }

                    if (match == 1) {
                        CreateAsyncReport200Response ret = new CreateAsyncReport200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateAsyncReport200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateAsyncReport200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateAsyncReport200Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SmsResponseCreateReport", SmsResponseCreateReport.class);
        schemas.put("VoiceCallResponseCreateReport", VoiceCallResponseCreateReport.class);
        schemas.put("InAppVoiceResponseCreateReport", InAppVoiceResponseCreateReport.class);
        schemas.put("WebsocketCallResponseCreateReport", WebsocketCallResponseCreateReport.class);
        schemas.put("VerifyApiResponseCreateReport", VerifyApiResponseCreateReport.class);
        schemas.put("NumberInsightResponseCreateReport", NumberInsightResponseCreateReport.class);
        schemas.put("MessagesResponseCreateReport", MessagesResponseCreateReport.class);
        schemas.put("ConversationsResponseCreateReport", ConversationsResponseCreateReport.class);
        schemas.put("AsrResponseCreateReport", AsrResponseCreateReport.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateAsyncReport200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SmsResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VoiceCallResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InAppVoiceResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WebsocketCallResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VerifyApiResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NumberInsightResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessagesResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConversationsResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AsrResponseCreateReport) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport");
    }

    /**
     * Get the actual instance, which can be the following:
     * AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport
     *
     * @return The actual instance (AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SmsResponseCreateReport`. If the actual instance is not `SmsResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SmsResponseCreateReport`
     * @throws ClassCastException if the instance is not `SmsResponseCreateReport`
     */
    public SmsResponseCreateReport getSmsResponseCreateReport() throws ClassCastException {
        return (SmsResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VoiceCallResponseCreateReport`. If the actual instance is not `VoiceCallResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VoiceCallResponseCreateReport`
     * @throws ClassCastException if the instance is not `VoiceCallResponseCreateReport`
     */
    public VoiceCallResponseCreateReport getVoiceCallResponseCreateReport() throws ClassCastException {
        return (VoiceCallResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InAppVoiceResponseCreateReport`. If the actual instance is not `InAppVoiceResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InAppVoiceResponseCreateReport`
     * @throws ClassCastException if the instance is not `InAppVoiceResponseCreateReport`
     */
    public InAppVoiceResponseCreateReport getInAppVoiceResponseCreateReport() throws ClassCastException {
        return (InAppVoiceResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WebsocketCallResponseCreateReport`. If the actual instance is not `WebsocketCallResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WebsocketCallResponseCreateReport`
     * @throws ClassCastException if the instance is not `WebsocketCallResponseCreateReport`
     */
    public WebsocketCallResponseCreateReport getWebsocketCallResponseCreateReport() throws ClassCastException {
        return (WebsocketCallResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VerifyApiResponseCreateReport`. If the actual instance is not `VerifyApiResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VerifyApiResponseCreateReport`
     * @throws ClassCastException if the instance is not `VerifyApiResponseCreateReport`
     */
    public VerifyApiResponseCreateReport getVerifyApiResponseCreateReport() throws ClassCastException {
        return (VerifyApiResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NumberInsightResponseCreateReport`. If the actual instance is not `NumberInsightResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NumberInsightResponseCreateReport`
     * @throws ClassCastException if the instance is not `NumberInsightResponseCreateReport`
     */
    public NumberInsightResponseCreateReport getNumberInsightResponseCreateReport() throws ClassCastException {
        return (NumberInsightResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessagesResponseCreateReport`. If the actual instance is not `MessagesResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessagesResponseCreateReport`
     * @throws ClassCastException if the instance is not `MessagesResponseCreateReport`
     */
    public MessagesResponseCreateReport getMessagesResponseCreateReport() throws ClassCastException {
        return (MessagesResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConversationsResponseCreateReport`. If the actual instance is not `ConversationsResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConversationsResponseCreateReport`
     * @throws ClassCastException if the instance is not `ConversationsResponseCreateReport`
     */
    public ConversationsResponseCreateReport getConversationsResponseCreateReport() throws ClassCastException {
        return (ConversationsResponseCreateReport)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AsrResponseCreateReport`. If the actual instance is not `AsrResponseCreateReport`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AsrResponseCreateReport`
     * @throws ClassCastException if the instance is not `AsrResponseCreateReport`
     */
    public AsrResponseCreateReport getAsrResponseCreateReport() throws ClassCastException {
        return (AsrResponseCreateReport)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateAsyncReport200Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SmsResponseCreateReport
        try {
            SmsResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SmsResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VoiceCallResponseCreateReport
        try {
            VoiceCallResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VoiceCallResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InAppVoiceResponseCreateReport
        try {
            InAppVoiceResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InAppVoiceResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WebsocketCallResponseCreateReport
        try {
            WebsocketCallResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WebsocketCallResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VerifyApiResponseCreateReport
        try {
            VerifyApiResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VerifyApiResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NumberInsightResponseCreateReport
        try {
            NumberInsightResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NumberInsightResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessagesResponseCreateReport
        try {
            MessagesResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessagesResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConversationsResponseCreateReport
        try {
            ConversationsResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConversationsResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AsrResponseCreateReport
        try {
            AsrResponseCreateReport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AsrResponseCreateReport failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for CreateAsyncReport200Response with oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of CreateAsyncReport200Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateAsyncReport200Response
     * @throws IOException if the JSON string is invalid with respect to CreateAsyncReport200Response
     */
    public static CreateAsyncReport200Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateAsyncReport200Response.class);
    }

    /**
     * Convert an instance of CreateAsyncReport200Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

