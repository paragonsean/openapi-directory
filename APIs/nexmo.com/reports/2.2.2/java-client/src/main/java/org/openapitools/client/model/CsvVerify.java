/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Verify
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CsvVerify {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATE_FINALIZED = "date_finalized";
  @SerializedName(SERIALIZED_NAME_DATE_FINALIZED)
  private LocalDate dateFinalized;

  public static final String SERIALIZED_NAME_DATE_RECEIVED = "date_received";
  @SerializedName(SERIALIZED_NAME_DATE_RECEIVED)
  private LocalDate dateReceived;

  public static final String SERIALIZED_NAME_ESTIMATED_PRICE = "estimated_price";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_PRICE)
  private String estimatedPrice;

  public static final String SERIALIZED_NAME_FIRST_EVENT_DATE = "first_event_date";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT_DATE)
  private LocalDate firstEventDate;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_LAST_EVENT_DATE = "last_event_date";
  @SerializedName(SERIALIZED_NAME_LAST_EVENT_DATE)
  private LocalDate lastEventDate;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "network_name";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public static final String SERIALIZED_NAME_NUMBER_TYPE = "number_type";
  @SerializedName(SERIALIZED_NAME_NUMBER_TYPE)
  private String numberType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_PRICING_MODEL = "pricing_model";
  @SerializedName(SERIALIZED_NAME_PRICING_MODEL)
  private String pricingModel;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SMS_EVENT_COUNT = "sms_event_count";
  @SerializedName(SERIALIZED_NAME_SMS_EVENT_COUNT)
  private Integer smsEventCount;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TTS_EVENT_COUNT = "tts_event_count";
  @SerializedName(SERIALIZED_NAME_TTS_EVENT_COUNT)
  private Integer ttsEventCount;

  public static final String SERIALIZED_NAME_VERIFY_STATUS = "verify_status";
  @SerializedName(SERIALIZED_NAME_VERIFY_STATUS)
  private String verifyStatus;

  public CsvVerify() {
  }

  public CsvVerify accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CsvVerify country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country where the request was sent.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CsvVerify countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Country name where the request was sent.
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public CsvVerify currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the price of the request.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CsvVerify dateFinalized(LocalDate dateFinalized) {
    this.dateFinalized = dateFinalized;
    return this;
  }

  /**
   * Date when the request was finalized.
   * @return dateFinalized
   */
  @javax.annotation.Nullable
  public LocalDate getDateFinalized() {
    return dateFinalized;
  }

  public void setDateFinalized(LocalDate dateFinalized) {
    this.dateFinalized = dateFinalized;
  }


  public CsvVerify dateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
    return this;
  }

  /**
   * Date of the request.
   * @return dateReceived
   */
  @javax.annotation.Nullable
  public LocalDate getDateReceived() {
    return dateReceived;
  }

  public void setDateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
  }


  public CsvVerify estimatedPrice(String estimatedPrice) {
    this.estimatedPrice = estimatedPrice;
    return this;
  }

  /**
   * Estimated price of the verify request.
   * @return estimatedPrice
   */
  @javax.annotation.Nullable
  public String getEstimatedPrice() {
    return estimatedPrice;
  }

  public void setEstimatedPrice(String estimatedPrice) {
    this.estimatedPrice = estimatedPrice;
  }


  public CsvVerify firstEventDate(LocalDate firstEventDate) {
    this.firstEventDate = firstEventDate;
    return this;
  }

  /**
   * Date of the first verify event.
   * @return firstEventDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstEventDate() {
    return firstEventDate;
  }

  public void setFirstEventDate(LocalDate firstEventDate) {
    this.firstEventDate = firstEventDate;
  }


  public CsvVerify from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Request from this number.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CsvVerify lastEventDate(LocalDate lastEventDate) {
    this.lastEventDate = lastEventDate;
    return this;
  }

  /**
   * Date of the last verify event.
   * @return lastEventDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastEventDate() {
    return lastEventDate;
  }

  public void setLastEventDate(LocalDate lastEventDate) {
    this.lastEventDate = lastEventDate;
  }


  public CsvVerify locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Locale used for the TTS.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public CsvVerify network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Network used to send the request.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public CsvVerify networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  /**
   * Name of the network used to send the request.
   * @return networkName
   */
  @javax.annotation.Nullable
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public CsvVerify numberType(String numberType) {
    this.numberType = numberType;
    return this;
  }

  /**
   * Type of phone number to which requests are sent.
   * @return numberType
   */
  @javax.annotation.Nullable
  public String getNumberType() {
    return numberType;
  }

  public void setNumberType(String numberType) {
    this.numberType = numberType;
  }


  public CsvVerify price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the request.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public CsvVerify pricingModel(String pricingModel) {
    this.pricingModel = pricingModel;
    return this;
  }

  /**
   * Pricing model used for this request.
   * @return pricingModel
   */
  @javax.annotation.Nullable
  public String getPricingModel() {
    return pricingModel;
  }

  public void setPricingModel(String pricingModel) {
    this.pricingModel = pricingModel;
  }


  public CsvVerify requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * UUID of the request.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CsvVerify smsEventCount(Integer smsEventCount) {
    this.smsEventCount = smsEventCount;
    return this;
  }

  /**
   * Number of sms sent for this verify request.
   * @return smsEventCount
   */
  @javax.annotation.Nullable
  public Integer getSmsEventCount() {
    return smsEventCount;
  }

  public void setSmsEventCount(Integer smsEventCount) {
    this.smsEventCount = smsEventCount;
  }


  public CsvVerify to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Request to this number.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public CsvVerify ttsEventCount(Integer ttsEventCount) {
    this.ttsEventCount = ttsEventCount;
    return this;
  }

  /**
   * Number of tts sent for this verify request.
   * @return ttsEventCount
   */
  @javax.annotation.Nullable
  public Integer getTtsEventCount() {
    return ttsEventCount;
  }

  public void setTtsEventCount(Integer ttsEventCount) {
    this.ttsEventCount = ttsEventCount;
  }


  public CsvVerify verifyStatus(String verifyStatus) {
    this.verifyStatus = verifyStatus;
    return this;
  }

  /**
   * Status of the verify request.
   * @return verifyStatus
   */
  @javax.annotation.Nullable
  public String getVerifyStatus() {
    return verifyStatus;
  }

  public void setVerifyStatus(String verifyStatus) {
    this.verifyStatus = verifyStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CsvVerify csvVerify = (CsvVerify) o;
    return Objects.equals(this.accountId, csvVerify.accountId) &&
        Objects.equals(this.country, csvVerify.country) &&
        Objects.equals(this.countryName, csvVerify.countryName) &&
        Objects.equals(this.currency, csvVerify.currency) &&
        Objects.equals(this.dateFinalized, csvVerify.dateFinalized) &&
        Objects.equals(this.dateReceived, csvVerify.dateReceived) &&
        Objects.equals(this.estimatedPrice, csvVerify.estimatedPrice) &&
        Objects.equals(this.firstEventDate, csvVerify.firstEventDate) &&
        Objects.equals(this.from, csvVerify.from) &&
        Objects.equals(this.lastEventDate, csvVerify.lastEventDate) &&
        Objects.equals(this.locale, csvVerify.locale) &&
        Objects.equals(this.network, csvVerify.network) &&
        Objects.equals(this.networkName, csvVerify.networkName) &&
        Objects.equals(this.numberType, csvVerify.numberType) &&
        Objects.equals(this.price, csvVerify.price) &&
        Objects.equals(this.pricingModel, csvVerify.pricingModel) &&
        Objects.equals(this.requestId, csvVerify.requestId) &&
        Objects.equals(this.smsEventCount, csvVerify.smsEventCount) &&
        Objects.equals(this.to, csvVerify.to) &&
        Objects.equals(this.ttsEventCount, csvVerify.ttsEventCount) &&
        Objects.equals(this.verifyStatus, csvVerify.verifyStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, country, countryName, currency, dateFinalized, dateReceived, estimatedPrice, firstEventDate, from, lastEventDate, locale, network, networkName, numberType, price, pricingModel, requestId, smsEventCount, to, ttsEventCount, verifyStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CsvVerify {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateFinalized: ").append(toIndentedString(dateFinalized)).append("\n");
    sb.append("    dateReceived: ").append(toIndentedString(dateReceived)).append("\n");
    sb.append("    estimatedPrice: ").append(toIndentedString(estimatedPrice)).append("\n");
    sb.append("    firstEventDate: ").append(toIndentedString(firstEventDate)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lastEventDate: ").append(toIndentedString(lastEventDate)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    numberType: ").append(toIndentedString(numberType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    pricingModel: ").append(toIndentedString(pricingModel)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    smsEventCount: ").append(toIndentedString(smsEventCount)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    ttsEventCount: ").append(toIndentedString(ttsEventCount)).append("\n");
    sb.append("    verifyStatus: ").append(toIndentedString(verifyStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("country");
    openapiFields.add("country_name");
    openapiFields.add("currency");
    openapiFields.add("date_finalized");
    openapiFields.add("date_received");
    openapiFields.add("estimated_price");
    openapiFields.add("first_event_date");
    openapiFields.add("from");
    openapiFields.add("last_event_date");
    openapiFields.add("locale");
    openapiFields.add("network");
    openapiFields.add("network_name");
    openapiFields.add("number_type");
    openapiFields.add("price");
    openapiFields.add("pricing_model");
    openapiFields.add("request_id");
    openapiFields.add("sms_event_count");
    openapiFields.add("to");
    openapiFields.add("tts_event_count");
    openapiFields.add("verify_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CsvVerify
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CsvVerify.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CsvVerify is not found in the empty JSON string", CsvVerify.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CsvVerify.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CsvVerify` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("estimated_price") != null && !jsonObj.get("estimated_price").isJsonNull()) && !jsonObj.get("estimated_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimated_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimated_price").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("network_name") != null && !jsonObj.get("network_name").isJsonNull()) && !jsonObj.get("network_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_name").toString()));
      }
      if ((jsonObj.get("number_type") != null && !jsonObj.get("number_type").isJsonNull()) && !jsonObj.get("number_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_type").toString()));
      }
      if ((jsonObj.get("pricing_model") != null && !jsonObj.get("pricing_model").isJsonNull()) && !jsonObj.get("pricing_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_model").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("verify_status") != null && !jsonObj.get("verify_status").isJsonNull()) && !jsonObj.get("verify_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verify_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verify_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CsvVerify.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CsvVerify' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CsvVerify> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CsvVerify.class));

       return (TypeAdapter<T>) new TypeAdapter<CsvVerify>() {
           @Override
           public void write(JsonWriter out, CsvVerify value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CsvVerify read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CsvVerify given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CsvVerify
   * @throws IOException if the JSON string is invalid with respect to CsvVerify
   */
  public static CsvVerify fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CsvVerify.class);
  }

  /**
   * Convert an instance of CsvVerify to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

