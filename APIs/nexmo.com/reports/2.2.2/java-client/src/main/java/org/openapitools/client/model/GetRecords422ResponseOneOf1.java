/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetRecords422ResponseOneOf1InvalidParametersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Invalid Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRecords422ResponseOneOf1 {
  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_INVALID_PARAMETERS = "invalid_parameters";
  @SerializedName(SERIALIZED_NAME_INVALID_PARAMETERS)
  private List<GetRecords422ResponseOneOf1InvalidParametersInner> invalidParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GetRecords422ResponseOneOf1() {
  }

  public GetRecords422ResponseOneOf1 instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }


  public GetRecords422ResponseOneOf1 invalidParameters(List<GetRecords422ResponseOneOf1InvalidParametersInner> invalidParameters) {
    this.invalidParameters = invalidParameters;
    return this;
  }

  public GetRecords422ResponseOneOf1 addInvalidParametersItem(GetRecords422ResponseOneOf1InvalidParametersInner invalidParametersItem) {
    if (this.invalidParameters == null) {
      this.invalidParameters = new ArrayList<>();
    }
    this.invalidParameters.add(invalidParametersItem);
    return this;
  }

  /**
   * Get invalidParameters
   * @return invalidParameters
   */
  @javax.annotation.Nullable
  public List<GetRecords422ResponseOneOf1InvalidParametersInner> getInvalidParameters() {
    return invalidParameters;
  }

  public void setInvalidParameters(List<GetRecords422ResponseOneOf1InvalidParametersInner> invalidParameters) {
    this.invalidParameters = invalidParameters;
  }


  public GetRecords422ResponseOneOf1 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecords422ResponseOneOf1 getRecords422ResponseOneOf1 = (GetRecords422ResponseOneOf1) o;
    return Objects.equals(this.instance, getRecords422ResponseOneOf1.instance) &&
        Objects.equals(this.invalidParameters, getRecords422ResponseOneOf1.invalidParameters) &&
        Objects.equals(this.title, getRecords422ResponseOneOf1.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instance, invalidParameters, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecords422ResponseOneOf1 {\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    invalidParameters: ").append(toIndentedString(invalidParameters)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instance");
    openapiFields.add("invalid_parameters");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecords422ResponseOneOf1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecords422ResponseOneOf1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecords422ResponseOneOf1 is not found in the empty JSON string", GetRecords422ResponseOneOf1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecords422ResponseOneOf1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecords422ResponseOneOf1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if (jsonObj.get("invalid_parameters") != null && !jsonObj.get("invalid_parameters").isJsonNull()) {
        JsonArray jsonArrayinvalidParameters = jsonObj.getAsJsonArray("invalid_parameters");
        if (jsonArrayinvalidParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalid_parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalid_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("invalid_parameters").toString()));
          }

          // validate the optional field `invalid_parameters` (array)
          for (int i = 0; i < jsonArrayinvalidParameters.size(); i++) {
            GetRecords422ResponseOneOf1InvalidParametersInner.validateJsonElement(jsonArrayinvalidParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecords422ResponseOneOf1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecords422ResponseOneOf1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecords422ResponseOneOf1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecords422ResponseOneOf1.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecords422ResponseOneOf1>() {
           @Override
           public void write(JsonWriter out, GetRecords422ResponseOneOf1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecords422ResponseOneOf1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecords422ResponseOneOf1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecords422ResponseOneOf1
   * @throws IOException if the JSON string is invalid with respect to GetRecords422ResponseOneOf1
   */
  public static GetRecords422ResponseOneOf1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecords422ResponseOneOf1.class);
  }

  /**
   * Convert an instance of GetRecords422ResponseOneOf1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

