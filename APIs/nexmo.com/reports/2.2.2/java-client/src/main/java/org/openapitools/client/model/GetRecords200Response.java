/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CsvConversations;
import org.openapitools.client.model.GetRecords200ResponseOneOf;
import org.openapitools.client.model.GetRecords200ResponseOneOf1;
import org.openapitools.client.model.GetRecords200ResponseOneOf10;
import org.openapitools.client.model.GetRecords200ResponseOneOf2;
import org.openapitools.client.model.GetRecords200ResponseOneOf3;
import org.openapitools.client.model.GetRecords200ResponseOneOf4;
import org.openapitools.client.model.GetRecords200ResponseOneOf5;
import org.openapitools.client.model.GetRecords200ResponseOneOf6;
import org.openapitools.client.model.GetRecords200ResponseOneOf7;
import org.openapitools.client.model.GetRecords200ResponseOneOf8;
import org.openapitools.client.model.GetRecords200ResponseOneOf9;
import org.openapitools.client.model.ProductConversations;
import org.openapitools.client.model.ReportResponseTopLevelLinks;
import org.openapitools.client.model.RequestStatus;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRecords200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetRecords200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetRecords200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetRecords200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetRecords200ResponseOneOf> adapterGetRecords200ResponseOneOf = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf.class));
            final TypeAdapter<GetRecords200ResponseOneOf1> adapterGetRecords200ResponseOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf1.class));
            final TypeAdapter<GetRecords200ResponseOneOf2> adapterGetRecords200ResponseOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf2.class));
            final TypeAdapter<GetRecords200ResponseOneOf3> adapterGetRecords200ResponseOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf3.class));
            final TypeAdapter<GetRecords200ResponseOneOf4> adapterGetRecords200ResponseOneOf4 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf4.class));
            final TypeAdapter<GetRecords200ResponseOneOf5> adapterGetRecords200ResponseOneOf5 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf5.class));
            final TypeAdapter<GetRecords200ResponseOneOf6> adapterGetRecords200ResponseOneOf6 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf6.class));
            final TypeAdapter<GetRecords200ResponseOneOf7> adapterGetRecords200ResponseOneOf7 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf7.class));
            final TypeAdapter<GetRecords200ResponseOneOf8> adapterGetRecords200ResponseOneOf8 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf8.class));
            final TypeAdapter<GetRecords200ResponseOneOf9> adapterGetRecords200ResponseOneOf9 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf9.class));
            final TypeAdapter<GetRecords200ResponseOneOf10> adapterGetRecords200ResponseOneOf10 = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf10.class));

            return (TypeAdapter<T>) new TypeAdapter<GetRecords200Response>() {
                @Override
                public void write(JsonWriter out, GetRecords200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GetRecords200ResponseOneOf`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf) {
                        JsonElement element = adapterGetRecords200ResponseOneOf.toJsonTree((GetRecords200ResponseOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf1`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf1) {
                        JsonElement element = adapterGetRecords200ResponseOneOf1.toJsonTree((GetRecords200ResponseOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf2`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf2) {
                        JsonElement element = adapterGetRecords200ResponseOneOf2.toJsonTree((GetRecords200ResponseOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf3`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf3) {
                        JsonElement element = adapterGetRecords200ResponseOneOf3.toJsonTree((GetRecords200ResponseOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf4`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf4) {
                        JsonElement element = adapterGetRecords200ResponseOneOf4.toJsonTree((GetRecords200ResponseOneOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf5`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf5) {
                        JsonElement element = adapterGetRecords200ResponseOneOf5.toJsonTree((GetRecords200ResponseOneOf5)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf6`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf6) {
                        JsonElement element = adapterGetRecords200ResponseOneOf6.toJsonTree((GetRecords200ResponseOneOf6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf7`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf7) {
                        JsonElement element = adapterGetRecords200ResponseOneOf7.toJsonTree((GetRecords200ResponseOneOf7)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf8`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf8) {
                        JsonElement element = adapterGetRecords200ResponseOneOf8.toJsonTree((GetRecords200ResponseOneOf8)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf9`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf9) {
                        JsonElement element = adapterGetRecords200ResponseOneOf9.toJsonTree((GetRecords200ResponseOneOf9)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GetRecords200ResponseOneOf10`
                    if (value.getActualInstance() instanceof GetRecords200ResponseOneOf10) {
                        JsonElement element = adapterGetRecords200ResponseOneOf10.toJsonTree((GetRecords200ResponseOneOf10)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9");
                }

                @Override
                public GetRecords200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GetRecords200ResponseOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf1'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf2'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf3'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf4'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf5.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf5;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf5'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf5 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf5'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf6.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf6;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf6'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf6'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf7
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf7.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf7;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf7'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf7 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf7'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf8
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf8.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf8;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf8'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf8 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf8'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf9
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf9.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf9;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf9'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf9 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf9'", e);
                    }
                    // deserialize GetRecords200ResponseOneOf10
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GetRecords200ResponseOneOf10.validateJsonElement(jsonElement);
                        actualAdapter = adapterGetRecords200ResponseOneOf10;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GetRecords200ResponseOneOf10'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf10 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GetRecords200ResponseOneOf10'", e);
                    }

                    if (match == 1) {
                        GetRecords200Response ret = new GetRecords200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetRecords200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetRecords200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetRecords200Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GetRecords200ResponseOneOf", GetRecords200ResponseOneOf.class);
        schemas.put("GetRecords200ResponseOneOf1", GetRecords200ResponseOneOf1.class);
        schemas.put("GetRecords200ResponseOneOf2", GetRecords200ResponseOneOf2.class);
        schemas.put("GetRecords200ResponseOneOf3", GetRecords200ResponseOneOf3.class);
        schemas.put("GetRecords200ResponseOneOf4", GetRecords200ResponseOneOf4.class);
        schemas.put("GetRecords200ResponseOneOf5", GetRecords200ResponseOneOf5.class);
        schemas.put("GetRecords200ResponseOneOf6", GetRecords200ResponseOneOf6.class);
        schemas.put("GetRecords200ResponseOneOf7", GetRecords200ResponseOneOf7.class);
        schemas.put("GetRecords200ResponseOneOf8", GetRecords200ResponseOneOf8.class);
        schemas.put("GetRecords200ResponseOneOf9", GetRecords200ResponseOneOf9.class);
        schemas.put("GetRecords200ResponseOneOf10", GetRecords200ResponseOneOf10.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetRecords200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GetRecords200ResponseOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf5) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf6) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf7) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf8) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf9) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GetRecords200ResponseOneOf10) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9
     *
     * @return The actual instance (GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GetRecords200ResponseOneOf`. If the actual instance is not `GetRecords200ResponseOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf`
     */
    public GetRecords200ResponseOneOf getGetRecords200ResponseOneOf() throws ClassCastException {
        return (GetRecords200ResponseOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf1`. If the actual instance is not `GetRecords200ResponseOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf1`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf1`
     */
    public GetRecords200ResponseOneOf1 getGetRecords200ResponseOneOf1() throws ClassCastException {
        return (GetRecords200ResponseOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf2`. If the actual instance is not `GetRecords200ResponseOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf2`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf2`
     */
    public GetRecords200ResponseOneOf2 getGetRecords200ResponseOneOf2() throws ClassCastException {
        return (GetRecords200ResponseOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf3`. If the actual instance is not `GetRecords200ResponseOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf3`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf3`
     */
    public GetRecords200ResponseOneOf3 getGetRecords200ResponseOneOf3() throws ClassCastException {
        return (GetRecords200ResponseOneOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf4`. If the actual instance is not `GetRecords200ResponseOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf4`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf4`
     */
    public GetRecords200ResponseOneOf4 getGetRecords200ResponseOneOf4() throws ClassCastException {
        return (GetRecords200ResponseOneOf4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf5`. If the actual instance is not `GetRecords200ResponseOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf5`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf5`
     */
    public GetRecords200ResponseOneOf5 getGetRecords200ResponseOneOf5() throws ClassCastException {
        return (GetRecords200ResponseOneOf5)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf6`. If the actual instance is not `GetRecords200ResponseOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf6`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf6`
     */
    public GetRecords200ResponseOneOf6 getGetRecords200ResponseOneOf6() throws ClassCastException {
        return (GetRecords200ResponseOneOf6)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf7`. If the actual instance is not `GetRecords200ResponseOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf7`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf7`
     */
    public GetRecords200ResponseOneOf7 getGetRecords200ResponseOneOf7() throws ClassCastException {
        return (GetRecords200ResponseOneOf7)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf8`. If the actual instance is not `GetRecords200ResponseOneOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf8`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf8`
     */
    public GetRecords200ResponseOneOf8 getGetRecords200ResponseOneOf8() throws ClassCastException {
        return (GetRecords200ResponseOneOf8)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf9`. If the actual instance is not `GetRecords200ResponseOneOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf9`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf9`
     */
    public GetRecords200ResponseOneOf9 getGetRecords200ResponseOneOf9() throws ClassCastException {
        return (GetRecords200ResponseOneOf9)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GetRecords200ResponseOneOf10`. If the actual instance is not `GetRecords200ResponseOneOf10`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GetRecords200ResponseOneOf10`
     * @throws ClassCastException if the instance is not `GetRecords200ResponseOneOf10`
     */
    public GetRecords200ResponseOneOf10 getGetRecords200ResponseOneOf10() throws ClassCastException {
        return (GetRecords200ResponseOneOf10)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetRecords200Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with GetRecords200ResponseOneOf
        try {
            GetRecords200ResponseOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf1
        try {
            GetRecords200ResponseOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf2
        try {
            GetRecords200ResponseOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf3
        try {
            GetRecords200ResponseOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf4
        try {
            GetRecords200ResponseOneOf4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf5
        try {
            GetRecords200ResponseOneOf5.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf5 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf6
        try {
            GetRecords200ResponseOneOf6.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf7
        try {
            GetRecords200ResponseOneOf7.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf7 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf8
        try {
            GetRecords200ResponseOneOf8.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf8 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf9
        try {
            GetRecords200ResponseOneOf9.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf9 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GetRecords200ResponseOneOf10
        try {
            GetRecords200ResponseOneOf10.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GetRecords200ResponseOneOf10 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetRecords200Response with oneOf schemas: GetRecords200ResponseOneOf, GetRecords200ResponseOneOf1, GetRecords200ResponseOneOf10, GetRecords200ResponseOneOf2, GetRecords200ResponseOneOf3, GetRecords200ResponseOneOf4, GetRecords200ResponseOneOf5, GetRecords200ResponseOneOf6, GetRecords200ResponseOneOf7, GetRecords200ResponseOneOf8, GetRecords200ResponseOneOf9. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetRecords200Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetRecords200Response
     * @throws IOException if the JSON string is invalid with respect to GetRecords200Response
     */
    public static GetRecords200Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetRecords200Response.class);
    }

    /**
     * Convert an instance of GetRecords200Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

