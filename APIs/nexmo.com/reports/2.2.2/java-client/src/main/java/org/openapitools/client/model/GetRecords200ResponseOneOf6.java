/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CsvNi;
import org.openapitools.client.model.ProductNi;
import org.openapitools.client.model.ReportResponseTopLevelLinks;
import org.openapitools.client.model.RequestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRecords200ResponseOneOf6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRecords200ResponseOneOf6 {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ReportResponseTopLevelLinks links;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_IDS_NOT_FOUND = "ids_not_found";
  @SerializedName(SERIALIZED_NAME_IDS_NOT_FOUND)
  private String idsNotFound;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_RECEIVED_AT = "received_at";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AT)
  private LocalDate receivedAt;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_STATUS = "request_status";
  @SerializedName(SERIALIZED_NAME_REQUEST_STATUS)
  private RequestStatus requestStatus;

  public static final String SERIALIZED_NAME_ITEMS_COUNT = "items_count";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private Integer itemsCount;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProductNi product;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<CsvNi> records = new ArrayList<>();

  public GetRecords200ResponseOneOf6() {
  }

  public GetRecords200ResponseOneOf6 links(ReportResponseTopLevelLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public ReportResponseTopLevelLinks getLinks() {
    return links;
  }

  public void setLinks(ReportResponseTopLevelLinks links) {
    this.links = links;
  }


  public GetRecords200ResponseOneOf6 accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public GetRecords200ResponseOneOf6 currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the price of the request.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public GetRecords200ResponseOneOf6 idsNotFound(String idsNotFound) {
    this.idsNotFound = idsNotFound;
    return this;
  }

  /**
   * If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
   * @return idsNotFound
   */
  @javax.annotation.Nullable
  public String getIdsNotFound() {
    return idsNotFound;
  }

  public void setIdsNotFound(String idsNotFound) {
    this.idsNotFound = idsNotFound;
  }


  public GetRecords200ResponseOneOf6 price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the request.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public GetRecords200ResponseOneOf6 receivedAt(LocalDate receivedAt) {
    this.receivedAt = receivedAt;
    return this;
  }

  /**
   * Time at which the report request was received by the service.
   * @return receivedAt
   */
  @javax.annotation.Nullable
  public LocalDate getReceivedAt() {
    return receivedAt;
  }

  public void setReceivedAt(LocalDate receivedAt) {
    this.receivedAt = receivedAt;
  }


  public GetRecords200ResponseOneOf6 requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * UUID of the request.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public GetRecords200ResponseOneOf6 requestStatus(RequestStatus requestStatus) {
    this.requestStatus = requestStatus;
    return this;
  }

  /**
   * Get requestStatus
   * @return requestStatus
   */
  @javax.annotation.Nullable
  public RequestStatus getRequestStatus() {
    return requestStatus;
  }

  public void setRequestStatus(RequestStatus requestStatus) {
    this.requestStatus = requestStatus;
  }


  public GetRecords200ResponseOneOf6 itemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

  /**
   * The number of returned records
   * @return itemsCount
   */
  @javax.annotation.Nullable
  public Integer getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
  }


  public GetRecords200ResponseOneOf6 product(ProductNi product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ProductNi getProduct() {
    return product;
  }

  public void setProduct(ProductNi product) {
    this.product = product;
  }


  public GetRecords200ResponseOneOf6 records(List<CsvNi> records) {
    this.records = records;
    return this;
  }

  public GetRecords200ResponseOneOf6 addRecordsItem(CsvNi recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

  /**
   * Records in JSON format
   * @return records
   */
  @javax.annotation.Nullable
  public List<CsvNi> getRecords() {
    return records;
  }

  public void setRecords(List<CsvNi> records) {
    this.records = records;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecords200ResponseOneOf6 getRecords200ResponseOneOf6 = (GetRecords200ResponseOneOf6) o;
    return Objects.equals(this.links, getRecords200ResponseOneOf6.links) &&
        Objects.equals(this.accountId, getRecords200ResponseOneOf6.accountId) &&
        Objects.equals(this.currency, getRecords200ResponseOneOf6.currency) &&
        Objects.equals(this.idsNotFound, getRecords200ResponseOneOf6.idsNotFound) &&
        Objects.equals(this.price, getRecords200ResponseOneOf6.price) &&
        Objects.equals(this.receivedAt, getRecords200ResponseOneOf6.receivedAt) &&
        Objects.equals(this.requestId, getRecords200ResponseOneOf6.requestId) &&
        Objects.equals(this.requestStatus, getRecords200ResponseOneOf6.requestStatus) &&
        Objects.equals(this.itemsCount, getRecords200ResponseOneOf6.itemsCount) &&
        Objects.equals(this.product, getRecords200ResponseOneOf6.product) &&
        Objects.equals(this.records, getRecords200ResponseOneOf6.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, accountId, currency, idsNotFound, price, receivedAt, requestId, requestStatus, itemsCount, product, records);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecords200ResponseOneOf6 {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    idsNotFound: ").append(toIndentedString(idsNotFound)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestStatus: ").append(toIndentedString(requestStatus)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("account_id");
    openapiFields.add("currency");
    openapiFields.add("ids_not_found");
    openapiFields.add("price");
    openapiFields.add("received_at");
    openapiFields.add("request_id");
    openapiFields.add("request_status");
    openapiFields.add("items_count");
    openapiFields.add("product");
    openapiFields.add("records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecords200ResponseOneOf6
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecords200ResponseOneOf6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecords200ResponseOneOf6 is not found in the empty JSON string", GetRecords200ResponseOneOf6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecords200ResponseOneOf6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecords200ResponseOneOf6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        ReportResponseTopLevelLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("ids_not_found") != null && !jsonObj.get("ids_not_found").isJsonNull()) && !jsonObj.get("ids_not_found").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids_not_found` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ids_not_found").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      // validate the optional field `request_status`
      if (jsonObj.get("request_status") != null && !jsonObj.get("request_status").isJsonNull()) {
        RequestStatus.validateJsonElement(jsonObj.get("request_status"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProductNi.validateJsonElement(jsonObj.get("product"));
      }
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            CsvNi.validateJsonElement(jsonArrayrecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecords200ResponseOneOf6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecords200ResponseOneOf6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecords200ResponseOneOf6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecords200ResponseOneOf6.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecords200ResponseOneOf6>() {
           @Override
           public void write(JsonWriter out, GetRecords200ResponseOneOf6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecords200ResponseOneOf6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecords200ResponseOneOf6 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecords200ResponseOneOf6
   * @throws IOException if the JSON string is invalid with respect to GetRecords200ResponseOneOf6
   */
  public static GetRecords200ResponseOneOf6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecords200ResponseOneOf6.class);
  }

  /**
   * Convert an instance of GetRecords200ResponseOneOf6 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

