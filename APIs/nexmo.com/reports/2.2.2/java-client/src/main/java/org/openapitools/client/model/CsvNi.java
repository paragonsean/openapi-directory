/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Number Insight
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CsvNi {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATE_RECEIVED = "date_received";
  @SerializedName(SERIALIZED_NAME_DATE_RECEIVED)
  private LocalDate dateReceived;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "network_name";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public static final String SERIALIZED_NAME_NETWORK_TYPE = "network_type";
  @SerializedName(SERIALIZED_NAME_NETWORK_TYPE)
  private String networkType;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PORTED = "ported";
  @SerializedName(SERIALIZED_NAME_PORTED)
  private String ported;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_REACHABLE = "reachable";
  @SerializedName(SERIALIZED_NAME_REACHABLE)
  private String reachable;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "response_code";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private String responseCode;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private String totalPrice;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private String valid;

  public CsvNi() {
  }

  public CsvNi accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CsvNi country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country of the looked up number.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CsvNi countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Country name of the looked up number.
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public CsvNi currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the price of the request.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CsvNi dateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
    return this;
  }

  /**
   * Date of the request.
   * @return dateReceived
   */
  @javax.annotation.Nullable
  public LocalDate getDateReceived() {
    return dateReceived;
  }

  public void setDateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
  }


  public CsvNi firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the owner of the looked up number.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CsvNi lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of the owner of the looked up number.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CsvNi network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Network of the looked up number.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public CsvNi networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  /**
   * Network name of the looked up number.
   * @return networkName
   */
  @javax.annotation.Nullable
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public CsvNi networkType(String networkType) {
    this.networkType = networkType;
    return this;
  }

  /**
   * Network type of the looked up number.
   * @return networkType
   */
  @javax.annotation.Nullable
  public String getNetworkType() {
    return networkType;
  }

  public void setNetworkType(String networkType) {
    this.networkType = networkType;
  }


  public CsvNi number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number looked up for this request.
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public CsvNi ported(String ported) {
    this.ported = ported;
    return this;
  }

  /**
   * Is the looked up number ported.
   * @return ported
   */
  @javax.annotation.Nullable
  public String getPorted() {
    return ported;
  }

  public void setPorted(String ported) {
    this.ported = ported;
  }


  public CsvNi productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Type of Number Insight request.
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public CsvNi reachable(String reachable) {
    this.reachable = reachable;
    return this;
  }

  /**
   * Is the looked up number reachable.
   * @return reachable
   */
  @javax.annotation.Nullable
  public String getReachable() {
    return reachable;
  }

  public void setReachable(String reachable) {
    this.reachable = reachable;
  }


  public CsvNi requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * UUID of the request.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CsvNi responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * Response code of the Number Insight request.
   * @return responseCode
   */
  @javax.annotation.Nullable
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }


  public CsvNi status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the Number Insight request.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CsvNi totalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Total price of the request.
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public String getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
  }


  public CsvNi valid(String valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Is the looked up number valid.
   * @return valid
   */
  @javax.annotation.Nullable
  public String getValid() {
    return valid;
  }

  public void setValid(String valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CsvNi csvNi = (CsvNi) o;
    return Objects.equals(this.accountId, csvNi.accountId) &&
        Objects.equals(this.country, csvNi.country) &&
        Objects.equals(this.countryName, csvNi.countryName) &&
        Objects.equals(this.currency, csvNi.currency) &&
        Objects.equals(this.dateReceived, csvNi.dateReceived) &&
        Objects.equals(this.firstName, csvNi.firstName) &&
        Objects.equals(this.lastName, csvNi.lastName) &&
        Objects.equals(this.network, csvNi.network) &&
        Objects.equals(this.networkName, csvNi.networkName) &&
        Objects.equals(this.networkType, csvNi.networkType) &&
        Objects.equals(this.number, csvNi.number) &&
        Objects.equals(this.ported, csvNi.ported) &&
        Objects.equals(this.productType, csvNi.productType) &&
        Objects.equals(this.reachable, csvNi.reachable) &&
        Objects.equals(this.requestId, csvNi.requestId) &&
        Objects.equals(this.responseCode, csvNi.responseCode) &&
        Objects.equals(this.status, csvNi.status) &&
        Objects.equals(this.totalPrice, csvNi.totalPrice) &&
        Objects.equals(this.valid, csvNi.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, country, countryName, currency, dateReceived, firstName, lastName, network, networkName, networkType, number, ported, productType, reachable, requestId, responseCode, status, totalPrice, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CsvNi {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateReceived: ").append(toIndentedString(dateReceived)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    networkType: ").append(toIndentedString(networkType)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    ported: ").append(toIndentedString(ported)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    reachable: ").append(toIndentedString(reachable)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("country");
    openapiFields.add("country_name");
    openapiFields.add("currency");
    openapiFields.add("date_received");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("network");
    openapiFields.add("network_name");
    openapiFields.add("network_type");
    openapiFields.add("number");
    openapiFields.add("ported");
    openapiFields.add("product_type");
    openapiFields.add("reachable");
    openapiFields.add("request_id");
    openapiFields.add("response_code");
    openapiFields.add("status");
    openapiFields.add("total_price");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CsvNi
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CsvNi.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CsvNi is not found in the empty JSON string", CsvNi.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CsvNi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CsvNi` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("network_name") != null && !jsonObj.get("network_name").isJsonNull()) && !jsonObj.get("network_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_name").toString()));
      }
      if ((jsonObj.get("network_type") != null && !jsonObj.get("network_type").isJsonNull()) && !jsonObj.get("network_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_type").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) && !jsonObj.get("ported").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ported` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ported").toString()));
      }
      if ((jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) && !jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      if ((jsonObj.get("reachable") != null && !jsonObj.get("reachable").isJsonNull()) && !jsonObj.get("reachable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reachable").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("response_code") != null && !jsonObj.get("response_code").isJsonNull()) && !jsonObj.get("response_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_code").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("valid") != null && !jsonObj.get("valid").isJsonNull()) && !jsonObj.get("valid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CsvNi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CsvNi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CsvNi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CsvNi.class));

       return (TypeAdapter<T>) new TypeAdapter<CsvNi>() {
           @Override
           public void write(JsonWriter out, CsvNi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CsvNi read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CsvNi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CsvNi
   * @throws IOException if the JSON string is invalid with respect to CsvNi
   */
  public static CsvNi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CsvNi.class);
  }

  /**
   * Convert an instance of CsvNi to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

