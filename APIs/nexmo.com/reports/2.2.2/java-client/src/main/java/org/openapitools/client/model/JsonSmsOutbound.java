/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Direction;
import org.openapitools.client.model.SmsStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Outbound SMS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:26.245497-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonSmsOutbound {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CLIENT_REF = "client_ref";
  @SerializedName(SERIALIZED_NAME_CLIENT_REF)
  private String clientRef;

  public static final String SERIALIZED_NAME_CONCATENATED = "concatenated";
  @SerializedName(SERIALIZED_NAME_CONCATENATED)
  private Boolean concatenated = false;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATE_FINALIZED = "date_finalized";
  @SerializedName(SERIALIZED_NAME_DATE_FINALIZED)
  private LocalDate dateFinalized;

  public static final String SERIALIZED_NAME_DATE_RECEIVED = "date_received";
  @SerializedName(SERIALIZED_NAME_DATE_RECEIVED)
  private LocalDate dateReceived;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private Direction direction;

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_CODE_DESCRIPTION = "error_code_description";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE_DESCRIPTION)
  private String errorCodeDescription;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_LATENCY = "latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  private Integer latency;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "network_name";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SmsStatus status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private String totalPrice;

  public JsonSmsOutbound() {
  }

  public JsonSmsOutbound accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public JsonSmsOutbound clientRef(String clientRef) {
    this.clientRef = clientRef;
    return this;
  }

  /**
   * Search for messages with this &#x60;client_ref&#x60;.
   * @return clientRef
   */
  @javax.annotation.Nullable
  public String getClientRef() {
    return clientRef;
  }

  public void setClientRef(String clientRef) {
    this.clientRef = clientRef;
  }


  public JsonSmsOutbound concatenated(Boolean concatenated) {
    this.concatenated = concatenated;
    return this;
  }

  /**
   * Whether the SMS was split up into multiple parts (due to its length).
   * @return concatenated
   */
  @javax.annotation.Nullable
  public Boolean getConcatenated() {
    return concatenated;
  }

  public void setConcatenated(Boolean concatenated) {
    this.concatenated = concatenated;
  }


  public JsonSmsOutbound country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country where the request was sent.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public JsonSmsOutbound countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Country name where the request was sent.
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public JsonSmsOutbound currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the price of the request.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public JsonSmsOutbound dateFinalized(LocalDate dateFinalized) {
    this.dateFinalized = dateFinalized;
    return this;
  }

  /**
   * Date when the request was finalized.
   * @return dateFinalized
   */
  @javax.annotation.Nullable
  public LocalDate getDateFinalized() {
    return dateFinalized;
  }

  public void setDateFinalized(LocalDate dateFinalized) {
    this.dateFinalized = dateFinalized;
  }


  public JsonSmsOutbound dateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
    return this;
  }

  /**
   * Date of the request.
   * @return dateReceived
   */
  @javax.annotation.Nullable
  public LocalDate getDateReceived() {
    return dateReceived;
  }

  public void setDateReceived(LocalDate dateReceived) {
    this.dateReceived = dateReceived;
  }


  public JsonSmsOutbound direction(Direction direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public Direction getDirection() {
    return direction;
  }

  public void setDirection(Direction direction) {
    this.direction = direction;
  }


  public JsonSmsOutbound errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Error code of the request.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public JsonSmsOutbound errorCodeDescription(String errorCodeDescription) {
    this.errorCodeDescription = errorCodeDescription;
    return this;
  }

  /**
   * Description of the error code of the request.
   * @return errorCodeDescription
   */
  @javax.annotation.Nullable
  public String getErrorCodeDescription() {
    return errorCodeDescription;
  }

  public void setErrorCodeDescription(String errorCodeDescription) {
    this.errorCodeDescription = errorCodeDescription;
  }


  public JsonSmsOutbound from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Request from this number.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public JsonSmsOutbound latency(Integer latency) {
    this.latency = latency;
    return this;
  }

  /**
   * Latency of the request in ms.
   * @return latency
   */
  @javax.annotation.Nullable
  public Integer getLatency() {
    return latency;
  }

  public void setLatency(Integer latency) {
    this.latency = latency;
  }


  public JsonSmsOutbound messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Id of the request.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public JsonSmsOutbound network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Network used to send the request.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public JsonSmsOutbound networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  /**
   * Name of the network used to send the request.
   * @return networkName
   */
  @javax.annotation.Nullable
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public JsonSmsOutbound status(SmsStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SmsStatus getStatus() {
    return status;
  }

  public void setStatus(SmsStatus status) {
    this.status = status;
  }


  public JsonSmsOutbound to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Request to this number.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public JsonSmsOutbound totalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Price of the request.
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public String getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSmsOutbound jsonSmsOutbound = (JsonSmsOutbound) o;
    return Objects.equals(this.accountId, jsonSmsOutbound.accountId) &&
        Objects.equals(this.clientRef, jsonSmsOutbound.clientRef) &&
        Objects.equals(this.concatenated, jsonSmsOutbound.concatenated) &&
        Objects.equals(this.country, jsonSmsOutbound.country) &&
        Objects.equals(this.countryName, jsonSmsOutbound.countryName) &&
        Objects.equals(this.currency, jsonSmsOutbound.currency) &&
        Objects.equals(this.dateFinalized, jsonSmsOutbound.dateFinalized) &&
        Objects.equals(this.dateReceived, jsonSmsOutbound.dateReceived) &&
        Objects.equals(this.direction, jsonSmsOutbound.direction) &&
        Objects.equals(this.errorCode, jsonSmsOutbound.errorCode) &&
        Objects.equals(this.errorCodeDescription, jsonSmsOutbound.errorCodeDescription) &&
        Objects.equals(this.from, jsonSmsOutbound.from) &&
        Objects.equals(this.latency, jsonSmsOutbound.latency) &&
        Objects.equals(this.messageId, jsonSmsOutbound.messageId) &&
        Objects.equals(this.network, jsonSmsOutbound.network) &&
        Objects.equals(this.networkName, jsonSmsOutbound.networkName) &&
        Objects.equals(this.status, jsonSmsOutbound.status) &&
        Objects.equals(this.to, jsonSmsOutbound.to) &&
        Objects.equals(this.totalPrice, jsonSmsOutbound.totalPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, clientRef, concatenated, country, countryName, currency, dateFinalized, dateReceived, direction, errorCode, errorCodeDescription, from, latency, messageId, network, networkName, status, to, totalPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSmsOutbound {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    clientRef: ").append(toIndentedString(clientRef)).append("\n");
    sb.append("    concatenated: ").append(toIndentedString(concatenated)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateFinalized: ").append(toIndentedString(dateFinalized)).append("\n");
    sb.append("    dateReceived: ").append(toIndentedString(dateReceived)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorCodeDescription: ").append(toIndentedString(errorCodeDescription)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("client_ref");
    openapiFields.add("concatenated");
    openapiFields.add("country");
    openapiFields.add("country_name");
    openapiFields.add("currency");
    openapiFields.add("date_finalized");
    openapiFields.add("date_received");
    openapiFields.add("direction");
    openapiFields.add("error_code");
    openapiFields.add("error_code_description");
    openapiFields.add("from");
    openapiFields.add("latency");
    openapiFields.add("message_id");
    openapiFields.add("network");
    openapiFields.add("network_name");
    openapiFields.add("status");
    openapiFields.add("to");
    openapiFields.add("total_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonSmsOutbound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSmsOutbound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSmsOutbound is not found in the empty JSON string", JsonSmsOutbound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSmsOutbound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSmsOutbound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("client_ref") != null && !jsonObj.get("client_ref").isJsonNull()) && !jsonObj.get("client_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ref").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        Direction.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("error_code") != null && !jsonObj.get("error_code").isJsonNull()) && !jsonObj.get("error_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code").toString()));
      }
      if ((jsonObj.get("error_code_description") != null && !jsonObj.get("error_code_description").isJsonNull()) && !jsonObj.get("error_code_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code_description").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("network_name") != null && !jsonObj.get("network_name").isJsonNull()) && !jsonObj.get("network_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SmsStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSmsOutbound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSmsOutbound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSmsOutbound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSmsOutbound.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSmsOutbound>() {
           @Override
           public void write(JsonWriter out, JsonSmsOutbound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSmsOutbound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonSmsOutbound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonSmsOutbound
   * @throws IOException if the JSON string is invalid with respect to JsonSmsOutbound
   */
  public static JsonSmsOutbound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSmsOutbound.class);
  }

  /**
   * Convert an instance of JsonSmsOutbound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

