/*
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelReport409Response;
import org.openapitools.client.model.CreateAsyncReport200Response;
import org.openapitools.client.model.CreateAsyncReport400Response;
import org.openapitools.client.model.CreateAsyncReport403Response;
import org.openapitools.client.model.CreateAsyncReport422Response;
import org.openapitools.client.model.CreateAsyncReportRequest;
import org.openapitools.client.model.DownloadReport200Response;
import org.openapitools.client.model.GetRecords200Response;
import org.openapitools.client.model.GetRecords403Response;
import org.openapitools.client.model.GetRecords422Response;
import org.openapitools.client.model.GetReport200Response;
import org.openapitools.client.model.GetReport404Response;
import org.openapitools.client.model.ListReports200Response;
import org.openapitools.client.model.ListReports400Response;
import org.openapitools.client.model.ListReports401Response;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Cancel the execution of a report
     *
     * Cancel the execution of a pending or processing report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelReportTest() throws ApiException {
        String reportId = null;
        GetReport200Response response = api.cancelReport(reportId);
        // TODO: test validations
    }

    /**
     * Create an asynchronous report
     *
     * Request a report on your account activity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAsyncReportTest() throws ApiException {
        CreateAsyncReportRequest createAsyncReportRequest = null;
        CreateAsyncReport200Response response = api.createAsyncReport(createAsyncReportRequest);
        // TODO: test validations
    }

    /**
     * Get report data
     *
     * Download a zipped archive of the rendered report. The file is available for download for 72 hours.&lt;br&gt; The zip file will be named &#x60;&lt;PRODUCT&gt;_&lt;REPORT_ID&gt;.zip&#x60;&lt;br&gt; The csv file in the zip archive will be named as &#x60;report_&lt;PRODUCT&gt;_&lt;ACCOUNT_ID&gt;_&lt;DATE&gt;.csv&#x60; the date will be formatted as &#x60;yyyyMMdd&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadReportTest() throws ApiException {
        String fileId = null;
        DownloadReport200Response response = api.downloadReport(fileId);
        // TODO: test validations
    }

    /**
     * Load records synchronously
     *
     * Fetch usage data synchronously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordsTest() throws ApiException {
        String accountId = null;
        String product = null;
        String direction = null;
        String id = null;
        LocalDate dateStart = null;
        LocalDate dateEnd = null;
        Boolean includeMessage = null;
        Boolean showConcatenated = null;
        String status = null;
        GetRecords200Response response = api.getRecords(accountId, product, direction, id, dateStart, dateEnd, includeMessage, showConcatenated, status);
        // TODO: test validations
    }

    /**
     * Get status of report
     *
     * Retrieve status and metadata about a requested report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportTest() throws ApiException {
        String reportId = null;
        GetReport200Response response = api.getReport(reportId);
        // TODO: test validations
    }

    /**
     * List reports
     *
     * List reports created by the specified account based on filtered provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportsTest() throws ApiException {
        String accountId = null;
        String status = null;
        LocalDate dateFrom = null;
        LocalDate dateTo = null;
        ListReports200Response response = api.listReports(accountId, status, dateFrom, dateTo);
        // TODO: test validations
    }

}
