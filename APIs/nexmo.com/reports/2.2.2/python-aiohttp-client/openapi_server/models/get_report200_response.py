# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asr_response_get_report import AsrResponseGetReport
from openapi_server.models.asr_status import AsrStatus
from openapi_server.models.conversations_response_get_report import ConversationsResponseGetReport
from openapi_server.models.direction import Direction
from openapi_server.models.in_app_voice_response_get_report import InAppVoiceResponseGetReport
from openapi_server.models.links import Links
from openapi_server.models.messages_response_get_report import MessagesResponseGetReport
from openapi_server.models.number_insight_response_get_report import NumberInsightResponseGetReport
from openapi_server.models.product_asr import ProductAsr
from openapi_server.models.request_status import RequestStatus
from openapi_server.models.sms_response_get_report import SmsResponseGetReport
from openapi_server.models.verify_api_response_get_report import VerifyApiResponseGetReport
from openapi_server.models.voice_call_response_get_report import VoiceCallResponseGetReport
from openapi_server.models.websocket_call_response_get_report import WebsocketCallResponseGetReport
from openapi_server import util


class GetReport200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Links=None, account_id: str=None, callback_url: str=None, date_end: date=None, date_start: date=None, include_subaccounts: bool=False, items_count: int=None, product: ProductAsr=None, receive_time: date=None, request_id: str=None, request_status: RequestStatus=None, start_time: date=None, account_ref: str=None, client_ref: str=None, direction: Direction=None, _from: str=None, include_message: bool=False, network: str=None, show_concatenated: bool=False, status: AsrStatus=None, to: str=None, conversation_id: str=None, number: str=None, id: str=None):
        """GetReport200Response - a model defined in OpenAPI

        :param links: The links of this GetReport200Response.
        :param account_id: The account_id of this GetReport200Response.
        :param callback_url: The callback_url of this GetReport200Response.
        :param date_end: The date_end of this GetReport200Response.
        :param date_start: The date_start of this GetReport200Response.
        :param include_subaccounts: The include_subaccounts of this GetReport200Response.
        :param items_count: The items_count of this GetReport200Response.
        :param product: The product of this GetReport200Response.
        :param receive_time: The receive_time of this GetReport200Response.
        :param request_id: The request_id of this GetReport200Response.
        :param request_status: The request_status of this GetReport200Response.
        :param start_time: The start_time of this GetReport200Response.
        :param account_ref: The account_ref of this GetReport200Response.
        :param client_ref: The client_ref of this GetReport200Response.
        :param direction: The direction of this GetReport200Response.
        :param _from: The _from of this GetReport200Response.
        :param include_message: The include_message of this GetReport200Response.
        :param network: The network of this GetReport200Response.
        :param show_concatenated: The show_concatenated of this GetReport200Response.
        :param status: The status of this GetReport200Response.
        :param to: The to of this GetReport200Response.
        :param conversation_id: The conversation_id of this GetReport200Response.
        :param number: The number of this GetReport200Response.
        :param id: The id of this GetReport200Response.
        """
        self.openapi_types = {
            'links': Links,
            'account_id': str,
            'callback_url': str,
            'date_end': date,
            'date_start': date,
            'include_subaccounts': bool,
            'items_count': int,
            'product': ProductAsr,
            'receive_time': date,
            'request_id': str,
            'request_status': RequestStatus,
            'start_time': date,
            'account_ref': str,
            'client_ref': str,
            'direction': Direction,
            '_from': str,
            'include_message': bool,
            'network': str,
            'show_concatenated': bool,
            'status': AsrStatus,
            'to': str,
            'conversation_id': str,
            'number': str,
            'id': str
        }

        self.attribute_map = {
            'links': '_links',
            'account_id': 'account_id',
            'callback_url': 'callback_url',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'include_subaccounts': 'include_subaccounts',
            'items_count': 'items_count',
            'product': 'product',
            'receive_time': 'receive_time',
            'request_id': 'request_id',
            'request_status': 'request_status',
            'start_time': 'start_time',
            'account_ref': 'account_ref',
            'client_ref': 'client_ref',
            'direction': 'direction',
            '_from': 'from',
            'include_message': 'include_message',
            'network': 'network',
            'show_concatenated': 'show_concatenated',
            'status': 'status',
            'to': 'to',
            'conversation_id': 'conversation_id',
            'number': 'number',
            'id': 'id'
        }

        self._links = links
        self._account_id = account_id
        self._callback_url = callback_url
        self._date_end = date_end
        self._date_start = date_start
        self._include_subaccounts = include_subaccounts
        self._items_count = items_count
        self._product = product
        self._receive_time = receive_time
        self._request_id = request_id
        self._request_status = request_status
        self._start_time = start_time
        self._account_ref = account_ref
        self._client_ref = client_ref
        self._direction = direction
        self.__from = _from
        self._include_message = include_message
        self._network = network
        self._show_concatenated = show_concatenated
        self._status = status
        self._to = to
        self._conversation_id = conversation_id
        self._number = number
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReport200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_report_200_response of this GetReport200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this GetReport200Response.


        :return: The links of this GetReport200Response.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetReport200Response.


        :param links: The links of this GetReport200Response.
        :type links: Links
        """

        self._links = links

    @property
    def account_id(self):
        """Gets the account_id of this GetReport200Response.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this GetReport200Response.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetReport200Response.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this GetReport200Response.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def callback_url(self):
        """Gets the callback_url of this GetReport200Response.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :return: The callback_url of this GetReport200Response.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this GetReport200Response.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :param callback_url: The callback_url of this GetReport200Response.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def date_end(self):
        """Gets the date_end of this GetReport200Response.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]Â±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :return: The date_end of this GetReport200Response.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this GetReport200Response.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]Â±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :param date_end: The date_end of this GetReport200Response.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this GetReport200Response.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]Â±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :return: The date_start of this GetReport200Response.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this GetReport200Response.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]Â±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :param date_start: The date_start of this GetReport200Response.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def include_subaccounts(self):
        """Gets the include_subaccounts of this GetReport200Response.

        Whether to include subaccounts or not.

        :return: The include_subaccounts of this GetReport200Response.
        :rtype: bool
        """
        return self._include_subaccounts

    @include_subaccounts.setter
    def include_subaccounts(self, include_subaccounts):
        """Sets the include_subaccounts of this GetReport200Response.

        Whether to include subaccounts or not.

        :param include_subaccounts: The include_subaccounts of this GetReport200Response.
        :type include_subaccounts: bool
        """

        self._include_subaccounts = include_subaccounts

    @property
    def items_count(self):
        """Gets the items_count of this GetReport200Response.

        The number of rows in the resulting file (when report has been completed).

        :return: The items_count of this GetReport200Response.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this GetReport200Response.

        The number of rows in the resulting file (when report has been completed).

        :param items_count: The items_count of this GetReport200Response.
        :type items_count: int
        """

        self._items_count = items_count

    @property
    def product(self):
        """Gets the product of this GetReport200Response.


        :return: The product of this GetReport200Response.
        :rtype: ProductAsr
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GetReport200Response.


        :param product: The product of this GetReport200Response.
        :type product: ProductAsr
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def receive_time(self):
        """Gets the receive_time of this GetReport200Response.

        Time at which the report request was received by the service.

        :return: The receive_time of this GetReport200Response.
        :rtype: date
        """
        return self._receive_time

    @receive_time.setter
    def receive_time(self, receive_time):
        """Sets the receive_time of this GetReport200Response.

        Time at which the report request was received by the service.

        :param receive_time: The receive_time of this GetReport200Response.
        :type receive_time: date
        """

        self._receive_time = receive_time

    @property
    def request_id(self):
        """Gets the request_id of this GetReport200Response.

        UUID of the request.

        :return: The request_id of this GetReport200Response.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GetReport200Response.

        UUID of the request.

        :param request_id: The request_id of this GetReport200Response.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_status(self):
        """Gets the request_status of this GetReport200Response.


        :return: The request_status of this GetReport200Response.
        :rtype: RequestStatus
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this GetReport200Response.


        :param request_status: The request_status of this GetReport200Response.
        :type request_status: RequestStatus
        """

        self._request_status = request_status

    @property
    def start_time(self):
        """Gets the start_time of this GetReport200Response.

        Time at which the report processing of the report has started.

        :return: The start_time of this GetReport200Response.
        :rtype: date
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetReport200Response.

        Time at which the report processing of the report has started.

        :param start_time: The start_time of this GetReport200Response.
        :type start_time: date
        """

        self._start_time = start_time

    @property
    def account_ref(self):
        """Gets the account_ref of this GetReport200Response.

        Search for messages with this `account_ref`.

        :return: The account_ref of this GetReport200Response.
        :rtype: str
        """
        return self._account_ref

    @account_ref.setter
    def account_ref(self, account_ref):
        """Sets the account_ref of this GetReport200Response.

        Search for messages with this `account_ref`.

        :param account_ref: The account_ref of this GetReport200Response.
        :type account_ref: str
        """
        if account_ref is not None and len(account_ref) > 40:
            raise ValueError("Invalid value for `account_ref`, length must be less than or equal to `40`")
        if account_ref is not None and len(account_ref) < 40:
            raise ValueError("Invalid value for `account_ref`, length must be greater than or equal to `40`")

        self._account_ref = account_ref

    @property
    def client_ref(self):
        """Gets the client_ref of this GetReport200Response.

        Search for messages with this `client_ref`.

        :return: The client_ref of this GetReport200Response.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this GetReport200Response.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this GetReport200Response.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def direction(self):
        """Gets the direction of this GetReport200Response.


        :return: The direction of this GetReport200Response.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GetReport200Response.


        :param direction: The direction of this GetReport200Response.
        :type direction: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this GetReport200Response.

        Request from this number.

        :return: The _from of this GetReport200Response.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetReport200Response.

        Request from this number.

        :param _from: The _from of this GetReport200Response.
        :type _from: str
        """

        self.__from = _from

    @property
    def include_message(self):
        """Gets the include_message of this GetReport200Response.

        Include the text of messages in the report.

        :return: The include_message of this GetReport200Response.
        :rtype: bool
        """
        return self._include_message

    @include_message.setter
    def include_message(self, include_message):
        """Sets the include_message of this GetReport200Response.

        Include the text of messages in the report.

        :param include_message: The include_message of this GetReport200Response.
        :type include_message: bool
        """

        self._include_message = include_message

    @property
    def network(self):
        """Gets the network of this GetReport200Response.

        Network used to send the request.

        :return: The network of this GetReport200Response.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetReport200Response.

        Network used to send the request.

        :param network: The network of this GetReport200Response.
        :type network: str
        """

        self._network = network

    @property
    def show_concatenated(self):
        """Gets the show_concatenated of this GetReport200Response.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :return: The show_concatenated of this GetReport200Response.
        :rtype: bool
        """
        return self._show_concatenated

    @show_concatenated.setter
    def show_concatenated(self, show_concatenated):
        """Sets the show_concatenated of this GetReport200Response.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :param show_concatenated: The show_concatenated of this GetReport200Response.
        :type show_concatenated: bool
        """

        self._show_concatenated = show_concatenated

    @property
    def status(self):
        """Gets the status of this GetReport200Response.


        :return: The status of this GetReport200Response.
        :rtype: AsrStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetReport200Response.


        :param status: The status of this GetReport200Response.
        :type status: AsrStatus
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this GetReport200Response.

        Request to this number.

        :return: The to of this GetReport200Response.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetReport200Response.

        Request to this number.

        :param to: The to of this GetReport200Response.
        :type to: str
        """

        self._to = to

    @property
    def conversation_id(self):
        """Gets the conversation_id of this GetReport200Response.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this GetReport200Response.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this GetReport200Response.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this GetReport200Response.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def number(self):
        """Gets the number of this GetReport200Response.

        Search only request for the target number.

        :return: The number of this GetReport200Response.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GetReport200Response.

        Search only request for the target number.

        :param number: The number of this GetReport200Response.
        :type number: str
        """

        self._number = number

    @property
    def id(self):
        """Gets the id of this GetReport200Response.

        Search only messages with the specified uuid.

        :return: The id of this GetReport200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetReport200Response.

        Search only messages with the specified uuid.

        :param id: The id of this GetReport200Response.
        :type id: str
        """

        self._id = id
