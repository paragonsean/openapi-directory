# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_in_app_voice import ProductInAppVoice
from openapi_server.models.report_request import ReportRequest
from openapi_server import util


class INAPPVOICE(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, callback_url: str=None, date_end: date=None, date_start: date=None, include_subaccounts: bool=False, product: ProductInAppVoice=None, conversation_id: str=None):
        """INAPPVOICE - a model defined in OpenAPI

        :param account_id: The account_id of this INAPPVOICE.
        :param callback_url: The callback_url of this INAPPVOICE.
        :param date_end: The date_end of this INAPPVOICE.
        :param date_start: The date_start of this INAPPVOICE.
        :param include_subaccounts: The include_subaccounts of this INAPPVOICE.
        :param product: The product of this INAPPVOICE.
        :param conversation_id: The conversation_id of this INAPPVOICE.
        """
        self.openapi_types = {
            'account_id': str,
            'callback_url': str,
            'date_end': date,
            'date_start': date,
            'include_subaccounts': bool,
            'product': ProductInAppVoice,
            'conversation_id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'callback_url': 'callback_url',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'include_subaccounts': 'include_subaccounts',
            'product': 'product',
            'conversation_id': 'conversation_id'
        }

        self._account_id = account_id
        self._callback_url = callback_url
        self._date_end = date_end
        self._date_start = date_start
        self._include_subaccounts = include_subaccounts
        self._product = product
        self._conversation_id = conversation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'INAPPVOICE':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IN-APP-VOICE of this INAPPVOICE.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this INAPPVOICE.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this INAPPVOICE.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this INAPPVOICE.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this INAPPVOICE.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def callback_url(self):
        """Gets the callback_url of this INAPPVOICE.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :return: The callback_url of this INAPPVOICE.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this INAPPVOICE.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :param callback_url: The callback_url of this INAPPVOICE.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def date_end(self):
        """Gets the date_end of this INAPPVOICE.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :return: The date_end of this INAPPVOICE.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this INAPPVOICE.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :param date_end: The date_end of this INAPPVOICE.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this INAPPVOICE.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :return: The date_start of this INAPPVOICE.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this INAPPVOICE.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :param date_start: The date_start of this INAPPVOICE.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def include_subaccounts(self):
        """Gets the include_subaccounts of this INAPPVOICE.

        Whether to include subaccounts or not.

        :return: The include_subaccounts of this INAPPVOICE.
        :rtype: bool
        """
        return self._include_subaccounts

    @include_subaccounts.setter
    def include_subaccounts(self, include_subaccounts):
        """Sets the include_subaccounts of this INAPPVOICE.

        Whether to include subaccounts or not.

        :param include_subaccounts: The include_subaccounts of this INAPPVOICE.
        :type include_subaccounts: bool
        """

        self._include_subaccounts = include_subaccounts

    @property
    def product(self):
        """Gets the product of this INAPPVOICE.


        :return: The product of this INAPPVOICE.
        :rtype: ProductInAppVoice
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this INAPPVOICE.


        :param product: The product of this INAPPVOICE.
        :type product: ProductInAppVoice
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def conversation_id(self):
        """Gets the conversation_id of this INAPPVOICE.

        Search only for In App Voive calls attached to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this INAPPVOICE.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this INAPPVOICE.

        Search only for In App Voive calls attached to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this INAPPVOICE.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id
