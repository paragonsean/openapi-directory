# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asr import ASR
from openapi_server.models.asr_status import AsrStatus
from openapi_server.models.conversations import CONVERSATIONS
from openapi_server.models.direction import Direction
from openapi_server.models.inappvoice import INAPPVOICE
from openapi_server.models.messages import MESSAGES
from openapi_server.models.numberinsight import NUMBERINSIGHT
from openapi_server.models.product_asr import ProductAsr
from openapi_server.models.sms import SMS
from openapi_server.models.verifyapi import VERIFYAPI
from openapi_server.models.voicecall import VOICECALL
from openapi_server.models.websocketcall import WEBSOCKETCALL
from openapi_server import util


class CreateAsyncReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, callback_url: str=None, date_end: date=None, date_start: date=None, include_subaccounts: bool=False, product: ProductAsr=None, account_ref: str=None, client_ref: str=None, direction: Direction=None, _from: str=None, include_message: bool=False, network: str=None, show_concatenated: bool=False, status: AsrStatus=None, to: str=None, conversation_id: str=None, number: str=None, id: str=None):
        """CreateAsyncReportRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateAsyncReportRequest.
        :param callback_url: The callback_url of this CreateAsyncReportRequest.
        :param date_end: The date_end of this CreateAsyncReportRequest.
        :param date_start: The date_start of this CreateAsyncReportRequest.
        :param include_subaccounts: The include_subaccounts of this CreateAsyncReportRequest.
        :param product: The product of this CreateAsyncReportRequest.
        :param account_ref: The account_ref of this CreateAsyncReportRequest.
        :param client_ref: The client_ref of this CreateAsyncReportRequest.
        :param direction: The direction of this CreateAsyncReportRequest.
        :param _from: The _from of this CreateAsyncReportRequest.
        :param include_message: The include_message of this CreateAsyncReportRequest.
        :param network: The network of this CreateAsyncReportRequest.
        :param show_concatenated: The show_concatenated of this CreateAsyncReportRequest.
        :param status: The status of this CreateAsyncReportRequest.
        :param to: The to of this CreateAsyncReportRequest.
        :param conversation_id: The conversation_id of this CreateAsyncReportRequest.
        :param number: The number of this CreateAsyncReportRequest.
        :param id: The id of this CreateAsyncReportRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'callback_url': str,
            'date_end': date,
            'date_start': date,
            'include_subaccounts': bool,
            'product': ProductAsr,
            'account_ref': str,
            'client_ref': str,
            'direction': Direction,
            '_from': str,
            'include_message': bool,
            'network': str,
            'show_concatenated': bool,
            'status': AsrStatus,
            'to': str,
            'conversation_id': str,
            'number': str,
            'id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'callback_url': 'callback_url',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'include_subaccounts': 'include_subaccounts',
            'product': 'product',
            'account_ref': 'account_ref',
            'client_ref': 'client_ref',
            'direction': 'direction',
            '_from': 'from',
            'include_message': 'include_message',
            'network': 'network',
            'show_concatenated': 'show_concatenated',
            'status': 'status',
            'to': 'to',
            'conversation_id': 'conversation_id',
            'number': 'number',
            'id': 'id'
        }

        self._account_id = account_id
        self._callback_url = callback_url
        self._date_end = date_end
        self._date_start = date_start
        self._include_subaccounts = include_subaccounts
        self._product = product
        self._account_ref = account_ref
        self._client_ref = client_ref
        self._direction = direction
        self.__from = _from
        self._include_message = include_message
        self._network = network
        self._show_concatenated = show_concatenated
        self._status = status
        self._to = to
        self._conversation_id = conversation_id
        self._number = number
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAsyncReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_async_report_request of this CreateAsyncReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateAsyncReportRequest.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAsyncReportRequest.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CreateAsyncReportRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def callback_url(self):
        """Gets the callback_url of this CreateAsyncReportRequest.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :return: The callback_url of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this CreateAsyncReportRequest.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :param callback_url: The callback_url of this CreateAsyncReportRequest.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def date_end(self):
        """Gets the date_end of this CreateAsyncReportRequest.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :return: The date_end of this CreateAsyncReportRequest.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CreateAsyncReportRequest.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :param date_end: The date_end of this CreateAsyncReportRequest.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CreateAsyncReportRequest.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :return: The date_start of this CreateAsyncReportRequest.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CreateAsyncReportRequest.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :param date_start: The date_start of this CreateAsyncReportRequest.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def include_subaccounts(self):
        """Gets the include_subaccounts of this CreateAsyncReportRequest.

        Whether to include subaccounts or not.

        :return: The include_subaccounts of this CreateAsyncReportRequest.
        :rtype: bool
        """
        return self._include_subaccounts

    @include_subaccounts.setter
    def include_subaccounts(self, include_subaccounts):
        """Sets the include_subaccounts of this CreateAsyncReportRequest.

        Whether to include subaccounts or not.

        :param include_subaccounts: The include_subaccounts of this CreateAsyncReportRequest.
        :type include_subaccounts: bool
        """

        self._include_subaccounts = include_subaccounts

    @property
    def product(self):
        """Gets the product of this CreateAsyncReportRequest.


        :return: The product of this CreateAsyncReportRequest.
        :rtype: ProductAsr
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CreateAsyncReportRequest.


        :param product: The product of this CreateAsyncReportRequest.
        :type product: ProductAsr
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def account_ref(self):
        """Gets the account_ref of this CreateAsyncReportRequest.

        Search for messages with this `account_ref`.

        :return: The account_ref of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._account_ref

    @account_ref.setter
    def account_ref(self, account_ref):
        """Sets the account_ref of this CreateAsyncReportRequest.

        Search for messages with this `account_ref`.

        :param account_ref: The account_ref of this CreateAsyncReportRequest.
        :type account_ref: str
        """
        if account_ref is not None and len(account_ref) > 40:
            raise ValueError("Invalid value for `account_ref`, length must be less than or equal to `40`")
        if account_ref is not None and len(account_ref) < 40:
            raise ValueError("Invalid value for `account_ref`, length must be greater than or equal to `40`")

        self._account_ref = account_ref

    @property
    def client_ref(self):
        """Gets the client_ref of this CreateAsyncReportRequest.

        Search for messages with this `client_ref`.

        :return: The client_ref of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this CreateAsyncReportRequest.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this CreateAsyncReportRequest.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def direction(self):
        """Gets the direction of this CreateAsyncReportRequest.


        :return: The direction of this CreateAsyncReportRequest.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CreateAsyncReportRequest.


        :param direction: The direction of this CreateAsyncReportRequest.
        :type direction: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this CreateAsyncReportRequest.

        Request from this number.

        :return: The _from of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CreateAsyncReportRequest.

        Request from this number.

        :param _from: The _from of this CreateAsyncReportRequest.
        :type _from: str
        """

        self.__from = _from

    @property
    def include_message(self):
        """Gets the include_message of this CreateAsyncReportRequest.

        Include the text of messages in the report.

        :return: The include_message of this CreateAsyncReportRequest.
        :rtype: bool
        """
        return self._include_message

    @include_message.setter
    def include_message(self, include_message):
        """Sets the include_message of this CreateAsyncReportRequest.

        Include the text of messages in the report.

        :param include_message: The include_message of this CreateAsyncReportRequest.
        :type include_message: bool
        """

        self._include_message = include_message

    @property
    def network(self):
        """Gets the network of this CreateAsyncReportRequest.

        Network used to send the request.

        :return: The network of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CreateAsyncReportRequest.

        Network used to send the request.

        :param network: The network of this CreateAsyncReportRequest.
        :type network: str
        """

        self._network = network

    @property
    def show_concatenated(self):
        """Gets the show_concatenated of this CreateAsyncReportRequest.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :return: The show_concatenated of this CreateAsyncReportRequest.
        :rtype: bool
        """
        return self._show_concatenated

    @show_concatenated.setter
    def show_concatenated(self, show_concatenated):
        """Sets the show_concatenated of this CreateAsyncReportRequest.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :param show_concatenated: The show_concatenated of this CreateAsyncReportRequest.
        :type show_concatenated: bool
        """

        self._show_concatenated = show_concatenated

    @property
    def status(self):
        """Gets the status of this CreateAsyncReportRequest.


        :return: The status of this CreateAsyncReportRequest.
        :rtype: AsrStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateAsyncReportRequest.


        :param status: The status of this CreateAsyncReportRequest.
        :type status: AsrStatus
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this CreateAsyncReportRequest.

        Request to this number.

        :return: The to of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CreateAsyncReportRequest.

        Request to this number.

        :param to: The to of this CreateAsyncReportRequest.
        :type to: str
        """

        self._to = to

    @property
    def conversation_id(self):
        """Gets the conversation_id of this CreateAsyncReportRequest.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this CreateAsyncReportRequest.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this CreateAsyncReportRequest.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def number(self):
        """Gets the number of this CreateAsyncReportRequest.

        Search only request for the target number.

        :return: The number of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateAsyncReportRequest.

        Search only request for the target number.

        :param number: The number of this CreateAsyncReportRequest.
        :type number: str
        """

        self._number = number

    @property
    def id(self):
        """Gets the id of this CreateAsyncReportRequest.

        Search only messages with the specified uuid.

        :return: The id of this CreateAsyncReportRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateAsyncReportRequest.

        Search only messages with the specified uuid.

        :param id: The id of this CreateAsyncReportRequest.
        :type id: str
        """

        self._id = id
