# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server import util


class CsvMessagesOutbound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, client_ref: str=None, country: str=None, country_name: str=None, currency: str=None, date_finalized: date=None, date_received: date=None, direction: Direction=None, error_code: str=None, _from: str=None, latency: int=None, message_body: str=None, message_id: str=None, provider: str=None, status: str=None, to: str=None, total_price: str=None):
        """CsvMessagesOutbound - a model defined in OpenAPI

        :param account_id: The account_id of this CsvMessagesOutbound.
        :param client_ref: The client_ref of this CsvMessagesOutbound.
        :param country: The country of this CsvMessagesOutbound.
        :param country_name: The country_name of this CsvMessagesOutbound.
        :param currency: The currency of this CsvMessagesOutbound.
        :param date_finalized: The date_finalized of this CsvMessagesOutbound.
        :param date_received: The date_received of this CsvMessagesOutbound.
        :param direction: The direction of this CsvMessagesOutbound.
        :param error_code: The error_code of this CsvMessagesOutbound.
        :param _from: The _from of this CsvMessagesOutbound.
        :param latency: The latency of this CsvMessagesOutbound.
        :param message_body: The message_body of this CsvMessagesOutbound.
        :param message_id: The message_id of this CsvMessagesOutbound.
        :param provider: The provider of this CsvMessagesOutbound.
        :param status: The status of this CsvMessagesOutbound.
        :param to: The to of this CsvMessagesOutbound.
        :param total_price: The total_price of this CsvMessagesOutbound.
        """
        self.openapi_types = {
            'account_id': str,
            'client_ref': str,
            'country': str,
            'country_name': str,
            'currency': str,
            'date_finalized': date,
            'date_received': date,
            'direction': Direction,
            'error_code': str,
            '_from': str,
            'latency': int,
            'message_body': str,
            'message_id': str,
            'provider': str,
            'status': str,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'client_ref': 'client_ref',
            'country': 'country',
            'country_name': 'country_name',
            'currency': 'currency',
            'date_finalized': 'date_finalized',
            'date_received': 'date_received',
            'direction': 'direction',
            'error_code': 'error_code',
            '_from': 'from',
            'latency': 'latency',
            'message_body': 'message_body',
            'message_id': 'message_id',
            'provider': 'provider',
            'status': 'status',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._client_ref = client_ref
        self._country = country
        self._country_name = country_name
        self._currency = currency
        self._date_finalized = date_finalized
        self._date_received = date_received
        self._direction = direction
        self._error_code = error_code
        self.__from = _from
        self._latency = latency
        self._message_body = message_body
        self._message_id = message_id
        self._provider = provider
        self._status = status
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvMessagesOutbound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_messages_outbound of this CsvMessagesOutbound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvMessagesOutbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvMessagesOutbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvMessagesOutbound.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def client_ref(self):
        """Gets the client_ref of this CsvMessagesOutbound.

        Search for messages with this `client_ref`.

        :return: The client_ref of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this CsvMessagesOutbound.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this CsvMessagesOutbound.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def country(self):
        """Gets the country of this CsvMessagesOutbound.

        Country where the request was sent.

        :return: The country of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CsvMessagesOutbound.

        Country where the request was sent.

        :param country: The country of this CsvMessagesOutbound.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this CsvMessagesOutbound.

        Country name where the request was sent.

        :return: The country_name of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CsvMessagesOutbound.

        Country name where the request was sent.

        :param country_name: The country_name of this CsvMessagesOutbound.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this CsvMessagesOutbound.

        Currency of the price of the request.

        :return: The currency of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvMessagesOutbound.

        Currency of the price of the request.

        :param currency: The currency of this CsvMessagesOutbound.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_finalized(self):
        """Gets the date_finalized of this CsvMessagesOutbound.

        Date when the request was finalized.

        :return: The date_finalized of this CsvMessagesOutbound.
        :rtype: date
        """
        return self._date_finalized

    @date_finalized.setter
    def date_finalized(self, date_finalized):
        """Sets the date_finalized of this CsvMessagesOutbound.

        Date when the request was finalized.

        :param date_finalized: The date_finalized of this CsvMessagesOutbound.
        :type date_finalized: date
        """

        self._date_finalized = date_finalized

    @property
    def date_received(self):
        """Gets the date_received of this CsvMessagesOutbound.

        Date of the request.

        :return: The date_received of this CsvMessagesOutbound.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this CsvMessagesOutbound.

        Date of the request.

        :param date_received: The date_received of this CsvMessagesOutbound.
        :type date_received: date
        """

        self._date_received = date_received

    @property
    def direction(self):
        """Gets the direction of this CsvMessagesOutbound.


        :return: The direction of this CsvMessagesOutbound.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CsvMessagesOutbound.


        :param direction: The direction of this CsvMessagesOutbound.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def error_code(self):
        """Gets the error_code of this CsvMessagesOutbound.

        Error code of the message.

        :return: The error_code of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this CsvMessagesOutbound.

        Error code of the message.

        :param error_code: The error_code of this CsvMessagesOutbound.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def _from(self):
        """Gets the _from of this CsvMessagesOutbound.

        Request from this number.

        :return: The _from of this CsvMessagesOutbound.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CsvMessagesOutbound.

        Request from this number.

        :param _from: The _from of this CsvMessagesOutbound.
        :type _from: str
        """

        self.__from = _from

    @property
    def latency(self):
        """Gets the latency of this CsvMessagesOutbound.

        Latency of the request in ms.

        :return: The latency of this CsvMessagesOutbound.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this CsvMessagesOutbound.

        Latency of the request in ms.

        :param latency: The latency of this CsvMessagesOutbound.
        :type latency: int
        """

        self._latency = latency

    @property
    def message_body(self):
        """Gets the message_body of this CsvMessagesOutbound.

        Body of the message sent. Only present if include_message parameter is set to true.

        :return: The message_body of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this CsvMessagesOutbound.

        Body of the message sent. Only present if include_message parameter is set to true.

        :param message_body: The message_body of this CsvMessagesOutbound.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def message_id(self):
        """Gets the message_id of this CsvMessagesOutbound.

        Id of the request.

        :return: The message_id of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this CsvMessagesOutbound.

        Id of the request.

        :param message_id: The message_id of this CsvMessagesOutbound.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def provider(self):
        """Gets the provider of this CsvMessagesOutbound.

        Provider of the message.

        :return: The provider of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CsvMessagesOutbound.

        Provider of the message.

        :param provider: The provider of this CsvMessagesOutbound.
        :type provider: str
        """

        self._provider = provider

    @property
    def status(self):
        """Gets the status of this CsvMessagesOutbound.

        Status of the message.

        :return: The status of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvMessagesOutbound.

        Status of the message.

        :param status: The status of this CsvMessagesOutbound.
        :type status: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this CsvMessagesOutbound.

        Request to this number.

        :return: The to of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CsvMessagesOutbound.

        Request to this number.

        :param to: The to of this CsvMessagesOutbound.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this CsvMessagesOutbound.

        Total price of the request.

        :return: The total_price of this CsvMessagesOutbound.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvMessagesOutbound.

        Total price of the request.

        :param total_price: The total_price of this CsvMessagesOutbound.
        :type total_price: str
        """

        self._total_price = total_price
