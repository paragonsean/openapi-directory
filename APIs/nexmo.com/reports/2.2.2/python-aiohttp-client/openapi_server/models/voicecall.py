# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.product_voice import ProductVoice
from openapi_server.models.report_request import ReportRequest
from openapi_server.models.voice_status import VoiceStatus
from openapi_server import util


class VOICECALL(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, callback_url: str=None, date_end: date=None, date_start: date=None, include_subaccounts: bool=False, product: ProductVoice=None, direction: Direction=None, _from: str=None, network: str=None, status: VoiceStatus=None, to: str=None):
        """VOICECALL - a model defined in OpenAPI

        :param account_id: The account_id of this VOICECALL.
        :param callback_url: The callback_url of this VOICECALL.
        :param date_end: The date_end of this VOICECALL.
        :param date_start: The date_start of this VOICECALL.
        :param include_subaccounts: The include_subaccounts of this VOICECALL.
        :param product: The product of this VOICECALL.
        :param direction: The direction of this VOICECALL.
        :param _from: The _from of this VOICECALL.
        :param network: The network of this VOICECALL.
        :param status: The status of this VOICECALL.
        :param to: The to of this VOICECALL.
        """
        self.openapi_types = {
            'account_id': str,
            'callback_url': str,
            'date_end': date,
            'date_start': date,
            'include_subaccounts': bool,
            'product': ProductVoice,
            'direction': Direction,
            '_from': str,
            'network': str,
            'status': VoiceStatus,
            'to': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'callback_url': 'callback_url',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'include_subaccounts': 'include_subaccounts',
            'product': 'product',
            'direction': 'direction',
            '_from': 'from',
            'network': 'network',
            'status': 'status',
            'to': 'to'
        }

        self._account_id = account_id
        self._callback_url = callback_url
        self._date_end = date_end
        self._date_start = date_start
        self._include_subaccounts = include_subaccounts
        self._product = product
        self._direction = direction
        self.__from = _from
        self._network = network
        self._status = status
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VOICECALL':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VOICE-CALL of this VOICECALL.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this VOICECALL.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this VOICECALL.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VOICECALL.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this VOICECALL.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def callback_url(self):
        """Gets the callback_url of this VOICECALL.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :return: The callback_url of this VOICECALL.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this VOICECALL.

        URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).

        :param callback_url: The callback_url of this VOICECALL.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def date_end(self):
        """Gets the date_end of this VOICECALL.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :return: The date_end of this VOICECALL.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this VOICECALL.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 

        :param date_end: The date_end of this VOICECALL.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this VOICECALL.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :return: The date_start of this VOICECALL.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this VOICECALL.

        ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 

        :param date_start: The date_start of this VOICECALL.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def include_subaccounts(self):
        """Gets the include_subaccounts of this VOICECALL.

        Whether to include subaccounts or not.

        :return: The include_subaccounts of this VOICECALL.
        :rtype: bool
        """
        return self._include_subaccounts

    @include_subaccounts.setter
    def include_subaccounts(self, include_subaccounts):
        """Sets the include_subaccounts of this VOICECALL.

        Whether to include subaccounts or not.

        :param include_subaccounts: The include_subaccounts of this VOICECALL.
        :type include_subaccounts: bool
        """

        self._include_subaccounts = include_subaccounts

    @property
    def product(self):
        """Gets the product of this VOICECALL.


        :return: The product of this VOICECALL.
        :rtype: ProductVoice
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this VOICECALL.


        :param product: The product of this VOICECALL.
        :type product: ProductVoice
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def direction(self):
        """Gets the direction of this VOICECALL.


        :return: The direction of this VOICECALL.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this VOICECALL.


        :param direction: The direction of this VOICECALL.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this VOICECALL.

        Request from this number.

        :return: The _from of this VOICECALL.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this VOICECALL.

        Request from this number.

        :param _from: The _from of this VOICECALL.
        :type _from: str
        """

        self.__from = _from

    @property
    def network(self):
        """Gets the network of this VOICECALL.

        Network used to send the request.

        :return: The network of this VOICECALL.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VOICECALL.

        Network used to send the request.

        :param network: The network of this VOICECALL.
        :type network: str
        """

        self._network = network

    @property
    def status(self):
        """Gets the status of this VOICECALL.


        :return: The status of this VOICECALL.
        :rtype: VoiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VOICECALL.


        :param status: The status of this VOICECALL.
        :type status: VoiceStatus
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this VOICECALL.

        Request to this number.

        :return: The to of this VOICECALL.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this VOICECALL.

        Request to this number.

        :param to: The to of this VOICECALL.
        :type to: str
        """

        self._to = to
