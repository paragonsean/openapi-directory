# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.product_sms import ProductSms
from openapi_server.models.sms_status import SmsStatus
from openapi_server import util


class SmsFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ref: str=None, client_ref: str=None, direction: Direction=None, _from: str=None, include_message: bool=False, network: str=None, product: ProductSms=None, show_concatenated: bool=False, status: SmsStatus=None, to: str=None):
        """SmsFields - a model defined in OpenAPI

        :param account_ref: The account_ref of this SmsFields.
        :param client_ref: The client_ref of this SmsFields.
        :param direction: The direction of this SmsFields.
        :param _from: The _from of this SmsFields.
        :param include_message: The include_message of this SmsFields.
        :param network: The network of this SmsFields.
        :param product: The product of this SmsFields.
        :param show_concatenated: The show_concatenated of this SmsFields.
        :param status: The status of this SmsFields.
        :param to: The to of this SmsFields.
        """
        self.openapi_types = {
            'account_ref': str,
            'client_ref': str,
            'direction': Direction,
            '_from': str,
            'include_message': bool,
            'network': str,
            'product': ProductSms,
            'show_concatenated': bool,
            'status': SmsStatus,
            'to': str
        }

        self.attribute_map = {
            'account_ref': 'account_ref',
            'client_ref': 'client_ref',
            'direction': 'direction',
            '_from': 'from',
            'include_message': 'include_message',
            'network': 'network',
            'product': 'product',
            'show_concatenated': 'show_concatenated',
            'status': 'status',
            'to': 'to'
        }

        self._account_ref = account_ref
        self._client_ref = client_ref
        self._direction = direction
        self.__from = _from
        self._include_message = include_message
        self._network = network
        self._product = product
        self._show_concatenated = show_concatenated
        self._status = status
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SmsFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sms_fields of this SmsFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ref(self):
        """Gets the account_ref of this SmsFields.

        Search for messages with this `account_ref`.

        :return: The account_ref of this SmsFields.
        :rtype: str
        """
        return self._account_ref

    @account_ref.setter
    def account_ref(self, account_ref):
        """Sets the account_ref of this SmsFields.

        Search for messages with this `account_ref`.

        :param account_ref: The account_ref of this SmsFields.
        :type account_ref: str
        """
        if account_ref is not None and len(account_ref) > 40:
            raise ValueError("Invalid value for `account_ref`, length must be less than or equal to `40`")
        if account_ref is not None and len(account_ref) < 40:
            raise ValueError("Invalid value for `account_ref`, length must be greater than or equal to `40`")

        self._account_ref = account_ref

    @property
    def client_ref(self):
        """Gets the client_ref of this SmsFields.

        Search for messages with this `client_ref`.

        :return: The client_ref of this SmsFields.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this SmsFields.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this SmsFields.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def direction(self):
        """Gets the direction of this SmsFields.


        :return: The direction of this SmsFields.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SmsFields.


        :param direction: The direction of this SmsFields.
        :type direction: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this SmsFields.

        Request from this number.

        :return: The _from of this SmsFields.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SmsFields.

        Request from this number.

        :param _from: The _from of this SmsFields.
        :type _from: str
        """

        self.__from = _from

    @property
    def include_message(self):
        """Gets the include_message of this SmsFields.

        Include the text of messages in the report.

        :return: The include_message of this SmsFields.
        :rtype: bool
        """
        return self._include_message

    @include_message.setter
    def include_message(self, include_message):
        """Sets the include_message of this SmsFields.

        Include the text of messages in the report.

        :param include_message: The include_message of this SmsFields.
        :type include_message: bool
        """

        self._include_message = include_message

    @property
    def network(self):
        """Gets the network of this SmsFields.

        Network used to send the request.

        :return: The network of this SmsFields.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SmsFields.

        Network used to send the request.

        :param network: The network of this SmsFields.
        :type network: str
        """

        self._network = network

    @property
    def product(self):
        """Gets the product of this SmsFields.


        :return: The product of this SmsFields.
        :rtype: ProductSms
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this SmsFields.


        :param product: The product of this SmsFields.
        :type product: ProductSms
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def show_concatenated(self):
        """Gets the show_concatenated of this SmsFields.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :return: The show_concatenated of this SmsFields.
        :rtype: bool
        """
        return self._show_concatenated

    @show_concatenated.setter
    def show_concatenated(self, show_concatenated):
        """Sets the show_concatenated of this SmsFields.

        Indicates whether the SMS was split up into multiple parts (due to its length).

        :param show_concatenated: The show_concatenated of this SmsFields.
        :type show_concatenated: bool
        """

        self._show_concatenated = show_concatenated

    @property
    def status(self):
        """Gets the status of this SmsFields.


        :return: The status of this SmsFields.
        :rtype: SmsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SmsFields.


        :param status: The status of this SmsFields.
        :type status: SmsStatus
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this SmsFields.

        Request to this number.

        :return: The to of this SmsFields.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SmsFields.

        Request to this number.

        :param to: The to of this SmsFields.
        :type to: str
        """

        self._to = to
