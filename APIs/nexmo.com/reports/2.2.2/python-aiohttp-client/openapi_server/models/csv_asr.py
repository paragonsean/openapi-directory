# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asr_status import AsrStatus
from openapi_server.models.direction import Direction
from openapi_server import util


class CsvAsr(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, call_date_start: date=None, call_id: str=None, currency: str=None, date_end: date=None, date_start: date=None, direction: Direction=None, duration: int=None, _from: str=None, price: str=None, status: AsrStatus=None, status_description: str=None, to: str=None, total_price: str=None):
        """CsvAsr - a model defined in OpenAPI

        :param account_id: The account_id of this CsvAsr.
        :param call_date_start: The call_date_start of this CsvAsr.
        :param call_id: The call_id of this CsvAsr.
        :param currency: The currency of this CsvAsr.
        :param date_end: The date_end of this CsvAsr.
        :param date_start: The date_start of this CsvAsr.
        :param direction: The direction of this CsvAsr.
        :param duration: The duration of this CsvAsr.
        :param _from: The _from of this CsvAsr.
        :param price: The price of this CsvAsr.
        :param status: The status of this CsvAsr.
        :param status_description: The status_description of this CsvAsr.
        :param to: The to of this CsvAsr.
        :param total_price: The total_price of this CsvAsr.
        """
        self.openapi_types = {
            'account_id': str,
            'call_date_start': date,
            'call_id': str,
            'currency': str,
            'date_end': date,
            'date_start': date,
            'direction': Direction,
            'duration': int,
            '_from': str,
            'price': str,
            'status': AsrStatus,
            'status_description': str,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'call_date_start': 'call_date_start',
            'call_id': 'call_id',
            'currency': 'currency',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'direction': 'direction',
            'duration': 'duration',
            '_from': 'from',
            'price': 'price',
            'status': 'status',
            'status_description': 'status_description',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._call_date_start = call_date_start
        self._call_id = call_id
        self._currency = currency
        self._date_end = date_end
        self._date_start = date_start
        self._direction = direction
        self._duration = duration
        self.__from = _from
        self._price = price
        self._status = status
        self._status_description = status_description
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvAsr':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_asr of this CsvAsr.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvAsr.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvAsr.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvAsr.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvAsr.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def call_date_start(self):
        """Gets the call_date_start of this CsvAsr.

        Date of the start of the call.

        :return: The call_date_start of this CsvAsr.
        :rtype: date
        """
        return self._call_date_start

    @call_date_start.setter
    def call_date_start(self, call_date_start):
        """Sets the call_date_start of this CsvAsr.

        Date of the start of the call.

        :param call_date_start: The call_date_start of this CsvAsr.
        :type call_date_start: date
        """

        self._call_date_start = call_date_start

    @property
    def call_id(self):
        """Gets the call_id of this CsvAsr.

        UUID of the request.

        :return: The call_id of this CsvAsr.
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CsvAsr.

        UUID of the request.

        :param call_id: The call_id of this CsvAsr.
        :type call_id: str
        """

        self._call_id = call_id

    @property
    def currency(self):
        """Gets the currency of this CsvAsr.

        Currency of the price of the request.

        :return: The currency of this CsvAsr.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvAsr.

        Currency of the price of the request.

        :param currency: The currency of this CsvAsr.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_end(self):
        """Gets the date_end of this CsvAsr.

        Date of the end of the call.

        :return: The date_end of this CsvAsr.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CsvAsr.

        Date of the end of the call.

        :param date_end: The date_end of this CsvAsr.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CsvAsr.

        Date of the start of the call.

        :return: The date_start of this CsvAsr.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CsvAsr.

        Date of the start of the call.

        :param date_start: The date_start of this CsvAsr.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def direction(self):
        """Gets the direction of this CsvAsr.


        :return: The direction of this CsvAsr.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CsvAsr.


        :param direction: The direction of this CsvAsr.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this CsvAsr.

        Duration of the call in seconds.

        :return: The duration of this CsvAsr.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CsvAsr.

        Duration of the call in seconds.

        :param duration: The duration of this CsvAsr.
        :type duration: int
        """

        self._duration = duration

    @property
    def _from(self):
        """Gets the _from of this CsvAsr.

        Request from this number.

        :return: The _from of this CsvAsr.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CsvAsr.

        Request from this number.

        :param _from: The _from of this CsvAsr.
        :type _from: str
        """

        self.__from = _from

    @property
    def price(self):
        """Gets the price of this CsvAsr.

        Price of the request.

        :return: The price of this CsvAsr.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CsvAsr.

        Price of the request.

        :param price: The price of this CsvAsr.
        :type price: str
        """

        self._price = price

    @property
    def status(self):
        """Gets the status of this CsvAsr.


        :return: The status of this CsvAsr.
        :rtype: AsrStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvAsr.


        :param status: The status of this CsvAsr.
        :type status: AsrStatus
        """

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this CsvAsr.

        ASR error message.

        :return: The status_description of this CsvAsr.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this CsvAsr.

        ASR error message.

        :param status_description: The status_description of this CsvAsr.
        :type status_description: str
        """

        self._status_description = status_description

    @property
    def to(self):
        """Gets the to of this CsvAsr.

        Request to this number.

        :return: The to of this CsvAsr.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CsvAsr.

        Request to this number.

        :param to: The to of this CsvAsr.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this CsvAsr.

        Total price of the request.

        :return: The total_price of this CsvAsr.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvAsr.

        Total price of the request.

        :param total_price: The total_price of this CsvAsr.
        :type total_price: str
        """

        self._total_price = total_price
