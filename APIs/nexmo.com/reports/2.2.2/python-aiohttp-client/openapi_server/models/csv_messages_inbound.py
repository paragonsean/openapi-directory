# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server import util


class CsvMessagesInbound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, currency: str=None, date_received: date=None, direction: Direction=None, _from: str=None, message_body: str=None, message_id: str=None, provider: str=None, to: str=None, total_price: str=None):
        """CsvMessagesInbound - a model defined in OpenAPI

        :param account_id: The account_id of this CsvMessagesInbound.
        :param currency: The currency of this CsvMessagesInbound.
        :param date_received: The date_received of this CsvMessagesInbound.
        :param direction: The direction of this CsvMessagesInbound.
        :param _from: The _from of this CsvMessagesInbound.
        :param message_body: The message_body of this CsvMessagesInbound.
        :param message_id: The message_id of this CsvMessagesInbound.
        :param provider: The provider of this CsvMessagesInbound.
        :param to: The to of this CsvMessagesInbound.
        :param total_price: The total_price of this CsvMessagesInbound.
        """
        self.openapi_types = {
            'account_id': str,
            'currency': str,
            'date_received': date,
            'direction': Direction,
            '_from': str,
            'message_body': str,
            'message_id': str,
            'provider': str,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'currency': 'currency',
            'date_received': 'date_received',
            'direction': 'direction',
            '_from': 'from',
            'message_body': 'message_body',
            'message_id': 'message_id',
            'provider': 'provider',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._currency = currency
        self._date_received = date_received
        self._direction = direction
        self.__from = _from
        self._message_body = message_body
        self._message_id = message_id
        self._provider = provider
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvMessagesInbound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_messages_inbound of this CsvMessagesInbound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvMessagesInbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvMessagesInbound.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvMessagesInbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvMessagesInbound.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def currency(self):
        """Gets the currency of this CsvMessagesInbound.

        Currency of the price of the request.

        :return: The currency of this CsvMessagesInbound.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvMessagesInbound.

        Currency of the price of the request.

        :param currency: The currency of this CsvMessagesInbound.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_received(self):
        """Gets the date_received of this CsvMessagesInbound.

        Date of the request.

        :return: The date_received of this CsvMessagesInbound.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this CsvMessagesInbound.

        Date of the request.

        :param date_received: The date_received of this CsvMessagesInbound.
        :type date_received: date
        """

        self._date_received = date_received

    @property
    def direction(self):
        """Gets the direction of this CsvMessagesInbound.


        :return: The direction of this CsvMessagesInbound.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CsvMessagesInbound.


        :param direction: The direction of this CsvMessagesInbound.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this CsvMessagesInbound.

        Request from this number.

        :return: The _from of this CsvMessagesInbound.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CsvMessagesInbound.

        Request from this number.

        :param _from: The _from of this CsvMessagesInbound.
        :type _from: str
        """

        self.__from = _from

    @property
    def message_body(self):
        """Gets the message_body of this CsvMessagesInbound.

        Body of the message sent. Only present if include_message parameter is set to true.

        :return: The message_body of this CsvMessagesInbound.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this CsvMessagesInbound.

        Body of the message sent. Only present if include_message parameter is set to true.

        :param message_body: The message_body of this CsvMessagesInbound.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def message_id(self):
        """Gets the message_id of this CsvMessagesInbound.

        Id of the request.

        :return: The message_id of this CsvMessagesInbound.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this CsvMessagesInbound.

        Id of the request.

        :param message_id: The message_id of this CsvMessagesInbound.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def provider(self):
        """Gets the provider of this CsvMessagesInbound.

        Provider of the message.

        :return: The provider of this CsvMessagesInbound.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CsvMessagesInbound.

        Provider of the message.

        :param provider: The provider of this CsvMessagesInbound.
        :type provider: str
        """

        self._provider = provider

    @property
    def to(self):
        """Gets the to of this CsvMessagesInbound.

        Request to this number.

        :return: The to of this CsvMessagesInbound.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CsvMessagesInbound.

        Request to this number.

        :param to: The to of this CsvMessagesInbound.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this CsvMessagesInbound.

        Total price of the request.

        :return: The total_price of this CsvMessagesInbound.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvMessagesInbound.

        Total price of the request.

        :param total_price: The total_price of this CsvMessagesInbound.
        :type total_price: str
        """

        self._total_price = total_price
