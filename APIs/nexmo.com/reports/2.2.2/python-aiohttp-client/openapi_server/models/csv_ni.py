# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsvNi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, country: str=None, country_name: str=None, currency: str=None, date_received: date=None, first_name: str=None, last_name: str=None, network: str=None, network_name: str=None, network_type: str=None, number: str=None, ported: str=None, product_type: str=None, reachable: str=None, request_id: str=None, response_code: str=None, status: str=None, total_price: str=None, valid: str=None):
        """CsvNi - a model defined in OpenAPI

        :param account_id: The account_id of this CsvNi.
        :param country: The country of this CsvNi.
        :param country_name: The country_name of this CsvNi.
        :param currency: The currency of this CsvNi.
        :param date_received: The date_received of this CsvNi.
        :param first_name: The first_name of this CsvNi.
        :param last_name: The last_name of this CsvNi.
        :param network: The network of this CsvNi.
        :param network_name: The network_name of this CsvNi.
        :param network_type: The network_type of this CsvNi.
        :param number: The number of this CsvNi.
        :param ported: The ported of this CsvNi.
        :param product_type: The product_type of this CsvNi.
        :param reachable: The reachable of this CsvNi.
        :param request_id: The request_id of this CsvNi.
        :param response_code: The response_code of this CsvNi.
        :param status: The status of this CsvNi.
        :param total_price: The total_price of this CsvNi.
        :param valid: The valid of this CsvNi.
        """
        self.openapi_types = {
            'account_id': str,
            'country': str,
            'country_name': str,
            'currency': str,
            'date_received': date,
            'first_name': str,
            'last_name': str,
            'network': str,
            'network_name': str,
            'network_type': str,
            'number': str,
            'ported': str,
            'product_type': str,
            'reachable': str,
            'request_id': str,
            'response_code': str,
            'status': str,
            'total_price': str,
            'valid': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'country': 'country',
            'country_name': 'country_name',
            'currency': 'currency',
            'date_received': 'date_received',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'network': 'network',
            'network_name': 'network_name',
            'network_type': 'network_type',
            'number': 'number',
            'ported': 'ported',
            'product_type': 'product_type',
            'reachable': 'reachable',
            'request_id': 'request_id',
            'response_code': 'response_code',
            'status': 'status',
            'total_price': 'total_price',
            'valid': 'valid'
        }

        self._account_id = account_id
        self._country = country
        self._country_name = country_name
        self._currency = currency
        self._date_received = date_received
        self._first_name = first_name
        self._last_name = last_name
        self._network = network
        self._network_name = network_name
        self._network_type = network_type
        self._number = number
        self._ported = ported
        self._product_type = product_type
        self._reachable = reachable
        self._request_id = request_id
        self._response_code = response_code
        self._status = status
        self._total_price = total_price
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvNi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_ni of this CsvNi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvNi.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvNi.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvNi.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvNi.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def country(self):
        """Gets the country of this CsvNi.

        Country of the looked up number.

        :return: The country of this CsvNi.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CsvNi.

        Country of the looked up number.

        :param country: The country of this CsvNi.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this CsvNi.

        Country name of the looked up number.

        :return: The country_name of this CsvNi.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CsvNi.

        Country name of the looked up number.

        :param country_name: The country_name of this CsvNi.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this CsvNi.

        Currency of the price of the request.

        :return: The currency of this CsvNi.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvNi.

        Currency of the price of the request.

        :param currency: The currency of this CsvNi.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_received(self):
        """Gets the date_received of this CsvNi.

        Date of the request.

        :return: The date_received of this CsvNi.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this CsvNi.

        Date of the request.

        :param date_received: The date_received of this CsvNi.
        :type date_received: date
        """

        self._date_received = date_received

    @property
    def first_name(self):
        """Gets the first_name of this CsvNi.

        First name of the owner of the looked up number.

        :return: The first_name of this CsvNi.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CsvNi.

        First name of the owner of the looked up number.

        :param first_name: The first_name of this CsvNi.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CsvNi.

        Last name of the owner of the looked up number.

        :return: The last_name of this CsvNi.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CsvNi.

        Last name of the owner of the looked up number.

        :param last_name: The last_name of this CsvNi.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def network(self):
        """Gets the network of this CsvNi.

        Network of the looked up number.

        :return: The network of this CsvNi.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CsvNi.

        Network of the looked up number.

        :param network: The network of this CsvNi.
        :type network: str
        """

        self._network = network

    @property
    def network_name(self):
        """Gets the network_name of this CsvNi.

        Network name of the looked up number.

        :return: The network_name of this CsvNi.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this CsvNi.

        Network name of the looked up number.

        :param network_name: The network_name of this CsvNi.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def network_type(self):
        """Gets the network_type of this CsvNi.

        Network type of the looked up number.

        :return: The network_type of this CsvNi.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this CsvNi.

        Network type of the looked up number.

        :param network_type: The network_type of this CsvNi.
        :type network_type: str
        """

        self._network_type = network_type

    @property
    def number(self):
        """Gets the number of this CsvNi.

        Number looked up for this request.

        :return: The number of this CsvNi.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CsvNi.

        Number looked up for this request.

        :param number: The number of this CsvNi.
        :type number: str
        """

        self._number = number

    @property
    def ported(self):
        """Gets the ported of this CsvNi.

        Is the looked up number ported.

        :return: The ported of this CsvNi.
        :rtype: str
        """
        return self._ported

    @ported.setter
    def ported(self, ported):
        """Sets the ported of this CsvNi.

        Is the looked up number ported.

        :param ported: The ported of this CsvNi.
        :type ported: str
        """

        self._ported = ported

    @property
    def product_type(self):
        """Gets the product_type of this CsvNi.

        Type of Number Insight request.

        :return: The product_type of this CsvNi.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CsvNi.

        Type of Number Insight request.

        :param product_type: The product_type of this CsvNi.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def reachable(self):
        """Gets the reachable of this CsvNi.

        Is the looked up number reachable.

        :return: The reachable of this CsvNi.
        :rtype: str
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this CsvNi.

        Is the looked up number reachable.

        :param reachable: The reachable of this CsvNi.
        :type reachable: str
        """

        self._reachable = reachable

    @property
    def request_id(self):
        """Gets the request_id of this CsvNi.

        UUID of the request.

        :return: The request_id of this CsvNi.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CsvNi.

        UUID of the request.

        :param request_id: The request_id of this CsvNi.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def response_code(self):
        """Gets the response_code of this CsvNi.

        Response code of the Number Insight request.

        :return: The response_code of this CsvNi.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this CsvNi.

        Response code of the Number Insight request.

        :param response_code: The response_code of this CsvNi.
        :type response_code: str
        """

        self._response_code = response_code

    @property
    def status(self):
        """Gets the status of this CsvNi.

        Status of the Number Insight request.

        :return: The status of this CsvNi.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvNi.

        Status of the Number Insight request.

        :param status: The status of this CsvNi.
        :type status: str
        """

        self._status = status

    @property
    def total_price(self):
        """Gets the total_price of this CsvNi.

        Total price of the request.

        :return: The total_price of this CsvNi.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvNi.

        Total price of the request.

        :param total_price: The total_price of this CsvNi.
        :type total_price: str
        """

        self._total_price = total_price

    @property
    def valid(self):
        """Gets the valid of this CsvNi.

        Is the looked up number valid.

        :return: The valid of this CsvNi.
        :rtype: str
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this CsvNi.

        Is the looked up number valid.

        :param valid: The valid of this CsvNi.
        :type valid: str
        """

        self._valid = valid
