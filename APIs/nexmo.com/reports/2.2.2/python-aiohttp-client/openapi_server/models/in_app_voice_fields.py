# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_in_app_voice import ProductInAppVoice
from openapi_server import util


class InAppVoiceFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_id: str=None, product: ProductInAppVoice=None):
        """InAppVoiceFields - a model defined in OpenAPI

        :param conversation_id: The conversation_id of this InAppVoiceFields.
        :param product: The product of this InAppVoiceFields.
        """
        self.openapi_types = {
            'conversation_id': str,
            'product': ProductInAppVoice
        }

        self.attribute_map = {
            'conversation_id': 'conversation_id',
            'product': 'product'
        }

        self._conversation_id = conversation_id
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InAppVoiceFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The in_app_voice_fields of this InAppVoiceFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_id(self):
        """Gets the conversation_id of this InAppVoiceFields.

        Search only for In App Voive calls attached to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this InAppVoiceFields.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this InAppVoiceFields.

        Search only for In App Voive calls attached to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this InAppVoiceFields.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def product(self):
        """Gets the product of this InAppVoiceFields.


        :return: The product of this InAppVoiceFields.
        :rtype: ProductInAppVoice
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InAppVoiceFields.


        :param product: The product of this InAppVoiceFields.
        :type product: ProductInAppVoice
        """

        self._product = product
