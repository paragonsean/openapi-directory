# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server import util


class JsonSmsInbound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, country: str=None, country_name: str=None, currency: str=None, date_received: date=None, direction: Direction=None, _from: str=None, message_id: str=None, network: str=None, network_name: str=None, to: str=None, total_price: str=None):
        """JsonSmsInbound - a model defined in OpenAPI

        :param account_id: The account_id of this JsonSmsInbound.
        :param country: The country of this JsonSmsInbound.
        :param country_name: The country_name of this JsonSmsInbound.
        :param currency: The currency of this JsonSmsInbound.
        :param date_received: The date_received of this JsonSmsInbound.
        :param direction: The direction of this JsonSmsInbound.
        :param _from: The _from of this JsonSmsInbound.
        :param message_id: The message_id of this JsonSmsInbound.
        :param network: The network of this JsonSmsInbound.
        :param network_name: The network_name of this JsonSmsInbound.
        :param to: The to of this JsonSmsInbound.
        :param total_price: The total_price of this JsonSmsInbound.
        """
        self.openapi_types = {
            'account_id': str,
            'country': str,
            'country_name': str,
            'currency': str,
            'date_received': date,
            'direction': Direction,
            '_from': str,
            'message_id': str,
            'network': str,
            'network_name': str,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'country': 'country',
            'country_name': 'country_name',
            'currency': 'currency',
            'date_received': 'date_received',
            'direction': 'direction',
            '_from': 'from',
            'message_id': 'message_id',
            'network': 'network',
            'network_name': 'network_name',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._country = country
        self._country_name = country_name
        self._currency = currency
        self._date_received = date_received
        self._direction = direction
        self.__from = _from
        self._message_id = message_id
        self._network = network
        self._network_name = network_name
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonSmsInbound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_sms_inbound of this JsonSmsInbound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this JsonSmsInbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this JsonSmsInbound.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this JsonSmsInbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this JsonSmsInbound.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def country(self):
        """Gets the country of this JsonSmsInbound.

        Country where the request was sent.

        :return: The country of this JsonSmsInbound.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this JsonSmsInbound.

        Country where the request was sent.

        :param country: The country of this JsonSmsInbound.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this JsonSmsInbound.

        Country name where the request was sent.

        :return: The country_name of this JsonSmsInbound.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this JsonSmsInbound.

        Country name where the request was sent.

        :param country_name: The country_name of this JsonSmsInbound.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this JsonSmsInbound.

        Currency of the price of the request.

        :return: The currency of this JsonSmsInbound.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JsonSmsInbound.

        Currency of the price of the request.

        :param currency: The currency of this JsonSmsInbound.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_received(self):
        """Gets the date_received of this JsonSmsInbound.

        Date of the request.

        :return: The date_received of this JsonSmsInbound.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this JsonSmsInbound.

        Date of the request.

        :param date_received: The date_received of this JsonSmsInbound.
        :type date_received: date
        """

        self._date_received = date_received

    @property
    def direction(self):
        """Gets the direction of this JsonSmsInbound.


        :return: The direction of this JsonSmsInbound.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this JsonSmsInbound.


        :param direction: The direction of this JsonSmsInbound.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this JsonSmsInbound.

        Request from this number.

        :return: The _from of this JsonSmsInbound.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this JsonSmsInbound.

        Request from this number.

        :param _from: The _from of this JsonSmsInbound.
        :type _from: str
        """

        self.__from = _from

    @property
    def message_id(self):
        """Gets the message_id of this JsonSmsInbound.

        Id of the request.

        :return: The message_id of this JsonSmsInbound.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this JsonSmsInbound.

        Id of the request.

        :param message_id: The message_id of this JsonSmsInbound.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def network(self):
        """Gets the network of this JsonSmsInbound.

        Network used to send the request.

        :return: The network of this JsonSmsInbound.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this JsonSmsInbound.

        Network used to send the request.

        :param network: The network of this JsonSmsInbound.
        :type network: str
        """

        self._network = network

    @property
    def network_name(self):
        """Gets the network_name of this JsonSmsInbound.

        Name of the network used to send the request.

        :return: The network_name of this JsonSmsInbound.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this JsonSmsInbound.

        Name of the network used to send the request.

        :param network_name: The network_name of this JsonSmsInbound.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def to(self):
        """Gets the to of this JsonSmsInbound.

        Request to this number.

        :return: The to of this JsonSmsInbound.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this JsonSmsInbound.

        Request to this number.

        :param to: The to of this JsonSmsInbound.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this JsonSmsInbound.

        Price of the request.

        :return: The total_price of this JsonSmsInbound.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this JsonSmsInbound.

        Price of the request.

        :param total_price: The total_price of this JsonSmsInbound.
        :type total_price: str
        """

        self._total_price = total_price
