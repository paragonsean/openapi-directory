# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.csv_websockets import CsvWebsockets
from openapi_server.models.product_websocket import ProductWebsocket
from openapi_server.models.report_response_top_level_links import ReportResponseTopLevelLinks
from openapi_server.models.request_status import RequestStatus
from openapi_server import util


class GetRecords200ResponseOneOf4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ReportResponseTopLevelLinks=None, account_id: str=None, currency: str=None, ids_not_found: str=None, price: str=None, received_at: date=None, request_id: str=None, request_status: RequestStatus=None, items_count: int=None, product: ProductWebsocket=None, records: List[CsvWebsockets]=None):
        """GetRecords200ResponseOneOf4 - a model defined in OpenAPI

        :param links: The links of this GetRecords200ResponseOneOf4.
        :param account_id: The account_id of this GetRecords200ResponseOneOf4.
        :param currency: The currency of this GetRecords200ResponseOneOf4.
        :param ids_not_found: The ids_not_found of this GetRecords200ResponseOneOf4.
        :param price: The price of this GetRecords200ResponseOneOf4.
        :param received_at: The received_at of this GetRecords200ResponseOneOf4.
        :param request_id: The request_id of this GetRecords200ResponseOneOf4.
        :param request_status: The request_status of this GetRecords200ResponseOneOf4.
        :param items_count: The items_count of this GetRecords200ResponseOneOf4.
        :param product: The product of this GetRecords200ResponseOneOf4.
        :param records: The records of this GetRecords200ResponseOneOf4.
        """
        self.openapi_types = {
            'links': ReportResponseTopLevelLinks,
            'account_id': str,
            'currency': str,
            'ids_not_found': str,
            'price': str,
            'received_at': date,
            'request_id': str,
            'request_status': RequestStatus,
            'items_count': int,
            'product': ProductWebsocket,
            'records': List[CsvWebsockets]
        }

        self.attribute_map = {
            'links': '_links',
            'account_id': 'account_id',
            'currency': 'currency',
            'ids_not_found': 'ids_not_found',
            'price': 'price',
            'received_at': 'received_at',
            'request_id': 'request_id',
            'request_status': 'request_status',
            'items_count': 'items_count',
            'product': 'product',
            'records': 'records'
        }

        self._links = links
        self._account_id = account_id
        self._currency = currency
        self._ids_not_found = ids_not_found
        self._price = price
        self._received_at = received_at
        self._request_id = request_id
        self._request_status = request_status
        self._items_count = items_count
        self._product = product
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecords200ResponseOneOf4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_records_200_response_oneOf_4 of this GetRecords200ResponseOneOf4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this GetRecords200ResponseOneOf4.


        :return: The links of this GetRecords200ResponseOneOf4.
        :rtype: ReportResponseTopLevelLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetRecords200ResponseOneOf4.


        :param links: The links of this GetRecords200ResponseOneOf4.
        :type links: ReportResponseTopLevelLinks
        """

        self._links = links

    @property
    def account_id(self):
        """Gets the account_id of this GetRecords200ResponseOneOf4.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this GetRecords200ResponseOneOf4.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetRecords200ResponseOneOf4.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this GetRecords200ResponseOneOf4.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def currency(self):
        """Gets the currency of this GetRecords200ResponseOneOf4.

        Currency of the price of the request.

        :return: The currency of this GetRecords200ResponseOneOf4.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetRecords200ResponseOneOf4.

        Currency of the price of the request.

        :param currency: The currency of this GetRecords200ResponseOneOf4.
        :type currency: str
        """

        self._currency = currency

    @property
    def ids_not_found(self):
        """Gets the ids_not_found of this GetRecords200ResponseOneOf4.

        If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.

        :return: The ids_not_found of this GetRecords200ResponseOneOf4.
        :rtype: str
        """
        return self._ids_not_found

    @ids_not_found.setter
    def ids_not_found(self, ids_not_found):
        """Sets the ids_not_found of this GetRecords200ResponseOneOf4.

        If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.

        :param ids_not_found: The ids_not_found of this GetRecords200ResponseOneOf4.
        :type ids_not_found: str
        """

        self._ids_not_found = ids_not_found

    @property
    def price(self):
        """Gets the price of this GetRecords200ResponseOneOf4.

        Price of the request.

        :return: The price of this GetRecords200ResponseOneOf4.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetRecords200ResponseOneOf4.

        Price of the request.

        :param price: The price of this GetRecords200ResponseOneOf4.
        :type price: str
        """

        self._price = price

    @property
    def received_at(self):
        """Gets the received_at of this GetRecords200ResponseOneOf4.

        Time at which the report request was received by the service.

        :return: The received_at of this GetRecords200ResponseOneOf4.
        :rtype: date
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this GetRecords200ResponseOneOf4.

        Time at which the report request was received by the service.

        :param received_at: The received_at of this GetRecords200ResponseOneOf4.
        :type received_at: date
        """

        self._received_at = received_at

    @property
    def request_id(self):
        """Gets the request_id of this GetRecords200ResponseOneOf4.

        UUID of the request.

        :return: The request_id of this GetRecords200ResponseOneOf4.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GetRecords200ResponseOneOf4.

        UUID of the request.

        :param request_id: The request_id of this GetRecords200ResponseOneOf4.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_status(self):
        """Gets the request_status of this GetRecords200ResponseOneOf4.


        :return: The request_status of this GetRecords200ResponseOneOf4.
        :rtype: RequestStatus
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this GetRecords200ResponseOneOf4.


        :param request_status: The request_status of this GetRecords200ResponseOneOf4.
        :type request_status: RequestStatus
        """

        self._request_status = request_status

    @property
    def items_count(self):
        """Gets the items_count of this GetRecords200ResponseOneOf4.

        The number of returned records

        :return: The items_count of this GetRecords200ResponseOneOf4.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this GetRecords200ResponseOneOf4.

        The number of returned records

        :param items_count: The items_count of this GetRecords200ResponseOneOf4.
        :type items_count: int
        """

        self._items_count = items_count

    @property
    def product(self):
        """Gets the product of this GetRecords200ResponseOneOf4.


        :return: The product of this GetRecords200ResponseOneOf4.
        :rtype: ProductWebsocket
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GetRecords200ResponseOneOf4.


        :param product: The product of this GetRecords200ResponseOneOf4.
        :type product: ProductWebsocket
        """

        self._product = product

    @property
    def records(self):
        """Gets the records of this GetRecords200ResponseOneOf4.

        Records in JSON format

        :return: The records of this GetRecords200ResponseOneOf4.
        :rtype: List[CsvWebsockets]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this GetRecords200ResponseOneOf4.

        Records in JSON format

        :param records: The records of this GetRecords200ResponseOneOf4.
        :type records: List[CsvWebsockets]
        """

        self._records = records
