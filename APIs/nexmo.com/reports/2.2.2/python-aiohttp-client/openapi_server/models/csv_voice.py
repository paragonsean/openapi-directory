# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.voice_status import VoiceStatus
from openapi_server import util


class CsvVoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, call_id: str=None, country: str=None, country_name: str=None, currency: str=None, date_end: date=None, date_start: date=None, direction: Direction=None, duration: int=None, _from: str=None, network: str=None, network_name: str=None, price: str=None, status: VoiceStatus=None, status_description: str=None, to: str=None, total_price: str=None):
        """CsvVoice - a model defined in OpenAPI

        :param account_id: The account_id of this CsvVoice.
        :param call_id: The call_id of this CsvVoice.
        :param country: The country of this CsvVoice.
        :param country_name: The country_name of this CsvVoice.
        :param currency: The currency of this CsvVoice.
        :param date_end: The date_end of this CsvVoice.
        :param date_start: The date_start of this CsvVoice.
        :param direction: The direction of this CsvVoice.
        :param duration: The duration of this CsvVoice.
        :param _from: The _from of this CsvVoice.
        :param network: The network of this CsvVoice.
        :param network_name: The network_name of this CsvVoice.
        :param price: The price of this CsvVoice.
        :param status: The status of this CsvVoice.
        :param status_description: The status_description of this CsvVoice.
        :param to: The to of this CsvVoice.
        :param total_price: The total_price of this CsvVoice.
        """
        self.openapi_types = {
            'account_id': str,
            'call_id': str,
            'country': str,
            'country_name': str,
            'currency': str,
            'date_end': date,
            'date_start': date,
            'direction': Direction,
            'duration': int,
            '_from': str,
            'network': str,
            'network_name': str,
            'price': str,
            'status': VoiceStatus,
            'status_description': str,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'call_id': 'call_id',
            'country': 'country',
            'country_name': 'country_name',
            'currency': 'currency',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'direction': 'direction',
            'duration': 'duration',
            '_from': 'from',
            'network': 'network',
            'network_name': 'network_name',
            'price': 'price',
            'status': 'status',
            'status_description': 'status_description',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._call_id = call_id
        self._country = country
        self._country_name = country_name
        self._currency = currency
        self._date_end = date_end
        self._date_start = date_start
        self._direction = direction
        self._duration = duration
        self.__from = _from
        self._network = network
        self._network_name = network_name
        self._price = price
        self._status = status
        self._status_description = status_description
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvVoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_voice of this CsvVoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvVoice.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvVoice.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvVoice.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvVoice.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def call_id(self):
        """Gets the call_id of this CsvVoice.

        UUID of the request.

        :return: The call_id of this CsvVoice.
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CsvVoice.

        UUID of the request.

        :param call_id: The call_id of this CsvVoice.
        :type call_id: str
        """

        self._call_id = call_id

    @property
    def country(self):
        """Gets the country of this CsvVoice.

        Country where the request was sent.

        :return: The country of this CsvVoice.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CsvVoice.

        Country where the request was sent.

        :param country: The country of this CsvVoice.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this CsvVoice.

        Country name where the request was sent.

        :return: The country_name of this CsvVoice.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CsvVoice.

        Country name where the request was sent.

        :param country_name: The country_name of this CsvVoice.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this CsvVoice.

        Currency of the price of the request.

        :return: The currency of this CsvVoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvVoice.

        Currency of the price of the request.

        :param currency: The currency of this CsvVoice.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_end(self):
        """Gets the date_end of this CsvVoice.

        Date of the end of the call.

        :return: The date_end of this CsvVoice.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CsvVoice.

        Date of the end of the call.

        :param date_end: The date_end of this CsvVoice.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CsvVoice.

        Date of the start of the call.

        :return: The date_start of this CsvVoice.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CsvVoice.

        Date of the start of the call.

        :param date_start: The date_start of this CsvVoice.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def direction(self):
        """Gets the direction of this CsvVoice.


        :return: The direction of this CsvVoice.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CsvVoice.


        :param direction: The direction of this CsvVoice.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this CsvVoice.

        Duration of the call in seconds.

        :return: The duration of this CsvVoice.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CsvVoice.

        Duration of the call in seconds.

        :param duration: The duration of this CsvVoice.
        :type duration: int
        """

        self._duration = duration

    @property
    def _from(self):
        """Gets the _from of this CsvVoice.

        Request from this number.

        :return: The _from of this CsvVoice.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CsvVoice.

        Request from this number.

        :param _from: The _from of this CsvVoice.
        :type _from: str
        """

        self.__from = _from

    @property
    def network(self):
        """Gets the network of this CsvVoice.

        Network used to send the request.

        :return: The network of this CsvVoice.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CsvVoice.

        Network used to send the request.

        :param network: The network of this CsvVoice.
        :type network: str
        """

        self._network = network

    @property
    def network_name(self):
        """Gets the network_name of this CsvVoice.

        Name of the network used to send the request.

        :return: The network_name of this CsvVoice.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this CsvVoice.

        Name of the network used to send the request.

        :param network_name: The network_name of this CsvVoice.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def price(self):
        """Gets the price of this CsvVoice.

        Price of the request.

        :return: The price of this CsvVoice.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CsvVoice.

        Price of the request.

        :param price: The price of this CsvVoice.
        :type price: str
        """

        self._price = price

    @property
    def status(self):
        """Gets the status of this CsvVoice.


        :return: The status of this CsvVoice.
        :rtype: VoiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvVoice.


        :param status: The status of this CsvVoice.
        :type status: VoiceStatus
        """

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this CsvVoice.

        Description of the status of the call.

        :return: The status_description of this CsvVoice.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this CsvVoice.

        Description of the status of the call.

        :param status_description: The status_description of this CsvVoice.
        :type status_description: str
        """

        self._status_description = status_description

    @property
    def to(self):
        """Gets the to of this CsvVoice.

        Request to this number.

        :return: The to of this CsvVoice.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CsvVoice.

        Request to this number.

        :param to: The to of this CsvVoice.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this CsvVoice.

        Total price of the request.

        :return: The total_price of this CsvVoice.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvVoice.

        Total price of the request.

        :param total_price: The total_price of this CsvVoice.
        :type total_price: str
        """

        self._total_price = total_price
