# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_ni import ProductNi
from openapi_server import util


class NumberInsightFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, number: str=None, product: ProductNi=None):
        """NumberInsightFields - a model defined in OpenAPI

        :param network: The network of this NumberInsightFields.
        :param number: The number of this NumberInsightFields.
        :param product: The product of this NumberInsightFields.
        """
        self.openapi_types = {
            'network': str,
            'number': str,
            'product': ProductNi
        }

        self.attribute_map = {
            'network': 'network',
            'number': 'number',
            'product': 'product'
        }

        self._network = network
        self._number = number
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberInsightFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The number_insight_fields of this NumberInsightFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this NumberInsightFields.

        Network used to send the request.

        :return: The network of this NumberInsightFields.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NumberInsightFields.

        Network used to send the request.

        :param network: The network of this NumberInsightFields.
        :type network: str
        """

        self._network = network

    @property
    def number(self):
        """Gets the number of this NumberInsightFields.

        Search only request for the target number.

        :return: The number of this NumberInsightFields.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NumberInsightFields.

        Search only request for the target number.

        :param number: The number of this NumberInsightFields.
        :type number: str
        """

        self._number = number

    @property
    def product(self):
        """Gets the product of this NumberInsightFields.


        :return: The product of this NumberInsightFields.
        :rtype: ProductNi
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this NumberInsightFields.


        :param product: The product of this NumberInsightFields.
        :type product: ProductNi
        """

        self._product = product
