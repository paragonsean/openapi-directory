# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsvConversations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, application_id: str=None, client_ref: str=None, conversation_id: str=None, creation_date: date=None, currency: str=None, id: str=None, price: str=None, request_id: str=None, total_price: str=None, user_id: str=None):
        """CsvConversations - a model defined in OpenAPI

        :param account_id: The account_id of this CsvConversations.
        :param application_id: The application_id of this CsvConversations.
        :param client_ref: The client_ref of this CsvConversations.
        :param conversation_id: The conversation_id of this CsvConversations.
        :param creation_date: The creation_date of this CsvConversations.
        :param currency: The currency of this CsvConversations.
        :param id: The id of this CsvConversations.
        :param price: The price of this CsvConversations.
        :param request_id: The request_id of this CsvConversations.
        :param total_price: The total_price of this CsvConversations.
        :param user_id: The user_id of this CsvConversations.
        """
        self.openapi_types = {
            'account_id': str,
            'application_id': str,
            'client_ref': str,
            'conversation_id': str,
            'creation_date': date,
            'currency': str,
            'id': str,
            'price': str,
            'request_id': str,
            'total_price': str,
            'user_id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'application_id': 'application_id',
            'client_ref': 'client_ref',
            'conversation_id': 'conversation_id',
            'creation_date': 'creation_date',
            'currency': 'currency',
            'id': 'id',
            'price': 'price',
            'request_id': 'request_id',
            'total_price': 'total_price',
            'user_id': 'user_id'
        }

        self._account_id = account_id
        self._application_id = application_id
        self._client_ref = client_ref
        self._conversation_id = conversation_id
        self._creation_date = creation_date
        self._currency = currency
        self._id = id
        self._price = price
        self._request_id = request_id
        self._total_price = total_price
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvConversations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_conversations of this CsvConversations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvConversations.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvConversations.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvConversations.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvConversations.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def application_id(self):
        """Gets the application_id of this CsvConversations.

        Search only for requests attached to a particular Application ID.

        :return: The application_id of this CsvConversations.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this CsvConversations.

        Search only for requests attached to a particular Application ID.

        :param application_id: The application_id of this CsvConversations.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def client_ref(self):
        """Gets the client_ref of this CsvConversations.

        Search for messages with this `client_ref`.

        :return: The client_ref of this CsvConversations.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this CsvConversations.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this CsvConversations.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def conversation_id(self):
        """Gets the conversation_id of this CsvConversations.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this CsvConversations.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this CsvConversations.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this CsvConversations.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def creation_date(self):
        """Gets the creation_date of this CsvConversations.

        Date the event was created.

        :return: The creation_date of this CsvConversations.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CsvConversations.

        Date the event was created.

        :param creation_date: The creation_date of this CsvConversations.
        :type creation_date: date
        """

        self._creation_date = creation_date

    @property
    def currency(self):
        """Gets the currency of this CsvConversations.

        Currency of the price of the request.

        :return: The currency of this CsvConversations.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvConversations.

        Currency of the price of the request.

        :param currency: The currency of this CsvConversations.
        :type currency: str
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this CsvConversations.

        Id of the related CDR.

        :return: The id of this CsvConversations.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CsvConversations.

        Id of the related CDR.

        :param id: The id of this CsvConversations.
        :type id: str
        """

        self._id = id

    @property
    def price(self):
        """Gets the price of this CsvConversations.

        Price of the request.

        :return: The price of this CsvConversations.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CsvConversations.

        Price of the request.

        :param price: The price of this CsvConversations.
        :type price: str
        """

        self._price = price

    @property
    def request_id(self):
        """Gets the request_id of this CsvConversations.

        UUID of the request.

        :return: The request_id of this CsvConversations.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CsvConversations.

        UUID of the request.

        :param request_id: The request_id of this CsvConversations.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def total_price(self):
        """Gets the total_price of this CsvConversations.

        Total price of the request.

        :return: The total_price of this CsvConversations.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvConversations.

        Total price of the request.

        :param total_price: The total_price of this CsvConversations.
        :type total_price: str
        """

        self._total_price = total_price

    @property
    def user_id(self):
        """Gets the user_id of this CsvConversations.

        User id in the conversation.

        :return: The user_id of this CsvConversations.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CsvConversations.

        User id in the conversation.

        :param user_id: The user_id of this CsvConversations.
        :type user_id: str
        """

        self._user_id = user_id
