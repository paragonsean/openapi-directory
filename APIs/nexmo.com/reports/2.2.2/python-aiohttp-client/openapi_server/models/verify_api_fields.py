# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_verify import ProductVerify
from openapi_server import util


class VerifyApiFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, product: ProductVerify=None, to: str=None):
        """VerifyApiFields - a model defined in OpenAPI

        :param network: The network of this VerifyApiFields.
        :param product: The product of this VerifyApiFields.
        :param to: The to of this VerifyApiFields.
        """
        self.openapi_types = {
            'network': str,
            'product': ProductVerify,
            'to': str
        }

        self.attribute_map = {
            'network': 'network',
            'product': 'product',
            'to': 'to'
        }

        self._network = network
        self._product = product
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyApiFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify_api_fields of this VerifyApiFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this VerifyApiFields.

        Network used to send the request.

        :return: The network of this VerifyApiFields.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VerifyApiFields.

        Network used to send the request.

        :param network: The network of this VerifyApiFields.
        :type network: str
        """

        self._network = network

    @property
    def product(self):
        """Gets the product of this VerifyApiFields.


        :return: The product of this VerifyApiFields.
        :rtype: ProductVerify
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this VerifyApiFields.


        :param product: The product of this VerifyApiFields.
        :type product: ProductVerify
        """

        self._product = product

    @property
    def to(self):
        """Gets the to of this VerifyApiFields.

        Request to this number.

        :return: The to of this VerifyApiFields.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this VerifyApiFields.

        Request to this number.

        :param to: The to of this VerifyApiFields.
        :type to: str
        """

        self._to = to
