# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.sms_status import SmsStatus
from openapi_server import util


class JsonSmsOutbound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, client_ref: str=None, concatenated: bool=False, country: str=None, country_name: str=None, currency: str=None, date_finalized: date=None, date_received: date=None, direction: Direction=None, error_code: str=None, error_code_description: str=None, _from: str=None, latency: int=None, message_id: str=None, network: str=None, network_name: str=None, status: SmsStatus=None, to: str=None, total_price: str=None):
        """JsonSmsOutbound - a model defined in OpenAPI

        :param account_id: The account_id of this JsonSmsOutbound.
        :param client_ref: The client_ref of this JsonSmsOutbound.
        :param concatenated: The concatenated of this JsonSmsOutbound.
        :param country: The country of this JsonSmsOutbound.
        :param country_name: The country_name of this JsonSmsOutbound.
        :param currency: The currency of this JsonSmsOutbound.
        :param date_finalized: The date_finalized of this JsonSmsOutbound.
        :param date_received: The date_received of this JsonSmsOutbound.
        :param direction: The direction of this JsonSmsOutbound.
        :param error_code: The error_code of this JsonSmsOutbound.
        :param error_code_description: The error_code_description of this JsonSmsOutbound.
        :param _from: The _from of this JsonSmsOutbound.
        :param latency: The latency of this JsonSmsOutbound.
        :param message_id: The message_id of this JsonSmsOutbound.
        :param network: The network of this JsonSmsOutbound.
        :param network_name: The network_name of this JsonSmsOutbound.
        :param status: The status of this JsonSmsOutbound.
        :param to: The to of this JsonSmsOutbound.
        :param total_price: The total_price of this JsonSmsOutbound.
        """
        self.openapi_types = {
            'account_id': str,
            'client_ref': str,
            'concatenated': bool,
            'country': str,
            'country_name': str,
            'currency': str,
            'date_finalized': date,
            'date_received': date,
            'direction': Direction,
            'error_code': str,
            'error_code_description': str,
            '_from': str,
            'latency': int,
            'message_id': str,
            'network': str,
            'network_name': str,
            'status': SmsStatus,
            'to': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'client_ref': 'client_ref',
            'concatenated': 'concatenated',
            'country': 'country',
            'country_name': 'country_name',
            'currency': 'currency',
            'date_finalized': 'date_finalized',
            'date_received': 'date_received',
            'direction': 'direction',
            'error_code': 'error_code',
            'error_code_description': 'error_code_description',
            '_from': 'from',
            'latency': 'latency',
            'message_id': 'message_id',
            'network': 'network',
            'network_name': 'network_name',
            'status': 'status',
            'to': 'to',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._client_ref = client_ref
        self._concatenated = concatenated
        self._country = country
        self._country_name = country_name
        self._currency = currency
        self._date_finalized = date_finalized
        self._date_received = date_received
        self._direction = direction
        self._error_code = error_code
        self._error_code_description = error_code_description
        self.__from = _from
        self._latency = latency
        self._message_id = message_id
        self._network = network
        self._network_name = network_name
        self._status = status
        self._to = to
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonSmsOutbound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_sms_outbound of this JsonSmsOutbound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this JsonSmsOutbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this JsonSmsOutbound.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this JsonSmsOutbound.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this JsonSmsOutbound.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def client_ref(self):
        """Gets the client_ref of this JsonSmsOutbound.

        Search for messages with this `client_ref`.

        :return: The client_ref of this JsonSmsOutbound.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this JsonSmsOutbound.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this JsonSmsOutbound.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def concatenated(self):
        """Gets the concatenated of this JsonSmsOutbound.

        Whether the SMS was split up into multiple parts (due to its length).

        :return: The concatenated of this JsonSmsOutbound.
        :rtype: bool
        """
        return self._concatenated

    @concatenated.setter
    def concatenated(self, concatenated):
        """Sets the concatenated of this JsonSmsOutbound.

        Whether the SMS was split up into multiple parts (due to its length).

        :param concatenated: The concatenated of this JsonSmsOutbound.
        :type concatenated: bool
        """

        self._concatenated = concatenated

    @property
    def country(self):
        """Gets the country of this JsonSmsOutbound.

        Country where the request was sent.

        :return: The country of this JsonSmsOutbound.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this JsonSmsOutbound.

        Country where the request was sent.

        :param country: The country of this JsonSmsOutbound.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this JsonSmsOutbound.

        Country name where the request was sent.

        :return: The country_name of this JsonSmsOutbound.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this JsonSmsOutbound.

        Country name where the request was sent.

        :param country_name: The country_name of this JsonSmsOutbound.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def currency(self):
        """Gets the currency of this JsonSmsOutbound.

        Currency of the price of the request.

        :return: The currency of this JsonSmsOutbound.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JsonSmsOutbound.

        Currency of the price of the request.

        :param currency: The currency of this JsonSmsOutbound.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_finalized(self):
        """Gets the date_finalized of this JsonSmsOutbound.

        Date when the request was finalized.

        :return: The date_finalized of this JsonSmsOutbound.
        :rtype: date
        """
        return self._date_finalized

    @date_finalized.setter
    def date_finalized(self, date_finalized):
        """Sets the date_finalized of this JsonSmsOutbound.

        Date when the request was finalized.

        :param date_finalized: The date_finalized of this JsonSmsOutbound.
        :type date_finalized: date
        """

        self._date_finalized = date_finalized

    @property
    def date_received(self):
        """Gets the date_received of this JsonSmsOutbound.

        Date of the request.

        :return: The date_received of this JsonSmsOutbound.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this JsonSmsOutbound.

        Date of the request.

        :param date_received: The date_received of this JsonSmsOutbound.
        :type date_received: date
        """

        self._date_received = date_received

    @property
    def direction(self):
        """Gets the direction of this JsonSmsOutbound.


        :return: The direction of this JsonSmsOutbound.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this JsonSmsOutbound.


        :param direction: The direction of this JsonSmsOutbound.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def error_code(self):
        """Gets the error_code of this JsonSmsOutbound.

        Error code of the request.

        :return: The error_code of this JsonSmsOutbound.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this JsonSmsOutbound.

        Error code of the request.

        :param error_code: The error_code of this JsonSmsOutbound.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_code_description(self):
        """Gets the error_code_description of this JsonSmsOutbound.

        Description of the error code of the request.

        :return: The error_code_description of this JsonSmsOutbound.
        :rtype: str
        """
        return self._error_code_description

    @error_code_description.setter
    def error_code_description(self, error_code_description):
        """Sets the error_code_description of this JsonSmsOutbound.

        Description of the error code of the request.

        :param error_code_description: The error_code_description of this JsonSmsOutbound.
        :type error_code_description: str
        """

        self._error_code_description = error_code_description

    @property
    def _from(self):
        """Gets the _from of this JsonSmsOutbound.

        Request from this number.

        :return: The _from of this JsonSmsOutbound.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this JsonSmsOutbound.

        Request from this number.

        :param _from: The _from of this JsonSmsOutbound.
        :type _from: str
        """

        self.__from = _from

    @property
    def latency(self):
        """Gets the latency of this JsonSmsOutbound.

        Latency of the request in ms.

        :return: The latency of this JsonSmsOutbound.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this JsonSmsOutbound.

        Latency of the request in ms.

        :param latency: The latency of this JsonSmsOutbound.
        :type latency: int
        """

        self._latency = latency

    @property
    def message_id(self):
        """Gets the message_id of this JsonSmsOutbound.

        Id of the request.

        :return: The message_id of this JsonSmsOutbound.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this JsonSmsOutbound.

        Id of the request.

        :param message_id: The message_id of this JsonSmsOutbound.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def network(self):
        """Gets the network of this JsonSmsOutbound.

        Network used to send the request.

        :return: The network of this JsonSmsOutbound.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this JsonSmsOutbound.

        Network used to send the request.

        :param network: The network of this JsonSmsOutbound.
        :type network: str
        """

        self._network = network

    @property
    def network_name(self):
        """Gets the network_name of this JsonSmsOutbound.

        Name of the network used to send the request.

        :return: The network_name of this JsonSmsOutbound.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this JsonSmsOutbound.

        Name of the network used to send the request.

        :param network_name: The network_name of this JsonSmsOutbound.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def status(self):
        """Gets the status of this JsonSmsOutbound.


        :return: The status of this JsonSmsOutbound.
        :rtype: SmsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JsonSmsOutbound.


        :param status: The status of this JsonSmsOutbound.
        :type status: SmsStatus
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this JsonSmsOutbound.

        Request to this number.

        :return: The to of this JsonSmsOutbound.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this JsonSmsOutbound.

        Request to this number.

        :param to: The to of this JsonSmsOutbound.
        :type to: str
        """

        self._to = to

    @property
    def total_price(self):
        """Gets the total_price of this JsonSmsOutbound.

        Price of the request.

        :return: The total_price of this JsonSmsOutbound.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this JsonSmsOutbound.

        Price of the request.

        :param total_price: The total_price of this JsonSmsOutbound.
        :type total_price: str
        """

        self._total_price = total_price
