# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.product_messages import ProductMessages
from openapi_server import util


class MessagesFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: Direction=None, _from: str=None, id: str=None, include_message: bool=False, product: ProductMessages=None, to: str=None):
        """MessagesFields - a model defined in OpenAPI

        :param direction: The direction of this MessagesFields.
        :param _from: The _from of this MessagesFields.
        :param id: The id of this MessagesFields.
        :param include_message: The include_message of this MessagesFields.
        :param product: The product of this MessagesFields.
        :param to: The to of this MessagesFields.
        """
        self.openapi_types = {
            'direction': Direction,
            '_from': str,
            'id': str,
            'include_message': bool,
            'product': ProductMessages,
            'to': str
        }

        self.attribute_map = {
            'direction': 'direction',
            '_from': 'from',
            'id': 'id',
            'include_message': 'include_message',
            'product': 'product',
            'to': 'to'
        }

        self._direction = direction
        self.__from = _from
        self._id = id
        self._include_message = include_message
        self._product = product
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_fields of this MessagesFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this MessagesFields.


        :return: The direction of this MessagesFields.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MessagesFields.


        :param direction: The direction of this MessagesFields.
        :type direction: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this MessagesFields.

        Request from this number.

        :return: The _from of this MessagesFields.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MessagesFields.

        Request from this number.

        :param _from: The _from of this MessagesFields.
        :type _from: str
        """

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this MessagesFields.

        Search only messages with the specified uuid.

        :return: The id of this MessagesFields.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessagesFields.

        Search only messages with the specified uuid.

        :param id: The id of this MessagesFields.
        :type id: str
        """

        self._id = id

    @property
    def include_message(self):
        """Gets the include_message of this MessagesFields.

        Include the text of messages in the report.

        :return: The include_message of this MessagesFields.
        :rtype: bool
        """
        return self._include_message

    @include_message.setter
    def include_message(self, include_message):
        """Sets the include_message of this MessagesFields.

        Include the text of messages in the report.

        :param include_message: The include_message of this MessagesFields.
        :type include_message: bool
        """

        self._include_message = include_message

    @property
    def product(self):
        """Gets the product of this MessagesFields.


        :return: The product of this MessagesFields.
        :rtype: ProductMessages
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this MessagesFields.


        :param product: The product of this MessagesFields.
        :type product: ProductMessages
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def to(self):
        """Gets the to of this MessagesFields.

        Request to this number.

        :return: The to of this MessagesFields.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessagesFields.

        Request to this number.

        :param to: The to of this MessagesFields.
        :type to: str
        """

        self._to = to
