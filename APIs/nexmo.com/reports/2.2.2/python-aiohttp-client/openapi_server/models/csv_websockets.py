# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsvWebsockets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, call_id: str=None, currency: str=None, date_end: date=None, date_start: date=None, duration: int=None, price: str=None, status: str=None, total_price: str=None):
        """CsvWebsockets - a model defined in OpenAPI

        :param account_id: The account_id of this CsvWebsockets.
        :param call_id: The call_id of this CsvWebsockets.
        :param currency: The currency of this CsvWebsockets.
        :param date_end: The date_end of this CsvWebsockets.
        :param date_start: The date_start of this CsvWebsockets.
        :param duration: The duration of this CsvWebsockets.
        :param price: The price of this CsvWebsockets.
        :param status: The status of this CsvWebsockets.
        :param total_price: The total_price of this CsvWebsockets.
        """
        self.openapi_types = {
            'account_id': str,
            'call_id': str,
            'currency': str,
            'date_end': date,
            'date_start': date,
            'duration': int,
            'price': str,
            'status': str,
            'total_price': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'call_id': 'call_id',
            'currency': 'currency',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'duration': 'duration',
            'price': 'price',
            'status': 'status',
            'total_price': 'total_price'
        }

        self._account_id = account_id
        self._call_id = call_id
        self._currency = currency
        self._date_end = date_end
        self._date_start = date_start
        self._duration = duration
        self._price = price
        self._status = status
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvWebsockets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_websockets of this CsvWebsockets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvWebsockets.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvWebsockets.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvWebsockets.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvWebsockets.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def call_id(self):
        """Gets the call_id of this CsvWebsockets.

        UUID of the request.

        :return: The call_id of this CsvWebsockets.
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CsvWebsockets.

        UUID of the request.

        :param call_id: The call_id of this CsvWebsockets.
        :type call_id: str
        """

        self._call_id = call_id

    @property
    def currency(self):
        """Gets the currency of this CsvWebsockets.

        Currency of the price of the request.

        :return: The currency of this CsvWebsockets.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvWebsockets.

        Currency of the price of the request.

        :param currency: The currency of this CsvWebsockets.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_end(self):
        """Gets the date_end of this CsvWebsockets.

        Date of the end of the call.

        :return: The date_end of this CsvWebsockets.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CsvWebsockets.

        Date of the end of the call.

        :param date_end: The date_end of this CsvWebsockets.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CsvWebsockets.

        Date of the start of the call.

        :return: The date_start of this CsvWebsockets.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CsvWebsockets.

        Date of the start of the call.

        :param date_start: The date_start of this CsvWebsockets.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def duration(self):
        """Gets the duration of this CsvWebsockets.

        Duration of the call in seconds.

        :return: The duration of this CsvWebsockets.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CsvWebsockets.

        Duration of the call in seconds.

        :param duration: The duration of this CsvWebsockets.
        :type duration: int
        """

        self._duration = duration

    @property
    def price(self):
        """Gets the price of this CsvWebsockets.

        Price of the request.

        :return: The price of this CsvWebsockets.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CsvWebsockets.

        Price of the request.

        :param price: The price of this CsvWebsockets.
        :type price: str
        """

        self._price = price

    @property
    def status(self):
        """Gets the status of this CsvWebsockets.

        Search only for WebSocket call with corresponding status.

        :return: The status of this CsvWebsockets.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvWebsockets.

        Search only for WebSocket call with corresponding status.

        :param status: The status of this CsvWebsockets.
        :type status: str
        """

        self._status = status

    @property
    def total_price(self):
        """Gets the total_price of this CsvWebsockets.

        Total price of the request.

        :return: The total_price of this CsvWebsockets.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvWebsockets.

        Total price of the request.

        :param total_price: The total_price of this CsvWebsockets.
        :type total_price: str
        """

        self._total_price = total_price
