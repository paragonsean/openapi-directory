# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsvInAppVoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, application_id: str=None, client_ref: str=None, conversation_id: str=None, currency: str=None, date_end: date=None, date_start: date=None, duration: int=None, id: str=None, leg_id: str=None, price: str=None, request_id: str=None, status: str=None, total_price: str=None, user_id: str=None):
        """CsvInAppVoice - a model defined in OpenAPI

        :param account_id: The account_id of this CsvInAppVoice.
        :param application_id: The application_id of this CsvInAppVoice.
        :param client_ref: The client_ref of this CsvInAppVoice.
        :param conversation_id: The conversation_id of this CsvInAppVoice.
        :param currency: The currency of this CsvInAppVoice.
        :param date_end: The date_end of this CsvInAppVoice.
        :param date_start: The date_start of this CsvInAppVoice.
        :param duration: The duration of this CsvInAppVoice.
        :param id: The id of this CsvInAppVoice.
        :param leg_id: The leg_id of this CsvInAppVoice.
        :param price: The price of this CsvInAppVoice.
        :param request_id: The request_id of this CsvInAppVoice.
        :param status: The status of this CsvInAppVoice.
        :param total_price: The total_price of this CsvInAppVoice.
        :param user_id: The user_id of this CsvInAppVoice.
        """
        self.openapi_types = {
            'account_id': str,
            'application_id': str,
            'client_ref': str,
            'conversation_id': str,
            'currency': str,
            'date_end': date,
            'date_start': date,
            'duration': int,
            'id': str,
            'leg_id': str,
            'price': str,
            'request_id': str,
            'status': str,
            'total_price': str,
            'user_id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'application_id': 'application_id',
            'client_ref': 'client_ref',
            'conversation_id': 'conversation_id',
            'currency': 'currency',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'duration': 'duration',
            'id': 'id',
            'leg_id': 'leg_id',
            'price': 'price',
            'request_id': 'request_id',
            'status': 'status',
            'total_price': 'total_price',
            'user_id': 'user_id'
        }

        self._account_id = account_id
        self._application_id = application_id
        self._client_ref = client_ref
        self._conversation_id = conversation_id
        self._currency = currency
        self._date_end = date_end
        self._date_start = date_start
        self._duration = duration
        self._id = id
        self._leg_id = leg_id
        self._price = price
        self._request_id = request_id
        self._status = status
        self._total_price = total_price
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvInAppVoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The csv_in_app_voice of this CsvInAppVoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CsvInAppVoice.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :return: The account_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CsvInAppVoice.

        The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.

        :param account_id: The account_id of this CsvInAppVoice.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def application_id(self):
        """Gets the application_id of this CsvInAppVoice.

        Search only for requests attached to a particular Application ID.

        :return: The application_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this CsvInAppVoice.

        Search only for requests attached to a particular Application ID.

        :param application_id: The application_id of this CsvInAppVoice.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def client_ref(self):
        """Gets the client_ref of this CsvInAppVoice.

        Search for messages with this `client_ref`.

        :return: The client_ref of this CsvInAppVoice.
        :rtype: str
        """
        return self._client_ref

    @client_ref.setter
    def client_ref(self, client_ref):
        """Sets the client_ref of this CsvInAppVoice.

        Search for messages with this `client_ref`.

        :param client_ref: The client_ref of this CsvInAppVoice.
        :type client_ref: str
        """
        if client_ref is not None and len(client_ref) > 40:
            raise ValueError("Invalid value for `client_ref`, length must be less than or equal to `40`")
        if client_ref is not None and len(client_ref) < 40:
            raise ValueError("Invalid value for `client_ref`, length must be greater than or equal to `40`")

        self._client_ref = client_ref

    @property
    def conversation_id(self):
        """Gets the conversation_id of this CsvInAppVoice.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :return: The conversation_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this CsvInAppVoice.

        Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.

        :param conversation_id: The conversation_id of this CsvInAppVoice.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def currency(self):
        """Gets the currency of this CsvInAppVoice.

        Currency of the price of the request.

        :return: The currency of this CsvInAppVoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CsvInAppVoice.

        Currency of the price of the request.

        :param currency: The currency of this CsvInAppVoice.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_end(self):
        """Gets the date_end of this CsvInAppVoice.

        Date of the end of the call.

        :return: The date_end of this CsvInAppVoice.
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CsvInAppVoice.

        Date of the end of the call.

        :param date_end: The date_end of this CsvInAppVoice.
        :type date_end: date
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CsvInAppVoice.

        Date of the start of the call.

        :return: The date_start of this CsvInAppVoice.
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CsvInAppVoice.

        Date of the start of the call.

        :param date_start: The date_start of this CsvInAppVoice.
        :type date_start: date
        """

        self._date_start = date_start

    @property
    def duration(self):
        """Gets the duration of this CsvInAppVoice.

        Duration of the call in seconds.

        :return: The duration of this CsvInAppVoice.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CsvInAppVoice.

        Duration of the call in seconds.

        :param duration: The duration of this CsvInAppVoice.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this CsvInAppVoice.

        Id of the related CDR.

        :return: The id of this CsvInAppVoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CsvInAppVoice.

        Id of the related CDR.

        :param id: The id of this CsvInAppVoice.
        :type id: str
        """

        self._id = id

    @property
    def leg_id(self):
        """Gets the leg_id of this CsvInAppVoice.

        Id of the call leg.

        :return: The leg_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._leg_id

    @leg_id.setter
    def leg_id(self, leg_id):
        """Sets the leg_id of this CsvInAppVoice.

        Id of the call leg.

        :param leg_id: The leg_id of this CsvInAppVoice.
        :type leg_id: str
        """

        self._leg_id = leg_id

    @property
    def price(self):
        """Gets the price of this CsvInAppVoice.

        Price of the request.

        :return: The price of this CsvInAppVoice.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CsvInAppVoice.

        Price of the request.

        :param price: The price of this CsvInAppVoice.
        :type price: str
        """

        self._price = price

    @property
    def request_id(self):
        """Gets the request_id of this CsvInAppVoice.

        UUID of the request.

        :return: The request_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CsvInAppVoice.

        UUID of the request.

        :param request_id: The request_id of this CsvInAppVoice.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this CsvInAppVoice.

        Status of the termination of the In-App call.

        :return: The status of this CsvInAppVoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CsvInAppVoice.

        Status of the termination of the In-App call.

        :param status: The status of this CsvInAppVoice.
        :type status: str
        """

        self._status = status

    @property
    def total_price(self):
        """Gets the total_price of this CsvInAppVoice.

        Total price of the request.

        :return: The total_price of this CsvInAppVoice.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this CsvInAppVoice.

        Total price of the request.

        :param total_price: The total_price of this CsvInAppVoice.
        :type total_price: str
        """

        self._total_price = total_price

    @property
    def user_id(self):
        """Gets the user_id of this CsvInAppVoice.

        User id in the conversation.

        :return: The user_id of this CsvInAppVoice.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CsvInAppVoice.

        User id in the conversation.

        :param user_id: The user_id of this CsvInAppVoice.
        :type user_id: str
        """

        self._user_id = user_id
