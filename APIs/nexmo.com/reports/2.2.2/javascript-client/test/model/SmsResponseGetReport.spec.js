/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ReportsApi);
  }
}(this, function(expect, ReportsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ReportsApi.SmsResponseGetReport();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SmsResponseGetReport', function() {
    it('should create an instance of SmsResponseGetReport', function() {
      // uncomment below and update the code to test SmsResponseGetReport
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be.a(ReportsApi.SmsResponseGetReport);
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "account_id")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property callbackUrl (base name: "callback_url")', function() {
      // uncomment below and update the code to test the property callbackUrl
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property dateEnd (base name: "date_end")', function() {
      // uncomment below and update the code to test the property dateEnd
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property dateStart (base name: "date_start")', function() {
      // uncomment below and update the code to test the property dateStart
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property includeSubaccounts (base name: "include_subaccounts")', function() {
      // uncomment below and update the code to test the property includeSubaccounts
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property itemsCount (base name: "items_count")', function() {
      // uncomment below and update the code to test the property itemsCount
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property product (base name: "product")', function() {
      // uncomment below and update the code to test the property product
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property receiveTime (base name: "receive_time")', function() {
      // uncomment below and update the code to test the property receiveTime
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "request_id")', function() {
      // uncomment below and update the code to test the property requestId
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property requestStatus (base name: "request_status")', function() {
      // uncomment below and update the code to test the property requestStatus
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property accountRef (base name: "account_ref")', function() {
      // uncomment below and update the code to test the property accountRef
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property clientRef (base name: "client_ref")', function() {
      // uncomment below and update the code to test the property clientRef
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property includeMessage (base name: "include_message")', function() {
      // uncomment below and update the code to test the property includeMessage
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property showConcatenated (base name: "show_concatenated")', function() {
      // uncomment below and update the code to test the property showConcatenated
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new ReportsApi.SmsResponseGetReport();
      //expect(instance).to.be();
    });

  });

}));
