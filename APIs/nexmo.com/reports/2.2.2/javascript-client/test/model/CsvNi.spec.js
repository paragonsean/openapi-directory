/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ReportsApi);
  }
}(this, function(expect, ReportsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ReportsApi.CsvNi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CsvNi', function() {
    it('should create an instance of CsvNi', function() {
      // uncomment below and update the code to test CsvNi
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be.a(ReportsApi.CsvNi);
    });

    it('should have the property accountId (base name: "account_id")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property countryName (base name: "country_name")', function() {
      // uncomment below and update the code to test the property countryName
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property dateReceived (base name: "date_received")', function() {
      // uncomment below and update the code to test the property dateReceived
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property networkName (base name: "network_name")', function() {
      // uncomment below and update the code to test the property networkName
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property networkType (base name: "network_type")', function() {
      // uncomment below and update the code to test the property networkType
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property ported (base name: "ported")', function() {
      // uncomment below and update the code to test the property ported
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property productType (base name: "product_type")', function() {
      // uncomment below and update the code to test the property productType
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property reachable (base name: "reachable")', function() {
      // uncomment below and update the code to test the property reachable
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "request_id")', function() {
      // uncomment below and update the code to test the property requestId
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property responseCode (base name: "response_code")', function() {
      // uncomment below and update the code to test the property responseCode
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property totalPrice (base name: "total_price")', function() {
      // uncomment below and update the code to test the property totalPrice
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

    it('should have the property valid (base name: "valid")', function() {
      // uncomment below and update the code to test the property valid
      //var instance = new ReportsApi.CsvNi();
      //expect(instance).to.be();
    });

  });

}));
