/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsrResponseCreateReport from './AsrResponseCreateReport';
import AsrStatus from './AsrStatus';
import ConversationsResponseCreateReport from './ConversationsResponseCreateReport';
import Direction from './Direction';
import InAppVoiceResponseCreateReport from './InAppVoiceResponseCreateReport';
import LinksCreateReport from './LinksCreateReport';
import MessagesResponseCreateReport from './MessagesResponseCreateReport';
import NumberInsightResponseCreateReport from './NumberInsightResponseCreateReport';
import ProductAsr from './ProductAsr';
import RequestStatusCreateReport from './RequestStatusCreateReport';
import SmsResponseCreateReport from './SmsResponseCreateReport';
import VerifyApiResponseCreateReport from './VerifyApiResponseCreateReport';
import VoiceCallResponseCreateReport from './VoiceCallResponseCreateReport';
import WebsocketCallResponseCreateReport from './WebsocketCallResponseCreateReport';

/**
 * The CreateAsyncReport200Response model module.
 * @module model/CreateAsyncReport200Response
 * @version 2.2.2
 */
class CreateAsyncReport200Response {
    /**
     * Constructs a new <code>CreateAsyncReport200Response</code>.
     * @alias module:model/CreateAsyncReport200Response
     * @param {(module:model/AsrResponseCreateReport|module:model/ConversationsResponseCreateReport|module:model/InAppVoiceResponseCreateReport|module:model/MessagesResponseCreateReport|module:model/NumberInsightResponseCreateReport|module:model/SmsResponseCreateReport|module:model/VerifyApiResponseCreateReport|module:model/VoiceCallResponseCreateReport|module:model/WebsocketCallResponseCreateReport)} instance The actual instance to initialize CreateAsyncReport200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SmsResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SmsResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create SmsResponseCreateReport from JS object
                this.actualInstance = SmsResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SmsResponseCreateReport
            errorMessages.push("Failed to construct SmsResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "VoiceCallResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VoiceCallResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create VoiceCallResponseCreateReport from JS object
                this.actualInstance = VoiceCallResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VoiceCallResponseCreateReport
            errorMessages.push("Failed to construct VoiceCallResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "InAppVoiceResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InAppVoiceResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create InAppVoiceResponseCreateReport from JS object
                this.actualInstance = InAppVoiceResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InAppVoiceResponseCreateReport
            errorMessages.push("Failed to construct InAppVoiceResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "WebsocketCallResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WebsocketCallResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create WebsocketCallResponseCreateReport from JS object
                this.actualInstance = WebsocketCallResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WebsocketCallResponseCreateReport
            errorMessages.push("Failed to construct WebsocketCallResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "VerifyApiResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VerifyApiResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create VerifyApiResponseCreateReport from JS object
                this.actualInstance = VerifyApiResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VerifyApiResponseCreateReport
            errorMessages.push("Failed to construct VerifyApiResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "NumberInsightResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NumberInsightResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create NumberInsightResponseCreateReport from JS object
                this.actualInstance = NumberInsightResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NumberInsightResponseCreateReport
            errorMessages.push("Failed to construct NumberInsightResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "MessagesResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessagesResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create MessagesResponseCreateReport from JS object
                this.actualInstance = MessagesResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessagesResponseCreateReport
            errorMessages.push("Failed to construct MessagesResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "ConversationsResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConversationsResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create ConversationsResponseCreateReport from JS object
                this.actualInstance = ConversationsResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConversationsResponseCreateReport
            errorMessages.push("Failed to construct ConversationsResponseCreateReport: " + err)
        }

        try {
            if (typeof instance === "AsrResponseCreateReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AsrResponseCreateReport.validateJSON(instance); // throw an exception if no match
                // create AsrResponseCreateReport from JS object
                this.actualInstance = AsrResponseCreateReport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AsrResponseCreateReport
            errorMessages.push("Failed to construct AsrResponseCreateReport: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateAsyncReport200Response` with oneOf schemas AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateAsyncReport200Response` with oneOf schemas AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateAsyncReport200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAsyncReport200Response} obj Optional instance to populate.
     * @return {module:model/CreateAsyncReport200Response} The populated <code>CreateAsyncReport200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateAsyncReport200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>AsrResponseCreateReport</code>, <code>ConversationsResponseCreateReport</code>, <code>InAppVoiceResponseCreateReport</code>, <code>MessagesResponseCreateReport</code>, <code>NumberInsightResponseCreateReport</code>, <code>SmsResponseCreateReport</code>, <code>VerifyApiResponseCreateReport</code>, <code>VoiceCallResponseCreateReport</code>, <code>WebsocketCallResponseCreateReport</code>.
     * @return {(module:model/AsrResponseCreateReport|module:model/ConversationsResponseCreateReport|module:model/InAppVoiceResponseCreateReport|module:model/MessagesResponseCreateReport|module:model/NumberInsightResponseCreateReport|module:model/SmsResponseCreateReport|module:model/VerifyApiResponseCreateReport|module:model/VoiceCallResponseCreateReport|module:model/WebsocketCallResponseCreateReport)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AsrResponseCreateReport</code>, <code>ConversationsResponseCreateReport</code>, <code>InAppVoiceResponseCreateReport</code>, <code>MessagesResponseCreateReport</code>, <code>NumberInsightResponseCreateReport</code>, <code>SmsResponseCreateReport</code>, <code>VerifyApiResponseCreateReport</code>, <code>VoiceCallResponseCreateReport</code>, <code>WebsocketCallResponseCreateReport</code>.
     * @param {(module:model/AsrResponseCreateReport|module:model/ConversationsResponseCreateReport|module:model/InAppVoiceResponseCreateReport|module:model/MessagesResponseCreateReport|module:model/NumberInsightResponseCreateReport|module:model/SmsResponseCreateReport|module:model/VerifyApiResponseCreateReport|module:model/VoiceCallResponseCreateReport|module:model/WebsocketCallResponseCreateReport)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateAsyncReport200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateAsyncReport200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateAsyncReport200Response} An instance of CreateAsyncReport200Response.
     */
    static fromJSON = function(json_string){
        return CreateAsyncReport200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/LinksCreateReport} _links
 */
CreateAsyncReport200Response.prototype['_links'] = undefined;

/**
 * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
 * @member {String} account_id
 */
CreateAsyncReport200Response.prototype['account_id'] = undefined;

/**
 * URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).
 * @member {String} callback_url
 */
CreateAsyncReport200Response.prototype['callback_url'] = undefined;

/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 
 * @member {Date} date_end
 */
CreateAsyncReport200Response.prototype['date_end'] = undefined;

/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 
 * @member {Date} date_start
 */
CreateAsyncReport200Response.prototype['date_start'] = undefined;

/**
 * Whether to include subaccounts or not.
 * @member {Boolean} include_subaccounts
 * @default false
 */
CreateAsyncReport200Response.prototype['include_subaccounts'] = false;

/**
 * @member {module:model/ProductAsr} product
 */
CreateAsyncReport200Response.prototype['product'] = undefined;

/**
 * Time at which the report request was received by the service.
 * @member {Date} receive_time
 */
CreateAsyncReport200Response.prototype['receive_time'] = undefined;

/**
 * UUID of the request.
 * @member {String} request_id
 */
CreateAsyncReport200Response.prototype['request_id'] = undefined;

/**
 * @member {module:model/RequestStatusCreateReport} request_status
 */
CreateAsyncReport200Response.prototype['request_status'] = undefined;

/**
 * Time at which the report processing of the report has started.
 * @member {Date} start_time
 */
CreateAsyncReport200Response.prototype['start_time'] = undefined;

/**
 * Search for messages with this `account_ref`.
 * @member {String} account_ref
 */
CreateAsyncReport200Response.prototype['account_ref'] = undefined;

/**
 * Search for messages with this `client_ref`.
 * @member {String} client_ref
 */
CreateAsyncReport200Response.prototype['client_ref'] = undefined;

/**
 * @member {module:model/Direction} direction
 */
CreateAsyncReport200Response.prototype['direction'] = undefined;

/**
 * Request from this number.
 * @member {String} from
 */
CreateAsyncReport200Response.prototype['from'] = undefined;

/**
 * Include the text of messages in the report.
 * @member {Boolean} include_message
 * @default false
 */
CreateAsyncReport200Response.prototype['include_message'] = false;

/**
 * Network used to send the request.
 * @member {String} network
 */
CreateAsyncReport200Response.prototype['network'] = undefined;

/**
 * Indicates whether the SMS was split up into multiple parts (due to its length).
 * @member {Boolean} show_concatenated
 * @default false
 */
CreateAsyncReport200Response.prototype['show_concatenated'] = false;

/**
 * @member {module:model/AsrStatus} status
 */
CreateAsyncReport200Response.prototype['status'] = undefined;

/**
 * Request to this number.
 * @member {String} to
 */
CreateAsyncReport200Response.prototype['to'] = undefined;

/**
 * Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.
 * @member {String} conversation_id
 */
CreateAsyncReport200Response.prototype['conversation_id'] = undefined;

/**
 * Search only request for the target number.
 * @member {String} number
 */
CreateAsyncReport200Response.prototype['number'] = undefined;

/**
 * Search only messages with the specified uuid.
 * @member {String} id
 */
CreateAsyncReport200Response.prototype['id'] = undefined;


CreateAsyncReport200Response.OneOf = ["AsrResponseCreateReport", "ConversationsResponseCreateReport", "InAppVoiceResponseCreateReport", "MessagesResponseCreateReport", "NumberInsightResponseCreateReport", "SmsResponseCreateReport", "VerifyApiResponseCreateReport", "VoiceCallResponseCreateReport", "WebsocketCallResponseCreateReport"];

export default CreateAsyncReport200Response;

