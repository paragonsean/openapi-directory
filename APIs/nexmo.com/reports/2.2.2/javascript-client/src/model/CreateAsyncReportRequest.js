/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ASR from './ASR';
import AsrStatus from './AsrStatus';
import CONVERSATIONS from './CONVERSATIONS';
import Direction from './Direction';
import INAPPVOICE from './INAPPVOICE';
import MESSAGES from './MESSAGES';
import NUMBERINSIGHT from './NUMBERINSIGHT';
import ProductAsr from './ProductAsr';
import SMS from './SMS';
import VERIFYAPI from './VERIFYAPI';
import VOICECALL from './VOICECALL';
import WEBSOCKETCALL from './WEBSOCKETCALL';

/**
 * The CreateAsyncReportRequest model module.
 * @module model/CreateAsyncReportRequest
 * @version 2.2.2
 */
class CreateAsyncReportRequest {
    /**
     * Constructs a new <code>CreateAsyncReportRequest</code>.
     * @alias module:model/CreateAsyncReportRequest
     * @param {(module:model/ASR|module:model/CONVERSATIONS|module:model/INAPPVOICE|module:model/MESSAGES|module:model/NUMBERINSIGHT|module:model/SMS|module:model/VERIFYAPI|module:model/VOICECALL|module:model/WEBSOCKETCALL)} instance The actual instance to initialize CreateAsyncReportRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SMS") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SMS.validateJSON(instance); // throw an exception if no match
                // create SMS from JS object
                this.actualInstance = SMS.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SMS
            errorMessages.push("Failed to construct SMS: " + err)
        }

        try {
            if (typeof instance === "VOICECALL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VOICECALL.validateJSON(instance); // throw an exception if no match
                // create VOICECALL from JS object
                this.actualInstance = VOICECALL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VOICECALL
            errorMessages.push("Failed to construct VOICECALL: " + err)
        }

        try {
            if (typeof instance === "INAPPVOICE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                INAPPVOICE.validateJSON(instance); // throw an exception if no match
                // create INAPPVOICE from JS object
                this.actualInstance = INAPPVOICE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into INAPPVOICE
            errorMessages.push("Failed to construct INAPPVOICE: " + err)
        }

        try {
            if (typeof instance === "WEBSOCKETCALL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WEBSOCKETCALL.validateJSON(instance); // throw an exception if no match
                // create WEBSOCKETCALL from JS object
                this.actualInstance = WEBSOCKETCALL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WEBSOCKETCALL
            errorMessages.push("Failed to construct WEBSOCKETCALL: " + err)
        }

        try {
            if (typeof instance === "VERIFYAPI") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VERIFYAPI.validateJSON(instance); // throw an exception if no match
                // create VERIFYAPI from JS object
                this.actualInstance = VERIFYAPI.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VERIFYAPI
            errorMessages.push("Failed to construct VERIFYAPI: " + err)
        }

        try {
            if (typeof instance === "NUMBERINSIGHT") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NUMBERINSIGHT.validateJSON(instance); // throw an exception if no match
                // create NUMBERINSIGHT from JS object
                this.actualInstance = NUMBERINSIGHT.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NUMBERINSIGHT
            errorMessages.push("Failed to construct NUMBERINSIGHT: " + err)
        }

        try {
            if (typeof instance === "MESSAGES") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MESSAGES.validateJSON(instance); // throw an exception if no match
                // create MESSAGES from JS object
                this.actualInstance = MESSAGES.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MESSAGES
            errorMessages.push("Failed to construct MESSAGES: " + err)
        }

        try {
            if (typeof instance === "CONVERSATIONS") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CONVERSATIONS.validateJSON(instance); // throw an exception if no match
                // create CONVERSATIONS from JS object
                this.actualInstance = CONVERSATIONS.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CONVERSATIONS
            errorMessages.push("Failed to construct CONVERSATIONS: " + err)
        }

        try {
            if (typeof instance === "ASR") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ASR.validateJSON(instance); // throw an exception if no match
                // create ASR from JS object
                this.actualInstance = ASR.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ASR
            errorMessages.push("Failed to construct ASR: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateAsyncReportRequest` with oneOf schemas ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateAsyncReportRequest` with oneOf schemas ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateAsyncReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAsyncReportRequest} obj Optional instance to populate.
     * @return {module:model/CreateAsyncReportRequest} The populated <code>CreateAsyncReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateAsyncReportRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>ASR</code>, <code>CONVERSATIONS</code>, <code>INAPPVOICE</code>, <code>MESSAGES</code>, <code>NUMBERINSIGHT</code>, <code>SMS</code>, <code>VERIFYAPI</code>, <code>VOICECALL</code>, <code>WEBSOCKETCALL</code>.
     * @return {(module:model/ASR|module:model/CONVERSATIONS|module:model/INAPPVOICE|module:model/MESSAGES|module:model/NUMBERINSIGHT|module:model/SMS|module:model/VERIFYAPI|module:model/VOICECALL|module:model/WEBSOCKETCALL)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ASR</code>, <code>CONVERSATIONS</code>, <code>INAPPVOICE</code>, <code>MESSAGES</code>, <code>NUMBERINSIGHT</code>, <code>SMS</code>, <code>VERIFYAPI</code>, <code>VOICECALL</code>, <code>WEBSOCKETCALL</code>.
     * @param {(module:model/ASR|module:model/CONVERSATIONS|module:model/INAPPVOICE|module:model/MESSAGES|module:model/NUMBERINSIGHT|module:model/SMS|module:model/VERIFYAPI|module:model/VOICECALL|module:model/WEBSOCKETCALL)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateAsyncReportRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateAsyncReportRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateAsyncReportRequest} An instance of CreateAsyncReportRequest.
     */
    static fromJSON = function(json_string){
        return CreateAsyncReportRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
 * @member {String} account_id
 */
CreateAsyncReportRequest.prototype['account_id'] = undefined;

/**
 * URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).
 * @member {String} callback_url
 */
CreateAsyncReportRequest.prototype['callback_url'] = undefined;

/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 
 * @member {Date} date_end
 */
CreateAsyncReportRequest.prototype['date_end'] = undefined;

/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 
 * @member {Date} date_start
 */
CreateAsyncReportRequest.prototype['date_start'] = undefined;

/**
 * Whether to include subaccounts or not.
 * @member {Boolean} include_subaccounts
 * @default false
 */
CreateAsyncReportRequest.prototype['include_subaccounts'] = false;

/**
 * @member {module:model/ProductAsr} product
 */
CreateAsyncReportRequest.prototype['product'] = undefined;

/**
 * @member {module:model/Direction} direction
 */
CreateAsyncReportRequest.prototype['direction'] = undefined;

/**
 * Request from this number.
 * @member {String} from
 */
CreateAsyncReportRequest.prototype['from'] = undefined;

/**
 * Network used to send the request.
 * @member {String} network
 */
CreateAsyncReportRequest.prototype['network'] = undefined;

/**
 * @member {module:model/AsrStatus} status
 */
CreateAsyncReportRequest.prototype['status'] = undefined;

/**
 * Request to this number.
 * @member {String} to
 */
CreateAsyncReportRequest.prototype['to'] = undefined;

/**
 * Search only for events sent to this particular Conversation. This should include the \"CON-\" prefix.
 * @member {String} conversation_id
 */
CreateAsyncReportRequest.prototype['conversation_id'] = undefined;

/**
 * Search only request for the target number.
 * @member {String} number
 */
CreateAsyncReportRequest.prototype['number'] = undefined;

/**
 * Search only messages with the specified uuid.
 * @member {String} id
 */
CreateAsyncReportRequest.prototype['id'] = undefined;

/**
 * Include the text of messages in the report.
 * @member {Boolean} include_message
 * @default false
 */
CreateAsyncReportRequest.prototype['include_message'] = false;


CreateAsyncReportRequest.OneOf = ["ASR", "CONVERSATIONS", "INAPPVOICE", "MESSAGES", "NUMBERINSIGHT", "SMS", "VERIFYAPI", "VOICECALL", "WEBSOCKETCALL"];

export default CreateAsyncReportRequest;

