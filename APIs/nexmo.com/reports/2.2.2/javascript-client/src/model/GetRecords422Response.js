/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetRecords422ResponseOneOf from './GetRecords422ResponseOneOf';
import GetRecords422ResponseOneOf1 from './GetRecords422ResponseOneOf1';
import GetRecords422ResponseOneOf1InvalidParametersInner from './GetRecords422ResponseOneOf1InvalidParametersInner';
import GetRecords422ResponseOneOf2 from './GetRecords422ResponseOneOf2';

/**
 * The GetRecords422Response model module.
 * @module model/GetRecords422Response
 * @version 2.2.2
 */
class GetRecords422Response {
    /**
     * Constructs a new <code>GetRecords422Response</code>.
     * @alias module:model/GetRecords422Response
     * @param {(module:model/GetRecords422ResponseOneOf|module:model/GetRecords422ResponseOneOf1|module:model/GetRecords422ResponseOneOf2)} instance The actual instance to initialize GetRecords422Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "GetRecords422ResponseOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetRecords422ResponseOneOf.validateJSON(instance); // throw an exception if no match
                // create GetRecords422ResponseOneOf from JS object
                this.actualInstance = GetRecords422ResponseOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetRecords422ResponseOneOf
            errorMessages.push("Failed to construct GetRecords422ResponseOneOf: " + err)
        }

        try {
            if (typeof instance === "GetRecords422ResponseOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetRecords422ResponseOneOf1.validateJSON(instance); // throw an exception if no match
                // create GetRecords422ResponseOneOf1 from JS object
                this.actualInstance = GetRecords422ResponseOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetRecords422ResponseOneOf1
            errorMessages.push("Failed to construct GetRecords422ResponseOneOf1: " + err)
        }

        try {
            if (typeof instance === "GetRecords422ResponseOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetRecords422ResponseOneOf2.validateJSON(instance); // throw an exception if no match
                // create GetRecords422ResponseOneOf2 from JS object
                this.actualInstance = GetRecords422ResponseOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetRecords422ResponseOneOf2
            errorMessages.push("Failed to construct GetRecords422ResponseOneOf2: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetRecords422Response` with oneOf schemas GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetRecords422Response` with oneOf schemas GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetRecords422Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetRecords422Response} obj Optional instance to populate.
     * @return {module:model/GetRecords422Response} The populated <code>GetRecords422Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetRecords422Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>GetRecords422ResponseOneOf</code>, <code>GetRecords422ResponseOneOf1</code>, <code>GetRecords422ResponseOneOf2</code>.
     * @return {(module:model/GetRecords422ResponseOneOf|module:model/GetRecords422ResponseOneOf1|module:model/GetRecords422ResponseOneOf2)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>GetRecords422ResponseOneOf</code>, <code>GetRecords422ResponseOneOf1</code>, <code>GetRecords422ResponseOneOf2</code>.
     * @param {(module:model/GetRecords422ResponseOneOf|module:model/GetRecords422ResponseOneOf1|module:model/GetRecords422ResponseOneOf2)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetRecords422Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetRecords422Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetRecords422Response} An instance of GetRecords422Response.
     */
    static fromJSON = function(json_string){
        return GetRecords422Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} instance
 */
GetRecords422Response.prototype['instance'] = undefined;

/**
 * @member {Array.<module:model/GetRecords422ResponseOneOf1InvalidParametersInner>} invalid_parameters
 */
GetRecords422Response.prototype['invalid_parameters'] = undefined;

/**
 * @member {String} title
 */
GetRecords422Response.prototype['title'] = undefined;

/**
 * @member {String} detail
 */
GetRecords422Response.prototype['detail'] = undefined;

/**
 * @member {String} type
 */
GetRecords422Response.prototype['type'] = undefined;


GetRecords422Response.OneOf = ["GetRecords422ResponseOneOf", "GetRecords422ResponseOneOf1", "GetRecords422ResponseOneOf2"];

export default GetRecords422Response;

