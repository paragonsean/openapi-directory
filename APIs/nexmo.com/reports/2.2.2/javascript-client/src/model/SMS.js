/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Direction from './Direction';
import ProductSms from './ProductSms';
import ReportRequest from './ReportRequest';
import SmsFields from './SmsFields';
import SmsStatus from './SmsStatus';

/**
 * The SMS model module.
 * @module model/SMS
 * @version 2.2.2
 */
class SMS {
    /**
     * Constructs a new <code>SMS</code>.
     * SMS
     * @alias module:model/SMS
     * @extends module:model/ReportRequest
     * @implements module:model/ReportRequest
     * @implements module:model/SmsFields
     * @param accountId {String} The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
     * @param product {module:model/ProductSms} 
     * @param direction {module:model/Direction} 
     */
    constructor(accountId, product, direction) { 
        ReportRequest.initialize(this, accountId, product);SmsFields.initialize(this, direction, product);
        SMS.initialize(this, accountId, product, direction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, product, direction) { 
        obj['direction'] = direction;
        obj['include_message'] = false;
        obj['product'] = product;
        obj['show_concatenated'] = false;
    }

    /**
     * Constructs a <code>SMS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SMS} obj Optional instance to populate.
     * @return {module:model/SMS} The populated <code>SMS</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SMS();
            ReportRequest.constructFromObject(data, obj);
            ReportRequest.constructFromObject(data, obj);
            SmsFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_ref')) {
                obj['account_ref'] = ApiClient.convertToType(data['account_ref'], 'String');
            }
            if (data.hasOwnProperty('client_ref')) {
                obj['client_ref'] = ApiClient.convertToType(data['client_ref'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = Direction.constructFromObject(data['direction']);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('include_message')) {
                obj['include_message'] = ApiClient.convertToType(data['include_message'], 'Boolean');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ProductSms.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('show_concatenated')) {
                obj['show_concatenated'] = ApiClient.convertToType(data['show_concatenated'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SmsStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SMS</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SMS</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SMS.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_ref'] && !(typeof data['account_ref'] === 'string' || data['account_ref'] instanceof String)) {
            throw new Error("Expected the field `account_ref` to be a primitive type in the JSON string but got " + data['account_ref']);
        }
        // ensure the json data is a string
        if (data['client_ref'] && !(typeof data['client_ref'] === 'string' || data['client_ref'] instanceof String)) {
            throw new Error("Expected the field `client_ref` to be a primitive type in the JSON string but got " + data['client_ref']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}

SMS.RequiredProperties = ["direction", "product", "account_id"];

/**
 * Search for messages with this `account_ref`.
 * @member {String} account_ref
 */
SMS.prototype['account_ref'] = undefined;

/**
 * Search for messages with this `client_ref`.
 * @member {String} client_ref
 */
SMS.prototype['client_ref'] = undefined;

/**
 * @member {module:model/Direction} direction
 */
SMS.prototype['direction'] = undefined;

/**
 * Request from this number.
 * @member {String} from
 */
SMS.prototype['from'] = undefined;

/**
 * Include the text of messages in the report.
 * @member {Boolean} include_message
 * @default false
 */
SMS.prototype['include_message'] = false;

/**
 * Network used to send the request.
 * @member {String} network
 */
SMS.prototype['network'] = undefined;

/**
 * @member {module:model/ProductSms} product
 */
SMS.prototype['product'] = undefined;

/**
 * Indicates whether the SMS was split up into multiple parts (due to its length).
 * @member {Boolean} show_concatenated
 * @default false
 */
SMS.prototype['show_concatenated'] = false;

/**
 * @member {module:model/SmsStatus} status
 */
SMS.prototype['status'] = undefined;

/**
 * Request to this number.
 * @member {String} to
 */
SMS.prototype['to'] = undefined;


// Implement ReportRequest interface:
/**
 * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
 * @member {String} account_id
 */
ReportRequest.prototype['account_id'] = undefined;
/**
 * URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).
 * @member {String} callback_url
 */
ReportRequest.prototype['callback_url'] = undefined;
/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. 
 * @member {Date} date_end
 */
ReportRequest.prototype['date_end'] = undefined;
/**
 * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. 
 * @member {Date} date_start
 */
ReportRequest.prototype['date_start'] = undefined;
/**
 * Whether to include subaccounts or not.
 * @member {Boolean} include_subaccounts
 * @default false
 */
ReportRequest.prototype['include_subaccounts'] = false;
/**
 * @member {module:model/Product} product
 */
ReportRequest.prototype['product'] = undefined;
// Implement SmsFields interface:
/**
 * Search for messages with this `account_ref`.
 * @member {String} account_ref
 */
SmsFields.prototype['account_ref'] = undefined;
/**
 * Search for messages with this `client_ref`.
 * @member {String} client_ref
 */
SmsFields.prototype['client_ref'] = undefined;
/**
 * @member {module:model/Direction} direction
 */
SmsFields.prototype['direction'] = undefined;
/**
 * Request from this number.
 * @member {String} from
 */
SmsFields.prototype['from'] = undefined;
/**
 * Include the text of messages in the report.
 * @member {Boolean} include_message
 * @default false
 */
SmsFields.prototype['include_message'] = false;
/**
 * Network used to send the request.
 * @member {String} network
 */
SmsFields.prototype['network'] = undefined;
/**
 * @member {module:model/ProductSms} product
 */
SmsFields.prototype['product'] = undefined;
/**
 * Indicates whether the SMS was split up into multiple parts (due to its length).
 * @member {Boolean} show_concatenated
 * @default false
 */
SmsFields.prototype['show_concatenated'] = false;
/**
 * @member {module:model/SmsStatus} status
 */
SmsFields.prototype['status'] = undefined;
/**
 * Request to this number.
 * @member {String} to
 */
SmsFields.prototype['to'] = undefined;




export default SMS;

