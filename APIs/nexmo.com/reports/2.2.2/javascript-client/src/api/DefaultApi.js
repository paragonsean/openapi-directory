/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelReport409Response from '../model/CancelReport409Response';
import CreateAsyncReport200Response from '../model/CreateAsyncReport200Response';
import CreateAsyncReport400Response from '../model/CreateAsyncReport400Response';
import CreateAsyncReport403Response from '../model/CreateAsyncReport403Response';
import CreateAsyncReport422Response from '../model/CreateAsyncReport422Response';
import CreateAsyncReportRequest from '../model/CreateAsyncReportRequest';
import DownloadReport200Response from '../model/DownloadReport200Response';
import GetRecords200Response from '../model/GetRecords200Response';
import GetRecords403Response from '../model/GetRecords403Response';
import GetRecords422Response from '../model/GetRecords422Response';
import GetReport200Response from '../model/GetReport200Response';
import GetReport404Response from '../model/GetReport404Response';
import ListReports200Response from '../model/ListReports200Response';
import ListReports400Response from '../model/ListReports400Response';
import ListReports401Response from '../model/ListReports401Response';

/**
* Default service.
* @module api/DefaultApi
* @version 2.2.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelReport operation.
     * @callback module:api/DefaultApi~cancelReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel the execution of a report
     * Cancel the execution of a pending or processing report.
     * @param {String} reportId UUID of the report
     * @param {module:api/DefaultApi~cancelReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReport200Response}
     */
    cancelReport(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling cancelReport");
      }

      let pathParams = {
        'report_id': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReport200Response;
      return this.apiClient.callApi(
        '/v2/reports/{report_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAsyncReport operation.
     * @callback module:api/DefaultApi~createAsyncReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAsyncReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an asynchronous report
     * Request a report on your account activity
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAsyncReportRequest} [createAsyncReportRequest] The parameters of the JSON body will be used to create and filter the report.<br> The value of the `product` field will define which product the report will be created for and which parameters are accepted. 
     * @param {module:api/DefaultApi~createAsyncReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAsyncReport200Response}
     */
    createAsyncReport(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAsyncReportRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAsyncReport200Response;
      return this.apiClient.callApi(
        '/v2/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadReport operation.
     * @callback module:api/DefaultApi~downloadReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report data
     * Download a zipped archive of the rendered report. The file is available for download for 72 hours.<br> The zip file will be named `<PRODUCT>_<REPORT_ID>.zip`<br> The csv file in the zip archive will be named as `report_<PRODUCT>_<ACCOUNT_ID>_<DATE>.csv` the date will be formatted as `yyyyMMdd`. 
     * @param {String} fileId UUID of the file.
     * @param {module:api/DefaultApi~downloadReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadReport200Response}
     */
    downloadReport(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling downloadReport");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = DownloadReport200Response;
      return this.apiClient.callApi(
        '/v3/media/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords operation.
     * @callback module:api/DefaultApi~getRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecords200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load records synchronously
     * Fetch usage data synchronously
     * @param {String} accountId The account for which the list of reports will be queried.
     * @param {module:model/String} product The product to return records for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
     * @param {String} [id] The UUID of the message or call to be searched for. You can specify a comma-separated list of UUIDs. If UUIDs are not found they are listed in the response in the `ids_not_found` field.  If you specify `id`, you must not specify `status`, `date_start` or `date_end`. 
     * @param {Date} [dateStart] ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports should begin.   It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.  If you provide this, you must provide `date_end` and must not provide `id`. 
     * @param {Date} [dateEnd] **Must be no more than 24 hours later than `date_start`**  ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR.  If you provide this, you must provide `date_start` and must not provide `id`. 
     * @param {Boolean} [includeMessage = false)] Include the message contents in the records. Only applicable for use with products `SMS` and `MESSAGES`, where it is optional.
     * @param {Boolean} [showConcatenated = false)] Indicates whether the SMS was split up into multiple parts (due to its length).
     * @param {module:model/String} [status = 'none')] The SMS status to search for. Optional where product is `SMS`.
     * @param {module:api/DefaultApi~getRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecords200Response}
     */
    getRecords(accountId, product, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getRecords");
      }
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling getRecords");
      }

      let pathParams = {
      };
      let queryParams = {
        'account_id': accountId,
        'product': product,
        'direction': opts['direction'],
        'id': opts['id'],
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'include_message': opts['includeMessage'],
        'show_concatenated': opts['showConcatenated'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecords200Response;
      return this.apiClient.callApi(
        '/v2/reports/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:api/DefaultApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of report
     * Retrieve status and metadata about a requested report.
     * @param {String} reportId UUID of the report request (`request_id` in response).
     * @param {module:api/DefaultApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReport200Response}
     */
    getReport(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReport");
      }

      let pathParams = {
        'report_id': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReport200Response;
      return this.apiClient.callApi(
        '/v2/reports/{report_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReports operation.
     * @callback module:api/DefaultApi~listReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReports200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reports
     * List reports created by the specified account based on filtered provided.
     * @param {String} accountId The account for which the list of reports will be queried.
     * @param {String} status A comma-separated list of report status values. Reports with any of the statuses specified are returned. The values in the comma-seperated list specified for `status` can be any of `PENDING`, `PROCESSING`, `SUCCESS`, `ABORTED`, `FAILED`, `TRUNCATED`.
     * @param {Object} opts Optional parameters
     * @param {Date} [dateFrom] ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date from which the list of reports will be queried. Format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`.
     * @param {Date} [dateTo] ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date until which the list of reports will be queried. Format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`.
     * @param {module:api/DefaultApi~listReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReports200Response}
     */
    listReports(accountId, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listReports");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listReports");
      }

      let pathParams = {
      };
      let queryParams = {
        'account_id': accountId,
        'status': status,
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReports200Response;
      return this.apiClient.callApi(
        '/v2/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
