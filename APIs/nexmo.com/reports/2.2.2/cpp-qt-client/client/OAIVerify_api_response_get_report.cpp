/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_api_response_get_report.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_api_response_get_report::OAIVerify_api_response_get_report(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_api_response_get_report::OAIVerify_api_response_get_report() {
    this->initializeModel();
}

OAIVerify_api_response_get_report::~OAIVerify_api_response_get_report() {}

void OAIVerify_api_response_get_report::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_receive_time_isSet = false;
    m_receive_time_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_status_isSet = false;
    m_request_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIVerify_api_response_get_report::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_api_response_get_report::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("items_count")]);
    m_items_count_isSet = !json[QString("items_count")].isNull() && m_items_count_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_receive_time_isValid = ::OpenAPI::fromJsonValue(m_receive_time, json[QString("receive_time")]);
    m_receive_time_isSet = !json[QString("receive_time")].isNull() && m_receive_time_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_status_isValid = ::OpenAPI::fromJsonValue(m_request_status, json[QString("request_status")]);
    m_request_status_isSet = !json[QString("request_status")].isNull() && m_request_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIVerify_api_response_get_report::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_api_response_get_report::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_items_count_isSet) {
        obj.insert(QString("items_count"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_receive_time_isSet) {
        obj.insert(QString("receive_time"), ::OpenAPI::toJsonValue(m_receive_time));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_status.isSet()) {
        obj.insert(QString("request_status"), ::OpenAPI::toJsonValue(m_request_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

OAI_links OAIVerify_api_response_get_report::getLinks() const {
    return m__links;
}
void OAIVerify_api_response_get_report::setLinks(const OAI_links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIVerify_api_response_get_report::is__links_Set() const{
    return m__links_isSet;
}

bool OAIVerify_api_response_get_report::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIVerify_api_response_get_report::getAccountId() const {
    return m_account_id;
}
void OAIVerify_api_response_get_report::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIVerify_api_response_get_report::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIVerify_api_response_get_report::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIVerify_api_response_get_report::getCallbackUrl() const {
    return m_callback_url;
}
void OAIVerify_api_response_get_report::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIVerify_api_response_get_report::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIVerify_api_response_get_report::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAIVerify_api_response_get_report::getDateEnd() const {
    return m_date_end;
}
void OAIVerify_api_response_get_report::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAIVerify_api_response_get_report::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAIVerify_api_response_get_report::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAIVerify_api_response_get_report::getDateStart() const {
    return m_date_start;
}
void OAIVerify_api_response_get_report::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAIVerify_api_response_get_report::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAIVerify_api_response_get_report::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAIVerify_api_response_get_report::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAIVerify_api_response_get_report::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAIVerify_api_response_get_report::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAIVerify_api_response_get_report::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

qint32 OAIVerify_api_response_get_report::getItemsCount() const {
    return m_items_count;
}
void OAIVerify_api_response_get_report::setItemsCount(const qint32 &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAIVerify_api_response_get_report::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAIVerify_api_response_get_report::is_items_count_Valid() const{
    return m_items_count_isValid;
}

OAIProduct_verify OAIVerify_api_response_get_report::getProduct() const {
    return m_product;
}
void OAIVerify_api_response_get_report::setProduct(const OAIProduct_verify &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIVerify_api_response_get_report::is_product_Set() const{
    return m_product_isSet;
}

bool OAIVerify_api_response_get_report::is_product_Valid() const{
    return m_product_isValid;
}

QDate OAIVerify_api_response_get_report::getReceiveTime() const {
    return m_receive_time;
}
void OAIVerify_api_response_get_report::setReceiveTime(const QDate &receive_time) {
    m_receive_time = receive_time;
    m_receive_time_isSet = true;
}

bool OAIVerify_api_response_get_report::is_receive_time_Set() const{
    return m_receive_time_isSet;
}

bool OAIVerify_api_response_get_report::is_receive_time_Valid() const{
    return m_receive_time_isValid;
}

QString OAIVerify_api_response_get_report::getRequestId() const {
    return m_request_id;
}
void OAIVerify_api_response_get_report::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIVerify_api_response_get_report::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIVerify_api_response_get_report::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequest_status OAIVerify_api_response_get_report::getRequestStatus() const {
    return m_request_status;
}
void OAIVerify_api_response_get_report::setRequestStatus(const OAIRequest_status &request_status) {
    m_request_status = request_status;
    m_request_status_isSet = true;
}

bool OAIVerify_api_response_get_report::is_request_status_Set() const{
    return m_request_status_isSet;
}

bool OAIVerify_api_response_get_report::is_request_status_Valid() const{
    return m_request_status_isValid;
}

QDate OAIVerify_api_response_get_report::getStartTime() const {
    return m_start_time;
}
void OAIVerify_api_response_get_report::setStartTime(const QDate &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIVerify_api_response_get_report::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIVerify_api_response_get_report::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIVerify_api_response_get_report::getNetwork() const {
    return m_network;
}
void OAIVerify_api_response_get_report::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIVerify_api_response_get_report::is_network_Set() const{
    return m_network_isSet;
}

bool OAIVerify_api_response_get_report::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIVerify_api_response_get_report::getTo() const {
    return m_to;
}
void OAIVerify_api_response_get_report::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIVerify_api_response_get_report::is_to_Set() const{
    return m_to_isSet;
}

bool OAIVerify_api_response_get_report::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIVerify_api_response_get_report::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_api_response_get_report::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
