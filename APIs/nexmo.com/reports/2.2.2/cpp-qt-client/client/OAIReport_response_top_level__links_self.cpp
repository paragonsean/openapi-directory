/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_response_top_level__links_self.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_response_top_level__links_self::OAIReport_response_top_level__links_self(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_response_top_level__links_self::OAIReport_response_top_level__links_self() {
    this->initializeModel();
}

OAIReport_response_top_level__links_self::~OAIReport_response_top_level__links_self() {}

void OAIReport_response_top_level__links_self::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;
}

void OAIReport_response_top_level__links_self::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_response_top_level__links_self::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;
}

QString OAIReport_response_top_level__links_self::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_response_top_level__links_self::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    return obj;
}

QString OAIReport_response_top_level__links_self::getHref() const {
    return m_href;
}
void OAIReport_response_top_level__links_self::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIReport_response_top_level__links_self::is_href_Set() const{
    return m_href_isSet;
}

bool OAIReport_response_top_level__links_self::is_href_Valid() const{
    return m_href_isValid;
}

bool OAIReport_response_top_level__links_self::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_response_top_level__links_self::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
