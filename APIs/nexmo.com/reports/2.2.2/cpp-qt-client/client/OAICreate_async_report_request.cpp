/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_async_report_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_async_report_request::OAICreate_async_report_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_async_report_request::OAICreate_async_report_request() {
    this->initializeModel();
}

OAICreate_async_report_request::~OAICreate_async_report_request() {}

void OAICreate_async_report_request::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_account_ref_isSet = false;
    m_account_ref_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_include_message_isSet = false;
    m_include_message_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_show_concatenated_isSet = false;
    m_show_concatenated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICreate_async_report_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_async_report_request::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_account_ref_isValid = ::OpenAPI::fromJsonValue(m_account_ref, json[QString("account_ref")]);
    m_account_ref_isSet = !json[QString("account_ref")].isNull() && m_account_ref_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_include_message_isValid = ::OpenAPI::fromJsonValue(m_include_message, json[QString("include_message")]);
    m_include_message_isSet = !json[QString("include_message")].isNull() && m_include_message_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_show_concatenated_isValid = ::OpenAPI::fromJsonValue(m_show_concatenated, json[QString("show_concatenated")]);
    m_show_concatenated_isSet = !json[QString("show_concatenated")].isNull() && m_show_concatenated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICreate_async_report_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_async_report_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_account_ref_isSet) {
        obj.insert(QString("account_ref"), ::OpenAPI::toJsonValue(m_account_ref));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_include_message_isSet) {
        obj.insert(QString("include_message"), ::OpenAPI::toJsonValue(m_include_message));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_show_concatenated_isSet) {
        obj.insert(QString("show_concatenated"), ::OpenAPI::toJsonValue(m_show_concatenated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAICreate_async_report_request::getAccountId() const {
    return m_account_id;
}
void OAICreate_async_report_request::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreate_async_report_request::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreate_async_report_request::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICreate_async_report_request::getCallbackUrl() const {
    return m_callback_url;
}
void OAICreate_async_report_request::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAICreate_async_report_request::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAICreate_async_report_request::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAICreate_async_report_request::getDateEnd() const {
    return m_date_end;
}
void OAICreate_async_report_request::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICreate_async_report_request::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICreate_async_report_request::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAICreate_async_report_request::getDateStart() const {
    return m_date_start;
}
void OAICreate_async_report_request::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICreate_async_report_request::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICreate_async_report_request::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAICreate_async_report_request::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAICreate_async_report_request::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAICreate_async_report_request::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAICreate_async_report_request::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

OAIProduct_asr OAICreate_async_report_request::getProduct() const {
    return m_product;
}
void OAICreate_async_report_request::setProduct(const OAIProduct_asr &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAICreate_async_report_request::is_product_Set() const{
    return m_product_isSet;
}

bool OAICreate_async_report_request::is_product_Valid() const{
    return m_product_isValid;
}

QString OAICreate_async_report_request::getAccountRef() const {
    return m_account_ref;
}
void OAICreate_async_report_request::setAccountRef(const QString &account_ref) {
    m_account_ref = account_ref;
    m_account_ref_isSet = true;
}

bool OAICreate_async_report_request::is_account_ref_Set() const{
    return m_account_ref_isSet;
}

bool OAICreate_async_report_request::is_account_ref_Valid() const{
    return m_account_ref_isValid;
}

QString OAICreate_async_report_request::getClientRef() const {
    return m_client_ref;
}
void OAICreate_async_report_request::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAICreate_async_report_request::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAICreate_async_report_request::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIDirection OAICreate_async_report_request::getDirection() const {
    return m_direction;
}
void OAICreate_async_report_request::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICreate_async_report_request::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICreate_async_report_request::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAICreate_async_report_request::getFrom() const {
    return m_from;
}
void OAICreate_async_report_request::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICreate_async_report_request::is_from_Set() const{
    return m_from_isSet;
}

bool OAICreate_async_report_request::is_from_Valid() const{
    return m_from_isValid;
}

bool OAICreate_async_report_request::isIncludeMessage() const {
    return m_include_message;
}
void OAICreate_async_report_request::setIncludeMessage(const bool &include_message) {
    m_include_message = include_message;
    m_include_message_isSet = true;
}

bool OAICreate_async_report_request::is_include_message_Set() const{
    return m_include_message_isSet;
}

bool OAICreate_async_report_request::is_include_message_Valid() const{
    return m_include_message_isValid;
}

QString OAICreate_async_report_request::getNetwork() const {
    return m_network;
}
void OAICreate_async_report_request::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICreate_async_report_request::is_network_Set() const{
    return m_network_isSet;
}

bool OAICreate_async_report_request::is_network_Valid() const{
    return m_network_isValid;
}

bool OAICreate_async_report_request::isShowConcatenated() const {
    return m_show_concatenated;
}
void OAICreate_async_report_request::setShowConcatenated(const bool &show_concatenated) {
    m_show_concatenated = show_concatenated;
    m_show_concatenated_isSet = true;
}

bool OAICreate_async_report_request::is_show_concatenated_Set() const{
    return m_show_concatenated_isSet;
}

bool OAICreate_async_report_request::is_show_concatenated_Valid() const{
    return m_show_concatenated_isValid;
}

OAIAsr_status OAICreate_async_report_request::getStatus() const {
    return m_status;
}
void OAICreate_async_report_request::setStatus(const OAIAsr_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreate_async_report_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreate_async_report_request::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreate_async_report_request::getTo() const {
    return m_to;
}
void OAICreate_async_report_request::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICreate_async_report_request::is_to_Set() const{
    return m_to_isSet;
}

bool OAICreate_async_report_request::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICreate_async_report_request::getConversationId() const {
    return m_conversation_id;
}
void OAICreate_async_report_request::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAICreate_async_report_request::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAICreate_async_report_request::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAICreate_async_report_request::getNumber() const {
    return m_number;
}
void OAICreate_async_report_request::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICreate_async_report_request::is_number_Set() const{
    return m_number_isSet;
}

bool OAICreate_async_report_request::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICreate_async_report_request::getId() const {
    return m_id;
}
void OAICreate_async_report_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreate_async_report_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreate_async_report_request::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICreate_async_report_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_concatenated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_async_report_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_product_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
