/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsr_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsr_status::OAIAsr_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsr_status::OAIAsr_status() {
    this->initializeModel();
}

OAIAsr_status::~OAIAsr_status() {}

void OAIAsr_status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAsr_status::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAsr_status::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ok", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAsr_status::OK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("error", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAsr_status::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAsr_status::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAsr_status::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAsr_status::OK:
            val = "ok";
            break;
        case eOAIAsr_status::ERROR:
            val = "error";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAsr_status::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAsr_status::eOAIAsr_status OAIAsr_status::getValue() const {
    return m_value;
}

void OAIAsr_status::setValue(const OAIAsr_status::eOAIAsr_status& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAsr_status::isSet() const {
    
    return m_value_isSet;
}

bool OAIAsr_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
