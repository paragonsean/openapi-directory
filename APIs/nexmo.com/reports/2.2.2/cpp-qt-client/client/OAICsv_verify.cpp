/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_verify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_verify::OAICsv_verify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_verify::OAICsv_verify() {
    this->initializeModel();
}

OAICsv_verify::~OAICsv_verify() {}

void OAICsv_verify::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_finalized_isSet = false;
    m_date_finalized_isValid = false;

    m_date_received_isSet = false;
    m_date_received_isValid = false;

    m_estimated_price_isSet = false;
    m_estimated_price_isValid = false;

    m_first_event_date_isSet = false;
    m_first_event_date_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_last_event_date_isSet = false;
    m_last_event_date_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_pricing_model_isSet = false;
    m_pricing_model_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_sms_event_count_isSet = false;
    m_sms_event_count_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_tts_event_count_isSet = false;
    m_tts_event_count_isValid = false;

    m_verify_status_isSet = false;
    m_verify_status_isValid = false;
}

void OAICsv_verify::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_verify::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_finalized_isValid = ::OpenAPI::fromJsonValue(m_date_finalized, json[QString("date_finalized")]);
    m_date_finalized_isSet = !json[QString("date_finalized")].isNull() && m_date_finalized_isValid;

    m_date_received_isValid = ::OpenAPI::fromJsonValue(m_date_received, json[QString("date_received")]);
    m_date_received_isSet = !json[QString("date_received")].isNull() && m_date_received_isValid;

    m_estimated_price_isValid = ::OpenAPI::fromJsonValue(m_estimated_price, json[QString("estimated_price")]);
    m_estimated_price_isSet = !json[QString("estimated_price")].isNull() && m_estimated_price_isValid;

    m_first_event_date_isValid = ::OpenAPI::fromJsonValue(m_first_event_date, json[QString("first_event_date")]);
    m_first_event_date_isSet = !json[QString("first_event_date")].isNull() && m_first_event_date_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_last_event_date_isValid = ::OpenAPI::fromJsonValue(m_last_event_date, json[QString("last_event_date")]);
    m_last_event_date_isSet = !json[QString("last_event_date")].isNull() && m_last_event_date_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("network_name")]);
    m_network_name_isSet = !json[QString("network_name")].isNull() && m_network_name_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("number_type")]);
    m_number_type_isSet = !json[QString("number_type")].isNull() && m_number_type_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_pricing_model_isValid = ::OpenAPI::fromJsonValue(m_pricing_model, json[QString("pricing_model")]);
    m_pricing_model_isSet = !json[QString("pricing_model")].isNull() && m_pricing_model_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_sms_event_count_isValid = ::OpenAPI::fromJsonValue(m_sms_event_count, json[QString("sms_event_count")]);
    m_sms_event_count_isSet = !json[QString("sms_event_count")].isNull() && m_sms_event_count_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_tts_event_count_isValid = ::OpenAPI::fromJsonValue(m_tts_event_count, json[QString("tts_event_count")]);
    m_tts_event_count_isSet = !json[QString("tts_event_count")].isNull() && m_tts_event_count_isValid;

    m_verify_status_isValid = ::OpenAPI::fromJsonValue(m_verify_status, json[QString("verify_status")]);
    m_verify_status_isSet = !json[QString("verify_status")].isNull() && m_verify_status_isValid;
}

QString OAICsv_verify::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_verify::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_finalized_isSet) {
        obj.insert(QString("date_finalized"), ::OpenAPI::toJsonValue(m_date_finalized));
    }
    if (m_date_received_isSet) {
        obj.insert(QString("date_received"), ::OpenAPI::toJsonValue(m_date_received));
    }
    if (m_estimated_price_isSet) {
        obj.insert(QString("estimated_price"), ::OpenAPI::toJsonValue(m_estimated_price));
    }
    if (m_first_event_date_isSet) {
        obj.insert(QString("first_event_date"), ::OpenAPI::toJsonValue(m_first_event_date));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_last_event_date_isSet) {
        obj.insert(QString("last_event_date"), ::OpenAPI::toJsonValue(m_last_event_date));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("network_name"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_number_type_isSet) {
        obj.insert(QString("number_type"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_pricing_model_isSet) {
        obj.insert(QString("pricing_model"), ::OpenAPI::toJsonValue(m_pricing_model));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_sms_event_count_isSet) {
        obj.insert(QString("sms_event_count"), ::OpenAPI::toJsonValue(m_sms_event_count));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_tts_event_count_isSet) {
        obj.insert(QString("tts_event_count"), ::OpenAPI::toJsonValue(m_tts_event_count));
    }
    if (m_verify_status_isSet) {
        obj.insert(QString("verify_status"), ::OpenAPI::toJsonValue(m_verify_status));
    }
    return obj;
}

QString OAICsv_verify::getAccountId() const {
    return m_account_id;
}
void OAICsv_verify::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_verify::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_verify::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_verify::getCountry() const {
    return m_country;
}
void OAICsv_verify::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICsv_verify::is_country_Set() const{
    return m_country_isSet;
}

bool OAICsv_verify::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICsv_verify::getCountryName() const {
    return m_country_name;
}
void OAICsv_verify::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAICsv_verify::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAICsv_verify::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAICsv_verify::getCurrency() const {
    return m_currency;
}
void OAICsv_verify::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_verify::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_verify::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_verify::getDateFinalized() const {
    return m_date_finalized;
}
void OAICsv_verify::setDateFinalized(const QDate &date_finalized) {
    m_date_finalized = date_finalized;
    m_date_finalized_isSet = true;
}

bool OAICsv_verify::is_date_finalized_Set() const{
    return m_date_finalized_isSet;
}

bool OAICsv_verify::is_date_finalized_Valid() const{
    return m_date_finalized_isValid;
}

QDate OAICsv_verify::getDateReceived() const {
    return m_date_received;
}
void OAICsv_verify::setDateReceived(const QDate &date_received) {
    m_date_received = date_received;
    m_date_received_isSet = true;
}

bool OAICsv_verify::is_date_received_Set() const{
    return m_date_received_isSet;
}

bool OAICsv_verify::is_date_received_Valid() const{
    return m_date_received_isValid;
}

QString OAICsv_verify::getEstimatedPrice() const {
    return m_estimated_price;
}
void OAICsv_verify::setEstimatedPrice(const QString &estimated_price) {
    m_estimated_price = estimated_price;
    m_estimated_price_isSet = true;
}

bool OAICsv_verify::is_estimated_price_Set() const{
    return m_estimated_price_isSet;
}

bool OAICsv_verify::is_estimated_price_Valid() const{
    return m_estimated_price_isValid;
}

QDate OAICsv_verify::getFirstEventDate() const {
    return m_first_event_date;
}
void OAICsv_verify::setFirstEventDate(const QDate &first_event_date) {
    m_first_event_date = first_event_date;
    m_first_event_date_isSet = true;
}

bool OAICsv_verify::is_first_event_date_Set() const{
    return m_first_event_date_isSet;
}

bool OAICsv_verify::is_first_event_date_Valid() const{
    return m_first_event_date_isValid;
}

QString OAICsv_verify::getFrom() const {
    return m_from;
}
void OAICsv_verify::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICsv_verify::is_from_Set() const{
    return m_from_isSet;
}

bool OAICsv_verify::is_from_Valid() const{
    return m_from_isValid;
}

QDate OAICsv_verify::getLastEventDate() const {
    return m_last_event_date;
}
void OAICsv_verify::setLastEventDate(const QDate &last_event_date) {
    m_last_event_date = last_event_date;
    m_last_event_date_isSet = true;
}

bool OAICsv_verify::is_last_event_date_Set() const{
    return m_last_event_date_isSet;
}

bool OAICsv_verify::is_last_event_date_Valid() const{
    return m_last_event_date_isValid;
}

QString OAICsv_verify::getLocale() const {
    return m_locale;
}
void OAICsv_verify::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICsv_verify::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICsv_verify::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAICsv_verify::getNetwork() const {
    return m_network;
}
void OAICsv_verify::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICsv_verify::is_network_Set() const{
    return m_network_isSet;
}

bool OAICsv_verify::is_network_Valid() const{
    return m_network_isValid;
}

QString OAICsv_verify::getNetworkName() const {
    return m_network_name;
}
void OAICsv_verify::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAICsv_verify::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAICsv_verify::is_network_name_Valid() const{
    return m_network_name_isValid;
}

QString OAICsv_verify::getNumberType() const {
    return m_number_type;
}
void OAICsv_verify::setNumberType(const QString &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAICsv_verify::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAICsv_verify::is_number_type_Valid() const{
    return m_number_type_isValid;
}

QString OAICsv_verify::getPrice() const {
    return m_price;
}
void OAICsv_verify::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICsv_verify::is_price_Set() const{
    return m_price_isSet;
}

bool OAICsv_verify::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICsv_verify::getPricingModel() const {
    return m_pricing_model;
}
void OAICsv_verify::setPricingModel(const QString &pricing_model) {
    m_pricing_model = pricing_model;
    m_pricing_model_isSet = true;
}

bool OAICsv_verify::is_pricing_model_Set() const{
    return m_pricing_model_isSet;
}

bool OAICsv_verify::is_pricing_model_Valid() const{
    return m_pricing_model_isValid;
}

QString OAICsv_verify::getRequestId() const {
    return m_request_id;
}
void OAICsv_verify::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICsv_verify::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICsv_verify::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAICsv_verify::getSmsEventCount() const {
    return m_sms_event_count;
}
void OAICsv_verify::setSmsEventCount(const qint32 &sms_event_count) {
    m_sms_event_count = sms_event_count;
    m_sms_event_count_isSet = true;
}

bool OAICsv_verify::is_sms_event_count_Set() const{
    return m_sms_event_count_isSet;
}

bool OAICsv_verify::is_sms_event_count_Valid() const{
    return m_sms_event_count_isValid;
}

QString OAICsv_verify::getTo() const {
    return m_to;
}
void OAICsv_verify::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICsv_verify::is_to_Set() const{
    return m_to_isSet;
}

bool OAICsv_verify::is_to_Valid() const{
    return m_to_isValid;
}

qint32 OAICsv_verify::getTtsEventCount() const {
    return m_tts_event_count;
}
void OAICsv_verify::setTtsEventCount(const qint32 &tts_event_count) {
    m_tts_event_count = tts_event_count;
    m_tts_event_count_isSet = true;
}

bool OAICsv_verify::is_tts_event_count_Set() const{
    return m_tts_event_count_isSet;
}

bool OAICsv_verify::is_tts_event_count_Valid() const{
    return m_tts_event_count_isValid;
}

QString OAICsv_verify::getVerifyStatus() const {
    return m_verify_status;
}
void OAICsv_verify::setVerifyStatus(const QString &verify_status) {
    m_verify_status = verify_status;
    m_verify_status_isSet = true;
}

bool OAICsv_verify::is_verify_status_Set() const{
    return m_verify_status_isSet;
}

bool OAICsv_verify::is_verify_status_Valid() const{
    return m_verify_status_isValid;
}

bool OAICsv_verify::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_finalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tts_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_verify::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
