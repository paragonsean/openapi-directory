/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISMS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISMS::OAISMS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISMS::OAISMS() {
    this->initializeModel();
}

OAISMS::~OAISMS() {}

void OAISMS::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_account_ref_isSet = false;
    m_account_ref_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_include_message_isSet = false;
    m_include_message_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_show_concatenated_isSet = false;
    m_show_concatenated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISMS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISMS::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_account_ref_isValid = ::OpenAPI::fromJsonValue(m_account_ref, json[QString("account_ref")]);
    m_account_ref_isSet = !json[QString("account_ref")].isNull() && m_account_ref_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_include_message_isValid = ::OpenAPI::fromJsonValue(m_include_message, json[QString("include_message")]);
    m_include_message_isSet = !json[QString("include_message")].isNull() && m_include_message_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_show_concatenated_isValid = ::OpenAPI::fromJsonValue(m_show_concatenated, json[QString("show_concatenated")]);
    m_show_concatenated_isSet = !json[QString("show_concatenated")].isNull() && m_show_concatenated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISMS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISMS::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_account_ref_isSet) {
        obj.insert(QString("account_ref"), ::OpenAPI::toJsonValue(m_account_ref));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_include_message_isSet) {
        obj.insert(QString("include_message"), ::OpenAPI::toJsonValue(m_include_message));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_show_concatenated_isSet) {
        obj.insert(QString("show_concatenated"), ::OpenAPI::toJsonValue(m_show_concatenated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAISMS::getAccountId() const {
    return m_account_id;
}
void OAISMS::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISMS::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISMS::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAISMS::getCallbackUrl() const {
    return m_callback_url;
}
void OAISMS::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAISMS::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAISMS::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAISMS::getDateEnd() const {
    return m_date_end;
}
void OAISMS::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAISMS::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAISMS::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAISMS::getDateStart() const {
    return m_date_start;
}
void OAISMS::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAISMS::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAISMS::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAISMS::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAISMS::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAISMS::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAISMS::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

OAIProduct_sms OAISMS::getProduct() const {
    return m_product;
}
void OAISMS::setProduct(const OAIProduct_sms &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAISMS::is_product_Set() const{
    return m_product_isSet;
}

bool OAISMS::is_product_Valid() const{
    return m_product_isValid;
}

QString OAISMS::getAccountRef() const {
    return m_account_ref;
}
void OAISMS::setAccountRef(const QString &account_ref) {
    m_account_ref = account_ref;
    m_account_ref_isSet = true;
}

bool OAISMS::is_account_ref_Set() const{
    return m_account_ref_isSet;
}

bool OAISMS::is_account_ref_Valid() const{
    return m_account_ref_isValid;
}

QString OAISMS::getClientRef() const {
    return m_client_ref;
}
void OAISMS::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAISMS::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAISMS::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIDirection OAISMS::getDirection() const {
    return m_direction;
}
void OAISMS::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAISMS::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAISMS::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAISMS::getFrom() const {
    return m_from;
}
void OAISMS::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISMS::is_from_Set() const{
    return m_from_isSet;
}

bool OAISMS::is_from_Valid() const{
    return m_from_isValid;
}

bool OAISMS::isIncludeMessage() const {
    return m_include_message;
}
void OAISMS::setIncludeMessage(const bool &include_message) {
    m_include_message = include_message;
    m_include_message_isSet = true;
}

bool OAISMS::is_include_message_Set() const{
    return m_include_message_isSet;
}

bool OAISMS::is_include_message_Valid() const{
    return m_include_message_isValid;
}

QString OAISMS::getNetwork() const {
    return m_network;
}
void OAISMS::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAISMS::is_network_Set() const{
    return m_network_isSet;
}

bool OAISMS::is_network_Valid() const{
    return m_network_isValid;
}

bool OAISMS::isShowConcatenated() const {
    return m_show_concatenated;
}
void OAISMS::setShowConcatenated(const bool &show_concatenated) {
    m_show_concatenated = show_concatenated;
    m_show_concatenated_isSet = true;
}

bool OAISMS::is_show_concatenated_Set() const{
    return m_show_concatenated_isSet;
}

bool OAISMS::is_show_concatenated_Valid() const{
    return m_show_concatenated_isValid;
}

OAISms_status OAISMS::getStatus() const {
    return m_status;
}
void OAISMS::setStatus(const OAISms_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISMS::is_status_Set() const{
    return m_status_isSet;
}

bool OAISMS::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISMS::getTo() const {
    return m_to;
}
void OAISMS::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISMS::is_to_Set() const{
    return m_to_isSet;
}

bool OAISMS::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISMS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_concatenated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISMS::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_product_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
