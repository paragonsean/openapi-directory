/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_sms_outbound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_sms_outbound::OAICsv_sms_outbound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_sms_outbound::OAICsv_sms_outbound() {
    this->initializeModel();
}

OAICsv_sms_outbound::~OAICsv_sms_outbound() {}

void OAICsv_sms_outbound::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_finalized_isSet = false;
    m_date_finalized_isValid = false;

    m_date_received_isSet = false;
    m_date_received_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_code_description_isSet = false;
    m_error_code_description_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_message_body_isSet = false;
    m_message_body_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAICsv_sms_outbound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_sms_outbound::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_finalized_isValid = ::OpenAPI::fromJsonValue(m_date_finalized, json[QString("date_finalized")]);
    m_date_finalized_isSet = !json[QString("date_finalized")].isNull() && m_date_finalized_isValid;

    m_date_received_isValid = ::OpenAPI::fromJsonValue(m_date_received, json[QString("date_received")]);
    m_date_received_isSet = !json[QString("date_received")].isNull() && m_date_received_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_code_description_isValid = ::OpenAPI::fromJsonValue(m_error_code_description, json[QString("error_code_description")]);
    m_error_code_description_isSet = !json[QString("error_code_description")].isNull() && m_error_code_description_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_message_body_isValid = ::OpenAPI::fromJsonValue(m_message_body, json[QString("message_body")]);
    m_message_body_isSet = !json[QString("message_body")].isNull() && m_message_body_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("network_name")]);
    m_network_name_isSet = !json[QString("network_name")].isNull() && m_network_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;
}

QString OAICsv_sms_outbound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_sms_outbound::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_finalized_isSet) {
        obj.insert(QString("date_finalized"), ::OpenAPI::toJsonValue(m_date_finalized));
    }
    if (m_date_received_isSet) {
        obj.insert(QString("date_received"), ::OpenAPI::toJsonValue(m_date_received));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_code_description_isSet) {
        obj.insert(QString("error_code_description"), ::OpenAPI::toJsonValue(m_error_code_description));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_message_body_isSet) {
        obj.insert(QString("message_body"), ::OpenAPI::toJsonValue(m_message_body));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("network_name"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

QString OAICsv_sms_outbound::getAccountId() const {
    return m_account_id;
}
void OAICsv_sms_outbound::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_sms_outbound::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_sms_outbound::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_sms_outbound::getClientRef() const {
    return m_client_ref;
}
void OAICsv_sms_outbound::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAICsv_sms_outbound::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAICsv_sms_outbound::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAICsv_sms_outbound::getCountry() const {
    return m_country;
}
void OAICsv_sms_outbound::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICsv_sms_outbound::is_country_Set() const{
    return m_country_isSet;
}

bool OAICsv_sms_outbound::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICsv_sms_outbound::getCountryName() const {
    return m_country_name;
}
void OAICsv_sms_outbound::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAICsv_sms_outbound::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAICsv_sms_outbound::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAICsv_sms_outbound::getCurrency() const {
    return m_currency;
}
void OAICsv_sms_outbound::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_sms_outbound::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_sms_outbound::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_sms_outbound::getDateFinalized() const {
    return m_date_finalized;
}
void OAICsv_sms_outbound::setDateFinalized(const QDate &date_finalized) {
    m_date_finalized = date_finalized;
    m_date_finalized_isSet = true;
}

bool OAICsv_sms_outbound::is_date_finalized_Set() const{
    return m_date_finalized_isSet;
}

bool OAICsv_sms_outbound::is_date_finalized_Valid() const{
    return m_date_finalized_isValid;
}

QDate OAICsv_sms_outbound::getDateReceived() const {
    return m_date_received;
}
void OAICsv_sms_outbound::setDateReceived(const QDate &date_received) {
    m_date_received = date_received;
    m_date_received_isSet = true;
}

bool OAICsv_sms_outbound::is_date_received_Set() const{
    return m_date_received_isSet;
}

bool OAICsv_sms_outbound::is_date_received_Valid() const{
    return m_date_received_isValid;
}

OAIDirection OAICsv_sms_outbound::getDirection() const {
    return m_direction;
}
void OAICsv_sms_outbound::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICsv_sms_outbound::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICsv_sms_outbound::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAICsv_sms_outbound::getErrorCode() const {
    return m_error_code;
}
void OAICsv_sms_outbound::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAICsv_sms_outbound::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAICsv_sms_outbound::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAICsv_sms_outbound::getErrorCodeDescription() const {
    return m_error_code_description;
}
void OAICsv_sms_outbound::setErrorCodeDescription(const QString &error_code_description) {
    m_error_code_description = error_code_description;
    m_error_code_description_isSet = true;
}

bool OAICsv_sms_outbound::is_error_code_description_Set() const{
    return m_error_code_description_isSet;
}

bool OAICsv_sms_outbound::is_error_code_description_Valid() const{
    return m_error_code_description_isValid;
}

QString OAICsv_sms_outbound::getFrom() const {
    return m_from;
}
void OAICsv_sms_outbound::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICsv_sms_outbound::is_from_Set() const{
    return m_from_isSet;
}

bool OAICsv_sms_outbound::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAICsv_sms_outbound::getLatency() const {
    return m_latency;
}
void OAICsv_sms_outbound::setLatency(const qint32 &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAICsv_sms_outbound::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAICsv_sms_outbound::is_latency_Valid() const{
    return m_latency_isValid;
}

QString OAICsv_sms_outbound::getMessageBody() const {
    return m_message_body;
}
void OAICsv_sms_outbound::setMessageBody(const QString &message_body) {
    m_message_body = message_body;
    m_message_body_isSet = true;
}

bool OAICsv_sms_outbound::is_message_body_Set() const{
    return m_message_body_isSet;
}

bool OAICsv_sms_outbound::is_message_body_Valid() const{
    return m_message_body_isValid;
}

QString OAICsv_sms_outbound::getMessageId() const {
    return m_message_id;
}
void OAICsv_sms_outbound::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAICsv_sms_outbound::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAICsv_sms_outbound::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAICsv_sms_outbound::getNetwork() const {
    return m_network;
}
void OAICsv_sms_outbound::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICsv_sms_outbound::is_network_Set() const{
    return m_network_isSet;
}

bool OAICsv_sms_outbound::is_network_Valid() const{
    return m_network_isValid;
}

QString OAICsv_sms_outbound::getNetworkName() const {
    return m_network_name;
}
void OAICsv_sms_outbound::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAICsv_sms_outbound::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAICsv_sms_outbound::is_network_name_Valid() const{
    return m_network_name_isValid;
}

OAISms_status OAICsv_sms_outbound::getStatus() const {
    return m_status;
}
void OAICsv_sms_outbound::setStatus(const OAISms_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICsv_sms_outbound::is_status_Set() const{
    return m_status_isSet;
}

bool OAICsv_sms_outbound::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICsv_sms_outbound::getTo() const {
    return m_to;
}
void OAICsv_sms_outbound::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICsv_sms_outbound::is_to_Set() const{
    return m_to_isSet;
}

bool OAICsv_sms_outbound::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICsv_sms_outbound::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_sms_outbound::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_sms_outbound::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_sms_outbound::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAICsv_sms_outbound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_finalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_sms_outbound::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
