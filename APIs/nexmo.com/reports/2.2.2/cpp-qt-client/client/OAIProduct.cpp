/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProduct::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProduct::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SMS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::SMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOICE-CALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::VOICE_CALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN-APP-VOICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::IN_APP_VOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEBSOCKET-CALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::WEBSOCKET_CALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERIFY-API", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::VERIFY_API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMBER-INSIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::NUMBER_INSIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::MESSAGES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONVERSATIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::CONVERSATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProduct::ASR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProduct::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProduct::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProduct::SMS:
            val = "SMS";
            break;
        case eOAIProduct::VOICE_CALL:
            val = "VOICE-CALL";
            break;
        case eOAIProduct::IN_APP_VOICE:
            val = "IN-APP-VOICE";
            break;
        case eOAIProduct::WEBSOCKET_CALL:
            val = "WEBSOCKET-CALL";
            break;
        case eOAIProduct::VERIFY_API:
            val = "VERIFY-API";
            break;
        case eOAIProduct::NUMBER_INSIGHT:
            val = "NUMBER-INSIGHT";
            break;
        case eOAIProduct::MESSAGES:
            val = "MESSAGES";
            break;
        case eOAIProduct::CONVERSATIONS:
            val = "CONVERSATIONS";
            break;
        case eOAIProduct::ASR:
            val = "ASR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProduct::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProduct::eOAIProduct OAIProduct::getValue() const {
    return m_value;
}

void OAIProduct::setValue(const OAIProduct::eOAIProduct& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProduct::isSet() const {
    
    return m_value_isSet;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
