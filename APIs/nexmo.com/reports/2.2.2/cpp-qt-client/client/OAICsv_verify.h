/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICsv_verify.h
 *
 * Verify
 */

#ifndef OAICsv_verify_H
#define OAICsv_verify_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICsv_verify : public OAIObject {
public:
    OAICsv_verify();
    OAICsv_verify(QString json);
    ~OAICsv_verify() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCountryName() const;
    void setCountryName(const QString &country_name);
    bool is_country_name_Set() const;
    bool is_country_name_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QDate getDateFinalized() const;
    void setDateFinalized(const QDate &date_finalized);
    bool is_date_finalized_Set() const;
    bool is_date_finalized_Valid() const;

    QDate getDateReceived() const;
    void setDateReceived(const QDate &date_received);
    bool is_date_received_Set() const;
    bool is_date_received_Valid() const;

    QString getEstimatedPrice() const;
    void setEstimatedPrice(const QString &estimated_price);
    bool is_estimated_price_Set() const;
    bool is_estimated_price_Valid() const;

    QDate getFirstEventDate() const;
    void setFirstEventDate(const QDate &first_event_date);
    bool is_first_event_date_Set() const;
    bool is_first_event_date_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QDate getLastEventDate() const;
    void setLastEventDate(const QDate &last_event_date);
    bool is_last_event_date_Set() const;
    bool is_last_event_date_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getNetworkName() const;
    void setNetworkName(const QString &network_name);
    bool is_network_name_Set() const;
    bool is_network_name_Valid() const;

    QString getNumberType() const;
    void setNumberType(const QString &number_type);
    bool is_number_type_Set() const;
    bool is_number_type_Valid() const;

    QString getPrice() const;
    void setPrice(const QString &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getPricingModel() const;
    void setPricingModel(const QString &pricing_model);
    bool is_pricing_model_Set() const;
    bool is_pricing_model_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    qint32 getSmsEventCount() const;
    void setSmsEventCount(const qint32 &sms_event_count);
    bool is_sms_event_count_Set() const;
    bool is_sms_event_count_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    qint32 getTtsEventCount() const;
    void setTtsEventCount(const qint32 &tts_event_count);
    bool is_tts_event_count_Set() const;
    bool is_tts_event_count_Valid() const;

    QString getVerifyStatus() const;
    void setVerifyStatus(const QString &verify_status);
    bool is_verify_status_Set() const;
    bool is_verify_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_country_name;
    bool m_country_name_isSet;
    bool m_country_name_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QDate m_date_finalized;
    bool m_date_finalized_isSet;
    bool m_date_finalized_isValid;

    QDate m_date_received;
    bool m_date_received_isSet;
    bool m_date_received_isValid;

    QString m_estimated_price;
    bool m_estimated_price_isSet;
    bool m_estimated_price_isValid;

    QDate m_first_event_date;
    bool m_first_event_date_isSet;
    bool m_first_event_date_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QDate m_last_event_date;
    bool m_last_event_date_isSet;
    bool m_last_event_date_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_network_name;
    bool m_network_name_isSet;
    bool m_network_name_isValid;

    QString m_number_type;
    bool m_number_type_isSet;
    bool m_number_type_isValid;

    QString m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_pricing_model;
    bool m_pricing_model_isSet;
    bool m_pricing_model_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    qint32 m_sms_event_count;
    bool m_sms_event_count_isSet;
    bool m_sms_event_count_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    qint32 m_tts_event_count;
    bool m_tts_event_count_isSet;
    bool m_tts_event_count_isValid;

    QString m_verify_status;
    bool m_verify_status_isSet;
    bool m_verify_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICsv_verify)

#endif // OAICsv_verify_H
