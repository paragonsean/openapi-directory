/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_reports_401_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_reports_401_response::OAIList_reports_401_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_reports_401_response::OAIList_reports_401_response() {
    this->initializeModel();
}

OAIList_reports_401_response::~OAIList_reports_401_response() {}

void OAIList_reports_401_response::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIList_reports_401_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_reports_401_response::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIList_reports_401_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_reports_401_response::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIList_reports_401_response::getDetail() const {
    return m_detail;
}
void OAIList_reports_401_response::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIList_reports_401_response::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIList_reports_401_response::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIList_reports_401_response::getInstance() const {
    return m_instance;
}
void OAIList_reports_401_response::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIList_reports_401_response::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIList_reports_401_response::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIList_reports_401_response::getTitle() const {
    return m_title;
}
void OAIList_reports_401_response::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIList_reports_401_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIList_reports_401_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIList_reports_401_response::getType() const {
    return m_type;
}
void OAIList_reports_401_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIList_reports_401_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIList_reports_401_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIList_reports_401_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_reports_401_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
