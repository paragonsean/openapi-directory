/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIList_reports_200_response.h
 *
 * 
 */

#ifndef OAIList_reports_200_response_H
#define OAIList_reports_200_response_H

#include <QJsonObject>

#include "OAIList_reports_200_response_reports_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIList_reports_200_response_reports_inner;

class OAIList_reports_200_response : public OAIObject {
public:
    OAIList_reports_200_response();
    OAIList_reports_200_response(QString json);
    ~OAIList_reports_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getItemsCount() const;
    void setItemsCount(const qint32 &items_count);
    bool is_items_count_Set() const;
    bool is_items_count_Valid() const;

    QList<OAIList_reports_200_response_reports_inner> getReports() const;
    void setReports(const QList<OAIList_reports_200_response_reports_inner> &reports);
    bool is_reports_Set() const;
    bool is_reports_Valid() const;

    QString getSelfLink() const;
    void setSelfLink(const QString &self_link);
    bool is_self_link_Set() const;
    bool is_self_link_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_items_count;
    bool m_items_count_isSet;
    bool m_items_count_isValid;

    QList<OAIList_reports_200_response_reports_inner> m_reports;
    bool m_reports_isSet;
    bool m_reports_isValid;

    QString m_self_link;
    bool m_self_link_isSet;
    bool m_self_link_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIList_reports_200_response)

#endif // OAIList_reports_200_response_H
