/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISms_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISms_fields::OAISms_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISms_fields::OAISms_fields() {
    this->initializeModel();
}

OAISms_fields::~OAISms_fields() {}

void OAISms_fields::initializeModel() {

    m_account_ref_isSet = false;
    m_account_ref_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_include_message_isSet = false;
    m_include_message_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_show_concatenated_isSet = false;
    m_show_concatenated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISms_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISms_fields::fromJsonObject(QJsonObject json) {

    m_account_ref_isValid = ::OpenAPI::fromJsonValue(m_account_ref, json[QString("account_ref")]);
    m_account_ref_isSet = !json[QString("account_ref")].isNull() && m_account_ref_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_include_message_isValid = ::OpenAPI::fromJsonValue(m_include_message, json[QString("include_message")]);
    m_include_message_isSet = !json[QString("include_message")].isNull() && m_include_message_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_show_concatenated_isValid = ::OpenAPI::fromJsonValue(m_show_concatenated, json[QString("show_concatenated")]);
    m_show_concatenated_isSet = !json[QString("show_concatenated")].isNull() && m_show_concatenated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISms_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISms_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_account_ref_isSet) {
        obj.insert(QString("account_ref"), ::OpenAPI::toJsonValue(m_account_ref));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_include_message_isSet) {
        obj.insert(QString("include_message"), ::OpenAPI::toJsonValue(m_include_message));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_show_concatenated_isSet) {
        obj.insert(QString("show_concatenated"), ::OpenAPI::toJsonValue(m_show_concatenated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAISms_fields::getAccountRef() const {
    return m_account_ref;
}
void OAISms_fields::setAccountRef(const QString &account_ref) {
    m_account_ref = account_ref;
    m_account_ref_isSet = true;
}

bool OAISms_fields::is_account_ref_Set() const{
    return m_account_ref_isSet;
}

bool OAISms_fields::is_account_ref_Valid() const{
    return m_account_ref_isValid;
}

QString OAISms_fields::getClientRef() const {
    return m_client_ref;
}
void OAISms_fields::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAISms_fields::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAISms_fields::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

OAIDirection OAISms_fields::getDirection() const {
    return m_direction;
}
void OAISms_fields::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAISms_fields::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAISms_fields::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAISms_fields::getFrom() const {
    return m_from;
}
void OAISms_fields::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISms_fields::is_from_Set() const{
    return m_from_isSet;
}

bool OAISms_fields::is_from_Valid() const{
    return m_from_isValid;
}

bool OAISms_fields::isIncludeMessage() const {
    return m_include_message;
}
void OAISms_fields::setIncludeMessage(const bool &include_message) {
    m_include_message = include_message;
    m_include_message_isSet = true;
}

bool OAISms_fields::is_include_message_Set() const{
    return m_include_message_isSet;
}

bool OAISms_fields::is_include_message_Valid() const{
    return m_include_message_isValid;
}

QString OAISms_fields::getNetwork() const {
    return m_network;
}
void OAISms_fields::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAISms_fields::is_network_Set() const{
    return m_network_isSet;
}

bool OAISms_fields::is_network_Valid() const{
    return m_network_isValid;
}

OAIProduct_sms OAISms_fields::getProduct() const {
    return m_product;
}
void OAISms_fields::setProduct(const OAIProduct_sms &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAISms_fields::is_product_Set() const{
    return m_product_isSet;
}

bool OAISms_fields::is_product_Valid() const{
    return m_product_isValid;
}

bool OAISms_fields::isShowConcatenated() const {
    return m_show_concatenated;
}
void OAISms_fields::setShowConcatenated(const bool &show_concatenated) {
    m_show_concatenated = show_concatenated;
    m_show_concatenated_isSet = true;
}

bool OAISms_fields::is_show_concatenated_Set() const{
    return m_show_concatenated_isSet;
}

bool OAISms_fields::is_show_concatenated_Valid() const{
    return m_show_concatenated_isValid;
}

OAISms_status OAISms_fields::getStatus() const {
    return m_status;
}
void OAISms_fields::setStatus(const OAISms_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISms_fields::is_status_Set() const{
    return m_status_isSet;
}

bool OAISms_fields::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISms_fields::getTo() const {
    return m_to;
}
void OAISms_fields::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISms_fields::is_to_Set() const{
    return m_to_isSet;
}

bool OAISms_fields::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISms_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_concatenated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISms_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_direction_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
