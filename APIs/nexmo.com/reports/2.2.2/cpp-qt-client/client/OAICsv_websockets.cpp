/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_websockets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_websockets::OAICsv_websockets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_websockets::OAICsv_websockets() {
    this->initializeModel();
}

OAICsv_websockets::~OAICsv_websockets() {}

void OAICsv_websockets::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_call_id_isSet = false;
    m_call_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAICsv_websockets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_websockets::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_call_id_isValid = ::OpenAPI::fromJsonValue(m_call_id, json[QString("call_id")]);
    m_call_id_isSet = !json[QString("call_id")].isNull() && m_call_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;
}

QString OAICsv_websockets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_websockets::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_call_id_isSet) {
        obj.insert(QString("call_id"), ::OpenAPI::toJsonValue(m_call_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

QString OAICsv_websockets::getAccountId() const {
    return m_account_id;
}
void OAICsv_websockets::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_websockets::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_websockets::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_websockets::getCallId() const {
    return m_call_id;
}
void OAICsv_websockets::setCallId(const QString &call_id) {
    m_call_id = call_id;
    m_call_id_isSet = true;
}

bool OAICsv_websockets::is_call_id_Set() const{
    return m_call_id_isSet;
}

bool OAICsv_websockets::is_call_id_Valid() const{
    return m_call_id_isValid;
}

QString OAICsv_websockets::getCurrency() const {
    return m_currency;
}
void OAICsv_websockets::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_websockets::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_websockets::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_websockets::getDateEnd() const {
    return m_date_end;
}
void OAICsv_websockets::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICsv_websockets::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICsv_websockets::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAICsv_websockets::getDateStart() const {
    return m_date_start;
}
void OAICsv_websockets::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICsv_websockets::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICsv_websockets::is_date_start_Valid() const{
    return m_date_start_isValid;
}

qint32 OAICsv_websockets::getDuration() const {
    return m_duration;
}
void OAICsv_websockets::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICsv_websockets::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICsv_websockets::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAICsv_websockets::getPrice() const {
    return m_price;
}
void OAICsv_websockets::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICsv_websockets::is_price_Set() const{
    return m_price_isSet;
}

bool OAICsv_websockets::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICsv_websockets::getStatus() const {
    return m_status;
}
void OAICsv_websockets::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICsv_websockets::is_status_Set() const{
    return m_status_isSet;
}

bool OAICsv_websockets::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICsv_websockets::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_websockets::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_websockets::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_websockets::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAICsv_websockets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_websockets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
