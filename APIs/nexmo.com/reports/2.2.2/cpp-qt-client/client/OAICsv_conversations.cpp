/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_conversations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_conversations::OAICsv_conversations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_conversations::OAICsv_conversations() {
    this->initializeModel();
}

OAICsv_conversations::~OAICsv_conversations() {}

void OAICsv_conversations::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICsv_conversations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_conversations::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("application_id")]);
    m_application_id_isSet = !json[QString("application_id")].isNull() && m_application_id_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICsv_conversations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_conversations::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("application_id"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICsv_conversations::getAccountId() const {
    return m_account_id;
}
void OAICsv_conversations::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_conversations::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_conversations::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_conversations::getApplicationId() const {
    return m_application_id;
}
void OAICsv_conversations::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICsv_conversations::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICsv_conversations::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICsv_conversations::getClientRef() const {
    return m_client_ref;
}
void OAICsv_conversations::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAICsv_conversations::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAICsv_conversations::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAICsv_conversations::getConversationId() const {
    return m_conversation_id;
}
void OAICsv_conversations::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAICsv_conversations::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAICsv_conversations::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QDate OAICsv_conversations::getCreationDate() const {
    return m_creation_date;
}
void OAICsv_conversations::setCreationDate(const QDate &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICsv_conversations::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICsv_conversations::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAICsv_conversations::getCurrency() const {
    return m_currency;
}
void OAICsv_conversations::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_conversations::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_conversations::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICsv_conversations::getId() const {
    return m_id;
}
void OAICsv_conversations::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICsv_conversations::is_id_Set() const{
    return m_id_isSet;
}

bool OAICsv_conversations::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICsv_conversations::getPrice() const {
    return m_price;
}
void OAICsv_conversations::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICsv_conversations::is_price_Set() const{
    return m_price_isSet;
}

bool OAICsv_conversations::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICsv_conversations::getRequestId() const {
    return m_request_id;
}
void OAICsv_conversations::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICsv_conversations::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICsv_conversations::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICsv_conversations::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_conversations::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_conversations::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_conversations::is_total_price_Valid() const{
    return m_total_price_isValid;
}

QString OAICsv_conversations::getUserId() const {
    return m_user_id;
}
void OAICsv_conversations::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICsv_conversations::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICsv_conversations::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICsv_conversations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_conversations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
