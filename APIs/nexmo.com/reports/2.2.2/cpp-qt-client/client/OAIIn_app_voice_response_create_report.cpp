/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIn_app_voice_response_create_report.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIn_app_voice_response_create_report::OAIIn_app_voice_response_create_report(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIn_app_voice_response_create_report::OAIIn_app_voice_response_create_report() {
    this->initializeModel();
}

OAIIn_app_voice_response_create_report::~OAIIn_app_voice_response_create_report() {}

void OAIIn_app_voice_response_create_report::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_receive_time_isSet = false;
    m_receive_time_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_status_isSet = false;
    m_request_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;
}

void OAIIn_app_voice_response_create_report::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIn_app_voice_response_create_report::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_receive_time_isValid = ::OpenAPI::fromJsonValue(m_receive_time, json[QString("receive_time")]);
    m_receive_time_isSet = !json[QString("receive_time")].isNull() && m_receive_time_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_status_isValid = ::OpenAPI::fromJsonValue(m_request_status, json[QString("request_status")]);
    m_request_status_isSet = !json[QString("request_status")].isNull() && m_request_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;
}

QString OAIIn_app_voice_response_create_report::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIn_app_voice_response_create_report::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_receive_time_isSet) {
        obj.insert(QString("receive_time"), ::OpenAPI::toJsonValue(m_receive_time));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_status.isSet()) {
        obj.insert(QString("request_status"), ::OpenAPI::toJsonValue(m_request_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    return obj;
}

OAI_links_create_report OAIIn_app_voice_response_create_report::getLinks() const {
    return m__links;
}
void OAIIn_app_voice_response_create_report::setLinks(const OAI_links_create_report &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is__links_Set() const{
    return m__links_isSet;
}

bool OAIIn_app_voice_response_create_report::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIIn_app_voice_response_create_report::getAccountId() const {
    return m_account_id;
}
void OAIIn_app_voice_response_create_report::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIIn_app_voice_response_create_report::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIIn_app_voice_response_create_report::getCallbackUrl() const {
    return m_callback_url;
}
void OAIIn_app_voice_response_create_report::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIIn_app_voice_response_create_report::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAIIn_app_voice_response_create_report::getDateEnd() const {
    return m_date_end;
}
void OAIIn_app_voice_response_create_report::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAIIn_app_voice_response_create_report::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAIIn_app_voice_response_create_report::getDateStart() const {
    return m_date_start;
}
void OAIIn_app_voice_response_create_report::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAIIn_app_voice_response_create_report::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAIIn_app_voice_response_create_report::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAIIn_app_voice_response_create_report::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAIIn_app_voice_response_create_report::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

OAIProduct_in_app_voice OAIIn_app_voice_response_create_report::getProduct() const {
    return m_product;
}
void OAIIn_app_voice_response_create_report::setProduct(const OAIProduct_in_app_voice &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_product_Set() const{
    return m_product_isSet;
}

bool OAIIn_app_voice_response_create_report::is_product_Valid() const{
    return m_product_isValid;
}

QDate OAIIn_app_voice_response_create_report::getReceiveTime() const {
    return m_receive_time;
}
void OAIIn_app_voice_response_create_report::setReceiveTime(const QDate &receive_time) {
    m_receive_time = receive_time;
    m_receive_time_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_receive_time_Set() const{
    return m_receive_time_isSet;
}

bool OAIIn_app_voice_response_create_report::is_receive_time_Valid() const{
    return m_receive_time_isValid;
}

QString OAIIn_app_voice_response_create_report::getRequestId() const {
    return m_request_id;
}
void OAIIn_app_voice_response_create_report::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIIn_app_voice_response_create_report::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequest_status_create_report OAIIn_app_voice_response_create_report::getRequestStatus() const {
    return m_request_status;
}
void OAIIn_app_voice_response_create_report::setRequestStatus(const OAIRequest_status_create_report &request_status) {
    m_request_status = request_status;
    m_request_status_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_request_status_Set() const{
    return m_request_status_isSet;
}

bool OAIIn_app_voice_response_create_report::is_request_status_Valid() const{
    return m_request_status_isValid;
}

QDate OAIIn_app_voice_response_create_report::getStartTime() const {
    return m_start_time;
}
void OAIIn_app_voice_response_create_report::setStartTime(const QDate &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIIn_app_voice_response_create_report::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIIn_app_voice_response_create_report::getConversationId() const {
    return m_conversation_id;
}
void OAIIn_app_voice_response_create_report::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIIn_app_voice_response_create_report::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIIn_app_voice_response_create_report::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

bool OAIIn_app_voice_response_create_report::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIn_app_voice_response_create_report::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
