/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsr_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsr_fields::OAIAsr_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsr_fields::OAIAsr_fields() {
    this->initializeModel();
}

OAIAsr_fields::~OAIAsr_fields() {}

void OAIAsr_fields::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIAsr_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsr_fields::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIAsr_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsr_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

OAIDirection OAIAsr_fields::getDirection() const {
    return m_direction;
}
void OAIAsr_fields::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIAsr_fields::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIAsr_fields::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIAsr_fields::getFrom() const {
    return m_from;
}
void OAIAsr_fields::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIAsr_fields::is_from_Set() const{
    return m_from_isSet;
}

bool OAIAsr_fields::is_from_Valid() const{
    return m_from_isValid;
}

OAIProduct_asr OAIAsr_fields::getProduct() const {
    return m_product;
}
void OAIAsr_fields::setProduct(const OAIProduct_asr &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIAsr_fields::is_product_Set() const{
    return m_product_isSet;
}

bool OAIAsr_fields::is_product_Valid() const{
    return m_product_isValid;
}

OAIAsr_status OAIAsr_fields::getStatus() const {
    return m_status;
}
void OAIAsr_fields::setStatus(const OAIAsr_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAsr_fields::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAsr_fields::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAsr_fields::getTo() const {
    return m_to;
}
void OAIAsr_fields::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIAsr_fields::is_to_Set() const{
    return m_to_isSet;
}

bool OAIAsr_fields::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIAsr_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsr_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
