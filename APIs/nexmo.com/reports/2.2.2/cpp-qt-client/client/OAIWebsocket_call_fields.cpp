/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebsocket_call_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebsocket_call_fields::OAIWebsocket_call_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebsocket_call_fields::OAIWebsocket_call_fields() {
    this->initializeModel();
}

OAIWebsocket_call_fields::~OAIWebsocket_call_fields() {}

void OAIWebsocket_call_fields::initializeModel() {

    m_product_isSet = false;
    m_product_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIWebsocket_call_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebsocket_call_fields::fromJsonObject(QJsonObject json) {

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIWebsocket_call_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebsocket_call_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIProduct_websocket OAIWebsocket_call_fields::getProduct() const {
    return m_product;
}
void OAIWebsocket_call_fields::setProduct(const OAIProduct_websocket &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIWebsocket_call_fields::is_product_Set() const{
    return m_product_isSet;
}

bool OAIWebsocket_call_fields::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIWebsocket_call_fields::getStatus() const {
    return m_status;
}
void OAIWebsocket_call_fields::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebsocket_call_fields::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebsocket_call_fields::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIWebsocket_call_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebsocket_call_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
