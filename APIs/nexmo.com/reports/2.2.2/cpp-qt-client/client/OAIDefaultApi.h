/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancel_report_409_response.h"
#include "OAICreate_async_report_200_response.h"
#include "OAICreate_async_report_400_response.h"
#include "OAICreate_async_report_403_response.h"
#include "OAICreate_async_report_422_response.h"
#include "OAICreate_async_report_request.h"
#include "OAIDownload_report_200_response.h"
#include "OAIGet_records_200_response.h"
#include "OAIGet_records_403_response.h"
#include "OAIGet_records_422_response.h"
#include "OAIGet_report_200_response.h"
#include "OAIGet_report_404_response.h"
#include "OAIList_reports_200_response.h"
#include "OAIList_reports_400_response.h"
#include "OAIList_reports_401_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  report_id QString [required]
    */
    virtual void cancelReport(const QString &report_id);

    /**
    * @param[in]  oai_create_async_report_request OAICreate_async_report_request [optional]
    */
    virtual void createAsyncReport(const ::OpenAPI::OptionalParam<OAICreate_async_report_request> &oai_create_async_report_request = ::OpenAPI::OptionalParam<OAICreate_async_report_request>());

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void downloadReport(const QString &file_id);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  product QString [required]
    * @param[in]  direction QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  date_start QDate [optional]
    * @param[in]  date_end QDate [optional]
    * @param[in]  include_message bool [optional]
    * @param[in]  show_concatenated bool [optional]
    * @param[in]  status QString [optional]
    */
    virtual void getRecords(const QString &account_id, const QString &product, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &include_message = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_concatenated = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  report_id QString [required]
    */
    virtual void getReport(const QString &report_id);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  status QString [required]
    * @param[in]  date_from QDate [optional]
    * @param[in]  date_to QDate [optional]
    */
    virtual void listReports(const QString &account_id, const QString &status, const ::OpenAPI::OptionalParam<QDate> &date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_to = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelReportCallback(OAIHttpRequestWorker *worker);
    void createAsyncReportCallback(OAIHttpRequestWorker *worker);
    void downloadReportCallback(OAIHttpRequestWorker *worker);
    void getRecordsCallback(OAIHttpRequestWorker *worker);
    void getReportCallback(OAIHttpRequestWorker *worker);
    void listReportsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelReportSignal(OAIGet_report_200_response summary);
    void createAsyncReportSignal(OAICreate_async_report_200_response summary);
    void downloadReportSignal(OAIDownload_report_200_response summary);
    void getRecordsSignal(OAIGet_records_200_response summary);
    void getReportSignal(OAIGet_report_200_response summary);
    void listReportsSignal(OAIList_reports_200_response summary);


    void cancelReportSignalFull(OAIHttpRequestWorker *worker, OAIGet_report_200_response summary);
    void createAsyncReportSignalFull(OAIHttpRequestWorker *worker, OAICreate_async_report_200_response summary);
    void downloadReportSignalFull(OAIHttpRequestWorker *worker, OAIDownload_report_200_response summary);
    void getRecordsSignalFull(OAIHttpRequestWorker *worker, OAIGet_records_200_response summary);
    void getReportSignalFull(OAIHttpRequestWorker *worker, OAIGet_report_200_response summary);
    void listReportsSignalFull(OAIHttpRequestWorker *worker, OAIList_reports_200_response summary);

    Q_DECL_DEPRECATED_X("Use cancelReportSignalError() instead")
    void cancelReportSignalE(OAIGet_report_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelReportSignalError(OAIGet_report_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAsyncReportSignalError() instead")
    void createAsyncReportSignalE(OAICreate_async_report_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAsyncReportSignalError(OAICreate_async_report_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadReportSignalError() instead")
    void downloadReportSignalE(OAIDownload_report_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadReportSignalError(OAIDownload_report_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalError() instead")
    void getRecordsSignalE(OAIGet_records_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalError(OAIGet_records_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportSignalError() instead")
    void getReportSignalE(OAIGet_report_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportSignalError(OAIGet_report_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listReportsSignalError() instead")
    void listReportsSignalE(OAIList_reports_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listReportsSignalError(OAIList_reports_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelReportSignalErrorFull() instead")
    void cancelReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAsyncReportSignalErrorFull() instead")
    void createAsyncReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAsyncReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadReportSignalErrorFull() instead")
    void downloadReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalErrorFull() instead")
    void getRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportSignalErrorFull() instead")
    void getReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listReportsSignalErrorFull() instead")
    void listReportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listReportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
