/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJson_sms_inbound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJson_sms_inbound::OAIJson_sms_inbound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJson_sms_inbound::OAIJson_sms_inbound() {
    this->initializeModel();
}

OAIJson_sms_inbound::~OAIJson_sms_inbound() {}

void OAIJson_sms_inbound::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_received_isSet = false;
    m_date_received_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAIJson_sms_inbound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJson_sms_inbound::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_received_isValid = ::OpenAPI::fromJsonValue(m_date_received, json[QString("date_received")]);
    m_date_received_isSet = !json[QString("date_received")].isNull() && m_date_received_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("network_name")]);
    m_network_name_isSet = !json[QString("network_name")].isNull() && m_network_name_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;
}

QString OAIJson_sms_inbound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJson_sms_inbound::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_received_isSet) {
        obj.insert(QString("date_received"), ::OpenAPI::toJsonValue(m_date_received));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("network_name"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

QString OAIJson_sms_inbound::getAccountId() const {
    return m_account_id;
}
void OAIJson_sms_inbound::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIJson_sms_inbound::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIJson_sms_inbound::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIJson_sms_inbound::getCountry() const {
    return m_country;
}
void OAIJson_sms_inbound::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIJson_sms_inbound::is_country_Set() const{
    return m_country_isSet;
}

bool OAIJson_sms_inbound::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIJson_sms_inbound::getCountryName() const {
    return m_country_name;
}
void OAIJson_sms_inbound::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIJson_sms_inbound::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIJson_sms_inbound::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIJson_sms_inbound::getCurrency() const {
    return m_currency;
}
void OAIJson_sms_inbound::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIJson_sms_inbound::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIJson_sms_inbound::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAIJson_sms_inbound::getDateReceived() const {
    return m_date_received;
}
void OAIJson_sms_inbound::setDateReceived(const QDate &date_received) {
    m_date_received = date_received;
    m_date_received_isSet = true;
}

bool OAIJson_sms_inbound::is_date_received_Set() const{
    return m_date_received_isSet;
}

bool OAIJson_sms_inbound::is_date_received_Valid() const{
    return m_date_received_isValid;
}

OAIDirection OAIJson_sms_inbound::getDirection() const {
    return m_direction;
}
void OAIJson_sms_inbound::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIJson_sms_inbound::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIJson_sms_inbound::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIJson_sms_inbound::getFrom() const {
    return m_from;
}
void OAIJson_sms_inbound::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIJson_sms_inbound::is_from_Set() const{
    return m_from_isSet;
}

bool OAIJson_sms_inbound::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIJson_sms_inbound::getMessageId() const {
    return m_message_id;
}
void OAIJson_sms_inbound::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIJson_sms_inbound::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIJson_sms_inbound::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIJson_sms_inbound::getNetwork() const {
    return m_network;
}
void OAIJson_sms_inbound::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIJson_sms_inbound::is_network_Set() const{
    return m_network_isSet;
}

bool OAIJson_sms_inbound::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIJson_sms_inbound::getNetworkName() const {
    return m_network_name;
}
void OAIJson_sms_inbound::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAIJson_sms_inbound::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAIJson_sms_inbound::is_network_name_Valid() const{
    return m_network_name_isValid;
}

QString OAIJson_sms_inbound::getTo() const {
    return m_to;
}
void OAIJson_sms_inbound::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIJson_sms_inbound::is_to_Set() const{
    return m_to_isSet;
}

bool OAIJson_sms_inbound::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIJson_sms_inbound::getTotalPrice() const {
    return m_total_price;
}
void OAIJson_sms_inbound::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAIJson_sms_inbound::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAIJson_sms_inbound::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAIJson_sms_inbound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJson_sms_inbound::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
