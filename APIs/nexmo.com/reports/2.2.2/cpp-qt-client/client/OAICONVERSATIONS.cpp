/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICONVERSATIONS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICONVERSATIONS::OAICONVERSATIONS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICONVERSATIONS::OAICONVERSATIONS() {
    this->initializeModel();
}

OAICONVERSATIONS::~OAICONVERSATIONS() {}

void OAICONVERSATIONS::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICONVERSATIONS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICONVERSATIONS::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICONVERSATIONS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICONVERSATIONS::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICONVERSATIONS::getAccountId() const {
    return m_account_id;
}
void OAICONVERSATIONS::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICONVERSATIONS::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICONVERSATIONS::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICONVERSATIONS::getCallbackUrl() const {
    return m_callback_url;
}
void OAICONVERSATIONS::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAICONVERSATIONS::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAICONVERSATIONS::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAICONVERSATIONS::getDateEnd() const {
    return m_date_end;
}
void OAICONVERSATIONS::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICONVERSATIONS::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICONVERSATIONS::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAICONVERSATIONS::getDateStart() const {
    return m_date_start;
}
void OAICONVERSATIONS::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICONVERSATIONS::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICONVERSATIONS::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAICONVERSATIONS::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAICONVERSATIONS::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAICONVERSATIONS::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAICONVERSATIONS::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

OAIProduct_conversations OAICONVERSATIONS::getProduct() const {
    return m_product;
}
void OAICONVERSATIONS::setProduct(const OAIProduct_conversations &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAICONVERSATIONS::is_product_Set() const{
    return m_product_isSet;
}

bool OAICONVERSATIONS::is_product_Valid() const{
    return m_product_isValid;
}

QString OAICONVERSATIONS::getConversationId() const {
    return m_conversation_id;
}
void OAICONVERSATIONS::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAICONVERSATIONS::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAICONVERSATIONS::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAICONVERSATIONS::getStatus() const {
    return m_status;
}
void OAICONVERSATIONS::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICONVERSATIONS::is_status_Set() const{
    return m_status_isSet;
}

bool OAICONVERSATIONS::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICONVERSATIONS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICONVERSATIONS::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
