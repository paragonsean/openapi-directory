/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_in_app_voice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_in_app_voice::OAICsv_in_app_voice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_in_app_voice::OAICsv_in_app_voice() {
    this->initializeModel();
}

OAICsv_in_app_voice::~OAICsv_in_app_voice() {}

void OAICsv_in_app_voice::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_client_ref_isSet = false;
    m_client_ref_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_leg_id_isSet = false;
    m_leg_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICsv_in_app_voice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_in_app_voice::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("application_id")]);
    m_application_id_isSet = !json[QString("application_id")].isNull() && m_application_id_isValid;

    m_client_ref_isValid = ::OpenAPI::fromJsonValue(m_client_ref, json[QString("client_ref")]);
    m_client_ref_isSet = !json[QString("client_ref")].isNull() && m_client_ref_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_leg_id_isValid = ::OpenAPI::fromJsonValue(m_leg_id, json[QString("leg_id")]);
    m_leg_id_isSet = !json[QString("leg_id")].isNull() && m_leg_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICsv_in_app_voice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_in_app_voice::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("application_id"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_client_ref_isSet) {
        obj.insert(QString("client_ref"), ::OpenAPI::toJsonValue(m_client_ref));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_leg_id_isSet) {
        obj.insert(QString("leg_id"), ::OpenAPI::toJsonValue(m_leg_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICsv_in_app_voice::getAccountId() const {
    return m_account_id;
}
void OAICsv_in_app_voice::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_in_app_voice::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_in_app_voice::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_in_app_voice::getApplicationId() const {
    return m_application_id;
}
void OAICsv_in_app_voice::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICsv_in_app_voice::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICsv_in_app_voice::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICsv_in_app_voice::getClientRef() const {
    return m_client_ref;
}
void OAICsv_in_app_voice::setClientRef(const QString &client_ref) {
    m_client_ref = client_ref;
    m_client_ref_isSet = true;
}

bool OAICsv_in_app_voice::is_client_ref_Set() const{
    return m_client_ref_isSet;
}

bool OAICsv_in_app_voice::is_client_ref_Valid() const{
    return m_client_ref_isValid;
}

QString OAICsv_in_app_voice::getConversationId() const {
    return m_conversation_id;
}
void OAICsv_in_app_voice::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAICsv_in_app_voice::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAICsv_in_app_voice::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAICsv_in_app_voice::getCurrency() const {
    return m_currency;
}
void OAICsv_in_app_voice::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_in_app_voice::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_in_app_voice::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_in_app_voice::getDateEnd() const {
    return m_date_end;
}
void OAICsv_in_app_voice::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICsv_in_app_voice::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICsv_in_app_voice::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAICsv_in_app_voice::getDateStart() const {
    return m_date_start;
}
void OAICsv_in_app_voice::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICsv_in_app_voice::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICsv_in_app_voice::is_date_start_Valid() const{
    return m_date_start_isValid;
}

qint32 OAICsv_in_app_voice::getDuration() const {
    return m_duration;
}
void OAICsv_in_app_voice::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICsv_in_app_voice::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICsv_in_app_voice::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAICsv_in_app_voice::getId() const {
    return m_id;
}
void OAICsv_in_app_voice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICsv_in_app_voice::is_id_Set() const{
    return m_id_isSet;
}

bool OAICsv_in_app_voice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICsv_in_app_voice::getLegId() const {
    return m_leg_id;
}
void OAICsv_in_app_voice::setLegId(const QString &leg_id) {
    m_leg_id = leg_id;
    m_leg_id_isSet = true;
}

bool OAICsv_in_app_voice::is_leg_id_Set() const{
    return m_leg_id_isSet;
}

bool OAICsv_in_app_voice::is_leg_id_Valid() const{
    return m_leg_id_isValid;
}

QString OAICsv_in_app_voice::getPrice() const {
    return m_price;
}
void OAICsv_in_app_voice::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICsv_in_app_voice::is_price_Set() const{
    return m_price_isSet;
}

bool OAICsv_in_app_voice::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICsv_in_app_voice::getRequestId() const {
    return m_request_id;
}
void OAICsv_in_app_voice::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICsv_in_app_voice::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICsv_in_app_voice::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICsv_in_app_voice::getStatus() const {
    return m_status;
}
void OAICsv_in_app_voice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICsv_in_app_voice::is_status_Set() const{
    return m_status_isSet;
}

bool OAICsv_in_app_voice::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICsv_in_app_voice::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_in_app_voice::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_in_app_voice::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_in_app_voice::is_total_price_Valid() const{
    return m_total_price_isValid;
}

QString OAICsv_in_app_voice::getUserId() const {
    return m_user_id;
}
void OAICsv_in_app_voice::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICsv_in_app_voice::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICsv_in_app_voice::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICsv_in_app_voice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_in_app_voice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
