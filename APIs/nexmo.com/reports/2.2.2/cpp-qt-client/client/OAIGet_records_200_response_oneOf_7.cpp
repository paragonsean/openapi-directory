/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_records_200_response_oneOf_7.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_records_200_response_oneOf_7::OAIGet_records_200_response_oneOf_7(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_records_200_response_oneOf_7::OAIGet_records_200_response_oneOf_7() {
    this->initializeModel();
}

OAIGet_records_200_response_oneOf_7::~OAIGet_records_200_response_oneOf_7() {}

void OAIGet_records_200_response_oneOf_7::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_ids_not_found_isSet = false;
    m_ids_not_found_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_status_isSet = false;
    m_request_status_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_include_message_isSet = false;
    m_include_message_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_show_concatenated_isSet = false;
    m_show_concatenated_isValid = false;
}

void OAIGet_records_200_response_oneOf_7::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_records_200_response_oneOf_7::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_ids_not_found_isValid = ::OpenAPI::fromJsonValue(m_ids_not_found, json[QString("ids_not_found")]);
    m_ids_not_found_isSet = !json[QString("ids_not_found")].isNull() && m_ids_not_found_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("received_at")]);
    m_received_at_isSet = !json[QString("received_at")].isNull() && m_received_at_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_status_isValid = ::OpenAPI::fromJsonValue(m_request_status, json[QString("request_status")]);
    m_request_status_isSet = !json[QString("request_status")].isNull() && m_request_status_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_include_message_isValid = ::OpenAPI::fromJsonValue(m_include_message, json[QString("include_message")]);
    m_include_message_isSet = !json[QString("include_message")].isNull() && m_include_message_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("items_count")]);
    m_items_count_isSet = !json[QString("items_count")].isNull() && m_items_count_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_show_concatenated_isValid = ::OpenAPI::fromJsonValue(m_show_concatenated, json[QString("show_concatenated")]);
    m_show_concatenated_isSet = !json[QString("show_concatenated")].isNull() && m_show_concatenated_isValid;
}

QString OAIGet_records_200_response_oneOf_7::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_records_200_response_oneOf_7::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_ids_not_found_isSet) {
        obj.insert(QString("ids_not_found"), ::OpenAPI::toJsonValue(m_ids_not_found));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("received_at"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_status.isSet()) {
        obj.insert(QString("request_status"), ::OpenAPI::toJsonValue(m_request_status));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_include_message_isSet) {
        obj.insert(QString("include_message"), ::OpenAPI::toJsonValue(m_include_message));
    }
    if (m_items_count_isSet) {
        obj.insert(QString("items_count"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_show_concatenated_isSet) {
        obj.insert(QString("show_concatenated"), ::OpenAPI::toJsonValue(m_show_concatenated));
    }
    return obj;
}

OAIReport_response_top_level__links OAIGet_records_200_response_oneOf_7::getLinks() const {
    return m__links;
}
void OAIGet_records_200_response_oneOf_7::setLinks(const OAIReport_response_top_level__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getAccountId() const {
    return m_account_id;
}
void OAIGet_records_200_response_oneOf_7::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getCurrency() const {
    return m_currency;
}
void OAIGet_records_200_response_oneOf_7::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getIdsNotFound() const {
    return m_ids_not_found;
}
void OAIGet_records_200_response_oneOf_7::setIdsNotFound(const QString &ids_not_found) {
    m_ids_not_found = ids_not_found;
    m_ids_not_found_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_ids_not_found_Set() const{
    return m_ids_not_found_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_ids_not_found_Valid() const{
    return m_ids_not_found_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getPrice() const {
    return m_price;
}
void OAIGet_records_200_response_oneOf_7::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_price_Valid() const{
    return m_price_isValid;
}

QDate OAIGet_records_200_response_oneOf_7::getReceivedAt() const {
    return m_received_at;
}
void OAIGet_records_200_response_oneOf_7::setReceivedAt(const QDate &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_received_at_Valid() const{
    return m_received_at_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getRequestId() const {
    return m_request_id;
}
void OAIGet_records_200_response_oneOf_7::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequest_status OAIGet_records_200_response_oneOf_7::getRequestStatus() const {
    return m_request_status;
}
void OAIGet_records_200_response_oneOf_7::setRequestStatus(const OAIRequest_status &request_status) {
    m_request_status = request_status;
    m_request_status_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_request_status_Set() const{
    return m_request_status_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_request_status_Valid() const{
    return m_request_status_isValid;
}

QString OAIGet_records_200_response_oneOf_7::getDirection() const {
    return m_direction;
}
void OAIGet_records_200_response_oneOf_7::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIGet_records_200_response_oneOf_7::isIncludeMessage() const {
    return m_include_message;
}
void OAIGet_records_200_response_oneOf_7::setIncludeMessage(const bool &include_message) {
    m_include_message = include_message;
    m_include_message_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_include_message_Set() const{
    return m_include_message_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_include_message_Valid() const{
    return m_include_message_isValid;
}

qint32 OAIGet_records_200_response_oneOf_7::getItemsCount() const {
    return m_items_count;
}
void OAIGet_records_200_response_oneOf_7::setItemsCount(const qint32 &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_items_count_Valid() const{
    return m_items_count_isValid;
}

OAIProduct_messages OAIGet_records_200_response_oneOf_7::getProduct() const {
    return m_product;
}
void OAIGet_records_200_response_oneOf_7::setProduct(const OAIProduct_messages &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_product_Set() const{
    return m_product_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_product_Valid() const{
    return m_product_isValid;
}

QList<OAICsv_messages_outbound> OAIGet_records_200_response_oneOf_7::getRecords() const {
    return m_records;
}
void OAIGet_records_200_response_oneOf_7::setRecords(const QList<OAICsv_messages_outbound> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_records_Set() const{
    return m_records_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_records_Valid() const{
    return m_records_isValid;
}

bool OAIGet_records_200_response_oneOf_7::isShowConcatenated() const {
    return m_show_concatenated;
}
void OAIGet_records_200_response_oneOf_7::setShowConcatenated(const bool &show_concatenated) {
    m_show_concatenated = show_concatenated;
    m_show_concatenated_isSet = true;
}

bool OAIGet_records_200_response_oneOf_7::is_show_concatenated_Set() const{
    return m_show_concatenated_isSet;
}

bool OAIGet_records_200_response_oneOf_7::is_show_concatenated_Valid() const{
    return m_show_concatenated_isValid;
}

bool OAIGet_records_200_response_oneOf_7::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids_not_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_concatenated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_records_200_response_oneOf_7::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
