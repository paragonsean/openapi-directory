/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_ni.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_ni::OAICsv_ni(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_ni::OAICsv_ni() {
    this->initializeModel();
}

OAICsv_ni::~OAICsv_ni() {}

void OAICsv_ni::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_received_isSet = false;
    m_date_received_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_ported_isSet = false;
    m_ported_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_reachable_isSet = false;
    m_reachable_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAICsv_ni::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_ni::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_received_isValid = ::OpenAPI::fromJsonValue(m_date_received, json[QString("date_received")]);
    m_date_received_isSet = !json[QString("date_received")].isNull() && m_date_received_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("network_name")]);
    m_network_name_isSet = !json[QString("network_name")].isNull() && m_network_name_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("network_type")]);
    m_network_type_isSet = !json[QString("network_type")].isNull() && m_network_type_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_ported_isValid = ::OpenAPI::fromJsonValue(m_ported, json[QString("ported")]);
    m_ported_isSet = !json[QString("ported")].isNull() && m_ported_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_reachable_isValid = ::OpenAPI::fromJsonValue(m_reachable, json[QString("reachable")]);
    m_reachable_isSet = !json[QString("reachable")].isNull() && m_reachable_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("response_code")]);
    m_response_code_isSet = !json[QString("response_code")].isNull() && m_response_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAICsv_ni::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_ni::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_received_isSet) {
        obj.insert(QString("date_received"), ::OpenAPI::toJsonValue(m_date_received));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("network_name"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("network_type"), ::OpenAPI::toJsonValue(m_network_type));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_ported_isSet) {
        obj.insert(QString("ported"), ::OpenAPI::toJsonValue(m_ported));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_reachable_isSet) {
        obj.insert(QString("reachable"), ::OpenAPI::toJsonValue(m_reachable));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("response_code"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAICsv_ni::getAccountId() const {
    return m_account_id;
}
void OAICsv_ni::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_ni::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_ni::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICsv_ni::getCountry() const {
    return m_country;
}
void OAICsv_ni::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICsv_ni::is_country_Set() const{
    return m_country_isSet;
}

bool OAICsv_ni::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICsv_ni::getCountryName() const {
    return m_country_name;
}
void OAICsv_ni::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAICsv_ni::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAICsv_ni::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAICsv_ni::getCurrency() const {
    return m_currency;
}
void OAICsv_ni::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_ni::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_ni::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_ni::getDateReceived() const {
    return m_date_received;
}
void OAICsv_ni::setDateReceived(const QDate &date_received) {
    m_date_received = date_received;
    m_date_received_isSet = true;
}

bool OAICsv_ni::is_date_received_Set() const{
    return m_date_received_isSet;
}

bool OAICsv_ni::is_date_received_Valid() const{
    return m_date_received_isValid;
}

QString OAICsv_ni::getFirstName() const {
    return m_first_name;
}
void OAICsv_ni::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICsv_ni::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICsv_ni::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICsv_ni::getLastName() const {
    return m_last_name;
}
void OAICsv_ni::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICsv_ni::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICsv_ni::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAICsv_ni::getNetwork() const {
    return m_network;
}
void OAICsv_ni::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICsv_ni::is_network_Set() const{
    return m_network_isSet;
}

bool OAICsv_ni::is_network_Valid() const{
    return m_network_isValid;
}

QString OAICsv_ni::getNetworkName() const {
    return m_network_name;
}
void OAICsv_ni::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAICsv_ni::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAICsv_ni::is_network_name_Valid() const{
    return m_network_name_isValid;
}

QString OAICsv_ni::getNetworkType() const {
    return m_network_type;
}
void OAICsv_ni::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAICsv_ni::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAICsv_ni::is_network_type_Valid() const{
    return m_network_type_isValid;
}

QString OAICsv_ni::getNumber() const {
    return m_number;
}
void OAICsv_ni::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICsv_ni::is_number_Set() const{
    return m_number_isSet;
}

bool OAICsv_ni::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICsv_ni::getPorted() const {
    return m_ported;
}
void OAICsv_ni::setPorted(const QString &ported) {
    m_ported = ported;
    m_ported_isSet = true;
}

bool OAICsv_ni::is_ported_Set() const{
    return m_ported_isSet;
}

bool OAICsv_ni::is_ported_Valid() const{
    return m_ported_isValid;
}

QString OAICsv_ni::getProductType() const {
    return m_product_type;
}
void OAICsv_ni::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAICsv_ni::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAICsv_ni::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAICsv_ni::getReachable() const {
    return m_reachable;
}
void OAICsv_ni::setReachable(const QString &reachable) {
    m_reachable = reachable;
    m_reachable_isSet = true;
}

bool OAICsv_ni::is_reachable_Set() const{
    return m_reachable_isSet;
}

bool OAICsv_ni::is_reachable_Valid() const{
    return m_reachable_isValid;
}

QString OAICsv_ni::getRequestId() const {
    return m_request_id;
}
void OAICsv_ni::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICsv_ni::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICsv_ni::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICsv_ni::getResponseCode() const {
    return m_response_code;
}
void OAICsv_ni::setResponseCode(const QString &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAICsv_ni::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAICsv_ni::is_response_code_Valid() const{
    return m_response_code_isValid;
}

QString OAICsv_ni::getStatus() const {
    return m_status;
}
void OAICsv_ni::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICsv_ni::is_status_Set() const{
    return m_status_isSet;
}

bool OAICsv_ni::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICsv_ni::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_ni::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_ni::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_ni::is_total_price_Valid() const{
    return m_total_price_isValid;
}

QString OAICsv_ni::getRValid() const {
    return m_r_valid;
}
void OAICsv_ni::setRValid(const QString &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAICsv_ni::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAICsv_ni::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAICsv_ni::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_ni::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
