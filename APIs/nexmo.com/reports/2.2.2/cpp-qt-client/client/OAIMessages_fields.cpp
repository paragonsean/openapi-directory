/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_fields::OAIMessages_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_fields::OAIMessages_fields() {
    this->initializeModel();
}

OAIMessages_fields::~OAIMessages_fields() {}

void OAIMessages_fields::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_include_message_isSet = false;
    m_include_message_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessages_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_fields::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_include_message_isValid = ::OpenAPI::fromJsonValue(m_include_message, json[QString("include_message")]);
    m_include_message_isSet = !json[QString("include_message")].isNull() && m_include_message_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessages_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_include_message_isSet) {
        obj.insert(QString("include_message"), ::OpenAPI::toJsonValue(m_include_message));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

OAIDirection OAIMessages_fields::getDirection() const {
    return m_direction;
}
void OAIMessages_fields::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIMessages_fields::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIMessages_fields::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIMessages_fields::getFrom() const {
    return m_from;
}
void OAIMessages_fields::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessages_fields::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessages_fields::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessages_fields::getId() const {
    return m_id;
}
void OAIMessages_fields::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessages_fields::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessages_fields::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMessages_fields::isIncludeMessage() const {
    return m_include_message;
}
void OAIMessages_fields::setIncludeMessage(const bool &include_message) {
    m_include_message = include_message;
    m_include_message_isSet = true;
}

bool OAIMessages_fields::is_include_message_Set() const{
    return m_include_message_isSet;
}

bool OAIMessages_fields::is_include_message_Valid() const{
    return m_include_message_isValid;
}

OAIProduct_messages OAIMessages_fields::getProduct() const {
    return m_product;
}
void OAIMessages_fields::setProduct(const OAIProduct_messages &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIMessages_fields::is_product_Set() const{
    return m_product_isSet;
}

bool OAIMessages_fields::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIMessages_fields::getTo() const {
    return m_to;
}
void OAIMessages_fields::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessages_fields::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessages_fields::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessages_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_direction_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
