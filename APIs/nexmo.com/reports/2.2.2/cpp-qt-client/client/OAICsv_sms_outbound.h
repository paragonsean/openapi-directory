/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICsv_sms_outbound.h
 *
 * Outbound SMS
 */

#ifndef OAICsv_sms_outbound_H
#define OAICsv_sms_outbound_H

#include <QJsonObject>

#include "OAIDirection.h"
#include "OAISms_status.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICsv_sms_outbound : public OAIObject {
public:
    OAICsv_sms_outbound();
    OAICsv_sms_outbound(QString json);
    ~OAICsv_sms_outbound() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getClientRef() const;
    void setClientRef(const QString &client_ref);
    bool is_client_ref_Set() const;
    bool is_client_ref_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCountryName() const;
    void setCountryName(const QString &country_name);
    bool is_country_name_Set() const;
    bool is_country_name_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QDate getDateFinalized() const;
    void setDateFinalized(const QDate &date_finalized);
    bool is_date_finalized_Set() const;
    bool is_date_finalized_Valid() const;

    QDate getDateReceived() const;
    void setDateReceived(const QDate &date_received);
    bool is_date_received_Set() const;
    bool is_date_received_Valid() const;

    OAIDirection getDirection() const;
    void setDirection(const OAIDirection &direction);
    bool is_direction_Set() const;
    bool is_direction_Valid() const;

    QString getErrorCode() const;
    void setErrorCode(const QString &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorCodeDescription() const;
    void setErrorCodeDescription(const QString &error_code_description);
    bool is_error_code_description_Set() const;
    bool is_error_code_description_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    qint32 getLatency() const;
    void setLatency(const qint32 &latency);
    bool is_latency_Set() const;
    bool is_latency_Valid() const;

    QString getMessageBody() const;
    void setMessageBody(const QString &message_body);
    bool is_message_body_Set() const;
    bool is_message_body_Valid() const;

    QString getMessageId() const;
    void setMessageId(const QString &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getNetworkName() const;
    void setNetworkName(const QString &network_name);
    bool is_network_name_Set() const;
    bool is_network_name_Valid() const;

    OAISms_status getStatus() const;
    void setStatus(const OAISms_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getTotalPrice() const;
    void setTotalPrice(const QString &total_price);
    bool is_total_price_Set() const;
    bool is_total_price_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_client_ref;
    bool m_client_ref_isSet;
    bool m_client_ref_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_country_name;
    bool m_country_name_isSet;
    bool m_country_name_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QDate m_date_finalized;
    bool m_date_finalized_isSet;
    bool m_date_finalized_isValid;

    QDate m_date_received;
    bool m_date_received_isSet;
    bool m_date_received_isValid;

    OAIDirection m_direction;
    bool m_direction_isSet;
    bool m_direction_isValid;

    QString m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_code_description;
    bool m_error_code_description_isSet;
    bool m_error_code_description_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    qint32 m_latency;
    bool m_latency_isSet;
    bool m_latency_isValid;

    QString m_message_body;
    bool m_message_body_isSet;
    bool m_message_body_isValid;

    QString m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_network_name;
    bool m_network_name_isSet;
    bool m_network_name_isValid;

    OAISms_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_total_price;
    bool m_total_price_isSet;
    bool m_total_price_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICsv_sms_outbound)

#endif // OAICsv_sms_outbound_H
