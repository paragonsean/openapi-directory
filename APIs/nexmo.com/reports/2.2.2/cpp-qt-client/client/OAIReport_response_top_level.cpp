/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_response_top_level.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_response_top_level::OAIReport_response_top_level(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_response_top_level::OAIReport_response_top_level() {
    this->initializeModel();
}

OAIReport_response_top_level::~OAIReport_response_top_level() {}

void OAIReport_response_top_level::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_ids_not_found_isSet = false;
    m_ids_not_found_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_status_isSet = false;
    m_request_status_isValid = false;
}

void OAIReport_response_top_level::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_response_top_level::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_ids_not_found_isValid = ::OpenAPI::fromJsonValue(m_ids_not_found, json[QString("ids_not_found")]);
    m_ids_not_found_isSet = !json[QString("ids_not_found")].isNull() && m_ids_not_found_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("received_at")]);
    m_received_at_isSet = !json[QString("received_at")].isNull() && m_received_at_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_status_isValid = ::OpenAPI::fromJsonValue(m_request_status, json[QString("request_status")]);
    m_request_status_isSet = !json[QString("request_status")].isNull() && m_request_status_isValid;
}

QString OAIReport_response_top_level::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_response_top_level::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_ids_not_found_isSet) {
        obj.insert(QString("ids_not_found"), ::OpenAPI::toJsonValue(m_ids_not_found));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("received_at"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_status.isSet()) {
        obj.insert(QString("request_status"), ::OpenAPI::toJsonValue(m_request_status));
    }
    return obj;
}

OAIReport_response_top_level__links OAIReport_response_top_level::getLinks() const {
    return m__links;
}
void OAIReport_response_top_level::setLinks(const OAIReport_response_top_level__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIReport_response_top_level::is__links_Set() const{
    return m__links_isSet;
}

bool OAIReport_response_top_level::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIReport_response_top_level::getAccountId() const {
    return m_account_id;
}
void OAIReport_response_top_level::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIReport_response_top_level::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIReport_response_top_level::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIReport_response_top_level::getCurrency() const {
    return m_currency;
}
void OAIReport_response_top_level::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIReport_response_top_level::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIReport_response_top_level::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIReport_response_top_level::getIdsNotFound() const {
    return m_ids_not_found;
}
void OAIReport_response_top_level::setIdsNotFound(const QString &ids_not_found) {
    m_ids_not_found = ids_not_found;
    m_ids_not_found_isSet = true;
}

bool OAIReport_response_top_level::is_ids_not_found_Set() const{
    return m_ids_not_found_isSet;
}

bool OAIReport_response_top_level::is_ids_not_found_Valid() const{
    return m_ids_not_found_isValid;
}

QString OAIReport_response_top_level::getPrice() const {
    return m_price;
}
void OAIReport_response_top_level::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIReport_response_top_level::is_price_Set() const{
    return m_price_isSet;
}

bool OAIReport_response_top_level::is_price_Valid() const{
    return m_price_isValid;
}

QDate OAIReport_response_top_level::getReceivedAt() const {
    return m_received_at;
}
void OAIReport_response_top_level::setReceivedAt(const QDate &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIReport_response_top_level::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIReport_response_top_level::is_received_at_Valid() const{
    return m_received_at_isValid;
}

QString OAIReport_response_top_level::getRequestId() const {
    return m_request_id;
}
void OAIReport_response_top_level::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIReport_response_top_level::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIReport_response_top_level::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRequest_status OAIReport_response_top_level::getRequestStatus() const {
    return m_request_status;
}
void OAIReport_response_top_level::setRequestStatus(const OAIRequest_status &request_status) {
    m_request_status = request_status;
    m_request_status_isSet = true;
}

bool OAIReport_response_top_level::is_request_status_Set() const{
    return m_request_status_isSet;
}

bool OAIReport_response_top_level::is_request_status_Valid() const{
    return m_request_status_isValid;
}

bool OAIReport_response_top_level::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids_not_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_response_top_level::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
