/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVERIFY_API.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVERIFY_API::OAIVERIFY_API(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVERIFY_API::OAIVERIFY_API() {
    this->initializeModel();
}

OAIVERIFY_API::~OAIVERIFY_API() {}

void OAIVERIFY_API::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_include_subaccounts_isSet = false;
    m_include_subaccounts_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIVERIFY_API::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVERIFY_API::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_include_subaccounts_isValid = ::OpenAPI::fromJsonValue(m_include_subaccounts, json[QString("include_subaccounts")]);
    m_include_subaccounts_isSet = !json[QString("include_subaccounts")].isNull() && m_include_subaccounts_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIVERIFY_API::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVERIFY_API::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_include_subaccounts_isSet) {
        obj.insert(QString("include_subaccounts"), ::OpenAPI::toJsonValue(m_include_subaccounts));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIVERIFY_API::getAccountId() const {
    return m_account_id;
}
void OAIVERIFY_API::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIVERIFY_API::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIVERIFY_API::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIVERIFY_API::getCallbackUrl() const {
    return m_callback_url;
}
void OAIVERIFY_API::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIVERIFY_API::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIVERIFY_API::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDate OAIVERIFY_API::getDateEnd() const {
    return m_date_end;
}
void OAIVERIFY_API::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAIVERIFY_API::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAIVERIFY_API::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAIVERIFY_API::getDateStart() const {
    return m_date_start;
}
void OAIVERIFY_API::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAIVERIFY_API::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAIVERIFY_API::is_date_start_Valid() const{
    return m_date_start_isValid;
}

bool OAIVERIFY_API::isIncludeSubaccounts() const {
    return m_include_subaccounts;
}
void OAIVERIFY_API::setIncludeSubaccounts(const bool &include_subaccounts) {
    m_include_subaccounts = include_subaccounts;
    m_include_subaccounts_isSet = true;
}

bool OAIVERIFY_API::is_include_subaccounts_Set() const{
    return m_include_subaccounts_isSet;
}

bool OAIVERIFY_API::is_include_subaccounts_Valid() const{
    return m_include_subaccounts_isValid;
}

OAIProduct_verify OAIVERIFY_API::getProduct() const {
    return m_product;
}
void OAIVERIFY_API::setProduct(const OAIProduct_verify &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIVERIFY_API::is_product_Set() const{
    return m_product_isSet;
}

bool OAIVERIFY_API::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIVERIFY_API::getNetwork() const {
    return m_network;
}
void OAIVERIFY_API::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIVERIFY_API::is_network_Set() const{
    return m_network_isSet;
}

bool OAIVERIFY_API::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIVERIFY_API::getTo() const {
    return m_to;
}
void OAIVERIFY_API::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIVERIFY_API::is_to_Set() const{
    return m_to_isSet;
}

bool OAIVERIFY_API::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIVERIFY_API::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVERIFY_API::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
