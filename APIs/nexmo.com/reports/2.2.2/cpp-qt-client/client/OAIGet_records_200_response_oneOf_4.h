/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_records_200_response_oneOf_4.h
 *
 * 
 */

#ifndef OAIGet_records_200_response_oneOf_4_H
#define OAIGet_records_200_response_oneOf_4_H

#include <QJsonObject>

#include "OAICsv_websockets.h"
#include "OAIProduct_websocket.h"
#include "OAIReport_response_top_level__links.h"
#include "OAIRequest_status.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReport_response_top_level__links;
class OAICsv_websockets;

class OAIGet_records_200_response_oneOf_4 : public OAIObject {
public:
    OAIGet_records_200_response_oneOf_4();
    OAIGet_records_200_response_oneOf_4(QString json);
    ~OAIGet_records_200_response_oneOf_4() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIReport_response_top_level__links getLinks() const;
    void setLinks(const OAIReport_response_top_level__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getIdsNotFound() const;
    void setIdsNotFound(const QString &ids_not_found);
    bool is_ids_not_found_Set() const;
    bool is_ids_not_found_Valid() const;

    QString getPrice() const;
    void setPrice(const QString &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QDate getReceivedAt() const;
    void setReceivedAt(const QDate &received_at);
    bool is_received_at_Set() const;
    bool is_received_at_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    OAIRequest_status getRequestStatus() const;
    void setRequestStatus(const OAIRequest_status &request_status);
    bool is_request_status_Set() const;
    bool is_request_status_Valid() const;

    qint32 getItemsCount() const;
    void setItemsCount(const qint32 &items_count);
    bool is_items_count_Set() const;
    bool is_items_count_Valid() const;

    OAIProduct_websocket getProduct() const;
    void setProduct(const OAIProduct_websocket &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    QList<OAICsv_websockets> getRecords() const;
    void setRecords(const QList<OAICsv_websockets> &records);
    bool is_records_Set() const;
    bool is_records_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIReport_response_top_level__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_ids_not_found;
    bool m_ids_not_found_isSet;
    bool m_ids_not_found_isValid;

    QString m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QDate m_received_at;
    bool m_received_at_isSet;
    bool m_received_at_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    OAIRequest_status m_request_status;
    bool m_request_status_isSet;
    bool m_request_status_isValid;

    qint32 m_items_count;
    bool m_items_count_isSet;
    bool m_items_count_isValid;

    OAIProduct_websocket m_product;
    bool m_product_isSet;
    bool m_product_isValid;

    QList<OAICsv_websockets> m_records;
    bool m_records_isSet;
    bool m_records_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_records_200_response_oneOf_4)

#endif // OAIGet_records_200_response_oneOf_4_H
