/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_records_422_response_oneOf_invalid_parameters_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_records_422_response_oneOf_invalid_parameters_inner::OAIGet_records_422_response_oneOf_invalid_parameters_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_records_422_response_oneOf_invalid_parameters_inner::OAIGet_records_422_response_oneOf_invalid_parameters_inner() {
    this->initializeModel();
}

OAIGet_records_422_response_oneOf_invalid_parameters_inner::~OAIGet_records_422_response_oneOf_invalid_parameters_inner() {}

void OAIGet_records_422_response_oneOf_invalid_parameters_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIGet_records_422_response_oneOf_invalid_parameters_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_records_422_response_oneOf_invalid_parameters_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIGet_records_422_response_oneOf_invalid_parameters_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_records_422_response_oneOf_invalid_parameters_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIGet_records_422_response_oneOf_invalid_parameters_inner::getName() const {
    return m_name;
}
void OAIGet_records_422_response_oneOf_invalid_parameters_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGet_records_422_response_oneOf_invalid_parameters_inner::getReason() const {
    return m_reason;
}
void OAIGet_records_422_response_oneOf_invalid_parameters_inner::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_records_422_response_oneOf_invalid_parameters_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
