/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownload_report_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownload_report_200_response::OAIDownload_report_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownload_report_200_response::OAIDownload_report_200_response() {
    this->initializeModel();
}

OAIDownload_report_200_response::~OAIDownload_report_200_response() {}

void OAIDownload_report_200_response::initializeModel() {

    m_report_isSet = false;
    m_report_isValid = false;
}

void OAIDownload_report_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownload_report_200_response::fromJsonObject(QJsonObject json) {

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;
}

QString OAIDownload_report_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownload_report_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_report.size() > 0) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    return obj;
}

QList<OAIDownload_report_200_response_report_inner> OAIDownload_report_200_response::getReport() const {
    return m_report;
}
void OAIDownload_report_200_response::setReport(const QList<OAIDownload_report_200_response_report_inner> &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIDownload_report_200_response::is_report_Set() const{
    return m_report_isSet;
}

bool OAIDownload_report_200_response::is_report_Valid() const{
    return m_report_isValid;
}

bool OAIDownload_report_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownload_report_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
