/**
 * Reports API
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 
 *
 * The version of the OpenAPI document: 2.2.2
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv_asr.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv_asr::OAICsv_asr(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv_asr::OAICsv_asr() {
    this->initializeModel();
}

OAICsv_asr::~OAICsv_asr() {}

void OAICsv_asr::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_call_date_start_isSet = false;
    m_call_date_start_isValid = false;

    m_call_id_isSet = false;
    m_call_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAICsv_asr::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv_asr::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_call_date_start_isValid = ::OpenAPI::fromJsonValue(m_call_date_start, json[QString("call_date_start")]);
    m_call_date_start_isSet = !json[QString("call_date_start")].isNull() && m_call_date_start_isValid;

    m_call_id_isValid = ::OpenAPI::fromJsonValue(m_call_id, json[QString("call_id")]);
    m_call_id_isSet = !json[QString("call_id")].isNull() && m_call_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("status_description")]);
    m_status_description_isSet = !json[QString("status_description")].isNull() && m_status_description_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("total_price")]);
    m_total_price_isSet = !json[QString("total_price")].isNull() && m_total_price_isValid;
}

QString OAICsv_asr::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv_asr::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_call_date_start_isSet) {
        obj.insert(QString("call_date_start"), ::OpenAPI::toJsonValue(m_call_date_start));
    }
    if (m_call_id_isSet) {
        obj.insert(QString("call_id"), ::OpenAPI::toJsonValue(m_call_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_end_isSet) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("status_description"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_total_price_isSet) {
        obj.insert(QString("total_price"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

QString OAICsv_asr::getAccountId() const {
    return m_account_id;
}
void OAICsv_asr::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICsv_asr::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICsv_asr::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDate OAICsv_asr::getCallDateStart() const {
    return m_call_date_start;
}
void OAICsv_asr::setCallDateStart(const QDate &call_date_start) {
    m_call_date_start = call_date_start;
    m_call_date_start_isSet = true;
}

bool OAICsv_asr::is_call_date_start_Set() const{
    return m_call_date_start_isSet;
}

bool OAICsv_asr::is_call_date_start_Valid() const{
    return m_call_date_start_isValid;
}

QString OAICsv_asr::getCallId() const {
    return m_call_id;
}
void OAICsv_asr::setCallId(const QString &call_id) {
    m_call_id = call_id;
    m_call_id_isSet = true;
}

bool OAICsv_asr::is_call_id_Set() const{
    return m_call_id_isSet;
}

bool OAICsv_asr::is_call_id_Valid() const{
    return m_call_id_isValid;
}

QString OAICsv_asr::getCurrency() const {
    return m_currency;
}
void OAICsv_asr::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICsv_asr::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICsv_asr::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAICsv_asr::getDateEnd() const {
    return m_date_end;
}
void OAICsv_asr::setDateEnd(const QDate &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICsv_asr::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICsv_asr::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDate OAICsv_asr::getDateStart() const {
    return m_date_start;
}
void OAICsv_asr::setDateStart(const QDate &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICsv_asr::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICsv_asr::is_date_start_Valid() const{
    return m_date_start_isValid;
}

OAIDirection OAICsv_asr::getDirection() const {
    return m_direction;
}
void OAICsv_asr::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICsv_asr::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICsv_asr::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAICsv_asr::getDuration() const {
    return m_duration;
}
void OAICsv_asr::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICsv_asr::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICsv_asr::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAICsv_asr::getFrom() const {
    return m_from;
}
void OAICsv_asr::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICsv_asr::is_from_Set() const{
    return m_from_isSet;
}

bool OAICsv_asr::is_from_Valid() const{
    return m_from_isValid;
}

QString OAICsv_asr::getPrice() const {
    return m_price;
}
void OAICsv_asr::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICsv_asr::is_price_Set() const{
    return m_price_isSet;
}

bool OAICsv_asr::is_price_Valid() const{
    return m_price_isValid;
}

OAIAsr_status OAICsv_asr::getStatus() const {
    return m_status;
}
void OAICsv_asr::setStatus(const OAIAsr_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICsv_asr::is_status_Set() const{
    return m_status_isSet;
}

bool OAICsv_asr::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICsv_asr::getStatusDescription() const {
    return m_status_description;
}
void OAICsv_asr::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAICsv_asr::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAICsv_asr::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QString OAICsv_asr::getTo() const {
    return m_to;
}
void OAICsv_asr::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICsv_asr::is_to_Set() const{
    return m_to_isSet;
}

bool OAICsv_asr::is_to_Valid() const{
    return m_to_isValid;
}

QString OAICsv_asr::getTotalPrice() const {
    return m_total_price;
}
void OAICsv_asr::setTotalPrice(const QString &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAICsv_asr::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAICsv_asr::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAICsv_asr::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv_asr::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
