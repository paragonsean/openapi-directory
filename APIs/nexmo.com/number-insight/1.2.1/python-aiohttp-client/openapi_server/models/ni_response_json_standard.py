# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_basic_status import NiBasicStatus
from openapi_server.models.ni_caller_identity import NiCallerIdentity
from openapi_server.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_server.models.ni_initial_carrier_properties import NiInitialCarrierProperties
import re
from openapi_server import util


class NiResponseJsonStandard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, country_code_iso3: str=None, country_name: str=None, country_prefix: str=None, international_format_number: str=None, national_format_number: str=None, request_id: str=None, status: NiBasicStatus=None, status_message: str=None, caller_identity: NiCallerIdentity=None, caller_name: str=None, caller_type: str=None, current_carrier: NiCurrentCarrierProperties=None, first_name: str=None, last_name: str=None, original_carrier: NiInitialCarrierProperties=None, ported: str=None, refund_price: str=None, remaining_balance: str=None, request_price: str=None):
        """NiResponseJsonStandard - a model defined in OpenAPI

        :param country_code: The country_code of this NiResponseJsonStandard.
        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonStandard.
        :param country_name: The country_name of this NiResponseJsonStandard.
        :param country_prefix: The country_prefix of this NiResponseJsonStandard.
        :param international_format_number: The international_format_number of this NiResponseJsonStandard.
        :param national_format_number: The national_format_number of this NiResponseJsonStandard.
        :param request_id: The request_id of this NiResponseJsonStandard.
        :param status: The status of this NiResponseJsonStandard.
        :param status_message: The status_message of this NiResponseJsonStandard.
        :param caller_identity: The caller_identity of this NiResponseJsonStandard.
        :param caller_name: The caller_name of this NiResponseJsonStandard.
        :param caller_type: The caller_type of this NiResponseJsonStandard.
        :param current_carrier: The current_carrier of this NiResponseJsonStandard.
        :param first_name: The first_name of this NiResponseJsonStandard.
        :param last_name: The last_name of this NiResponseJsonStandard.
        :param original_carrier: The original_carrier of this NiResponseJsonStandard.
        :param ported: The ported of this NiResponseJsonStandard.
        :param refund_price: The refund_price of this NiResponseJsonStandard.
        :param remaining_balance: The remaining_balance of this NiResponseJsonStandard.
        :param request_price: The request_price of this NiResponseJsonStandard.
        """
        self.openapi_types = {
            'country_code': str,
            'country_code_iso3': str,
            'country_name': str,
            'country_prefix': str,
            'international_format_number': str,
            'national_format_number': str,
            'request_id': str,
            'status': NiBasicStatus,
            'status_message': str,
            'caller_identity': NiCallerIdentity,
            'caller_name': str,
            'caller_type': str,
            'current_carrier': NiCurrentCarrierProperties,
            'first_name': str,
            'last_name': str,
            'original_carrier': NiInitialCarrierProperties,
            'ported': str,
            'refund_price': str,
            'remaining_balance': str,
            'request_price': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'country_code_iso3': 'country_code_iso3',
            'country_name': 'country_name',
            'country_prefix': 'country_prefix',
            'international_format_number': 'international_format_number',
            'national_format_number': 'national_format_number',
            'request_id': 'request_id',
            'status': 'status',
            'status_message': 'status_message',
            'caller_identity': 'caller_identity',
            'caller_name': 'caller_name',
            'caller_type': 'caller_type',
            'current_carrier': 'current_carrier',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'original_carrier': 'original_carrier',
            'ported': 'ported',
            'refund_price': 'refund_price',
            'remaining_balance': 'remaining_balance',
            'request_price': 'request_price'
        }

        self._country_code = country_code
        self._country_code_iso3 = country_code_iso3
        self._country_name = country_name
        self._country_prefix = country_prefix
        self._international_format_number = international_format_number
        self._national_format_number = national_format_number
        self._request_id = request_id
        self._status = status
        self._status_message = status_message
        self._caller_identity = caller_identity
        self._caller_name = caller_name
        self._caller_type = caller_type
        self._current_carrier = current_carrier
        self._first_name = first_name
        self._last_name = last_name
        self._original_carrier = original_carrier
        self._ported = ported
        self._refund_price = refund_price
        self._remaining_balance = remaining_balance
        self._request_price = request_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseJsonStandard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseJsonStandard of this NiResponseJsonStandard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this NiResponseJsonStandard.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :return: The country_code of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this NiResponseJsonStandard.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :param country_code: The country_code of this NiResponseJsonStandard.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def country_code_iso3(self):
        """Gets the country_code_iso3 of this NiResponseJsonStandard.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :return: The country_code_iso3 of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._country_code_iso3

    @country_code_iso3.setter
    def country_code_iso3(self, country_code_iso3):
        """Sets the country_code_iso3 of this NiResponseJsonStandard.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonStandard.
        :type country_code_iso3: str
        """
        if country_code_iso3 is not None and not re.search(r'[A-Z]{3}', country_code_iso3):
            raise ValueError("Invalid value for `country_code_iso3`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._country_code_iso3 = country_code_iso3

    @property
    def country_name(self):
        """Gets the country_name of this NiResponseJsonStandard.

        The full name of the country that `number` is registered in.

        :return: The country_name of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this NiResponseJsonStandard.

        The full name of the country that `number` is registered in.

        :param country_name: The country_name of this NiResponseJsonStandard.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_prefix(self):
        """Gets the country_prefix of this NiResponseJsonStandard.

        The numeric prefix for the country that `number` is registered in.

        :return: The country_prefix of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this NiResponseJsonStandard.

        The numeric prefix for the country that `number` is registered in.

        :param country_prefix: The country_prefix of this NiResponseJsonStandard.
        :type country_prefix: str
        """

        self._country_prefix = country_prefix

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseJsonStandard.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseJsonStandard.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseJsonStandard.
        :type international_format_number: str
        """

        self._international_format_number = international_format_number

    @property
    def national_format_number(self):
        """Gets the national_format_number of this NiResponseJsonStandard.

        The `number` in your request in the format used by the country the number belongs to.

        :return: The national_format_number of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._national_format_number

    @national_format_number.setter
    def national_format_number(self, national_format_number):
        """Sets the national_format_number of this NiResponseJsonStandard.

        The `number` in your request in the format used by the country the number belongs to.

        :param national_format_number: The national_format_number of this NiResponseJsonStandard.
        :type national_format_number: str
        """

        self._national_format_number = national_format_number

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseJsonStandard.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseJsonStandard.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseJsonStandard.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this NiResponseJsonStandard.


        :return: The status of this NiResponseJsonStandard.
        :rtype: NiBasicStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NiResponseJsonStandard.


        :param status: The status of this NiResponseJsonStandard.
        :type status: NiBasicStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this NiResponseJsonStandard.

        The status description of your request.

        :return: The status_message of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this NiResponseJsonStandard.

        The status description of your request.

        :param status_message: The status_message of this NiResponseJsonStandard.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def caller_identity(self):
        """Gets the caller_identity of this NiResponseJsonStandard.


        :return: The caller_identity of this NiResponseJsonStandard.
        :rtype: NiCallerIdentity
        """
        return self._caller_identity

    @caller_identity.setter
    def caller_identity(self, caller_identity):
        """Sets the caller_identity of this NiResponseJsonStandard.


        :param caller_identity: The caller_identity of this NiResponseJsonStandard.
        :type caller_identity: NiCallerIdentity
        """

        self._caller_identity = caller_identity

    @property
    def caller_name(self):
        """Gets the caller_name of this NiResponseJsonStandard.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_name of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this NiResponseJsonStandard.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_name: The caller_name of this NiResponseJsonStandard.
        :type caller_name: str
        """

        self._caller_name = caller_name

    @property
    def caller_type(self):
        """Gets the caller_type of this NiResponseJsonStandard.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_type of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """Sets the caller_type of this NiResponseJsonStandard.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_type: The caller_type of this NiResponseJsonStandard.
        :type caller_type: str
        """
        allowed_values = ["business", "consumer", "unknown"]  # noqa: E501
        if caller_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_type` ({0}), must be one of {1}"
                .format(caller_type, allowed_values)
            )

        self._caller_type = caller_type

    @property
    def current_carrier(self):
        """Gets the current_carrier of this NiResponseJsonStandard.


        :return: The current_carrier of this NiResponseJsonStandard.
        :rtype: NiCurrentCarrierProperties
        """
        return self._current_carrier

    @current_carrier.setter
    def current_carrier(self, current_carrier):
        """Sets the current_carrier of this NiResponseJsonStandard.


        :param current_carrier: The current_carrier of this NiResponseJsonStandard.
        :type current_carrier: NiCurrentCarrierProperties
        """

        self._current_carrier = current_carrier

    @property
    def first_name(self):
        """Gets the first_name of this NiResponseJsonStandard.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The first_name of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NiResponseJsonStandard.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param first_name: The first_name of this NiResponseJsonStandard.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NiResponseJsonStandard.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The last_name of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NiResponseJsonStandard.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param last_name: The last_name of this NiResponseJsonStandard.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def original_carrier(self):
        """Gets the original_carrier of this NiResponseJsonStandard.


        :return: The original_carrier of this NiResponseJsonStandard.
        :rtype: NiInitialCarrierProperties
        """
        return self._original_carrier

    @original_carrier.setter
    def original_carrier(self, original_carrier):
        """Sets the original_carrier of this NiResponseJsonStandard.


        :param original_carrier: The original_carrier of this NiResponseJsonStandard.
        :type original_carrier: NiInitialCarrierProperties
        """

        self._original_carrier = original_carrier

    @property
    def ported(self):
        """Gets the ported of this NiResponseJsonStandard.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :return: The ported of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._ported

    @ported.setter
    def ported(self, ported):
        """Sets the ported of this NiResponseJsonStandard.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :param ported: The ported of this NiResponseJsonStandard.
        :type ported: str
        """
        allowed_values = [None,"unknown", "ported", "not_ported", "assumed_not_ported", "assumed_ported", "null"]  # noqa: E501
        if ported not in allowed_values:
            raise ValueError(
                "Invalid value for `ported` ({0}), must be one of {1}"
                .format(ported, allowed_values)
            )

        self._ported = ported

    @property
    def refund_price(self):
        """Gets the refund_price of this NiResponseJsonStandard.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :return: The refund_price of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._refund_price

    @refund_price.setter
    def refund_price(self, refund_price):
        """Sets the refund_price of this NiResponseJsonStandard.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :param refund_price: The refund_price of this NiResponseJsonStandard.
        :type refund_price: str
        """

        self._refund_price = refund_price

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this NiResponseJsonStandard.

        Your account balance in EUR after this request.

        :return: The remaining_balance of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this NiResponseJsonStandard.

        Your account balance in EUR after this request.

        :param remaining_balance: The remaining_balance of this NiResponseJsonStandard.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def request_price(self):
        """Gets the request_price of this NiResponseJsonStandard.

        The amount in EUR charged to your account.

        :return: The request_price of this NiResponseJsonStandard.
        :rtype: str
        """
        return self._request_price

    @request_price.setter
    def request_price(self, request_price):
        """Sets the request_price of this NiResponseJsonStandard.

        The amount in EUR charged to your account.

        :param request_price: The request_price of this NiResponseJsonStandard.
        :type request_price: str
        """

        self._request_price = request_price
