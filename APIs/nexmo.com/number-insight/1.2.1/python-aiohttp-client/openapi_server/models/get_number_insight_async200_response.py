# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_response_async import NiResponseAsync
from openapi_server.models.ni_standard_advanced_status import NiStandardAdvancedStatus
from openapi_server import util


class GetNumberInsightAsync200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_text: str=None, number: str=None, remaining_balance: str=None, request_id: str=None, request_price: str=None, status: NiStandardAdvancedStatus=None):
        """GetNumberInsightAsync200Response - a model defined in OpenAPI

        :param error_text: The error_text of this GetNumberInsightAsync200Response.
        :param number: The number of this GetNumberInsightAsync200Response.
        :param remaining_balance: The remaining_balance of this GetNumberInsightAsync200Response.
        :param request_id: The request_id of this GetNumberInsightAsync200Response.
        :param request_price: The request_price of this GetNumberInsightAsync200Response.
        :param status: The status of this GetNumberInsightAsync200Response.
        """
        self.openapi_types = {
            'error_text': str,
            'number': str,
            'remaining_balance': str,
            'request_id': str,
            'request_price': str,
            'status': NiStandardAdvancedStatus
        }

        self.attribute_map = {
            'error_text': 'error_text',
            'number': 'number',
            'remaining_balance': 'remaining_balance',
            'request_id': 'request_id',
            'request_price': 'request_price',
            'status': 'status'
        }

        self._error_text = error_text
        self._number = number
        self._remaining_balance = remaining_balance
        self._request_id = request_id
        self._request_price = request_price
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNumberInsightAsync200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getNumberInsightAsync_200_response of this GetNumberInsightAsync200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_text(self):
        """Gets the error_text of this GetNumberInsightAsync200Response.

        The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints

        :return: The error_text of this GetNumberInsightAsync200Response.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this GetNumberInsightAsync200Response.

        The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints

        :param error_text: The error_text of this GetNumberInsightAsync200Response.
        :type error_text: str
        """

        self._error_text = error_text

    @property
    def number(self):
        """Gets the number of this GetNumberInsightAsync200Response.

        The `number` in your request

        :return: The number of this GetNumberInsightAsync200Response.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GetNumberInsightAsync200Response.

        The `number` in your request

        :param number: The number of this GetNumberInsightAsync200Response.
        :type number: str
        """

        self._number = number

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this GetNumberInsightAsync200Response.

        Your account balance in EUR after this request.

        :return: The remaining_balance of this GetNumberInsightAsync200Response.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this GetNumberInsightAsync200Response.

        Your account balance in EUR after this request.

        :param remaining_balance: The remaining_balance of this GetNumberInsightAsync200Response.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def request_id(self):
        """Gets the request_id of this GetNumberInsightAsync200Response.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this GetNumberInsightAsync200Response.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GetNumberInsightAsync200Response.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this GetNumberInsightAsync200Response.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def request_price(self):
        """Gets the request_price of this GetNumberInsightAsync200Response.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :return: The request_price of this GetNumberInsightAsync200Response.
        :rtype: str
        """
        return self._request_price

    @request_price.setter
    def request_price(self, request_price):
        """Sets the request_price of this GetNumberInsightAsync200Response.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :param request_price: The request_price of this GetNumberInsightAsync200Response.
        :type request_price: str
        """

        self._request_price = request_price

    @property
    def status(self):
        """Gets the status of this GetNumberInsightAsync200Response.


        :return: The status of this GetNumberInsightAsync200Response.
        :rtype: NiStandardAdvancedStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetNumberInsightAsync200Response.


        :param status: The status of this GetNumberInsightAsync200Response.
        :type status: NiStandardAdvancedStatus
        """

        self._status = status
