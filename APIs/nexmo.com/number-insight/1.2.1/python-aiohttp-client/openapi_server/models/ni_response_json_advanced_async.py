# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_caller_identity import NiCallerIdentity
from openapi_server.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_server.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from openapi_server.models.ni_roaming import NiRoaming
from openapi_server.models.ni_standard_advanced_status import NiStandardAdvancedStatus
import re
from openapi_server import util


class NiResponseJsonAdvancedAsync(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_identity: NiCallerIdentity=None, country_code: str=None, country_code_iso3: str=None, country_name: str=None, country_prefix: str=None, current_carrier: NiCurrentCarrierProperties=None, international_format_number: str=None, lookup_outcome: int=None, lookup_outcome_message: str=None, national_format_number: str=None, original_carrier: NiInitialCarrierProperties=None, ported: str=None, reachable: str=None, refund_price: str=None, remaining_balance: str=None, request_id: str=None, request_price: str=None, roaming: NiRoaming=None, status: NiStandardAdvancedStatus=None, status_message: str=None, valid_number: str=None):
        """NiResponseJsonAdvancedAsync - a model defined in OpenAPI

        :param caller_identity: The caller_identity of this NiResponseJsonAdvancedAsync.
        :param country_code: The country_code of this NiResponseJsonAdvancedAsync.
        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonAdvancedAsync.
        :param country_name: The country_name of this NiResponseJsonAdvancedAsync.
        :param country_prefix: The country_prefix of this NiResponseJsonAdvancedAsync.
        :param current_carrier: The current_carrier of this NiResponseJsonAdvancedAsync.
        :param international_format_number: The international_format_number of this NiResponseJsonAdvancedAsync.
        :param lookup_outcome: The lookup_outcome of this NiResponseJsonAdvancedAsync.
        :param lookup_outcome_message: The lookup_outcome_message of this NiResponseJsonAdvancedAsync.
        :param national_format_number: The national_format_number of this NiResponseJsonAdvancedAsync.
        :param original_carrier: The original_carrier of this NiResponseJsonAdvancedAsync.
        :param ported: The ported of this NiResponseJsonAdvancedAsync.
        :param reachable: The reachable of this NiResponseJsonAdvancedAsync.
        :param refund_price: The refund_price of this NiResponseJsonAdvancedAsync.
        :param remaining_balance: The remaining_balance of this NiResponseJsonAdvancedAsync.
        :param request_id: The request_id of this NiResponseJsonAdvancedAsync.
        :param request_price: The request_price of this NiResponseJsonAdvancedAsync.
        :param roaming: The roaming of this NiResponseJsonAdvancedAsync.
        :param status: The status of this NiResponseJsonAdvancedAsync.
        :param status_message: The status_message of this NiResponseJsonAdvancedAsync.
        :param valid_number: The valid_number of this NiResponseJsonAdvancedAsync.
        """
        self.openapi_types = {
            'caller_identity': NiCallerIdentity,
            'country_code': str,
            'country_code_iso3': str,
            'country_name': str,
            'country_prefix': str,
            'current_carrier': NiCurrentCarrierProperties,
            'international_format_number': str,
            'lookup_outcome': int,
            'lookup_outcome_message': str,
            'national_format_number': str,
            'original_carrier': NiInitialCarrierProperties,
            'ported': str,
            'reachable': str,
            'refund_price': str,
            'remaining_balance': str,
            'request_id': str,
            'request_price': str,
            'roaming': NiRoaming,
            'status': NiStandardAdvancedStatus,
            'status_message': str,
            'valid_number': str
        }

        self.attribute_map = {
            'caller_identity': 'caller_identity',
            'country_code': 'country_code',
            'country_code_iso3': 'country_code_iso3',
            'country_name': 'country_name',
            'country_prefix': 'country_prefix',
            'current_carrier': 'current_carrier',
            'international_format_number': 'international_format_number',
            'lookup_outcome': 'lookup_outcome',
            'lookup_outcome_message': 'lookup_outcome_message',
            'national_format_number': 'national_format_number',
            'original_carrier': 'original_carrier',
            'ported': 'ported',
            'reachable': 'reachable',
            'refund_price': 'refund_price',
            'remaining_balance': 'remaining_balance',
            'request_id': 'request_id',
            'request_price': 'request_price',
            'roaming': 'roaming',
            'status': 'status',
            'status_message': 'status_message',
            'valid_number': 'valid_number'
        }

        self._caller_identity = caller_identity
        self._country_code = country_code
        self._country_code_iso3 = country_code_iso3
        self._country_name = country_name
        self._country_prefix = country_prefix
        self._current_carrier = current_carrier
        self._international_format_number = international_format_number
        self._lookup_outcome = lookup_outcome
        self._lookup_outcome_message = lookup_outcome_message
        self._national_format_number = national_format_number
        self._original_carrier = original_carrier
        self._ported = ported
        self._reachable = reachable
        self._refund_price = refund_price
        self._remaining_balance = remaining_balance
        self._request_id = request_id
        self._request_price = request_price
        self._roaming = roaming
        self._status = status
        self._status_message = status_message
        self._valid_number = valid_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseJsonAdvancedAsync':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseJsonAdvancedAsync of this NiResponseJsonAdvancedAsync.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_identity(self):
        """Gets the caller_identity of this NiResponseJsonAdvancedAsync.


        :return: The caller_identity of this NiResponseJsonAdvancedAsync.
        :rtype: NiCallerIdentity
        """
        return self._caller_identity

    @caller_identity.setter
    def caller_identity(self, caller_identity):
        """Sets the caller_identity of this NiResponseJsonAdvancedAsync.


        :param caller_identity: The caller_identity of this NiResponseJsonAdvancedAsync.
        :type caller_identity: NiCallerIdentity
        """

        self._caller_identity = caller_identity

    @property
    def country_code(self):
        """Gets the country_code of this NiResponseJsonAdvancedAsync.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :return: The country_code of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this NiResponseJsonAdvancedAsync.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :param country_code: The country_code of this NiResponseJsonAdvancedAsync.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def country_code_iso3(self):
        """Gets the country_code_iso3 of this NiResponseJsonAdvancedAsync.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :return: The country_code_iso3 of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._country_code_iso3

    @country_code_iso3.setter
    def country_code_iso3(self, country_code_iso3):
        """Sets the country_code_iso3 of this NiResponseJsonAdvancedAsync.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonAdvancedAsync.
        :type country_code_iso3: str
        """
        if country_code_iso3 is None:
            raise ValueError("Invalid value for `country_code_iso3`, must not be `None`")
        if country_code_iso3 is not None and not re.search(r'[A-Z]{3}', country_code_iso3):
            raise ValueError("Invalid value for `country_code_iso3`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._country_code_iso3 = country_code_iso3

    @property
    def country_name(self):
        """Gets the country_name of this NiResponseJsonAdvancedAsync.

        The full name of the country that `number` is registered in.

        :return: The country_name of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this NiResponseJsonAdvancedAsync.

        The full name of the country that `number` is registered in.

        :param country_name: The country_name of this NiResponseJsonAdvancedAsync.
        :type country_name: str
        """
        if country_name is None:
            raise ValueError("Invalid value for `country_name`, must not be `None`")

        self._country_name = country_name

    @property
    def country_prefix(self):
        """Gets the country_prefix of this NiResponseJsonAdvancedAsync.

        The numeric prefix for the country that `number` is registered in.

        :return: The country_prefix of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this NiResponseJsonAdvancedAsync.

        The numeric prefix for the country that `number` is registered in.

        :param country_prefix: The country_prefix of this NiResponseJsonAdvancedAsync.
        :type country_prefix: str
        """
        if country_prefix is None:
            raise ValueError("Invalid value for `country_prefix`, must not be `None`")

        self._country_prefix = country_prefix

    @property
    def current_carrier(self):
        """Gets the current_carrier of this NiResponseJsonAdvancedAsync.


        :return: The current_carrier of this NiResponseJsonAdvancedAsync.
        :rtype: NiCurrentCarrierProperties
        """
        return self._current_carrier

    @current_carrier.setter
    def current_carrier(self, current_carrier):
        """Sets the current_carrier of this NiResponseJsonAdvancedAsync.


        :param current_carrier: The current_carrier of this NiResponseJsonAdvancedAsync.
        :type current_carrier: NiCurrentCarrierProperties
        """

        self._current_carrier = current_carrier

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseJsonAdvancedAsync.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseJsonAdvancedAsync.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseJsonAdvancedAsync.
        :type international_format_number: str
        """
        if international_format_number is None:
            raise ValueError("Invalid value for `international_format_number`, must not be `None`")

        self._international_format_number = international_format_number

    @property
    def lookup_outcome(self):
        """Gets the lookup_outcome of this NiResponseJsonAdvancedAsync.

        Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed 

        :return: The lookup_outcome of this NiResponseJsonAdvancedAsync.
        :rtype: int
        """
        return self._lookup_outcome

    @lookup_outcome.setter
    def lookup_outcome(self, lookup_outcome):
        """Sets the lookup_outcome of this NiResponseJsonAdvancedAsync.

        Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed 

        :param lookup_outcome: The lookup_outcome of this NiResponseJsonAdvancedAsync.
        :type lookup_outcome: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if lookup_outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `lookup_outcome` ({0}), must be one of {1}"
                .format(lookup_outcome, allowed_values)
            )

        self._lookup_outcome = lookup_outcome

    @property
    def lookup_outcome_message(self):
        """Gets the lookup_outcome_message of this NiResponseJsonAdvancedAsync.

        Shows if all information about a phone number has been returned.

        :return: The lookup_outcome_message of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._lookup_outcome_message

    @lookup_outcome_message.setter
    def lookup_outcome_message(self, lookup_outcome_message):
        """Sets the lookup_outcome_message of this NiResponseJsonAdvancedAsync.

        Shows if all information about a phone number has been returned.

        :param lookup_outcome_message: The lookup_outcome_message of this NiResponseJsonAdvancedAsync.
        :type lookup_outcome_message: str
        """

        self._lookup_outcome_message = lookup_outcome_message

    @property
    def national_format_number(self):
        """Gets the national_format_number of this NiResponseJsonAdvancedAsync.

        The `number` in your request in the format used by the country the number belongs to.

        :return: The national_format_number of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._national_format_number

    @national_format_number.setter
    def national_format_number(self, national_format_number):
        """Sets the national_format_number of this NiResponseJsonAdvancedAsync.

        The `number` in your request in the format used by the country the number belongs to.

        :param national_format_number: The national_format_number of this NiResponseJsonAdvancedAsync.
        :type national_format_number: str
        """
        if national_format_number is None:
            raise ValueError("Invalid value for `national_format_number`, must not be `None`")

        self._national_format_number = national_format_number

    @property
    def original_carrier(self):
        """Gets the original_carrier of this NiResponseJsonAdvancedAsync.


        :return: The original_carrier of this NiResponseJsonAdvancedAsync.
        :rtype: NiInitialCarrierProperties
        """
        return self._original_carrier

    @original_carrier.setter
    def original_carrier(self, original_carrier):
        """Sets the original_carrier of this NiResponseJsonAdvancedAsync.


        :param original_carrier: The original_carrier of this NiResponseJsonAdvancedAsync.
        :type original_carrier: NiInitialCarrierProperties
        """

        self._original_carrier = original_carrier

    @property
    def ported(self):
        """Gets the ported of this NiResponseJsonAdvancedAsync.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :return: The ported of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._ported

    @ported.setter
    def ported(self, ported):
        """Sets the ported of this NiResponseJsonAdvancedAsync.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :param ported: The ported of this NiResponseJsonAdvancedAsync.
        :type ported: str
        """
        allowed_values = [None,"unknown", "ported", "not_ported", "assumed_not_ported", "assumed_ported", "null"]  # noqa: E501
        if ported not in allowed_values:
            raise ValueError(
                "Invalid value for `ported` ({0}), must be one of {1}"
                .format(ported, allowed_values)
            )

        self._ported = ported

    @property
    def reachable(self):
        """Gets the reachable of this NiResponseJsonAdvancedAsync.

        Can you call `number` now. This is applicable to mobile numbers only.

        :return: The reachable of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this NiResponseJsonAdvancedAsync.

        Can you call `number` now. This is applicable to mobile numbers only.

        :param reachable: The reachable of this NiResponseJsonAdvancedAsync.
        :type reachable: str
        """
        allowed_values = [None,"unknown", "reachable", "undeliverable", "absent", "bad_number", "blacklisted", "null"]  # noqa: E501
        if reachable not in allowed_values:
            raise ValueError(
                "Invalid value for `reachable` ({0}), must be one of {1}"
                .format(reachable, allowed_values)
            )

        self._reachable = reachable

    @property
    def refund_price(self):
        """Gets the refund_price of this NiResponseJsonAdvancedAsync.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :return: The refund_price of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._refund_price

    @refund_price.setter
    def refund_price(self, refund_price):
        """Sets the refund_price of this NiResponseJsonAdvancedAsync.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :param refund_price: The refund_price of this NiResponseJsonAdvancedAsync.
        :type refund_price: str
        """

        self._refund_price = refund_price

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this NiResponseJsonAdvancedAsync.

        Your account balance in EUR after this request.

        :return: The remaining_balance of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this NiResponseJsonAdvancedAsync.

        Your account balance in EUR after this request.

        :param remaining_balance: The remaining_balance of this NiResponseJsonAdvancedAsync.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseJsonAdvancedAsync.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseJsonAdvancedAsync.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseJsonAdvancedAsync.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def request_price(self):
        """Gets the request_price of this NiResponseJsonAdvancedAsync.

        The amount in EUR charged to your account.

        :return: The request_price of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._request_price

    @request_price.setter
    def request_price(self, request_price):
        """Sets the request_price of this NiResponseJsonAdvancedAsync.

        The amount in EUR charged to your account.

        :param request_price: The request_price of this NiResponseJsonAdvancedAsync.
        :type request_price: str
        """

        self._request_price = request_price

    @property
    def roaming(self):
        """Gets the roaming of this NiResponseJsonAdvancedAsync.


        :return: The roaming of this NiResponseJsonAdvancedAsync.
        :rtype: NiRoaming
        """
        return self._roaming

    @roaming.setter
    def roaming(self, roaming):
        """Sets the roaming of this NiResponseJsonAdvancedAsync.


        :param roaming: The roaming of this NiResponseJsonAdvancedAsync.
        :type roaming: NiRoaming
        """

        self._roaming = roaming

    @property
    def status(self):
        """Gets the status of this NiResponseJsonAdvancedAsync.


        :return: The status of this NiResponseJsonAdvancedAsync.
        :rtype: NiStandardAdvancedStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NiResponseJsonAdvancedAsync.


        :param status: The status of this NiResponseJsonAdvancedAsync.
        :type status: NiStandardAdvancedStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this NiResponseJsonAdvancedAsync.

        The status description of your request.

        :return: The status_message of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this NiResponseJsonAdvancedAsync.

        The status description of your request.

        :param status_message: The status_message of this NiResponseJsonAdvancedAsync.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message

    @property
    def valid_number(self):
        """Gets the valid_number of this NiResponseJsonAdvancedAsync.

        Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.

        :return: The valid_number of this NiResponseJsonAdvancedAsync.
        :rtype: str
        """
        return self._valid_number

    @valid_number.setter
    def valid_number(self, valid_number):
        """Sets the valid_number of this NiResponseJsonAdvancedAsync.

        Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.

        :param valid_number: The valid_number of this NiResponseJsonAdvancedAsync.
        :type valid_number: str
        """
        allowed_values = ["unknown", "valid", "not_valid", "inferred", "inferred_not_valid"]  # noqa: E501
        if valid_number not in allowed_values:
            raise ValueError(
                "Invalid value for `valid_number` ({0}), must be one of {1}"
                .format(valid_number, allowed_values)
            )

        self._valid_number = valid_number
