# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_server.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from openapi_server.models.ni_response_xml_advanced_caller_identity import NiResponseXmlAdvancedCallerIdentity
from openapi_server.models.ni_response_xml_advanced_error import NiResponseXmlAdvancedError
from openapi_server.models.ni_response_xml_advanced_local_number import NiResponseXmlAdvancedLocalNumber
from openapi_server.models.ni_response_xml_advanced_lookup_outcome import NiResponseXmlAdvancedLookupOutcome
from openapi_server.models.ni_response_xml_advanced_ported import NiResponseXmlAdvancedPorted
from openapi_server.models.ni_roaming import NiRoaming
from openapi_server import util


class NiResponseXmlAdvanced(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_identity: NiResponseXmlAdvancedCallerIdentity=None, caller_name: str=None, caller_type: str=None, current_carrier: NiCurrentCarrierProperties=None, error: NiResponseXmlAdvancedError=None, firs_name: str=None, international_format_number: str=None, ip_warnings: str=None, last_name: str=None, local_number: NiResponseXmlAdvancedLocalNumber=None, lookup_outcome: NiResponseXmlAdvancedLookupOutcome=None, original_carrier: NiInitialCarrierProperties=None, ported: NiResponseXmlAdvancedPorted=None, reachable: str=None, remaining_balance: str=None, request_id: str=None, request_price: str=None, roaming: NiRoaming=None, valid_number: str=None):
        """NiResponseXmlAdvanced - a model defined in OpenAPI

        :param caller_identity: The caller_identity of this NiResponseXmlAdvanced.
        :param caller_name: The caller_name of this NiResponseXmlAdvanced.
        :param caller_type: The caller_type of this NiResponseXmlAdvanced.
        :param current_carrier: The current_carrier of this NiResponseXmlAdvanced.
        :param error: The error of this NiResponseXmlAdvanced.
        :param firs_name: The firs_name of this NiResponseXmlAdvanced.
        :param international_format_number: The international_format_number of this NiResponseXmlAdvanced.
        :param ip_warnings: The ip_warnings of this NiResponseXmlAdvanced.
        :param last_name: The last_name of this NiResponseXmlAdvanced.
        :param local_number: The local_number of this NiResponseXmlAdvanced.
        :param lookup_outcome: The lookup_outcome of this NiResponseXmlAdvanced.
        :param original_carrier: The original_carrier of this NiResponseXmlAdvanced.
        :param ported: The ported of this NiResponseXmlAdvanced.
        :param reachable: The reachable of this NiResponseXmlAdvanced.
        :param remaining_balance: The remaining_balance of this NiResponseXmlAdvanced.
        :param request_id: The request_id of this NiResponseXmlAdvanced.
        :param request_price: The request_price of this NiResponseXmlAdvanced.
        :param roaming: The roaming of this NiResponseXmlAdvanced.
        :param valid_number: The valid_number of this NiResponseXmlAdvanced.
        """
        self.openapi_types = {
            'caller_identity': NiResponseXmlAdvancedCallerIdentity,
            'caller_name': str,
            'caller_type': str,
            'current_carrier': NiCurrentCarrierProperties,
            'error': NiResponseXmlAdvancedError,
            'firs_name': str,
            'international_format_number': str,
            'ip_warnings': str,
            'last_name': str,
            'local_number': NiResponseXmlAdvancedLocalNumber,
            'lookup_outcome': NiResponseXmlAdvancedLookupOutcome,
            'original_carrier': NiInitialCarrierProperties,
            'ported': NiResponseXmlAdvancedPorted,
            'reachable': str,
            'remaining_balance': str,
            'request_id': str,
            'request_price': str,
            'roaming': NiRoaming,
            'valid_number': str
        }

        self.attribute_map = {
            'caller_identity': 'caller_identity',
            'caller_name': 'caller_name',
            'caller_type': 'caller_type',
            'current_carrier': 'current_carrier',
            'error': 'error',
            'firs_name': 'firs_name',
            'international_format_number': 'international_format_number',
            'ip_warnings': 'ip_warnings',
            'last_name': 'last_name',
            'local_number': 'local_number',
            'lookup_outcome': 'lookup_outcome',
            'original_carrier': 'original_carrier',
            'ported': 'ported',
            'reachable': 'reachable',
            'remaining_balance': 'remaining_balance',
            'request_id': 'request_id',
            'request_price': 'request_price',
            'roaming': 'roaming',
            'valid_number': 'valid_number'
        }

        self._caller_identity = caller_identity
        self._caller_name = caller_name
        self._caller_type = caller_type
        self._current_carrier = current_carrier
        self._error = error
        self._firs_name = firs_name
        self._international_format_number = international_format_number
        self._ip_warnings = ip_warnings
        self._last_name = last_name
        self._local_number = local_number
        self._lookup_outcome = lookup_outcome
        self._original_carrier = original_carrier
        self._ported = ported
        self._reachable = reachable
        self._remaining_balance = remaining_balance
        self._request_id = request_id
        self._request_price = request_price
        self._roaming = roaming
        self._valid_number = valid_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseXmlAdvanced':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseXmlAdvanced of this NiResponseXmlAdvanced.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_identity(self):
        """Gets the caller_identity of this NiResponseXmlAdvanced.


        :return: The caller_identity of this NiResponseXmlAdvanced.
        :rtype: NiResponseXmlAdvancedCallerIdentity
        """
        return self._caller_identity

    @caller_identity.setter
    def caller_identity(self, caller_identity):
        """Sets the caller_identity of this NiResponseXmlAdvanced.


        :param caller_identity: The caller_identity of this NiResponseXmlAdvanced.
        :type caller_identity: NiResponseXmlAdvancedCallerIdentity
        """

        self._caller_identity = caller_identity

    @property
    def caller_name(self):
        """Gets the caller_name of this NiResponseXmlAdvanced.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_name of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this NiResponseXmlAdvanced.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_name: The caller_name of this NiResponseXmlAdvanced.
        :type caller_name: str
        """

        self._caller_name = caller_name

    @property
    def caller_type(self):
        """Gets the caller_type of this NiResponseXmlAdvanced.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_type of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """Sets the caller_type of this NiResponseXmlAdvanced.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_type: The caller_type of this NiResponseXmlAdvanced.
        :type caller_type: str
        """
        allowed_values = ["business", "consumer", "unknown"]  # noqa: E501
        if caller_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_type` ({0}), must be one of {1}"
                .format(caller_type, allowed_values)
            )

        self._caller_type = caller_type

    @property
    def current_carrier(self):
        """Gets the current_carrier of this NiResponseXmlAdvanced.


        :return: The current_carrier of this NiResponseXmlAdvanced.
        :rtype: NiCurrentCarrierProperties
        """
        return self._current_carrier

    @current_carrier.setter
    def current_carrier(self, current_carrier):
        """Sets the current_carrier of this NiResponseXmlAdvanced.


        :param current_carrier: The current_carrier of this NiResponseXmlAdvanced.
        :type current_carrier: NiCurrentCarrierProperties
        """

        self._current_carrier = current_carrier

    @property
    def error(self):
        """Gets the error of this NiResponseXmlAdvanced.


        :return: The error of this NiResponseXmlAdvanced.
        :rtype: NiResponseXmlAdvancedError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NiResponseXmlAdvanced.


        :param error: The error of this NiResponseXmlAdvanced.
        :type error: NiResponseXmlAdvancedError
        """

        self._error = error

    @property
    def firs_name(self):
        """Gets the firs_name of this NiResponseXmlAdvanced.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The firs_name of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._firs_name

    @firs_name.setter
    def firs_name(self, firs_name):
        """Sets the firs_name of this NiResponseXmlAdvanced.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param firs_name: The firs_name of this NiResponseXmlAdvanced.
        :type firs_name: str
        """

        self._firs_name = firs_name

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseXmlAdvanced.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseXmlAdvanced.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseXmlAdvanced.
        :type international_format_number: str
        """

        self._international_format_number = international_format_number

    @property
    def ip_warnings(self):
        """Gets the ip_warnings of this NiResponseXmlAdvanced.

        This property is deprecated and can safely be ignored.

        :return: The ip_warnings of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._ip_warnings

    @ip_warnings.setter
    def ip_warnings(self, ip_warnings):
        """Sets the ip_warnings of this NiResponseXmlAdvanced.

        This property is deprecated and can safely be ignored.

        :param ip_warnings: The ip_warnings of this NiResponseXmlAdvanced.
        :type ip_warnings: str
        """

        self._ip_warnings = ip_warnings

    @property
    def last_name(self):
        """Gets the last_name of this NiResponseXmlAdvanced.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The last_name of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NiResponseXmlAdvanced.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param last_name: The last_name of this NiResponseXmlAdvanced.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def local_number(self):
        """Gets the local_number of this NiResponseXmlAdvanced.


        :return: The local_number of this NiResponseXmlAdvanced.
        :rtype: NiResponseXmlAdvancedLocalNumber
        """
        return self._local_number

    @local_number.setter
    def local_number(self, local_number):
        """Sets the local_number of this NiResponseXmlAdvanced.


        :param local_number: The local_number of this NiResponseXmlAdvanced.
        :type local_number: NiResponseXmlAdvancedLocalNumber
        """

        self._local_number = local_number

    @property
    def lookup_outcome(self):
        """Gets the lookup_outcome of this NiResponseXmlAdvanced.


        :return: The lookup_outcome of this NiResponseXmlAdvanced.
        :rtype: NiResponseXmlAdvancedLookupOutcome
        """
        return self._lookup_outcome

    @lookup_outcome.setter
    def lookup_outcome(self, lookup_outcome):
        """Sets the lookup_outcome of this NiResponseXmlAdvanced.


        :param lookup_outcome: The lookup_outcome of this NiResponseXmlAdvanced.
        :type lookup_outcome: NiResponseXmlAdvancedLookupOutcome
        """

        self._lookup_outcome = lookup_outcome

    @property
    def original_carrier(self):
        """Gets the original_carrier of this NiResponseXmlAdvanced.


        :return: The original_carrier of this NiResponseXmlAdvanced.
        :rtype: NiInitialCarrierProperties
        """
        return self._original_carrier

    @original_carrier.setter
    def original_carrier(self, original_carrier):
        """Sets the original_carrier of this NiResponseXmlAdvanced.


        :param original_carrier: The original_carrier of this NiResponseXmlAdvanced.
        :type original_carrier: NiInitialCarrierProperties
        """

        self._original_carrier = original_carrier

    @property
    def ported(self):
        """Gets the ported of this NiResponseXmlAdvanced.


        :return: The ported of this NiResponseXmlAdvanced.
        :rtype: NiResponseXmlAdvancedPorted
        """
        return self._ported

    @ported.setter
    def ported(self, ported):
        """Sets the ported of this NiResponseXmlAdvanced.


        :param ported: The ported of this NiResponseXmlAdvanced.
        :type ported: NiResponseXmlAdvancedPorted
        """

        self._ported = ported

    @property
    def reachable(self):
        """Gets the reachable of this NiResponseXmlAdvanced.

        Can you call `number` now. This is applicable to mobile numbers only.

        :return: The reachable of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this NiResponseXmlAdvanced.

        Can you call `number` now. This is applicable to mobile numbers only.

        :param reachable: The reachable of this NiResponseXmlAdvanced.
        :type reachable: str
        """
        allowed_values = [None,"unknown", "reachable", "undeliverable", "absent", "bad_number", "blacklisted", "null"]  # noqa: E501
        if reachable not in allowed_values:
            raise ValueError(
                "Invalid value for `reachable` ({0}), must be one of {1}"
                .format(reachable, allowed_values)
            )

        self._reachable = reachable

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this NiResponseXmlAdvanced.

        Your account balance in EUR after this request.

        :return: The remaining_balance of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this NiResponseXmlAdvanced.

        Your account balance in EUR after this request.

        :param remaining_balance: The remaining_balance of this NiResponseXmlAdvanced.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseXmlAdvanced.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseXmlAdvanced.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseXmlAdvanced.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def request_price(self):
        """Gets the request_price of this NiResponseXmlAdvanced.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :return: The request_price of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._request_price

    @request_price.setter
    def request_price(self, request_price):
        """Sets the request_price of this NiResponseXmlAdvanced.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :param request_price: The request_price of this NiResponseXmlAdvanced.
        :type request_price: str
        """

        self._request_price = request_price

    @property
    def roaming(self):
        """Gets the roaming of this NiResponseXmlAdvanced.


        :return: The roaming of this NiResponseXmlAdvanced.
        :rtype: NiRoaming
        """
        return self._roaming

    @roaming.setter
    def roaming(self, roaming):
        """Sets the roaming of this NiResponseXmlAdvanced.


        :param roaming: The roaming of this NiResponseXmlAdvanced.
        :type roaming: NiRoaming
        """

        self._roaming = roaming

    @property
    def valid_number(self):
        """Gets the valid_number of this NiResponseXmlAdvanced.

        Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.

        :return: The valid_number of this NiResponseXmlAdvanced.
        :rtype: str
        """
        return self._valid_number

    @valid_number.setter
    def valid_number(self, valid_number):
        """Sets the valid_number of this NiResponseXmlAdvanced.

        Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.

        :param valid_number: The valid_number of this NiResponseXmlAdvanced.
        :type valid_number: str
        """
        allowed_values = ["unknown", "valid", "not_valid", "inferred_not_valid"]  # noqa: E501
        if valid_number not in allowed_values:
            raise ValueError(
                "Invalid value for `valid_number` ({0}), must be one of {1}"
                .format(valid_number, allowed_values)
            )

        self._valid_number = valid_number
