# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_response_xml_basic_error import NiResponseXmlBasicError
from openapi_server.models.ni_response_xml_basic_local_number import NiResponseXmlBasicLocalNumber
from openapi_server import util


class NiResponseXmlBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: NiResponseXmlBasicError=None, international_format_number: str=None, local_number: NiResponseXmlBasicLocalNumber=None, request_id: str=None):
        """NiResponseXmlBasic - a model defined in OpenAPI

        :param error: The error of this NiResponseXmlBasic.
        :param international_format_number: The international_format_number of this NiResponseXmlBasic.
        :param local_number: The local_number of this NiResponseXmlBasic.
        :param request_id: The request_id of this NiResponseXmlBasic.
        """
        self.openapi_types = {
            'error': NiResponseXmlBasicError,
            'international_format_number': str,
            'local_number': NiResponseXmlBasicLocalNumber,
            'request_id': str
        }

        self.attribute_map = {
            'error': 'error',
            'international_format_number': 'international_format_number',
            'local_number': 'local_number',
            'request_id': 'request_id'
        }

        self._error = error
        self._international_format_number = international_format_number
        self._local_number = local_number
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseXmlBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseXmlBasic of this NiResponseXmlBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this NiResponseXmlBasic.


        :return: The error of this NiResponseXmlBasic.
        :rtype: NiResponseXmlBasicError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NiResponseXmlBasic.


        :param error: The error of this NiResponseXmlBasic.
        :type error: NiResponseXmlBasicError
        """

        self._error = error

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseXmlBasic.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseXmlBasic.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseXmlBasic.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseXmlBasic.
        :type international_format_number: str
        """

        self._international_format_number = international_format_number

    @property
    def local_number(self):
        """Gets the local_number of this NiResponseXmlBasic.


        :return: The local_number of this NiResponseXmlBasic.
        :rtype: NiResponseXmlBasicLocalNumber
        """
        return self._local_number

    @local_number.setter
    def local_number(self, local_number):
        """Sets the local_number of this NiResponseXmlBasic.


        :param local_number: The local_number of this NiResponseXmlBasic.
        :type local_number: NiResponseXmlBasicLocalNumber
        """

        self._local_number = local_number

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseXmlBasic.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseXmlBasic.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseXmlBasic.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseXmlBasic.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id
