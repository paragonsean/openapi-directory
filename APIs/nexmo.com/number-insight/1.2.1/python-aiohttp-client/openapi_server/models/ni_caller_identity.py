# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NiCallerIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_name: str=None, caller_type: str=None, first_name: str=None, last_name: str=None):
        """NiCallerIdentity - a model defined in OpenAPI

        :param caller_name: The caller_name of this NiCallerIdentity.
        :param caller_type: The caller_type of this NiCallerIdentity.
        :param first_name: The first_name of this NiCallerIdentity.
        :param last_name: The last_name of this NiCallerIdentity.
        """
        self.openapi_types = {
            'caller_name': str,
            'caller_type': str,
            'first_name': str,
            'last_name': str
        }

        self.attribute_map = {
            'caller_name': 'caller_name',
            'caller_type': 'caller_type',
            'first_name': 'first_name',
            'last_name': 'last_name'
        }

        self._caller_name = caller_name
        self._caller_type = caller_type
        self._first_name = first_name
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiCallerIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niCallerIdentity of this NiCallerIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_name(self):
        """Gets the caller_name of this NiCallerIdentity.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_name of this NiCallerIdentity.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this NiCallerIdentity.

        Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_name: The caller_name of this NiCallerIdentity.
        :type caller_name: str
        """

        self._caller_name = caller_name

    @property
    def caller_type(self):
        """Gets the caller_type of this NiCallerIdentity.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The caller_type of this NiCallerIdentity.
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """Sets the caller_type of this NiCallerIdentity.

        The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.

        :param caller_type: The caller_type of this NiCallerIdentity.
        :type caller_type: str
        """
        allowed_values = ["business", "consumer", "unknown"]  # noqa: E501
        if caller_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_type` ({0}), must be one of {1}"
                .format(caller_type, allowed_values)
            )

        self._caller_type = caller_type

    @property
    def first_name(self):
        """Gets the first_name of this NiCallerIdentity.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The first_name of this NiCallerIdentity.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NiCallerIdentity.

        First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param first_name: The first_name of this NiCallerIdentity.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NiCallerIdentity.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :return: The last_name of this NiCallerIdentity.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NiCallerIdentity.

        Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.

        :param last_name: The last_name of this NiCallerIdentity.
        :type last_name: str
        """

        self._last_name = last_name
