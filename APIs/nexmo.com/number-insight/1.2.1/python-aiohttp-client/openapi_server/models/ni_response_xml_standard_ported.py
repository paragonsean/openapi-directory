# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NiResponseXmlStandardPorted(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ported_message: str=None):
        """NiResponseXmlStandardPorted - a model defined in OpenAPI

        :param ported_message: The ported_message of this NiResponseXmlStandardPorted.
        """
        self.openapi_types = {
            'ported_message': str
        }

        self.attribute_map = {
            'ported_message': 'ported_message'
        }

        self._ported_message = ported_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseXmlStandardPorted':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseXmlStandard_ported of this NiResponseXmlStandardPorted.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ported_message(self):
        """Gets the ported_message of this NiResponseXmlStandardPorted.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :return: The ported_message of this NiResponseXmlStandardPorted.
        :rtype: str
        """
        return self._ported_message

    @ported_message.setter
    def ported_message(self, ported_message):
        """Sets the ported_message of this NiResponseXmlStandardPorted.

        If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.

        :param ported_message: The ported_message of this NiResponseXmlStandardPorted.
        :type ported_message: str
        """
        allowed_values = ["unknown", "ported", "not_ported", "assumed_not_ported", "assumed_ported"]  # noqa: E501
        if ported_message not in allowed_values:
            raise ValueError(
                "Invalid value for `ported_message` ({0}), must be one of {1}"
                .format(ported_message, allowed_values)
            )

        self._ported_message = ported_message
