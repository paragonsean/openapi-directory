# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NiRoaming(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roaming_country_code: str=None, roaming_network_code: str=None, roaming_network_name: str=None, status: str=None):
        """NiRoaming - a model defined in OpenAPI

        :param roaming_country_code: The roaming_country_code of this NiRoaming.
        :param roaming_network_code: The roaming_network_code of this NiRoaming.
        :param roaming_network_name: The roaming_network_name of this NiRoaming.
        :param status: The status of this NiRoaming.
        """
        self.openapi_types = {
            'roaming_country_code': str,
            'roaming_network_code': str,
            'roaming_network_name': str,
            'status': str
        }

        self.attribute_map = {
            'roaming_country_code': 'roaming_country_code',
            'roaming_network_code': 'roaming_network_code',
            'roaming_network_name': 'roaming_network_name',
            'status': 'status'
        }

        self._roaming_country_code = roaming_country_code
        self._roaming_network_code = roaming_network_code
        self._roaming_network_name = roaming_network_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiRoaming':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niRoaming of this NiRoaming.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roaming_country_code(self):
        """Gets the roaming_country_code of this NiRoaming.

        If `number` is `roaming`, this is the [code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country `number` is roaming in.

        :return: The roaming_country_code of this NiRoaming.
        :rtype: str
        """
        return self._roaming_country_code

    @roaming_country_code.setter
    def roaming_country_code(self, roaming_country_code):
        """Sets the roaming_country_code of this NiRoaming.

        If `number` is `roaming`, this is the [code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country `number` is roaming in.

        :param roaming_country_code: The roaming_country_code of this NiRoaming.
        :type roaming_country_code: str
        """

        self._roaming_country_code = roaming_country_code

    @property
    def roaming_network_code(self):
        """Gets the roaming_network_code of this NiRoaming.

        If `number` is `roaming`, this is the id of the carrier network `number` is roaming in.

        :return: The roaming_network_code of this NiRoaming.
        :rtype: str
        """
        return self._roaming_network_code

    @roaming_network_code.setter
    def roaming_network_code(self, roaming_network_code):
        """Sets the roaming_network_code of this NiRoaming.

        If `number` is `roaming`, this is the id of the carrier network `number` is roaming in.

        :param roaming_network_code: The roaming_network_code of this NiRoaming.
        :type roaming_network_code: str
        """

        self._roaming_network_code = roaming_network_code

    @property
    def roaming_network_name(self):
        """Gets the roaming_network_name of this NiRoaming.

        If `number` is `roaming`, this is the name of the carrier network `number` is roaming in.

        :return: The roaming_network_name of this NiRoaming.
        :rtype: str
        """
        return self._roaming_network_name

    @roaming_network_name.setter
    def roaming_network_name(self, roaming_network_name):
        """Sets the roaming_network_name of this NiRoaming.

        If `number` is `roaming`, this is the name of the carrier network `number` is roaming in.

        :param roaming_network_name: The roaming_network_name of this NiRoaming.
        :type roaming_network_name: str
        """

        self._roaming_network_name = roaming_network_name

    @property
    def status(self):
        """Gets the status of this NiRoaming.

        Is `number` outside its home carrier network.

        :return: The status of this NiRoaming.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NiRoaming.

        Is `number` outside its home carrier network.

        :param status: The status of this NiRoaming.
        :type status: str
        """
        allowed_values = ["roaming", "not_roaming"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
