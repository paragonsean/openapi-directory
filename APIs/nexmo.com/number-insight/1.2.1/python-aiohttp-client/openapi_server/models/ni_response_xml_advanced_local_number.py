# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class NiResponseXmlAdvancedLocalNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, country_code_iso3: str=None, country_name: str=None, country_prefix: str=None, number: str=None):
        """NiResponseXmlAdvancedLocalNumber - a model defined in OpenAPI

        :param country_code: The country_code of this NiResponseXmlAdvancedLocalNumber.
        :param country_code_iso3: The country_code_iso3 of this NiResponseXmlAdvancedLocalNumber.
        :param country_name: The country_name of this NiResponseXmlAdvancedLocalNumber.
        :param country_prefix: The country_prefix of this NiResponseXmlAdvancedLocalNumber.
        :param number: The number of this NiResponseXmlAdvancedLocalNumber.
        """
        self.openapi_types = {
            'country_code': str,
            'country_code_iso3': str,
            'country_name': str,
            'country_prefix': str,
            'number': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'country_code_iso3': 'country_code_iso3',
            'country_name': 'country_name',
            'country_prefix': 'country_prefix',
            'number': 'number'
        }

        self._country_code = country_code
        self._country_code_iso3 = country_code_iso3
        self._country_name = country_name
        self._country_prefix = country_prefix
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseXmlAdvancedLocalNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseXmlAdvanced_local_number of this NiResponseXmlAdvancedLocalNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this NiResponseXmlAdvancedLocalNumber.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :return: The country_code of this NiResponseXmlAdvancedLocalNumber.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this NiResponseXmlAdvancedLocalNumber.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :param country_code: The country_code of this NiResponseXmlAdvancedLocalNumber.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def country_code_iso3(self):
        """Gets the country_code_iso3 of this NiResponseXmlAdvancedLocalNumber.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :return: The country_code_iso3 of this NiResponseXmlAdvancedLocalNumber.
        :rtype: str
        """
        return self._country_code_iso3

    @country_code_iso3.setter
    def country_code_iso3(self, country_code_iso3):
        """Sets the country_code_iso3 of this NiResponseXmlAdvancedLocalNumber.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :param country_code_iso3: The country_code_iso3 of this NiResponseXmlAdvancedLocalNumber.
        :type country_code_iso3: str
        """
        if country_code_iso3 is not None and not re.search(r'[A-Z]{3}', country_code_iso3):
            raise ValueError("Invalid value for `country_code_iso3`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._country_code_iso3 = country_code_iso3

    @property
    def country_name(self):
        """Gets the country_name of this NiResponseXmlAdvancedLocalNumber.

        The full name of the country that `number` is registered in.

        :return: The country_name of this NiResponseXmlAdvancedLocalNumber.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this NiResponseXmlAdvancedLocalNumber.

        The full name of the country that `number` is registered in.

        :param country_name: The country_name of this NiResponseXmlAdvancedLocalNumber.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_prefix(self):
        """Gets the country_prefix of this NiResponseXmlAdvancedLocalNumber.

        The numeric prefix for the country that `number` is registered in.

        :return: The country_prefix of this NiResponseXmlAdvancedLocalNumber.
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this NiResponseXmlAdvancedLocalNumber.

        The numeric prefix for the country that `number` is registered in.

        :param country_prefix: The country_prefix of this NiResponseXmlAdvancedLocalNumber.
        :type country_prefix: str
        """

        self._country_prefix = country_prefix

    @property
    def number(self):
        """Gets the number of this NiResponseXmlAdvancedLocalNumber.

        The `number` in your request in the format used by the country the number belongs to.

        :return: The number of this NiResponseXmlAdvancedLocalNumber.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NiResponseXmlAdvancedLocalNumber.

        The `number` in your request in the format used by the country the number belongs to.

        :param number: The number of this NiResponseXmlAdvancedLocalNumber.
        :type number: str
        """

        self._number = number
