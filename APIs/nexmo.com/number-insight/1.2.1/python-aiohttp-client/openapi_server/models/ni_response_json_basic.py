# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_basic_status import NiBasicStatus
import re
from openapi_server import util


class NiResponseJsonBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, country_code_iso3: str=None, country_name: str=None, country_prefix: str=None, international_format_number: str=None, national_format_number: str=None, request_id: str=None, status: NiBasicStatus=None, status_message: str=None):
        """NiResponseJsonBasic - a model defined in OpenAPI

        :param country_code: The country_code of this NiResponseJsonBasic.
        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonBasic.
        :param country_name: The country_name of this NiResponseJsonBasic.
        :param country_prefix: The country_prefix of this NiResponseJsonBasic.
        :param international_format_number: The international_format_number of this NiResponseJsonBasic.
        :param national_format_number: The national_format_number of this NiResponseJsonBasic.
        :param request_id: The request_id of this NiResponseJsonBasic.
        :param status: The status of this NiResponseJsonBasic.
        :param status_message: The status_message of this NiResponseJsonBasic.
        """
        self.openapi_types = {
            'country_code': str,
            'country_code_iso3': str,
            'country_name': str,
            'country_prefix': str,
            'international_format_number': str,
            'national_format_number': str,
            'request_id': str,
            'status': NiBasicStatus,
            'status_message': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'country_code_iso3': 'country_code_iso3',
            'country_name': 'country_name',
            'country_prefix': 'country_prefix',
            'international_format_number': 'international_format_number',
            'national_format_number': 'national_format_number',
            'request_id': 'request_id',
            'status': 'status',
            'status_message': 'status_message'
        }

        self._country_code = country_code
        self._country_code_iso3 = country_code_iso3
        self._country_name = country_name
        self._country_prefix = country_prefix
        self._international_format_number = international_format_number
        self._national_format_number = national_format_number
        self._request_id = request_id
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseJsonBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseJsonBasic of this NiResponseJsonBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this NiResponseJsonBasic.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :return: The country_code of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this NiResponseJsonBasic.

        Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.

        :param country_code: The country_code of this NiResponseJsonBasic.
        :type country_code: str
        """
        if country_code is not None and not re.search(r'[A-Z]{2}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country_code = country_code

    @property
    def country_code_iso3(self):
        """Gets the country_code_iso3 of this NiResponseJsonBasic.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :return: The country_code_iso3 of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._country_code_iso3

    @country_code_iso3.setter
    def country_code_iso3(self, country_code_iso3):
        """Sets the country_code_iso3 of this NiResponseJsonBasic.

        Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.

        :param country_code_iso3: The country_code_iso3 of this NiResponseJsonBasic.
        :type country_code_iso3: str
        """
        if country_code_iso3 is not None and not re.search(r'[A-Z]{3}', country_code_iso3):
            raise ValueError("Invalid value for `country_code_iso3`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._country_code_iso3 = country_code_iso3

    @property
    def country_name(self):
        """Gets the country_name of this NiResponseJsonBasic.

        The full name of the country that `number` is registered in.

        :return: The country_name of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this NiResponseJsonBasic.

        The full name of the country that `number` is registered in.

        :param country_name: The country_name of this NiResponseJsonBasic.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_prefix(self):
        """Gets the country_prefix of this NiResponseJsonBasic.

        The numeric prefix for the country that `number` is registered in.

        :return: The country_prefix of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this NiResponseJsonBasic.

        The numeric prefix for the country that `number` is registered in.

        :param country_prefix: The country_prefix of this NiResponseJsonBasic.
        :type country_prefix: str
        """

        self._country_prefix = country_prefix

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseJsonBasic.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseJsonBasic.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseJsonBasic.
        :type international_format_number: str
        """

        self._international_format_number = international_format_number

    @property
    def national_format_number(self):
        """Gets the national_format_number of this NiResponseJsonBasic.

        The `number` in your request in the format used by the country the number belongs to.

        :return: The national_format_number of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._national_format_number

    @national_format_number.setter
    def national_format_number(self, national_format_number):
        """Sets the national_format_number of this NiResponseJsonBasic.

        The `number` in your request in the format used by the country the number belongs to.

        :param national_format_number: The national_format_number of this NiResponseJsonBasic.
        :type national_format_number: str
        """

        self._national_format_number = national_format_number

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseJsonBasic.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseJsonBasic.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseJsonBasic.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this NiResponseJsonBasic.


        :return: The status of this NiResponseJsonBasic.
        :rtype: NiBasicStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NiResponseJsonBasic.


        :param status: The status of this NiResponseJsonBasic.
        :type status: NiBasicStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this NiResponseJsonBasic.

        The status description of your request.

        :return: The status_message of this NiResponseJsonBasic.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this NiResponseJsonBasic.

        The status description of your request.

        :param status_message: The status_message of this NiResponseJsonBasic.
        :type status_message: str
        """

        self._status_message = status_message
