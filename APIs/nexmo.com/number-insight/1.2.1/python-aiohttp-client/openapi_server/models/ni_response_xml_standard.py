# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ni_current_carrier_properties import NiCurrentCarrierProperties
from openapi_server.models.ni_initial_carrier_properties import NiInitialCarrierProperties
from openapi_server.models.ni_response_xml_basic_error import NiResponseXmlBasicError
from openapi_server.models.ni_response_xml_basic_local_number import NiResponseXmlBasicLocalNumber
from openapi_server.models.ni_response_xml_standard_caller_identity import NiResponseXmlStandardCallerIdentity
from openapi_server.models.ni_response_xml_standard_ported import NiResponseXmlStandardPorted
from openapi_server import util


class NiResponseXmlStandard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caller_identity: NiResponseXmlStandardCallerIdentity=None, current_carrier: NiCurrentCarrierProperties=None, error: NiResponseXmlBasicError=None, international_format_number: str=None, local_number: NiResponseXmlBasicLocalNumber=None, original_carrier: NiInitialCarrierProperties=None, ported: NiResponseXmlStandardPorted=None, remaining_balance: str=None, request_id: str=None, request_price: str=None):
        """NiResponseXmlStandard - a model defined in OpenAPI

        :param caller_identity: The caller_identity of this NiResponseXmlStandard.
        :param current_carrier: The current_carrier of this NiResponseXmlStandard.
        :param error: The error of this NiResponseXmlStandard.
        :param international_format_number: The international_format_number of this NiResponseXmlStandard.
        :param local_number: The local_number of this NiResponseXmlStandard.
        :param original_carrier: The original_carrier of this NiResponseXmlStandard.
        :param ported: The ported of this NiResponseXmlStandard.
        :param remaining_balance: The remaining_balance of this NiResponseXmlStandard.
        :param request_id: The request_id of this NiResponseXmlStandard.
        :param request_price: The request_price of this NiResponseXmlStandard.
        """
        self.openapi_types = {
            'caller_identity': NiResponseXmlStandardCallerIdentity,
            'current_carrier': NiCurrentCarrierProperties,
            'error': NiResponseXmlBasicError,
            'international_format_number': str,
            'local_number': NiResponseXmlBasicLocalNumber,
            'original_carrier': NiInitialCarrierProperties,
            'ported': NiResponseXmlStandardPorted,
            'remaining_balance': str,
            'request_id': str,
            'request_price': str
        }

        self.attribute_map = {
            'caller_identity': 'caller_identity',
            'current_carrier': 'current_carrier',
            'error': 'error',
            'international_format_number': 'international_format_number',
            'local_number': 'local_number',
            'original_carrier': 'original_carrier',
            'ported': 'ported',
            'remaining_balance': 'remaining_balance',
            'request_id': 'request_id',
            'request_price': 'request_price'
        }

        self._caller_identity = caller_identity
        self._current_carrier = current_carrier
        self._error = error
        self._international_format_number = international_format_number
        self._local_number = local_number
        self._original_carrier = original_carrier
        self._ported = ported
        self._remaining_balance = remaining_balance
        self._request_id = request_id
        self._request_price = request_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NiResponseXmlStandard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The niResponseXmlStandard of this NiResponseXmlStandard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caller_identity(self):
        """Gets the caller_identity of this NiResponseXmlStandard.


        :return: The caller_identity of this NiResponseXmlStandard.
        :rtype: NiResponseXmlStandardCallerIdentity
        """
        return self._caller_identity

    @caller_identity.setter
    def caller_identity(self, caller_identity):
        """Sets the caller_identity of this NiResponseXmlStandard.


        :param caller_identity: The caller_identity of this NiResponseXmlStandard.
        :type caller_identity: NiResponseXmlStandardCallerIdentity
        """

        self._caller_identity = caller_identity

    @property
    def current_carrier(self):
        """Gets the current_carrier of this NiResponseXmlStandard.


        :return: The current_carrier of this NiResponseXmlStandard.
        :rtype: NiCurrentCarrierProperties
        """
        return self._current_carrier

    @current_carrier.setter
    def current_carrier(self, current_carrier):
        """Sets the current_carrier of this NiResponseXmlStandard.


        :param current_carrier: The current_carrier of this NiResponseXmlStandard.
        :type current_carrier: NiCurrentCarrierProperties
        """

        self._current_carrier = current_carrier

    @property
    def error(self):
        """Gets the error of this NiResponseXmlStandard.


        :return: The error of this NiResponseXmlStandard.
        :rtype: NiResponseXmlBasicError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NiResponseXmlStandard.


        :param error: The error of this NiResponseXmlStandard.
        :type error: NiResponseXmlBasicError
        """

        self._error = error

    @property
    def international_format_number(self):
        """Gets the international_format_number of this NiResponseXmlStandard.

        The `number` in your request in international format.

        :return: The international_format_number of this NiResponseXmlStandard.
        :rtype: str
        """
        return self._international_format_number

    @international_format_number.setter
    def international_format_number(self, international_format_number):
        """Sets the international_format_number of this NiResponseXmlStandard.

        The `number` in your request in international format.

        :param international_format_number: The international_format_number of this NiResponseXmlStandard.
        :type international_format_number: str
        """

        self._international_format_number = international_format_number

    @property
    def local_number(self):
        """Gets the local_number of this NiResponseXmlStandard.


        :return: The local_number of this NiResponseXmlStandard.
        :rtype: NiResponseXmlBasicLocalNumber
        """
        return self._local_number

    @local_number.setter
    def local_number(self, local_number):
        """Sets the local_number of this NiResponseXmlStandard.


        :param local_number: The local_number of this NiResponseXmlStandard.
        :type local_number: NiResponseXmlBasicLocalNumber
        """

        self._local_number = local_number

    @property
    def original_carrier(self):
        """Gets the original_carrier of this NiResponseXmlStandard.


        :return: The original_carrier of this NiResponseXmlStandard.
        :rtype: NiInitialCarrierProperties
        """
        return self._original_carrier

    @original_carrier.setter
    def original_carrier(self, original_carrier):
        """Sets the original_carrier of this NiResponseXmlStandard.


        :param original_carrier: The original_carrier of this NiResponseXmlStandard.
        :type original_carrier: NiInitialCarrierProperties
        """

        self._original_carrier = original_carrier

    @property
    def ported(self):
        """Gets the ported of this NiResponseXmlStandard.


        :return: The ported of this NiResponseXmlStandard.
        :rtype: NiResponseXmlStandardPorted
        """
        return self._ported

    @ported.setter
    def ported(self, ported):
        """Sets the ported of this NiResponseXmlStandard.


        :param ported: The ported of this NiResponseXmlStandard.
        :type ported: NiResponseXmlStandardPorted
        """

        self._ported = ported

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this NiResponseXmlStandard.

        Your account balance in EUR after this request.

        :return: The remaining_balance of this NiResponseXmlStandard.
        :rtype: str
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this NiResponseXmlStandard.

        Your account balance in EUR after this request.

        :param remaining_balance: The remaining_balance of this NiResponseXmlStandard.
        :type remaining_balance: str
        """

        self._remaining_balance = remaining_balance

    @property
    def request_id(self):
        """Gets the request_id of this NiResponseXmlStandard.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :return: The request_id of this NiResponseXmlStandard.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NiResponseXmlStandard.

        The unique identifier for your request. This is a alphanumeric string up to 40 characters.

        :param request_id: The request_id of this NiResponseXmlStandard.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 40:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `40`")

        self._request_id = request_id

    @property
    def request_price(self):
        """Gets the request_price of this NiResponseXmlStandard.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :return: The request_price of this NiResponseXmlStandard.
        :rtype: str
        """
        return self._request_price

    @request_price.setter
    def request_price(self, request_price):
        """Sets the request_price of this NiResponseXmlStandard.

        If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.

        :param request_price: The request_price of this NiResponseXmlStandard.
        :type request_price: str
        """

        self._request_price = request_price
