/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseXmlStandard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseXmlStandard::OAINiResponseXmlStandard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseXmlStandard::OAINiResponseXmlStandard() {
    this->initializeModel();
}

OAINiResponseXmlStandard::~OAINiResponseXmlStandard() {}

void OAINiResponseXmlStandard::initializeModel() {

    m_caller_identity_isSet = false;
    m_caller_identity_isValid = false;

    m_current_carrier_isSet = false;
    m_current_carrier_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_international_format_number_isSet = false;
    m_international_format_number_isValid = false;

    m_local_number_isSet = false;
    m_local_number_isValid = false;

    m_original_carrier_isSet = false;
    m_original_carrier_isValid = false;

    m_ported_isSet = false;
    m_ported_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_price_isSet = false;
    m_request_price_isValid = false;
}

void OAINiResponseXmlStandard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseXmlStandard::fromJsonObject(QJsonObject json) {

    m_caller_identity_isValid = ::OpenAPI::fromJsonValue(m_caller_identity, json[QString("caller_identity")]);
    m_caller_identity_isSet = !json[QString("caller_identity")].isNull() && m_caller_identity_isValid;

    m_current_carrier_isValid = ::OpenAPI::fromJsonValue(m_current_carrier, json[QString("current_carrier")]);
    m_current_carrier_isSet = !json[QString("current_carrier")].isNull() && m_current_carrier_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_international_format_number_isValid = ::OpenAPI::fromJsonValue(m_international_format_number, json[QString("international_format_number")]);
    m_international_format_number_isSet = !json[QString("international_format_number")].isNull() && m_international_format_number_isValid;

    m_local_number_isValid = ::OpenAPI::fromJsonValue(m_local_number, json[QString("local_number")]);
    m_local_number_isSet = !json[QString("local_number")].isNull() && m_local_number_isValid;

    m_original_carrier_isValid = ::OpenAPI::fromJsonValue(m_original_carrier, json[QString("original_carrier")]);
    m_original_carrier_isSet = !json[QString("original_carrier")].isNull() && m_original_carrier_isValid;

    m_ported_isValid = ::OpenAPI::fromJsonValue(m_ported, json[QString("ported")]);
    m_ported_isSet = !json[QString("ported")].isNull() && m_ported_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remaining_balance")]);
    m_remaining_balance_isSet = !json[QString("remaining_balance")].isNull() && m_remaining_balance_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_price_isValid = ::OpenAPI::fromJsonValue(m_request_price, json[QString("request_price")]);
    m_request_price_isSet = !json[QString("request_price")].isNull() && m_request_price_isValid;
}

QString OAINiResponseXmlStandard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseXmlStandard::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_identity.isSet()) {
        obj.insert(QString("caller_identity"), ::OpenAPI::toJsonValue(m_caller_identity));
    }
    if (m_current_carrier.isSet()) {
        obj.insert(QString("current_carrier"), ::OpenAPI::toJsonValue(m_current_carrier));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_international_format_number_isSet) {
        obj.insert(QString("international_format_number"), ::OpenAPI::toJsonValue(m_international_format_number));
    }
    if (m_local_number.isSet()) {
        obj.insert(QString("local_number"), ::OpenAPI::toJsonValue(m_local_number));
    }
    if (m_original_carrier.isSet()) {
        obj.insert(QString("original_carrier"), ::OpenAPI::toJsonValue(m_original_carrier));
    }
    if (m_ported.isSet()) {
        obj.insert(QString("ported"), ::OpenAPI::toJsonValue(m_ported));
    }
    if (m_remaining_balance_isSet) {
        obj.insert(QString("remaining_balance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_price_isSet) {
        obj.insert(QString("request_price"), ::OpenAPI::toJsonValue(m_request_price));
    }
    return obj;
}

OAINiResponseXmlStandard_caller_identity OAINiResponseXmlStandard::getCallerIdentity() const {
    return m_caller_identity;
}
void OAINiResponseXmlStandard::setCallerIdentity(const OAINiResponseXmlStandard_caller_identity &caller_identity) {
    m_caller_identity = caller_identity;
    m_caller_identity_isSet = true;
}

bool OAINiResponseXmlStandard::is_caller_identity_Set() const{
    return m_caller_identity_isSet;
}

bool OAINiResponseXmlStandard::is_caller_identity_Valid() const{
    return m_caller_identity_isValid;
}

OAINiCurrentCarrierProperties OAINiResponseXmlStandard::getCurrentCarrier() const {
    return m_current_carrier;
}
void OAINiResponseXmlStandard::setCurrentCarrier(const OAINiCurrentCarrierProperties &current_carrier) {
    m_current_carrier = current_carrier;
    m_current_carrier_isSet = true;
}

bool OAINiResponseXmlStandard::is_current_carrier_Set() const{
    return m_current_carrier_isSet;
}

bool OAINiResponseXmlStandard::is_current_carrier_Valid() const{
    return m_current_carrier_isValid;
}

OAINiResponseXmlBasic_error OAINiResponseXmlStandard::getError() const {
    return m_error;
}
void OAINiResponseXmlStandard::setError(const OAINiResponseXmlBasic_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAINiResponseXmlStandard::is_error_Set() const{
    return m_error_isSet;
}

bool OAINiResponseXmlStandard::is_error_Valid() const{
    return m_error_isValid;
}

QString OAINiResponseXmlStandard::getInternationalFormatNumber() const {
    return m_international_format_number;
}
void OAINiResponseXmlStandard::setInternationalFormatNumber(const QString &international_format_number) {
    m_international_format_number = international_format_number;
    m_international_format_number_isSet = true;
}

bool OAINiResponseXmlStandard::is_international_format_number_Set() const{
    return m_international_format_number_isSet;
}

bool OAINiResponseXmlStandard::is_international_format_number_Valid() const{
    return m_international_format_number_isValid;
}

OAINiResponseXmlBasic_local_number OAINiResponseXmlStandard::getLocalNumber() const {
    return m_local_number;
}
void OAINiResponseXmlStandard::setLocalNumber(const OAINiResponseXmlBasic_local_number &local_number) {
    m_local_number = local_number;
    m_local_number_isSet = true;
}

bool OAINiResponseXmlStandard::is_local_number_Set() const{
    return m_local_number_isSet;
}

bool OAINiResponseXmlStandard::is_local_number_Valid() const{
    return m_local_number_isValid;
}

OAINiInitialCarrierProperties OAINiResponseXmlStandard::getOriginalCarrier() const {
    return m_original_carrier;
}
void OAINiResponseXmlStandard::setOriginalCarrier(const OAINiInitialCarrierProperties &original_carrier) {
    m_original_carrier = original_carrier;
    m_original_carrier_isSet = true;
}

bool OAINiResponseXmlStandard::is_original_carrier_Set() const{
    return m_original_carrier_isSet;
}

bool OAINiResponseXmlStandard::is_original_carrier_Valid() const{
    return m_original_carrier_isValid;
}

OAINiResponseXmlStandard_ported OAINiResponseXmlStandard::getPorted() const {
    return m_ported;
}
void OAINiResponseXmlStandard::setPorted(const OAINiResponseXmlStandard_ported &ported) {
    m_ported = ported;
    m_ported_isSet = true;
}

bool OAINiResponseXmlStandard::is_ported_Set() const{
    return m_ported_isSet;
}

bool OAINiResponseXmlStandard::is_ported_Valid() const{
    return m_ported_isValid;
}

QString OAINiResponseXmlStandard::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAINiResponseXmlStandard::setRemainingBalance(const QString &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAINiResponseXmlStandard::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAINiResponseXmlStandard::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAINiResponseXmlStandard::getRequestId() const {
    return m_request_id;
}
void OAINiResponseXmlStandard::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAINiResponseXmlStandard::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAINiResponseXmlStandard::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAINiResponseXmlStandard::getRequestPrice() const {
    return m_request_price;
}
void OAINiResponseXmlStandard::setRequestPrice(const QString &request_price) {
    m_request_price = request_price;
    m_request_price_isSet = true;
}

bool OAINiResponseXmlStandard::is_request_price_Set() const{
    return m_request_price_isSet;
}

bool OAINiResponseXmlStandard::is_request_price_Valid() const{
    return m_request_price_isValid;
}

bool OAINiResponseXmlStandard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_format_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ported.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseXmlStandard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
