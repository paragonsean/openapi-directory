/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseXmlAdvanced_ported.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseXmlAdvanced_ported::OAINiResponseXmlAdvanced_ported(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseXmlAdvanced_ported::OAINiResponseXmlAdvanced_ported() {
    this->initializeModel();
}

OAINiResponseXmlAdvanced_ported::~OAINiResponseXmlAdvanced_ported() {}

void OAINiResponseXmlAdvanced_ported::initializeModel() {

    m_ported_message_isSet = false;
    m_ported_message_isValid = false;
}

void OAINiResponseXmlAdvanced_ported::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseXmlAdvanced_ported::fromJsonObject(QJsonObject json) {

    m_ported_message_isValid = ::OpenAPI::fromJsonValue(m_ported_message, json[QString("ported_message")]);
    m_ported_message_isSet = !json[QString("ported_message")].isNull() && m_ported_message_isValid;
}

QString OAINiResponseXmlAdvanced_ported::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseXmlAdvanced_ported::asJsonObject() const {
    QJsonObject obj;
    if (m_ported_message_isSet) {
        obj.insert(QString("ported_message"), ::OpenAPI::toJsonValue(m_ported_message));
    }
    return obj;
}

QString OAINiResponseXmlAdvanced_ported::getPortedMessage() const {
    return m_ported_message;
}
void OAINiResponseXmlAdvanced_ported::setPortedMessage(const QString &ported_message) {
    m_ported_message = ported_message;
    m_ported_message_isSet = true;
}

bool OAINiResponseXmlAdvanced_ported::is_ported_message_Set() const{
    return m_ported_message_isSet;
}

bool OAINiResponseXmlAdvanced_ported::is_ported_message_Valid() const{
    return m_ported_message_isValid;
}

bool OAINiResponseXmlAdvanced_ported::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ported_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseXmlAdvanced_ported::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
