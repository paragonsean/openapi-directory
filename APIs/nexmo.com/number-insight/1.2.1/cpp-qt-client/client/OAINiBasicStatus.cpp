/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiBasicStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiBasicStatus::OAINiBasicStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiBasicStatus::OAINiBasicStatus() {
    this->initializeModel();
}

OAINiBasicStatus::~OAINiBasicStatus() {}

void OAINiBasicStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINiBasicStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINiBasicStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(5), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(9), Qt::CaseInsensitive) == 0) {
        m_value = eOAINiBasicStatus::_9;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINiBasicStatus::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAINiBasicStatus>(json.toInt());
}

QString OAINiBasicStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINiBasicStatus::_0:
            val = QString::number(0);
            break;
        case eOAINiBasicStatus::_1:
            val = QString::number(1);
            break;
        case eOAINiBasicStatus::_3:
            val = QString::number(3);
            break;
        case eOAINiBasicStatus::_4:
            val = QString::number(4);
            break;
        case eOAINiBasicStatus::_5:
            val = QString::number(5);
            break;
        case eOAINiBasicStatus::_9:
            val = QString::number(9);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINiBasicStatus::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAINiBasicStatus::eOAINiBasicStatus OAINiBasicStatus::getValue() const {
    return m_value;
}

void OAINiBasicStatus::setValue(const OAINiBasicStatus::eOAINiBasicStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINiBasicStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAINiBasicStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
