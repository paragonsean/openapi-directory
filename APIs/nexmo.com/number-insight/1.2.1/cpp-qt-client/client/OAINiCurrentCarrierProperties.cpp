/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiCurrentCarrierProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiCurrentCarrierProperties::OAINiCurrentCarrierProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiCurrentCarrierProperties::OAINiCurrentCarrierProperties() {
    this->initializeModel();
}

OAINiCurrentCarrierProperties::~OAINiCurrentCarrierProperties() {}

void OAINiCurrentCarrierProperties::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_code_isSet = false;
    m_network_code_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;
}

void OAINiCurrentCarrierProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiCurrentCarrierProperties::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_code_isValid = ::OpenAPI::fromJsonValue(m_network_code, json[QString("network_code")]);
    m_network_code_isSet = !json[QString("network_code")].isNull() && m_network_code_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("network_type")]);
    m_network_type_isSet = !json[QString("network_type")].isNull() && m_network_type_isValid;
}

QString OAINiCurrentCarrierProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiCurrentCarrierProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_code_isSet) {
        obj.insert(QString("network_code"), ::OpenAPI::toJsonValue(m_network_code));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("network_type"), ::OpenAPI::toJsonValue(m_network_type));
    }
    return obj;
}

QString OAINiCurrentCarrierProperties::getCountry() const {
    return m_country;
}
void OAINiCurrentCarrierProperties::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINiCurrentCarrierProperties::is_country_Set() const{
    return m_country_isSet;
}

bool OAINiCurrentCarrierProperties::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINiCurrentCarrierProperties::getName() const {
    return m_name;
}
void OAINiCurrentCarrierProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINiCurrentCarrierProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAINiCurrentCarrierProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINiCurrentCarrierProperties::getNetworkCode() const {
    return m_network_code;
}
void OAINiCurrentCarrierProperties::setNetworkCode(const QString &network_code) {
    m_network_code = network_code;
    m_network_code_isSet = true;
}

bool OAINiCurrentCarrierProperties::is_network_code_Set() const{
    return m_network_code_isSet;
}

bool OAINiCurrentCarrierProperties::is_network_code_Valid() const{
    return m_network_code_isValid;
}

QString OAINiCurrentCarrierProperties::getNetworkType() const {
    return m_network_type;
}
void OAINiCurrentCarrierProperties::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAINiCurrentCarrierProperties::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAINiCurrentCarrierProperties::is_network_type_Valid() const{
    return m_network_type_isValid;
}

bool OAINiCurrentCarrierProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiCurrentCarrierProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
