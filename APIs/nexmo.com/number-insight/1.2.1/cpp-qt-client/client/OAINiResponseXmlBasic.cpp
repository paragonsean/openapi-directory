/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseXmlBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseXmlBasic::OAINiResponseXmlBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseXmlBasic::OAINiResponseXmlBasic() {
    this->initializeModel();
}

OAINiResponseXmlBasic::~OAINiResponseXmlBasic() {}

void OAINiResponseXmlBasic::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_international_format_number_isSet = false;
    m_international_format_number_isValid = false;

    m_local_number_isSet = false;
    m_local_number_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAINiResponseXmlBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseXmlBasic::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_international_format_number_isValid = ::OpenAPI::fromJsonValue(m_international_format_number, json[QString("international_format_number")]);
    m_international_format_number_isSet = !json[QString("international_format_number")].isNull() && m_international_format_number_isValid;

    m_local_number_isValid = ::OpenAPI::fromJsonValue(m_local_number, json[QString("local_number")]);
    m_local_number_isSet = !json[QString("local_number")].isNull() && m_local_number_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;
}

QString OAINiResponseXmlBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseXmlBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_international_format_number_isSet) {
        obj.insert(QString("international_format_number"), ::OpenAPI::toJsonValue(m_international_format_number));
    }
    if (m_local_number.isSet()) {
        obj.insert(QString("local_number"), ::OpenAPI::toJsonValue(m_local_number));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAINiResponseXmlBasic_error OAINiResponseXmlBasic::getError() const {
    return m_error;
}
void OAINiResponseXmlBasic::setError(const OAINiResponseXmlBasic_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAINiResponseXmlBasic::is_error_Set() const{
    return m_error_isSet;
}

bool OAINiResponseXmlBasic::is_error_Valid() const{
    return m_error_isValid;
}

QString OAINiResponseXmlBasic::getInternationalFormatNumber() const {
    return m_international_format_number;
}
void OAINiResponseXmlBasic::setInternationalFormatNumber(const QString &international_format_number) {
    m_international_format_number = international_format_number;
    m_international_format_number_isSet = true;
}

bool OAINiResponseXmlBasic::is_international_format_number_Set() const{
    return m_international_format_number_isSet;
}

bool OAINiResponseXmlBasic::is_international_format_number_Valid() const{
    return m_international_format_number_isValid;
}

OAINiResponseXmlBasic_local_number OAINiResponseXmlBasic::getLocalNumber() const {
    return m_local_number;
}
void OAINiResponseXmlBasic::setLocalNumber(const OAINiResponseXmlBasic_local_number &local_number) {
    m_local_number = local_number;
    m_local_number_isSet = true;
}

bool OAINiResponseXmlBasic::is_local_number_Set() const{
    return m_local_number_isSet;
}

bool OAINiResponseXmlBasic::is_local_number_Valid() const{
    return m_local_number_isValid;
}

QString OAINiResponseXmlBasic::getRequestId() const {
    return m_request_id;
}
void OAINiResponseXmlBasic::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAINiResponseXmlBasic::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAINiResponseXmlBasic::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAINiResponseXmlBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_format_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseXmlBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
