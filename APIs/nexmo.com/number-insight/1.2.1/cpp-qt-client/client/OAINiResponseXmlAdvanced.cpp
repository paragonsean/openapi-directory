/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseXmlAdvanced.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseXmlAdvanced::OAINiResponseXmlAdvanced(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseXmlAdvanced::OAINiResponseXmlAdvanced() {
    this->initializeModel();
}

OAINiResponseXmlAdvanced::~OAINiResponseXmlAdvanced() {}

void OAINiResponseXmlAdvanced::initializeModel() {

    m_caller_identity_isSet = false;
    m_caller_identity_isValid = false;

    m_caller_name_isSet = false;
    m_caller_name_isValid = false;

    m_caller_type_isSet = false;
    m_caller_type_isValid = false;

    m_current_carrier_isSet = false;
    m_current_carrier_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_firs_name_isSet = false;
    m_firs_name_isValid = false;

    m_international_format_number_isSet = false;
    m_international_format_number_isValid = false;

    m_ip_warnings_isSet = false;
    m_ip_warnings_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_local_number_isSet = false;
    m_local_number_isValid = false;

    m_lookup_outcome_isSet = false;
    m_lookup_outcome_isValid = false;

    m_original_carrier_isSet = false;
    m_original_carrier_isValid = false;

    m_ported_isSet = false;
    m_ported_isValid = false;

    m_reachable_isSet = false;
    m_reachable_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_price_isSet = false;
    m_request_price_isValid = false;

    m_roaming_isSet = false;
    m_roaming_isValid = false;

    m_valid_number_isSet = false;
    m_valid_number_isValid = false;
}

void OAINiResponseXmlAdvanced::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseXmlAdvanced::fromJsonObject(QJsonObject json) {

    m_caller_identity_isValid = ::OpenAPI::fromJsonValue(m_caller_identity, json[QString("caller_identity")]);
    m_caller_identity_isSet = !json[QString("caller_identity")].isNull() && m_caller_identity_isValid;

    m_caller_name_isValid = ::OpenAPI::fromJsonValue(m_caller_name, json[QString("caller_name")]);
    m_caller_name_isSet = !json[QString("caller_name")].isNull() && m_caller_name_isValid;

    m_caller_type_isValid = ::OpenAPI::fromJsonValue(m_caller_type, json[QString("caller_type")]);
    m_caller_type_isSet = !json[QString("caller_type")].isNull() && m_caller_type_isValid;

    m_current_carrier_isValid = ::OpenAPI::fromJsonValue(m_current_carrier, json[QString("current_carrier")]);
    m_current_carrier_isSet = !json[QString("current_carrier")].isNull() && m_current_carrier_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_firs_name_isValid = ::OpenAPI::fromJsonValue(m_firs_name, json[QString("firs_name")]);
    m_firs_name_isSet = !json[QString("firs_name")].isNull() && m_firs_name_isValid;

    m_international_format_number_isValid = ::OpenAPI::fromJsonValue(m_international_format_number, json[QString("international_format_number")]);
    m_international_format_number_isSet = !json[QString("international_format_number")].isNull() && m_international_format_number_isValid;

    m_ip_warnings_isValid = ::OpenAPI::fromJsonValue(m_ip_warnings, json[QString("ip_warnings")]);
    m_ip_warnings_isSet = !json[QString("ip_warnings")].isNull() && m_ip_warnings_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_local_number_isValid = ::OpenAPI::fromJsonValue(m_local_number, json[QString("local_number")]);
    m_local_number_isSet = !json[QString("local_number")].isNull() && m_local_number_isValid;

    m_lookup_outcome_isValid = ::OpenAPI::fromJsonValue(m_lookup_outcome, json[QString("lookup_outcome")]);
    m_lookup_outcome_isSet = !json[QString("lookup_outcome")].isNull() && m_lookup_outcome_isValid;

    m_original_carrier_isValid = ::OpenAPI::fromJsonValue(m_original_carrier, json[QString("original_carrier")]);
    m_original_carrier_isSet = !json[QString("original_carrier")].isNull() && m_original_carrier_isValid;

    m_ported_isValid = ::OpenAPI::fromJsonValue(m_ported, json[QString("ported")]);
    m_ported_isSet = !json[QString("ported")].isNull() && m_ported_isValid;

    m_reachable_isValid = ::OpenAPI::fromJsonValue(m_reachable, json[QString("reachable")]);
    m_reachable_isSet = !json[QString("reachable")].isNull() && m_reachable_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remaining_balance")]);
    m_remaining_balance_isSet = !json[QString("remaining_balance")].isNull() && m_remaining_balance_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_price_isValid = ::OpenAPI::fromJsonValue(m_request_price, json[QString("request_price")]);
    m_request_price_isSet = !json[QString("request_price")].isNull() && m_request_price_isValid;

    m_roaming_isValid = ::OpenAPI::fromJsonValue(m_roaming, json[QString("roaming")]);
    m_roaming_isSet = !json[QString("roaming")].isNull() && m_roaming_isValid;

    m_valid_number_isValid = ::OpenAPI::fromJsonValue(m_valid_number, json[QString("valid_number")]);
    m_valid_number_isSet = !json[QString("valid_number")].isNull() && m_valid_number_isValid;
}

QString OAINiResponseXmlAdvanced::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseXmlAdvanced::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_identity.isSet()) {
        obj.insert(QString("caller_identity"), ::OpenAPI::toJsonValue(m_caller_identity));
    }
    if (m_caller_name_isSet) {
        obj.insert(QString("caller_name"), ::OpenAPI::toJsonValue(m_caller_name));
    }
    if (m_caller_type_isSet) {
        obj.insert(QString("caller_type"), ::OpenAPI::toJsonValue(m_caller_type));
    }
    if (m_current_carrier.isSet()) {
        obj.insert(QString("current_carrier"), ::OpenAPI::toJsonValue(m_current_carrier));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_firs_name_isSet) {
        obj.insert(QString("firs_name"), ::OpenAPI::toJsonValue(m_firs_name));
    }
    if (m_international_format_number_isSet) {
        obj.insert(QString("international_format_number"), ::OpenAPI::toJsonValue(m_international_format_number));
    }
    if (m_ip_warnings_isSet) {
        obj.insert(QString("ip_warnings"), ::OpenAPI::toJsonValue(m_ip_warnings));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_local_number.isSet()) {
        obj.insert(QString("local_number"), ::OpenAPI::toJsonValue(m_local_number));
    }
    if (m_lookup_outcome.isSet()) {
        obj.insert(QString("lookup_outcome"), ::OpenAPI::toJsonValue(m_lookup_outcome));
    }
    if (m_original_carrier.isSet()) {
        obj.insert(QString("original_carrier"), ::OpenAPI::toJsonValue(m_original_carrier));
    }
    if (m_ported.isSet()) {
        obj.insert(QString("ported"), ::OpenAPI::toJsonValue(m_ported));
    }
    if (m_reachable_isSet) {
        obj.insert(QString("reachable"), ::OpenAPI::toJsonValue(m_reachable));
    }
    if (m_remaining_balance_isSet) {
        obj.insert(QString("remaining_balance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_price_isSet) {
        obj.insert(QString("request_price"), ::OpenAPI::toJsonValue(m_request_price));
    }
    if (m_roaming.isSet()) {
        obj.insert(QString("roaming"), ::OpenAPI::toJsonValue(m_roaming));
    }
    if (m_valid_number_isSet) {
        obj.insert(QString("valid_number"), ::OpenAPI::toJsonValue(m_valid_number));
    }
    return obj;
}

OAINiResponseXmlAdvanced_caller_identity OAINiResponseXmlAdvanced::getCallerIdentity() const {
    return m_caller_identity;
}
void OAINiResponseXmlAdvanced::setCallerIdentity(const OAINiResponseXmlAdvanced_caller_identity &caller_identity) {
    m_caller_identity = caller_identity;
    m_caller_identity_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_caller_identity_Set() const{
    return m_caller_identity_isSet;
}

bool OAINiResponseXmlAdvanced::is_caller_identity_Valid() const{
    return m_caller_identity_isValid;
}

QString OAINiResponseXmlAdvanced::getCallerName() const {
    return m_caller_name;
}
void OAINiResponseXmlAdvanced::setCallerName(const QString &caller_name) {
    m_caller_name = caller_name;
    m_caller_name_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_caller_name_Set() const{
    return m_caller_name_isSet;
}

bool OAINiResponseXmlAdvanced::is_caller_name_Valid() const{
    return m_caller_name_isValid;
}

QString OAINiResponseXmlAdvanced::getCallerType() const {
    return m_caller_type;
}
void OAINiResponseXmlAdvanced::setCallerType(const QString &caller_type) {
    m_caller_type = caller_type;
    m_caller_type_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_caller_type_Set() const{
    return m_caller_type_isSet;
}

bool OAINiResponseXmlAdvanced::is_caller_type_Valid() const{
    return m_caller_type_isValid;
}

OAINiCurrentCarrierProperties OAINiResponseXmlAdvanced::getCurrentCarrier() const {
    return m_current_carrier;
}
void OAINiResponseXmlAdvanced::setCurrentCarrier(const OAINiCurrentCarrierProperties &current_carrier) {
    m_current_carrier = current_carrier;
    m_current_carrier_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_current_carrier_Set() const{
    return m_current_carrier_isSet;
}

bool OAINiResponseXmlAdvanced::is_current_carrier_Valid() const{
    return m_current_carrier_isValid;
}

OAINiResponseXmlAdvanced_error OAINiResponseXmlAdvanced::getError() const {
    return m_error;
}
void OAINiResponseXmlAdvanced::setError(const OAINiResponseXmlAdvanced_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_error_Set() const{
    return m_error_isSet;
}

bool OAINiResponseXmlAdvanced::is_error_Valid() const{
    return m_error_isValid;
}

QString OAINiResponseXmlAdvanced::getFirsName() const {
    return m_firs_name;
}
void OAINiResponseXmlAdvanced::setFirsName(const QString &firs_name) {
    m_firs_name = firs_name;
    m_firs_name_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_firs_name_Set() const{
    return m_firs_name_isSet;
}

bool OAINiResponseXmlAdvanced::is_firs_name_Valid() const{
    return m_firs_name_isValid;
}

QString OAINiResponseXmlAdvanced::getInternationalFormatNumber() const {
    return m_international_format_number;
}
void OAINiResponseXmlAdvanced::setInternationalFormatNumber(const QString &international_format_number) {
    m_international_format_number = international_format_number;
    m_international_format_number_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_international_format_number_Set() const{
    return m_international_format_number_isSet;
}

bool OAINiResponseXmlAdvanced::is_international_format_number_Valid() const{
    return m_international_format_number_isValid;
}

QString OAINiResponseXmlAdvanced::getIpWarnings() const {
    return m_ip_warnings;
}
void OAINiResponseXmlAdvanced::setIpWarnings(const QString &ip_warnings) {
    m_ip_warnings = ip_warnings;
    m_ip_warnings_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_ip_warnings_Set() const{
    return m_ip_warnings_isSet;
}

bool OAINiResponseXmlAdvanced::is_ip_warnings_Valid() const{
    return m_ip_warnings_isValid;
}

QString OAINiResponseXmlAdvanced::getLastName() const {
    return m_last_name;
}
void OAINiResponseXmlAdvanced::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAINiResponseXmlAdvanced::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAINiResponseXmlAdvanced_local_number OAINiResponseXmlAdvanced::getLocalNumber() const {
    return m_local_number;
}
void OAINiResponseXmlAdvanced::setLocalNumber(const OAINiResponseXmlAdvanced_local_number &local_number) {
    m_local_number = local_number;
    m_local_number_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_local_number_Set() const{
    return m_local_number_isSet;
}

bool OAINiResponseXmlAdvanced::is_local_number_Valid() const{
    return m_local_number_isValid;
}

OAINiResponseXmlAdvanced_lookup_outcome OAINiResponseXmlAdvanced::getLookupOutcome() const {
    return m_lookup_outcome;
}
void OAINiResponseXmlAdvanced::setLookupOutcome(const OAINiResponseXmlAdvanced_lookup_outcome &lookup_outcome) {
    m_lookup_outcome = lookup_outcome;
    m_lookup_outcome_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_lookup_outcome_Set() const{
    return m_lookup_outcome_isSet;
}

bool OAINiResponseXmlAdvanced::is_lookup_outcome_Valid() const{
    return m_lookup_outcome_isValid;
}

OAINiInitialCarrierProperties OAINiResponseXmlAdvanced::getOriginalCarrier() const {
    return m_original_carrier;
}
void OAINiResponseXmlAdvanced::setOriginalCarrier(const OAINiInitialCarrierProperties &original_carrier) {
    m_original_carrier = original_carrier;
    m_original_carrier_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_original_carrier_Set() const{
    return m_original_carrier_isSet;
}

bool OAINiResponseXmlAdvanced::is_original_carrier_Valid() const{
    return m_original_carrier_isValid;
}

OAINiResponseXmlAdvanced_ported OAINiResponseXmlAdvanced::getPorted() const {
    return m_ported;
}
void OAINiResponseXmlAdvanced::setPorted(const OAINiResponseXmlAdvanced_ported &ported) {
    m_ported = ported;
    m_ported_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_ported_Set() const{
    return m_ported_isSet;
}

bool OAINiResponseXmlAdvanced::is_ported_Valid() const{
    return m_ported_isValid;
}

QString OAINiResponseXmlAdvanced::getReachable() const {
    return m_reachable;
}
void OAINiResponseXmlAdvanced::setReachable(const QString &reachable) {
    m_reachable = reachable;
    m_reachable_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_reachable_Set() const{
    return m_reachable_isSet;
}

bool OAINiResponseXmlAdvanced::is_reachable_Valid() const{
    return m_reachable_isValid;
}

QString OAINiResponseXmlAdvanced::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAINiResponseXmlAdvanced::setRemainingBalance(const QString &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAINiResponseXmlAdvanced::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAINiResponseXmlAdvanced::getRequestId() const {
    return m_request_id;
}
void OAINiResponseXmlAdvanced::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAINiResponseXmlAdvanced::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAINiResponseXmlAdvanced::getRequestPrice() const {
    return m_request_price;
}
void OAINiResponseXmlAdvanced::setRequestPrice(const QString &request_price) {
    m_request_price = request_price;
    m_request_price_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_request_price_Set() const{
    return m_request_price_isSet;
}

bool OAINiResponseXmlAdvanced::is_request_price_Valid() const{
    return m_request_price_isValid;
}

OAINiRoaming OAINiResponseXmlAdvanced::getRoaming() const {
    return m_roaming;
}
void OAINiResponseXmlAdvanced::setRoaming(const OAINiRoaming &roaming) {
    m_roaming = roaming;
    m_roaming_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_roaming_Set() const{
    return m_roaming_isSet;
}

bool OAINiResponseXmlAdvanced::is_roaming_Valid() const{
    return m_roaming_isValid;
}

QString OAINiResponseXmlAdvanced::getValidNumber() const {
    return m_valid_number;
}
void OAINiResponseXmlAdvanced::setValidNumber(const QString &valid_number) {
    m_valid_number = valid_number;
    m_valid_number_isSet = true;
}

bool OAINiResponseXmlAdvanced::is_valid_number_Set() const{
    return m_valid_number_isSet;
}

bool OAINiResponseXmlAdvanced::is_valid_number_Valid() const{
    return m_valid_number_isValid;
}

bool OAINiResponseXmlAdvanced::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firs_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_format_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_outcome.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ported.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roaming.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseXmlAdvanced::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
