/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNumberInsightAdvanced_200_response.h"
#include "OAIGetNumberInsightAsync_200_response.h"
#include "OAIGetNumberInsightStandard_200_response.h"
#include "OAINiResponseAsync.h"
#include "OAINiResponseJsonBasic.h"
#include "OAINiResponseXmlAdvanced.h"
#include "OAINiResponseXmlBasic.h"
#include "OAINiResponseXmlStandard.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  number QString [required]
    * @param[in]  real_time_data bool [optional]
    * @param[in]  country QString [optional]
    * @param[in]  cnam bool [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getNumberInsightAdvanced(const QString &format, const QString &number, const ::OpenAPI::OptionalParam<bool> &real_time_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &cnam = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  callback QString [required]
    * @param[in]  number QString [required]
    * @param[in]  country QString [optional]
    * @param[in]  cnam bool [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getNumberInsightAsync(const QString &format, const QString &callback, const QString &number, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &cnam = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  number QString [required]
    * @param[in]  country QString [optional]
    */
    virtual void getNumberInsightBasic(const QString &format, const QString &number, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  number QString [required]
    * @param[in]  country QString [optional]
    * @param[in]  cnam bool [optional]
    */
    virtual void getNumberInsightStandard(const QString &format, const QString &number, const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &cnam = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNumberInsightAdvancedCallback(OAIHttpRequestWorker *worker);
    void getNumberInsightAsyncCallback(OAIHttpRequestWorker *worker);
    void getNumberInsightBasicCallback(OAIHttpRequestWorker *worker);
    void getNumberInsightStandardCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNumberInsightAdvancedSignal(OAIGetNumberInsightAdvanced_200_response summary);
    void getNumberInsightAsyncSignal(OAIGetNumberInsightAsync_200_response summary);
    void getNumberInsightBasicSignal(OAINiResponseJsonBasic summary);
    void getNumberInsightStandardSignal(OAIGetNumberInsightStandard_200_response summary);


    void getNumberInsightAdvancedSignalFull(OAIHttpRequestWorker *worker, OAIGetNumberInsightAdvanced_200_response summary);
    void getNumberInsightAsyncSignalFull(OAIHttpRequestWorker *worker, OAIGetNumberInsightAsync_200_response summary);
    void getNumberInsightBasicSignalFull(OAIHttpRequestWorker *worker, OAINiResponseJsonBasic summary);
    void getNumberInsightStandardSignalFull(OAIHttpRequestWorker *worker, OAIGetNumberInsightStandard_200_response summary);

    Q_DECL_DEPRECATED_X("Use getNumberInsightAdvancedSignalError() instead")
    void getNumberInsightAdvancedSignalE(OAIGetNumberInsightAdvanced_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightAdvancedSignalError(OAIGetNumberInsightAdvanced_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightAsyncSignalError() instead")
    void getNumberInsightAsyncSignalE(OAIGetNumberInsightAsync_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightAsyncSignalError(OAIGetNumberInsightAsync_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightBasicSignalError() instead")
    void getNumberInsightBasicSignalE(OAINiResponseJsonBasic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightBasicSignalError(OAINiResponseJsonBasic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightStandardSignalError() instead")
    void getNumberInsightStandardSignalE(OAIGetNumberInsightStandard_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightStandardSignalError(OAIGetNumberInsightStandard_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNumberInsightAdvancedSignalErrorFull() instead")
    void getNumberInsightAdvancedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightAdvancedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightAsyncSignalErrorFull() instead")
    void getNumberInsightAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightBasicSignalErrorFull() instead")
    void getNumberInsightBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberInsightStandardSignalErrorFull() instead")
    void getNumberInsightStandardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberInsightStandardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
