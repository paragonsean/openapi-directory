/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseJsonAdvancedAsync.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseJsonAdvancedAsync::OAINiResponseJsonAdvancedAsync(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseJsonAdvancedAsync::OAINiResponseJsonAdvancedAsync() {
    this->initializeModel();
}

OAINiResponseJsonAdvancedAsync::~OAINiResponseJsonAdvancedAsync() {}

void OAINiResponseJsonAdvancedAsync::initializeModel() {

    m_caller_identity_isSet = false;
    m_caller_identity_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code_iso3_isSet = false;
    m_country_code_iso3_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_country_prefix_isSet = false;
    m_country_prefix_isValid = false;

    m_current_carrier_isSet = false;
    m_current_carrier_isValid = false;

    m_international_format_number_isSet = false;
    m_international_format_number_isValid = false;

    m_lookup_outcome_isSet = false;
    m_lookup_outcome_isValid = false;

    m_lookup_outcome_message_isSet = false;
    m_lookup_outcome_message_isValid = false;

    m_national_format_number_isSet = false;
    m_national_format_number_isValid = false;

    m_original_carrier_isSet = false;
    m_original_carrier_isValid = false;

    m_ported_isSet = false;
    m_ported_isValid = false;

    m_reachable_isSet = false;
    m_reachable_isValid = false;

    m_refund_price_isSet = false;
    m_refund_price_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_price_isSet = false;
    m_request_price_isValid = false;

    m_roaming_isSet = false;
    m_roaming_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_valid_number_isSet = false;
    m_valid_number_isValid = false;
}

void OAINiResponseJsonAdvancedAsync::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseJsonAdvancedAsync::fromJsonObject(QJsonObject json) {

    m_caller_identity_isValid = ::OpenAPI::fromJsonValue(m_caller_identity, json[QString("caller_identity")]);
    m_caller_identity_isSet = !json[QString("caller_identity")].isNull() && m_caller_identity_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_code_iso3_isValid = ::OpenAPI::fromJsonValue(m_country_code_iso3, json[QString("country_code_iso3")]);
    m_country_code_iso3_isSet = !json[QString("country_code_iso3")].isNull() && m_country_code_iso3_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_country_prefix_isValid = ::OpenAPI::fromJsonValue(m_country_prefix, json[QString("country_prefix")]);
    m_country_prefix_isSet = !json[QString("country_prefix")].isNull() && m_country_prefix_isValid;

    m_current_carrier_isValid = ::OpenAPI::fromJsonValue(m_current_carrier, json[QString("current_carrier")]);
    m_current_carrier_isSet = !json[QString("current_carrier")].isNull() && m_current_carrier_isValid;

    m_international_format_number_isValid = ::OpenAPI::fromJsonValue(m_international_format_number, json[QString("international_format_number")]);
    m_international_format_number_isSet = !json[QString("international_format_number")].isNull() && m_international_format_number_isValid;

    m_lookup_outcome_isValid = ::OpenAPI::fromJsonValue(m_lookup_outcome, json[QString("lookup_outcome")]);
    m_lookup_outcome_isSet = !json[QString("lookup_outcome")].isNull() && m_lookup_outcome_isValid;

    m_lookup_outcome_message_isValid = ::OpenAPI::fromJsonValue(m_lookup_outcome_message, json[QString("lookup_outcome_message")]);
    m_lookup_outcome_message_isSet = !json[QString("lookup_outcome_message")].isNull() && m_lookup_outcome_message_isValid;

    m_national_format_number_isValid = ::OpenAPI::fromJsonValue(m_national_format_number, json[QString("national_format_number")]);
    m_national_format_number_isSet = !json[QString("national_format_number")].isNull() && m_national_format_number_isValid;

    m_original_carrier_isValid = ::OpenAPI::fromJsonValue(m_original_carrier, json[QString("original_carrier")]);
    m_original_carrier_isSet = !json[QString("original_carrier")].isNull() && m_original_carrier_isValid;

    m_ported_isValid = ::OpenAPI::fromJsonValue(m_ported, json[QString("ported")]);
    m_ported_isSet = !json[QString("ported")].isNull() && m_ported_isValid;

    m_reachable_isValid = ::OpenAPI::fromJsonValue(m_reachable, json[QString("reachable")]);
    m_reachable_isSet = !json[QString("reachable")].isNull() && m_reachable_isValid;

    m_refund_price_isValid = ::OpenAPI::fromJsonValue(m_refund_price, json[QString("refund_price")]);
    m_refund_price_isSet = !json[QString("refund_price")].isNull() && m_refund_price_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remaining_balance")]);
    m_remaining_balance_isSet = !json[QString("remaining_balance")].isNull() && m_remaining_balance_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_price_isValid = ::OpenAPI::fromJsonValue(m_request_price, json[QString("request_price")]);
    m_request_price_isSet = !json[QString("request_price")].isNull() && m_request_price_isValid;

    m_roaming_isValid = ::OpenAPI::fromJsonValue(m_roaming, json[QString("roaming")]);
    m_roaming_isSet = !json[QString("roaming")].isNull() && m_roaming_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("status_message")]);
    m_status_message_isSet = !json[QString("status_message")].isNull() && m_status_message_isValid;

    m_valid_number_isValid = ::OpenAPI::fromJsonValue(m_valid_number, json[QString("valid_number")]);
    m_valid_number_isSet = !json[QString("valid_number")].isNull() && m_valid_number_isValid;
}

QString OAINiResponseJsonAdvancedAsync::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseJsonAdvancedAsync::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_identity.isSet()) {
        obj.insert(QString("caller_identity"), ::OpenAPI::toJsonValue(m_caller_identity));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code_iso3_isSet) {
        obj.insert(QString("country_code_iso3"), ::OpenAPI::toJsonValue(m_country_code_iso3));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_country_prefix_isSet) {
        obj.insert(QString("country_prefix"), ::OpenAPI::toJsonValue(m_country_prefix));
    }
    if (m_current_carrier.isSet()) {
        obj.insert(QString("current_carrier"), ::OpenAPI::toJsonValue(m_current_carrier));
    }
    if (m_international_format_number_isSet) {
        obj.insert(QString("international_format_number"), ::OpenAPI::toJsonValue(m_international_format_number));
    }
    if (m_lookup_outcome_isSet) {
        obj.insert(QString("lookup_outcome"), ::OpenAPI::toJsonValue(m_lookup_outcome));
    }
    if (m_lookup_outcome_message_isSet) {
        obj.insert(QString("lookup_outcome_message"), ::OpenAPI::toJsonValue(m_lookup_outcome_message));
    }
    if (m_national_format_number_isSet) {
        obj.insert(QString("national_format_number"), ::OpenAPI::toJsonValue(m_national_format_number));
    }
    if (m_original_carrier.isSet()) {
        obj.insert(QString("original_carrier"), ::OpenAPI::toJsonValue(m_original_carrier));
    }
    if (m_ported_isSet) {
        obj.insert(QString("ported"), ::OpenAPI::toJsonValue(m_ported));
    }
    if (m_reachable_isSet) {
        obj.insert(QString("reachable"), ::OpenAPI::toJsonValue(m_reachable));
    }
    if (m_refund_price_isSet) {
        obj.insert(QString("refund_price"), ::OpenAPI::toJsonValue(m_refund_price));
    }
    if (m_remaining_balance_isSet) {
        obj.insert(QString("remaining_balance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_price_isSet) {
        obj.insert(QString("request_price"), ::OpenAPI::toJsonValue(m_request_price));
    }
    if (m_roaming.isSet()) {
        obj.insert(QString("roaming"), ::OpenAPI::toJsonValue(m_roaming));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("status_message"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_valid_number_isSet) {
        obj.insert(QString("valid_number"), ::OpenAPI::toJsonValue(m_valid_number));
    }
    return obj;
}

OAINiCallerIdentity OAINiResponseJsonAdvancedAsync::getCallerIdentity() const {
    return m_caller_identity;
}
void OAINiResponseJsonAdvancedAsync::setCallerIdentity(const OAINiCallerIdentity &caller_identity) {
    m_caller_identity = caller_identity;
    m_caller_identity_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_caller_identity_Set() const{
    return m_caller_identity_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_caller_identity_Valid() const{
    return m_caller_identity_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getCountryCode() const {
    return m_country_code;
}
void OAINiResponseJsonAdvancedAsync::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getCountryCodeIso3() const {
    return m_country_code_iso3;
}
void OAINiResponseJsonAdvancedAsync::setCountryCodeIso3(const QString &country_code_iso3) {
    m_country_code_iso3 = country_code_iso3;
    m_country_code_iso3_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_country_code_iso3_Set() const{
    return m_country_code_iso3_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_country_code_iso3_Valid() const{
    return m_country_code_iso3_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getCountryName() const {
    return m_country_name;
}
void OAINiResponseJsonAdvancedAsync::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getCountryPrefix() const {
    return m_country_prefix;
}
void OAINiResponseJsonAdvancedAsync::setCountryPrefix(const QString &country_prefix) {
    m_country_prefix = country_prefix;
    m_country_prefix_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_country_prefix_Set() const{
    return m_country_prefix_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_country_prefix_Valid() const{
    return m_country_prefix_isValid;
}

OAINiCurrentCarrierProperties OAINiResponseJsonAdvancedAsync::getCurrentCarrier() const {
    return m_current_carrier;
}
void OAINiResponseJsonAdvancedAsync::setCurrentCarrier(const OAINiCurrentCarrierProperties &current_carrier) {
    m_current_carrier = current_carrier;
    m_current_carrier_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_current_carrier_Set() const{
    return m_current_carrier_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_current_carrier_Valid() const{
    return m_current_carrier_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getInternationalFormatNumber() const {
    return m_international_format_number;
}
void OAINiResponseJsonAdvancedAsync::setInternationalFormatNumber(const QString &international_format_number) {
    m_international_format_number = international_format_number;
    m_international_format_number_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_international_format_number_Set() const{
    return m_international_format_number_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_international_format_number_Valid() const{
    return m_international_format_number_isValid;
}

qint32 OAINiResponseJsonAdvancedAsync::getLookupOutcome() const {
    return m_lookup_outcome;
}
void OAINiResponseJsonAdvancedAsync::setLookupOutcome(const qint32 &lookup_outcome) {
    m_lookup_outcome = lookup_outcome;
    m_lookup_outcome_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_lookup_outcome_Set() const{
    return m_lookup_outcome_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_lookup_outcome_Valid() const{
    return m_lookup_outcome_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getLookupOutcomeMessage() const {
    return m_lookup_outcome_message;
}
void OAINiResponseJsonAdvancedAsync::setLookupOutcomeMessage(const QString &lookup_outcome_message) {
    m_lookup_outcome_message = lookup_outcome_message;
    m_lookup_outcome_message_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_lookup_outcome_message_Set() const{
    return m_lookup_outcome_message_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_lookup_outcome_message_Valid() const{
    return m_lookup_outcome_message_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getNationalFormatNumber() const {
    return m_national_format_number;
}
void OAINiResponseJsonAdvancedAsync::setNationalFormatNumber(const QString &national_format_number) {
    m_national_format_number = national_format_number;
    m_national_format_number_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_national_format_number_Set() const{
    return m_national_format_number_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_national_format_number_Valid() const{
    return m_national_format_number_isValid;
}

OAINiInitialCarrierProperties OAINiResponseJsonAdvancedAsync::getOriginalCarrier() const {
    return m_original_carrier;
}
void OAINiResponseJsonAdvancedAsync::setOriginalCarrier(const OAINiInitialCarrierProperties &original_carrier) {
    m_original_carrier = original_carrier;
    m_original_carrier_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_original_carrier_Set() const{
    return m_original_carrier_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_original_carrier_Valid() const{
    return m_original_carrier_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getPorted() const {
    return m_ported;
}
void OAINiResponseJsonAdvancedAsync::setPorted(const QString &ported) {
    m_ported = ported;
    m_ported_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_ported_Set() const{
    return m_ported_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_ported_Valid() const{
    return m_ported_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getReachable() const {
    return m_reachable;
}
void OAINiResponseJsonAdvancedAsync::setReachable(const QString &reachable) {
    m_reachable = reachable;
    m_reachable_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_reachable_Set() const{
    return m_reachable_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_reachable_Valid() const{
    return m_reachable_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getRefundPrice() const {
    return m_refund_price;
}
void OAINiResponseJsonAdvancedAsync::setRefundPrice(const QString &refund_price) {
    m_refund_price = refund_price;
    m_refund_price_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_refund_price_Set() const{
    return m_refund_price_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_refund_price_Valid() const{
    return m_refund_price_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAINiResponseJsonAdvancedAsync::setRemainingBalance(const QString &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getRequestId() const {
    return m_request_id;
}
void OAINiResponseJsonAdvancedAsync::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getRequestPrice() const {
    return m_request_price;
}
void OAINiResponseJsonAdvancedAsync::setRequestPrice(const QString &request_price) {
    m_request_price = request_price;
    m_request_price_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_request_price_Set() const{
    return m_request_price_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_request_price_Valid() const{
    return m_request_price_isValid;
}

OAINiRoaming OAINiResponseJsonAdvancedAsync::getRoaming() const {
    return m_roaming;
}
void OAINiResponseJsonAdvancedAsync::setRoaming(const OAINiRoaming &roaming) {
    m_roaming = roaming;
    m_roaming_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_roaming_Set() const{
    return m_roaming_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_roaming_Valid() const{
    return m_roaming_isValid;
}

OAINiStandardAdvancedStatus OAINiResponseJsonAdvancedAsync::getStatus() const {
    return m_status;
}
void OAINiResponseJsonAdvancedAsync::setStatus(const OAINiStandardAdvancedStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_status_Set() const{
    return m_status_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getStatusMessage() const {
    return m_status_message;
}
void OAINiResponseJsonAdvancedAsync::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAINiResponseJsonAdvancedAsync::getValidNumber() const {
    return m_valid_number;
}
void OAINiResponseJsonAdvancedAsync::setValidNumber(const QString &valid_number) {
    m_valid_number = valid_number;
    m_valid_number_isSet = true;
}

bool OAINiResponseJsonAdvancedAsync::is_valid_number_Set() const{
    return m_valid_number_isSet;
}

bool OAINiResponseJsonAdvancedAsync::is_valid_number_Valid() const{
    return m_valid_number_isValid;
}

bool OAINiResponseJsonAdvancedAsync::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_iso3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_format_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_outcome_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_format_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roaming.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseJsonAdvancedAsync::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_code_isValid && m_country_code_iso3_isValid && m_country_name_isValid && m_country_prefix_isValid && m_international_format_number_isValid && m_national_format_number_isValid && m_request_id_isValid && m_status_isValid && m_status_message_isValid && true;
}

} // namespace OpenAPI
