/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNumberInsightAsync_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNumberInsightAsync_200_response::OAIGetNumberInsightAsync_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNumberInsightAsync_200_response::OAIGetNumberInsightAsync_200_response() {
    this->initializeModel();
}

OAIGetNumberInsightAsync_200_response::~OAIGetNumberInsightAsync_200_response() {}

void OAIGetNumberInsightAsync_200_response::initializeModel() {

    m_error_text_isSet = false;
    m_error_text_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_price_isSet = false;
    m_request_price_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetNumberInsightAsync_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNumberInsightAsync_200_response::fromJsonObject(QJsonObject json) {

    m_error_text_isValid = ::OpenAPI::fromJsonValue(m_error_text, json[QString("error_text")]);
    m_error_text_isSet = !json[QString("error_text")].isNull() && m_error_text_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remaining_balance")]);
    m_remaining_balance_isSet = !json[QString("remaining_balance")].isNull() && m_remaining_balance_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_request_price_isValid = ::OpenAPI::fromJsonValue(m_request_price, json[QString("request_price")]);
    m_request_price_isSet = !json[QString("request_price")].isNull() && m_request_price_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetNumberInsightAsync_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNumberInsightAsync_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_text_isSet) {
        obj.insert(QString("error_text"), ::OpenAPI::toJsonValue(m_error_text));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_remaining_balance_isSet) {
        obj.insert(QString("remaining_balance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_price_isSet) {
        obj.insert(QString("request_price"), ::OpenAPI::toJsonValue(m_request_price));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetNumberInsightAsync_200_response::getErrorText() const {
    return m_error_text;
}
void OAIGetNumberInsightAsync_200_response::setErrorText(const QString &error_text) {
    m_error_text = error_text;
    m_error_text_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_error_text_Set() const{
    return m_error_text_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_error_text_Valid() const{
    return m_error_text_isValid;
}

QString OAIGetNumberInsightAsync_200_response::getNumber() const {
    return m_number;
}
void OAIGetNumberInsightAsync_200_response::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_number_Set() const{
    return m_number_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIGetNumberInsightAsync_200_response::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAIGetNumberInsightAsync_200_response::setRemainingBalance(const QString &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAIGetNumberInsightAsync_200_response::getRequestId() const {
    return m_request_id;
}
void OAIGetNumberInsightAsync_200_response::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIGetNumberInsightAsync_200_response::getRequestPrice() const {
    return m_request_price;
}
void OAIGetNumberInsightAsync_200_response::setRequestPrice(const QString &request_price) {
    m_request_price = request_price;
    m_request_price_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_request_price_Set() const{
    return m_request_price_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_request_price_Valid() const{
    return m_request_price_isValid;
}

OAINiStandardAdvancedStatus OAIGetNumberInsightAsync_200_response::getStatus() const {
    return m_status;
}
void OAIGetNumberInsightAsync_200_response::setStatus(const OAINiStandardAdvancedStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetNumberInsightAsync_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetNumberInsightAsync_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetNumberInsightAsync_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNumberInsightAsync_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
