/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINiResponseXmlBasic_local_number.h
 *
 * An object containing the &#x60;number&#x60; in your request in the format used by the country the number belongs to.
 */

#ifndef OAINiResponseXmlBasic_local_number_H
#define OAINiResponseXmlBasic_local_number_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINiResponseXmlBasic_local_number : public OAIObject {
public:
    OAINiResponseXmlBasic_local_number();
    OAINiResponseXmlBasic_local_number(QString json);
    ~OAINiResponseXmlBasic_local_number() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCountryCodeIso3() const;
    void setCountryCodeIso3(const QString &country_code_iso3);
    bool is_country_code_iso3_Set() const;
    bool is_country_code_iso3_Valid() const;

    QString getCountryName() const;
    void setCountryName(const QString &country_name);
    bool is_country_name_Set() const;
    bool is_country_name_Valid() const;

    QString getCountryPrefix() const;
    void setCountryPrefix(const QString &country_prefix);
    bool is_country_prefix_Set() const;
    bool is_country_prefix_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_country_code_iso3;
    bool m_country_code_iso3_isSet;
    bool m_country_code_iso3_isValid;

    QString m_country_name;
    bool m_country_name_isSet;
    bool m_country_name_isValid;

    QString m_country_prefix;
    bool m_country_prefix_isSet;
    bool m_country_prefix_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINiResponseXmlBasic_local_number)

#endif // OAINiResponseXmlBasic_local_number_H
