/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINiResponseXmlBasic_local_number.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINiResponseXmlBasic_local_number::OAINiResponseXmlBasic_local_number(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINiResponseXmlBasic_local_number::OAINiResponseXmlBasic_local_number() {
    this->initializeModel();
}

OAINiResponseXmlBasic_local_number::~OAINiResponseXmlBasic_local_number() {}

void OAINiResponseXmlBasic_local_number::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_code_iso3_isSet = false;
    m_country_code_iso3_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_country_prefix_isSet = false;
    m_country_prefix_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAINiResponseXmlBasic_local_number::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINiResponseXmlBasic_local_number::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_code_iso3_isValid = ::OpenAPI::fromJsonValue(m_country_code_iso3, json[QString("country_code_iso3")]);
    m_country_code_iso3_isSet = !json[QString("country_code_iso3")].isNull() && m_country_code_iso3_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_country_prefix_isValid = ::OpenAPI::fromJsonValue(m_country_prefix, json[QString("country_prefix")]);
    m_country_prefix_isSet = !json[QString("country_prefix")].isNull() && m_country_prefix_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAINiResponseXmlBasic_local_number::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINiResponseXmlBasic_local_number::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_code_iso3_isSet) {
        obj.insert(QString("country_code_iso3"), ::OpenAPI::toJsonValue(m_country_code_iso3));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_country_prefix_isSet) {
        obj.insert(QString("country_prefix"), ::OpenAPI::toJsonValue(m_country_prefix));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

QString OAINiResponseXmlBasic_local_number::getCountryCode() const {
    return m_country_code;
}
void OAINiResponseXmlBasic_local_number::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAINiResponseXmlBasic_local_number::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAINiResponseXmlBasic_local_number::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAINiResponseXmlBasic_local_number::getCountryCodeIso3() const {
    return m_country_code_iso3;
}
void OAINiResponseXmlBasic_local_number::setCountryCodeIso3(const QString &country_code_iso3) {
    m_country_code_iso3 = country_code_iso3;
    m_country_code_iso3_isSet = true;
}

bool OAINiResponseXmlBasic_local_number::is_country_code_iso3_Set() const{
    return m_country_code_iso3_isSet;
}

bool OAINiResponseXmlBasic_local_number::is_country_code_iso3_Valid() const{
    return m_country_code_iso3_isValid;
}

QString OAINiResponseXmlBasic_local_number::getCountryName() const {
    return m_country_name;
}
void OAINiResponseXmlBasic_local_number::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAINiResponseXmlBasic_local_number::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAINiResponseXmlBasic_local_number::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAINiResponseXmlBasic_local_number::getCountryPrefix() const {
    return m_country_prefix;
}
void OAINiResponseXmlBasic_local_number::setCountryPrefix(const QString &country_prefix) {
    m_country_prefix = country_prefix;
    m_country_prefix_isSet = true;
}

bool OAINiResponseXmlBasic_local_number::is_country_prefix_Set() const{
    return m_country_prefix_isSet;
}

bool OAINiResponseXmlBasic_local_number::is_country_prefix_Valid() const{
    return m_country_prefix_isValid;
}

QString OAINiResponseXmlBasic_local_number::getNumber() const {
    return m_number;
}
void OAINiResponseXmlBasic_local_number::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAINiResponseXmlBasic_local_number::is_number_Set() const{
    return m_number_isSet;
}

bool OAINiResponseXmlBasic_local_number::is_number_Valid() const{
    return m_number_isValid;
}

bool OAINiResponseXmlBasic_local_number::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_iso3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINiResponseXmlBasic_local_number::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
