/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NiBasicStatus;
import org.openapitools.client.model.NiCallerIdentity;
import org.openapitools.client.model.NiCurrentCarrierProperties;
import org.openapitools.client.model.NiInitialCarrierProperties;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standard Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiResponseJsonStandard {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "country_code_iso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_COUNTRY_PREFIX = "country_prefix";
  @SerializedName(SERIALIZED_NAME_COUNTRY_PREFIX)
  private String countryPrefix;

  public static final String SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER = "international_format_number";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER)
  private String internationalFormatNumber;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT_NUMBER = "national_format_number";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT_NUMBER)
  private String nationalFormatNumber;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NiBasicStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_CALLER_IDENTITY = "caller_identity";
  @SerializedName(SERIALIZED_NAME_CALLER_IDENTITY)
  private NiCallerIdentity callerIdentity;

  public static final String SERIALIZED_NAME_CALLER_NAME = "caller_name";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private String callerName;

  /**
   * The value will be &#x60;business&#x60; if the owner of a phone number is a business. If the owner is an individual the value will be &#x60;consumer&#x60;. The value will be &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   */
  @JsonAdapter(CallerTypeEnum.Adapter.class)
  public enum CallerTypeEnum {
    BUSINESS("business"),
    
    CONSUMER("consumer"),
    
    UNKNOWN("unknown");

    private String value;

    CallerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallerTypeEnum fromValue(String value) {
      for (CallerTypeEnum b : CallerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALLER_TYPE = "caller_type";
  @SerializedName(SERIALIZED_NAME_CALLER_TYPE)
  private CallerTypeEnum callerType;

  public static final String SERIALIZED_NAME_CURRENT_CARRIER = "current_carrier";
  @SerializedName(SERIALIZED_NAME_CURRENT_CARRIER)
  private NiCurrentCarrierProperties currentCarrier;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_ORIGINAL_CARRIER = "original_carrier";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CARRIER)
  private NiInitialCarrierProperties originalCarrier;

  /**
   * If the user has changed carrier for &#x60;number&#x60;. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
   */
  @JsonAdapter(PortedEnum.Adapter.class)
  public enum PortedEnum {
    UNKNOWN("unknown"),
    
    PORTED("ported"),
    
    NOT_PORTED("not_ported"),
    
    ASSUMED_NOT_PORTED("assumed_not_ported"),
    
    ASSUMED_PORTED("assumed_ported"),
    
    NULL("null");

    private String value;

    PortedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortedEnum fromValue(String value) {
      for (PortedEnum b : PortedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PortedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PortedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PORTED = "ported";
  @SerializedName(SERIALIZED_NAME_PORTED)
  private PortedEnum ported;

  public static final String SERIALIZED_NAME_REFUND_PRICE = "refund_price";
  @SerializedName(SERIALIZED_NAME_REFUND_PRICE)
  private String refundPrice;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining_balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private String remainingBalance;

  public static final String SERIALIZED_NAME_REQUEST_PRICE = "request_price";
  @SerializedName(SERIALIZED_NAME_REQUEST_PRICE)
  private String requestPrice;

  public NiResponseJsonStandard() {
  }

  public NiResponseJsonStandard countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Two character country code for &#x60;number&#x60;. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public NiResponseJsonStandard countryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

  /**
   * Three character country code for &#x60;number&#x60;. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
   * @return countryCodeIso3
   */
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }

  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public NiResponseJsonStandard countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * The full name of the country that &#x60;number&#x60; is registered in.
   * @return countryName
   */
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public NiResponseJsonStandard countryPrefix(String countryPrefix) {
    this.countryPrefix = countryPrefix;
    return this;
  }

  /**
   * The numeric prefix for the country that &#x60;number&#x60; is registered in.
   * @return countryPrefix
   */
  @javax.annotation.Nullable
  public String getCountryPrefix() {
    return countryPrefix;
  }

  public void setCountryPrefix(String countryPrefix) {
    this.countryPrefix = countryPrefix;
  }


  public NiResponseJsonStandard internationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request in international format.
   * @return internationalFormatNumber
   */
  @javax.annotation.Nullable
  public String getInternationalFormatNumber() {
    return internationalFormatNumber;
  }

  public void setInternationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
  }


  public NiResponseJsonStandard nationalFormatNumber(String nationalFormatNumber) {
    this.nationalFormatNumber = nationalFormatNumber;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request in the format used by the country the number belongs to.
   * @return nationalFormatNumber
   */
  @javax.annotation.Nullable
  public String getNationalFormatNumber() {
    return nationalFormatNumber;
  }

  public void setNationalFormatNumber(String nationalFormatNumber) {
    this.nationalFormatNumber = nationalFormatNumber;
  }


  public NiResponseJsonStandard requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NiResponseJsonStandard status(NiBasicStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public NiBasicStatus getStatus() {
    return status;
  }

  public void setStatus(NiBasicStatus status) {
    this.status = status;
  }


  public NiResponseJsonStandard statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * The status description of your request.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public NiResponseJsonStandard callerIdentity(NiCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
    return this;
  }

  /**
   * Get callerIdentity
   * @return callerIdentity
   */
  @javax.annotation.Nullable
  public NiCallerIdentity getCallerIdentity() {
    return callerIdentity;
  }

  public void setCallerIdentity(NiCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
  }


  public NiResponseJsonStandard callerName(String callerName) {
    this.callerName = callerName;
    return this;
  }

  /**
   * Full name of the person or business who owns the phone number. &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return callerName
   */
  @javax.annotation.Nullable
  public String getCallerName() {
    return callerName;
  }

  public void setCallerName(String callerName) {
    this.callerName = callerName;
  }


  public NiResponseJsonStandard callerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
    return this;
  }

  /**
   * The value will be &#x60;business&#x60; if the owner of a phone number is a business. If the owner is an individual the value will be &#x60;consumer&#x60;. The value will be &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return callerType
   */
  @javax.annotation.Nullable
  public CallerTypeEnum getCallerType() {
    return callerType;
  }

  public void setCallerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
  }


  public NiResponseJsonStandard currentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
    return this;
  }

  /**
   * Get currentCarrier
   * @return currentCarrier
   */
  @javax.annotation.Nullable
  public NiCurrentCarrierProperties getCurrentCarrier() {
    return currentCarrier;
  }

  public void setCurrentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
  }


  public NiResponseJsonStandard firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public NiResponseJsonStandard lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public NiResponseJsonStandard originalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
    return this;
  }

  /**
   * Get originalCarrier
   * @return originalCarrier
   */
  @javax.annotation.Nullable
  public NiInitialCarrierProperties getOriginalCarrier() {
    return originalCarrier;
  }

  public void setOriginalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
  }


  public NiResponseJsonStandard ported(PortedEnum ported) {
    this.ported = ported;
    return this;
  }

  /**
   * If the user has changed carrier for &#x60;number&#x60;. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
   * @return ported
   */
  @javax.annotation.Nullable
  public PortedEnum getPorted() {
    return ported;
  }

  public void setPorted(PortedEnum ported) {
    this.ported = ported;
  }


  public NiResponseJsonStandard refundPrice(String refundPrice) {
    this.refundPrice = refundPrice;
    return this;
  }

  /**
   * If there is an internal lookup error, the &#x60;refund_price&#x60; will reflect the lookup price. If &#x60;cnam&#x60; is requested for a non-US number the &#x60;refund_price&#x60; will reflect the &#x60;cnam&#x60; price. If both of these conditions occur, &#x60;refund_price&#x60; is the sum of the lookup price and &#x60;cnam&#x60; price.
   * @return refundPrice
   */
  @javax.annotation.Nullable
  public String getRefundPrice() {
    return refundPrice;
  }

  public void setRefundPrice(String refundPrice) {
    this.refundPrice = refundPrice;
  }


  public NiResponseJsonStandard remainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

  /**
   * Your account balance in EUR after this request.
   * @return remainingBalance
   */
  @javax.annotation.Nullable
  public String getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  public NiResponseJsonStandard requestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
    return this;
  }

  /**
   * The amount in EUR charged to your account.
   * @return requestPrice
   */
  @javax.annotation.Nullable
  public String getRequestPrice() {
    return requestPrice;
  }

  public void setRequestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiResponseJsonStandard niResponseJsonStandard = (NiResponseJsonStandard) o;
    return Objects.equals(this.countryCode, niResponseJsonStandard.countryCode) &&
        Objects.equals(this.countryCodeIso3, niResponseJsonStandard.countryCodeIso3) &&
        Objects.equals(this.countryName, niResponseJsonStandard.countryName) &&
        Objects.equals(this.countryPrefix, niResponseJsonStandard.countryPrefix) &&
        Objects.equals(this.internationalFormatNumber, niResponseJsonStandard.internationalFormatNumber) &&
        Objects.equals(this.nationalFormatNumber, niResponseJsonStandard.nationalFormatNumber) &&
        Objects.equals(this.requestId, niResponseJsonStandard.requestId) &&
        Objects.equals(this.status, niResponseJsonStandard.status) &&
        Objects.equals(this.statusMessage, niResponseJsonStandard.statusMessage) &&
        Objects.equals(this.callerIdentity, niResponseJsonStandard.callerIdentity) &&
        Objects.equals(this.callerName, niResponseJsonStandard.callerName) &&
        Objects.equals(this.callerType, niResponseJsonStandard.callerType) &&
        Objects.equals(this.currentCarrier, niResponseJsonStandard.currentCarrier) &&
        Objects.equals(this.firstName, niResponseJsonStandard.firstName) &&
        Objects.equals(this.lastName, niResponseJsonStandard.lastName) &&
        Objects.equals(this.originalCarrier, niResponseJsonStandard.originalCarrier) &&
        Objects.equals(this.ported, niResponseJsonStandard.ported) &&
        Objects.equals(this.refundPrice, niResponseJsonStandard.refundPrice) &&
        Objects.equals(this.remainingBalance, niResponseJsonStandard.remainingBalance) &&
        Objects.equals(this.requestPrice, niResponseJsonStandard.requestPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, countryCodeIso3, countryName, countryPrefix, internationalFormatNumber, nationalFormatNumber, requestId, status, statusMessage, callerIdentity, callerName, callerType, currentCarrier, firstName, lastName, originalCarrier, ported, refundPrice, remainingBalance, requestPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiResponseJsonStandard {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryPrefix: ").append(toIndentedString(countryPrefix)).append("\n");
    sb.append("    internationalFormatNumber: ").append(toIndentedString(internationalFormatNumber)).append("\n");
    sb.append("    nationalFormatNumber: ").append(toIndentedString(nationalFormatNumber)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    callerIdentity: ").append(toIndentedString(callerIdentity)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    callerType: ").append(toIndentedString(callerType)).append("\n");
    sb.append("    currentCarrier: ").append(toIndentedString(currentCarrier)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    originalCarrier: ").append(toIndentedString(originalCarrier)).append("\n");
    sb.append("    ported: ").append(toIndentedString(ported)).append("\n");
    sb.append("    refundPrice: ").append(toIndentedString(refundPrice)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("    requestPrice: ").append(toIndentedString(requestPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country_code");
    openapiFields.add("country_code_iso3");
    openapiFields.add("country_name");
    openapiFields.add("country_prefix");
    openapiFields.add("international_format_number");
    openapiFields.add("national_format_number");
    openapiFields.add("request_id");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("caller_identity");
    openapiFields.add("caller_name");
    openapiFields.add("caller_type");
    openapiFields.add("current_carrier");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("original_carrier");
    openapiFields.add("ported");
    openapiFields.add("refund_price");
    openapiFields.add("remaining_balance");
    openapiFields.add("request_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiResponseJsonStandard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiResponseJsonStandard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiResponseJsonStandard is not found in the empty JSON string", NiResponseJsonStandard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiResponseJsonStandard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiResponseJsonStandard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("country_code_iso3") != null && !jsonObj.get("country_code_iso3").isJsonNull()) && !jsonObj.get("country_code_iso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code_iso3").toString()));
      }
      if ((jsonObj.get("country_name") != null && !jsonObj.get("country_name").isJsonNull()) && !jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if ((jsonObj.get("country_prefix") != null && !jsonObj.get("country_prefix").isJsonNull()) && !jsonObj.get("country_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_prefix").toString()));
      }
      if ((jsonObj.get("international_format_number") != null && !jsonObj.get("international_format_number").isJsonNull()) && !jsonObj.get("international_format_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_format_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_format_number").toString()));
      }
      if ((jsonObj.get("national_format_number") != null && !jsonObj.get("national_format_number").isJsonNull()) && !jsonObj.get("national_format_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_format_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_format_number").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        NiBasicStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      // validate the optional field `caller_identity`
      if (jsonObj.get("caller_identity") != null && !jsonObj.get("caller_identity").isJsonNull()) {
        NiCallerIdentity.validateJsonElement(jsonObj.get("caller_identity"));
      }
      if ((jsonObj.get("caller_name") != null && !jsonObj.get("caller_name").isJsonNull()) && !jsonObj.get("caller_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller_name").toString()));
      }
      if ((jsonObj.get("caller_type") != null && !jsonObj.get("caller_type").isJsonNull()) && !jsonObj.get("caller_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller_type").toString()));
      }
      // validate the optional field `caller_type`
      if (jsonObj.get("caller_type") != null && !jsonObj.get("caller_type").isJsonNull()) {
        CallerTypeEnum.validateJsonElement(jsonObj.get("caller_type"));
      }
      // validate the optional field `current_carrier`
      if (jsonObj.get("current_carrier") != null && !jsonObj.get("current_carrier").isJsonNull()) {
        NiCurrentCarrierProperties.validateJsonElement(jsonObj.get("current_carrier"));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      // validate the optional field `original_carrier`
      if (jsonObj.get("original_carrier") != null && !jsonObj.get("original_carrier").isJsonNull()) {
        NiInitialCarrierProperties.validateJsonElement(jsonObj.get("original_carrier"));
      }
      if ((jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) && !jsonObj.get("ported").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ported` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ported").toString()));
      }
      // validate the optional field `ported`
      if (jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) {
        PortedEnum.validateJsonElement(jsonObj.get("ported"));
      }
      if ((jsonObj.get("refund_price") != null && !jsonObj.get("refund_price").isJsonNull()) && !jsonObj.get("refund_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_price").toString()));
      }
      if ((jsonObj.get("remaining_balance") != null && !jsonObj.get("remaining_balance").isJsonNull()) && !jsonObj.get("remaining_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining_balance").toString()));
      }
      if ((jsonObj.get("request_price") != null && !jsonObj.get("request_price").isJsonNull()) && !jsonObj.get("request_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiResponseJsonStandard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiResponseJsonStandard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiResponseJsonStandard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiResponseJsonStandard.class));

       return (TypeAdapter<T>) new TypeAdapter<NiResponseJsonStandard>() {
           @Override
           public void write(JsonWriter out, NiResponseJsonStandard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiResponseJsonStandard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiResponseJsonStandard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiResponseJsonStandard
   * @throws IOException if the JSON string is invalid with respect to NiResponseJsonStandard
   */
  public static NiResponseJsonStandard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiResponseJsonStandard.class);
  }

  /**
   * Convert an instance of NiResponseJsonStandard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

