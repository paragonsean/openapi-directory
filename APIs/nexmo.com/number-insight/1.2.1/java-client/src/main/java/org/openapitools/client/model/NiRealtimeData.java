/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Real time data about the &#x60;number&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiRealtimeData {
  public static final String SERIALIZED_NAME_ACTIVE_STATUS = "active_status";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STATUS)
  private String activeStatus;

  public static final String SERIALIZED_NAME_HANDSET_STATUS = "handset_status";
  @SerializedName(SERIALIZED_NAME_HANDSET_STATUS)
  private String handsetStatus;

  public NiRealtimeData() {
  }

  public NiRealtimeData activeStatus(String activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  /**
   * Whether the end-user&#39;s phone number is active within an operator&#39;s &#x60;network&#x60;. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or null.
   * @return activeStatus
   */
  @javax.annotation.Nullable
  public String getActiveStatus() {
    return activeStatus;
  }

  public void setActiveStatus(String activeStatus) {
    this.activeStatus = activeStatus;
  }


  public NiRealtimeData handsetStatus(String handsetStatus) {
    this.handsetStatus = handsetStatus;
    return this;
  }

  /**
   * Whether the end-user&#39;s handset is turned on or off.
   * @return handsetStatus
   */
  @javax.annotation.Nullable
  public String getHandsetStatus() {
    return handsetStatus;
  }

  public void setHandsetStatus(String handsetStatus) {
    this.handsetStatus = handsetStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiRealtimeData niRealtimeData = (NiRealtimeData) o;
    return Objects.equals(this.activeStatus, niRealtimeData.activeStatus) &&
        Objects.equals(this.handsetStatus, niRealtimeData.handsetStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeStatus, handsetStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiRealtimeData {\n");
    sb.append("    activeStatus: ").append(toIndentedString(activeStatus)).append("\n");
    sb.append("    handsetStatus: ").append(toIndentedString(handsetStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_status");
    openapiFields.add("handset_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiRealtimeData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiRealtimeData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiRealtimeData is not found in the empty JSON string", NiRealtimeData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiRealtimeData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiRealtimeData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_status") != null && !jsonObj.get("active_status").isJsonNull()) && !jsonObj.get("active_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_status").toString()));
      }
      if ((jsonObj.get("handset_status") != null && !jsonObj.get("handset_status").isJsonNull()) && !jsonObj.get("handset_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handset_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handset_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiRealtimeData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiRealtimeData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiRealtimeData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiRealtimeData.class));

       return (TypeAdapter<T>) new TypeAdapter<NiRealtimeData>() {
           @Override
           public void write(JsonWriter out, NiRealtimeData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiRealtimeData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiRealtimeData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiRealtimeData
   * @throws IOException if the JSON string is invalid with respect to NiRealtimeData
   */
  public static NiRealtimeData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiRealtimeData.class);
  }

  /**
   * Convert an instance of NiRealtimeData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

