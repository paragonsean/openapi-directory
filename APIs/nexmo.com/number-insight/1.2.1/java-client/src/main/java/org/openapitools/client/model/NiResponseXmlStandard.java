/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NiCurrentCarrierProperties;
import org.openapitools.client.model.NiInitialCarrierProperties;
import org.openapitools.client.model.NiResponseXmlBasicError;
import org.openapitools.client.model.NiResponseXmlBasicLocalNumber;
import org.openapitools.client.model.NiResponseXmlStandardCallerIdentity;
import org.openapitools.client.model.NiResponseXmlStandardPorted;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiResponseXmlStandard {
  public static final String SERIALIZED_NAME_CALLER_IDENTITY = "caller_identity";
  @SerializedName(SERIALIZED_NAME_CALLER_IDENTITY)
  private NiResponseXmlStandardCallerIdentity callerIdentity;

  public static final String SERIALIZED_NAME_CURRENT_CARRIER = "current_carrier";
  @SerializedName(SERIALIZED_NAME_CURRENT_CARRIER)
  private NiCurrentCarrierProperties currentCarrier;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private NiResponseXmlBasicError error;

  public static final String SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER = "international_format_number";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER)
  private String internationalFormatNumber;

  public static final String SERIALIZED_NAME_LOCAL_NUMBER = "local_number";
  @SerializedName(SERIALIZED_NAME_LOCAL_NUMBER)
  private NiResponseXmlBasicLocalNumber localNumber;

  public static final String SERIALIZED_NAME_ORIGINAL_CARRIER = "original_carrier";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CARRIER)
  private NiInitialCarrierProperties originalCarrier;

  public static final String SERIALIZED_NAME_PORTED = "ported";
  @SerializedName(SERIALIZED_NAME_PORTED)
  private NiResponseXmlStandardPorted ported;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining_balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private String remainingBalance;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_PRICE = "request_price";
  @SerializedName(SERIALIZED_NAME_REQUEST_PRICE)
  private String requestPrice;

  public NiResponseXmlStandard() {
  }

  public NiResponseXmlStandard callerIdentity(NiResponseXmlStandardCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
    return this;
  }

  /**
   * Get callerIdentity
   * @return callerIdentity
   */
  @javax.annotation.Nullable
  public NiResponseXmlStandardCallerIdentity getCallerIdentity() {
    return callerIdentity;
  }

  public void setCallerIdentity(NiResponseXmlStandardCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
  }


  public NiResponseXmlStandard currentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
    return this;
  }

  /**
   * Get currentCarrier
   * @return currentCarrier
   */
  @javax.annotation.Nullable
  public NiCurrentCarrierProperties getCurrentCarrier() {
    return currentCarrier;
  }

  public void setCurrentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
  }


  public NiResponseXmlStandard error(NiResponseXmlBasicError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public NiResponseXmlBasicError getError() {
    return error;
  }

  public void setError(NiResponseXmlBasicError error) {
    this.error = error;
  }


  public NiResponseXmlStandard internationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request in international format.
   * @return internationalFormatNumber
   */
  @javax.annotation.Nullable
  public String getInternationalFormatNumber() {
    return internationalFormatNumber;
  }

  public void setInternationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
  }


  public NiResponseXmlStandard localNumber(NiResponseXmlBasicLocalNumber localNumber) {
    this.localNumber = localNumber;
    return this;
  }

  /**
   * Get localNumber
   * @return localNumber
   */
  @javax.annotation.Nullable
  public NiResponseXmlBasicLocalNumber getLocalNumber() {
    return localNumber;
  }

  public void setLocalNumber(NiResponseXmlBasicLocalNumber localNumber) {
    this.localNumber = localNumber;
  }


  public NiResponseXmlStandard originalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
    return this;
  }

  /**
   * Get originalCarrier
   * @return originalCarrier
   */
  @javax.annotation.Nullable
  public NiInitialCarrierProperties getOriginalCarrier() {
    return originalCarrier;
  }

  public void setOriginalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
  }


  public NiResponseXmlStandard ported(NiResponseXmlStandardPorted ported) {
    this.ported = ported;
    return this;
  }

  /**
   * Get ported
   * @return ported
   */
  @javax.annotation.Nullable
  public NiResponseXmlStandardPorted getPorted() {
    return ported;
  }

  public void setPorted(NiResponseXmlStandardPorted ported) {
    this.ported = ported;
  }


  public NiResponseXmlStandard remainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

  /**
   * Your account balance in EUR after this request.
   * @return remainingBalance
   */
  @javax.annotation.Nullable
  public String getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  public NiResponseXmlStandard requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NiResponseXmlStandard requestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
    return this;
  }

  /**
   * If there is an internal lookup error, the &#x60;refund_price&#x60; will reflect the lookup price. If &#x60;cnam&#x60; is requested for a non-US number the &#x60;refund_price&#x60; will reflect the &#x60;cnam&#x60; price. If both of these conditions occur, &#x60;refund_price&#x60; is the sum of the lookup price and &#x60;cnam&#x60; price.
   * @return requestPrice
   */
  @javax.annotation.Nullable
  public String getRequestPrice() {
    return requestPrice;
  }

  public void setRequestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiResponseXmlStandard niResponseXmlStandard = (NiResponseXmlStandard) o;
    return Objects.equals(this.callerIdentity, niResponseXmlStandard.callerIdentity) &&
        Objects.equals(this.currentCarrier, niResponseXmlStandard.currentCarrier) &&
        Objects.equals(this.error, niResponseXmlStandard.error) &&
        Objects.equals(this.internationalFormatNumber, niResponseXmlStandard.internationalFormatNumber) &&
        Objects.equals(this.localNumber, niResponseXmlStandard.localNumber) &&
        Objects.equals(this.originalCarrier, niResponseXmlStandard.originalCarrier) &&
        Objects.equals(this.ported, niResponseXmlStandard.ported) &&
        Objects.equals(this.remainingBalance, niResponseXmlStandard.remainingBalance) &&
        Objects.equals(this.requestId, niResponseXmlStandard.requestId) &&
        Objects.equals(this.requestPrice, niResponseXmlStandard.requestPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerIdentity, currentCarrier, error, internationalFormatNumber, localNumber, originalCarrier, ported, remainingBalance, requestId, requestPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiResponseXmlStandard {\n");
    sb.append("    callerIdentity: ").append(toIndentedString(callerIdentity)).append("\n");
    sb.append("    currentCarrier: ").append(toIndentedString(currentCarrier)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    internationalFormatNumber: ").append(toIndentedString(internationalFormatNumber)).append("\n");
    sb.append("    localNumber: ").append(toIndentedString(localNumber)).append("\n");
    sb.append("    originalCarrier: ").append(toIndentedString(originalCarrier)).append("\n");
    sb.append("    ported: ").append(toIndentedString(ported)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestPrice: ").append(toIndentedString(requestPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caller_identity");
    openapiFields.add("current_carrier");
    openapiFields.add("error");
    openapiFields.add("international_format_number");
    openapiFields.add("local_number");
    openapiFields.add("original_carrier");
    openapiFields.add("ported");
    openapiFields.add("remaining_balance");
    openapiFields.add("request_id");
    openapiFields.add("request_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiResponseXmlStandard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiResponseXmlStandard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiResponseXmlStandard is not found in the empty JSON string", NiResponseXmlStandard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiResponseXmlStandard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiResponseXmlStandard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `caller_identity`
      if (jsonObj.get("caller_identity") != null && !jsonObj.get("caller_identity").isJsonNull()) {
        NiResponseXmlStandardCallerIdentity.validateJsonElement(jsonObj.get("caller_identity"));
      }
      // validate the optional field `current_carrier`
      if (jsonObj.get("current_carrier") != null && !jsonObj.get("current_carrier").isJsonNull()) {
        NiCurrentCarrierProperties.validateJsonElement(jsonObj.get("current_carrier"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        NiResponseXmlBasicError.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("international_format_number") != null && !jsonObj.get("international_format_number").isJsonNull()) && !jsonObj.get("international_format_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_format_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_format_number").toString()));
      }
      // validate the optional field `local_number`
      if (jsonObj.get("local_number") != null && !jsonObj.get("local_number").isJsonNull()) {
        NiResponseXmlBasicLocalNumber.validateJsonElement(jsonObj.get("local_number"));
      }
      // validate the optional field `original_carrier`
      if (jsonObj.get("original_carrier") != null && !jsonObj.get("original_carrier").isJsonNull()) {
        NiInitialCarrierProperties.validateJsonElement(jsonObj.get("original_carrier"));
      }
      // validate the optional field `ported`
      if (jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) {
        NiResponseXmlStandardPorted.validateJsonElement(jsonObj.get("ported"));
      }
      if ((jsonObj.get("remaining_balance") != null && !jsonObj.get("remaining_balance").isJsonNull()) && !jsonObj.get("remaining_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining_balance").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("request_price") != null && !jsonObj.get("request_price").isJsonNull()) && !jsonObj.get("request_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiResponseXmlStandard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiResponseXmlStandard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiResponseXmlStandard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiResponseXmlStandard.class));

       return (TypeAdapter<T>) new TypeAdapter<NiResponseXmlStandard>() {
           @Override
           public void write(JsonWriter out, NiResponseXmlStandard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiResponseXmlStandard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiResponseXmlStandard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiResponseXmlStandard
   * @throws IOException if the JSON string is invalid with respect to NiResponseXmlStandard
   */
  public static NiResponseXmlStandard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiResponseXmlStandard.class);
  }

  /**
   * Convert an instance of NiResponseXmlStandard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

