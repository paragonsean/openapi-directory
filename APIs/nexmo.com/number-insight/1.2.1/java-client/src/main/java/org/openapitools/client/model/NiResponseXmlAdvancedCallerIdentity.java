/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details of the number owner, if &#x60;cnam&#x60; was set to &#x60;true&#x60; in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiResponseXmlAdvancedCallerIdentity {
  public static final String SERIALIZED_NAME_CALLER_NAME = "caller-name";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private String callerName;

  /**
   * The value will be &#x60;business&#x60; if the owner of a phone number is a business. If the owner is an individual the value will be &#x60;consumer&#x60;. The value will be &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   */
  @JsonAdapter(CallerTypeEnum.Adapter.class)
  public enum CallerTypeEnum {
    BUSINESS("business"),
    
    CONSUMER("consumer"),
    
    UNKNOWN("unknown");

    private String value;

    CallerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallerTypeEnum fromValue(String value) {
      for (CallerTypeEnum b : CallerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALLER_TYPE = "caller-type";
  @SerializedName(SERIALIZED_NAME_CALLER_TYPE)
  private CallerTypeEnum callerType;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first-name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last-name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public NiResponseXmlAdvancedCallerIdentity() {
  }

  public NiResponseXmlAdvancedCallerIdentity callerName(String callerName) {
    this.callerName = callerName;
    return this;
  }

  /**
   * Full name of the person or business who owns the phone number. &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return callerName
   */
  @javax.annotation.Nullable
  public String getCallerName() {
    return callerName;
  }

  public void setCallerName(String callerName) {
    this.callerName = callerName;
  }


  public NiResponseXmlAdvancedCallerIdentity callerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
    return this;
  }

  /**
   * The value will be &#x60;business&#x60; if the owner of a phone number is a business. If the owner is an individual the value will be &#x60;consumer&#x60;. The value will be &#x60;unknown&#x60; if this information is not available. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return callerType
   */
  @javax.annotation.Nullable
  public CallerTypeEnum getCallerType() {
    return callerType;
  }

  public void setCallerType(CallerTypeEnum callerType) {
    this.callerType = callerType;
  }


  public NiResponseXmlAdvancedCallerIdentity firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public NiResponseXmlAdvancedCallerIdentity lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if &#x60;cnam&#x60; had a value of &#x60;true&#x60; within the request.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiResponseXmlAdvancedCallerIdentity niResponseXmlAdvancedCallerIdentity = (NiResponseXmlAdvancedCallerIdentity) o;
    return Objects.equals(this.callerName, niResponseXmlAdvancedCallerIdentity.callerName) &&
        Objects.equals(this.callerType, niResponseXmlAdvancedCallerIdentity.callerType) &&
        Objects.equals(this.firstName, niResponseXmlAdvancedCallerIdentity.firstName) &&
        Objects.equals(this.lastName, niResponseXmlAdvancedCallerIdentity.lastName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerName, callerType, firstName, lastName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiResponseXmlAdvancedCallerIdentity {\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    callerType: ").append(toIndentedString(callerType)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caller-name");
    openapiFields.add("caller-type");
    openapiFields.add("first-name");
    openapiFields.add("last-name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiResponseXmlAdvancedCallerIdentity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiResponseXmlAdvancedCallerIdentity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiResponseXmlAdvancedCallerIdentity is not found in the empty JSON string", NiResponseXmlAdvancedCallerIdentity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiResponseXmlAdvancedCallerIdentity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiResponseXmlAdvancedCallerIdentity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caller-name") != null && !jsonObj.get("caller-name").isJsonNull()) && !jsonObj.get("caller-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller-name").toString()));
      }
      if ((jsonObj.get("caller-type") != null && !jsonObj.get("caller-type").isJsonNull()) && !jsonObj.get("caller-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller-type").toString()));
      }
      // validate the optional field `caller-type`
      if (jsonObj.get("caller-type") != null && !jsonObj.get("caller-type").isJsonNull()) {
        CallerTypeEnum.validateJsonElement(jsonObj.get("caller-type"));
      }
      if ((jsonObj.get("first-name") != null && !jsonObj.get("first-name").isJsonNull()) && !jsonObj.get("first-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first-name").toString()));
      }
      if ((jsonObj.get("last-name") != null && !jsonObj.get("last-name").isJsonNull()) && !jsonObj.get("last-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiResponseXmlAdvancedCallerIdentity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiResponseXmlAdvancedCallerIdentity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiResponseXmlAdvancedCallerIdentity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiResponseXmlAdvancedCallerIdentity.class));

       return (TypeAdapter<T>) new TypeAdapter<NiResponseXmlAdvancedCallerIdentity>() {
           @Override
           public void write(JsonWriter out, NiResponseXmlAdvancedCallerIdentity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiResponseXmlAdvancedCallerIdentity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiResponseXmlAdvancedCallerIdentity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiResponseXmlAdvancedCallerIdentity
   * @throws IOException if the JSON string is invalid with respect to NiResponseXmlAdvancedCallerIdentity
   */
  public static NiResponseXmlAdvancedCallerIdentity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiResponseXmlAdvancedCallerIdentity.class);
  }

  /**
   * Convert an instance of NiResponseXmlAdvancedCallerIdentity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

