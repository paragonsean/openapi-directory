/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NiCallerIdentity;
import org.openapitools.client.model.NiCurrentCarrierProperties;
import org.openapitools.client.model.NiInitialCarrierProperties;
import org.openapitools.client.model.NiStandardAdvancedStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Unknown Roaming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiResponseJsonAdvancedRoamingUnknown {
  public static final String SERIALIZED_NAME_CALLER_IDENTITY = "caller_identity";
  @SerializedName(SERIALIZED_NAME_CALLER_IDENTITY)
  private NiCallerIdentity callerIdentity;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "country_code_iso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_COUNTRY_PREFIX = "country_prefix";
  @SerializedName(SERIALIZED_NAME_COUNTRY_PREFIX)
  private String countryPrefix;

  public static final String SERIALIZED_NAME_CURRENT_CARRIER = "current_carrier";
  @SerializedName(SERIALIZED_NAME_CURRENT_CARRIER)
  private NiCurrentCarrierProperties currentCarrier;

  public static final String SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER = "international_format_number";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_FORMAT_NUMBER)
  private String internationalFormatNumber;

  /**
   * Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed 
   */
  @JsonAdapter(LookupOutcomeEnum.Adapter.class)
  public enum LookupOutcomeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    LookupOutcomeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LookupOutcomeEnum fromValue(Integer value) {
      for (LookupOutcomeEnum b : LookupOutcomeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LookupOutcomeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LookupOutcomeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LookupOutcomeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return LookupOutcomeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      LookupOutcomeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOOKUP_OUTCOME = "lookup_outcome";
  @SerializedName(SERIALIZED_NAME_LOOKUP_OUTCOME)
  private LookupOutcomeEnum lookupOutcome;

  public static final String SERIALIZED_NAME_LOOKUP_OUTCOME_MESSAGE = "lookup_outcome_message";
  @SerializedName(SERIALIZED_NAME_LOOKUP_OUTCOME_MESSAGE)
  private String lookupOutcomeMessage;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT_NUMBER = "national_format_number";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT_NUMBER)
  private String nationalFormatNumber;

  public static final String SERIALIZED_NAME_ORIGINAL_CARRIER = "original_carrier";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CARRIER)
  private NiInitialCarrierProperties originalCarrier;

  /**
   * If the user has changed carrier for &#x60;number&#x60;. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
   */
  @JsonAdapter(PortedEnum.Adapter.class)
  public enum PortedEnum {
    UNKNOWN("unknown"),
    
    PORTED("ported"),
    
    NOT_PORTED("not_ported"),
    
    ASSUMED_NOT_PORTED("assumed_not_ported"),
    
    ASSUMED_PORTED("assumed_ported"),
    
    NULL("null");

    private String value;

    PortedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortedEnum fromValue(String value) {
      for (PortedEnum b : PortedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PortedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PortedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PORTED = "ported";
  @SerializedName(SERIALIZED_NAME_PORTED)
  private PortedEnum ported;

  /**
   * Can you call &#x60;number&#x60; now. This is applicable to mobile numbers only.
   */
  @JsonAdapter(ReachableEnum.Adapter.class)
  public enum ReachableEnum {
    UNKNOWN("unknown"),
    
    REACHABLE("reachable"),
    
    UNDELIVERABLE("undeliverable"),
    
    ABSENT("absent"),
    
    BAD_NUMBER("bad_number"),
    
    BLACKLISTED("blacklisted"),
    
    NULL("null");

    private String value;

    ReachableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReachableEnum fromValue(String value) {
      for (ReachableEnum b : ReachableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReachableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReachableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReachableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReachableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReachableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REACHABLE = "reachable";
  @SerializedName(SERIALIZED_NAME_REACHABLE)
  private ReachableEnum reachable;

  public static final String SERIALIZED_NAME_REFUND_PRICE = "refund_price";
  @SerializedName(SERIALIZED_NAME_REFUND_PRICE)
  private String refundPrice;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining_balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private String remainingBalance;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_PRICE = "request_price";
  @SerializedName(SERIALIZED_NAME_REQUEST_PRICE)
  private String requestPrice;

  /**
   * Gets or Sets roaming
   */
  @JsonAdapter(RoamingEnum.Adapter.class)
  public enum RoamingEnum {
    UNKNOWN("unknown");

    private String value;

    RoamingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoamingEnum fromValue(String value) {
      for (RoamingEnum b : RoamingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoamingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoamingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoamingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoamingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoamingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROAMING = "roaming";
  @SerializedName(SERIALIZED_NAME_ROAMING)
  private RoamingEnum roaming;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NiStandardAdvancedStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  /**
   * Does &#x60;number&#x60; exist. &#x60;unknown&#x60; means the number could not be validated. &#x60;valid&#x60; means the number is valid. &#x60;not_valid&#x60; means the number is not valid. &#x60;inferred_not_valid&#x60; means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.
   */
  @JsonAdapter(ValidNumberEnum.Adapter.class)
  public enum ValidNumberEnum {
    UNKNOWN("unknown"),
    
    VALID("valid"),
    
    NOT_VALID("not_valid"),
    
    INFERRED("inferred"),
    
    INFERRED_NOT_VALID("inferred_not_valid");

    private String value;

    ValidNumberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidNumberEnum fromValue(String value) {
      for (ValidNumberEnum b : ValidNumberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidNumberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidNumberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidNumberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidNumberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidNumberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALID_NUMBER = "valid_number";
  @SerializedName(SERIALIZED_NAME_VALID_NUMBER)
  private ValidNumberEnum validNumber;

  public NiResponseJsonAdvancedRoamingUnknown() {
  }

  public NiResponseJsonAdvancedRoamingUnknown callerIdentity(NiCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
    return this;
  }

  /**
   * Get callerIdentity
   * @return callerIdentity
   */
  @javax.annotation.Nullable
  public NiCallerIdentity getCallerIdentity() {
    return callerIdentity;
  }

  public void setCallerIdentity(NiCallerIdentity callerIdentity) {
    this.callerIdentity = callerIdentity;
  }


  public NiResponseJsonAdvancedRoamingUnknown countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Two character country code for &#x60;number&#x60;. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public NiResponseJsonAdvancedRoamingUnknown countryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

  /**
   * Three character country code for &#x60;number&#x60;. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
   * @return countryCodeIso3
   */
  @javax.annotation.Nonnull
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }

  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public NiResponseJsonAdvancedRoamingUnknown countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * The full name of the country that &#x60;number&#x60; is registered in.
   * @return countryName
   */
  @javax.annotation.Nonnull
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public NiResponseJsonAdvancedRoamingUnknown countryPrefix(String countryPrefix) {
    this.countryPrefix = countryPrefix;
    return this;
  }

  /**
   * The numeric prefix for the country that &#x60;number&#x60; is registered in.
   * @return countryPrefix
   */
  @javax.annotation.Nonnull
  public String getCountryPrefix() {
    return countryPrefix;
  }

  public void setCountryPrefix(String countryPrefix) {
    this.countryPrefix = countryPrefix;
  }


  public NiResponseJsonAdvancedRoamingUnknown currentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
    return this;
  }

  /**
   * Get currentCarrier
   * @return currentCarrier
   */
  @javax.annotation.Nullable
  public NiCurrentCarrierProperties getCurrentCarrier() {
    return currentCarrier;
  }

  public void setCurrentCarrier(NiCurrentCarrierProperties currentCarrier) {
    this.currentCarrier = currentCarrier;
  }


  public NiResponseJsonAdvancedRoamingUnknown internationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request in international format.
   * @return internationalFormatNumber
   */
  @javax.annotation.Nonnull
  public String getInternationalFormatNumber() {
    return internationalFormatNumber;
  }

  public void setInternationalFormatNumber(String internationalFormatNumber) {
    this.internationalFormatNumber = internationalFormatNumber;
  }


  public NiResponseJsonAdvancedRoamingUnknown lookupOutcome(LookupOutcomeEnum lookupOutcome) {
    this.lookupOutcome = lookupOutcome;
    return this;
  }

  /**
   * Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed 
   * @return lookupOutcome
   */
  @javax.annotation.Nullable
  public LookupOutcomeEnum getLookupOutcome() {
    return lookupOutcome;
  }

  public void setLookupOutcome(LookupOutcomeEnum lookupOutcome) {
    this.lookupOutcome = lookupOutcome;
  }


  public NiResponseJsonAdvancedRoamingUnknown lookupOutcomeMessage(String lookupOutcomeMessage) {
    this.lookupOutcomeMessage = lookupOutcomeMessage;
    return this;
  }

  /**
   * Shows if all information about a phone number has been returned.
   * @return lookupOutcomeMessage
   */
  @javax.annotation.Nullable
  public String getLookupOutcomeMessage() {
    return lookupOutcomeMessage;
  }

  public void setLookupOutcomeMessage(String lookupOutcomeMessage) {
    this.lookupOutcomeMessage = lookupOutcomeMessage;
  }


  public NiResponseJsonAdvancedRoamingUnknown nationalFormatNumber(String nationalFormatNumber) {
    this.nationalFormatNumber = nationalFormatNumber;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request in the format used by the country the number belongs to.
   * @return nationalFormatNumber
   */
  @javax.annotation.Nonnull
  public String getNationalFormatNumber() {
    return nationalFormatNumber;
  }

  public void setNationalFormatNumber(String nationalFormatNumber) {
    this.nationalFormatNumber = nationalFormatNumber;
  }


  public NiResponseJsonAdvancedRoamingUnknown originalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
    return this;
  }

  /**
   * Get originalCarrier
   * @return originalCarrier
   */
  @javax.annotation.Nullable
  public NiInitialCarrierProperties getOriginalCarrier() {
    return originalCarrier;
  }

  public void setOriginalCarrier(NiInitialCarrierProperties originalCarrier) {
    this.originalCarrier = originalCarrier;
  }


  public NiResponseJsonAdvancedRoamingUnknown ported(PortedEnum ported) {
    this.ported = ported;
    return this;
  }

  /**
   * If the user has changed carrier for &#x60;number&#x60;. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
   * @return ported
   */
  @javax.annotation.Nullable
  public PortedEnum getPorted() {
    return ported;
  }

  public void setPorted(PortedEnum ported) {
    this.ported = ported;
  }


  public NiResponseJsonAdvancedRoamingUnknown reachable(ReachableEnum reachable) {
    this.reachable = reachable;
    return this;
  }

  /**
   * Can you call &#x60;number&#x60; now. This is applicable to mobile numbers only.
   * @return reachable
   */
  @javax.annotation.Nullable
  public ReachableEnum getReachable() {
    return reachable;
  }

  public void setReachable(ReachableEnum reachable) {
    this.reachable = reachable;
  }


  public NiResponseJsonAdvancedRoamingUnknown refundPrice(String refundPrice) {
    this.refundPrice = refundPrice;
    return this;
  }

  /**
   * If there is an internal lookup error, the &#x60;refund_price&#x60; will reflect the lookup price. If &#x60;cnam&#x60; is requested for a non-US number the &#x60;refund_price&#x60; will reflect the &#x60;cnam&#x60; price. If both of these conditions occur, &#x60;refund_price&#x60; is the sum of the lookup price and &#x60;cnam&#x60; price.
   * @return refundPrice
   */
  @javax.annotation.Nullable
  public String getRefundPrice() {
    return refundPrice;
  }

  public void setRefundPrice(String refundPrice) {
    this.refundPrice = refundPrice;
  }


  public NiResponseJsonAdvancedRoamingUnknown remainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

  /**
   * Your account balance in EUR after this request.
   * @return remainingBalance
   */
  @javax.annotation.Nullable
  public String getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  public NiResponseJsonAdvancedRoamingUnknown requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NiResponseJsonAdvancedRoamingUnknown requestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
    return this;
  }

  /**
   * The amount in EUR charged to your account.
   * @return requestPrice
   */
  @javax.annotation.Nullable
  public String getRequestPrice() {
    return requestPrice;
  }

  public void setRequestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
  }


  public NiResponseJsonAdvancedRoamingUnknown roaming(RoamingEnum roaming) {
    this.roaming = roaming;
    return this;
  }

  /**
   * Get roaming
   * @return roaming
   */
  @javax.annotation.Nullable
  public RoamingEnum getRoaming() {
    return roaming;
  }

  public void setRoaming(RoamingEnum roaming) {
    this.roaming = roaming;
  }


  public NiResponseJsonAdvancedRoamingUnknown status(NiStandardAdvancedStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public NiStandardAdvancedStatus getStatus() {
    return status;
  }

  public void setStatus(NiStandardAdvancedStatus status) {
    this.status = status;
  }


  public NiResponseJsonAdvancedRoamingUnknown statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * The status description of your request.
   * @return statusMessage
   */
  @javax.annotation.Nonnull
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public NiResponseJsonAdvancedRoamingUnknown validNumber(ValidNumberEnum validNumber) {
    this.validNumber = validNumber;
    return this;
  }

  /**
   * Does &#x60;number&#x60; exist. &#x60;unknown&#x60; means the number could not be validated. &#x60;valid&#x60; means the number is valid. &#x60;not_valid&#x60; means the number is not valid. &#x60;inferred_not_valid&#x60; means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.
   * @return validNumber
   */
  @javax.annotation.Nullable
  public ValidNumberEnum getValidNumber() {
    return validNumber;
  }

  public void setValidNumber(ValidNumberEnum validNumber) {
    this.validNumber = validNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiResponseJsonAdvancedRoamingUnknown niResponseJsonAdvancedRoamingUnknown = (NiResponseJsonAdvancedRoamingUnknown) o;
    return Objects.equals(this.callerIdentity, niResponseJsonAdvancedRoamingUnknown.callerIdentity) &&
        Objects.equals(this.countryCode, niResponseJsonAdvancedRoamingUnknown.countryCode) &&
        Objects.equals(this.countryCodeIso3, niResponseJsonAdvancedRoamingUnknown.countryCodeIso3) &&
        Objects.equals(this.countryName, niResponseJsonAdvancedRoamingUnknown.countryName) &&
        Objects.equals(this.countryPrefix, niResponseJsonAdvancedRoamingUnknown.countryPrefix) &&
        Objects.equals(this.currentCarrier, niResponseJsonAdvancedRoamingUnknown.currentCarrier) &&
        Objects.equals(this.internationalFormatNumber, niResponseJsonAdvancedRoamingUnknown.internationalFormatNumber) &&
        Objects.equals(this.lookupOutcome, niResponseJsonAdvancedRoamingUnknown.lookupOutcome) &&
        Objects.equals(this.lookupOutcomeMessage, niResponseJsonAdvancedRoamingUnknown.lookupOutcomeMessage) &&
        Objects.equals(this.nationalFormatNumber, niResponseJsonAdvancedRoamingUnknown.nationalFormatNumber) &&
        Objects.equals(this.originalCarrier, niResponseJsonAdvancedRoamingUnknown.originalCarrier) &&
        Objects.equals(this.ported, niResponseJsonAdvancedRoamingUnknown.ported) &&
        Objects.equals(this.reachable, niResponseJsonAdvancedRoamingUnknown.reachable) &&
        Objects.equals(this.refundPrice, niResponseJsonAdvancedRoamingUnknown.refundPrice) &&
        Objects.equals(this.remainingBalance, niResponseJsonAdvancedRoamingUnknown.remainingBalance) &&
        Objects.equals(this.requestId, niResponseJsonAdvancedRoamingUnknown.requestId) &&
        Objects.equals(this.requestPrice, niResponseJsonAdvancedRoamingUnknown.requestPrice) &&
        Objects.equals(this.roaming, niResponseJsonAdvancedRoamingUnknown.roaming) &&
        Objects.equals(this.status, niResponseJsonAdvancedRoamingUnknown.status) &&
        Objects.equals(this.statusMessage, niResponseJsonAdvancedRoamingUnknown.statusMessage) &&
        Objects.equals(this.validNumber, niResponseJsonAdvancedRoamingUnknown.validNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerIdentity, countryCode, countryCodeIso3, countryName, countryPrefix, currentCarrier, internationalFormatNumber, lookupOutcome, lookupOutcomeMessage, nationalFormatNumber, originalCarrier, ported, reachable, refundPrice, remainingBalance, requestId, requestPrice, roaming, status, statusMessage, validNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiResponseJsonAdvancedRoamingUnknown {\n");
    sb.append("    callerIdentity: ").append(toIndentedString(callerIdentity)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryPrefix: ").append(toIndentedString(countryPrefix)).append("\n");
    sb.append("    currentCarrier: ").append(toIndentedString(currentCarrier)).append("\n");
    sb.append("    internationalFormatNumber: ").append(toIndentedString(internationalFormatNumber)).append("\n");
    sb.append("    lookupOutcome: ").append(toIndentedString(lookupOutcome)).append("\n");
    sb.append("    lookupOutcomeMessage: ").append(toIndentedString(lookupOutcomeMessage)).append("\n");
    sb.append("    nationalFormatNumber: ").append(toIndentedString(nationalFormatNumber)).append("\n");
    sb.append("    originalCarrier: ").append(toIndentedString(originalCarrier)).append("\n");
    sb.append("    ported: ").append(toIndentedString(ported)).append("\n");
    sb.append("    reachable: ").append(toIndentedString(reachable)).append("\n");
    sb.append("    refundPrice: ").append(toIndentedString(refundPrice)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestPrice: ").append(toIndentedString(requestPrice)).append("\n");
    sb.append("    roaming: ").append(toIndentedString(roaming)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    validNumber: ").append(toIndentedString(validNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caller_identity");
    openapiFields.add("country_code");
    openapiFields.add("country_code_iso3");
    openapiFields.add("country_name");
    openapiFields.add("country_prefix");
    openapiFields.add("current_carrier");
    openapiFields.add("international_format_number");
    openapiFields.add("lookup_outcome");
    openapiFields.add("lookup_outcome_message");
    openapiFields.add("national_format_number");
    openapiFields.add("original_carrier");
    openapiFields.add("ported");
    openapiFields.add("reachable");
    openapiFields.add("refund_price");
    openapiFields.add("remaining_balance");
    openapiFields.add("request_id");
    openapiFields.add("request_price");
    openapiFields.add("roaming");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("valid_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("country_code_iso3");
    openapiRequiredFields.add("country_name");
    openapiRequiredFields.add("country_prefix");
    openapiRequiredFields.add("international_format_number");
    openapiRequiredFields.add("national_format_number");
    openapiRequiredFields.add("request_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("status_message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiResponseJsonAdvancedRoamingUnknown
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiResponseJsonAdvancedRoamingUnknown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiResponseJsonAdvancedRoamingUnknown is not found in the empty JSON string", NiResponseJsonAdvancedRoamingUnknown.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiResponseJsonAdvancedRoamingUnknown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiResponseJsonAdvancedRoamingUnknown` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NiResponseJsonAdvancedRoamingUnknown.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `caller_identity`
      if (jsonObj.get("caller_identity") != null && !jsonObj.get("caller_identity").isJsonNull()) {
        NiCallerIdentity.validateJsonElement(jsonObj.get("caller_identity"));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if (!jsonObj.get("country_code_iso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code_iso3").toString()));
      }
      if (!jsonObj.get("country_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_name").toString()));
      }
      if (!jsonObj.get("country_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_prefix").toString()));
      }
      // validate the optional field `current_carrier`
      if (jsonObj.get("current_carrier") != null && !jsonObj.get("current_carrier").isJsonNull()) {
        NiCurrentCarrierProperties.validateJsonElement(jsonObj.get("current_carrier"));
      }
      if (!jsonObj.get("international_format_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_format_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_format_number").toString()));
      }
      // validate the optional field `lookup_outcome`
      if (jsonObj.get("lookup_outcome") != null && !jsonObj.get("lookup_outcome").isJsonNull()) {
        LookupOutcomeEnum.validateJsonElement(jsonObj.get("lookup_outcome"));
      }
      if ((jsonObj.get("lookup_outcome_message") != null && !jsonObj.get("lookup_outcome_message").isJsonNull()) && !jsonObj.get("lookup_outcome_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookup_outcome_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookup_outcome_message").toString()));
      }
      if (!jsonObj.get("national_format_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_format_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_format_number").toString()));
      }
      // validate the optional field `original_carrier`
      if (jsonObj.get("original_carrier") != null && !jsonObj.get("original_carrier").isJsonNull()) {
        NiInitialCarrierProperties.validateJsonElement(jsonObj.get("original_carrier"));
      }
      if ((jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) && !jsonObj.get("ported").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ported` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ported").toString()));
      }
      // validate the optional field `ported`
      if (jsonObj.get("ported") != null && !jsonObj.get("ported").isJsonNull()) {
        PortedEnum.validateJsonElement(jsonObj.get("ported"));
      }
      if ((jsonObj.get("reachable") != null && !jsonObj.get("reachable").isJsonNull()) && !jsonObj.get("reachable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reachable").toString()));
      }
      // validate the optional field `reachable`
      if (jsonObj.get("reachable") != null && !jsonObj.get("reachable").isJsonNull()) {
        ReachableEnum.validateJsonElement(jsonObj.get("reachable"));
      }
      if ((jsonObj.get("refund_price") != null && !jsonObj.get("refund_price").isJsonNull()) && !jsonObj.get("refund_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_price").toString()));
      }
      if ((jsonObj.get("remaining_balance") != null && !jsonObj.get("remaining_balance").isJsonNull()) && !jsonObj.get("remaining_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining_balance").toString()));
      }
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("request_price") != null && !jsonObj.get("request_price").isJsonNull()) && !jsonObj.get("request_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_price").toString()));
      }
      if ((jsonObj.get("roaming") != null && !jsonObj.get("roaming").isJsonNull()) && !jsonObj.get("roaming").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roaming` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roaming").toString()));
      }
      // validate the optional field `roaming`
      if (jsonObj.get("roaming") != null && !jsonObj.get("roaming").isJsonNull()) {
        RoamingEnum.validateJsonElement(jsonObj.get("roaming"));
      }
      // validate the required field `status`
      NiStandardAdvancedStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      if ((jsonObj.get("valid_number") != null && !jsonObj.get("valid_number").isJsonNull()) && !jsonObj.get("valid_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_number").toString()));
      }
      // validate the optional field `valid_number`
      if (jsonObj.get("valid_number") != null && !jsonObj.get("valid_number").isJsonNull()) {
        ValidNumberEnum.validateJsonElement(jsonObj.get("valid_number"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiResponseJsonAdvancedRoamingUnknown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiResponseJsonAdvancedRoamingUnknown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiResponseJsonAdvancedRoamingUnknown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiResponseJsonAdvancedRoamingUnknown.class));

       return (TypeAdapter<T>) new TypeAdapter<NiResponseJsonAdvancedRoamingUnknown>() {
           @Override
           public void write(JsonWriter out, NiResponseJsonAdvancedRoamingUnknown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiResponseJsonAdvancedRoamingUnknown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiResponseJsonAdvancedRoamingUnknown given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiResponseJsonAdvancedRoamingUnknown
   * @throws IOException if the JSON string is invalid with respect to NiResponseJsonAdvancedRoamingUnknown
   */
  public static NiResponseJsonAdvancedRoamingUnknown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiResponseJsonAdvancedRoamingUnknown.class);
  }

  /**
   * Convert an instance of NiResponseJsonAdvancedRoamingUnknown to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

