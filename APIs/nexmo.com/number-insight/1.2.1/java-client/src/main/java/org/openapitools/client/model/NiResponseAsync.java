/*
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NiStandardAdvancedStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NiResponseAsync
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:38.176849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NiResponseAsync {
  public static final String SERIALIZED_NAME_ERROR_TEXT = "error_text";
  @SerializedName(SERIALIZED_NAME_ERROR_TEXT)
  private String errorText;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining_balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private String remainingBalance;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_PRICE = "request_price";
  @SerializedName(SERIALIZED_NAME_REQUEST_PRICE)
  private String requestPrice;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NiStandardAdvancedStatus status;

  public NiResponseAsync() {
  }

  public NiResponseAsync errorText(String errorText) {
    this.errorText = errorText;
    return this;
  }

  /**
   * The status description of your request. Note: This field is equivalent to &#x60;status_message&#x60; field in the other endpoints
   * @return errorText
   */
  @javax.annotation.Nullable
  public String getErrorText() {
    return errorText;
  }

  public void setErrorText(String errorText) {
    this.errorText = errorText;
  }


  public NiResponseAsync number(String number) {
    this.number = number;
    return this;
  }

  /**
   * The &#x60;number&#x60; in your request
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public NiResponseAsync remainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

  /**
   * Your account balance in EUR after this request.
   * @return remainingBalance
   */
  @javax.annotation.Nullable
  public String getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(String remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  public NiResponseAsync requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NiResponseAsync requestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
    return this;
  }

  /**
   * If there is an internal lookup error, the &#x60;refund_price&#x60; will reflect the lookup price. If &#x60;cnam&#x60; is requested for a non-US number the &#x60;refund_price&#x60; will reflect the &#x60;cnam&#x60; price. If both of these conditions occur, &#x60;refund_price&#x60; is the sum of the lookup price and &#x60;cnam&#x60; price.
   * @return requestPrice
   */
  @javax.annotation.Nullable
  public String getRequestPrice() {
    return requestPrice;
  }

  public void setRequestPrice(String requestPrice) {
    this.requestPrice = requestPrice;
  }


  public NiResponseAsync status(NiStandardAdvancedStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public NiStandardAdvancedStatus getStatus() {
    return status;
  }

  public void setStatus(NiStandardAdvancedStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NiResponseAsync niResponseAsync = (NiResponseAsync) o;
    return Objects.equals(this.errorText, niResponseAsync.errorText) &&
        Objects.equals(this.number, niResponseAsync.number) &&
        Objects.equals(this.remainingBalance, niResponseAsync.remainingBalance) &&
        Objects.equals(this.requestId, niResponseAsync.requestId) &&
        Objects.equals(this.requestPrice, niResponseAsync.requestPrice) &&
        Objects.equals(this.status, niResponseAsync.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorText, number, remainingBalance, requestId, requestPrice, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NiResponseAsync {\n");
    sb.append("    errorText: ").append(toIndentedString(errorText)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestPrice: ").append(toIndentedString(requestPrice)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_text");
    openapiFields.add("number");
    openapiFields.add("remaining_balance");
    openapiFields.add("request_id");
    openapiFields.add("request_price");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NiResponseAsync
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NiResponseAsync.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NiResponseAsync is not found in the empty JSON string", NiResponseAsync.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NiResponseAsync.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NiResponseAsync` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error_text") != null && !jsonObj.get("error_text").isJsonNull()) && !jsonObj.get("error_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_text").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("remaining_balance") != null && !jsonObj.get("remaining_balance").isJsonNull()) && !jsonObj.get("remaining_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remaining_balance").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("request_price") != null && !jsonObj.get("request_price").isJsonNull()) && !jsonObj.get("request_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_price").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        NiStandardAdvancedStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NiResponseAsync.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NiResponseAsync' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NiResponseAsync> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NiResponseAsync.class));

       return (TypeAdapter<T>) new TypeAdapter<NiResponseAsync>() {
           @Override
           public void write(JsonWriter out, NiResponseAsync value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NiResponseAsync read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NiResponseAsync given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NiResponseAsync
   * @throws IOException if the JSON string is invalid with respect to NiResponseAsync
   */
  public static NiResponseAsync fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NiResponseAsync.class);
  }

  /**
   * Convert an instance of NiResponseAsync to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

