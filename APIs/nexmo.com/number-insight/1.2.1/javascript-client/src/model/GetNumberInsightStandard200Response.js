/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiBasicStatus from './NiBasicStatus';
import NiCallerIdentity from './NiCallerIdentity';
import NiCurrentCarrierProperties from './NiCurrentCarrierProperties';
import NiInitialCarrierProperties from './NiInitialCarrierProperties';
import NiResponseJsonStandard from './NiResponseJsonStandard';

/**
 * The GetNumberInsightStandard200Response model module.
 * @module model/GetNumberInsightStandard200Response
 * @version 1.2.1
 */
class GetNumberInsightStandard200Response {
    /**
     * Constructs a new <code>GetNumberInsightStandard200Response</code>.
     * @alias module:model/GetNumberInsightStandard200Response
     * @param {(module:model/NiResponseJsonStandard)} instance The actual instance to initialize GetNumberInsightStandard200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "NiResponseJsonStandard") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NiResponseJsonStandard.validateJSON(instance); // throw an exception if no match
                // create NiResponseJsonStandard from JS object
                this.actualInstance = NiResponseJsonStandard.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NiResponseJsonStandard
            errorMessages.push("Failed to construct NiResponseJsonStandard: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetNumberInsightStandard200Response` with oneOf schemas NiResponseJsonStandard. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetNumberInsightStandard200Response` with oneOf schemas NiResponseJsonStandard. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetNumberInsightStandard200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNumberInsightStandard200Response} obj Optional instance to populate.
     * @return {module:model/GetNumberInsightStandard200Response} The populated <code>GetNumberInsightStandard200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetNumberInsightStandard200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>NiResponseJsonStandard</code>.
     * @return {(module:model/NiResponseJsonStandard)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>NiResponseJsonStandard</code>.
     * @param {(module:model/NiResponseJsonStandard)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetNumberInsightStandard200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetNumberInsightStandard200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetNumberInsightStandard200Response} An instance of GetNumberInsightStandard200Response.
     */
    static fromJSON = function(json_string){
        return GetNumberInsightStandard200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
GetNumberInsightStandard200Response.prototype['country_code'] = undefined;

/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
GetNumberInsightStandard200Response.prototype['country_code_iso3'] = undefined;

/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
GetNumberInsightStandard200Response.prototype['country_name'] = undefined;

/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
GetNumberInsightStandard200Response.prototype['country_prefix'] = undefined;

/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
GetNumberInsightStandard200Response.prototype['international_format_number'] = undefined;

/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} national_format_number
 */
GetNumberInsightStandard200Response.prototype['national_format_number'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
GetNumberInsightStandard200Response.prototype['request_id'] = undefined;

/**
 * @member {module:model/NiBasicStatus} status
 */
GetNumberInsightStandard200Response.prototype['status'] = undefined;

/**
 * The status description of your request.
 * @member {String} status_message
 */
GetNumberInsightStandard200Response.prototype['status_message'] = undefined;

/**
 * @member {module:model/NiCallerIdentity} caller_identity
 */
GetNumberInsightStandard200Response.prototype['caller_identity'] = undefined;

/**
 * Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} caller_name
 */
GetNumberInsightStandard200Response.prototype['caller_name'] = undefined;

/**
 * The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {module:model/GetNumberInsightStandard200Response.CallerTypeEnum} caller_type
 */
GetNumberInsightStandard200Response.prototype['caller_type'] = undefined;

/**
 * @member {module:model/NiCurrentCarrierProperties} current_carrier
 */
GetNumberInsightStandard200Response.prototype['current_carrier'] = undefined;

/**
 * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} first_name
 */
GetNumberInsightStandard200Response.prototype['first_name'] = undefined;

/**
 * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} last_name
 */
GetNumberInsightStandard200Response.prototype['last_name'] = undefined;

/**
 * @member {module:model/NiInitialCarrierProperties} original_carrier
 */
GetNumberInsightStandard200Response.prototype['original_carrier'] = undefined;

/**
 * If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
 * @member {module:model/GetNumberInsightStandard200Response.PortedEnum} ported
 */
GetNumberInsightStandard200Response.prototype['ported'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} refund_price
 */
GetNumberInsightStandard200Response.prototype['refund_price'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
GetNumberInsightStandard200Response.prototype['remaining_balance'] = undefined;

/**
 * The amount in EUR charged to your account.
 * @member {String} request_price
 */
GetNumberInsightStandard200Response.prototype['request_price'] = undefined;


GetNumberInsightStandard200Response.OneOf = ["NiResponseJsonStandard"];

export default GetNumberInsightStandard200Response;

