/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiStandardAdvancedStatus from './NiStandardAdvancedStatus';

/**
 * The NiResponseAsync model module.
 * @module model/NiResponseAsync
 * @version 1.2.1
 */
class NiResponseAsync {
    /**
     * Constructs a new <code>NiResponseAsync</code>.
     * @alias module:model/NiResponseAsync
     */
    constructor() { 
        
        NiResponseAsync.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseAsync</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseAsync} obj Optional instance to populate.
     * @return {module:model/NiResponseAsync} The populated <code>NiResponseAsync</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseAsync();

            if (data.hasOwnProperty('error_text')) {
                obj['error_text'] = ApiClient.convertToType(data['error_text'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('remaining_balance')) {
                obj['remaining_balance'] = ApiClient.convertToType(data['remaining_balance'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('request_price')) {
                obj['request_price'] = ApiClient.convertToType(data['request_price'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = NiStandardAdvancedStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseAsync</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseAsync</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error_text'] && !(typeof data['error_text'] === 'string' || data['error_text'] instanceof String)) {
            throw new Error("Expected the field `error_text` to be a primitive type in the JSON string but got " + data['error_text']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['remaining_balance'] && !(typeof data['remaining_balance'] === 'string' || data['remaining_balance'] instanceof String)) {
            throw new Error("Expected the field `remaining_balance` to be a primitive type in the JSON string but got " + data['remaining_balance']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['request_price'] && !(typeof data['request_price'] === 'string' || data['request_price'] instanceof String)) {
            throw new Error("Expected the field `request_price` to be a primitive type in the JSON string but got " + data['request_price']);
        }

        return true;
    }


}



/**
 * The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints
 * @member {String} error_text
 */
NiResponseAsync.prototype['error_text'] = undefined;

/**
 * The `number` in your request
 * @member {String} number
 */
NiResponseAsync.prototype['number'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
NiResponseAsync.prototype['remaining_balance'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseAsync.prototype['request_id'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} request_price
 */
NiResponseAsync.prototype['request_price'] = undefined;

/**
 * @member {module:model/NiStandardAdvancedStatus} status
 */
NiResponseAsync.prototype['status'] = undefined;






export default NiResponseAsync;

