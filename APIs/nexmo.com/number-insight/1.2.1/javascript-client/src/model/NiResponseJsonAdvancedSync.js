/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiCallerIdentity from './NiCallerIdentity';
import NiCurrentCarrierProperties from './NiCurrentCarrierProperties';
import NiInitialCarrierProperties from './NiInitialCarrierProperties';
import NiRealtimeData from './NiRealtimeData';
import NiRoaming from './NiRoaming';
import NiStandardAdvancedStatus from './NiStandardAdvancedStatus';

/**
 * The NiResponseJsonAdvancedSync model module.
 * @module model/NiResponseJsonAdvancedSync
 * @version 1.2.1
 */
class NiResponseJsonAdvancedSync {
    /**
     * Constructs a new <code>NiResponseJsonAdvancedSync</code>.
     * Advanced Response (sync)
     * @alias module:model/NiResponseJsonAdvancedSync
     * @param countryCode {String} Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     * @param countryCodeIso3 {String} Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
     * @param countryName {String} The full name of the country that `number` is registered in.
     * @param countryPrefix {String} The numeric prefix for the country that `number` is registered in.
     * @param internationalFormatNumber {String} The `number` in your request in international format.
     * @param nationalFormatNumber {String} The `number` in your request in the format used by the country the number belongs to.
     * @param requestId {String} The unique identifier for your request. This is a alphanumeric string up to 40 characters.
     * @param status {module:model/NiStandardAdvancedStatus} 
     * @param statusMessage {String} The status description of your request.
     */
    constructor(countryCode, countryCodeIso3, countryName, countryPrefix, internationalFormatNumber, nationalFormatNumber, requestId, status, statusMessage) { 
        
        NiResponseJsonAdvancedSync.initialize(this, countryCode, countryCodeIso3, countryName, countryPrefix, internationalFormatNumber, nationalFormatNumber, requestId, status, statusMessage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCode, countryCodeIso3, countryName, countryPrefix, internationalFormatNumber, nationalFormatNumber, requestId, status, statusMessage) { 
        obj['country_code'] = countryCode;
        obj['country_code_iso3'] = countryCodeIso3;
        obj['country_name'] = countryName;
        obj['country_prefix'] = countryPrefix;
        obj['international_format_number'] = internationalFormatNumber;
        obj['national_format_number'] = nationalFormatNumber;
        obj['request_id'] = requestId;
        obj['status'] = status;
        obj['status_message'] = statusMessage;
    }

    /**
     * Constructs a <code>NiResponseJsonAdvancedSync</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseJsonAdvancedSync} obj Optional instance to populate.
     * @return {module:model/NiResponseJsonAdvancedSync} The populated <code>NiResponseJsonAdvancedSync</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseJsonAdvancedSync();

            if (data.hasOwnProperty('caller_identity')) {
                obj['caller_identity'] = NiCallerIdentity.constructFromObject(data['caller_identity']);
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_code_iso3')) {
                obj['country_code_iso3'] = ApiClient.convertToType(data['country_code_iso3'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_prefix')) {
                obj['country_prefix'] = ApiClient.convertToType(data['country_prefix'], 'String');
            }
            if (data.hasOwnProperty('current_carrier')) {
                obj['current_carrier'] = NiCurrentCarrierProperties.constructFromObject(data['current_carrier']);
            }
            if (data.hasOwnProperty('international_format_number')) {
                obj['international_format_number'] = ApiClient.convertToType(data['international_format_number'], 'String');
            }
            if (data.hasOwnProperty('lookup_outcome')) {
                obj['lookup_outcome'] = ApiClient.convertToType(data['lookup_outcome'], 'Number');
            }
            if (data.hasOwnProperty('lookup_outcome_message')) {
                obj['lookup_outcome_message'] = ApiClient.convertToType(data['lookup_outcome_message'], 'String');
            }
            if (data.hasOwnProperty('national_format_number')) {
                obj['national_format_number'] = ApiClient.convertToType(data['national_format_number'], 'String');
            }
            if (data.hasOwnProperty('original_carrier')) {
                obj['original_carrier'] = NiInitialCarrierProperties.constructFromObject(data['original_carrier']);
            }
            if (data.hasOwnProperty('ported')) {
                obj['ported'] = ApiClient.convertToType(data['ported'], 'String');
            }
            if (data.hasOwnProperty('reachable')) {
                obj['reachable'] = ApiClient.convertToType(data['reachable'], 'String');
            }
            if (data.hasOwnProperty('real_time_data')) {
                obj['real_time_data'] = NiRealtimeData.constructFromObject(data['real_time_data']);
            }
            if (data.hasOwnProperty('refund_price')) {
                obj['refund_price'] = ApiClient.convertToType(data['refund_price'], 'String');
            }
            if (data.hasOwnProperty('remaining_balance')) {
                obj['remaining_balance'] = ApiClient.convertToType(data['remaining_balance'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('request_price')) {
                obj['request_price'] = ApiClient.convertToType(data['request_price'], 'String');
            }
            if (data.hasOwnProperty('roaming')) {
                obj['roaming'] = NiRoaming.constructFromObject(data['roaming']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = NiStandardAdvancedStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('status_message')) {
                obj['status_message'] = ApiClient.convertToType(data['status_message'], 'String');
            }
            if (data.hasOwnProperty('valid_number')) {
                obj['valid_number'] = ApiClient.convertToType(data['valid_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseJsonAdvancedSync</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseJsonAdvancedSync</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NiResponseJsonAdvancedSync.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `caller_identity`
        if (data['caller_identity']) { // data not null
          NiCallerIdentity.validateJSON(data['caller_identity']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_code_iso3'] && !(typeof data['country_code_iso3'] === 'string' || data['country_code_iso3'] instanceof String)) {
            throw new Error("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got " + data['country_code_iso3']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_prefix'] && !(typeof data['country_prefix'] === 'string' || data['country_prefix'] instanceof String)) {
            throw new Error("Expected the field `country_prefix` to be a primitive type in the JSON string but got " + data['country_prefix']);
        }
        // validate the optional field `current_carrier`
        if (data['current_carrier']) { // data not null
          NiCurrentCarrierProperties.validateJSON(data['current_carrier']);
        }
        // ensure the json data is a string
        if (data['international_format_number'] && !(typeof data['international_format_number'] === 'string' || data['international_format_number'] instanceof String)) {
            throw new Error("Expected the field `international_format_number` to be a primitive type in the JSON string but got " + data['international_format_number']);
        }
        // ensure the json data is a string
        if (data['lookup_outcome_message'] && !(typeof data['lookup_outcome_message'] === 'string' || data['lookup_outcome_message'] instanceof String)) {
            throw new Error("Expected the field `lookup_outcome_message` to be a primitive type in the JSON string but got " + data['lookup_outcome_message']);
        }
        // ensure the json data is a string
        if (data['national_format_number'] && !(typeof data['national_format_number'] === 'string' || data['national_format_number'] instanceof String)) {
            throw new Error("Expected the field `national_format_number` to be a primitive type in the JSON string but got " + data['national_format_number']);
        }
        // validate the optional field `original_carrier`
        if (data['original_carrier']) { // data not null
          NiInitialCarrierProperties.validateJSON(data['original_carrier']);
        }
        // ensure the json data is a string
        if (data['ported'] && !(typeof data['ported'] === 'string' || data['ported'] instanceof String)) {
            throw new Error("Expected the field `ported` to be a primitive type in the JSON string but got " + data['ported']);
        }
        // ensure the json data is a string
        if (data['reachable'] && !(typeof data['reachable'] === 'string' || data['reachable'] instanceof String)) {
            throw new Error("Expected the field `reachable` to be a primitive type in the JSON string but got " + data['reachable']);
        }
        // validate the optional field `real_time_data`
        if (data['real_time_data']) { // data not null
          NiRealtimeData.validateJSON(data['real_time_data']);
        }
        // ensure the json data is a string
        if (data['refund_price'] && !(typeof data['refund_price'] === 'string' || data['refund_price'] instanceof String)) {
            throw new Error("Expected the field `refund_price` to be a primitive type in the JSON string but got " + data['refund_price']);
        }
        // ensure the json data is a string
        if (data['remaining_balance'] && !(typeof data['remaining_balance'] === 'string' || data['remaining_balance'] instanceof String)) {
            throw new Error("Expected the field `remaining_balance` to be a primitive type in the JSON string but got " + data['remaining_balance']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['request_price'] && !(typeof data['request_price'] === 'string' || data['request_price'] instanceof String)) {
            throw new Error("Expected the field `request_price` to be a primitive type in the JSON string but got " + data['request_price']);
        }
        // validate the optional field `roaming`
        if (data['roaming']) { // data not null
          NiRoaming.validateJSON(data['roaming']);
        }
        // ensure the json data is a string
        if (data['status_message'] && !(typeof data['status_message'] === 'string' || data['status_message'] instanceof String)) {
            throw new Error("Expected the field `status_message` to be a primitive type in the JSON string but got " + data['status_message']);
        }
        // ensure the json data is a string
        if (data['valid_number'] && !(typeof data['valid_number'] === 'string' || data['valid_number'] instanceof String)) {
            throw new Error("Expected the field `valid_number` to be a primitive type in the JSON string but got " + data['valid_number']);
        }

        return true;
    }


}

NiResponseJsonAdvancedSync.RequiredProperties = ["country_code", "country_code_iso3", "country_name", "country_prefix", "international_format_number", "national_format_number", "request_id", "status", "status_message"];

/**
 * @member {module:model/NiCallerIdentity} caller_identity
 */
NiResponseJsonAdvancedSync.prototype['caller_identity'] = undefined;

/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
NiResponseJsonAdvancedSync.prototype['country_code'] = undefined;

/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
NiResponseJsonAdvancedSync.prototype['country_code_iso3'] = undefined;

/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
NiResponseJsonAdvancedSync.prototype['country_name'] = undefined;

/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
NiResponseJsonAdvancedSync.prototype['country_prefix'] = undefined;

/**
 * @member {module:model/NiCurrentCarrierProperties} current_carrier
 */
NiResponseJsonAdvancedSync.prototype['current_carrier'] = undefined;

/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
NiResponseJsonAdvancedSync.prototype['international_format_number'] = undefined;

/**
 * Shows if all information about a phone number has been returned. Possible values:  Code | Text --- | --- 0 | Success 1 | Partial success - some fields populated 2 | Failed 
 * @member {module:model/NiResponseJsonAdvancedSync.LookupOutcomeEnum} lookup_outcome
 */
NiResponseJsonAdvancedSync.prototype['lookup_outcome'] = undefined;

/**
 * Shows if all information about a phone number has been returned.
 * @member {String} lookup_outcome_message
 */
NiResponseJsonAdvancedSync.prototype['lookup_outcome_message'] = undefined;

/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} national_format_number
 */
NiResponseJsonAdvancedSync.prototype['national_format_number'] = undefined;

/**
 * @member {module:model/NiInitialCarrierProperties} original_carrier
 */
NiResponseJsonAdvancedSync.prototype['original_carrier'] = undefined;

/**
 * If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
 * @member {module:model/NiResponseJsonAdvancedSync.PortedEnum} ported
 */
NiResponseJsonAdvancedSync.prototype['ported'] = undefined;

/**
 * Can you call `number` now. This is applicable to mobile numbers only.
 * @member {module:model/NiResponseJsonAdvancedSync.ReachableEnum} reachable
 */
NiResponseJsonAdvancedSync.prototype['reachable'] = undefined;

/**
 * @member {module:model/NiRealtimeData} real_time_data
 */
NiResponseJsonAdvancedSync.prototype['real_time_data'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} refund_price
 */
NiResponseJsonAdvancedSync.prototype['refund_price'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
NiResponseJsonAdvancedSync.prototype['remaining_balance'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseJsonAdvancedSync.prototype['request_id'] = undefined;

/**
 * The amount in EUR charged to your account.
 * @member {String} request_price
 */
NiResponseJsonAdvancedSync.prototype['request_price'] = undefined;

/**
 * @member {module:model/NiRoaming} roaming
 */
NiResponseJsonAdvancedSync.prototype['roaming'] = undefined;

/**
 * @member {module:model/NiStandardAdvancedStatus} status
 */
NiResponseJsonAdvancedSync.prototype['status'] = undefined;

/**
 * The status description of your request.
 * @member {String} status_message
 */
NiResponseJsonAdvancedSync.prototype['status_message'] = undefined;

/**
 * Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.
 * @member {module:model/NiResponseJsonAdvancedSync.ValidNumberEnum} valid_number
 */
NiResponseJsonAdvancedSync.prototype['valid_number'] = undefined;





/**
 * Allowed values for the <code>lookup_outcome</code> property.
 * @enum {Number}
 * @readonly
 */
NiResponseJsonAdvancedSync['LookupOutcomeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};


/**
 * Allowed values for the <code>ported</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseJsonAdvancedSync['PortedEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "ported"
     * @const
     */
    "ported": "ported",

    /**
     * value: "not_ported"
     * @const
     */
    "not_ported": "not_ported",

    /**
     * value: "assumed_not_ported"
     * @const
     */
    "assumed_not_ported": "assumed_not_ported",

    /**
     * value: "assumed_ported"
     * @const
     */
    "assumed_ported": "assumed_ported",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};


/**
 * Allowed values for the <code>reachable</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseJsonAdvancedSync['ReachableEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "reachable"
     * @const
     */
    "reachable": "reachable",

    /**
     * value: "undeliverable"
     * @const
     */
    "undeliverable": "undeliverable",

    /**
     * value: "absent"
     * @const
     */
    "absent": "absent",

    /**
     * value: "bad_number"
     * @const
     */
    "bad_number": "bad_number",

    /**
     * value: "blacklisted"
     * @const
     */
    "blacklisted": "blacklisted",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};


/**
 * Allowed values for the <code>valid_number</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseJsonAdvancedSync['ValidNumberEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "valid"
     * @const
     */
    "valid": "valid",

    /**
     * value: "not_valid"
     * @const
     */
    "not_valid": "not_valid",

    /**
     * value: "inferred"
     * @const
     */
    "inferred": "inferred",

    /**
     * value: "inferred_not_valid"
     * @const
     */
    "inferred_not_valid": "inferred_not_valid"
};



export default NiResponseJsonAdvancedSync;

