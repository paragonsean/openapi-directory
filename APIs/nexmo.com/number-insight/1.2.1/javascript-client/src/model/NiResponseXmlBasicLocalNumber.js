/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NiResponseXmlBasicLocalNumber model module.
 * @module model/NiResponseXmlBasicLocalNumber
 * @version 1.2.1
 */
class NiResponseXmlBasicLocalNumber {
    /**
     * Constructs a new <code>NiResponseXmlBasicLocalNumber</code>.
     * An object containing the &#x60;number&#x60; in your request in the format used by the country the number belongs to.
     * @alias module:model/NiResponseXmlBasicLocalNumber
     */
    constructor() { 
        
        NiResponseXmlBasicLocalNumber.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseXmlBasicLocalNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseXmlBasicLocalNumber} obj Optional instance to populate.
     * @return {module:model/NiResponseXmlBasicLocalNumber} The populated <code>NiResponseXmlBasicLocalNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseXmlBasicLocalNumber();

            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_code_iso3')) {
                obj['country_code_iso3'] = ApiClient.convertToType(data['country_code_iso3'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_prefix')) {
                obj['country_prefix'] = ApiClient.convertToType(data['country_prefix'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseXmlBasicLocalNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseXmlBasicLocalNumber</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_code_iso3'] && !(typeof data['country_code_iso3'] === 'string' || data['country_code_iso3'] instanceof String)) {
            throw new Error("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got " + data['country_code_iso3']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_prefix'] && !(typeof data['country_prefix'] === 'string' || data['country_prefix'] instanceof String)) {
            throw new Error("Expected the field `country_prefix` to be a primitive type in the JSON string but got " + data['country_prefix']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}



/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
NiResponseXmlBasicLocalNumber.prototype['country_code'] = undefined;

/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
NiResponseXmlBasicLocalNumber.prototype['country_code_iso3'] = undefined;

/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
NiResponseXmlBasicLocalNumber.prototype['country_name'] = undefined;

/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
NiResponseXmlBasicLocalNumber.prototype['country_prefix'] = undefined;

/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} number
 */
NiResponseXmlBasicLocalNumber.prototype['number'] = undefined;






export default NiResponseXmlBasicLocalNumber;

