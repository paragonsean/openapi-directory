/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiBasicStatus from './NiBasicStatus';

/**
 * The NiResponseJsonBasic model module.
 * @module model/NiResponseJsonBasic
 * @version 1.2.1
 */
class NiResponseJsonBasic {
    /**
     * Constructs a new <code>NiResponseJsonBasic</code>.
     * @alias module:model/NiResponseJsonBasic
     */
    constructor() { 
        
        NiResponseJsonBasic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseJsonBasic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseJsonBasic} obj Optional instance to populate.
     * @return {module:model/NiResponseJsonBasic} The populated <code>NiResponseJsonBasic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseJsonBasic();

            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_code_iso3')) {
                obj['country_code_iso3'] = ApiClient.convertToType(data['country_code_iso3'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_prefix')) {
                obj['country_prefix'] = ApiClient.convertToType(data['country_prefix'], 'String');
            }
            if (data.hasOwnProperty('international_format_number')) {
                obj['international_format_number'] = ApiClient.convertToType(data['international_format_number'], 'String');
            }
            if (data.hasOwnProperty('national_format_number')) {
                obj['national_format_number'] = ApiClient.convertToType(data['national_format_number'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = NiBasicStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('status_message')) {
                obj['status_message'] = ApiClient.convertToType(data['status_message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseJsonBasic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseJsonBasic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_code_iso3'] && !(typeof data['country_code_iso3'] === 'string' || data['country_code_iso3'] instanceof String)) {
            throw new Error("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got " + data['country_code_iso3']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_prefix'] && !(typeof data['country_prefix'] === 'string' || data['country_prefix'] instanceof String)) {
            throw new Error("Expected the field `country_prefix` to be a primitive type in the JSON string but got " + data['country_prefix']);
        }
        // ensure the json data is a string
        if (data['international_format_number'] && !(typeof data['international_format_number'] === 'string' || data['international_format_number'] instanceof String)) {
            throw new Error("Expected the field `international_format_number` to be a primitive type in the JSON string but got " + data['international_format_number']);
        }
        // ensure the json data is a string
        if (data['national_format_number'] && !(typeof data['national_format_number'] === 'string' || data['national_format_number'] instanceof String)) {
            throw new Error("Expected the field `national_format_number` to be a primitive type in the JSON string but got " + data['national_format_number']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['status_message'] && !(typeof data['status_message'] === 'string' || data['status_message'] instanceof String)) {
            throw new Error("Expected the field `status_message` to be a primitive type in the JSON string but got " + data['status_message']);
        }

        return true;
    }


}



/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
NiResponseJsonBasic.prototype['country_code'] = undefined;

/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
NiResponseJsonBasic.prototype['country_code_iso3'] = undefined;

/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
NiResponseJsonBasic.prototype['country_name'] = undefined;

/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
NiResponseJsonBasic.prototype['country_prefix'] = undefined;

/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
NiResponseJsonBasic.prototype['international_format_number'] = undefined;

/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} national_format_number
 */
NiResponseJsonBasic.prototype['national_format_number'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseJsonBasic.prototype['request_id'] = undefined;

/**
 * @member {module:model/NiBasicStatus} status
 */
NiResponseJsonBasic.prototype['status'] = undefined;

/**
 * The status description of your request.
 * @member {String} status_message
 */
NiResponseJsonBasic.prototype['status_message'] = undefined;






export default NiResponseJsonBasic;

