/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiBasicStatus from './NiBasicStatus';
import NiCallerIdentity from './NiCallerIdentity';
import NiCurrentCarrierProperties from './NiCurrentCarrierProperties';
import NiInitialCarrierProperties from './NiInitialCarrierProperties';
import NiResponseJsonBasic from './NiResponseJsonBasic';

/**
 * The NiResponseJsonStandard model module.
 * @module model/NiResponseJsonStandard
 * @version 1.2.1
 */
class NiResponseJsonStandard {
    /**
     * Constructs a new <code>NiResponseJsonStandard</code>.
     * Standard Response
     * @alias module:model/NiResponseJsonStandard
     * @implements module:model/NiResponseJsonBasic
     */
    constructor() { 
        NiResponseJsonBasic.initialize(this);
        NiResponseJsonStandard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseJsonStandard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseJsonStandard} obj Optional instance to populate.
     * @return {module:model/NiResponseJsonStandard} The populated <code>NiResponseJsonStandard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseJsonStandard();
            NiResponseJsonBasic.constructFromObject(data, obj);

            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_code_iso3')) {
                obj['country_code_iso3'] = ApiClient.convertToType(data['country_code_iso3'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_prefix')) {
                obj['country_prefix'] = ApiClient.convertToType(data['country_prefix'], 'String');
            }
            if (data.hasOwnProperty('international_format_number')) {
                obj['international_format_number'] = ApiClient.convertToType(data['international_format_number'], 'String');
            }
            if (data.hasOwnProperty('national_format_number')) {
                obj['national_format_number'] = ApiClient.convertToType(data['national_format_number'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = NiBasicStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('status_message')) {
                obj['status_message'] = ApiClient.convertToType(data['status_message'], 'String');
            }
            if (data.hasOwnProperty('caller_identity')) {
                obj['caller_identity'] = NiCallerIdentity.constructFromObject(data['caller_identity']);
            }
            if (data.hasOwnProperty('caller_name')) {
                obj['caller_name'] = ApiClient.convertToType(data['caller_name'], 'String');
            }
            if (data.hasOwnProperty('caller_type')) {
                obj['caller_type'] = ApiClient.convertToType(data['caller_type'], 'String');
            }
            if (data.hasOwnProperty('current_carrier')) {
                obj['current_carrier'] = ApiClient.convertToType(data['current_carrier'], NiCurrentCarrierProperties);
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('original_carrier')) {
                obj['original_carrier'] = NiInitialCarrierProperties.constructFromObject(data['original_carrier']);
            }
            if (data.hasOwnProperty('ported')) {
                obj['ported'] = ApiClient.convertToType(data['ported'], 'String');
            }
            if (data.hasOwnProperty('refund_price')) {
                obj['refund_price'] = ApiClient.convertToType(data['refund_price'], 'String');
            }
            if (data.hasOwnProperty('remaining_balance')) {
                obj['remaining_balance'] = ApiClient.convertToType(data['remaining_balance'], 'String');
            }
            if (data.hasOwnProperty('request_price')) {
                obj['request_price'] = ApiClient.convertToType(data['request_price'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseJsonStandard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseJsonStandard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_code_iso3'] && !(typeof data['country_code_iso3'] === 'string' || data['country_code_iso3'] instanceof String)) {
            throw new Error("Expected the field `country_code_iso3` to be a primitive type in the JSON string but got " + data['country_code_iso3']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_prefix'] && !(typeof data['country_prefix'] === 'string' || data['country_prefix'] instanceof String)) {
            throw new Error("Expected the field `country_prefix` to be a primitive type in the JSON string but got " + data['country_prefix']);
        }
        // ensure the json data is a string
        if (data['international_format_number'] && !(typeof data['international_format_number'] === 'string' || data['international_format_number'] instanceof String)) {
            throw new Error("Expected the field `international_format_number` to be a primitive type in the JSON string but got " + data['international_format_number']);
        }
        // ensure the json data is a string
        if (data['national_format_number'] && !(typeof data['national_format_number'] === 'string' || data['national_format_number'] instanceof String)) {
            throw new Error("Expected the field `national_format_number` to be a primitive type in the JSON string but got " + data['national_format_number']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['status_message'] && !(typeof data['status_message'] === 'string' || data['status_message'] instanceof String)) {
            throw new Error("Expected the field `status_message` to be a primitive type in the JSON string but got " + data['status_message']);
        }
        // validate the optional field `caller_identity`
        if (data['caller_identity']) { // data not null
          NiCallerIdentity.validateJSON(data['caller_identity']);
        }
        // ensure the json data is a string
        if (data['caller_name'] && !(typeof data['caller_name'] === 'string' || data['caller_name'] instanceof String)) {
            throw new Error("Expected the field `caller_name` to be a primitive type in the JSON string but got " + data['caller_name']);
        }
        // ensure the json data is a string
        if (data['caller_type'] && !(typeof data['caller_type'] === 'string' || data['caller_type'] instanceof String)) {
            throw new Error("Expected the field `caller_type` to be a primitive type in the JSON string but got " + data['caller_type']);
        }
        // validate the optional field `current_carrier`
        if (data['current_carrier']) { // data not null
          NiCurrentCarrierProperties.validateJSON(data['current_carrier']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // validate the optional field `original_carrier`
        if (data['original_carrier']) { // data not null
          NiInitialCarrierProperties.validateJSON(data['original_carrier']);
        }
        // ensure the json data is a string
        if (data['ported'] && !(typeof data['ported'] === 'string' || data['ported'] instanceof String)) {
            throw new Error("Expected the field `ported` to be a primitive type in the JSON string but got " + data['ported']);
        }
        // ensure the json data is a string
        if (data['refund_price'] && !(typeof data['refund_price'] === 'string' || data['refund_price'] instanceof String)) {
            throw new Error("Expected the field `refund_price` to be a primitive type in the JSON string but got " + data['refund_price']);
        }
        // ensure the json data is a string
        if (data['remaining_balance'] && !(typeof data['remaining_balance'] === 'string' || data['remaining_balance'] instanceof String)) {
            throw new Error("Expected the field `remaining_balance` to be a primitive type in the JSON string but got " + data['remaining_balance']);
        }
        // ensure the json data is a string
        if (data['request_price'] && !(typeof data['request_price'] === 'string' || data['request_price'] instanceof String)) {
            throw new Error("Expected the field `request_price` to be a primitive type in the JSON string but got " + data['request_price']);
        }

        return true;
    }


}



/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
NiResponseJsonStandard.prototype['country_code'] = undefined;

/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
NiResponseJsonStandard.prototype['country_code_iso3'] = undefined;

/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
NiResponseJsonStandard.prototype['country_name'] = undefined;

/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
NiResponseJsonStandard.prototype['country_prefix'] = undefined;

/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
NiResponseJsonStandard.prototype['international_format_number'] = undefined;

/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} national_format_number
 */
NiResponseJsonStandard.prototype['national_format_number'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseJsonStandard.prototype['request_id'] = undefined;

/**
 * @member {module:model/NiBasicStatus} status
 */
NiResponseJsonStandard.prototype['status'] = undefined;

/**
 * The status description of your request.
 * @member {String} status_message
 */
NiResponseJsonStandard.prototype['status_message'] = undefined;

/**
 * @member {module:model/NiCallerIdentity} caller_identity
 */
NiResponseJsonStandard.prototype['caller_identity'] = undefined;

/**
 * Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} caller_name
 */
NiResponseJsonStandard.prototype['caller_name'] = undefined;

/**
 * The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {module:model/NiResponseJsonStandard.CallerTypeEnum} caller_type
 */
NiResponseJsonStandard.prototype['caller_type'] = undefined;

/**
 * @member {module:model/NiCurrentCarrierProperties} current_carrier
 */
NiResponseJsonStandard.prototype['current_carrier'] = undefined;

/**
 * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} first_name
 */
NiResponseJsonStandard.prototype['first_name'] = undefined;

/**
 * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} last_name
 */
NiResponseJsonStandard.prototype['last_name'] = undefined;

/**
 * @member {module:model/NiInitialCarrierProperties} original_carrier
 */
NiResponseJsonStandard.prototype['original_carrier'] = undefined;

/**
 * If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.
 * @member {module:model/NiResponseJsonStandard.PortedEnum} ported
 */
NiResponseJsonStandard.prototype['ported'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} refund_price
 */
NiResponseJsonStandard.prototype['refund_price'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
NiResponseJsonStandard.prototype['remaining_balance'] = undefined;

/**
 * The amount in EUR charged to your account.
 * @member {String} request_price
 */
NiResponseJsonStandard.prototype['request_price'] = undefined;


// Implement NiResponseJsonBasic interface:
/**
 * Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
 * @member {String} country_code
 */
NiResponseJsonBasic.prototype['country_code'] = undefined;
/**
 * Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.
 * @member {String} country_code_iso3
 */
NiResponseJsonBasic.prototype['country_code_iso3'] = undefined;
/**
 * The full name of the country that `number` is registered in.
 * @member {String} country_name
 */
NiResponseJsonBasic.prototype['country_name'] = undefined;
/**
 * The numeric prefix for the country that `number` is registered in.
 * @member {String} country_prefix
 */
NiResponseJsonBasic.prototype['country_prefix'] = undefined;
/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
NiResponseJsonBasic.prototype['international_format_number'] = undefined;
/**
 * The `number` in your request in the format used by the country the number belongs to.
 * @member {String} national_format_number
 */
NiResponseJsonBasic.prototype['national_format_number'] = undefined;
/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseJsonBasic.prototype['request_id'] = undefined;
/**
 * @member {module:model/NiBasicStatus} status
 */
NiResponseJsonBasic.prototype['status'] = undefined;
/**
 * The status description of your request.
 * @member {String} status_message
 */
NiResponseJsonBasic.prototype['status_message'] = undefined;



/**
 * Allowed values for the <code>caller_type</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseJsonStandard['CallerTypeEnum'] = {

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "consumer"
     * @const
     */
    "consumer": "consumer",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>ported</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseJsonStandard['PortedEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "ported"
     * @const
     */
    "ported": "ported",

    /**
     * value: "not_ported"
     * @const
     */
    "not_ported": "not_ported",

    /**
     * value: "assumed_not_ported"
     * @const
     */
    "assumed_not_ported": "assumed_not_ported",

    /**
     * value: "assumed_ported"
     * @const
     */
    "assumed_ported": "assumed_ported",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};



export default NiResponseJsonStandard;

