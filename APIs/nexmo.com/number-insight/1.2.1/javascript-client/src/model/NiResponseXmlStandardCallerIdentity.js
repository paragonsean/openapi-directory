/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NiResponseXmlStandardCallerIdentity model module.
 * @module model/NiResponseXmlStandardCallerIdentity
 * @version 1.2.1
 */
class NiResponseXmlStandardCallerIdentity {
    /**
     * Constructs a new <code>NiResponseXmlStandardCallerIdentity</code>.
     * Contains details of the number owner, if &#x60;cnam&#x60; was set to &#x60;true&#x60; in the request.
     * @alias module:model/NiResponseXmlStandardCallerIdentity
     */
    constructor() { 
        
        NiResponseXmlStandardCallerIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseXmlStandardCallerIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseXmlStandardCallerIdentity} obj Optional instance to populate.
     * @return {module:model/NiResponseXmlStandardCallerIdentity} The populated <code>NiResponseXmlStandardCallerIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseXmlStandardCallerIdentity();

            if (data.hasOwnProperty('caller-name')) {
                obj['caller-name'] = ApiClient.convertToType(data['caller-name'], 'String');
            }
            if (data.hasOwnProperty('caller-type')) {
                obj['caller-type'] = ApiClient.convertToType(data['caller-type'], 'String');
            }
            if (data.hasOwnProperty('caller_name')) {
                obj['caller_name'] = ApiClient.convertToType(data['caller_name'], 'String');
            }
            if (data.hasOwnProperty('caller_type')) {
                obj['caller_type'] = ApiClient.convertToType(data['caller_type'], 'String');
            }
            if (data.hasOwnProperty('firs_name')) {
                obj['firs_name'] = ApiClient.convertToType(data['firs_name'], 'String');
            }
            if (data.hasOwnProperty('first-name')) {
                obj['first-name'] = ApiClient.convertToType(data['first-name'], 'String');
            }
            if (data.hasOwnProperty('last-name')) {
                obj['last-name'] = ApiClient.convertToType(data['last-name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseXmlStandardCallerIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseXmlStandardCallerIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caller-name'] && !(typeof data['caller-name'] === 'string' || data['caller-name'] instanceof String)) {
            throw new Error("Expected the field `caller-name` to be a primitive type in the JSON string but got " + data['caller-name']);
        }
        // ensure the json data is a string
        if (data['caller-type'] && !(typeof data['caller-type'] === 'string' || data['caller-type'] instanceof String)) {
            throw new Error("Expected the field `caller-type` to be a primitive type in the JSON string but got " + data['caller-type']);
        }
        // ensure the json data is a string
        if (data['caller_name'] && !(typeof data['caller_name'] === 'string' || data['caller_name'] instanceof String)) {
            throw new Error("Expected the field `caller_name` to be a primitive type in the JSON string but got " + data['caller_name']);
        }
        // ensure the json data is a string
        if (data['caller_type'] && !(typeof data['caller_type'] === 'string' || data['caller_type'] instanceof String)) {
            throw new Error("Expected the field `caller_type` to be a primitive type in the JSON string but got " + data['caller_type']);
        }
        // ensure the json data is a string
        if (data['firs_name'] && !(typeof data['firs_name'] === 'string' || data['firs_name'] instanceof String)) {
            throw new Error("Expected the field `firs_name` to be a primitive type in the JSON string but got " + data['firs_name']);
        }
        // ensure the json data is a string
        if (data['first-name'] && !(typeof data['first-name'] === 'string' || data['first-name'] instanceof String)) {
            throw new Error("Expected the field `first-name` to be a primitive type in the JSON string but got " + data['first-name']);
        }
        // ensure the json data is a string
        if (data['last-name'] && !(typeof data['last-name'] === 'string' || data['last-name'] instanceof String)) {
            throw new Error("Expected the field `last-name` to be a primitive type in the JSON string but got " + data['last-name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }

        return true;
    }


}



/**
 * Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} caller-name
 */
NiResponseXmlStandardCallerIdentity.prototype['caller-name'] = undefined;

/**
 * The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {module:model/NiResponseXmlStandardCallerIdentity.CallerTypeEnum} caller-type
 */
NiResponseXmlStandardCallerIdentity.prototype['caller-type'] = undefined;

/**
 * Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} caller_name
 */
NiResponseXmlStandardCallerIdentity.prototype['caller_name'] = undefined;

/**
 * The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {module:model/NiResponseXmlStandardCallerIdentity.CallerTypeEnum} caller_type
 */
NiResponseXmlStandardCallerIdentity.prototype['caller_type'] = undefined;

/**
 * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} firs_name
 */
NiResponseXmlStandardCallerIdentity.prototype['firs_name'] = undefined;

/**
 * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} first-name
 */
NiResponseXmlStandardCallerIdentity.prototype['first-name'] = undefined;

/**
 * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} last-name
 */
NiResponseXmlStandardCallerIdentity.prototype['last-name'] = undefined;

/**
 * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} last_name
 */
NiResponseXmlStandardCallerIdentity.prototype['last_name'] = undefined;





/**
 * Allowed values for the <code>caller-type</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseXmlStandardCallerIdentity['CallerTypeEnum'] = {

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "consumer"
     * @const
     */
    "consumer": "consumer",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>caller_type</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseXmlStandardCallerIdentity['CallerTypeEnum'] = {

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "consumer"
     * @const
     */
    "consumer": "consumer",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default NiResponseXmlStandardCallerIdentity;

