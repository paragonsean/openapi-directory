/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiResponseAsync from './NiResponseAsync';
import NiStandardAdvancedStatus from './NiStandardAdvancedStatus';

/**
 * The GetNumberInsightAsync200Response model module.
 * @module model/GetNumberInsightAsync200Response
 * @version 1.2.1
 */
class GetNumberInsightAsync200Response {
    /**
     * Constructs a new <code>GetNumberInsightAsync200Response</code>.
     * @alias module:model/GetNumberInsightAsync200Response
     * @param {(module:model/NiResponseAsync)} instance The actual instance to initialize GetNumberInsightAsync200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "NiResponseAsync") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NiResponseAsync.validateJSON(instance); // throw an exception if no match
                // create NiResponseAsync from JS object
                this.actualInstance = NiResponseAsync.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NiResponseAsync
            errorMessages.push("Failed to construct NiResponseAsync: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetNumberInsightAsync200Response` with oneOf schemas NiResponseAsync. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetNumberInsightAsync200Response` with oneOf schemas NiResponseAsync. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetNumberInsightAsync200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNumberInsightAsync200Response} obj Optional instance to populate.
     * @return {module:model/GetNumberInsightAsync200Response} The populated <code>GetNumberInsightAsync200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetNumberInsightAsync200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>NiResponseAsync</code>.
     * @return {(module:model/NiResponseAsync)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>NiResponseAsync</code>.
     * @param {(module:model/NiResponseAsync)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetNumberInsightAsync200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetNumberInsightAsync200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetNumberInsightAsync200Response} An instance of GetNumberInsightAsync200Response.
     */
    static fromJSON = function(json_string){
        return GetNumberInsightAsync200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints
 * @member {String} error_text
 */
GetNumberInsightAsync200Response.prototype['error_text'] = undefined;

/**
 * The `number` in your request
 * @member {String} number
 */
GetNumberInsightAsync200Response.prototype['number'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
GetNumberInsightAsync200Response.prototype['remaining_balance'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
GetNumberInsightAsync200Response.prototype['request_id'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} request_price
 */
GetNumberInsightAsync200Response.prototype['request_price'] = undefined;

/**
 * @member {module:model/NiStandardAdvancedStatus} status
 */
GetNumberInsightAsync200Response.prototype['status'] = undefined;


GetNumberInsightAsync200Response.OneOf = ["NiResponseAsync"];

export default GetNumberInsightAsync200Response;

