/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NiCurrentCarrierProperties from './NiCurrentCarrierProperties';
import NiInitialCarrierProperties from './NiInitialCarrierProperties';
import NiResponseXmlAdvancedCallerIdentity from './NiResponseXmlAdvancedCallerIdentity';
import NiResponseXmlAdvancedError from './NiResponseXmlAdvancedError';
import NiResponseXmlAdvancedLocalNumber from './NiResponseXmlAdvancedLocalNumber';
import NiResponseXmlAdvancedLookupOutcome from './NiResponseXmlAdvancedLookupOutcome';
import NiResponseXmlAdvancedPorted from './NiResponseXmlAdvancedPorted';
import NiRoaming from './NiRoaming';

/**
 * The NiResponseXmlAdvanced model module.
 * @module model/NiResponseXmlAdvanced
 * @version 1.2.1
 */
class NiResponseXmlAdvanced {
    /**
     * Constructs a new <code>NiResponseXmlAdvanced</code>.
     * Advanced
     * @alias module:model/NiResponseXmlAdvanced
     */
    constructor() { 
        
        NiResponseXmlAdvanced.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseXmlAdvanced</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseXmlAdvanced} obj Optional instance to populate.
     * @return {module:model/NiResponseXmlAdvanced} The populated <code>NiResponseXmlAdvanced</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseXmlAdvanced();

            if (data.hasOwnProperty('caller_identity')) {
                obj['caller_identity'] = NiResponseXmlAdvancedCallerIdentity.constructFromObject(data['caller_identity']);
            }
            if (data.hasOwnProperty('caller_name')) {
                obj['caller_name'] = ApiClient.convertToType(data['caller_name'], 'String');
            }
            if (data.hasOwnProperty('caller_type')) {
                obj['caller_type'] = ApiClient.convertToType(data['caller_type'], 'String');
            }
            if (data.hasOwnProperty('current_carrier')) {
                obj['current_carrier'] = NiCurrentCarrierProperties.constructFromObject(data['current_carrier']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = NiResponseXmlAdvancedError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('firs_name')) {
                obj['firs_name'] = ApiClient.convertToType(data['firs_name'], 'String');
            }
            if (data.hasOwnProperty('international_format_number')) {
                obj['international_format_number'] = ApiClient.convertToType(data['international_format_number'], 'String');
            }
            if (data.hasOwnProperty('ip_warnings')) {
                obj['ip_warnings'] = ApiClient.convertToType(data['ip_warnings'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('local_number')) {
                obj['local_number'] = NiResponseXmlAdvancedLocalNumber.constructFromObject(data['local_number']);
            }
            if (data.hasOwnProperty('lookup_outcome')) {
                obj['lookup_outcome'] = NiResponseXmlAdvancedLookupOutcome.constructFromObject(data['lookup_outcome']);
            }
            if (data.hasOwnProperty('original_carrier')) {
                obj['original_carrier'] = NiInitialCarrierProperties.constructFromObject(data['original_carrier']);
            }
            if (data.hasOwnProperty('ported')) {
                obj['ported'] = NiResponseXmlAdvancedPorted.constructFromObject(data['ported']);
            }
            if (data.hasOwnProperty('reachable')) {
                obj['reachable'] = ApiClient.convertToType(data['reachable'], 'String');
            }
            if (data.hasOwnProperty('remaining_balance')) {
                obj['remaining_balance'] = ApiClient.convertToType(data['remaining_balance'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('request_price')) {
                obj['request_price'] = ApiClient.convertToType(data['request_price'], 'String');
            }
            if (data.hasOwnProperty('roaming')) {
                obj['roaming'] = NiRoaming.constructFromObject(data['roaming']);
            }
            if (data.hasOwnProperty('valid_number')) {
                obj['valid_number'] = ApiClient.convertToType(data['valid_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseXmlAdvanced</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseXmlAdvanced</code>.
     */
    static validateJSON(data) {
        // validate the optional field `caller_identity`
        if (data['caller_identity']) { // data not null
          NiResponseXmlAdvancedCallerIdentity.validateJSON(data['caller_identity']);
        }
        // ensure the json data is a string
        if (data['caller_name'] && !(typeof data['caller_name'] === 'string' || data['caller_name'] instanceof String)) {
            throw new Error("Expected the field `caller_name` to be a primitive type in the JSON string but got " + data['caller_name']);
        }
        // ensure the json data is a string
        if (data['caller_type'] && !(typeof data['caller_type'] === 'string' || data['caller_type'] instanceof String)) {
            throw new Error("Expected the field `caller_type` to be a primitive type in the JSON string but got " + data['caller_type']);
        }
        // validate the optional field `current_carrier`
        if (data['current_carrier']) { // data not null
          NiCurrentCarrierProperties.validateJSON(data['current_carrier']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          NiResponseXmlAdvancedError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['firs_name'] && !(typeof data['firs_name'] === 'string' || data['firs_name'] instanceof String)) {
            throw new Error("Expected the field `firs_name` to be a primitive type in the JSON string but got " + data['firs_name']);
        }
        // ensure the json data is a string
        if (data['international_format_number'] && !(typeof data['international_format_number'] === 'string' || data['international_format_number'] instanceof String)) {
            throw new Error("Expected the field `international_format_number` to be a primitive type in the JSON string but got " + data['international_format_number']);
        }
        // ensure the json data is a string
        if (data['ip_warnings'] && !(typeof data['ip_warnings'] === 'string' || data['ip_warnings'] instanceof String)) {
            throw new Error("Expected the field `ip_warnings` to be a primitive type in the JSON string but got " + data['ip_warnings']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // validate the optional field `local_number`
        if (data['local_number']) { // data not null
          NiResponseXmlAdvancedLocalNumber.validateJSON(data['local_number']);
        }
        // validate the optional field `lookup_outcome`
        if (data['lookup_outcome']) { // data not null
          NiResponseXmlAdvancedLookupOutcome.validateJSON(data['lookup_outcome']);
        }
        // validate the optional field `original_carrier`
        if (data['original_carrier']) { // data not null
          NiInitialCarrierProperties.validateJSON(data['original_carrier']);
        }
        // validate the optional field `ported`
        if (data['ported']) { // data not null
          NiResponseXmlAdvancedPorted.validateJSON(data['ported']);
        }
        // ensure the json data is a string
        if (data['reachable'] && !(typeof data['reachable'] === 'string' || data['reachable'] instanceof String)) {
            throw new Error("Expected the field `reachable` to be a primitive type in the JSON string but got " + data['reachable']);
        }
        // ensure the json data is a string
        if (data['remaining_balance'] && !(typeof data['remaining_balance'] === 'string' || data['remaining_balance'] instanceof String)) {
            throw new Error("Expected the field `remaining_balance` to be a primitive type in the JSON string but got " + data['remaining_balance']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['request_price'] && !(typeof data['request_price'] === 'string' || data['request_price'] instanceof String)) {
            throw new Error("Expected the field `request_price` to be a primitive type in the JSON string but got " + data['request_price']);
        }
        // validate the optional field `roaming`
        if (data['roaming']) { // data not null
          NiRoaming.validateJSON(data['roaming']);
        }
        // ensure the json data is a string
        if (data['valid_number'] && !(typeof data['valid_number'] === 'string' || data['valid_number'] instanceof String)) {
            throw new Error("Expected the field `valid_number` to be a primitive type in the JSON string but got " + data['valid_number']);
        }

        return true;
    }


}



/**
 * @member {module:model/NiResponseXmlAdvancedCallerIdentity} caller_identity
 */
NiResponseXmlAdvanced.prototype['caller_identity'] = undefined;

/**
 * Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} caller_name
 */
NiResponseXmlAdvanced.prototype['caller_name'] = undefined;

/**
 * The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {module:model/NiResponseXmlAdvanced.CallerTypeEnum} caller_type
 */
NiResponseXmlAdvanced.prototype['caller_type'] = undefined;

/**
 * @member {module:model/NiCurrentCarrierProperties} current_carrier
 */
NiResponseXmlAdvanced.prototype['current_carrier'] = undefined;

/**
 * @member {module:model/NiResponseXmlAdvancedError} error
 */
NiResponseXmlAdvanced.prototype['error'] = undefined;

/**
 * First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} firs_name
 */
NiResponseXmlAdvanced.prototype['firs_name'] = undefined;

/**
 * The `number` in your request in international format.
 * @member {String} international_format_number
 */
NiResponseXmlAdvanced.prototype['international_format_number'] = undefined;

/**
 * This property is deprecated and can safely be ignored.
 * @member {String} ip_warnings
 */
NiResponseXmlAdvanced.prototype['ip_warnings'] = undefined;

/**
 * Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.
 * @member {String} last_name
 */
NiResponseXmlAdvanced.prototype['last_name'] = undefined;

/**
 * @member {module:model/NiResponseXmlAdvancedLocalNumber} local_number
 */
NiResponseXmlAdvanced.prototype['local_number'] = undefined;

/**
 * @member {module:model/NiResponseXmlAdvancedLookupOutcome} lookup_outcome
 */
NiResponseXmlAdvanced.prototype['lookup_outcome'] = undefined;

/**
 * @member {module:model/NiInitialCarrierProperties} original_carrier
 */
NiResponseXmlAdvanced.prototype['original_carrier'] = undefined;

/**
 * @member {module:model/NiResponseXmlAdvancedPorted} ported
 */
NiResponseXmlAdvanced.prototype['ported'] = undefined;

/**
 * Can you call `number` now. This is applicable to mobile numbers only.
 * @member {module:model/NiResponseXmlAdvanced.ReachableEnum} reachable
 */
NiResponseXmlAdvanced.prototype['reachable'] = undefined;

/**
 * Your account balance in EUR after this request.
 * @member {String} remaining_balance
 */
NiResponseXmlAdvanced.prototype['remaining_balance'] = undefined;

/**
 * The unique identifier for your request. This is a alphanumeric string up to 40 characters.
 * @member {String} request_id
 */
NiResponseXmlAdvanced.prototype['request_id'] = undefined;

/**
 * If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.
 * @member {String} request_price
 */
NiResponseXmlAdvanced.prototype['request_price'] = undefined;

/**
 * @member {module:model/NiRoaming} roaming
 */
NiResponseXmlAdvanced.prototype['roaming'] = undefined;

/**
 * Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.
 * @member {module:model/NiResponseXmlAdvanced.ValidNumberEnum} valid_number
 */
NiResponseXmlAdvanced.prototype['valid_number'] = undefined;





/**
 * Allowed values for the <code>caller_type</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseXmlAdvanced['CallerTypeEnum'] = {

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "consumer"
     * @const
     */
    "consumer": "consumer",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>reachable</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseXmlAdvanced['ReachableEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "reachable"
     * @const
     */
    "reachable": "reachable",

    /**
     * value: "undeliverable"
     * @const
     */
    "undeliverable": "undeliverable",

    /**
     * value: "absent"
     * @const
     */
    "absent": "absent",

    /**
     * value: "bad_number"
     * @const
     */
    "bad_number": "bad_number",

    /**
     * value: "blacklisted"
     * @const
     */
    "blacklisted": "blacklisted",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};


/**
 * Allowed values for the <code>valid_number</code> property.
 * @enum {String}
 * @readonly
 */
NiResponseXmlAdvanced['ValidNumberEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "valid"
     * @const
     */
    "valid": "valid",

    /**
     * value: "not_valid"
     * @const
     */
    "not_valid": "not_valid",

    /**
     * value: "inferred_not_valid"
     * @const
     */
    "inferred_not_valid": "inferred_not_valid"
};



export default NiResponseXmlAdvanced;

