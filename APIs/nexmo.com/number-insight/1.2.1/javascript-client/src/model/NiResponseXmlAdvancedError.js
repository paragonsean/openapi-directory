/**
 * Number Insight API
 * The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: devrel@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NiResponseXmlAdvancedError model module.
 * @module model/NiResponseXmlAdvancedError
 * @version 1.2.1
 */
class NiResponseXmlAdvancedError {
    /**
     * Constructs a new <code>NiResponseXmlAdvancedError</code>.
     * The error code and status of your request
     * @alias module:model/NiResponseXmlAdvancedError
     */
    constructor() { 
        
        NiResponseXmlAdvancedError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NiResponseXmlAdvancedError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NiResponseXmlAdvancedError} obj Optional instance to populate.
     * @return {module:model/NiResponseXmlAdvancedError} The populated <code>NiResponseXmlAdvancedError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NiResponseXmlAdvancedError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('status_text')) {
                obj['status_text'] = ApiClient.convertToType(data['status_text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NiResponseXmlAdvancedError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NiResponseXmlAdvancedError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['status_text'] && !(typeof data['status_text'] === 'string' || data['status_text'] instanceof String)) {
            throw new Error("Expected the field `status_text` to be a primitive type in the JSON string but got " + data['status_text']);
        }

        return true;
    }


}



/**
 * The status code
 * @member {String} code
 */
NiResponseXmlAdvancedError.prototype['code'] = undefined;

/**
 * The status description of your request.
 * @member {String} status_text
 */
NiResponseXmlAdvancedError.prototype['status_text'] = undefined;






export default NiResponseXmlAdvancedError;

