/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateAuthorUsingGET200Response;
import org.openapitools.client.model.GetAuthorNameUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListSessionsOfAuthorUsingGET200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorApi
 */
@Disabled
public class AuthorApiTest {

    private final AuthorApi api = new AuthorApi();

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorIfNotExistsForUsingGETTest() throws ApiException {
        String authorMapper = null;
        String name = null;
        CreateAuthorUsingGET200Response response = api.createAuthorIfNotExistsForUsingGET(authorMapper, name);
        // TODO: test validations
    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorIfNotExistsForUsingPOSTTest() throws ApiException {
        String authorMapper = null;
        String name = null;
        CreateAuthorUsingGET200Response response = api.createAuthorIfNotExistsForUsingPOST(authorMapper, name);
        // TODO: test validations
    }

    /**
     * creates a new author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorUsingGETTest() throws ApiException {
        String name = null;
        CreateAuthorUsingGET200Response response = api.createAuthorUsingGET(name);
        // TODO: test validations
    }

    /**
     * creates a new author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorUsingPOSTTest() throws ApiException {
        String name = null;
        CreateAuthorUsingGET200Response response = api.createAuthorUsingPOST(name);
        // TODO: test validations
    }

    /**
     * Returns the Author Name of the author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorNameUsingGETTest() throws ApiException {
        String authorID = null;
        GetAuthorNameUsingGET200Response response = api.getAuthorNameUsingGET(authorID);
        // TODO: test validations
    }

    /**
     * Returns the Author Name of the author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorNameUsingPOSTTest() throws ApiException {
        String authorID = null;
        GetAuthorNameUsingGET200Response response = api.getAuthorNameUsingPOST(authorID);
        // TODO: test validations
    }

    /**
     * returns an array of all pads this author contributed to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPadsOfAuthorUsingGETTest() throws ApiException {
        String authorID = null;
        ListAllPadsUsingGET200Response response = api.listPadsOfAuthorUsingGET(authorID);
        // TODO: test validations
    }

    /**
     * returns an array of all pads this author contributed to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPadsOfAuthorUsingPOSTTest() throws ApiException {
        String authorID = null;
        ListAllPadsUsingGET200Response response = api.listPadsOfAuthorUsingPOST(authorID);
        // TODO: test validations
    }

    /**
     * returns all sessions of an author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsOfAuthorUsingGETTest() throws ApiException {
        String authorID = null;
        ListSessionsOfAuthorUsingGET200Response response = api.listSessionsOfAuthorUsingGET(authorID);
        // TODO: test validations
    }

    /**
     * returns all sessions of an author
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsOfAuthorUsingPOSTTest() throws ApiException {
        String authorID = null;
        ListSessionsOfAuthorUsingGET200Response response = api.listSessionsOfAuthorUsingPOST(authorID);
        // TODO: test validations
    }

}
