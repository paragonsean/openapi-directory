/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendTextUsingGETTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.appendTextUsingGET(padID, text);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendTextUsingPOSTTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.appendTextUsingPOST(padID, text);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyPadUsingGETTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.copyPadUsingGET(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyPadUsingPOSTTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.copyPadUsingPOST(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyPadWithoutHistoryUsingGETTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.copyPadWithoutHistoryUsingGET(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyPadWithoutHistoryUsingPOSTTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.copyPadWithoutHistoryUsingPOST(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttributePoolUsingGETTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.getAttributePoolUsingGET(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttributePoolUsingPOSTTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.getAttributePoolUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPadIDUsingGETTest() throws ApiException {
        String roID = null;
        AppendChatMessageUsingGET200Response response = api.getPadIDUsingGET(roID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPadIDUsingPOSTTest() throws ApiException {
        String roID = null;
        AppendChatMessageUsingGET200Response response = api.getPadIDUsingPOST(roID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionChangesetUsingGETTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.getRevisionChangesetUsingGET(padID, rev);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionChangesetUsingPOSTTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.getRevisionChangesetUsingPOST(padID, rev);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedRevisionsCountUsingGETTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.getSavedRevisionsCountUsingGET(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedRevisionsCountUsingPOSTTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.getSavedRevisionsCountUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatsUsingGETTest() throws ApiException {
        AppendChatMessageUsingGET200Response response = api.getStatsUsingGET();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatsUsingPOSTTest() throws ApiException {
        AppendChatMessageUsingGET200Response response = api.getStatsUsingPOST();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSavedRevisionsUsingGETTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.listSavedRevisionsUsingGET(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSavedRevisionsUsingPOSTTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.listSavedRevisionsUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void movePadUsingGETTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.movePadUsingGET(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void movePadUsingPOSTTest() throws ApiException {
        String sourceID = null;
        String destinationID = null;
        String force = null;
        AppendChatMessageUsingGET200Response response = api.movePadUsingPOST(sourceID, destinationID, force);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreRevisionUsingGETTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.restoreRevisionUsingGET(padID, rev);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreRevisionUsingPOSTTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.restoreRevisionUsingPOST(padID, rev);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveRevisionUsingGETTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.saveRevisionUsingGET(padID, rev);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveRevisionUsingPOSTTest() throws ApiException {
        String padID = null;
        String rev = null;
        AppendChatMessageUsingGET200Response response = api.saveRevisionUsingPOST(padID, rev);
        // TODO: test validations
    }

}
