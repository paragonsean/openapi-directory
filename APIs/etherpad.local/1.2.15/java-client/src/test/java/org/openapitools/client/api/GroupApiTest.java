/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateGroupUsingGET200Response;
import org.openapitools.client.model.ListAllGroupsUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListSessionsOfAuthorUsingGET200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Disabled
public class GroupApiTest {

    private final GroupApi api = new GroupApi();

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupIfNotExistsForUsingGETTest() throws ApiException {
        String groupMapper = null;
        CreateGroupUsingGET200Response response = api.createGroupIfNotExistsForUsingGET(groupMapper);
        // TODO: test validations
    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupIfNotExistsForUsingPOSTTest() throws ApiException {
        String groupMapper = null;
        CreateGroupUsingGET200Response response = api.createGroupIfNotExistsForUsingPOST(groupMapper);
        // TODO: test validations
    }

    /**
     * creates a new pad in this group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupPadUsingGETTest() throws ApiException {
        String groupID = null;
        String padName = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.createGroupPadUsingGET(groupID, padName, text);
        // TODO: test validations
    }

    /**
     * creates a new pad in this group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupPadUsingPOSTTest() throws ApiException {
        String groupID = null;
        String padName = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.createGroupPadUsingPOST(groupID, padName, text);
        // TODO: test validations
    }

    /**
     * creates a new group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupUsingGETTest() throws ApiException {
        CreateGroupUsingGET200Response response = api.createGroupUsingGET();
        // TODO: test validations
    }

    /**
     * creates a new group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupUsingPOSTTest() throws ApiException {
        CreateGroupUsingGET200Response response = api.createGroupUsingPOST();
        // TODO: test validations
    }

    /**
     * deletes a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupUsingGETTest() throws ApiException {
        String groupID = null;
        AppendChatMessageUsingGET200Response response = api.deleteGroupUsingGET(groupID);
        // TODO: test validations
    }

    /**
     * deletes a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupUsingPOSTTest() throws ApiException {
        String groupID = null;
        AppendChatMessageUsingGET200Response response = api.deleteGroupUsingPOST(groupID);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllGroupsUsingGETTest() throws ApiException {
        ListAllGroupsUsingGET200Response response = api.listAllGroupsUsingGET();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllGroupsUsingPOSTTest() throws ApiException {
        ListAllGroupsUsingGET200Response response = api.listAllGroupsUsingPOST();
        // TODO: test validations
    }

    /**
     * returns all pads of this group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPadsUsingGETTest() throws ApiException {
        String groupID = null;
        ListAllPadsUsingGET200Response response = api.listPadsUsingGET(groupID);
        // TODO: test validations
    }

    /**
     * returns all pads of this group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPadsUsingPOSTTest() throws ApiException {
        String groupID = null;
        ListAllPadsUsingGET200Response response = api.listPadsUsingPOST(groupID);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsOfGroupUsingGETTest() throws ApiException {
        String groupID = null;
        ListSessionsOfAuthorUsingGET200Response response = api.listSessionsOfGroupUsingGET(groupID);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsOfGroupUsingPOSTTest() throws ApiException {
        String groupID = null;
        ListSessionsOfAuthorUsingGET200Response response = api.listSessionsOfGroupUsingPOST(groupID);
        // TODO: test validations
    }

}
