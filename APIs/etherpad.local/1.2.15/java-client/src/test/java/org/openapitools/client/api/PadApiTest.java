/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateDiffHTMLUsingGET200Response;
import org.openapitools.client.model.GetChatHeadUsingGET200Response;
import org.openapitools.client.model.GetChatHistoryUsingGET200Response;
import org.openapitools.client.model.GetHTMLUsingGET200Response;
import org.openapitools.client.model.GetLastEditedUsingGET200Response;
import org.openapitools.client.model.GetPublicStatusUsingGET200Response;
import org.openapitools.client.model.GetReadOnlyIDUsingGET200Response;
import org.openapitools.client.model.GetRevisionsCountUsingGET200Response;
import org.openapitools.client.model.GetTextUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListAuthorsOfPadUsingGET200Response;
import org.openapitools.client.model.PadUsersCountUsingGET200Response;
import org.openapitools.client.model.PadUsersUsingGET200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PadApi
 */
@Disabled
public class PadApiTest {

    private final PadApi api = new PadApi();

    /**
     * appends a chat message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendChatMessageUsingGETTest() throws ApiException {
        String padID = null;
        String text = null;
        String authorID = null;
        String time = null;
        AppendChatMessageUsingGET200Response response = api.appendChatMessageUsingGET(padID, text, authorID, time);
        // TODO: test validations
    }

    /**
     * appends a chat message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendChatMessageUsingPOSTTest() throws ApiException {
        String padID = null;
        String text = null;
        String authorID = null;
        String time = null;
        AppendChatMessageUsingGET200Response response = api.appendChatMessageUsingPOST(padID, text, authorID, time);
        // TODO: test validations
    }

    /**
     * returns ok when the current api token is valid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkTokenUsingGETTest() throws ApiException {
        AppendChatMessageUsingGET200Response response = api.checkTokenUsingGET();
        // TODO: test validations
    }

    /**
     * returns ok when the current api token is valid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkTokenUsingPOSTTest() throws ApiException {
        AppendChatMessageUsingGET200Response response = api.checkTokenUsingPOST();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiffHTMLUsingGETTest() throws ApiException {
        String padID = null;
        String startRev = null;
        String endRev = null;
        CreateDiffHTMLUsingGET200Response response = api.createDiffHTMLUsingGET(padID, startRev, endRev);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiffHTMLUsingPOSTTest() throws ApiException {
        String padID = null;
        String startRev = null;
        String endRev = null;
        CreateDiffHTMLUsingGET200Response response = api.createDiffHTMLUsingPOST(padID, startRev, endRev);
        // TODO: test validations
    }

    /**
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPadUsingGETTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.createPadUsingGET(padID, text);
        // TODO: test validations
    }

    /**
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPadUsingPOSTTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.createPadUsingPOST(padID, text);
        // TODO: test validations
    }

    /**
     * deletes a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePadUsingGETTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.deletePadUsingGET(padID);
        // TODO: test validations
    }

    /**
     * deletes a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePadUsingPOSTTest() throws ApiException {
        String padID = null;
        AppendChatMessageUsingGET200Response response = api.deletePadUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the chatHead (chat-message) of the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatHeadUsingGETTest() throws ApiException {
        String padID = null;
        GetChatHeadUsingGET200Response response = api.getChatHeadUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the chatHead (chat-message) of the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatHeadUsingPOSTTest() throws ApiException {
        String padID = null;
        GetChatHeadUsingGET200Response response = api.getChatHeadUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the chat history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatHistoryUsingGETTest() throws ApiException {
        String padID = null;
        String start = null;
        String end = null;
        GetChatHistoryUsingGET200Response response = api.getChatHistoryUsingGET(padID, start, end);
        // TODO: test validations
    }

    /**
     * returns the chat history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChatHistoryUsingPOSTTest() throws ApiException {
        String padID = null;
        String start = null;
        String end = null;
        GetChatHistoryUsingGET200Response response = api.getChatHistoryUsingPOST(padID, start, end);
        // TODO: test validations
    }

    /**
     * returns the text of a pad formatted as HTML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHTMLUsingGETTest() throws ApiException {
        String padID = null;
        String rev = null;
        GetHTMLUsingGET200Response response = api.getHTMLUsingGET(padID, rev);
        // TODO: test validations
    }

    /**
     * returns the text of a pad formatted as HTML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHTMLUsingPOSTTest() throws ApiException {
        String padID = null;
        String rev = null;
        GetHTMLUsingGET200Response response = api.getHTMLUsingPOST(padID, rev);
        // TODO: test validations
    }

    /**
     * returns the timestamp of the last revision of the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastEditedUsingGETTest() throws ApiException {
        String padID = null;
        GetLastEditedUsingGET200Response response = api.getLastEditedUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the timestamp of the last revision of the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastEditedUsingPOSTTest() throws ApiException {
        String padID = null;
        GetLastEditedUsingGET200Response response = api.getLastEditedUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * return true of false
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicStatusUsingGETTest() throws ApiException {
        String padID = null;
        GetPublicStatusUsingGET200Response response = api.getPublicStatusUsingGET(padID);
        // TODO: test validations
    }

    /**
     * return true of false
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicStatusUsingPOSTTest() throws ApiException {
        String padID = null;
        GetPublicStatusUsingGET200Response response = api.getPublicStatusUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the read only link of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadOnlyIDUsingGETTest() throws ApiException {
        String padID = null;
        GetReadOnlyIDUsingGET200Response response = api.getReadOnlyIDUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the read only link of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadOnlyIDUsingPOSTTest() throws ApiException {
        String padID = null;
        GetReadOnlyIDUsingGET200Response response = api.getReadOnlyIDUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the number of revisions of this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionsCountUsingGETTest() throws ApiException {
        String padID = null;
        GetRevisionsCountUsingGET200Response response = api.getRevisionsCountUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the number of revisions of this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionsCountUsingPOSTTest() throws ApiException {
        String padID = null;
        GetRevisionsCountUsingGET200Response response = api.getRevisionsCountUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the text of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTextUsingGETTest() throws ApiException {
        String padID = null;
        String rev = null;
        GetTextUsingGET200Response response = api.getTextUsingGET(padID, rev);
        // TODO: test validations
    }

    /**
     * returns the text of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTextUsingPOSTTest() throws ApiException {
        String padID = null;
        String rev = null;
        GetTextUsingGET200Response response = api.getTextUsingPOST(padID, rev);
        // TODO: test validations
    }

    /**
     * list all the pads
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllPadsUsingGETTest() throws ApiException {
        ListAllPadsUsingGET200Response response = api.listAllPadsUsingGET();
        // TODO: test validations
    }

    /**
     * list all the pads
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllPadsUsingPOSTTest() throws ApiException {
        ListAllPadsUsingGET200Response response = api.listAllPadsUsingPOST();
        // TODO: test validations
    }

    /**
     * returns an array of authors who contributed to this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAuthorsOfPadUsingGETTest() throws ApiException {
        String padID = null;
        ListAuthorsOfPadUsingGET200Response response = api.listAuthorsOfPadUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns an array of authors who contributed to this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAuthorsOfPadUsingPOSTTest() throws ApiException {
        String padID = null;
        ListAuthorsOfPadUsingGET200Response response = api.listAuthorsOfPadUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the number of user that are currently editing this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void padUsersCountUsingGETTest() throws ApiException {
        String padID = null;
        PadUsersCountUsingGET200Response response = api.padUsersCountUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the number of user that are currently editing this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void padUsersCountUsingPOSTTest() throws ApiException {
        String padID = null;
        PadUsersCountUsingGET200Response response = api.padUsersCountUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * returns the list of users that are currently editing this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void padUsersUsingGETTest() throws ApiException {
        String padID = null;
        PadUsersUsingGET200Response response = api.padUsersUsingGET(padID);
        // TODO: test validations
    }

    /**
     * returns the list of users that are currently editing this pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void padUsersUsingPOSTTest() throws ApiException {
        String padID = null;
        PadUsersUsingGET200Response response = api.padUsersUsingPOST(padID);
        // TODO: test validations
    }

    /**
     * sends a custom message of type msg to the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendClientsMessageUsingGETTest() throws ApiException {
        String padID = null;
        String msg = null;
        AppendChatMessageUsingGET200Response response = api.sendClientsMessageUsingGET(padID, msg);
        // TODO: test validations
    }

    /**
     * sends a custom message of type msg to the pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendClientsMessageUsingPOSTTest() throws ApiException {
        String padID = null;
        String msg = null;
        AppendChatMessageUsingGET200Response response = api.sendClientsMessageUsingPOST(padID, msg);
        // TODO: test validations
    }

    /**
     * sets the text of a pad with HTML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setHTMLUsingGETTest() throws ApiException {
        String padID = null;
        String html = null;
        AppendChatMessageUsingGET200Response response = api.setHTMLUsingGET(padID, html);
        // TODO: test validations
    }

    /**
     * sets the text of a pad with HTML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setHTMLUsingPOSTTest() throws ApiException {
        String padID = null;
        String html = null;
        AppendChatMessageUsingGET200Response response = api.setHTMLUsingPOST(padID, html);
        // TODO: test validations
    }

    /**
     * sets a boolean for the public status of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPublicStatusUsingGETTest() throws ApiException {
        String padID = null;
        String publicStatus = null;
        AppendChatMessageUsingGET200Response response = api.setPublicStatusUsingGET(padID, publicStatus);
        // TODO: test validations
    }

    /**
     * sets a boolean for the public status of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPublicStatusUsingPOSTTest() throws ApiException {
        String padID = null;
        String publicStatus = null;
        AppendChatMessageUsingGET200Response response = api.setPublicStatusUsingPOST(padID, publicStatus);
        // TODO: test validations
    }

    /**
     * sets the text of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTextUsingGETTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.setTextUsingGET(padID, text);
        // TODO: test validations
    }

    /**
     * sets the text of a pad
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTextUsingPOSTTest() throws ApiException {
        String padID = null;
        String text = null;
        AppendChatMessageUsingGET200Response response = api.setTextUsingPOST(padID, text);
        // TODO: test validations
    }

}
