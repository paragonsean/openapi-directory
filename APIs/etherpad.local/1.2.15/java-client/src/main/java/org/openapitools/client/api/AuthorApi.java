/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateAuthorUsingGET200Response;
import org.openapitools.client.model.GetAuthorNameUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListSessionsOfAuthorUsingGET200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAuthorIfNotExistsForUsingGET
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorIfNotExistsForUsingGETCall(String authorMapper, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createAuthorIfNotExistsFor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorMapper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorMapper", authorMapper));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorIfNotExistsForUsingGETValidateBeforeCall(String authorMapper, String name, final ApiCallback _callback) throws ApiException {
        return createAuthorIfNotExistsForUsingGETCall(authorMapper, name, _callback);

    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @return CreateAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthorUsingGET200Response createAuthorIfNotExistsForUsingGET(String authorMapper, String name) throws ApiException {
        ApiResponse<CreateAuthorUsingGET200Response> localVarResp = createAuthorIfNotExistsForUsingGETWithHttpInfo(authorMapper, name);
        return localVarResp.getData();
    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;CreateAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthorUsingGET200Response> createAuthorIfNotExistsForUsingGETWithHttpInfo(String authorMapper, String name) throws ApiException {
        okhttp3.Call localVarCall = createAuthorIfNotExistsForUsingGETValidateBeforeCall(authorMapper, name, null);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids (asynchronously)
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorIfNotExistsForUsingGETAsync(String authorMapper, String name, final ApiCallback<CreateAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorIfNotExistsForUsingGETValidateBeforeCall(authorMapper, name, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorIfNotExistsForUsingPOST
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorIfNotExistsForUsingPOSTCall(String authorMapper, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createAuthorIfNotExistsFor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorMapper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorMapper", authorMapper));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorIfNotExistsForUsingPOSTValidateBeforeCall(String authorMapper, String name, final ApiCallback _callback) throws ApiException {
        return createAuthorIfNotExistsForUsingPOSTCall(authorMapper, name, _callback);

    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @return CreateAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthorUsingGET200Response createAuthorIfNotExistsForUsingPOST(String authorMapper, String name) throws ApiException {
        ApiResponse<CreateAuthorUsingGET200Response> localVarResp = createAuthorIfNotExistsForUsingPOSTWithHttpInfo(authorMapper, name);
        return localVarResp.getData();
    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;CreateAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthorUsingGET200Response> createAuthorIfNotExistsForUsingPOSTWithHttpInfo(String authorMapper, String name) throws ApiException {
        okhttp3.Call localVarCall = createAuthorIfNotExistsForUsingPOSTValidateBeforeCall(authorMapper, name, null);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this functions helps you to map your application author ids to Etherpad author ids (asynchronously)
     * 
     * @param authorMapper  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorIfNotExistsForUsingPOSTAsync(String authorMapper, String name, final ApiCallback<CreateAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorIfNotExistsForUsingPOSTValidateBeforeCall(authorMapper, name, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorUsingGET
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorUsingGETCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorUsingGETValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        return createAuthorUsingGETCall(name, _callback);

    }

    /**
     * creates a new author
     * 
     * @param name  (optional)
     * @return CreateAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthorUsingGET200Response createAuthorUsingGET(String name) throws ApiException {
        ApiResponse<CreateAuthorUsingGET200Response> localVarResp = createAuthorUsingGETWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * creates a new author
     * 
     * @param name  (optional)
     * @return ApiResponse&lt;CreateAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthorUsingGET200Response> createAuthorUsingGETWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = createAuthorUsingGETValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new author (asynchronously)
     * 
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorUsingGETAsync(String name, final ApiCallback<CreateAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorUsingGETValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorUsingPOST
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorUsingPOSTCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorUsingPOSTValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        return createAuthorUsingPOSTCall(name, _callback);

    }

    /**
     * creates a new author
     * 
     * @param name  (optional)
     * @return CreateAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthorUsingGET200Response createAuthorUsingPOST(String name) throws ApiException {
        ApiResponse<CreateAuthorUsingGET200Response> localVarResp = createAuthorUsingPOSTWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * creates a new author
     * 
     * @param name  (optional)
     * @return ApiResponse&lt;CreateAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthorUsingGET200Response> createAuthorUsingPOSTWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = createAuthorUsingPOSTValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new author (asynchronously)
     * 
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorUsingPOSTAsync(String name, final ApiCallback<CreateAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorUsingPOSTValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorNameUsingGET
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorNameUsingGETCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getAuthorName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorNameUsingGETValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return getAuthorNameUsingGETCall(authorID, _callback);

    }

    /**
     * Returns the Author Name of the author
     * 
     * @param authorID  (optional)
     * @return GetAuthorNameUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthorNameUsingGET200Response getAuthorNameUsingGET(String authorID) throws ApiException {
        ApiResponse<GetAuthorNameUsingGET200Response> localVarResp = getAuthorNameUsingGETWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * Returns the Author Name of the author
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;GetAuthorNameUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthorNameUsingGET200Response> getAuthorNameUsingGETWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = getAuthorNameUsingGETValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<GetAuthorNameUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the Author Name of the author (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorNameUsingGETAsync(String authorID, final ApiCallback<GetAuthorNameUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorNameUsingGETValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorNameUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorNameUsingPOST
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorNameUsingPOSTCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getAuthorName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorNameUsingPOSTValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return getAuthorNameUsingPOSTCall(authorID, _callback);

    }

    /**
     * Returns the Author Name of the author
     * 
     * @param authorID  (optional)
     * @return GetAuthorNameUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthorNameUsingGET200Response getAuthorNameUsingPOST(String authorID) throws ApiException {
        ApiResponse<GetAuthorNameUsingGET200Response> localVarResp = getAuthorNameUsingPOSTWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * Returns the Author Name of the author
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;GetAuthorNameUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthorNameUsingGET200Response> getAuthorNameUsingPOSTWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = getAuthorNameUsingPOSTValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<GetAuthorNameUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the Author Name of the author (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorNameUsingPOSTAsync(String authorID, final ApiCallback<GetAuthorNameUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorNameUsingPOSTValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorNameUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPadsOfAuthorUsingGET
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsOfAuthorUsingGETCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listPadsOfAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPadsOfAuthorUsingGETValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return listPadsOfAuthorUsingGETCall(authorID, _callback);

    }

    /**
     * returns an array of all pads this author contributed to
     * 
     * @param authorID  (optional)
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listPadsOfAuthorUsingGET(String authorID) throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listPadsOfAuthorUsingGETWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * returns an array of all pads this author contributed to
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listPadsOfAuthorUsingGETWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = listPadsOfAuthorUsingGETValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns an array of all pads this author contributed to (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsOfAuthorUsingGETAsync(String authorID, final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPadsOfAuthorUsingGETValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPadsOfAuthorUsingPOST
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsOfAuthorUsingPOSTCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listPadsOfAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPadsOfAuthorUsingPOSTValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return listPadsOfAuthorUsingPOSTCall(authorID, _callback);

    }

    /**
     * returns an array of all pads this author contributed to
     * 
     * @param authorID  (optional)
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listPadsOfAuthorUsingPOST(String authorID) throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listPadsOfAuthorUsingPOSTWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * returns an array of all pads this author contributed to
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listPadsOfAuthorUsingPOSTWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = listPadsOfAuthorUsingPOSTValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns an array of all pads this author contributed to (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsOfAuthorUsingPOSTAsync(String authorID, final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPadsOfAuthorUsingPOSTValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSessionsOfAuthorUsingGET
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfAuthorUsingGETCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSessionsOfAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSessionsOfAuthorUsingGETValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return listSessionsOfAuthorUsingGETCall(authorID, _callback);

    }

    /**
     * returns all sessions of an author
     * 
     * @param authorID  (optional)
     * @return ListSessionsOfAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListSessionsOfAuthorUsingGET200Response listSessionsOfAuthorUsingGET(String authorID) throws ApiException {
        ApiResponse<ListSessionsOfAuthorUsingGET200Response> localVarResp = listSessionsOfAuthorUsingGETWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * returns all sessions of an author
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;ListSessionsOfAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSessionsOfAuthorUsingGET200Response> listSessionsOfAuthorUsingGETWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = listSessionsOfAuthorUsingGETValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns all sessions of an author (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfAuthorUsingGETAsync(String authorID, final ApiCallback<ListSessionsOfAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSessionsOfAuthorUsingGETValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSessionsOfAuthorUsingPOST
     * @param authorID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfAuthorUsingPOSTCall(String authorID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSessionsOfAuthor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSessionsOfAuthorUsingPOSTValidateBeforeCall(String authorID, final ApiCallback _callback) throws ApiException {
        return listSessionsOfAuthorUsingPOSTCall(authorID, _callback);

    }

    /**
     * returns all sessions of an author
     * 
     * @param authorID  (optional)
     * @return ListSessionsOfAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListSessionsOfAuthorUsingGET200Response listSessionsOfAuthorUsingPOST(String authorID) throws ApiException {
        ApiResponse<ListSessionsOfAuthorUsingGET200Response> localVarResp = listSessionsOfAuthorUsingPOSTWithHttpInfo(authorID);
        return localVarResp.getData();
    }

    /**
     * returns all sessions of an author
     * 
     * @param authorID  (optional)
     * @return ApiResponse&lt;ListSessionsOfAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSessionsOfAuthorUsingGET200Response> listSessionsOfAuthorUsingPOSTWithHttpInfo(String authorID) throws ApiException {
        okhttp3.Call localVarCall = listSessionsOfAuthorUsingPOSTValidateBeforeCall(authorID, null);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns all sessions of an author (asynchronously)
     * 
     * @param authorID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfAuthorUsingPOSTAsync(String authorID, final ApiCallback<ListSessionsOfAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSessionsOfAuthorUsingPOSTValidateBeforeCall(authorID, _callback);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
