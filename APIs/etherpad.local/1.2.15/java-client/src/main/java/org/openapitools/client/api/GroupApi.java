/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateGroupUsingGET200Response;
import org.openapitools.client.model.ListAllGroupsUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListSessionsOfAuthorUsingGET200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGroupIfNotExistsForUsingGET
     * @param groupMapper  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupIfNotExistsForUsingGETCall(String groupMapper, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroupIfNotExistsFor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupMapper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupMapper", groupMapper));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupIfNotExistsForUsingGETValidateBeforeCall(String groupMapper, final ApiCallback _callback) throws ApiException {
        return createGroupIfNotExistsForUsingGETCall(groupMapper, _callback);

    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * 
     * @param groupMapper  (optional)
     * @return CreateGroupUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupUsingGET200Response createGroupIfNotExistsForUsingGET(String groupMapper) throws ApiException {
        ApiResponse<CreateGroupUsingGET200Response> localVarResp = createGroupIfNotExistsForUsingGETWithHttpInfo(groupMapper);
        return localVarResp.getData();
    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * 
     * @param groupMapper  (optional)
     * @return ApiResponse&lt;CreateGroupUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupUsingGET200Response> createGroupIfNotExistsForUsingGETWithHttpInfo(String groupMapper) throws ApiException {
        okhttp3.Call localVarCall = createGroupIfNotExistsForUsingGETValidateBeforeCall(groupMapper, null);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids (asynchronously)
     * 
     * @param groupMapper  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupIfNotExistsForUsingGETAsync(String groupMapper, final ApiCallback<CreateGroupUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupIfNotExistsForUsingGETValidateBeforeCall(groupMapper, _callback);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupIfNotExistsForUsingPOST
     * @param groupMapper  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupIfNotExistsForUsingPOSTCall(String groupMapper, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroupIfNotExistsFor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupMapper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupMapper", groupMapper));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupIfNotExistsForUsingPOSTValidateBeforeCall(String groupMapper, final ApiCallback _callback) throws ApiException {
        return createGroupIfNotExistsForUsingPOSTCall(groupMapper, _callback);

    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * 
     * @param groupMapper  (optional)
     * @return CreateGroupUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupUsingGET200Response createGroupIfNotExistsForUsingPOST(String groupMapper) throws ApiException {
        ApiResponse<CreateGroupUsingGET200Response> localVarResp = createGroupIfNotExistsForUsingPOSTWithHttpInfo(groupMapper);
        return localVarResp.getData();
    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * 
     * @param groupMapper  (optional)
     * @return ApiResponse&lt;CreateGroupUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupUsingGET200Response> createGroupIfNotExistsForUsingPOSTWithHttpInfo(String groupMapper) throws ApiException {
        okhttp3.Call localVarCall = createGroupIfNotExistsForUsingPOSTValidateBeforeCall(groupMapper, null);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this functions helps you to map your application group ids to Etherpad group ids (asynchronously)
     * 
     * @param groupMapper  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupIfNotExistsForUsingPOSTAsync(String groupMapper, final ApiCallback<CreateGroupUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupIfNotExistsForUsingPOSTValidateBeforeCall(groupMapper, _callback);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupPadUsingGET
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupPadUsingGETCall(String groupID, String padName, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroupPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        if (padName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padName", padName));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupPadUsingGETValidateBeforeCall(String groupID, String padName, String text, final ApiCallback _callback) throws ApiException {
        return createGroupPadUsingGETCall(groupID, padName, text, _callback);

    }

    /**
     * creates a new pad in this group
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response createGroupPadUsingGET(String groupID, String padName, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = createGroupPadUsingGETWithHttpInfo(groupID, padName, text);
        return localVarResp.getData();
    }

    /**
     * creates a new pad in this group
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> createGroupPadUsingGETWithHttpInfo(String groupID, String padName, String text) throws ApiException {
        okhttp3.Call localVarCall = createGroupPadUsingGETValidateBeforeCall(groupID, padName, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new pad in this group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupPadUsingGETAsync(String groupID, String padName, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupPadUsingGETValidateBeforeCall(groupID, padName, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupPadUsingPOST
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupPadUsingPOSTCall(String groupID, String padName, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroupPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        if (padName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padName", padName));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupPadUsingPOSTValidateBeforeCall(String groupID, String padName, String text, final ApiCallback _callback) throws ApiException {
        return createGroupPadUsingPOSTCall(groupID, padName, text, _callback);

    }

    /**
     * creates a new pad in this group
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response createGroupPadUsingPOST(String groupID, String padName, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = createGroupPadUsingPOSTWithHttpInfo(groupID, padName, text);
        return localVarResp.getData();
    }

    /**
     * creates a new pad in this group
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> createGroupPadUsingPOSTWithHttpInfo(String groupID, String padName, String text) throws ApiException {
        okhttp3.Call localVarCall = createGroupPadUsingPOSTValidateBeforeCall(groupID, padName, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new pad in this group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param padName  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupPadUsingPOSTAsync(String groupID, String padName, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupPadUsingPOSTValidateBeforeCall(groupID, padName, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createGroupUsingGETCall(_callback);

    }

    /**
     * creates a new group
     * 
     * @return CreateGroupUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupUsingGET200Response createGroupUsingGET() throws ApiException {
        ApiResponse<CreateGroupUsingGET200Response> localVarResp = createGroupUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * creates a new group
     * 
     * @return ApiResponse&lt;CreateGroupUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupUsingGET200Response> createGroupUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createGroupUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new group (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupUsingGETAsync(final ApiCallback<CreateGroupUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupUsingPOST
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupUsingPOSTCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupUsingPOSTValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createGroupUsingPOSTCall(_callback);

    }

    /**
     * creates a new group
     * 
     * @return CreateGroupUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupUsingGET200Response createGroupUsingPOST() throws ApiException {
        ApiResponse<CreateGroupUsingGET200Response> localVarResp = createGroupUsingPOSTWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * creates a new group
     * 
     * @return ApiResponse&lt;CreateGroupUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupUsingGET200Response> createGroupUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createGroupUsingPOSTValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new group (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupUsingPOSTAsync(final ApiCallback<CreateGroupUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupUsingPOSTValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreateGroupUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupUsingGET
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingGETCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleteGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupUsingGETValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return deleteGroupUsingGETCall(groupID, _callback);

    }

    /**
     * deletes a group
     * 
     * @param groupID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deleteGroupUsingGET(String groupID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deleteGroupUsingGETWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * deletes a group
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deleteGroupUsingGETWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupUsingGETValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingGETAsync(String groupID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupUsingGETValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupUsingPOST
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingPOSTCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleteGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupUsingPOSTValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return deleteGroupUsingPOSTCall(groupID, _callback);

    }

    /**
     * deletes a group
     * 
     * @param groupID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deleteGroupUsingPOST(String groupID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deleteGroupUsingPOSTWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * deletes a group
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deleteGroupUsingPOSTWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupUsingPOSTValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingPOSTAsync(String groupID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupUsingPOSTValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGroupsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGroupsUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAllGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGroupsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllGroupsUsingGETCall(_callback);

    }

    /**
     * 
     * 
     * @return ListAllGroupsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllGroupsUsingGET200Response listAllGroupsUsingGET() throws ApiException {
        ApiResponse<ListAllGroupsUsingGET200Response> localVarResp = listAllGroupsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ListAllGroupsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllGroupsUsingGET200Response> listAllGroupsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllGroupsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListAllGroupsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGroupsUsingGETAsync(final ApiCallback<ListAllGroupsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGroupsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListAllGroupsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGroupsUsingPOST
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGroupsUsingPOSTCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAllGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGroupsUsingPOSTValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllGroupsUsingPOSTCall(_callback);

    }

    /**
     * 
     * 
     * @return ListAllGroupsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllGroupsUsingGET200Response listAllGroupsUsingPOST() throws ApiException {
        ApiResponse<ListAllGroupsUsingGET200Response> localVarResp = listAllGroupsUsingPOSTWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ListAllGroupsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllGroupsUsingGET200Response> listAllGroupsUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllGroupsUsingPOSTValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListAllGroupsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGroupsUsingPOSTAsync(final ApiCallback<ListAllGroupsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGroupsUsingPOSTValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListAllGroupsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPadsUsingGET
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsUsingGETCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listPads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPadsUsingGETValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return listPadsUsingGETCall(groupID, _callback);

    }

    /**
     * returns all pads of this group
     * 
     * @param groupID  (optional)
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listPadsUsingGET(String groupID) throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listPadsUsingGETWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * returns all pads of this group
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listPadsUsingGETWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = listPadsUsingGETValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns all pads of this group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsUsingGETAsync(String groupID, final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPadsUsingGETValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPadsUsingPOST
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsUsingPOSTCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listPads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPadsUsingPOSTValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return listPadsUsingPOSTCall(groupID, _callback);

    }

    /**
     * returns all pads of this group
     * 
     * @param groupID  (optional)
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listPadsUsingPOST(String groupID) throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listPadsUsingPOSTWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * returns all pads of this group
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listPadsUsingPOSTWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = listPadsUsingPOSTValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns all pads of this group (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPadsUsingPOSTAsync(String groupID, final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPadsUsingPOSTValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSessionsOfGroupUsingGET
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfGroupUsingGETCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSessionsOfGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSessionsOfGroupUsingGETValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return listSessionsOfGroupUsingGETCall(groupID, _callback);

    }

    /**
     * 
     * 
     * @param groupID  (optional)
     * @return ListSessionsOfAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListSessionsOfAuthorUsingGET200Response listSessionsOfGroupUsingGET(String groupID) throws ApiException {
        ApiResponse<ListSessionsOfAuthorUsingGET200Response> localVarResp = listSessionsOfGroupUsingGETWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;ListSessionsOfAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSessionsOfAuthorUsingGET200Response> listSessionsOfGroupUsingGETWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = listSessionsOfGroupUsingGETValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfGroupUsingGETAsync(String groupID, final ApiCallback<ListSessionsOfAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSessionsOfGroupUsingGETValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSessionsOfGroupUsingPOST
     * @param groupID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfGroupUsingPOSTCall(String groupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSessionsOfGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSessionsOfGroupUsingPOSTValidateBeforeCall(String groupID, final ApiCallback _callback) throws ApiException {
        return listSessionsOfGroupUsingPOSTCall(groupID, _callback);

    }

    /**
     * 
     * 
     * @param groupID  (optional)
     * @return ListSessionsOfAuthorUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListSessionsOfAuthorUsingGET200Response listSessionsOfGroupUsingPOST(String groupID) throws ApiException {
        ApiResponse<ListSessionsOfAuthorUsingGET200Response> localVarResp = listSessionsOfGroupUsingPOSTWithHttpInfo(groupID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groupID  (optional)
     * @return ApiResponse&lt;ListSessionsOfAuthorUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSessionsOfAuthorUsingGET200Response> listSessionsOfGroupUsingPOSTWithHttpInfo(String groupID) throws ApiException {
        okhttp3.Call localVarCall = listSessionsOfGroupUsingPOSTValidateBeforeCall(groupID, null);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSessionsOfGroupUsingPOSTAsync(String groupID, final ApiCallback<ListSessionsOfAuthorUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSessionsOfGroupUsingPOSTValidateBeforeCall(groupID, _callback);
        Type localVarReturnType = new TypeToken<ListSessionsOfAuthorUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
