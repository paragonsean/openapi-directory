/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateDiffHTMLUsingGET200Response;
import org.openapitools.client.model.GetChatHeadUsingGET200Response;
import org.openapitools.client.model.GetChatHistoryUsingGET200Response;
import org.openapitools.client.model.GetHTMLUsingGET200Response;
import org.openapitools.client.model.GetLastEditedUsingGET200Response;
import org.openapitools.client.model.GetPublicStatusUsingGET200Response;
import org.openapitools.client.model.GetReadOnlyIDUsingGET200Response;
import org.openapitools.client.model.GetRevisionsCountUsingGET200Response;
import org.openapitools.client.model.GetTextUsingGET200Response;
import org.openapitools.client.model.ListAllPadsUsingGET200Response;
import org.openapitools.client.model.ListAuthorsOfPadUsingGET200Response;
import org.openapitools.client.model.PadUsersCountUsingGET200Response;
import org.openapitools.client.model.PadUsersUsingGET200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendChatMessageUsingGET
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendChatMessageUsingGETCall(String padID, String text, String authorID, String time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appendChatMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendChatMessageUsingGETValidateBeforeCall(String padID, String text, String authorID, String time, final ApiCallback _callback) throws ApiException {
        return appendChatMessageUsingGETCall(padID, text, authorID, time, _callback);

    }

    /**
     * appends a chat message
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response appendChatMessageUsingGET(String padID, String text, String authorID, String time) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = appendChatMessageUsingGETWithHttpInfo(padID, text, authorID, time);
        return localVarResp.getData();
    }

    /**
     * appends a chat message
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> appendChatMessageUsingGETWithHttpInfo(String padID, String text, String authorID, String time) throws ApiException {
        okhttp3.Call localVarCall = appendChatMessageUsingGETValidateBeforeCall(padID, text, authorID, time, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * appends a chat message (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendChatMessageUsingGETAsync(String padID, String text, String authorID, String time, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendChatMessageUsingGETValidateBeforeCall(padID, text, authorID, time, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendChatMessageUsingPOST
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendChatMessageUsingPOSTCall(String padID, String text, String authorID, String time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appendChatMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendChatMessageUsingPOSTValidateBeforeCall(String padID, String text, String authorID, String time, final ApiCallback _callback) throws ApiException {
        return appendChatMessageUsingPOSTCall(padID, text, authorID, time, _callback);

    }

    /**
     * appends a chat message
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response appendChatMessageUsingPOST(String padID, String text, String authorID, String time) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = appendChatMessageUsingPOSTWithHttpInfo(padID, text, authorID, time);
        return localVarResp.getData();
    }

    /**
     * appends a chat message
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> appendChatMessageUsingPOSTWithHttpInfo(String padID, String text, String authorID, String time) throws ApiException {
        okhttp3.Call localVarCall = appendChatMessageUsingPOSTValidateBeforeCall(padID, text, authorID, time, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * appends a chat message (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param authorID  (optional)
     * @param time  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendChatMessageUsingPOSTAsync(String padID, String text, String authorID, String time, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendChatMessageUsingPOSTValidateBeforeCall(padID, text, authorID, time, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkTokenUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTokenUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTokenUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkTokenUsingGETCall(_callback);

    }

    /**
     * returns ok when the current api token is valid
     * 
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response checkTokenUsingGET() throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = checkTokenUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * returns ok when the current api token is valid
     * 
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> checkTokenUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkTokenUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns ok when the current api token is valid (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTokenUsingGETAsync(final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTokenUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkTokenUsingPOST
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTokenUsingPOSTCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTokenUsingPOSTValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkTokenUsingPOSTCall(_callback);

    }

    /**
     * returns ok when the current api token is valid
     * 
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response checkTokenUsingPOST() throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = checkTokenUsingPOSTWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * returns ok when the current api token is valid
     * 
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> checkTokenUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkTokenUsingPOSTValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns ok when the current api token is valid (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTokenUsingPOSTAsync(final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTokenUsingPOSTValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDiffHTMLUsingGET
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffHTMLUsingGETCall(String padID, String startRev, String endRev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createDiffHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (startRev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startRev", startRev));
        }

        if (endRev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endRev", endRev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiffHTMLUsingGETValidateBeforeCall(String padID, String startRev, String endRev, final ApiCallback _callback) throws ApiException {
        return createDiffHTMLUsingGETCall(padID, startRev, endRev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @return CreateDiffHTMLUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateDiffHTMLUsingGET200Response createDiffHTMLUsingGET(String padID, String startRev, String endRev) throws ApiException {
        ApiResponse<CreateDiffHTMLUsingGET200Response> localVarResp = createDiffHTMLUsingGETWithHttpInfo(padID, startRev, endRev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @return ApiResponse&lt;CreateDiffHTMLUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDiffHTMLUsingGET200Response> createDiffHTMLUsingGETWithHttpInfo(String padID, String startRev, String endRev) throws ApiException {
        okhttp3.Call localVarCall = createDiffHTMLUsingGETValidateBeforeCall(padID, startRev, endRev, null);
        Type localVarReturnType = new TypeToken<CreateDiffHTMLUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffHTMLUsingGETAsync(String padID, String startRev, String endRev, final ApiCallback<CreateDiffHTMLUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiffHTMLUsingGETValidateBeforeCall(padID, startRev, endRev, _callback);
        Type localVarReturnType = new TypeToken<CreateDiffHTMLUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDiffHTMLUsingPOST
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffHTMLUsingPOSTCall(String padID, String startRev, String endRev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createDiffHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (startRev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startRev", startRev));
        }

        if (endRev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endRev", endRev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiffHTMLUsingPOSTValidateBeforeCall(String padID, String startRev, String endRev, final ApiCallback _callback) throws ApiException {
        return createDiffHTMLUsingPOSTCall(padID, startRev, endRev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @return CreateDiffHTMLUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateDiffHTMLUsingGET200Response createDiffHTMLUsingPOST(String padID, String startRev, String endRev) throws ApiException {
        ApiResponse<CreateDiffHTMLUsingGET200Response> localVarResp = createDiffHTMLUsingPOSTWithHttpInfo(padID, startRev, endRev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @return ApiResponse&lt;CreateDiffHTMLUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDiffHTMLUsingGET200Response> createDiffHTMLUsingPOSTWithHttpInfo(String padID, String startRev, String endRev) throws ApiException {
        okhttp3.Call localVarCall = createDiffHTMLUsingPOSTValidateBeforeCall(padID, startRev, endRev, null);
        Type localVarReturnType = new TypeToken<CreateDiffHTMLUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param startRev  (optional)
     * @param endRev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffHTMLUsingPOSTAsync(String padID, String startRev, String endRev, final ApiCallback<CreateDiffHTMLUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiffHTMLUsingPOSTValidateBeforeCall(padID, startRev, endRev, _callback);
        Type localVarReturnType = new TypeToken<CreateDiffHTMLUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPadUsingGET
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPadUsingGETCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPadUsingGETValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return createPadUsingGETCall(padID, text, _callback);

    }

    /**
     * 
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response createPadUsingGET(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = createPadUsingGETWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * 
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> createPadUsingGETWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = createPadUsingGETValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPadUsingGETAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPadUsingGETValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPadUsingPOST
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPadUsingPOSTCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPadUsingPOSTValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return createPadUsingPOSTCall(padID, text, _callback);

    }

    /**
     * 
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response createPadUsingPOST(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = createPadUsingPOSTWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * 
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> createPadUsingPOSTWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = createPadUsingPOSTValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPadUsingPOSTAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPadUsingPOSTValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePadUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePadUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletePad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePadUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return deletePadUsingGETCall(padID, _callback);

    }

    /**
     * deletes a pad
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deletePadUsingGET(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deletePadUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * deletes a pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deletePadUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = deletePadUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePadUsingGETAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePadUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePadUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePadUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletePad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePadUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return deletePadUsingPOSTCall(padID, _callback);

    }

    /**
     * deletes a pad
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deletePadUsingPOST(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deletePadUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * deletes a pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deletePadUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = deletePadUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePadUsingPOSTAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePadUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatHeadUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHeadUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getChatHead";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatHeadUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getChatHeadUsingGETCall(padID, _callback);

    }

    /**
     * returns the chatHead (chat-message) of the pad
     * 
     * @param padID  (optional)
     * @return GetChatHeadUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetChatHeadUsingGET200Response getChatHeadUsingGET(String padID) throws ApiException {
        ApiResponse<GetChatHeadUsingGET200Response> localVarResp = getChatHeadUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the chatHead (chat-message) of the pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetChatHeadUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChatHeadUsingGET200Response> getChatHeadUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getChatHeadUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetChatHeadUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the chatHead (chat-message) of the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHeadUsingGETAsync(String padID, final ApiCallback<GetChatHeadUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatHeadUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetChatHeadUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatHeadUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHeadUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getChatHead";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatHeadUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getChatHeadUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the chatHead (chat-message) of the pad
     * 
     * @param padID  (optional)
     * @return GetChatHeadUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetChatHeadUsingGET200Response getChatHeadUsingPOST(String padID) throws ApiException {
        ApiResponse<GetChatHeadUsingGET200Response> localVarResp = getChatHeadUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the chatHead (chat-message) of the pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetChatHeadUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChatHeadUsingGET200Response> getChatHeadUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getChatHeadUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetChatHeadUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the chatHead (chat-message) of the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHeadUsingPOSTAsync(String padID, final ApiCallback<GetChatHeadUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatHeadUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetChatHeadUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatHistoryUsingGET
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHistoryUsingGETCall(String padID, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getChatHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatHistoryUsingGETValidateBeforeCall(String padID, String start, String end, final ApiCallback _callback) throws ApiException {
        return getChatHistoryUsingGETCall(padID, start, end, _callback);

    }

    /**
     * returns the chat history
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @return GetChatHistoryUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetChatHistoryUsingGET200Response getChatHistoryUsingGET(String padID, String start, String end) throws ApiException {
        ApiResponse<GetChatHistoryUsingGET200Response> localVarResp = getChatHistoryUsingGETWithHttpInfo(padID, start, end);
        return localVarResp.getData();
    }

    /**
     * returns the chat history
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @return ApiResponse&lt;GetChatHistoryUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChatHistoryUsingGET200Response> getChatHistoryUsingGETWithHttpInfo(String padID, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getChatHistoryUsingGETValidateBeforeCall(padID, start, end, null);
        Type localVarReturnType = new TypeToken<GetChatHistoryUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the chat history (asynchronously)
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHistoryUsingGETAsync(String padID, String start, String end, final ApiCallback<GetChatHistoryUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatHistoryUsingGETValidateBeforeCall(padID, start, end, _callback);
        Type localVarReturnType = new TypeToken<GetChatHistoryUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChatHistoryUsingPOST
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHistoryUsingPOSTCall(String padID, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getChatHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChatHistoryUsingPOSTValidateBeforeCall(String padID, String start, String end, final ApiCallback _callback) throws ApiException {
        return getChatHistoryUsingPOSTCall(padID, start, end, _callback);

    }

    /**
     * returns the chat history
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @return GetChatHistoryUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetChatHistoryUsingGET200Response getChatHistoryUsingPOST(String padID, String start, String end) throws ApiException {
        ApiResponse<GetChatHistoryUsingGET200Response> localVarResp = getChatHistoryUsingPOSTWithHttpInfo(padID, start, end);
        return localVarResp.getData();
    }

    /**
     * returns the chat history
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @return ApiResponse&lt;GetChatHistoryUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChatHistoryUsingGET200Response> getChatHistoryUsingPOSTWithHttpInfo(String padID, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = getChatHistoryUsingPOSTValidateBeforeCall(padID, start, end, null);
        Type localVarReturnType = new TypeToken<GetChatHistoryUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the chat history (asynchronously)
     * 
     * @param padID  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChatHistoryUsingPOSTAsync(String padID, String start, String end, final ApiCallback<GetChatHistoryUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChatHistoryUsingPOSTValidateBeforeCall(padID, start, end, _callback);
        Type localVarReturnType = new TypeToken<GetChatHistoryUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHTMLUsingGET
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLUsingGETCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHTMLUsingGETValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getHTMLUsingGETCall(padID, rev, _callback);

    }

    /**
     * returns the text of a pad formatted as HTML
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return GetHTMLUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetHTMLUsingGET200Response getHTMLUsingGET(String padID, String rev) throws ApiException {
        ApiResponse<GetHTMLUsingGET200Response> localVarResp = getHTMLUsingGETWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * returns the text of a pad formatted as HTML
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;GetHTMLUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHTMLUsingGET200Response> getHTMLUsingGETWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getHTMLUsingGETValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<GetHTMLUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the text of a pad formatted as HTML (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLUsingGETAsync(String padID, String rev, final ApiCallback<GetHTMLUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHTMLUsingGETValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<GetHTMLUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHTMLUsingPOST
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLUsingPOSTCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHTMLUsingPOSTValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getHTMLUsingPOSTCall(padID, rev, _callback);

    }

    /**
     * returns the text of a pad formatted as HTML
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return GetHTMLUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetHTMLUsingGET200Response getHTMLUsingPOST(String padID, String rev) throws ApiException {
        ApiResponse<GetHTMLUsingGET200Response> localVarResp = getHTMLUsingPOSTWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * returns the text of a pad formatted as HTML
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;GetHTMLUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHTMLUsingGET200Response> getHTMLUsingPOSTWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getHTMLUsingPOSTValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<GetHTMLUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the text of a pad formatted as HTML (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHTMLUsingPOSTAsync(String padID, String rev, final ApiCallback<GetHTMLUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHTMLUsingPOSTValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<GetHTMLUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastEditedUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEditedUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getLastEdited";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastEditedUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getLastEditedUsingGETCall(padID, _callback);

    }

    /**
     * returns the timestamp of the last revision of the pad
     * 
     * @param padID  (optional)
     * @return GetLastEditedUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetLastEditedUsingGET200Response getLastEditedUsingGET(String padID) throws ApiException {
        ApiResponse<GetLastEditedUsingGET200Response> localVarResp = getLastEditedUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the timestamp of the last revision of the pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetLastEditedUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLastEditedUsingGET200Response> getLastEditedUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getLastEditedUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetLastEditedUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the timestamp of the last revision of the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEditedUsingGETAsync(String padID, final ApiCallback<GetLastEditedUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastEditedUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetLastEditedUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastEditedUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEditedUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getLastEdited";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastEditedUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getLastEditedUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the timestamp of the last revision of the pad
     * 
     * @param padID  (optional)
     * @return GetLastEditedUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetLastEditedUsingGET200Response getLastEditedUsingPOST(String padID) throws ApiException {
        ApiResponse<GetLastEditedUsingGET200Response> localVarResp = getLastEditedUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the timestamp of the last revision of the pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetLastEditedUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLastEditedUsingGET200Response> getLastEditedUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getLastEditedUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetLastEditedUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the timestamp of the last revision of the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEditedUsingPOSTAsync(String padID, final ApiCallback<GetLastEditedUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastEditedUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetLastEditedUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicStatusUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicStatusUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getPublicStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicStatusUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getPublicStatusUsingGETCall(padID, _callback);

    }

    /**
     * return true of false
     * 
     * @param padID  (optional)
     * @return GetPublicStatusUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicStatusUsingGET200Response getPublicStatusUsingGET(String padID) throws ApiException {
        ApiResponse<GetPublicStatusUsingGET200Response> localVarResp = getPublicStatusUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * return true of false
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetPublicStatusUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicStatusUsingGET200Response> getPublicStatusUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getPublicStatusUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetPublicStatusUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * return true of false (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicStatusUsingGETAsync(String padID, final ApiCallback<GetPublicStatusUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicStatusUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetPublicStatusUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicStatusUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicStatusUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getPublicStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicStatusUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getPublicStatusUsingPOSTCall(padID, _callback);

    }

    /**
     * return true of false
     * 
     * @param padID  (optional)
     * @return GetPublicStatusUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicStatusUsingGET200Response getPublicStatusUsingPOST(String padID) throws ApiException {
        ApiResponse<GetPublicStatusUsingGET200Response> localVarResp = getPublicStatusUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * return true of false
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetPublicStatusUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicStatusUsingGET200Response> getPublicStatusUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getPublicStatusUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetPublicStatusUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * return true of false (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicStatusUsingPOSTAsync(String padID, final ApiCallback<GetPublicStatusUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicStatusUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetPublicStatusUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReadOnlyIDUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReadOnlyIDUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getReadOnlyID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReadOnlyIDUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getReadOnlyIDUsingGETCall(padID, _callback);

    }

    /**
     * returns the read only link of a pad
     * 
     * @param padID  (optional)
     * @return GetReadOnlyIDUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetReadOnlyIDUsingGET200Response getReadOnlyIDUsingGET(String padID) throws ApiException {
        ApiResponse<GetReadOnlyIDUsingGET200Response> localVarResp = getReadOnlyIDUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the read only link of a pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetReadOnlyIDUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReadOnlyIDUsingGET200Response> getReadOnlyIDUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getReadOnlyIDUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetReadOnlyIDUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the read only link of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReadOnlyIDUsingGETAsync(String padID, final ApiCallback<GetReadOnlyIDUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReadOnlyIDUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetReadOnlyIDUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReadOnlyIDUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReadOnlyIDUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getReadOnlyID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReadOnlyIDUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getReadOnlyIDUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the read only link of a pad
     * 
     * @param padID  (optional)
     * @return GetReadOnlyIDUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetReadOnlyIDUsingGET200Response getReadOnlyIDUsingPOST(String padID) throws ApiException {
        ApiResponse<GetReadOnlyIDUsingGET200Response> localVarResp = getReadOnlyIDUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the read only link of a pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetReadOnlyIDUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReadOnlyIDUsingGET200Response> getReadOnlyIDUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getReadOnlyIDUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetReadOnlyIDUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the read only link of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReadOnlyIDUsingPOSTAsync(String padID, final ApiCallback<GetReadOnlyIDUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReadOnlyIDUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetReadOnlyIDUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRevisionsCountUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionsCountUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getRevisionsCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRevisionsCountUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getRevisionsCountUsingGETCall(padID, _callback);

    }

    /**
     * returns the number of revisions of this pad
     * 
     * @param padID  (optional)
     * @return GetRevisionsCountUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetRevisionsCountUsingGET200Response getRevisionsCountUsingGET(String padID) throws ApiException {
        ApiResponse<GetRevisionsCountUsingGET200Response> localVarResp = getRevisionsCountUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the number of revisions of this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetRevisionsCountUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRevisionsCountUsingGET200Response> getRevisionsCountUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getRevisionsCountUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetRevisionsCountUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the number of revisions of this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionsCountUsingGETAsync(String padID, final ApiCallback<GetRevisionsCountUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRevisionsCountUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetRevisionsCountUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRevisionsCountUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionsCountUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getRevisionsCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRevisionsCountUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getRevisionsCountUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the number of revisions of this pad
     * 
     * @param padID  (optional)
     * @return GetRevisionsCountUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetRevisionsCountUsingGET200Response getRevisionsCountUsingPOST(String padID) throws ApiException {
        ApiResponse<GetRevisionsCountUsingGET200Response> localVarResp = getRevisionsCountUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the number of revisions of this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;GetRevisionsCountUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRevisionsCountUsingGET200Response> getRevisionsCountUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getRevisionsCountUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<GetRevisionsCountUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the number of revisions of this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionsCountUsingPOSTAsync(String padID, final ApiCallback<GetRevisionsCountUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRevisionsCountUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<GetRevisionsCountUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextUsingGET
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextUsingGETCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextUsingGETValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getTextUsingGETCall(padID, rev, _callback);

    }

    /**
     * returns the text of a pad
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return GetTextUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetTextUsingGET200Response getTextUsingGET(String padID, String rev) throws ApiException {
        ApiResponse<GetTextUsingGET200Response> localVarResp = getTextUsingGETWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * returns the text of a pad
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;GetTextUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTextUsingGET200Response> getTextUsingGETWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getTextUsingGETValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<GetTextUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the text of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextUsingGETAsync(String padID, String rev, final ApiCallback<GetTextUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextUsingGETValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<GetTextUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextUsingPOST
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextUsingPOSTCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextUsingPOSTValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getTextUsingPOSTCall(padID, rev, _callback);

    }

    /**
     * returns the text of a pad
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return GetTextUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetTextUsingGET200Response getTextUsingPOST(String padID, String rev) throws ApiException {
        ApiResponse<GetTextUsingGET200Response> localVarResp = getTextUsingPOSTWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * returns the text of a pad
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;GetTextUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTextUsingGET200Response> getTextUsingPOSTWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getTextUsingPOSTValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<GetTextUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the text of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextUsingPOSTAsync(String padID, String rev, final ApiCallback<GetTextUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextUsingPOSTValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<GetTextUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllPadsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllPadsUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAllPads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllPadsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllPadsUsingGETCall(_callback);

    }

    /**
     * list all the pads
     * 
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listAllPadsUsingGET() throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listAllPadsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * list all the pads
     * 
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listAllPadsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllPadsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list all the pads (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllPadsUsingGETAsync(final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllPadsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllPadsUsingPOST
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllPadsUsingPOSTCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAllPads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllPadsUsingPOSTValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllPadsUsingPOSTCall(_callback);

    }

    /**
     * list all the pads
     * 
     * @return ListAllPadsUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPadsUsingGET200Response listAllPadsUsingPOST() throws ApiException {
        ApiResponse<ListAllPadsUsingGET200Response> localVarResp = listAllPadsUsingPOSTWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * list all the pads
     * 
     * @return ApiResponse&lt;ListAllPadsUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllPadsUsingGET200Response> listAllPadsUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllPadsUsingPOSTValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list all the pads (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllPadsUsingPOSTAsync(final ApiCallback<ListAllPadsUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllPadsUsingPOSTValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListAllPadsUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthorsOfPadUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorsOfPadUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAuthorsOfPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthorsOfPadUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return listAuthorsOfPadUsingGETCall(padID, _callback);

    }

    /**
     * returns an array of authors who contributed to this pad
     * 
     * @param padID  (optional)
     * @return ListAuthorsOfPadUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAuthorsOfPadUsingGET200Response listAuthorsOfPadUsingGET(String padID) throws ApiException {
        ApiResponse<ListAuthorsOfPadUsingGET200Response> localVarResp = listAuthorsOfPadUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns an array of authors who contributed to this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;ListAuthorsOfPadUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuthorsOfPadUsingGET200Response> listAuthorsOfPadUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = listAuthorsOfPadUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<ListAuthorsOfPadUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns an array of authors who contributed to this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorsOfPadUsingGETAsync(String padID, final ApiCallback<ListAuthorsOfPadUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthorsOfPadUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<ListAuthorsOfPadUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthorsOfPadUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorsOfPadUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAuthorsOfPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthorsOfPadUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return listAuthorsOfPadUsingPOSTCall(padID, _callback);

    }

    /**
     * returns an array of authors who contributed to this pad
     * 
     * @param padID  (optional)
     * @return ListAuthorsOfPadUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ListAuthorsOfPadUsingGET200Response listAuthorsOfPadUsingPOST(String padID) throws ApiException {
        ApiResponse<ListAuthorsOfPadUsingGET200Response> localVarResp = listAuthorsOfPadUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns an array of authors who contributed to this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;ListAuthorsOfPadUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuthorsOfPadUsingGET200Response> listAuthorsOfPadUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = listAuthorsOfPadUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<ListAuthorsOfPadUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns an array of authors who contributed to this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorsOfPadUsingPOSTAsync(String padID, final ApiCallback<ListAuthorsOfPadUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthorsOfPadUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<ListAuthorsOfPadUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for padUsersCountUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersCountUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/padUsersCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call padUsersCountUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return padUsersCountUsingGETCall(padID, _callback);

    }

    /**
     * returns the number of user that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return PadUsersCountUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public PadUsersCountUsingGET200Response padUsersCountUsingGET(String padID) throws ApiException {
        ApiResponse<PadUsersCountUsingGET200Response> localVarResp = padUsersCountUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the number of user that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;PadUsersCountUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PadUsersCountUsingGET200Response> padUsersCountUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = padUsersCountUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<PadUsersCountUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the number of user that are currently editing this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersCountUsingGETAsync(String padID, final ApiCallback<PadUsersCountUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = padUsersCountUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<PadUsersCountUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for padUsersCountUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersCountUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/padUsersCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call padUsersCountUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return padUsersCountUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the number of user that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return PadUsersCountUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public PadUsersCountUsingGET200Response padUsersCountUsingPOST(String padID) throws ApiException {
        ApiResponse<PadUsersCountUsingGET200Response> localVarResp = padUsersCountUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the number of user that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;PadUsersCountUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PadUsersCountUsingGET200Response> padUsersCountUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = padUsersCountUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<PadUsersCountUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the number of user that are currently editing this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersCountUsingPOSTAsync(String padID, final ApiCallback<PadUsersCountUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = padUsersCountUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<PadUsersCountUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for padUsersUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/padUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call padUsersUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return padUsersUsingGETCall(padID, _callback);

    }

    /**
     * returns the list of users that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return PadUsersUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public PadUsersUsingGET200Response padUsersUsingGET(String padID) throws ApiException {
        ApiResponse<PadUsersUsingGET200Response> localVarResp = padUsersUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the list of users that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;PadUsersUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PadUsersUsingGET200Response> padUsersUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = padUsersUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<PadUsersUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the list of users that are currently editing this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersUsingGETAsync(String padID, final ApiCallback<PadUsersUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = padUsersUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<PadUsersUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for padUsersUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/padUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call padUsersUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return padUsersUsingPOSTCall(padID, _callback);

    }

    /**
     * returns the list of users that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return PadUsersUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public PadUsersUsingGET200Response padUsersUsingPOST(String padID) throws ApiException {
        ApiResponse<PadUsersUsingGET200Response> localVarResp = padUsersUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * returns the list of users that are currently editing this pad
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;PadUsersUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PadUsersUsingGET200Response> padUsersUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = padUsersUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<PadUsersUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns the list of users that are currently editing this pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call padUsersUsingPOSTAsync(String padID, final ApiCallback<PadUsersUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = padUsersUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<PadUsersUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendClientsMessageUsingGET
     * @param padID  (optional)
     * @param msg  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendClientsMessageUsingGETCall(String padID, String msg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendClientsMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (msg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msg", msg));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendClientsMessageUsingGETValidateBeforeCall(String padID, String msg, final ApiCallback _callback) throws ApiException {
        return sendClientsMessageUsingGETCall(padID, msg, _callback);

    }

    /**
     * sends a custom message of type msg to the pad
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response sendClientsMessageUsingGET(String padID, String msg) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = sendClientsMessageUsingGETWithHttpInfo(padID, msg);
        return localVarResp.getData();
    }

    /**
     * sends a custom message of type msg to the pad
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> sendClientsMessageUsingGETWithHttpInfo(String padID, String msg) throws ApiException {
        okhttp3.Call localVarCall = sendClientsMessageUsingGETValidateBeforeCall(padID, msg, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sends a custom message of type msg to the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendClientsMessageUsingGETAsync(String padID, String msg, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendClientsMessageUsingGETValidateBeforeCall(padID, msg, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendClientsMessageUsingPOST
     * @param padID  (optional)
     * @param msg  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendClientsMessageUsingPOSTCall(String padID, String msg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendClientsMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (msg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msg", msg));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendClientsMessageUsingPOSTValidateBeforeCall(String padID, String msg, final ApiCallback _callback) throws ApiException {
        return sendClientsMessageUsingPOSTCall(padID, msg, _callback);

    }

    /**
     * sends a custom message of type msg to the pad
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response sendClientsMessageUsingPOST(String padID, String msg) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = sendClientsMessageUsingPOSTWithHttpInfo(padID, msg);
        return localVarResp.getData();
    }

    /**
     * sends a custom message of type msg to the pad
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> sendClientsMessageUsingPOSTWithHttpInfo(String padID, String msg) throws ApiException {
        okhttp3.Call localVarCall = sendClientsMessageUsingPOSTValidateBeforeCall(padID, msg, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sends a custom message of type msg to the pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param msg  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendClientsMessageUsingPOSTAsync(String padID, String msg, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendClientsMessageUsingPOSTValidateBeforeCall(padID, msg, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setHTMLUsingGET
     * @param padID  (optional)
     * @param html  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHTMLUsingGETCall(String padID, String html, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (html != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("html", html));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setHTMLUsingGETValidateBeforeCall(String padID, String html, final ApiCallback _callback) throws ApiException {
        return setHTMLUsingGETCall(padID, html, _callback);

    }

    /**
     * sets the text of a pad with HTML
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setHTMLUsingGET(String padID, String html) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setHTMLUsingGETWithHttpInfo(padID, html);
        return localVarResp.getData();
    }

    /**
     * sets the text of a pad with HTML
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setHTMLUsingGETWithHttpInfo(String padID, String html) throws ApiException {
        okhttp3.Call localVarCall = setHTMLUsingGETValidateBeforeCall(padID, html, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets the text of a pad with HTML (asynchronously)
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHTMLUsingGETAsync(String padID, String html, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setHTMLUsingGETValidateBeforeCall(padID, html, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setHTMLUsingPOST
     * @param padID  (optional)
     * @param html  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHTMLUsingPOSTCall(String padID, String html, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setHTML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (html != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("html", html));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setHTMLUsingPOSTValidateBeforeCall(String padID, String html, final ApiCallback _callback) throws ApiException {
        return setHTMLUsingPOSTCall(padID, html, _callback);

    }

    /**
     * sets the text of a pad with HTML
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setHTMLUsingPOST(String padID, String html) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setHTMLUsingPOSTWithHttpInfo(padID, html);
        return localVarResp.getData();
    }

    /**
     * sets the text of a pad with HTML
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setHTMLUsingPOSTWithHttpInfo(String padID, String html) throws ApiException {
        okhttp3.Call localVarCall = setHTMLUsingPOSTValidateBeforeCall(padID, html, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets the text of a pad with HTML (asynchronously)
     * 
     * @param padID  (optional)
     * @param html  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHTMLUsingPOSTAsync(String padID, String html, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setHTMLUsingPOSTValidateBeforeCall(padID, html, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPublicStatusUsingGET
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPublicStatusUsingGETCall(String padID, String publicStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setPublicStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (publicStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicStatus", publicStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPublicStatusUsingGETValidateBeforeCall(String padID, String publicStatus, final ApiCallback _callback) throws ApiException {
        return setPublicStatusUsingGETCall(padID, publicStatus, _callback);

    }

    /**
     * sets a boolean for the public status of a pad
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setPublicStatusUsingGET(String padID, String publicStatus) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setPublicStatusUsingGETWithHttpInfo(padID, publicStatus);
        return localVarResp.getData();
    }

    /**
     * sets a boolean for the public status of a pad
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setPublicStatusUsingGETWithHttpInfo(String padID, String publicStatus) throws ApiException {
        okhttp3.Call localVarCall = setPublicStatusUsingGETValidateBeforeCall(padID, publicStatus, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets a boolean for the public status of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPublicStatusUsingGETAsync(String padID, String publicStatus, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPublicStatusUsingGETValidateBeforeCall(padID, publicStatus, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPublicStatusUsingPOST
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPublicStatusUsingPOSTCall(String padID, String publicStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setPublicStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (publicStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicStatus", publicStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPublicStatusUsingPOSTValidateBeforeCall(String padID, String publicStatus, final ApiCallback _callback) throws ApiException {
        return setPublicStatusUsingPOSTCall(padID, publicStatus, _callback);

    }

    /**
     * sets a boolean for the public status of a pad
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setPublicStatusUsingPOST(String padID, String publicStatus) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setPublicStatusUsingPOSTWithHttpInfo(padID, publicStatus);
        return localVarResp.getData();
    }

    /**
     * sets a boolean for the public status of a pad
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setPublicStatusUsingPOSTWithHttpInfo(String padID, String publicStatus) throws ApiException {
        okhttp3.Call localVarCall = setPublicStatusUsingPOSTValidateBeforeCall(padID, publicStatus, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets a boolean for the public status of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param publicStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPublicStatusUsingPOSTAsync(String padID, String publicStatus, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPublicStatusUsingPOSTValidateBeforeCall(padID, publicStatus, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTextUsingGET
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTextUsingGETCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTextUsingGETValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return setTextUsingGETCall(padID, text, _callback);

    }

    /**
     * sets the text of a pad
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setTextUsingGET(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setTextUsingGETWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * sets the text of a pad
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setTextUsingGETWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = setTextUsingGETValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets the text of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTextUsingGETAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTextUsingGETValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTextUsingPOST
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTextUsingPOSTCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTextUsingPOSTValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return setTextUsingPOSTCall(padID, text, _callback);

    }

    /**
     * sets the text of a pad
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response setTextUsingPOST(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = setTextUsingPOSTWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * sets the text of a pad
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> setTextUsingPOSTWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = setTextUsingPOSTValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * sets the text of a pad (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setTextUsingPOSTAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTextUsingPOSTValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
