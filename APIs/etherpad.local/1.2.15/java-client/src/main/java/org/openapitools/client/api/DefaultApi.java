/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendTextUsingGET
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendTextUsingGETCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appendText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendTextUsingGETValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return appendTextUsingGETCall(padID, text, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response appendTextUsingGET(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = appendTextUsingGETWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> appendTextUsingGETWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = appendTextUsingGETValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendTextUsingGETAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendTextUsingGETValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendTextUsingPOST
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendTextUsingPOSTCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appendText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendTextUsingPOSTValidateBeforeCall(String padID, String text, final ApiCallback _callback) throws ApiException {
        return appendTextUsingPOSTCall(padID, text, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response appendTextUsingPOST(String padID, String text) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = appendTextUsingPOSTWithHttpInfo(padID, text);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> appendTextUsingPOSTWithHttpInfo(String padID, String text) throws ApiException {
        okhttp3.Call localVarCall = appendTextUsingPOSTValidateBeforeCall(padID, text, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param text  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendTextUsingPOSTAsync(String padID, String text, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendTextUsingPOSTValidateBeforeCall(padID, text, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyPadUsingGET
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadUsingGETCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/copyPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyPadUsingGETValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return copyPadUsingGETCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response copyPadUsingGET(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = copyPadUsingGETWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> copyPadUsingGETWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = copyPadUsingGETValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadUsingGETAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyPadUsingGETValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyPadUsingPOST
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadUsingPOSTCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/copyPad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyPadUsingPOSTValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return copyPadUsingPOSTCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response copyPadUsingPOST(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = copyPadUsingPOSTWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> copyPadUsingPOSTWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = copyPadUsingPOSTValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadUsingPOSTAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyPadUsingPOSTValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyPadWithoutHistoryUsingGET
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadWithoutHistoryUsingGETCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/copyPadWithoutHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyPadWithoutHistoryUsingGETValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return copyPadWithoutHistoryUsingGETCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response copyPadWithoutHistoryUsingGET(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = copyPadWithoutHistoryUsingGETWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> copyPadWithoutHistoryUsingGETWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = copyPadWithoutHistoryUsingGETValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadWithoutHistoryUsingGETAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyPadWithoutHistoryUsingGETValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyPadWithoutHistoryUsingPOST
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadWithoutHistoryUsingPOSTCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/copyPadWithoutHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyPadWithoutHistoryUsingPOSTValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return copyPadWithoutHistoryUsingPOSTCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response copyPadWithoutHistoryUsingPOST(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = copyPadWithoutHistoryUsingPOSTWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> copyPadWithoutHistoryUsingPOSTWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = copyPadWithoutHistoryUsingPOSTValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyPadWithoutHistoryUsingPOSTAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyPadWithoutHistoryUsingPOSTValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttributePoolUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributePoolUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getAttributePool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttributePoolUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getAttributePoolUsingGETCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getAttributePoolUsingGET(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getAttributePoolUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getAttributePoolUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getAttributePoolUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributePoolUsingGETAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttributePoolUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttributePoolUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributePoolUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getAttributePool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttributePoolUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getAttributePoolUsingPOSTCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getAttributePoolUsingPOST(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getAttributePoolUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getAttributePoolUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getAttributePoolUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributePoolUsingPOSTAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttributePoolUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPadIDUsingGET
     * @param roID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPadIDUsingGETCall(String roID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getPadID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (roID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roID", roID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPadIDUsingGETValidateBeforeCall(String roID, final ApiCallback _callback) throws ApiException {
        return getPadIDUsingGETCall(roID, _callback);

    }

    /**
     * 
     * 
     * @param roID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getPadIDUsingGET(String roID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getPadIDUsingGETWithHttpInfo(roID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getPadIDUsingGETWithHttpInfo(String roID) throws ApiException {
        okhttp3.Call localVarCall = getPadIDUsingGETValidateBeforeCall(roID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPadIDUsingGETAsync(String roID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPadIDUsingGETValidateBeforeCall(roID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPadIDUsingPOST
     * @param roID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPadIDUsingPOSTCall(String roID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getPadID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (roID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roID", roID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPadIDUsingPOSTValidateBeforeCall(String roID, final ApiCallback _callback) throws ApiException {
        return getPadIDUsingPOSTCall(roID, _callback);

    }

    /**
     * 
     * 
     * @param roID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getPadIDUsingPOST(String roID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getPadIDUsingPOSTWithHttpInfo(roID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getPadIDUsingPOSTWithHttpInfo(String roID) throws ApiException {
        okhttp3.Call localVarCall = getPadIDUsingPOSTValidateBeforeCall(roID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPadIDUsingPOSTAsync(String roID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPadIDUsingPOSTValidateBeforeCall(roID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRevisionChangesetUsingGET
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionChangesetUsingGETCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getRevisionChangeset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRevisionChangesetUsingGETValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getRevisionChangesetUsingGETCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getRevisionChangesetUsingGET(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getRevisionChangesetUsingGETWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getRevisionChangesetUsingGETWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getRevisionChangesetUsingGETValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionChangesetUsingGETAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRevisionChangesetUsingGETValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRevisionChangesetUsingPOST
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionChangesetUsingPOSTCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getRevisionChangeset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRevisionChangesetUsingPOSTValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return getRevisionChangesetUsingPOSTCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getRevisionChangesetUsingPOST(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getRevisionChangesetUsingPOSTWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getRevisionChangesetUsingPOSTWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = getRevisionChangesetUsingPOSTValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRevisionChangesetUsingPOSTAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRevisionChangesetUsingPOSTValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedRevisionsCountUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedRevisionsCountUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getSavedRevisionsCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedRevisionsCountUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getSavedRevisionsCountUsingGETCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getSavedRevisionsCountUsingGET(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getSavedRevisionsCountUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getSavedRevisionsCountUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getSavedRevisionsCountUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedRevisionsCountUsingGETAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedRevisionsCountUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedRevisionsCountUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedRevisionsCountUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getSavedRevisionsCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedRevisionsCountUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return getSavedRevisionsCountUsingPOSTCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getSavedRevisionsCountUsingPOST(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getSavedRevisionsCountUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getSavedRevisionsCountUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = getSavedRevisionsCountUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedRevisionsCountUsingPOSTAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedRevisionsCountUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getStats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStatsUsingGETCall(_callback);

    }

    /**
     * 
     * 
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getStatsUsingGET() throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getStatsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getStatsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStatsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsUsingGETAsync(final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatsUsingPOST
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsUsingPOSTCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getStats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatsUsingPOSTValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStatsUsingPOSTCall(_callback);

    }

    /**
     * 
     * 
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response getStatsUsingPOST() throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = getStatsUsingPOSTWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> getStatsUsingPOSTWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStatsUsingPOSTValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsUsingPOSTAsync(final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatsUsingPOSTValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSavedRevisionsUsingGET
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSavedRevisionsUsingGETCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSavedRevisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSavedRevisionsUsingGETValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return listSavedRevisionsUsingGETCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response listSavedRevisionsUsingGET(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = listSavedRevisionsUsingGETWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> listSavedRevisionsUsingGETWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = listSavedRevisionsUsingGETValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSavedRevisionsUsingGETAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSavedRevisionsUsingGETValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSavedRevisionsUsingPOST
     * @param padID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSavedRevisionsUsingPOSTCall(String padID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSavedRevisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSavedRevisionsUsingPOSTValidateBeforeCall(String padID, final ApiCallback _callback) throws ApiException {
        return listSavedRevisionsUsingPOSTCall(padID, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response listSavedRevisionsUsingPOST(String padID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = listSavedRevisionsUsingPOSTWithHttpInfo(padID);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> listSavedRevisionsUsingPOSTWithHttpInfo(String padID) throws ApiException {
        okhttp3.Call localVarCall = listSavedRevisionsUsingPOSTValidateBeforeCall(padID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSavedRevisionsUsingPOSTAsync(String padID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSavedRevisionsUsingPOSTValidateBeforeCall(padID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for movePadUsingGET
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePadUsingGETCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/movePad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call movePadUsingGETValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return movePadUsingGETCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response movePadUsingGET(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = movePadUsingGETWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> movePadUsingGETWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = movePadUsingGETValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePadUsingGETAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = movePadUsingGETValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for movePadUsingPOST
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePadUsingPOSTCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/movePad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceID", sourceID));
        }

        if (destinationID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationID", destinationID));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call movePadUsingPOSTValidateBeforeCall(String sourceID, String destinationID, String force, final ApiCallback _callback) throws ApiException {
        return movePadUsingPOSTCall(sourceID, destinationID, force, _callback);

    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response movePadUsingPOST(String sourceID, String destinationID, String force) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = movePadUsingPOSTWithHttpInfo(sourceID, destinationID, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> movePadUsingPOSTWithHttpInfo(String sourceID, String destinationID, String force) throws ApiException {
        okhttp3.Call localVarCall = movePadUsingPOSTValidateBeforeCall(sourceID, destinationID, force, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sourceID  (optional)
     * @param destinationID  (optional)
     * @param force  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePadUsingPOSTAsync(String sourceID, String destinationID, String force, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = movePadUsingPOSTValidateBeforeCall(sourceID, destinationID, force, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreRevisionUsingGET
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreRevisionUsingGETCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restoreRevision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreRevisionUsingGETValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return restoreRevisionUsingGETCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response restoreRevisionUsingGET(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = restoreRevisionUsingGETWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> restoreRevisionUsingGETWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = restoreRevisionUsingGETValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreRevisionUsingGETAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreRevisionUsingGETValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreRevisionUsingPOST
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreRevisionUsingPOSTCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restoreRevision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreRevisionUsingPOSTValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return restoreRevisionUsingPOSTCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response restoreRevisionUsingPOST(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = restoreRevisionUsingPOSTWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> restoreRevisionUsingPOSTWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = restoreRevisionUsingPOSTValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreRevisionUsingPOSTAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreRevisionUsingPOSTValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveRevisionUsingGET
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveRevisionUsingGETCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saveRevision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveRevisionUsingGETValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return saveRevisionUsingGETCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response saveRevisionUsingGET(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = saveRevisionUsingGETWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> saveRevisionUsingGETWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = saveRevisionUsingGETValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveRevisionUsingGETAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveRevisionUsingGETValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveRevisionUsingPOST
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveRevisionUsingPOSTCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saveRevision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (padID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("padID", padID));
        }

        if (rev != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rev", rev));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveRevisionUsingPOSTValidateBeforeCall(String padID, String rev, final ApiCallback _callback) throws ApiException {
        return saveRevisionUsingPOSTCall(padID, rev, _callback);

    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response saveRevisionUsingPOST(String padID, String rev) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = saveRevisionUsingPOSTWithHttpInfo(padID, rev);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> saveRevisionUsingPOSTWithHttpInfo(String padID, String rev) throws ApiException {
        okhttp3.Call localVarCall = saveRevisionUsingPOSTValidateBeforeCall(padID, rev, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param padID  (optional)
     * @param rev  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveRevisionUsingPOSTAsync(String padID, String rev, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveRevisionUsingPOSTValidateBeforeCall(padID, rev, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
