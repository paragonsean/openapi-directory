/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendChatMessageUsingGET200Response;
import org.openapitools.client.model.AppendChatMessageUsingGET400Response;
import org.openapitools.client.model.AppendChatMessageUsingGET401Response;
import org.openapitools.client.model.AppendChatMessageUsingGET500Response;
import org.openapitools.client.model.CreateSessionUsingGET200Response;
import org.openapitools.client.model.GetSessionInfoUsingGET200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSessionUsingGET
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionUsingGETCall(String groupID, String authorID, String validUntil, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createSession";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        if (validUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validUntil", validUntil));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionUsingGETValidateBeforeCall(String groupID, String authorID, String validUntil, final ApiCallback _callback) throws ApiException {
        return createSessionUsingGETCall(groupID, authorID, validUntil, _callback);

    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @return CreateSessionUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionUsingGET200Response createSessionUsingGET(String groupID, String authorID, String validUntil) throws ApiException {
        ApiResponse<CreateSessionUsingGET200Response> localVarResp = createSessionUsingGETWithHttpInfo(groupID, authorID, validUntil);
        return localVarResp.getData();
    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @return ApiResponse&lt;CreateSessionUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSessionUsingGET200Response> createSessionUsingGETWithHttpInfo(String groupID, String authorID, String validUntil) throws ApiException {
        okhttp3.Call localVarCall = createSessionUsingGETValidateBeforeCall(groupID, authorID, validUntil, null);
        Type localVarReturnType = new TypeToken<CreateSessionUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds (asynchronously)
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionUsingGETAsync(String groupID, String authorID, String validUntil, final ApiCallback<CreateSessionUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionUsingGETValidateBeforeCall(groupID, authorID, validUntil, _callback);
        Type localVarReturnType = new TypeToken<CreateSessionUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSessionUsingPOST
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionUsingPOSTCall(String groupID, String authorID, String validUntil, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createSession";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupID", groupID));
        }

        if (authorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorID", authorID));
        }

        if (validUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validUntil", validUntil));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionUsingPOSTValidateBeforeCall(String groupID, String authorID, String validUntil, final ApiCallback _callback) throws ApiException {
        return createSessionUsingPOSTCall(groupID, authorID, validUntil, _callback);

    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @return CreateSessionUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionUsingGET200Response createSessionUsingPOST(String groupID, String authorID, String validUntil) throws ApiException {
        ApiResponse<CreateSessionUsingGET200Response> localVarResp = createSessionUsingPOSTWithHttpInfo(groupID, authorID, validUntil);
        return localVarResp.getData();
    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @return ApiResponse&lt;CreateSessionUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSessionUsingGET200Response> createSessionUsingPOSTWithHttpInfo(String groupID, String authorID, String validUntil) throws ApiException {
        okhttp3.Call localVarCall = createSessionUsingPOSTValidateBeforeCall(groupID, authorID, validUntil, null);
        Type localVarReturnType = new TypeToken<CreateSessionUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new session. validUntil is an unix timestamp in seconds (asynchronously)
     * 
     * @param groupID  (optional)
     * @param authorID  (optional)
     * @param validUntil  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionUsingPOSTAsync(String groupID, String authorID, String validUntil, final ApiCallback<CreateSessionUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionUsingPOSTValidateBeforeCall(groupID, authorID, validUntil, _callback);
        Type localVarReturnType = new TypeToken<CreateSessionUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSessionUsingGET
     * @param sessionID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionUsingGETCall(String sessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleteSession";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionID", sessionID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSessionUsingGETValidateBeforeCall(String sessionID, final ApiCallback _callback) throws ApiException {
        return deleteSessionUsingGETCall(sessionID, _callback);

    }

    /**
     * deletes a session
     * 
     * @param sessionID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deleteSessionUsingGET(String sessionID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deleteSessionUsingGETWithHttpInfo(sessionID);
        return localVarResp.getData();
    }

    /**
     * deletes a session
     * 
     * @param sessionID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deleteSessionUsingGETWithHttpInfo(String sessionID) throws ApiException {
        okhttp3.Call localVarCall = deleteSessionUsingGETValidateBeforeCall(sessionID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a session (asynchronously)
     * 
     * @param sessionID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionUsingGETAsync(String sessionID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSessionUsingGETValidateBeforeCall(sessionID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSessionUsingPOST
     * @param sessionID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionUsingPOSTCall(String sessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleteSession";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionID", sessionID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSessionUsingPOSTValidateBeforeCall(String sessionID, final ApiCallback _callback) throws ApiException {
        return deleteSessionUsingPOSTCall(sessionID, _callback);

    }

    /**
     * deletes a session
     * 
     * @param sessionID  (optional)
     * @return AppendChatMessageUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public AppendChatMessageUsingGET200Response deleteSessionUsingPOST(String sessionID) throws ApiException {
        ApiResponse<AppendChatMessageUsingGET200Response> localVarResp = deleteSessionUsingPOSTWithHttpInfo(sessionID);
        return localVarResp.getData();
    }

    /**
     * deletes a session
     * 
     * @param sessionID  (optional)
     * @return ApiResponse&lt;AppendChatMessageUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppendChatMessageUsingGET200Response> deleteSessionUsingPOSTWithHttpInfo(String sessionID) throws ApiException {
        okhttp3.Call localVarCall = deleteSessionUsingPOSTValidateBeforeCall(sessionID, null);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes a session (asynchronously)
     * 
     * @param sessionID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionUsingPOSTAsync(String sessionID, final ApiCallback<AppendChatMessageUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSessionUsingPOSTValidateBeforeCall(sessionID, _callback);
        Type localVarReturnType = new TypeToken<AppendChatMessageUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSessionInfoUsingGET
     * @param sessionID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionInfoUsingGETCall(String sessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getSessionInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionID", sessionID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionInfoUsingGETValidateBeforeCall(String sessionID, final ApiCallback _callback) throws ApiException {
        return getSessionInfoUsingGETCall(sessionID, _callback);

    }

    /**
     * returns informations about a session
     * 
     * @param sessionID  (optional)
     * @return GetSessionInfoUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionInfoUsingGET200Response getSessionInfoUsingGET(String sessionID) throws ApiException {
        ApiResponse<GetSessionInfoUsingGET200Response> localVarResp = getSessionInfoUsingGETWithHttpInfo(sessionID);
        return localVarResp.getData();
    }

    /**
     * returns informations about a session
     * 
     * @param sessionID  (optional)
     * @return ApiResponse&lt;GetSessionInfoUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSessionInfoUsingGET200Response> getSessionInfoUsingGETWithHttpInfo(String sessionID) throws ApiException {
        okhttp3.Call localVarCall = getSessionInfoUsingGETValidateBeforeCall(sessionID, null);
        Type localVarReturnType = new TypeToken<GetSessionInfoUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns informations about a session (asynchronously)
     * 
     * @param sessionID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionInfoUsingGETAsync(String sessionID, final ApiCallback<GetSessionInfoUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionInfoUsingGETValidateBeforeCall(sessionID, _callback);
        Type localVarReturnType = new TypeToken<GetSessionInfoUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSessionInfoUsingPOST
     * @param sessionID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionInfoUsingPOSTCall(String sessionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getSessionInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionID", sessionID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionInfoUsingPOSTValidateBeforeCall(String sessionID, final ApiCallback _callback) throws ApiException {
        return getSessionInfoUsingPOSTCall(sessionID, _callback);

    }

    /**
     * returns informations about a session
     * 
     * @param sessionID  (optional)
     * @return GetSessionInfoUsingGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionInfoUsingGET200Response getSessionInfoUsingPOST(String sessionID) throws ApiException {
        ApiResponse<GetSessionInfoUsingGET200Response> localVarResp = getSessionInfoUsingPOSTWithHttpInfo(sessionID);
        return localVarResp.getData();
    }

    /**
     * returns informations about a session
     * 
     * @param sessionID  (optional)
     * @return ApiResponse&lt;GetSessionInfoUsingGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSessionInfoUsingGET200Response> getSessionInfoUsingPOSTWithHttpInfo(String sessionID) throws ApiException {
        okhttp3.Call localVarCall = getSessionInfoUsingPOSTValidateBeforeCall(sessionID, null);
        Type localVarReturnType = new TypeToken<GetSessionInfoUsingGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns informations about a session (asynchronously)
     * 
     * @param sessionID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok (code 0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> generic api error (code 1) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> no or wrong API key (code 4) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal api error (code 2) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionInfoUsingPOSTAsync(String sessionID, final ApiCallback<GetSessionInfoUsingGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionInfoUsingPOSTValidateBeforeCall(sessionID, _callback);
        Type localVarReturnType = new TypeToken<GetSessionInfoUsingGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
