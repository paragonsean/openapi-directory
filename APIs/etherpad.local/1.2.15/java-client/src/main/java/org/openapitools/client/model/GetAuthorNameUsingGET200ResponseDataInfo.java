/*
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAuthorNameUsingGET200ResponseDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:00.926964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAuthorNameUsingGET200ResponseDataInfo {
  public static final String SERIALIZED_NAME_COLOR_ID = "colorId";
  @SerializedName(SERIALIZED_NAME_COLOR_ID)
  private String colorId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public GetAuthorNameUsingGET200ResponseDataInfo() {
  }

  public GetAuthorNameUsingGET200ResponseDataInfo colorId(String colorId) {
    this.colorId = colorId;
    return this;
  }

  /**
   * Get colorId
   * @return colorId
   */
  @javax.annotation.Nullable
  public String getColorId() {
    return colorId;
  }

  public void setColorId(String colorId) {
    this.colorId = colorId;
  }


  public GetAuthorNameUsingGET200ResponseDataInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetAuthorNameUsingGET200ResponseDataInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetAuthorNameUsingGET200ResponseDataInfo timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAuthorNameUsingGET200ResponseDataInfo getAuthorNameUsingGET200ResponseDataInfo = (GetAuthorNameUsingGET200ResponseDataInfo) o;
    return Objects.equals(this.colorId, getAuthorNameUsingGET200ResponseDataInfo.colorId) &&
        Objects.equals(this.id, getAuthorNameUsingGET200ResponseDataInfo.id) &&
        Objects.equals(this.name, getAuthorNameUsingGET200ResponseDataInfo.name) &&
        Objects.equals(this.timestamp, getAuthorNameUsingGET200ResponseDataInfo.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorId, id, name, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAuthorNameUsingGET200ResponseDataInfo {\n");
    sb.append("    colorId: ").append(toIndentedString(colorId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorId");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAuthorNameUsingGET200ResponseDataInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAuthorNameUsingGET200ResponseDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAuthorNameUsingGET200ResponseDataInfo is not found in the empty JSON string", GetAuthorNameUsingGET200ResponseDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAuthorNameUsingGET200ResponseDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAuthorNameUsingGET200ResponseDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorId") != null && !jsonObj.get("colorId").isJsonNull()) && !jsonObj.get("colorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAuthorNameUsingGET200ResponseDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAuthorNameUsingGET200ResponseDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAuthorNameUsingGET200ResponseDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAuthorNameUsingGET200ResponseDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAuthorNameUsingGET200ResponseDataInfo>() {
           @Override
           public void write(JsonWriter out, GetAuthorNameUsingGET200ResponseDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAuthorNameUsingGET200ResponseDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAuthorNameUsingGET200ResponseDataInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAuthorNameUsingGET200ResponseDataInfo
   * @throws IOException if the JSON string is invalid with respect to GetAuthorNameUsingGET200ResponseDataInfo
   */
  public static GetAuthorNameUsingGET200ResponseDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAuthorNameUsingGET200ResponseDataInfo.class);
  }

  /**
   * Convert an instance of GetAuthorNameUsingGET200ResponseDataInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

