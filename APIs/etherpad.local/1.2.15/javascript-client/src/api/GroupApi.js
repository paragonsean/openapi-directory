/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendChatMessageUsingGET200Response from '../model/AppendChatMessageUsingGET200Response';
import AppendChatMessageUsingGET400Response from '../model/AppendChatMessageUsingGET400Response';
import AppendChatMessageUsingGET401Response from '../model/AppendChatMessageUsingGET401Response';
import AppendChatMessageUsingGET500Response from '../model/AppendChatMessageUsingGET500Response';
import CreateGroupUsingGET200Response from '../model/CreateGroupUsingGET200Response';
import ListAllGroupsUsingGET200Response from '../model/ListAllGroupsUsingGET200Response';
import ListAllPadsUsingGET200Response from '../model/ListAllPadsUsingGET200Response';
import ListSessionsOfAuthorUsingGET200Response from '../model/ListSessionsOfAuthorUsingGET200Response';

/**
* Group service.
* @module api/GroupApi
* @version 1.2.15
*/
export default class GroupApi {

    /**
    * Constructs a new GroupApi. 
    * @alias module:api/GroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGroupIfNotExistsForUsingGET operation.
     * @callback module:api/GroupApi~createGroupIfNotExistsForUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * @param {Object} opts Optional parameters
     * @param {String} [groupMapper] 
     * @param {module:api/GroupApi~createGroupIfNotExistsForUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupUsingGET200Response}
     */
    createGroupIfNotExistsForUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupMapper': opts['groupMapper']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateGroupUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroupIfNotExistsFor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupIfNotExistsForUsingPOST operation.
     * @callback module:api/GroupApi~createGroupIfNotExistsForUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this functions helps you to map your application group ids to Etherpad group ids
     * @param {Object} opts Optional parameters
     * @param {String} [groupMapper] 
     * @param {module:api/GroupApi~createGroupIfNotExistsForUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupUsingGET200Response}
     */
    createGroupIfNotExistsForUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupMapper': opts['groupMapper']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateGroupUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroupIfNotExistsFor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupPadUsingGET operation.
     * @callback module:api/GroupApi~createGroupPadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new pad in this group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {String} [padName] 
     * @param {String} [text] 
     * @param {module:api/GroupApi~createGroupPadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    createGroupPadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID'],
        'padName': opts['padName'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroupPad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupPadUsingPOST operation.
     * @callback module:api/GroupApi~createGroupPadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new pad in this group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {String} [padName] 
     * @param {String} [text] 
     * @param {module:api/GroupApi~createGroupPadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    createGroupPadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID'],
        'padName': opts['padName'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroupPad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupUsingGET operation.
     * @callback module:api/GroupApi~createGroupUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new group
     * @param {module:api/GroupApi~createGroupUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupUsingGET200Response}
     */
    createGroupUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateGroupUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupUsingPOST operation.
     * @callback module:api/GroupApi~createGroupUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new group
     * @param {module:api/GroupApi~createGroupUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupUsingGET200Response}
     */
    createGroupUsingPOST(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateGroupUsingGET200Response;
      return this.apiClient.callApi(
        '/createGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupUsingGET operation.
     * @callback module:api/GroupApi~deleteGroupUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~deleteGroupUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deleteGroupUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deleteGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupUsingPOST operation.
     * @callback module:api/GroupApi~deleteGroupUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~deleteGroupUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deleteGroupUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deleteGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGroupsUsingGET operation.
     * @callback module:api/GroupApi~listAllGroupsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllGroupsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/GroupApi~listAllGroupsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllGroupsUsingGET200Response}
     */
    listAllGroupsUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllGroupsUsingGET200Response;
      return this.apiClient.callApi(
        '/listAllGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGroupsUsingPOST operation.
     * @callback module:api/GroupApi~listAllGroupsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllGroupsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/GroupApi~listAllGroupsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllGroupsUsingGET200Response}
     */
    listAllGroupsUsingPOST(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllGroupsUsingGET200Response;
      return this.apiClient.callApi(
        '/listAllGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPadsUsingGET operation.
     * @callback module:api/GroupApi~listPadsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all pads of this group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~listPadsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listPadsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listPads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPadsUsingPOST operation.
     * @callback module:api/GroupApi~listPadsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all pads of this group
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~listPadsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listPadsUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listPads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionsOfGroupUsingGET operation.
     * @callback module:api/GroupApi~listSessionsOfGroupUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionsOfAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~listSessionsOfGroupUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionsOfAuthorUsingGET200Response}
     */
    listSessionsOfGroupUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSessionsOfAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/listSessionsOfGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionsOfGroupUsingPOST operation.
     * @callback module:api/GroupApi~listSessionsOfGroupUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionsOfAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {module:api/GroupApi~listSessionsOfGroupUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionsOfAuthorUsingGET200Response}
     */
    listSessionsOfGroupUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSessionsOfAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/listSessionsOfGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
