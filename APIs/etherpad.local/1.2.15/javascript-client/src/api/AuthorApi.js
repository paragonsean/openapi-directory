/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendChatMessageUsingGET400Response from '../model/AppendChatMessageUsingGET400Response';
import AppendChatMessageUsingGET401Response from '../model/AppendChatMessageUsingGET401Response';
import AppendChatMessageUsingGET500Response from '../model/AppendChatMessageUsingGET500Response';
import CreateAuthorUsingGET200Response from '../model/CreateAuthorUsingGET200Response';
import GetAuthorNameUsingGET200Response from '../model/GetAuthorNameUsingGET200Response';
import ListAllPadsUsingGET200Response from '../model/ListAllPadsUsingGET200Response';
import ListSessionsOfAuthorUsingGET200Response from '../model/ListSessionsOfAuthorUsingGET200Response';

/**
* Author service.
* @module api/AuthorApi
* @version 1.2.15
*/
export default class AuthorApi {

    /**
    * Constructs a new AuthorApi. 
    * @alias module:api/AuthorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAuthorIfNotExistsForUsingGET operation.
     * @callback module:api/AuthorApi~createAuthorIfNotExistsForUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * @param {Object} opts Optional parameters
     * @param {String} [authorMapper] 
     * @param {String} [name] 
     * @param {module:api/AuthorApi~createAuthorIfNotExistsForUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthorUsingGET200Response}
     */
    createAuthorIfNotExistsForUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorMapper': opts['authorMapper'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/createAuthorIfNotExistsFor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorIfNotExistsForUsingPOST operation.
     * @callback module:api/AuthorApi~createAuthorIfNotExistsForUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this functions helps you to map your application author ids to Etherpad author ids
     * @param {Object} opts Optional parameters
     * @param {String} [authorMapper] 
     * @param {String} [name] 
     * @param {module:api/AuthorApi~createAuthorIfNotExistsForUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthorUsingGET200Response}
     */
    createAuthorIfNotExistsForUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorMapper': opts['authorMapper'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/createAuthorIfNotExistsFor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorUsingGET operation.
     * @callback module:api/AuthorApi~createAuthorUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new author
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:api/AuthorApi~createAuthorUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthorUsingGET200Response}
     */
    createAuthorUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/createAuthor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorUsingPOST operation.
     * @callback module:api/AuthorApi~createAuthorUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new author
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:api/AuthorApi~createAuthorUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthorUsingGET200Response}
     */
    createAuthorUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/createAuthor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorNameUsingGET operation.
     * @callback module:api/AuthorApi~getAuthorNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorNameUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Author Name of the author
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~getAuthorNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorNameUsingGET200Response}
     */
    getAuthorNameUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthorNameUsingGET200Response;
      return this.apiClient.callApi(
        '/getAuthorName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorNameUsingPOST operation.
     * @callback module:api/AuthorApi~getAuthorNameUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorNameUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Author Name of the author
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~getAuthorNameUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorNameUsingGET200Response}
     */
    getAuthorNameUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthorNameUsingGET200Response;
      return this.apiClient.callApi(
        '/getAuthorName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPadsOfAuthorUsingGET operation.
     * @callback module:api/AuthorApi~listPadsOfAuthorUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns an array of all pads this author contributed to
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~listPadsOfAuthorUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listPadsOfAuthorUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listPadsOfAuthor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPadsOfAuthorUsingPOST operation.
     * @callback module:api/AuthorApi~listPadsOfAuthorUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns an array of all pads this author contributed to
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~listPadsOfAuthorUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listPadsOfAuthorUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listPadsOfAuthor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionsOfAuthorUsingGET operation.
     * @callback module:api/AuthorApi~listSessionsOfAuthorUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionsOfAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all sessions of an author
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~listSessionsOfAuthorUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionsOfAuthorUsingGET200Response}
     */
    listSessionsOfAuthorUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSessionsOfAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/listSessionsOfAuthor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionsOfAuthorUsingPOST operation.
     * @callback module:api/AuthorApi~listSessionsOfAuthorUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSessionsOfAuthorUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all sessions of an author
     * @param {Object} opts Optional parameters
     * @param {String} [authorID] 
     * @param {module:api/AuthorApi~listSessionsOfAuthorUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSessionsOfAuthorUsingGET200Response}
     */
    listSessionsOfAuthorUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authorID': opts['authorID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSessionsOfAuthorUsingGET200Response;
      return this.apiClient.callApi(
        '/listSessionsOfAuthor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
