/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendChatMessageUsingGET200Response from '../model/AppendChatMessageUsingGET200Response';
import AppendChatMessageUsingGET400Response from '../model/AppendChatMessageUsingGET400Response';
import AppendChatMessageUsingGET401Response from '../model/AppendChatMessageUsingGET401Response';
import AppendChatMessageUsingGET500Response from '../model/AppendChatMessageUsingGET500Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.2.15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appendTextUsingGET operation.
     * @callback module:api/DefaultApi~appendTextUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/DefaultApi~appendTextUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    appendTextUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/appendText', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appendTextUsingPOST operation.
     * @callback module:api/DefaultApi~appendTextUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/DefaultApi~appendTextUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    appendTextUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/appendText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyPadUsingGET operation.
     * @callback module:api/DefaultApi~copyPadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~copyPadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    copyPadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/copyPad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyPadUsingPOST operation.
     * @callback module:api/DefaultApi~copyPadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~copyPadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    copyPadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/copyPad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyPadWithoutHistoryUsingGET operation.
     * @callback module:api/DefaultApi~copyPadWithoutHistoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~copyPadWithoutHistoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    copyPadWithoutHistoryUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/copyPadWithoutHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyPadWithoutHistoryUsingPOST operation.
     * @callback module:api/DefaultApi~copyPadWithoutHistoryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~copyPadWithoutHistoryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    copyPadWithoutHistoryUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/copyPadWithoutHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributePoolUsingGET operation.
     * @callback module:api/DefaultApi~getAttributePoolUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~getAttributePoolUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getAttributePoolUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getAttributePool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributePoolUsingPOST operation.
     * @callback module:api/DefaultApi~getAttributePoolUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~getAttributePoolUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getAttributePoolUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getAttributePool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPadIDUsingGET operation.
     * @callback module:api/DefaultApi~getPadIDUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [roID] 
     * @param {module:api/DefaultApi~getPadIDUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getPadIDUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'roID': opts['roID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getPadID', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPadIDUsingPOST operation.
     * @callback module:api/DefaultApi~getPadIDUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [roID] 
     * @param {module:api/DefaultApi~getPadIDUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getPadIDUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'roID': opts['roID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getPadID', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevisionChangesetUsingGET operation.
     * @callback module:api/DefaultApi~getRevisionChangesetUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~getRevisionChangesetUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getRevisionChangesetUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getRevisionChangeset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevisionChangesetUsingPOST operation.
     * @callback module:api/DefaultApi~getRevisionChangesetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~getRevisionChangesetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getRevisionChangesetUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getRevisionChangeset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSavedRevisionsCountUsingGET operation.
     * @callback module:api/DefaultApi~getSavedRevisionsCountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~getSavedRevisionsCountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getSavedRevisionsCountUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getSavedRevisionsCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSavedRevisionsCountUsingPOST operation.
     * @callback module:api/DefaultApi~getSavedRevisionsCountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~getSavedRevisionsCountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getSavedRevisionsCountUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getSavedRevisionsCount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatsUsingGET operation.
     * @callback module:api/DefaultApi~getStatsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getStatsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getStatsUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getStats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatsUsingPOST operation.
     * @callback module:api/DefaultApi~getStatsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getStatsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    getStatsUsingPOST(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/getStats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSavedRevisionsUsingGET operation.
     * @callback module:api/DefaultApi~listSavedRevisionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~listSavedRevisionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    listSavedRevisionsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/listSavedRevisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSavedRevisionsUsingPOST operation.
     * @callback module:api/DefaultApi~listSavedRevisionsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/DefaultApi~listSavedRevisionsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    listSavedRevisionsUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/listSavedRevisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the movePadUsingGET operation.
     * @callback module:api/DefaultApi~movePadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~movePadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    movePadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/movePad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the movePadUsingPOST operation.
     * @callback module:api/DefaultApi~movePadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sourceID] 
     * @param {String} [destinationID] 
     * @param {String} [force] 
     * @param {module:api/DefaultApi~movePadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    movePadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sourceID': opts['sourceID'],
        'destinationID': opts['destinationID'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/movePad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreRevisionUsingGET operation.
     * @callback module:api/DefaultApi~restoreRevisionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~restoreRevisionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    restoreRevisionUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/restoreRevision', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreRevisionUsingPOST operation.
     * @callback module:api/DefaultApi~restoreRevisionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~restoreRevisionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    restoreRevisionUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/restoreRevision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRevisionUsingGET operation.
     * @callback module:api/DefaultApi~saveRevisionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~saveRevisionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    saveRevisionUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/saveRevision', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRevisionUsingPOST operation.
     * @callback module:api/DefaultApi~saveRevisionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/DefaultApi~saveRevisionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    saveRevisionUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/saveRevision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
