/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendChatMessageUsingGET200Response from '../model/AppendChatMessageUsingGET200Response';
import AppendChatMessageUsingGET400Response from '../model/AppendChatMessageUsingGET400Response';
import AppendChatMessageUsingGET401Response from '../model/AppendChatMessageUsingGET401Response';
import AppendChatMessageUsingGET500Response from '../model/AppendChatMessageUsingGET500Response';
import CreateSessionUsingGET200Response from '../model/CreateSessionUsingGET200Response';
import GetSessionInfoUsingGET200Response from '../model/GetSessionInfoUsingGET200Response';

/**
* Session service.
* @module api/SessionApi
* @version 1.2.15
*/
export default class SessionApi {

    /**
    * Constructs a new SessionApi. 
    * @alias module:api/SessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSessionUsingGET operation.
     * @callback module:api/SessionApi~createSessionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSessionUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {String} [authorID] 
     * @param {String} [validUntil] 
     * @param {module:api/SessionApi~createSessionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSessionUsingGET200Response}
     */
    createSessionUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID'],
        'authorID': opts['authorID'],
        'validUntil': opts['validUntil']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateSessionUsingGET200Response;
      return this.apiClient.callApi(
        '/createSession', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSessionUsingPOST operation.
     * @callback module:api/SessionApi~createSessionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSessionUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new session. validUntil is an unix timestamp in seconds
     * @param {Object} opts Optional parameters
     * @param {String} [groupID] 
     * @param {String} [authorID] 
     * @param {String} [validUntil] 
     * @param {module:api/SessionApi~createSessionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSessionUsingGET200Response}
     */
    createSessionUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupID': opts['groupID'],
        'authorID': opts['authorID'],
        'validUntil': opts['validUntil']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateSessionUsingGET200Response;
      return this.apiClient.callApi(
        '/createSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSessionUsingGET operation.
     * @callback module:api/SessionApi~deleteSessionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a session
     * @param {Object} opts Optional parameters
     * @param {String} [sessionID] 
     * @param {module:api/SessionApi~deleteSessionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deleteSessionUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sessionID': opts['sessionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deleteSession', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSessionUsingPOST operation.
     * @callback module:api/SessionApi~deleteSessionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a session
     * @param {Object} opts Optional parameters
     * @param {String} [sessionID] 
     * @param {module:api/SessionApi~deleteSessionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deleteSessionUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sessionID': opts['sessionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deleteSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionInfoUsingGET operation.
     * @callback module:api/SessionApi~getSessionInfoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSessionInfoUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns informations about a session
     * @param {Object} opts Optional parameters
     * @param {String} [sessionID] 
     * @param {module:api/SessionApi~getSessionInfoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSessionInfoUsingGET200Response}
     */
    getSessionInfoUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sessionID': opts['sessionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSessionInfoUsingGET200Response;
      return this.apiClient.callApi(
        '/getSessionInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionInfoUsingPOST operation.
     * @callback module:api/SessionApi~getSessionInfoUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSessionInfoUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns informations about a session
     * @param {Object} opts Optional parameters
     * @param {String} [sessionID] 
     * @param {module:api/SessionApi~getSessionInfoUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSessionInfoUsingGET200Response}
     */
    getSessionInfoUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sessionID': opts['sessionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSessionInfoUsingGET200Response;
      return this.apiClient.callApi(
        '/getSessionInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
