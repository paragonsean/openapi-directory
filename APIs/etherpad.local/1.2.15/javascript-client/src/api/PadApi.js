/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendChatMessageUsingGET200Response from '../model/AppendChatMessageUsingGET200Response';
import AppendChatMessageUsingGET400Response from '../model/AppendChatMessageUsingGET400Response';
import AppendChatMessageUsingGET401Response from '../model/AppendChatMessageUsingGET401Response';
import AppendChatMessageUsingGET500Response from '../model/AppendChatMessageUsingGET500Response';
import CreateDiffHTMLUsingGET200Response from '../model/CreateDiffHTMLUsingGET200Response';
import GetChatHeadUsingGET200Response from '../model/GetChatHeadUsingGET200Response';
import GetChatHistoryUsingGET200Response from '../model/GetChatHistoryUsingGET200Response';
import GetHTMLUsingGET200Response from '../model/GetHTMLUsingGET200Response';
import GetLastEditedUsingGET200Response from '../model/GetLastEditedUsingGET200Response';
import GetPublicStatusUsingGET200Response from '../model/GetPublicStatusUsingGET200Response';
import GetReadOnlyIDUsingGET200Response from '../model/GetReadOnlyIDUsingGET200Response';
import GetRevisionsCountUsingGET200Response from '../model/GetRevisionsCountUsingGET200Response';
import GetTextUsingGET200Response from '../model/GetTextUsingGET200Response';
import ListAllPadsUsingGET200Response from '../model/ListAllPadsUsingGET200Response';
import ListAuthorsOfPadUsingGET200Response from '../model/ListAuthorsOfPadUsingGET200Response';
import PadUsersCountUsingGET200Response from '../model/PadUsersCountUsingGET200Response';
import PadUsersUsingGET200Response from '../model/PadUsersUsingGET200Response';

/**
* Pad service.
* @module api/PadApi
* @version 1.2.15
*/
export default class PadApi {

    /**
    * Constructs a new PadApi. 
    * @alias module:api/PadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appendChatMessageUsingGET operation.
     * @callback module:api/PadApi~appendChatMessageUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * appends a chat message
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {String} [authorID] 
     * @param {String} [time] 
     * @param {module:api/PadApi~appendChatMessageUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    appendChatMessageUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text'],
        'authorID': opts['authorID'],
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/appendChatMessage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appendChatMessageUsingPOST operation.
     * @callback module:api/PadApi~appendChatMessageUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * appends a chat message
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {String} [authorID] 
     * @param {String} [time] 
     * @param {module:api/PadApi~appendChatMessageUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    appendChatMessageUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text'],
        'authorID': opts['authorID'],
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/appendChatMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkTokenUsingGET operation.
     * @callback module:api/PadApi~checkTokenUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns ok when the current api token is valid
     * @param {module:api/PadApi~checkTokenUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    checkTokenUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/checkToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkTokenUsingPOST operation.
     * @callback module:api/PadApi~checkTokenUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns ok when the current api token is valid
     * @param {module:api/PadApi~checkTokenUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    checkTokenUsingPOST(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/checkToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDiffHTMLUsingGET operation.
     * @callback module:api/PadApi~createDiffHTMLUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDiffHTMLUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [startRev] 
     * @param {String} [endRev] 
     * @param {module:api/PadApi~createDiffHTMLUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDiffHTMLUsingGET200Response}
     */
    createDiffHTMLUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'startRev': opts['startRev'],
        'endRev': opts['endRev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateDiffHTMLUsingGET200Response;
      return this.apiClient.callApi(
        '/createDiffHTML', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDiffHTMLUsingPOST operation.
     * @callback module:api/PadApi~createDiffHTMLUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDiffHTMLUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [startRev] 
     * @param {String} [endRev] 
     * @param {module:api/PadApi~createDiffHTMLUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDiffHTMLUsingGET200Response}
     */
    createDiffHTMLUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'startRev': opts['startRev'],
        'endRev': opts['endRev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateDiffHTMLUsingGET200Response;
      return this.apiClient.callApi(
        '/createDiffHTML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPadUsingGET operation.
     * @callback module:api/PadApi~createPadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/PadApi~createPadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    createPadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/createPad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPadUsingPOST operation.
     * @callback module:api/PadApi~createPadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/PadApi~createPadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    createPadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/createPad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePadUsingGET operation.
     * @callback module:api/PadApi~deletePadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~deletePadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deletePadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deletePad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePadUsingPOST operation.
     * @callback module:api/PadApi~deletePadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~deletePadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    deletePadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/deletePad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatHeadUsingGET operation.
     * @callback module:api/PadApi~getChatHeadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatHeadUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the chatHead (chat-message) of the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getChatHeadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatHeadUsingGET200Response}
     */
    getChatHeadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChatHeadUsingGET200Response;
      return this.apiClient.callApi(
        '/getChatHead', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatHeadUsingPOST operation.
     * @callback module:api/PadApi~getChatHeadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatHeadUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the chatHead (chat-message) of the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getChatHeadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatHeadUsingGET200Response}
     */
    getChatHeadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChatHeadUsingGET200Response;
      return this.apiClient.callApi(
        '/getChatHead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatHistoryUsingGET operation.
     * @callback module:api/PadApi~getChatHistoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatHistoryUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the chat history
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [start] 
     * @param {String} [end] 
     * @param {module:api/PadApi~getChatHistoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatHistoryUsingGET200Response}
     */
    getChatHistoryUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChatHistoryUsingGET200Response;
      return this.apiClient.callApi(
        '/getChatHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatHistoryUsingPOST operation.
     * @callback module:api/PadApi~getChatHistoryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatHistoryUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the chat history
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [start] 
     * @param {String} [end] 
     * @param {module:api/PadApi~getChatHistoryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatHistoryUsingGET200Response}
     */
    getChatHistoryUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChatHistoryUsingGET200Response;
      return this.apiClient.callApi(
        '/getChatHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHTMLUsingGET operation.
     * @callback module:api/PadApi~getHTMLUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHTMLUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the text of a pad formatted as HTML
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/PadApi~getHTMLUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHTMLUsingGET200Response}
     */
    getHTMLUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetHTMLUsingGET200Response;
      return this.apiClient.callApi(
        '/getHTML', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHTMLUsingPOST operation.
     * @callback module:api/PadApi~getHTMLUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHTMLUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the text of a pad formatted as HTML
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/PadApi~getHTMLUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHTMLUsingGET200Response}
     */
    getHTMLUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetHTMLUsingGET200Response;
      return this.apiClient.callApi(
        '/getHTML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastEditedUsingGET operation.
     * @callback module:api/PadApi~getLastEditedUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLastEditedUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the timestamp of the last revision of the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getLastEditedUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLastEditedUsingGET200Response}
     */
    getLastEditedUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLastEditedUsingGET200Response;
      return this.apiClient.callApi(
        '/getLastEdited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastEditedUsingPOST operation.
     * @callback module:api/PadApi~getLastEditedUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLastEditedUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the timestamp of the last revision of the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getLastEditedUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLastEditedUsingGET200Response}
     */
    getLastEditedUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLastEditedUsingGET200Response;
      return this.apiClient.callApi(
        '/getLastEdited', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicStatusUsingGET operation.
     * @callback module:api/PadApi~getPublicStatusUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicStatusUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return true of false
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getPublicStatusUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicStatusUsingGET200Response}
     */
    getPublicStatusUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPublicStatusUsingGET200Response;
      return this.apiClient.callApi(
        '/getPublicStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicStatusUsingPOST operation.
     * @callback module:api/PadApi~getPublicStatusUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicStatusUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return true of false
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getPublicStatusUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicStatusUsingGET200Response}
     */
    getPublicStatusUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPublicStatusUsingGET200Response;
      return this.apiClient.callApi(
        '/getPublicStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadOnlyIDUsingGET operation.
     * @callback module:api/PadApi~getReadOnlyIDUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadOnlyIDUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the read only link of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getReadOnlyIDUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadOnlyIDUsingGET200Response}
     */
    getReadOnlyIDUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadOnlyIDUsingGET200Response;
      return this.apiClient.callApi(
        '/getReadOnlyID', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadOnlyIDUsingPOST operation.
     * @callback module:api/PadApi~getReadOnlyIDUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadOnlyIDUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the read only link of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getReadOnlyIDUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadOnlyIDUsingGET200Response}
     */
    getReadOnlyIDUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadOnlyIDUsingGET200Response;
      return this.apiClient.callApi(
        '/getReadOnlyID', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevisionsCountUsingGET operation.
     * @callback module:api/PadApi~getRevisionsCountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRevisionsCountUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the number of revisions of this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getRevisionsCountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRevisionsCountUsingGET200Response}
     */
    getRevisionsCountUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRevisionsCountUsingGET200Response;
      return this.apiClient.callApi(
        '/getRevisionsCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevisionsCountUsingPOST operation.
     * @callback module:api/PadApi~getRevisionsCountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRevisionsCountUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the number of revisions of this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~getRevisionsCountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRevisionsCountUsingGET200Response}
     */
    getRevisionsCountUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRevisionsCountUsingGET200Response;
      return this.apiClient.callApi(
        '/getRevisionsCount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextUsingGET operation.
     * @callback module:api/PadApi~getTextUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTextUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the text of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/PadApi~getTextUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTextUsingGET200Response}
     */
    getTextUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTextUsingGET200Response;
      return this.apiClient.callApi(
        '/getText', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextUsingPOST operation.
     * @callback module:api/PadApi~getTextUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTextUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the text of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [rev] 
     * @param {module:api/PadApi~getTextUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTextUsingGET200Response}
     */
    getTextUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'rev': opts['rev']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTextUsingGET200Response;
      return this.apiClient.callApi(
        '/getText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllPadsUsingGET operation.
     * @callback module:api/PadApi~listAllPadsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all the pads
     * @param {module:api/PadApi~listAllPadsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listAllPadsUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listAllPads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllPadsUsingPOST operation.
     * @callback module:api/PadApi~listAllPadsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllPadsUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all the pads
     * @param {module:api/PadApi~listAllPadsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllPadsUsingGET200Response}
     */
    listAllPadsUsingPOST(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllPadsUsingGET200Response;
      return this.apiClient.callApi(
        '/listAllPads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorsOfPadUsingGET operation.
     * @callback module:api/PadApi~listAuthorsOfPadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAuthorsOfPadUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns an array of authors who contributed to this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~listAuthorsOfPadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAuthorsOfPadUsingGET200Response}
     */
    listAuthorsOfPadUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAuthorsOfPadUsingGET200Response;
      return this.apiClient.callApi(
        '/listAuthorsOfPad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorsOfPadUsingPOST operation.
     * @callback module:api/PadApi~listAuthorsOfPadUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAuthorsOfPadUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns an array of authors who contributed to this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~listAuthorsOfPadUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAuthorsOfPadUsingGET200Response}
     */
    listAuthorsOfPadUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAuthorsOfPadUsingGET200Response;
      return this.apiClient.callApi(
        '/listAuthorsOfPad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the padUsersCountUsingGET operation.
     * @callback module:api/PadApi~padUsersCountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PadUsersCountUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the number of user that are currently editing this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~padUsersCountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PadUsersCountUsingGET200Response}
     */
    padUsersCountUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PadUsersCountUsingGET200Response;
      return this.apiClient.callApi(
        '/padUsersCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the padUsersCountUsingPOST operation.
     * @callback module:api/PadApi~padUsersCountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PadUsersCountUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the number of user that are currently editing this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~padUsersCountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PadUsersCountUsingGET200Response}
     */
    padUsersCountUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PadUsersCountUsingGET200Response;
      return this.apiClient.callApi(
        '/padUsersCount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the padUsersUsingGET operation.
     * @callback module:api/PadApi~padUsersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PadUsersUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the list of users that are currently editing this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~padUsersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PadUsersUsingGET200Response}
     */
    padUsersUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PadUsersUsingGET200Response;
      return this.apiClient.callApi(
        '/padUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the padUsersUsingPOST operation.
     * @callback module:api/PadApi~padUsersUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PadUsersUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the list of users that are currently editing this pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {module:api/PadApi~padUsersUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PadUsersUsingGET200Response}
     */
    padUsersUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PadUsersUsingGET200Response;
      return this.apiClient.callApi(
        '/padUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendClientsMessageUsingGET operation.
     * @callback module:api/PadApi~sendClientsMessageUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends a custom message of type msg to the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [msg] 
     * @param {module:api/PadApi~sendClientsMessageUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    sendClientsMessageUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'msg': opts['msg']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/sendClientsMessage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendClientsMessageUsingPOST operation.
     * @callback module:api/PadApi~sendClientsMessageUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends a custom message of type msg to the pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [msg] 
     * @param {module:api/PadApi~sendClientsMessageUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    sendClientsMessageUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'msg': opts['msg']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/sendClientsMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setHTMLUsingGET operation.
     * @callback module:api/PadApi~setHTMLUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the text of a pad with HTML
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [html] 
     * @param {module:api/PadApi~setHTMLUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setHTMLUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'html': opts['html']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setHTML', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setHTMLUsingPOST operation.
     * @callback module:api/PadApi~setHTMLUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the text of a pad with HTML
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [html] 
     * @param {module:api/PadApi~setHTMLUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setHTMLUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'html': opts['html']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setHTML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPublicStatusUsingGET operation.
     * @callback module:api/PadApi~setPublicStatusUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets a boolean for the public status of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [publicStatus] 
     * @param {module:api/PadApi~setPublicStatusUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setPublicStatusUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'publicStatus': opts['publicStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setPublicStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPublicStatusUsingPOST operation.
     * @callback module:api/PadApi~setPublicStatusUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets a boolean for the public status of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [publicStatus] 
     * @param {module:api/PadApi~setPublicStatusUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setPublicStatusUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'publicStatus': opts['publicStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setPublicStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTextUsingGET operation.
     * @callback module:api/PadApi~setTextUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the text of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/PadApi~setTextUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setTextUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setText', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTextUsingPOST operation.
     * @callback module:api/PadApi~setTextUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendChatMessageUsingGET200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sets the text of a pad
     * @param {Object} opts Optional parameters
     * @param {String} [padID] 
     * @param {String} [text] 
     * @param {module:api/PadApi~setTextUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendChatMessageUsingGET200Response}
     */
    setTextUsingPOST(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'padID': opts['padID'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppendChatMessageUsingGET200Response;
      return this.apiClient.callApi(
        '/setText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
