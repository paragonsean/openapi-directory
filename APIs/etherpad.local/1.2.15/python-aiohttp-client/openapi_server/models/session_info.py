# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_id: str=None, group_id: str=None, id: str=None, valid_until: int=None):
        """SessionInfo - a model defined in OpenAPI

        :param author_id: The author_id of this SessionInfo.
        :param group_id: The group_id of this SessionInfo.
        :param id: The id of this SessionInfo.
        :param valid_until: The valid_until of this SessionInfo.
        """
        self.openapi_types = {
            'author_id': str,
            'group_id': str,
            'id': str,
            'valid_until': int
        }

        self.attribute_map = {
            'author_id': 'authorID',
            'group_id': 'groupID',
            'id': 'id',
            'valid_until': 'validUntil'
        }

        self._author_id = author_id
        self._group_id = group_id
        self._id = id
        self._valid_until = valid_until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionInfo of this SessionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_id(self):
        """Gets the author_id of this SessionInfo.


        :return: The author_id of this SessionInfo.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this SessionInfo.


        :param author_id: The author_id of this SessionInfo.
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def group_id(self):
        """Gets the group_id of this SessionInfo.


        :return: The group_id of this SessionInfo.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SessionInfo.


        :param group_id: The group_id of this SessionInfo.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this SessionInfo.


        :return: The id of this SessionInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionInfo.


        :param id: The id of this SessionInfo.
        :type id: str
        """

        self._id = id

    @property
    def valid_until(self):
        """Gets the valid_until of this SessionInfo.


        :return: The valid_until of this SessionInfo.
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this SessionInfo.


        :param valid_until: The valid_until of this SessionInfo.
        :type valid_until: int
        """

        self._valid_until = valid_until
