/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChatHistoryUsingGET_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChatHistoryUsingGET_200_response_data::OAIGetChatHistoryUsingGET_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChatHistoryUsingGET_200_response_data::OAIGetChatHistoryUsingGET_200_response_data() {
    this->initializeModel();
}

OAIGetChatHistoryUsingGET_200_response_data::~OAIGetChatHistoryUsingGET_200_response_data() {}

void OAIGetChatHistoryUsingGET_200_response_data::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIGetChatHistoryUsingGET_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChatHistoryUsingGET_200_response_data::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIGetChatHistoryUsingGET_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChatHistoryUsingGET_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QList<OAIGetChatHeadUsingGET_200_response_data_chatHead> OAIGetChatHistoryUsingGET_200_response_data::getMessages() const {
    return m_messages;
}
void OAIGetChatHistoryUsingGET_200_response_data::setMessages(const QList<OAIGetChatHeadUsingGET_200_response_data_chatHead> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGetChatHistoryUsingGET_200_response_data::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGetChatHistoryUsingGET_200_response_data::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIGetChatHistoryUsingGET_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChatHistoryUsingGET_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
