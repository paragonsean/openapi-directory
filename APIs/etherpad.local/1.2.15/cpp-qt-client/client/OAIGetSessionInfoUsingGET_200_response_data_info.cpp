/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSessionInfoUsingGET_200_response_data_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSessionInfoUsingGET_200_response_data_info::OAIGetSessionInfoUsingGET_200_response_data_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSessionInfoUsingGET_200_response_data_info::OAIGetSessionInfoUsingGET_200_response_data_info() {
    this->initializeModel();
}

OAIGetSessionInfoUsingGET_200_response_data_info::~OAIGetSessionInfoUsingGET_200_response_data_info() {}

void OAIGetSessionInfoUsingGET_200_response_data_info::initializeModel() {

    m_author_id_isSet = false;
    m_author_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;
}

void OAIGetSessionInfoUsingGET_200_response_data_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSessionInfoUsingGET_200_response_data_info::fromJsonObject(QJsonObject json) {

    m_author_id_isValid = ::OpenAPI::fromJsonValue(m_author_id, json[QString("authorID")]);
    m_author_id_isSet = !json[QString("authorID")].isNull() && m_author_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupID")]);
    m_group_id_isSet = !json[QString("groupID")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("validUntil")]);
    m_valid_until_isSet = !json[QString("validUntil")].isNull() && m_valid_until_isValid;
}

QString OAIGetSessionInfoUsingGET_200_response_data_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSessionInfoUsingGET_200_response_data_info::asJsonObject() const {
    QJsonObject obj;
    if (m_author_id_isSet) {
        obj.insert(QString("authorID"), ::OpenAPI::toJsonValue(m_author_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupID"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("validUntil"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    return obj;
}

QString OAIGetSessionInfoUsingGET_200_response_data_info::getAuthorId() const {
    return m_author_id;
}
void OAIGetSessionInfoUsingGET_200_response_data_info::setAuthorId(const QString &author_id) {
    m_author_id = author_id;
    m_author_id_isSet = true;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_author_id_Set() const{
    return m_author_id_isSet;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_author_id_Valid() const{
    return m_author_id_isValid;
}

QString OAIGetSessionInfoUsingGET_200_response_data_info::getGroupId() const {
    return m_group_id;
}
void OAIGetSessionInfoUsingGET_200_response_data_info::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGetSessionInfoUsingGET_200_response_data_info::getId() const {
    return m_id;
}
void OAIGetSessionInfoUsingGET_200_response_data_info::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGetSessionInfoUsingGET_200_response_data_info::getValidUntil() const {
    return m_valid_until;
}
void OAIGetSessionInfoUsingGET_200_response_data_info::setValidUntil(const qint32 &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSessionInfoUsingGET_200_response_data_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
