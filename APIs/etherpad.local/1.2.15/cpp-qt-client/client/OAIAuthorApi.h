/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorApi_H
#define OAI_OAIAuthorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendChatMessageUsingGET_400_response.h"
#include "OAIAppendChatMessageUsingGET_401_response.h"
#include "OAIAppendChatMessageUsingGET_500_response.h"
#include "OAICreateAuthorUsingGET_200_response.h"
#include "OAIGetAuthorNameUsingGET_200_response.h"
#include "OAIListAllPadsUsingGET_200_response.h"
#include "OAIListSessionsOfAuthorUsingGET_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorApi(const int timeOut = 0);
    ~OAIAuthorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  author_mapper QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void createAuthorIfNotExistsForUsingGET(const ::OpenAPI::OptionalParam<QString> &author_mapper = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_mapper QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void createAuthorIfNotExistsForUsingPOST(const ::OpenAPI::OptionalParam<QString> &author_mapper = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    */
    virtual void createAuthorUsingGET(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    */
    virtual void createAuthorUsingPOST(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void getAuthorNameUsingGET(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void getAuthorNameUsingPOST(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void listPadsOfAuthorUsingGET(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void listPadsOfAuthorUsingPOST(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void listSessionsOfAuthorUsingGET(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  author_id QString [optional]
    */
    virtual void listSessionsOfAuthorUsingPOST(const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAuthorIfNotExistsForUsingGETCallback(OAIHttpRequestWorker *worker);
    void createAuthorIfNotExistsForUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createAuthorUsingGETCallback(OAIHttpRequestWorker *worker);
    void createAuthorUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getAuthorNameUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAuthorNameUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listPadsOfAuthorUsingGETCallback(OAIHttpRequestWorker *worker);
    void listPadsOfAuthorUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listSessionsOfAuthorUsingGETCallback(OAIHttpRequestWorker *worker);
    void listSessionsOfAuthorUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAuthorIfNotExistsForUsingGETSignal(OAICreateAuthorUsingGET_200_response summary);
    void createAuthorIfNotExistsForUsingPOSTSignal(OAICreateAuthorUsingGET_200_response summary);
    void createAuthorUsingGETSignal(OAICreateAuthorUsingGET_200_response summary);
    void createAuthorUsingPOSTSignal(OAICreateAuthorUsingGET_200_response summary);
    void getAuthorNameUsingGETSignal(OAIGetAuthorNameUsingGET_200_response summary);
    void getAuthorNameUsingPOSTSignal(OAIGetAuthorNameUsingGET_200_response summary);
    void listPadsOfAuthorUsingGETSignal(OAIListAllPadsUsingGET_200_response summary);
    void listPadsOfAuthorUsingPOSTSignal(OAIListAllPadsUsingGET_200_response summary);
    void listSessionsOfAuthorUsingGETSignal(OAIListSessionsOfAuthorUsingGET_200_response summary);
    void listSessionsOfAuthorUsingPOSTSignal(OAIListSessionsOfAuthorUsingGET_200_response summary);


    void createAuthorIfNotExistsForUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthorUsingGET_200_response summary);
    void createAuthorIfNotExistsForUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthorUsingGET_200_response summary);
    void createAuthorUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthorUsingGET_200_response summary);
    void createAuthorUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthorUsingGET_200_response summary);
    void getAuthorNameUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetAuthorNameUsingGET_200_response summary);
    void getAuthorNameUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetAuthorNameUsingGET_200_response summary);
    void listPadsOfAuthorUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listPadsOfAuthorUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listSessionsOfAuthorUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListSessionsOfAuthorUsingGET_200_response summary);
    void listSessionsOfAuthorUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListSessionsOfAuthorUsingGET_200_response summary);

    Q_DECL_DEPRECATED_X("Use createAuthorIfNotExistsForUsingGETSignalError() instead")
    void createAuthorIfNotExistsForUsingGETSignalE(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorIfNotExistsForUsingGETSignalError(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorIfNotExistsForUsingPOSTSignalError() instead")
    void createAuthorIfNotExistsForUsingPOSTSignalE(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorIfNotExistsForUsingPOSTSignalError(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorUsingGETSignalError() instead")
    void createAuthorUsingGETSignalE(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorUsingGETSignalError(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorUsingPOSTSignalError() instead")
    void createAuthorUsingPOSTSignalE(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorUsingPOSTSignalError(OAICreateAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorNameUsingGETSignalError() instead")
    void getAuthorNameUsingGETSignalE(OAIGetAuthorNameUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorNameUsingGETSignalError(OAIGetAuthorNameUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorNameUsingPOSTSignalError() instead")
    void getAuthorNameUsingPOSTSignalE(OAIGetAuthorNameUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorNameUsingPOSTSignalError(OAIGetAuthorNameUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsOfAuthorUsingGETSignalError() instead")
    void listPadsOfAuthorUsingGETSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsOfAuthorUsingGETSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsOfAuthorUsingPOSTSignalError() instead")
    void listPadsOfAuthorUsingPOSTSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsOfAuthorUsingPOSTSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfAuthorUsingGETSignalError() instead")
    void listSessionsOfAuthorUsingGETSignalE(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfAuthorUsingGETSignalError(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfAuthorUsingPOSTSignalError() instead")
    void listSessionsOfAuthorUsingPOSTSignalE(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfAuthorUsingPOSTSignalError(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAuthorIfNotExistsForUsingGETSignalErrorFull() instead")
    void createAuthorIfNotExistsForUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorIfNotExistsForUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorIfNotExistsForUsingPOSTSignalErrorFull() instead")
    void createAuthorIfNotExistsForUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorIfNotExistsForUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorUsingGETSignalErrorFull() instead")
    void createAuthorUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuthorUsingPOSTSignalErrorFull() instead")
    void createAuthorUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuthorUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorNameUsingGETSignalErrorFull() instead")
    void getAuthorNameUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorNameUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorNameUsingPOSTSignalErrorFull() instead")
    void getAuthorNameUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorNameUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsOfAuthorUsingGETSignalErrorFull() instead")
    void listPadsOfAuthorUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsOfAuthorUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsOfAuthorUsingPOSTSignalErrorFull() instead")
    void listPadsOfAuthorUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsOfAuthorUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfAuthorUsingGETSignalErrorFull() instead")
    void listSessionsOfAuthorUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfAuthorUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfAuthorUsingPOSTSignalErrorFull() instead")
    void listSessionsOfAuthorUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfAuthorUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
