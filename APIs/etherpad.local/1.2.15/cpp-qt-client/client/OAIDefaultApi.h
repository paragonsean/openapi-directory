/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendChatMessageUsingGET_200_response.h"
#include "OAIAppendChatMessageUsingGET_400_response.h"
#include "OAIAppendChatMessageUsingGET_401_response.h"
#include "OAIAppendChatMessageUsingGET_500_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void appendTextUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void appendTextUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void copyPadUsingGET(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void copyPadUsingPOST(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void copyPadWithoutHistoryUsingGET(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void copyPadWithoutHistoryUsingPOST(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getAttributePoolUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getAttributePoolUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ro_id QString [optional]
    */
    virtual void getPadIDUsingGET(const ::OpenAPI::OptionalParam<QString> &ro_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ro_id QString [optional]
    */
    virtual void getPadIDUsingPOST(const ::OpenAPI::OptionalParam<QString> &ro_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getRevisionChangesetUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getRevisionChangesetUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getSavedRevisionsCountUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getSavedRevisionsCountUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());


    virtual void getStatsUsingGET();


    virtual void getStatsUsingPOST();

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void listSavedRevisionsUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void listSavedRevisionsUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void movePadUsingGET(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [optional]
    * @param[in]  destination_id QString [optional]
    * @param[in]  force QString [optional]
    */
    virtual void movePadUsingPOST(const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void restoreRevisionUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void restoreRevisionUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void saveRevisionUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void saveRevisionUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appendTextUsingGETCallback(OAIHttpRequestWorker *worker);
    void appendTextUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void copyPadUsingGETCallback(OAIHttpRequestWorker *worker);
    void copyPadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void copyPadWithoutHistoryUsingGETCallback(OAIHttpRequestWorker *worker);
    void copyPadWithoutHistoryUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getAttributePoolUsingGETCallback(OAIHttpRequestWorker *worker);
    void getAttributePoolUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getPadIDUsingGETCallback(OAIHttpRequestWorker *worker);
    void getPadIDUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getRevisionChangesetUsingGETCallback(OAIHttpRequestWorker *worker);
    void getRevisionChangesetUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getSavedRevisionsCountUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSavedRevisionsCountUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getStatsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getStatsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listSavedRevisionsUsingGETCallback(OAIHttpRequestWorker *worker);
    void listSavedRevisionsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void movePadUsingGETCallback(OAIHttpRequestWorker *worker);
    void movePadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void restoreRevisionUsingGETCallback(OAIHttpRequestWorker *worker);
    void restoreRevisionUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void saveRevisionUsingGETCallback(OAIHttpRequestWorker *worker);
    void saveRevisionUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appendTextUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void appendTextUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadWithoutHistoryUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadWithoutHistoryUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getAttributePoolUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getAttributePoolUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getPadIDUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getPadIDUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getRevisionChangesetUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getRevisionChangesetUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getSavedRevisionsCountUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getSavedRevisionsCountUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getStatsUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getStatsUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void listSavedRevisionsUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void listSavedRevisionsUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void movePadUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void movePadUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void restoreRevisionUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void restoreRevisionUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void saveRevisionUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void saveRevisionUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);


    void appendTextUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void appendTextUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadWithoutHistoryUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void copyPadWithoutHistoryUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getAttributePoolUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getAttributePoolUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getPadIDUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getPadIDUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getRevisionChangesetUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getRevisionChangesetUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getSavedRevisionsCountUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getSavedRevisionsCountUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getStatsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getStatsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void listSavedRevisionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void listSavedRevisionsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void movePadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void movePadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void restoreRevisionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void restoreRevisionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void saveRevisionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void saveRevisionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);

    Q_DECL_DEPRECATED_X("Use appendTextUsingGETSignalError() instead")
    void appendTextUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appendTextUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appendTextUsingPOSTSignalError() instead")
    void appendTextUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appendTextUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadUsingGETSignalError() instead")
    void copyPadUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadUsingPOSTSignalError() instead")
    void copyPadUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadWithoutHistoryUsingGETSignalError() instead")
    void copyPadWithoutHistoryUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadWithoutHistoryUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadWithoutHistoryUsingPOSTSignalError() instead")
    void copyPadWithoutHistoryUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadWithoutHistoryUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributePoolUsingGETSignalError() instead")
    void getAttributePoolUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributePoolUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributePoolUsingPOSTSignalError() instead")
    void getAttributePoolUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributePoolUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPadIDUsingGETSignalError() instead")
    void getPadIDUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPadIDUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPadIDUsingPOSTSignalError() instead")
    void getPadIDUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPadIDUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionChangesetUsingGETSignalError() instead")
    void getRevisionChangesetUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionChangesetUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionChangesetUsingPOSTSignalError() instead")
    void getRevisionChangesetUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionChangesetUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedRevisionsCountUsingGETSignalError() instead")
    void getSavedRevisionsCountUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedRevisionsCountUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedRevisionsCountUsingPOSTSignalError() instead")
    void getSavedRevisionsCountUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedRevisionsCountUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsUsingGETSignalError() instead")
    void getStatsUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsUsingPOSTSignalError() instead")
    void getStatsUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavedRevisionsUsingGETSignalError() instead")
    void listSavedRevisionsUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavedRevisionsUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavedRevisionsUsingPOSTSignalError() instead")
    void listSavedRevisionsUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavedRevisionsUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePadUsingGETSignalError() instead")
    void movePadUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movePadUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePadUsingPOSTSignalError() instead")
    void movePadUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movePadUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreRevisionUsingGETSignalError() instead")
    void restoreRevisionUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreRevisionUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreRevisionUsingPOSTSignalError() instead")
    void restoreRevisionUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreRevisionUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveRevisionUsingGETSignalError() instead")
    void saveRevisionUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveRevisionUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveRevisionUsingPOSTSignalError() instead")
    void saveRevisionUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveRevisionUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appendTextUsingGETSignalErrorFull() instead")
    void appendTextUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appendTextUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appendTextUsingPOSTSignalErrorFull() instead")
    void appendTextUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appendTextUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadUsingGETSignalErrorFull() instead")
    void copyPadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadUsingPOSTSignalErrorFull() instead")
    void copyPadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadWithoutHistoryUsingGETSignalErrorFull() instead")
    void copyPadWithoutHistoryUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadWithoutHistoryUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyPadWithoutHistoryUsingPOSTSignalErrorFull() instead")
    void copyPadWithoutHistoryUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyPadWithoutHistoryUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributePoolUsingGETSignalErrorFull() instead")
    void getAttributePoolUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributePoolUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributePoolUsingPOSTSignalErrorFull() instead")
    void getAttributePoolUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributePoolUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPadIDUsingGETSignalErrorFull() instead")
    void getPadIDUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPadIDUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPadIDUsingPOSTSignalErrorFull() instead")
    void getPadIDUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPadIDUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionChangesetUsingGETSignalErrorFull() instead")
    void getRevisionChangesetUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionChangesetUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionChangesetUsingPOSTSignalErrorFull() instead")
    void getRevisionChangesetUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionChangesetUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedRevisionsCountUsingGETSignalErrorFull() instead")
    void getSavedRevisionsCountUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedRevisionsCountUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedRevisionsCountUsingPOSTSignalErrorFull() instead")
    void getSavedRevisionsCountUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedRevisionsCountUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsUsingGETSignalErrorFull() instead")
    void getStatsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsUsingPOSTSignalErrorFull() instead")
    void getStatsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavedRevisionsUsingGETSignalErrorFull() instead")
    void listSavedRevisionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavedRevisionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSavedRevisionsUsingPOSTSignalErrorFull() instead")
    void listSavedRevisionsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSavedRevisionsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePadUsingGETSignalErrorFull() instead")
    void movePadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movePadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movePadUsingPOSTSignalErrorFull() instead")
    void movePadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movePadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreRevisionUsingGETSignalErrorFull() instead")
    void restoreRevisionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreRevisionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreRevisionUsingPOSTSignalErrorFull() instead")
    void restoreRevisionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreRevisionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveRevisionUsingGETSignalErrorFull() instead")
    void saveRevisionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveRevisionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveRevisionUsingPOSTSignalErrorFull() instead")
    void saveRevisionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveRevisionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
