/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupApi_H
#define OAI_OAIGroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendChatMessageUsingGET_200_response.h"
#include "OAIAppendChatMessageUsingGET_400_response.h"
#include "OAIAppendChatMessageUsingGET_401_response.h"
#include "OAIAppendChatMessageUsingGET_500_response.h"
#include "OAICreateGroupUsingGET_200_response.h"
#include "OAIListAllGroupsUsingGET_200_response.h"
#include "OAIListAllPadsUsingGET_200_response.h"
#include "OAIListSessionsOfAuthorUsingGET_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupApi : public QObject {
    Q_OBJECT

public:
    OAIGroupApi(const int timeOut = 0);
    ~OAIGroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_mapper QString [optional]
    */
    virtual void createGroupIfNotExistsForUsingGET(const ::OpenAPI::OptionalParam<QString> &group_mapper = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_mapper QString [optional]
    */
    virtual void createGroupIfNotExistsForUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_mapper = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    * @param[in]  pad_name QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void createGroupPadUsingGET(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pad_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    * @param[in]  pad_name QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void createGroupPadUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pad_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());


    virtual void createGroupUsingGET();


    virtual void createGroupUsingPOST();

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void deleteGroupUsingGET(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void deleteGroupUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());


    virtual void listAllGroupsUsingGET();


    virtual void listAllGroupsUsingPOST();

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void listPadsUsingGET(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void listPadsUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void listSessionsOfGroupUsingGET(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    */
    virtual void listSessionsOfGroupUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGroupIfNotExistsForUsingGETCallback(OAIHttpRequestWorker *worker);
    void createGroupIfNotExistsForUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createGroupPadUsingGETCallback(OAIHttpRequestWorker *worker);
    void createGroupPadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createGroupUsingGETCallback(OAIHttpRequestWorker *worker);
    void createGroupUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteGroupUsingGETCallback(OAIHttpRequestWorker *worker);
    void deleteGroupUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listAllGroupsUsingGETCallback(OAIHttpRequestWorker *worker);
    void listAllGroupsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listPadsUsingGETCallback(OAIHttpRequestWorker *worker);
    void listPadsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listSessionsOfGroupUsingGETCallback(OAIHttpRequestWorker *worker);
    void listSessionsOfGroupUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGroupIfNotExistsForUsingGETSignal(OAICreateGroupUsingGET_200_response summary);
    void createGroupIfNotExistsForUsingPOSTSignal(OAICreateGroupUsingGET_200_response summary);
    void createGroupPadUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void createGroupPadUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void createGroupUsingGETSignal(OAICreateGroupUsingGET_200_response summary);
    void createGroupUsingPOSTSignal(OAICreateGroupUsingGET_200_response summary);
    void deleteGroupUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void deleteGroupUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void listAllGroupsUsingGETSignal(OAIListAllGroupsUsingGET_200_response summary);
    void listAllGroupsUsingPOSTSignal(OAIListAllGroupsUsingGET_200_response summary);
    void listPadsUsingGETSignal(OAIListAllPadsUsingGET_200_response summary);
    void listPadsUsingPOSTSignal(OAIListAllPadsUsingGET_200_response summary);
    void listSessionsOfGroupUsingGETSignal(OAIListSessionsOfAuthorUsingGET_200_response summary);
    void listSessionsOfGroupUsingPOSTSignal(OAIListSessionsOfAuthorUsingGET_200_response summary);


    void createGroupIfNotExistsForUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupUsingGET_200_response summary);
    void createGroupIfNotExistsForUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupUsingGET_200_response summary);
    void createGroupPadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void createGroupPadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void createGroupUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupUsingGET_200_response summary);
    void createGroupUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupUsingGET_200_response summary);
    void deleteGroupUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void deleteGroupUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void listAllGroupsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListAllGroupsUsingGET_200_response summary);
    void listAllGroupsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListAllGroupsUsingGET_200_response summary);
    void listPadsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listPadsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listSessionsOfGroupUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListSessionsOfAuthorUsingGET_200_response summary);
    void listSessionsOfGroupUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListSessionsOfAuthorUsingGET_200_response summary);

    Q_DECL_DEPRECATED_X("Use createGroupIfNotExistsForUsingGETSignalError() instead")
    void createGroupIfNotExistsForUsingGETSignalE(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupIfNotExistsForUsingGETSignalError(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupIfNotExistsForUsingPOSTSignalError() instead")
    void createGroupIfNotExistsForUsingPOSTSignalE(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupIfNotExistsForUsingPOSTSignalError(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupPadUsingGETSignalError() instead")
    void createGroupPadUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupPadUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupPadUsingPOSTSignalError() instead")
    void createGroupPadUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupPadUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupUsingGETSignalError() instead")
    void createGroupUsingGETSignalE(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupUsingGETSignalError(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupUsingPOSTSignalError() instead")
    void createGroupUsingPOSTSignalE(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupUsingPOSTSignalError(OAICreateGroupUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupUsingGETSignalError() instead")
    void deleteGroupUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupUsingPOSTSignalError() instead")
    void deleteGroupUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGroupsUsingGETSignalError() instead")
    void listAllGroupsUsingGETSignalE(OAIListAllGroupsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGroupsUsingGETSignalError(OAIListAllGroupsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGroupsUsingPOSTSignalError() instead")
    void listAllGroupsUsingPOSTSignalE(OAIListAllGroupsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGroupsUsingPOSTSignalError(OAIListAllGroupsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsUsingGETSignalError() instead")
    void listPadsUsingGETSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsUsingGETSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsUsingPOSTSignalError() instead")
    void listPadsUsingPOSTSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsUsingPOSTSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfGroupUsingGETSignalError() instead")
    void listSessionsOfGroupUsingGETSignalE(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfGroupUsingGETSignalError(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfGroupUsingPOSTSignalError() instead")
    void listSessionsOfGroupUsingPOSTSignalE(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfGroupUsingPOSTSignalError(OAIListSessionsOfAuthorUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGroupIfNotExistsForUsingGETSignalErrorFull() instead")
    void createGroupIfNotExistsForUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupIfNotExistsForUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupIfNotExistsForUsingPOSTSignalErrorFull() instead")
    void createGroupIfNotExistsForUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupIfNotExistsForUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupPadUsingGETSignalErrorFull() instead")
    void createGroupPadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupPadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupPadUsingPOSTSignalErrorFull() instead")
    void createGroupPadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupPadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupUsingGETSignalErrorFull() instead")
    void createGroupUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupUsingPOSTSignalErrorFull() instead")
    void createGroupUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupUsingGETSignalErrorFull() instead")
    void deleteGroupUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupUsingPOSTSignalErrorFull() instead")
    void deleteGroupUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGroupsUsingGETSignalErrorFull() instead")
    void listAllGroupsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGroupsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGroupsUsingPOSTSignalErrorFull() instead")
    void listAllGroupsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGroupsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsUsingGETSignalErrorFull() instead")
    void listPadsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPadsUsingPOSTSignalErrorFull() instead")
    void listPadsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPadsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfGroupUsingGETSignalErrorFull() instead")
    void listSessionsOfGroupUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfGroupUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionsOfGroupUsingPOSTSignalErrorFull() instead")
    void listSessionsOfGroupUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionsOfGroupUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
