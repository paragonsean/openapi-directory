/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPadApi_H
#define OAI_OAIPadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendChatMessageUsingGET_200_response.h"
#include "OAIAppendChatMessageUsingGET_400_response.h"
#include "OAIAppendChatMessageUsingGET_401_response.h"
#include "OAIAppendChatMessageUsingGET_500_response.h"
#include "OAICreateDiffHTMLUsingGET_200_response.h"
#include "OAIGetChatHeadUsingGET_200_response.h"
#include "OAIGetChatHistoryUsingGET_200_response.h"
#include "OAIGetHTMLUsingGET_200_response.h"
#include "OAIGetLastEditedUsingGET_200_response.h"
#include "OAIGetPublicStatusUsingGET_200_response.h"
#include "OAIGetReadOnlyIDUsingGET_200_response.h"
#include "OAIGetRevisionsCountUsingGET_200_response.h"
#include "OAIGetTextUsingGET_200_response.h"
#include "OAIListAllPadsUsingGET_200_response.h"
#include "OAIListAuthorsOfPadUsingGET_200_response.h"
#include "OAIPadUsersCountUsingGET_200_response.h"
#include "OAIPadUsersUsingGET_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPadApi : public QObject {
    Q_OBJECT

public:
    OAIPadApi(const int timeOut = 0);
    ~OAIPadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  author_id QString [optional]
    * @param[in]  time QString [optional]
    */
    virtual void appendChatMessageUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  author_id QString [optional]
    * @param[in]  time QString [optional]
    */
    virtual void appendChatMessageUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>());


    virtual void checkTokenUsingGET();


    virtual void checkTokenUsingPOST();

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  start_rev QString [optional]
    * @param[in]  end_rev QString [optional]
    */
    virtual void createDiffHTMLUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_rev = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  start_rev QString [optional]
    * @param[in]  end_rev QString [optional]
    */
    virtual void createDiffHTMLUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_rev = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void createPadUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void createPadUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void deletePadUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void deletePadUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getChatHeadUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getChatHeadUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  start QString [optional]
    * @param[in]  end QString [optional]
    */
    virtual void getChatHistoryUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  start QString [optional]
    * @param[in]  end QString [optional]
    */
    virtual void getChatHistoryUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getHTMLUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getHTMLUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getLastEditedUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getLastEditedUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getPublicStatusUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getPublicStatusUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getReadOnlyIDUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getReadOnlyIDUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getRevisionsCountUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void getRevisionsCountUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getTextUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  rev QString [optional]
    */
    virtual void getTextUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rev = ::OpenAPI::OptionalParam<QString>());


    virtual void listAllPadsUsingGET();


    virtual void listAllPadsUsingPOST();

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void listAuthorsOfPadUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void listAuthorsOfPadUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void padUsersCountUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void padUsersCountUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void padUsersUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    */
    virtual void padUsersUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  msg QString [optional]
    */
    virtual void sendClientsMessageUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msg = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  msg QString [optional]
    */
    virtual void sendClientsMessageUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msg = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  html QString [optional]
    */
    virtual void setHTMLUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &html = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  html QString [optional]
    */
    virtual void setHTMLUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &html = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  public_status QString [optional]
    */
    virtual void setPublicStatusUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  public_status QString [optional]
    */
    virtual void setPublicStatusUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void setTextUsingGET(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pad_id QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void setTextUsingPOST(const ::OpenAPI::OptionalParam<QString> &pad_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appendChatMessageUsingGETCallback(OAIHttpRequestWorker *worker);
    void appendChatMessageUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void checkTokenUsingGETCallback(OAIHttpRequestWorker *worker);
    void checkTokenUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createDiffHTMLUsingGETCallback(OAIHttpRequestWorker *worker);
    void createDiffHTMLUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createPadUsingGETCallback(OAIHttpRequestWorker *worker);
    void createPadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deletePadUsingGETCallback(OAIHttpRequestWorker *worker);
    void deletePadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getChatHeadUsingGETCallback(OAIHttpRequestWorker *worker);
    void getChatHeadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getChatHistoryUsingGETCallback(OAIHttpRequestWorker *worker);
    void getChatHistoryUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getHTMLUsingGETCallback(OAIHttpRequestWorker *worker);
    void getHTMLUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getLastEditedUsingGETCallback(OAIHttpRequestWorker *worker);
    void getLastEditedUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getPublicStatusUsingGETCallback(OAIHttpRequestWorker *worker);
    void getPublicStatusUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getReadOnlyIDUsingGETCallback(OAIHttpRequestWorker *worker);
    void getReadOnlyIDUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getRevisionsCountUsingGETCallback(OAIHttpRequestWorker *worker);
    void getRevisionsCountUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getTextUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTextUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listAllPadsUsingGETCallback(OAIHttpRequestWorker *worker);
    void listAllPadsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void listAuthorsOfPadUsingGETCallback(OAIHttpRequestWorker *worker);
    void listAuthorsOfPadUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void padUsersCountUsingGETCallback(OAIHttpRequestWorker *worker);
    void padUsersCountUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void padUsersUsingGETCallback(OAIHttpRequestWorker *worker);
    void padUsersUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void sendClientsMessageUsingGETCallback(OAIHttpRequestWorker *worker);
    void sendClientsMessageUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void setHTMLUsingGETCallback(OAIHttpRequestWorker *worker);
    void setHTMLUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void setPublicStatusUsingGETCallback(OAIHttpRequestWorker *worker);
    void setPublicStatusUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void setTextUsingGETCallback(OAIHttpRequestWorker *worker);
    void setTextUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appendChatMessageUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void appendChatMessageUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void checkTokenUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void checkTokenUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void createDiffHTMLUsingGETSignal(OAICreateDiffHTMLUsingGET_200_response summary);
    void createDiffHTMLUsingPOSTSignal(OAICreateDiffHTMLUsingGET_200_response summary);
    void createPadUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void createPadUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void deletePadUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void deletePadUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getChatHeadUsingGETSignal(OAIGetChatHeadUsingGET_200_response summary);
    void getChatHeadUsingPOSTSignal(OAIGetChatHeadUsingGET_200_response summary);
    void getChatHistoryUsingGETSignal(OAIGetChatHistoryUsingGET_200_response summary);
    void getChatHistoryUsingPOSTSignal(OAIGetChatHistoryUsingGET_200_response summary);
    void getHTMLUsingGETSignal(OAIGetHTMLUsingGET_200_response summary);
    void getHTMLUsingPOSTSignal(OAIGetHTMLUsingGET_200_response summary);
    void getLastEditedUsingGETSignal(OAIGetLastEditedUsingGET_200_response summary);
    void getLastEditedUsingPOSTSignal(OAIGetLastEditedUsingGET_200_response summary);
    void getPublicStatusUsingGETSignal(OAIGetPublicStatusUsingGET_200_response summary);
    void getPublicStatusUsingPOSTSignal(OAIGetPublicStatusUsingGET_200_response summary);
    void getReadOnlyIDUsingGETSignal(OAIGetReadOnlyIDUsingGET_200_response summary);
    void getReadOnlyIDUsingPOSTSignal(OAIGetReadOnlyIDUsingGET_200_response summary);
    void getRevisionsCountUsingGETSignal(OAIGetRevisionsCountUsingGET_200_response summary);
    void getRevisionsCountUsingPOSTSignal(OAIGetRevisionsCountUsingGET_200_response summary);
    void getTextUsingGETSignal(OAIGetTextUsingGET_200_response summary);
    void getTextUsingPOSTSignal(OAIGetTextUsingGET_200_response summary);
    void listAllPadsUsingGETSignal(OAIListAllPadsUsingGET_200_response summary);
    void listAllPadsUsingPOSTSignal(OAIListAllPadsUsingGET_200_response summary);
    void listAuthorsOfPadUsingGETSignal(OAIListAuthorsOfPadUsingGET_200_response summary);
    void listAuthorsOfPadUsingPOSTSignal(OAIListAuthorsOfPadUsingGET_200_response summary);
    void padUsersCountUsingGETSignal(OAIPadUsersCountUsingGET_200_response summary);
    void padUsersCountUsingPOSTSignal(OAIPadUsersCountUsingGET_200_response summary);
    void padUsersUsingGETSignal(OAIPadUsersUsingGET_200_response summary);
    void padUsersUsingPOSTSignal(OAIPadUsersUsingGET_200_response summary);
    void sendClientsMessageUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void sendClientsMessageUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setHTMLUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setHTMLUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setPublicStatusUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setPublicStatusUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setTextUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void setTextUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);


    void appendChatMessageUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void appendChatMessageUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void checkTokenUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void checkTokenUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void createDiffHTMLUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateDiffHTMLUsingGET_200_response summary);
    void createDiffHTMLUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateDiffHTMLUsingGET_200_response summary);
    void createPadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void createPadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void deletePadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void deletePadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getChatHeadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetChatHeadUsingGET_200_response summary);
    void getChatHeadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetChatHeadUsingGET_200_response summary);
    void getChatHistoryUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetChatHistoryUsingGET_200_response summary);
    void getChatHistoryUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetChatHistoryUsingGET_200_response summary);
    void getHTMLUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetHTMLUsingGET_200_response summary);
    void getHTMLUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetHTMLUsingGET_200_response summary);
    void getLastEditedUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetLastEditedUsingGET_200_response summary);
    void getLastEditedUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetLastEditedUsingGET_200_response summary);
    void getPublicStatusUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetPublicStatusUsingGET_200_response summary);
    void getPublicStatusUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetPublicStatusUsingGET_200_response summary);
    void getReadOnlyIDUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetReadOnlyIDUsingGET_200_response summary);
    void getReadOnlyIDUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetReadOnlyIDUsingGET_200_response summary);
    void getRevisionsCountUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetRevisionsCountUsingGET_200_response summary);
    void getRevisionsCountUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetRevisionsCountUsingGET_200_response summary);
    void getTextUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetTextUsingGET_200_response summary);
    void getTextUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetTextUsingGET_200_response summary);
    void listAllPadsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listAllPadsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListAllPadsUsingGET_200_response summary);
    void listAuthorsOfPadUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIListAuthorsOfPadUsingGET_200_response summary);
    void listAuthorsOfPadUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIListAuthorsOfPadUsingGET_200_response summary);
    void padUsersCountUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPadUsersCountUsingGET_200_response summary);
    void padUsersCountUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPadUsersCountUsingGET_200_response summary);
    void padUsersUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIPadUsersUsingGET_200_response summary);
    void padUsersUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPadUsersUsingGET_200_response summary);
    void sendClientsMessageUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void sendClientsMessageUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setHTMLUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setHTMLUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setPublicStatusUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setPublicStatusUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setTextUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void setTextUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);

    Q_DECL_DEPRECATED_X("Use appendChatMessageUsingGETSignalError() instead")
    void appendChatMessageUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appendChatMessageUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appendChatMessageUsingPOSTSignalError() instead")
    void appendChatMessageUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appendChatMessageUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkTokenUsingGETSignalError() instead")
    void checkTokenUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkTokenUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkTokenUsingPOSTSignalError() instead")
    void checkTokenUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkTokenUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDiffHTMLUsingGETSignalError() instead")
    void createDiffHTMLUsingGETSignalE(OAICreateDiffHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDiffHTMLUsingGETSignalError(OAICreateDiffHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDiffHTMLUsingPOSTSignalError() instead")
    void createDiffHTMLUsingPOSTSignalE(OAICreateDiffHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDiffHTMLUsingPOSTSignalError(OAICreateDiffHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPadUsingGETSignalError() instead")
    void createPadUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPadUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPadUsingPOSTSignalError() instead")
    void createPadUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPadUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePadUsingGETSignalError() instead")
    void deletePadUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePadUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePadUsingPOSTSignalError() instead")
    void deletePadUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePadUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHeadUsingGETSignalError() instead")
    void getChatHeadUsingGETSignalE(OAIGetChatHeadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHeadUsingGETSignalError(OAIGetChatHeadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHeadUsingPOSTSignalError() instead")
    void getChatHeadUsingPOSTSignalE(OAIGetChatHeadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHeadUsingPOSTSignalError(OAIGetChatHeadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistoryUsingGETSignalError() instead")
    void getChatHistoryUsingGETSignalE(OAIGetChatHistoryUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistoryUsingGETSignalError(OAIGetChatHistoryUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistoryUsingPOSTSignalError() instead")
    void getChatHistoryUsingPOSTSignalE(OAIGetChatHistoryUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistoryUsingPOSTSignalError(OAIGetChatHistoryUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLUsingGETSignalError() instead")
    void getHTMLUsingGETSignalE(OAIGetHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLUsingGETSignalError(OAIGetHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLUsingPOSTSignalError() instead")
    void getHTMLUsingPOSTSignalE(OAIGetHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLUsingPOSTSignalError(OAIGetHTMLUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastEditedUsingGETSignalError() instead")
    void getLastEditedUsingGETSignalE(OAIGetLastEditedUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastEditedUsingGETSignalError(OAIGetLastEditedUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastEditedUsingPOSTSignalError() instead")
    void getLastEditedUsingPOSTSignalE(OAIGetLastEditedUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastEditedUsingPOSTSignalError(OAIGetLastEditedUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicStatusUsingGETSignalError() instead")
    void getPublicStatusUsingGETSignalE(OAIGetPublicStatusUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicStatusUsingGETSignalError(OAIGetPublicStatusUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicStatusUsingPOSTSignalError() instead")
    void getPublicStatusUsingPOSTSignalE(OAIGetPublicStatusUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicStatusUsingPOSTSignalError(OAIGetPublicStatusUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOnlyIDUsingGETSignalError() instead")
    void getReadOnlyIDUsingGETSignalE(OAIGetReadOnlyIDUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOnlyIDUsingGETSignalError(OAIGetReadOnlyIDUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOnlyIDUsingPOSTSignalError() instead")
    void getReadOnlyIDUsingPOSTSignalE(OAIGetReadOnlyIDUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOnlyIDUsingPOSTSignalError(OAIGetReadOnlyIDUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionsCountUsingGETSignalError() instead")
    void getRevisionsCountUsingGETSignalE(OAIGetRevisionsCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionsCountUsingGETSignalError(OAIGetRevisionsCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionsCountUsingPOSTSignalError() instead")
    void getRevisionsCountUsingPOSTSignalE(OAIGetRevisionsCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionsCountUsingPOSTSignalError(OAIGetRevisionsCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextUsingGETSignalError() instead")
    void getTextUsingGETSignalE(OAIGetTextUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextUsingGETSignalError(OAIGetTextUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextUsingPOSTSignalError() instead")
    void getTextUsingPOSTSignalE(OAIGetTextUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextUsingPOSTSignalError(OAIGetTextUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPadsUsingGETSignalError() instead")
    void listAllPadsUsingGETSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPadsUsingGETSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPadsUsingPOSTSignalError() instead")
    void listAllPadsUsingPOSTSignalE(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPadsUsingPOSTSignalError(OAIListAllPadsUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAuthorsOfPadUsingGETSignalError() instead")
    void listAuthorsOfPadUsingGETSignalE(OAIListAuthorsOfPadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAuthorsOfPadUsingGETSignalError(OAIListAuthorsOfPadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAuthorsOfPadUsingPOSTSignalError() instead")
    void listAuthorsOfPadUsingPOSTSignalE(OAIListAuthorsOfPadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAuthorsOfPadUsingPOSTSignalError(OAIListAuthorsOfPadUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersCountUsingGETSignalError() instead")
    void padUsersCountUsingGETSignalE(OAIPadUsersCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersCountUsingGETSignalError(OAIPadUsersCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersCountUsingPOSTSignalError() instead")
    void padUsersCountUsingPOSTSignalE(OAIPadUsersCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersCountUsingPOSTSignalError(OAIPadUsersCountUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersUsingGETSignalError() instead")
    void padUsersUsingGETSignalE(OAIPadUsersUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersUsingGETSignalError(OAIPadUsersUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersUsingPOSTSignalError() instead")
    void padUsersUsingPOSTSignalE(OAIPadUsersUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersUsingPOSTSignalError(OAIPadUsersUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendClientsMessageUsingGETSignalError() instead")
    void sendClientsMessageUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendClientsMessageUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendClientsMessageUsingPOSTSignalError() instead")
    void sendClientsMessageUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendClientsMessageUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHTMLUsingGETSignalError() instead")
    void setHTMLUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setHTMLUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHTMLUsingPOSTSignalError() instead")
    void setHTMLUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setHTMLUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPublicStatusUsingGETSignalError() instead")
    void setPublicStatusUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPublicStatusUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPublicStatusUsingPOSTSignalError() instead")
    void setPublicStatusUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPublicStatusUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTextUsingGETSignalError() instead")
    void setTextUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setTextUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTextUsingPOSTSignalError() instead")
    void setTextUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setTextUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appendChatMessageUsingGETSignalErrorFull() instead")
    void appendChatMessageUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appendChatMessageUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appendChatMessageUsingPOSTSignalErrorFull() instead")
    void appendChatMessageUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appendChatMessageUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkTokenUsingGETSignalErrorFull() instead")
    void checkTokenUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkTokenUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkTokenUsingPOSTSignalErrorFull() instead")
    void checkTokenUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkTokenUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDiffHTMLUsingGETSignalErrorFull() instead")
    void createDiffHTMLUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDiffHTMLUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDiffHTMLUsingPOSTSignalErrorFull() instead")
    void createDiffHTMLUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDiffHTMLUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPadUsingGETSignalErrorFull() instead")
    void createPadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPadUsingPOSTSignalErrorFull() instead")
    void createPadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePadUsingGETSignalErrorFull() instead")
    void deletePadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePadUsingPOSTSignalErrorFull() instead")
    void deletePadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHeadUsingGETSignalErrorFull() instead")
    void getChatHeadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHeadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHeadUsingPOSTSignalErrorFull() instead")
    void getChatHeadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHeadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistoryUsingGETSignalErrorFull() instead")
    void getChatHistoryUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistoryUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChatHistoryUsingPOSTSignalErrorFull() instead")
    void getChatHistoryUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChatHistoryUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLUsingGETSignalErrorFull() instead")
    void getHTMLUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHTMLUsingPOSTSignalErrorFull() instead")
    void getHTMLUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHTMLUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastEditedUsingGETSignalErrorFull() instead")
    void getLastEditedUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastEditedUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastEditedUsingPOSTSignalErrorFull() instead")
    void getLastEditedUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastEditedUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicStatusUsingGETSignalErrorFull() instead")
    void getPublicStatusUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicStatusUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicStatusUsingPOSTSignalErrorFull() instead")
    void getPublicStatusUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicStatusUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOnlyIDUsingGETSignalErrorFull() instead")
    void getReadOnlyIDUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOnlyIDUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOnlyIDUsingPOSTSignalErrorFull() instead")
    void getReadOnlyIDUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOnlyIDUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionsCountUsingGETSignalErrorFull() instead")
    void getRevisionsCountUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionsCountUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionsCountUsingPOSTSignalErrorFull() instead")
    void getRevisionsCountUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionsCountUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextUsingGETSignalErrorFull() instead")
    void getTextUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextUsingPOSTSignalErrorFull() instead")
    void getTextUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPadsUsingGETSignalErrorFull() instead")
    void listAllPadsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPadsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPadsUsingPOSTSignalErrorFull() instead")
    void listAllPadsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPadsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAuthorsOfPadUsingGETSignalErrorFull() instead")
    void listAuthorsOfPadUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAuthorsOfPadUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAuthorsOfPadUsingPOSTSignalErrorFull() instead")
    void listAuthorsOfPadUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAuthorsOfPadUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersCountUsingGETSignalErrorFull() instead")
    void padUsersCountUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersCountUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersCountUsingPOSTSignalErrorFull() instead")
    void padUsersCountUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersCountUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersUsingGETSignalErrorFull() instead")
    void padUsersUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use padUsersUsingPOSTSignalErrorFull() instead")
    void padUsersUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void padUsersUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendClientsMessageUsingGETSignalErrorFull() instead")
    void sendClientsMessageUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendClientsMessageUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendClientsMessageUsingPOSTSignalErrorFull() instead")
    void sendClientsMessageUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendClientsMessageUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHTMLUsingGETSignalErrorFull() instead")
    void setHTMLUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setHTMLUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHTMLUsingPOSTSignalErrorFull() instead")
    void setHTMLUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setHTMLUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPublicStatusUsingGETSignalErrorFull() instead")
    void setPublicStatusUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPublicStatusUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPublicStatusUsingPOSTSignalErrorFull() instead")
    void setPublicStatusUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPublicStatusUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTextUsingGETSignalErrorFull() instead")
    void setTextUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTextUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTextUsingPOSTSignalErrorFull() instead")
    void setTextUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTextUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
