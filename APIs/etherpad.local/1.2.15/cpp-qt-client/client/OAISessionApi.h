/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionApi_H
#define OAI_OAISessionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendChatMessageUsingGET_200_response.h"
#include "OAIAppendChatMessageUsingGET_400_response.h"
#include "OAIAppendChatMessageUsingGET_401_response.h"
#include "OAIAppendChatMessageUsingGET_500_response.h"
#include "OAICreateSessionUsingGET_200_response.h"
#include "OAIGetSessionInfoUsingGET_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionApi : public QObject {
    Q_OBJECT

public:
    OAISessionApi(const int timeOut = 0);
    ~OAISessionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [optional]
    * @param[in]  author_id QString [optional]
    * @param[in]  valid_until QString [optional]
    */
    virtual void createSessionUsingGET(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valid_until = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    * @param[in]  author_id QString [optional]
    * @param[in]  valid_until QString [optional]
    */
    virtual void createSessionUsingPOST(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valid_until = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [optional]
    */
    virtual void deleteSessionUsingGET(const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [optional]
    */
    virtual void deleteSessionUsingPOST(const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [optional]
    */
    virtual void getSessionInfoUsingGET(const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [optional]
    */
    virtual void getSessionInfoUsingPOST(const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSessionUsingGETCallback(OAIHttpRequestWorker *worker);
    void createSessionUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteSessionUsingGETCallback(OAIHttpRequestWorker *worker);
    void deleteSessionUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getSessionInfoUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSessionInfoUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSessionUsingGETSignal(OAICreateSessionUsingGET_200_response summary);
    void createSessionUsingPOSTSignal(OAICreateSessionUsingGET_200_response summary);
    void deleteSessionUsingGETSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void deleteSessionUsingPOSTSignal(OAIAppendChatMessageUsingGET_200_response summary);
    void getSessionInfoUsingGETSignal(OAIGetSessionInfoUsingGET_200_response summary);
    void getSessionInfoUsingPOSTSignal(OAIGetSessionInfoUsingGET_200_response summary);


    void createSessionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAICreateSessionUsingGET_200_response summary);
    void createSessionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAICreateSessionUsingGET_200_response summary);
    void deleteSessionUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void deleteSessionUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppendChatMessageUsingGET_200_response summary);
    void getSessionInfoUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIGetSessionInfoUsingGET_200_response summary);
    void getSessionInfoUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIGetSessionInfoUsingGET_200_response summary);

    Q_DECL_DEPRECATED_X("Use createSessionUsingGETSignalError() instead")
    void createSessionUsingGETSignalE(OAICreateSessionUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionUsingGETSignalError(OAICreateSessionUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSessionUsingPOSTSignalError() instead")
    void createSessionUsingPOSTSignalE(OAICreateSessionUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionUsingPOSTSignalError(OAICreateSessionUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionUsingGETSignalError() instead")
    void deleteSessionUsingGETSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionUsingGETSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionUsingPOSTSignalError() instead")
    void deleteSessionUsingPOSTSignalE(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionUsingPOSTSignalError(OAIAppendChatMessageUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionInfoUsingGETSignalError() instead")
    void getSessionInfoUsingGETSignalE(OAIGetSessionInfoUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionInfoUsingGETSignalError(OAIGetSessionInfoUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionInfoUsingPOSTSignalError() instead")
    void getSessionInfoUsingPOSTSignalE(OAIGetSessionInfoUsingGET_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionInfoUsingPOSTSignalError(OAIGetSessionInfoUsingGET_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSessionUsingGETSignalErrorFull() instead")
    void createSessionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSessionUsingPOSTSignalErrorFull() instead")
    void createSessionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionUsingGETSignalErrorFull() instead")
    void deleteSessionUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionUsingPOSTSignalErrorFull() instead")
    void deleteSessionUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionInfoUsingGETSignalErrorFull() instead")
    void getSessionInfoUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionInfoUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionInfoUsingPOSTSignalErrorFull() instead")
    void getSessionInfoUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionInfoUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
