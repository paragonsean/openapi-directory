/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.2.15
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRevisionsCountUsingGET_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRevisionsCountUsingGET_200_response_data::OAIGetRevisionsCountUsingGET_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRevisionsCountUsingGET_200_response_data::OAIGetRevisionsCountUsingGET_200_response_data() {
    this->initializeModel();
}

OAIGetRevisionsCountUsingGET_200_response_data::~OAIGetRevisionsCountUsingGET_200_response_data() {}

void OAIGetRevisionsCountUsingGET_200_response_data::initializeModel() {

    m_revisions_isSet = false;
    m_revisions_isValid = false;
}

void OAIGetRevisionsCountUsingGET_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRevisionsCountUsingGET_200_response_data::fromJsonObject(QJsonObject json) {

    m_revisions_isValid = ::OpenAPI::fromJsonValue(m_revisions, json[QString("revisions")]);
    m_revisions_isSet = !json[QString("revisions")].isNull() && m_revisions_isValid;
}

QString OAIGetRevisionsCountUsingGET_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRevisionsCountUsingGET_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_revisions_isSet) {
        obj.insert(QString("revisions"), ::OpenAPI::toJsonValue(m_revisions));
    }
    return obj;
}

qint32 OAIGetRevisionsCountUsingGET_200_response_data::getRevisions() const {
    return m_revisions;
}
void OAIGetRevisionsCountUsingGET_200_response_data::setRevisions(const qint32 &revisions) {
    m_revisions = revisions;
    m_revisions_isSet = true;
}

bool OAIGetRevisionsCountUsingGET_200_response_data::is_revisions_Set() const{
    return m_revisions_isSet;
}

bool OAIGetRevisionsCountUsingGET_200_response_data::is_revisions_Valid() const{
    return m_revisions_isValid;
}

bool OAIGetRevisionsCountUsingGET_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revisions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRevisionsCountUsingGET_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
