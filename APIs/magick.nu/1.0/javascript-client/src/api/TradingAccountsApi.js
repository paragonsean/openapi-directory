/**
 * Tradeworks
 * Authentication is required to access all methods of the API. Enter username and password.                 Credentials are automatically set as you type.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PasswordDTO from '../model/PasswordDTO';
import TradingAccount from '../model/TradingAccount';

/**
* TradingAccounts service.
* @module api/TradingAccountsApi
* @version 1.0
*/
export default class TradingAccountsApi {

    /**
    * Constructs a new TradingAccountsApi. 
    * @alias module:api/TradingAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postTradingAccounts operation.
     * @callback module:api/TradingAccountsApi~postTradingAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Trading Account
     * @param {module:model/TradingAccount} body 
     * @param {module:api/TradingAccountsApi~postTradingAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTradingAccounts(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTradingAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tradingAccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTradingAccountsPasswordUsernameBrokerserverMt4username operation.
     * @callback module:api/TradingAccountsApi~putTradingAccountsPasswordUsernameBrokerserverMt4usernameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update MT4 Account Password
     * @param {String} username 
     * @param {String} brokerserver 
     * @param {String} mt4username 
     * @param {module:model/PasswordDTO} body 
     * @param {module:api/TradingAccountsApi~putTradingAccountsPasswordUsernameBrokerserverMt4usernameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTradingAccountsPasswordUsernameBrokerserverMt4username(username, brokerserver, mt4username, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling putTradingAccountsPasswordUsernameBrokerserverMt4username");
      }
      // verify the required parameter 'brokerserver' is set
      if (brokerserver === undefined || brokerserver === null) {
        throw new Error("Missing the required parameter 'brokerserver' when calling putTradingAccountsPasswordUsernameBrokerserverMt4username");
      }
      // verify the required parameter 'mt4username' is set
      if (mt4username === undefined || mt4username === null) {
        throw new Error("Missing the required parameter 'mt4username' when calling putTradingAccountsPasswordUsernameBrokerserverMt4username");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putTradingAccountsPasswordUsernameBrokerserverMt4username");
      }

      let pathParams = {
        'username': username,
        'brokerserver': brokerserver,
        'mt4username': mt4username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tradingAccounts/password/{username}/{brokerserver}/{mt4username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
