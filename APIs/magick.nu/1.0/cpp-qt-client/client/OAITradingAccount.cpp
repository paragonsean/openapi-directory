/**
 * Tradeworks
 * Authentication is required to access all methods of the API. Enter username and password.                 Credentials are automatically set as you type.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITradingAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITradingAccount::OAITradingAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITradingAccount::OAITradingAccount() {
    this->initializeModel();
}

OAITradingAccount::~OAITradingAccount() {}

void OAITradingAccount::initializeModel() {

    m_broker_server_isSet = false;
    m_broker_server_isValid = false;

    m_magick_username_isSet = false;
    m_magick_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAITradingAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITradingAccount::fromJsonObject(QJsonObject json) {

    m_broker_server_isValid = ::OpenAPI::fromJsonValue(m_broker_server, json[QString("brokerServer")]);
    m_broker_server_isSet = !json[QString("brokerServer")].isNull() && m_broker_server_isValid;

    m_magick_username_isValid = ::OpenAPI::fromJsonValue(m_magick_username, json[QString("magickUsername")]);
    m_magick_username_isSet = !json[QString("magickUsername")].isNull() && m_magick_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAITradingAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITradingAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_server_isSet) {
        obj.insert(QString("brokerServer"), ::OpenAPI::toJsonValue(m_broker_server));
    }
    if (m_magick_username_isSet) {
        obj.insert(QString("magickUsername"), ::OpenAPI::toJsonValue(m_magick_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAITradingAccount::getBrokerServer() const {
    return m_broker_server;
}
void OAITradingAccount::setBrokerServer(const QString &broker_server) {
    m_broker_server = broker_server;
    m_broker_server_isSet = true;
}

bool OAITradingAccount::is_broker_server_Set() const{
    return m_broker_server_isSet;
}

bool OAITradingAccount::is_broker_server_Valid() const{
    return m_broker_server_isValid;
}

QString OAITradingAccount::getMagickUsername() const {
    return m_magick_username;
}
void OAITradingAccount::setMagickUsername(const QString &magick_username) {
    m_magick_username = magick_username;
    m_magick_username_isSet = true;
}

bool OAITradingAccount::is_magick_username_Set() const{
    return m_magick_username_isSet;
}

bool OAITradingAccount::is_magick_username_Valid() const{
    return m_magick_username_isValid;
}

QString OAITradingAccount::getPassword() const {
    return m_password;
}
void OAITradingAccount::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAITradingAccount::is_password_Set() const{
    return m_password_isSet;
}

bool OAITradingAccount::is_password_Valid() const{
    return m_password_isValid;
}

QString OAITradingAccount::getUsername() const {
    return m_username;
}
void OAITradingAccount::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAITradingAccount::is_username_Set() const{
    return m_username_isSet;
}

bool OAITradingAccount::is_username_Valid() const{
    return m_username_isValid;
}

bool OAITradingAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magick_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITradingAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
