# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateACardDisputeParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disputed_transaction_id: str=None, explanation: str=None):
        """CreateACardDisputeParameters - a model defined in OpenAPI

        :param disputed_transaction_id: The disputed_transaction_id of this CreateACardDisputeParameters.
        :param explanation: The explanation of this CreateACardDisputeParameters.
        """
        self.openapi_types = {
            'disputed_transaction_id': str,
            'explanation': str
        }

        self.attribute_map = {
            'disputed_transaction_id': 'disputed_transaction_id',
            'explanation': 'explanation'
        }

        self._disputed_transaction_id = disputed_transaction_id
        self._explanation = explanation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACardDisputeParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_card_dispute_parameters of this CreateACardDisputeParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disputed_transaction_id(self):
        """Gets the disputed_transaction_id of this CreateACardDisputeParameters.

        The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.

        :return: The disputed_transaction_id of this CreateACardDisputeParameters.
        :rtype: str
        """
        return self._disputed_transaction_id

    @disputed_transaction_id.setter
    def disputed_transaction_id(self, disputed_transaction_id):
        """Sets the disputed_transaction_id of this CreateACardDisputeParameters.

        The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.

        :param disputed_transaction_id: The disputed_transaction_id of this CreateACardDisputeParameters.
        :type disputed_transaction_id: str
        """
        if disputed_transaction_id is None:
            raise ValueError("Invalid value for `disputed_transaction_id`, must not be `None`")

        self._disputed_transaction_id = disputed_transaction_id

    @property
    def explanation(self):
        """Gets the explanation of this CreateACardDisputeParameters.

        Why you are disputing this Transaction.

        :return: The explanation of this CreateACardDisputeParameters.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this CreateACardDisputeParameters.

        Why you are disputing this Transaction.

        :param explanation: The explanation of this CreateACardDisputeParameters.
        :type explanation: str
        """
        if explanation is None:
            raise ValueError("Invalid value for `explanation`, must not be `None`")
        if explanation is not None and len(explanation) > 200:
            raise ValueError("Invalid value for `explanation`, length must be less than or equal to `200`")
        if explanation is not None and len(explanation) < 1:
            raise ValueError("Invalid value for `explanation`, length must be greater than or equal to `1`")

        self._explanation = explanation
