# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_ach_transfer_return_submission import InboundACHTransferReturnSubmission
from openapi_server import util


class InboundAchTransferReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, inbound_ach_transfer_transaction_id: str=None, reason: str=None, status: str=None, submission: InboundACHTransferReturnSubmission=None, transaction_id: str=None, type: str=None):
        """InboundAchTransferReturn - a model defined in OpenAPI

        :param id: The id of this InboundAchTransferReturn.
        :param inbound_ach_transfer_transaction_id: The inbound_ach_transfer_transaction_id of this InboundAchTransferReturn.
        :param reason: The reason of this InboundAchTransferReturn.
        :param status: The status of this InboundAchTransferReturn.
        :param submission: The submission of this InboundAchTransferReturn.
        :param transaction_id: The transaction_id of this InboundAchTransferReturn.
        :param type: The type of this InboundAchTransferReturn.
        """
        self.openapi_types = {
            'id': str,
            'inbound_ach_transfer_transaction_id': str,
            'reason': str,
            'status': str,
            'submission': InboundACHTransferReturnSubmission,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'inbound_ach_transfer_transaction_id': 'inbound_ach_transfer_transaction_id',
            'reason': 'reason',
            'status': 'status',
            'submission': 'submission',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._id = id
        self._inbound_ach_transfer_transaction_id = inbound_ach_transfer_transaction_id
        self._reason = reason
        self._status = status
        self._submission = submission
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundAchTransferReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inbound_ach_transfer_return of this InboundAchTransferReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InboundAchTransferReturn.

        The ID of the Inbound ACH Transfer Return.

        :return: The id of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InboundAchTransferReturn.

        The ID of the Inbound ACH Transfer Return.

        :param id: The id of this InboundAchTransferReturn.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def inbound_ach_transfer_transaction_id(self):
        """Gets the inbound_ach_transfer_transaction_id of this InboundAchTransferReturn.

        The ID for the Transaction that is being returned.

        :return: The inbound_ach_transfer_transaction_id of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._inbound_ach_transfer_transaction_id

    @inbound_ach_transfer_transaction_id.setter
    def inbound_ach_transfer_transaction_id(self, inbound_ach_transfer_transaction_id):
        """Sets the inbound_ach_transfer_transaction_id of this InboundAchTransferReturn.

        The ID for the Transaction that is being returned.

        :param inbound_ach_transfer_transaction_id: The inbound_ach_transfer_transaction_id of this InboundAchTransferReturn.
        :type inbound_ach_transfer_transaction_id: str
        """
        if inbound_ach_transfer_transaction_id is None:
            raise ValueError("Invalid value for `inbound_ach_transfer_transaction_id`, must not be `None`")

        self._inbound_ach_transfer_transaction_id = inbound_ach_transfer_transaction_id

    @property
    def reason(self):
        """Gets the reason of this InboundAchTransferReturn.

        The reason why this transfer will be returned. This is sent to the initiating bank.

        :return: The reason of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InboundAchTransferReturn.

        The reason why this transfer will be returned. This is sent to the initiating bank.

        :param reason: The reason of this InboundAchTransferReturn.
        :type reason: str
        """
        allowed_values = ["authorization_revoked_by_customer", "payment_stopped", "customer_advised_unauthorized_improper_ineligible_or_incomplete", "representative_payee_deceased_or_unable_to_continue_in_that_capacity", "beneficiary_or_account_holder_deceased", "credit_entry_refused_by_receiver", "duplicate_entry", "corporate_customer_advised_not_authorized"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this InboundAchTransferReturn.

        The lifecycle status of the transfer.

        :return: The status of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InboundAchTransferReturn.

        The lifecycle status of the transfer.

        :param status: The status of this InboundAchTransferReturn.
        :type status: str
        """
        allowed_values = ["pending_submitting", "submitted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this InboundAchTransferReturn.


        :return: The submission of this InboundAchTransferReturn.
        :rtype: InboundACHTransferReturnSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this InboundAchTransferReturn.


        :param submission: The submission of this InboundAchTransferReturn.
        :type submission: InboundACHTransferReturnSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InboundAchTransferReturn.

        The ID for the transaction refunding the transfer.

        :return: The transaction_id of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InboundAchTransferReturn.

        The ID for the transaction refunding the transfer.

        :param transaction_id: The transaction_id of this InboundAchTransferReturn.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this InboundAchTransferReturn.

        A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.

        :return: The type of this InboundAchTransferReturn.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InboundAchTransferReturn.

        A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.

        :param type: The type of this InboundAchTransferReturn.
        :type type: str
        """
        allowed_values = ["inbound_ach_transfer_return"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
