# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_authorization1 import CardAuthorization1
from openapi_server.models.digital_wallet_authentication import DigitalWalletAuthentication
from openapi_server.models.digital_wallet_token import DigitalWalletToken
from openapi_server import util


class RealTimeDecision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_authorization: CardAuthorization1=None, category: str=None, created_at: datetime=None, digital_wallet_authentication: DigitalWalletAuthentication=None, digital_wallet_token: DigitalWalletToken=None, id: str=None, status: str=None, timeout_at: datetime=None, type: str=None):
        """RealTimeDecision - a model defined in OpenAPI

        :param card_authorization: The card_authorization of this RealTimeDecision.
        :param category: The category of this RealTimeDecision.
        :param created_at: The created_at of this RealTimeDecision.
        :param digital_wallet_authentication: The digital_wallet_authentication of this RealTimeDecision.
        :param digital_wallet_token: The digital_wallet_token of this RealTimeDecision.
        :param id: The id of this RealTimeDecision.
        :param status: The status of this RealTimeDecision.
        :param timeout_at: The timeout_at of this RealTimeDecision.
        :param type: The type of this RealTimeDecision.
        """
        self.openapi_types = {
            'card_authorization': CardAuthorization1,
            'category': str,
            'created_at': datetime,
            'digital_wallet_authentication': DigitalWalletAuthentication,
            'digital_wallet_token': DigitalWalletToken,
            'id': str,
            'status': str,
            'timeout_at': datetime,
            'type': str
        }

        self.attribute_map = {
            'card_authorization': 'card_authorization',
            'category': 'category',
            'created_at': 'created_at',
            'digital_wallet_authentication': 'digital_wallet_authentication',
            'digital_wallet_token': 'digital_wallet_token',
            'id': 'id',
            'status': 'status',
            'timeout_at': 'timeout_at',
            'type': 'type'
        }

        self._card_authorization = card_authorization
        self._category = category
        self._created_at = created_at
        self._digital_wallet_authentication = digital_wallet_authentication
        self._digital_wallet_token = digital_wallet_token
        self._id = id
        self._status = status
        self._timeout_at = timeout_at
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeDecision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The real_time_decision of this RealTimeDecision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_authorization(self):
        """Gets the card_authorization of this RealTimeDecision.


        :return: The card_authorization of this RealTimeDecision.
        :rtype: CardAuthorization1
        """
        return self._card_authorization

    @card_authorization.setter
    def card_authorization(self, card_authorization):
        """Sets the card_authorization of this RealTimeDecision.


        :param card_authorization: The card_authorization of this RealTimeDecision.
        :type card_authorization: CardAuthorization1
        """
        if card_authorization is None:
            raise ValueError("Invalid value for `card_authorization`, must not be `None`")

        self._card_authorization = card_authorization

    @property
    def category(self):
        """Gets the category of this RealTimeDecision.

        The category of the Real-Time Decision.

        :return: The category of this RealTimeDecision.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RealTimeDecision.

        The category of the Real-Time Decision.

        :param category: The category of this RealTimeDecision.
        :type category: str
        """
        allowed_values = ["card_authorization_requested", "digital_wallet_token_requested", "digital_wallet_authentication_requested"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this RealTimeDecision.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.

        :return: The created_at of this RealTimeDecision.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RealTimeDecision.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.

        :param created_at: The created_at of this RealTimeDecision.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def digital_wallet_authentication(self):
        """Gets the digital_wallet_authentication of this RealTimeDecision.


        :return: The digital_wallet_authentication of this RealTimeDecision.
        :rtype: DigitalWalletAuthentication
        """
        return self._digital_wallet_authentication

    @digital_wallet_authentication.setter
    def digital_wallet_authentication(self, digital_wallet_authentication):
        """Sets the digital_wallet_authentication of this RealTimeDecision.


        :param digital_wallet_authentication: The digital_wallet_authentication of this RealTimeDecision.
        :type digital_wallet_authentication: DigitalWalletAuthentication
        """
        if digital_wallet_authentication is None:
            raise ValueError("Invalid value for `digital_wallet_authentication`, must not be `None`")

        self._digital_wallet_authentication = digital_wallet_authentication

    @property
    def digital_wallet_token(self):
        """Gets the digital_wallet_token of this RealTimeDecision.


        :return: The digital_wallet_token of this RealTimeDecision.
        :rtype: DigitalWalletToken
        """
        return self._digital_wallet_token

    @digital_wallet_token.setter
    def digital_wallet_token(self, digital_wallet_token):
        """Sets the digital_wallet_token of this RealTimeDecision.


        :param digital_wallet_token: The digital_wallet_token of this RealTimeDecision.
        :type digital_wallet_token: DigitalWalletToken
        """
        if digital_wallet_token is None:
            raise ValueError("Invalid value for `digital_wallet_token`, must not be `None`")

        self._digital_wallet_token = digital_wallet_token

    @property
    def id(self):
        """Gets the id of this RealTimeDecision.

        The Real-Time Decision identifier.

        :return: The id of this RealTimeDecision.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RealTimeDecision.

        The Real-Time Decision identifier.

        :param id: The id of this RealTimeDecision.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this RealTimeDecision.

        The status of the Real-Time Decision.

        :return: The status of this RealTimeDecision.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RealTimeDecision.

        The status of the Real-Time Decision.

        :param status: The status of this RealTimeDecision.
        :type status: str
        """
        allowed_values = ["pending", "responded", "timed_out"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timeout_at(self):
        """Gets the timeout_at of this RealTimeDecision.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.

        :return: The timeout_at of this RealTimeDecision.
        :rtype: datetime
        """
        return self._timeout_at

    @timeout_at.setter
    def timeout_at(self, timeout_at):
        """Sets the timeout_at of this RealTimeDecision.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.

        :param timeout_at: The timeout_at of this RealTimeDecision.
        :type timeout_at: datetime
        """
        if timeout_at is None:
            raise ValueError("Invalid value for `timeout_at`, must not be `None`")

        self._timeout_at = timeout_at

    @property
    def type(self):
        """Gets the type of this RealTimeDecision.

        A constant representing the object's type. For this resource it will always be `real_time_decision`.

        :return: The type of this RealTimeDecision.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RealTimeDecision.

        A constant representing the object's type. For this resource it will always be `real_time_decision`.

        :param type: The type of this RealTimeDecision.
        :type type: str
        """
        allowed_values = ["real_time_decision"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
