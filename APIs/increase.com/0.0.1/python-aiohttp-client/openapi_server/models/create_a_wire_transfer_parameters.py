# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAWireTransferParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_number: str=None, amount: int=None, beneficiary_address_line1: str=None, beneficiary_address_line2: str=None, beneficiary_address_line3: str=None, beneficiary_name: str=None, external_account_id: str=None, message_to_recipient: str=None, require_approval: bool=None, routing_number: str=None):
        """CreateAWireTransferParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateAWireTransferParameters.
        :param account_number: The account_number of this CreateAWireTransferParameters.
        :param amount: The amount of this CreateAWireTransferParameters.
        :param beneficiary_address_line1: The beneficiary_address_line1 of this CreateAWireTransferParameters.
        :param beneficiary_address_line2: The beneficiary_address_line2 of this CreateAWireTransferParameters.
        :param beneficiary_address_line3: The beneficiary_address_line3 of this CreateAWireTransferParameters.
        :param beneficiary_name: The beneficiary_name of this CreateAWireTransferParameters.
        :param external_account_id: The external_account_id of this CreateAWireTransferParameters.
        :param message_to_recipient: The message_to_recipient of this CreateAWireTransferParameters.
        :param require_approval: The require_approval of this CreateAWireTransferParameters.
        :param routing_number: The routing_number of this CreateAWireTransferParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'account_number': str,
            'amount': int,
            'beneficiary_address_line1': str,
            'beneficiary_address_line2': str,
            'beneficiary_address_line3': str,
            'beneficiary_name': str,
            'external_account_id': str,
            'message_to_recipient': str,
            'require_approval': bool,
            'routing_number': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'account_number': 'account_number',
            'amount': 'amount',
            'beneficiary_address_line1': 'beneficiary_address_line1',
            'beneficiary_address_line2': 'beneficiary_address_line2',
            'beneficiary_address_line3': 'beneficiary_address_line3',
            'beneficiary_name': 'beneficiary_name',
            'external_account_id': 'external_account_id',
            'message_to_recipient': 'message_to_recipient',
            'require_approval': 'require_approval',
            'routing_number': 'routing_number'
        }

        self._account_id = account_id
        self._account_number = account_number
        self._amount = amount
        self._beneficiary_address_line1 = beneficiary_address_line1
        self._beneficiary_address_line2 = beneficiary_address_line2
        self._beneficiary_address_line3 = beneficiary_address_line3
        self._beneficiary_name = beneficiary_name
        self._external_account_id = external_account_id
        self._message_to_recipient = message_to_recipient
        self._require_approval = require_approval
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAWireTransferParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_wire_transfer_parameters of this CreateAWireTransferParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateAWireTransferParameters.

        The identifier for the account that will send the transfer.

        :return: The account_id of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAWireTransferParameters.

        The identifier for the account that will send the transfer.

        :param account_id: The account_id of this CreateAWireTransferParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this CreateAWireTransferParameters.

        The account number for the destination account.

        :return: The account_number of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAWireTransferParameters.

        The account number for the destination account.

        :param account_number: The account_number of this CreateAWireTransferParameters.
        :type account_number: str
        """
        if account_number is not None and len(account_number) > 200:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `200`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this CreateAWireTransferParameters.

        The transfer amount in cents.

        :return: The amount of this CreateAWireTransferParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateAWireTransferParameters.

        The transfer amount in cents.

        :param amount: The amount of this CreateAWireTransferParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def beneficiary_address_line1(self):
        """Gets the beneficiary_address_line1 of this CreateAWireTransferParameters.

        The beneficiary's address line 1.

        :return: The beneficiary_address_line1 of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._beneficiary_address_line1

    @beneficiary_address_line1.setter
    def beneficiary_address_line1(self, beneficiary_address_line1):
        """Sets the beneficiary_address_line1 of this CreateAWireTransferParameters.

        The beneficiary's address line 1.

        :param beneficiary_address_line1: The beneficiary_address_line1 of this CreateAWireTransferParameters.
        :type beneficiary_address_line1: str
        """
        if beneficiary_address_line1 is not None and len(beneficiary_address_line1) > 200:
            raise ValueError("Invalid value for `beneficiary_address_line1`, length must be less than or equal to `200`")
        if beneficiary_address_line1 is not None and len(beneficiary_address_line1) < 1:
            raise ValueError("Invalid value for `beneficiary_address_line1`, length must be greater than or equal to `1`")

        self._beneficiary_address_line1 = beneficiary_address_line1

    @property
    def beneficiary_address_line2(self):
        """Gets the beneficiary_address_line2 of this CreateAWireTransferParameters.

        The beneficiary's address line 2.

        :return: The beneficiary_address_line2 of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._beneficiary_address_line2

    @beneficiary_address_line2.setter
    def beneficiary_address_line2(self, beneficiary_address_line2):
        """Sets the beneficiary_address_line2 of this CreateAWireTransferParameters.

        The beneficiary's address line 2.

        :param beneficiary_address_line2: The beneficiary_address_line2 of this CreateAWireTransferParameters.
        :type beneficiary_address_line2: str
        """
        if beneficiary_address_line2 is not None and len(beneficiary_address_line2) > 200:
            raise ValueError("Invalid value for `beneficiary_address_line2`, length must be less than or equal to `200`")
        if beneficiary_address_line2 is not None and len(beneficiary_address_line2) < 1:
            raise ValueError("Invalid value for `beneficiary_address_line2`, length must be greater than or equal to `1`")

        self._beneficiary_address_line2 = beneficiary_address_line2

    @property
    def beneficiary_address_line3(self):
        """Gets the beneficiary_address_line3 of this CreateAWireTransferParameters.

        The beneficiary's address line 3.

        :return: The beneficiary_address_line3 of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._beneficiary_address_line3

    @beneficiary_address_line3.setter
    def beneficiary_address_line3(self, beneficiary_address_line3):
        """Sets the beneficiary_address_line3 of this CreateAWireTransferParameters.

        The beneficiary's address line 3.

        :param beneficiary_address_line3: The beneficiary_address_line3 of this CreateAWireTransferParameters.
        :type beneficiary_address_line3: str
        """
        if beneficiary_address_line3 is not None and len(beneficiary_address_line3) > 200:
            raise ValueError("Invalid value for `beneficiary_address_line3`, length must be less than or equal to `200`")
        if beneficiary_address_line3 is not None and len(beneficiary_address_line3) < 1:
            raise ValueError("Invalid value for `beneficiary_address_line3`, length must be greater than or equal to `1`")

        self._beneficiary_address_line3 = beneficiary_address_line3

    @property
    def beneficiary_name(self):
        """Gets the beneficiary_name of this CreateAWireTransferParameters.

        The beneficiary's name.

        :return: The beneficiary_name of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """Sets the beneficiary_name of this CreateAWireTransferParameters.

        The beneficiary's name.

        :param beneficiary_name: The beneficiary_name of this CreateAWireTransferParameters.
        :type beneficiary_name: str
        """
        if beneficiary_name is None:
            raise ValueError("Invalid value for `beneficiary_name`, must not be `None`")
        if beneficiary_name is not None and len(beneficiary_name) > 200:
            raise ValueError("Invalid value for `beneficiary_name`, length must be less than or equal to `200`")
        if beneficiary_name is not None and len(beneficiary_name) < 1:
            raise ValueError("Invalid value for `beneficiary_name`, length must be greater than or equal to `1`")

        self._beneficiary_name = beneficiary_name

    @property
    def external_account_id(self):
        """Gets the external_account_id of this CreateAWireTransferParameters.

        The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent.

        :return: The external_account_id of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this CreateAWireTransferParameters.

        The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent.

        :param external_account_id: The external_account_id of this CreateAWireTransferParameters.
        :type external_account_id: str
        """

        self._external_account_id = external_account_id

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this CreateAWireTransferParameters.

        The message that will show on the recipient's bank statement.

        :return: The message_to_recipient of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this CreateAWireTransferParameters.

        The message that will show on the recipient's bank statement.

        :param message_to_recipient: The message_to_recipient of this CreateAWireTransferParameters.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")
        if message_to_recipient is not None and len(message_to_recipient) > 200:
            raise ValueError("Invalid value for `message_to_recipient`, length must be less than or equal to `200`")
        if message_to_recipient is not None and len(message_to_recipient) < 1:
            raise ValueError("Invalid value for `message_to_recipient`, length must be greater than or equal to `1`")

        self._message_to_recipient = message_to_recipient

    @property
    def require_approval(self):
        """Gets the require_approval of this CreateAWireTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :return: The require_approval of this CreateAWireTransferParameters.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval):
        """Sets the require_approval of this CreateAWireTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :param require_approval: The require_approval of this CreateAWireTransferParameters.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def routing_number(self):
        """Gets the routing_number of this CreateAWireTransferParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :return: The routing_number of this CreateAWireTransferParameters.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreateAWireTransferParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :param routing_number: The routing_number of this CreateAWireTransferParameters.
        :type routing_number: str
        """
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number
