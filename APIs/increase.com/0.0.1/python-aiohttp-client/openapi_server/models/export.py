# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Export(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, created_at: datetime=None, file_download_url: str=None, file_id: str=None, id: str=None, status: str=None, type: str=None):
        """Export - a model defined in OpenAPI

        :param category: The category of this Export.
        :param created_at: The created_at of this Export.
        :param file_download_url: The file_download_url of this Export.
        :param file_id: The file_id of this Export.
        :param id: The id of this Export.
        :param status: The status of this Export.
        :param type: The type of this Export.
        """
        self.openapi_types = {
            'category': str,
            'created_at': datetime,
            'file_download_url': str,
            'file_id': str,
            'id': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'created_at': 'created_at',
            'file_download_url': 'file_download_url',
            'file_id': 'file_id',
            'id': 'id',
            'status': 'status',
            'type': 'type'
        }

        self._category = category
        self._created_at = created_at
        self._file_download_url = file_download_url
        self._file_id = file_id
        self._id = id
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Export':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The export of this Export.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Export.

        The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.

        :return: The category of this Export.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Export.

        The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.

        :param category: The category of this Export.
        :type category: str
        """
        allowed_values = ["transaction_csv", "balance_csv"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this Export.

        The time the Export was created.

        :return: The created_at of this Export.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Export.

        The time the Export was created.

        :param created_at: The created_at of this Export.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def file_download_url(self):
        """Gets the file_download_url of this Export.

        A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.

        :return: The file_download_url of this Export.
        :rtype: str
        """
        return self._file_download_url

    @file_download_url.setter
    def file_download_url(self, file_download_url):
        """Sets the file_download_url of this Export.

        A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.

        :param file_download_url: The file_download_url of this Export.
        :type file_download_url: str
        """
        if file_download_url is None:
            raise ValueError("Invalid value for `file_download_url`, must not be `None`")

        self._file_download_url = file_download_url

    @property
    def file_id(self):
        """Gets the file_id of this Export.

        The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.

        :return: The file_id of this Export.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Export.

        The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.

        :param file_id: The file_id of this Export.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this Export.

        The Export identifier.

        :return: The id of this Export.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Export.

        The Export identifier.

        :param id: The id of this Export.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this Export.

        The status of the Export.

        :return: The status of this Export.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Export.

        The status of the Export.

        :param status: The status of this Export.
        :type status: str
        """
        allowed_values = ["pending", "complete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Export.

        A constant representing the object's type. For this resource it will always be `export`.

        :return: The type of this Export.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Export.

        A constant representing the object's type. For this resource it will always be `export`.

        :param type: The type of this Export.
        :type type: str
        """
        allowed_values = ["export"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
